Module(body=[Import(names=[alias(name='inspect')]), ImportFrom(module='prompt_toolkit', names=[alias(name='PromptSession')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='IsDone'), alias(name='Always'), alias(name='Condition')], level=0), ImportFrom(module='prompt_toolkit.layout', names=[alias(name='FormattedTextControl'), alias(name='Layout'), alias(name='HSplit'), alias(name='ConditionalContainer'), alias(name='Window')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style'), alias(name='merge_styles')], level=0), ImportFrom(module='prompt_toolkit.validation', names=[alias(name='Validator'), alias(name='ValidationError')], level=0), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Any'), alias(name='List'), alias(name='Dict'), alias(name='Union'), alias(name='Callable'), alias(name='Sequence'), alias(name='Tuple')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_STYLE'), alias(name='DEFAULT_SELECTED_POINTER'), alias(name='INDICATOR_SELECTED'), alias(name='INDICATOR_UNSELECTED'), alias(name='INVALID_INPUT')], level=0), Assign(targets=[Name(id='FormattedText', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='Choice', bases=[], keywords=[], body=[Expr(value=Constant(value='One choice in a :meth:`select`, :meth:`rawselect` or :meth:`checkbox`.\n\n    Args:\n        title: Text shown in the selection list.\n\n        value: Value returned, when the choice is selected. If this argument\n               is `None` or unset, then the value of `title` is used.\n\n        disabled: If set, the choice can not be selected by the user. The\n                  provided text is used to explain, why the selection is\n                  disabled.\n\n        checked: Preselect this choice when displaying the options.\n\n        shortcut_key: Key shortcut used to select this item.\n    ')), AnnAssign(target=Name(id='title', ctx=Store()), annotation=Name(id='FormattedText', ctx=Load()), simple=1), Expr(value=Constant(value='Display string for the choice')), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Value of the choice')), AnnAssign(target=Name(id='disabled', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Whether the choice can be selected')), AnnAssign(target=Name(id='checked', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Whether the choice is initially selected')), AnnAssign(target=Name(id='shortcut_key', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='A shortcut key for the choice')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='FormattedText', ctx=Load())), arg(arg='value', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='disabled', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='checked', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='shortcut_key', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='disabled', ctx=Store())], value=Name(id='disabled', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='checked', ctx=Store())], value=IfExp(test=Compare(left=Name(id='checked', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='checked', ctx=Load()), orelse=Constant(value=False))), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='title', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='token', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='token', ctx=Store()), iter=Name(id='title', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='title', ctx=Load()))])]), If(test=Compare(left=Name(id='shortcut_key', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='shortcut_key', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_shortcut', ctx=Store())], value=Name(id='shortcut_key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shortcut_key', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shortcut_key', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='shortcut_key', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_shortcut', ctx=Store())], value=Constant(value=False))])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shortcut_key', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_shortcut', ctx=Store())], value=Constant(value=True))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='build', args=arguments(posonlyargs=[], args=[arg(arg='c', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Choice'), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a choice object from different representations.\n\n        Args:\n            c: Either a :obj:`str`, :class:`Choice` or :obj:`dict` with\n               ``name``, ``value``, ``disabled``, ``checked`` and\n               ``key`` properties.\n\n        Returns:\n            An instance of the :class:`Choice` object.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Choice', ctx=Load())], keywords=[]), body=[Return(value=Name(id='c', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='Choice', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Choice', ctx=Load()), args=[Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='value')], keywords=[]), Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='disabled'), Constant(value=None)], keywords=[]), Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='checked')], keywords=[]), Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='key')], keywords=[])], keywords=[]))])])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Constant(value='Choice')), FunctionDef(name='get_shortcut_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='shortcut_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value='-) '))], orelse=[Return(value=Call(func=Attribute(value=Constant(value='{}) '), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='shortcut_key', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='Separator', bases=[Name(id='Choice', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Used to space/separate choices group.')), AnnAssign(target=Name(id='default_separator', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=15)), simple=1), Expr(value=Constant(value='The default separator used if none is specified')), AnnAssign(target=Name(id='line', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value='The string being used as a separator')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create a separator in a list.\n\n        Args:\n            line: Text to be displayed in the list, by default uses ``---``.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='line', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='default_separator', ctx=Load())])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Load()), Constant(value=None), Constant(value='-')], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='InquirerControl', bases=[Name(id='FormattedTextControl', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='SHORTCUT_KEYS', ctx=Store())], value=List(elts=[Constant(value='1'), Constant(value='2'), Constant(value='3'), Constant(value='4'), Constant(value='5'), Constant(value='6'), Constant(value='7'), Constant(value='8'), Constant(value='9'), Constant(value='0'), Constant(value='a'), Constant(value='b'), Constant(value='c'), Constant(value='d'), Constant(value='e'), Constant(value='f'), Constant(value='g'), Constant(value='h'), Constant(value='i'), Constant(value='j'), Constant(value='k'), Constant(value='l'), Constant(value='m'), Constant(value='n'), Constant(value='o'), Constant(value='p'), Constant(value='q'), Constant(value='r'), Constant(value='s'), Constant(value='t'), Constant(value='u'), Constant(value='v'), Constant(value='w'), Constant(value='x'), Constant(value='y'), Constant(value='z')], ctx=Load())), AnnAssign(target=Name(id='choices', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Choice', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='default', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='selected_options', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='use_indicator', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='use_shortcuts', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='use_arrow_keys', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='pointer', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='pointed_at', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='is_answered', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='choices', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='pointer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='use_indicator', annotation=Name(id='bool', ctx=Load())), arg(arg='use_shortcuts', annotation=Name(id='bool', ctx=Load())), arg(arg='show_selected', annotation=Name(id='bool', ctx=Load())), arg(arg='use_arrow_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='initial_choice', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None), Name(id='DEFAULT_SELECTED_POINTER', ctx=Load()), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_indicator', ctx=Store())], value=Name(id='use_indicator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_shortcuts', ctx=Store())], value=Name(id='use_shortcuts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_selected', ctx=Store())], value=Name(id='show_selected', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_arrow_keys', ctx=Store())], value=Name(id='use_arrow_keys', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default', ctx=Store())], value=Name(id='default', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pointer', ctx=Store())], value=Name(id='pointer', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='default', ctx=Load()), ops=[NotIn()], comparators=[Name(id='choices', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid `default` value passed. The value (`'), FormattedValue(value=Name(id='default', ctx=Load()), conversion=-1), Constant(value='`) does not exist in the set of choices. Please make sure the default value is one of the available choices.')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='initial_choice', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pointed_at', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='initial_choice', ctx=Load()), ops=[In()], comparators=[Name(id='choices', ctx=Load())]), body=[Assign(targets=[Name(id='pointed_at', ctx=Store())], value=Call(func=Attribute(value=Name(id='choices', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='initial_choice', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid `initial_choice` value passed. The value (`'), FormattedValue(value=Name(id='initial_choice', ctx=Load()), conversion=-1), Constant(value='`) does not exist in the set of choices. Please make sure the initial value is one of the available choices.')])], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_answered', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='submission_attempted', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='error_message', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selected_options', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_choices', ctx=Load()), args=[Name(id='choices', ctx=Load()), Name(id='pointed_at', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assign_shortcut_keys', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_choice_tokens', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_selection_valid', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid 'initial_choice' value ('"), FormattedValue(value=Name(id='initial_choice', ctx=Load()), conversion=-1), Constant(value="'). It must be a selectable value.")])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_is_selected', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='choice', annotation=Name(id='Choice', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='default', ctx=Load()), Name(id='Choice', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='compare_default', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='default', ctx=Load()), ops=[Eq()], comparators=[Name(id='choice', ctx=Load())]))], orelse=[Assign(targets=[Name(id='compare_default', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='default', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='choice', ctx=Load()), attr='value', ctx=Load())]))]), Return(value=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Attribute(value=Name(id='choice', ctx=Load()), attr='checked', ctx=Load()), BoolOp(op=And(), values=[Name(id='compare_default', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='choice', ctx=Load()), attr='disabled', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_assign_shortcut_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='available_shortcuts', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='SHORTCUT_KEYS', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load()), ops=[In()], comparators=[Name(id='available_shortcuts', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='available_shortcuts', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Invalid shortcut '{}'for choice '{}'. Shortcuts should be single characters or numbers. Make sure that all your shortcuts are unique."), attr='format', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load()), Attribute(value=Name(id='c', ctx=Load()), attr='title', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[])], orelse=[]), Assign(targets=[Name(id='shortcut_idx', ctx=Store())], value=Constant(value=0)), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='c', ctx=Load()), attr='auto_shortcut', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='c', ctx=Load()), attr='disabled', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Store())], value=Subscript(value=Name(id='available_shortcuts', ctx=Load()), slice=Name(id='shortcut_idx', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='shortcut_idx', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='shortcut_idx', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='available_shortcuts', ctx=Load())], keywords=[])]), body=[Break()], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_init_choices', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='choices', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='pointed_at', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Name(id='pointed_at', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Store())], value=Name(id='pointed_at', ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='choices', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Attribute(value=Name(id='Choice', ctx=Load()), attr='build', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_selected', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selected_options', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='pointed_at', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='choice', ctx=Load()), attr='disabled', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Store()), Name(id='pointed_at', ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='choice_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_choice_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='choice', annotation=Name(id='Choice', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='selected', ctx=Store())], value=Compare(left=Attribute(value=Name(id='choice', ctx=Load()), attr='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='selected_options', ctx=Load())])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pointer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:pointer'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pointer', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:text'), BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=3))], ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='[SetCursorPosition]'), Constant(value='')], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='pointer_length', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pointer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pointer', ctx=Load())], keywords=[]), orelse=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:text'), BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Constant(value=2), op=Add(), right=Name(id='pointer_length', ctx=Load())))], ctx=Load())], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='choice', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:separator'), Call(func=Attribute(value=Constant(value='{}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='choice', ctx=Load()), attr='disabled', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[IfExp(test=Name(id='selected', ctx=Load()), body=Constant(value='class:selected'), orelse=Constant(value='class:disabled')), Constant(value='- ')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[IfExp(test=Name(id='selected', ctx=Load()), body=Constant(value='class:selected'), orelse=Constant(value='class:disabled')), Call(func=Attribute(value=Constant(value='- {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[IfExp(test=Name(id='selected', ctx=Load()), body=Constant(value='class:selected'), orelse=Constant(value='class:disabled')), Call(func=Attribute(value=Constant(value='{}'), attr='format', ctx=Load()), args=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='disabled', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=Constant(value=''), orelse=Call(func=Attribute(value=Constant(value=' ({})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='disabled', ctx=Load())], keywords=[]))], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='shortcut', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_shortcuts', ctx=Load()), body=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='get_shortcut_title', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=''))), If(test=Name(id='selected', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_indicator', ctx=Load()), body=[Assign(targets=[Name(id='indicator', ctx=Store())], value=BinOp(left=Name(id='INDICATOR_SELECTED', ctx=Load()), op=Add(), right=Constant(value=' ')))], orelse=[Assign(targets=[Name(id='indicator', ctx=Store())], value=Constant(value=''))]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:selected'), Call(func=Attribute(value=Constant(value='{}'), attr='format', ctx=Load()), args=[Name(id='indicator', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_indicator', ctx=Load()), body=[Assign(targets=[Name(id='indicator', ctx=Store())], value=BinOp(left=Name(id='INDICATOR_UNSELECTED', ctx=Load()), op=Add(), right=Constant(value=' ')))], orelse=[Assign(targets=[Name(id='indicator', ctx=Store())], value=Constant(value=''))]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:text'), Call(func=Attribute(value=Constant(value='{}'), attr='format', ctx=Load()), args=[Name(id='indicator', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='selected', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:selected'), Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[Name(id='shortcut', ctx=Load()), Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:highlighted'), Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[Name(id='shortcut', ctx=Load()), Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:text'), Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[Name(id='shortcut', ctx=Load()), Attribute(value=Name(id='choice', ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))])])])])]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[]))], decorator_list=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_selected', ctx=Load()), body=[Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='answer', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_shortcuts', ctx=Load()), body=Call(func=Attribute(value=Name(id='current', ctx=Load()), attr='get_shortcut_title', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=''))), AugAssign(target=Name(id='answer', ctx=Store()), op=Add(), value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='current', ctx=Load()), attr='title', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='current', ctx=Load()), attr='title', ctx=Load()), orelse=Subscript(value=Subscript(value=Attribute(value=Name(id='current', ctx=Load()), attr='title', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:text'), Call(func=Attribute(value=Constant(value='  Answer: {}'), attr='format', ctx=Load()), args=[Name(id='answer', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_selection_a_separator', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='selected', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='selected', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_selection_disabled', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load()), ctx=Load()), attr='disabled', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_selection_valid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_selection_disabled', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_selection_a_separator', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='select_previous', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='choice_count', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='select_next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='choice_count', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_pointed_at', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='pointed_at', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='Choice', ctx=Load())), FunctionDef(name='get_selected_values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), ifs=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='selected_options', ctx=Load())])])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Choice', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='build_validator', args=arguments(posonlyargs=[], args=[arg(arg='validate', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='validate', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isclass', ctx=Load()), args=[Name(id='validate', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='validate', ctx=Load()), Name(id='Validator', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='validate', ctx=Load()), Name(id='Validator', ctx=Load())], keywords=[]), body=[Return(value=Name(id='validate', ctx=Load()))], orelse=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='validate', ctx=Load())], keywords=[]), body=[ClassDef(name='_InputValidator', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='verdict', ctx=Store())], value=Call(func=Name(id='validate', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='verdict', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=True)]), body=[If(test=Compare(left=Name(id='verdict', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Assign(targets=[Name(id='verdict', ctx=Store())], value=Name(id='INVALID_INPUT', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='ValidationError', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='verdict', ctx=Load())), keyword(arg='cursor_position', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[]))]))], orelse=[])], decorator_list=[])], decorator_list=[]), Return(value=Call(func=Name(id='_InputValidator', ctx=Load()), args=[], keywords=[]))], orelse=[])])])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Validator', ctx=Load()), ctx=Load())), FunctionDef(name='_fix_unecessary_blank_lines', args=arguments(posonlyargs=[], args=[arg(arg='ps', annotation=Name(id='PromptSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="This is a fix for additional empty lines added by prompt toolkit.\n\n    This assumes the layout of the default session doesn't change, if it\n    does, this needs an update.")), Assign(targets=[Name(id='default_container', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ps', ctx=Load()), attr='layout', ctx=Load()), attr='container', ctx=Load())), Assign(targets=[Name(id='default_buffer_window', ctx=Store())], value=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='default_container', ctx=Load()), attr='get_children', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='content', ctx=Load()), attr='get_children', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='content', ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default_buffer_window', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='default_buffer_window', ctx=Load()), attr='dont_extend_height', ctx=Store())], value=Call(func=Name(id='Always', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='default_buffer_window', ctx=Load()), attr='always_hide_cursor', ctx=Store())], value=Call(func=Name(id='Always', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create_inquirer_layout', args=arguments(posonlyargs=[], args=[arg(arg='ic', annotation=Name(id='InquirerControl', ctx=Load())), arg(arg='get_prompt_tokens', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Create a layout combining question and inquirer selection.')), Assign(targets=[Name(id='ps', ctx=Store())], value=Call(func=Name(id='PromptSession', ctx=Load()), args=[Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(arg='reserve_space_for_menu', value=Constant(value=0)), keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Name(id='_fix_unecessary_blank_lines', ctx=Load()), args=[Name(id='ps', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validation_prompt', ctx=Store())], value=Call(func=Name(id='PromptSession', ctx=Load()), args=[], keywords=[keyword(arg='bottom_toolbar', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='ic', ctx=Load()), attr='error_message', ctx=Load()))), keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Call(func=Name(id='Layout', ctx=Load()), args=[Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Attribute(value=Attribute(value=Name(id='ps', ctx=Load()), attr='layout', ctx=Load()), attr='container', ctx=Load()), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Name(id='ic', ctx=Load())], keywords=[])], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Call(func=Name(id='IsDone', ctx=Load()), args=[], keywords=[])))]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validation_prompt', ctx=Load()), attr='layout', ctx=Load()), attr='container', ctx=Load())], keywords=[keyword(arg='filter', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='ic', ctx=Load()), attr='error_message', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], keywords=[]))])], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Layout', ctx=Load())), FunctionDef(name='print_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Print formatted text.\n\n    Sometimes you want to spice up your printed messages a bit,\n    :meth:`questionary.print` is a helper to do just that.\n\n    Example:\n\n        >>> import questionary\n        >>> questionary.print("Hello World 🦄", style="bold italic fg:darkred")\n        Hello World 🦄\n\n    .. image:: ../images/print.gif\n\n    Args:\n        text: Text to be printed.\n        style: Style used for printing. The style argument uses the\n            prompt :ref:`toolkit style strings <prompt_toolkit:styling>`.\n    ')), ImportFrom(module='prompt_toolkit', names=[alias(name='print_formatted_text', asname='pt_print')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='FormattedText', asname='FText')], level=0), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='text_style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='text'), Name(id='style', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='text_style', ctx=Store())], value=Name(id='DEFAULT_STYLE', ctx=Load()))]), Expr(value=Call(func=Name(id='pt_print', ctx=Load()), args=[Call(func=Name(id='FText', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='class:text'), Name(id='text', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])], keywords=[keyword(arg='style', value=Name(id='text_style', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])