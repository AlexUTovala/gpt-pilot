Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Optional'), alias(name='List'), alias(name='Tuple')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.shortcuts.prompt', names=[alias(name='PromptSession')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style'), alias(name='merge_styles')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='Lexer'), alias(name='SimpleLexer')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX'), alias(name='DEFAULT_STYLE'), alias(name='INSTRUCTION_MULTILINE')], level=0), ImportFrom(module='questionary.prompts.common', names=[alias(name='build_validator')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='str', ctx=Load())), arg(arg='validate', annotation=Name(id='Any', ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())), arg(arg='multiline', annotation=Name(id='bool', ctx=Load())), arg(arg='instruction', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='lexer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Lexer', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=''), Constant(value=None), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Prompt the user to enter a free text message.\n\n    This question type can be used to prompt the user for some text input.\n\n    Example:\n        >>> import questionary\n        >>> questionary.text("What\'s your first name?").ask()\n        ? What\'s your first name? Tom\n        \'Tom\'\n\n    .. image:: ../images/text.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n    Args:\n        message: Question text.\n\n        default: Default value will be returned if the user just hits\n                 enter.\n\n        validate: Require the entered value to pass a validation. The\n                  value can not be submitted until the validator accepts\n                  it (e.g. to check minimum password length).\n\n                  This can either be a function accepting the input and\n                  returning a boolean, or an class reference to a\n                  subclass of the prompt toolkit Validator class.\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n        multiline: If ``True``, multiline input will be enabled.\n\n        instruction: Write instructions for the user if needed. If ``None``\n                     and ``multiline=True``, some instructions will appear.\n\n        lexer: Supply a valid lexer to style the answer. Leave empty to\n               use a simple one by default.\n\n        kwargs: Additional arguments, they will be passed to prompt toolkit.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), Assign(targets=[Name(id='merged_style', ctx=Store())], value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Name(id='DEFAULT_STYLE', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='lexer', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='lexer', ctx=Load()), Call(func=Name(id='SimpleLexer', ctx=Load()), args=[Constant(value='class:answer')], keywords=[])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='build_validator', ctx=Load()), args=[Name(id='validate', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='instruction', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='multiline', ctx=Load())]), body=[Assign(targets=[Name(id='instruction', ctx=Store())], value=Name(id='INSTRUCTION_MULTILINE', ctx=Load()))], orelse=[]), FunctionDef(name='get_prompt_tokens', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='class:qmark'), Name(id='qmark', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:question'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())), If(test=Name(id='instruction', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:instruction'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='instruction', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='PromptSession', ctx=Load()), args=[Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='merged_style', ctx=Load())), keyword(arg='validator', value=Name(id='validator', ctx=Load())), keyword(arg='lexer', value=Name(id='lexer', ctx=Load())), keyword(arg='multiline', value=Name(id='multiline', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='default_buffer', ctx=Load()), attr='reset', ctx=Load()), args=[Call(func=Name(id='Document', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='Question', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='app', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])