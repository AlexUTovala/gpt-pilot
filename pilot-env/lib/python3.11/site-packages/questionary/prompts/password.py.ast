Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Optional')], level=0), ImportFrom(module='questionary', names=[alias(name='Style')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX')], level=0), ImportFrom(module='questionary.prompts', names=[alias(name='text')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='password', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='str', ctx=Load())), arg(arg='validate', annotation=Name(id='Any', ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=''), Constant(value=None), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='A text input where a user can enter a secret which won\'t be displayed on the CLI.\n\n    This question type can be used to prompt the user for information\n    that should not be shown in the command line. The typed text will be\n    replaced with ``*``.\n\n    Example:\n        >>> import questionary\n        >>> questionary.password("What\'s your secret?").ask()\n        ? What\'s your secret? ********\n        \'secret42\'\n\n    .. image:: ../images/password.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n    Args:\n        message: Question text.\n\n        default: Default value will be returned if the user just hits\n                 enter.\n\n        validate: Require the entered value to pass a validation. The\n                  value can not be submitted until the validator accepts\n                  it (e.g. to check minimum password length).\n\n                  This can either be a function accepting the input and\n                  returning a boolean, or an class reference to a\n                  subclass of the prompt toolkit Validator class.\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='text', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='default', ctx=Load()), Name(id='validate', ctx=Load()), Name(id='qmark', ctx=Load()), Name(id='style', ctx=Load())], keywords=[keyword(arg='is_password', value=Constant(value=True)), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])