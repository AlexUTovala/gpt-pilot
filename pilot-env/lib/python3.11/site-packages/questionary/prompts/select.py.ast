Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Sequence'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style'), alias(name='merge_styles')], level=0), ImportFrom(module='questionary', names=[alias(name='utils')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX'), alias(name='DEFAULT_SELECTED_POINTER'), alias(name='DEFAULT_STYLE')], level=0), ImportFrom(module='questionary.prompts', names=[alias(name='common')], level=0), ImportFrom(module='questionary.prompts.common', names=[alias(name='Choice'), alias(name='InquirerControl'), alias(name='Separator')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='select', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='pointer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())), arg(arg='use_shortcuts', annotation=Name(id='bool', ctx=Load())), arg(arg='use_arrow_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='use_indicator', annotation=Name(id='bool', ctx=Load())), arg(arg='use_jk_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='show_selected', annotation=Name(id='bool', ctx=Load())), arg(arg='instruction', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Name(id='DEFAULT_SELECTED_POINTER', ctx=Load()), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='A list of items to select **one** option from.\n\n    The user can pick one option and confirm it (if you want to allow\n    the user to select multiple options, use :meth:`questionary.checkbox` instead).\n\n    Example:\n        >>> import questionary\n        >>> questionary.select(\n        ...     "What do you want to do?",\n        ...     choices=[\n        ...         "Order a pizza",\n        ...         "Make a reservation",\n        ...         "Ask for opening hours"\n        ...     ]).ask()\n        ? What do you want to do? Order a pizza\n        \'Order a pizza\'\n\n    .. image:: ../images/select.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n\n    Args:\n        message: Question text\n\n        choices: Items shown in the selection, this can contain :class:`Choice` or\n                 or :class:`Separator` objects or simple items as strings. Passing\n                 :class:`Choice` objects, allows you to configure the item more\n                 (e.g. preselecting it or disabling it).\n\n        default: A value corresponding to a selectable item in the choices,\n                 to initially set the pointer position to.\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        pointer: Pointer symbol in front of the currently highlighted element.\n                 By default this is a ``Â»``.\n                 Use ``None`` to disable it.\n\n        instruction: A hint on how to navigate the menu.\n                     It\'s ``(Use shortcuts)`` if only ``use_shortcuts`` is set\n                     to True, ``(Use arrow keys or shortcuts)`` if ``use_arrow_keys``\n                     & ``use_shortcuts`` are set and ``(Use arrow keys)`` by default.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n        use_indicator: Flag to enable the small indicator in front of the\n                       list highlighting the current location of the selection\n                       cursor.\n\n        use_shortcuts: Allow the user to select items from the list using\n                       shortcuts. The shortcuts will be displayed in front of\n                       the list items. Arrow keys, j/k keys and shortcuts are\n                       not mutually exclusive.\n\n        use_arrow_keys: Allow the user to select items from the list using\n                        arrow keys. Arrow keys, j/k keys and shortcuts are not\n                        mutually exclusive.\n\n        use_jk_keys: Allow the user to select items from the list using\n                     `j` (down) and `k` (up) keys. Arrow keys, j/k keys and\n                     shortcuts are not mutually exclusive.\n\n        show_selected: Display current selection choice at the bottom of list.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='use_arrow_keys', ctx=Load()), Name(id='use_shortcuts', ctx=Load()), Name(id='use_jk_keys', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Some option to move the selection is required. Arrow keys, j/k keys or shortcuts.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='use_shortcuts', ctx=Load()), Name(id='use_jk_keys', ctx=Load())]), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='c', ctx=Load()), Constant(value='shortcut_key'), Constant(value='')], keywords=[]), ops=[In()], comparators=[List(elts=[Constant(value='j'), Constant(value='k')], ctx=Load())]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='choices', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='A choice is trying to register j/k as a shortcut key when they are in use as arrow keys disable one or the other.')], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='choices', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='choices', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='A list of choices needs to be provided.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='use_shortcuts', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='choices', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='InquirerControl', ctx=Load()), attr='SHORTCUT_KEYS', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='A list with shortcuts supports a maximum of {} choices as this is the maximum number of keyboard shortcuts that are available. Youprovided {} choices!'), attr='format', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='InquirerControl', ctx=Load()), attr='SHORTCUT_KEYS', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='choices', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='merged_style', ctx=Store())], value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Name(id='DEFAULT_STYLE', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='ic', ctx=Store())], value=Call(func=Name(id='InquirerControl', ctx=Load()), args=[Name(id='choices', ctx=Load()), Name(id='default', ctx=Load())], keywords=[keyword(arg='pointer', value=Name(id='pointer', ctx=Load())), keyword(arg='use_indicator', value=Name(id='use_indicator', ctx=Load())), keyword(arg='use_shortcuts', value=Name(id='use_shortcuts', ctx=Load())), keyword(arg='show_selected', value=Name(id='show_selected', ctx=Load())), keyword(arg='use_arrow_keys', value=Name(id='use_arrow_keys', ctx=Load())), keyword(arg='initial_choice', value=Name(id='default', ctx=Load()))])), FunctionDef(name='get_prompt_tokens', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='class:qmark'), Name(id='qmark', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:question'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())), If(test=Attribute(value=Name(id='ic', ctx=Load()), attr='is_answered', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[]), attr='title', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='token', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='token', ctx=Store()), iter=Attribute(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[]), attr='title', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Attribute(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[]), attr='title', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[If(test=Name(id='instruction', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:instruction'), Name(id='instruction', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='use_shortcuts', ctx=Load()), Name(id='use_arrow_keys', ctx=Load())]), body=[Assign(targets=[Name(id='instruction_msg', ctx=Store())], value=Constant(value='(Use shortcuts or arrow keys)'))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='use_shortcuts', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='use_arrow_keys', ctx=Load()))]), body=[Assign(targets=[Name(id='instruction_msg', ctx=Store())], value=Constant(value='(Use shortcuts)'))], orelse=[Assign(targets=[Name(id='instruction_msg', ctx=Store())], value=Constant(value='(Use arrow keys)'))])]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:instruction'), Name(id='instruction_msg', ctx=Load())], ctx=Load())], keywords=[]))])]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Attribute(value=Name(id='common', ctx=Load()), attr='create_inquirer_layout', ctx=Load()), args=[Name(id='ic', ctx=Load()), Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='KeyboardInterrupt', ctx=Load())), keyword(arg='style', value=Constant(value='class:aborting'))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlQ', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlC', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), If(test=Name(id='use_shortcuts', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='ic', ctx=Load()), attr='choices', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='c', ctx=Load()), attr='disabled', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='use_arrow_keys', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} does not have a shortcut and arrow keys for movement are disabled. This choice is not reachable.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='title', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Continue()], orelse=[]), FunctionDef(name='_reg_binding', args=arguments(posonlyargs=[], args=[arg(arg='i'), arg(arg='keys')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='select_choice', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='pointed_at', ctx=Store())], value=Name(id='i', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])])], decorator_list=[]), Expr(value=Call(func=Name(id='_reg_binding', ctx=Load()), args=[Name(id='i', ctx=Load()), Attribute(value=Name(id='c', ctx=Load()), attr='shortcut_key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), FunctionDef(name='move_cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_next', ctx=Load()), args=[], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='is_selection_valid', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_next', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='move_cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_previous', ctx=Load()), args=[], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='is_selection_valid', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_previous', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), If(test=Name(id='use_arrow_keys', ctx=Load()), body=[Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_down', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_up', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='use_jk_keys', ctx=Load()), body=[Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='j')], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_down', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='k')], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_up', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='set_answer', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='is_answered', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Attribute(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[]), attr='value', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='other', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disallow inserting other text. ')), Pass()], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])]), Return(value=Call(func=Name(id='Question', ctx=Load()), args=[Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='layout', value=Name(id='layout', ctx=Load())), keyword(arg='key_bindings', value=Name(id='bindings', ctx=Load())), keyword(arg='style', value=Name(id='merged_style', ctx=Load())), keyword(value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='used_kwargs', ctx=Load()), args=[Name(id='kwargs', ctx=Load()), Attribute(value=Name(id='Application', ctx=Load()), attr='__init__', ctx=Load())], keywords=[]))])], keywords=[]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])