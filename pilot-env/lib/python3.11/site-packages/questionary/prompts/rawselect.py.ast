Module(body=[ImportFrom(module='typing', names=[alias(name='Sequence'), alias(name='Optional'), alias(name='Any'), alias(name='Union'), alias(name='Dict')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX'), alias(name='DEFAULT_SELECTED_POINTER')], level=0), ImportFrom(module='questionary.prompts', names=[alias(name='select')], level=0), ImportFrom(module='questionary.prompts.common', names=[alias(name='Choice')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='rawselect', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='pointer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Name(id='DEFAULT_SELECTED_POINTER', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Ask the user to select one item from a list of choices using shortcuts.\n\n    The user can only select one option.\n\n    Example:\n        >>> import questionary\n        >>> questionary.rawselect(\n        ...     "What do you want to do?",\n        ...     choices=[\n        ...         "Order a pizza",\n        ...         "Make a reservation",\n        ...         "Ask for opening hours"\n        ...     ]).ask()\n        ? What do you want to do? Order a pizza\n        \'Order a pizza\'\n\n    .. image:: ../images/rawselect.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n    Args:\n        message: Question text.\n\n        choices: Items shown in the selection, this can contain :class:`Choice` or\n                 or :class:`Separator` objects or simple items as strings. Passing\n                 :class:`Choice` objects, allows you to configure the item more\n                 (e.g. preselecting it or disabling it).\n\n        default: Default return value (single value).\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        pointer: Pointer symbol in front of the currently highlighted element.\n                 By default this is a ``Â»``.\n                 Use ``None`` to disable it.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), Return(value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='choices', ctx=Load()), Name(id='default', ctx=Load()), Name(id='qmark', ctx=Load()), Name(id='pointer', ctx=Load()), Name(id='style', ctx=Load())], keywords=[keyword(arg='use_shortcuts', value=Constant(value=True)), keyword(arg='use_arrow_keys', value=Constant(value=False)), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])