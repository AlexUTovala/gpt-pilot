Module(body=[ImportFrom(module='prompt_toolkit', names=[alias(name='PromptSession')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='merge_styles'), alias(name='Style')], level=0), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Any')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='NO_OR_YES'), alias(name='YES'), alias(name='NO'), alias(name='YES_OR_NO'), alias(name='DEFAULT_STYLE'), alias(name='DEFAULT_QUESTION_PREFIX')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='confirm', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='bool', ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())), arg(arg='auto_enter', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=True), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='A yes or no question. The user can either confirm or deny.\n\n    This question type can be used to prompt the user for a confirmation\n    of a yes-or-no question. If the user just hits enter, the default\n    value will be returned.\n\n    Example:\n        >>> import questionary\n        >>> questionary.confirm("Are you amazed?").ask()\n        ? Are you amazed? Yes\n        True\n\n    .. image:: ../images/confirm.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n\n    Args:\n        message: Question text.\n\n        default: Default value will be returned if the user just hits\n                 enter.\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n        auto_enter: If set to `False`, the user needs to press the \'enter\' key to\n            accept their answer. If set to `True`, a valid input will be\n            accepted without the need to press \'Enter\'.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using `.ask()`).\n    ')), Assign(targets=[Name(id='merged_style', ctx=Store())], value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Name(id='DEFAULT_STYLE', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='status', ctx=Store())], value=Dict(keys=[Constant(value='answer'), Constant(value='complete')], values=[Constant(value=None), Constant(value=False)])), FunctionDef(name='get_prompt_tokens', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:qmark'), Name(id='qmark', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:question'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='complete'), ctx=Load())), body=[Assign(targets=[Name(id='instruction', ctx=Store())], value=IfExp(test=Name(id='default', ctx=Load()), body=Name(id='YES_OR_NO', ctx=Load()), orelse=Name(id='NO_OR_YES', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:instruction'), Call(func=Attribute(value=Constant(value='{} '), attr='format', ctx=Load()), args=[Name(id='instruction', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='answer', ctx=Store())], value=IfExp(test=Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Load()), body=Name(id='YES', ctx=Load()), orelse=Name(id='NO', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Name(id='answer', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exit_with_result', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='complete'), ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='KeyboardInterrupt', ctx=Load())), keyword(arg='style', value=Constant(value='class:aborting'))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlQ', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlC', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='key_n', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Store())], value=Constant(value=False)), If(test=Name(id='auto_enter', ctx=Load()), body=[Expr(value=Call(func=Name(id='exit_with_result', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='n')], keywords=[]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='N')], keywords=[])]), FunctionDef(name='key_y', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Store())], value=Constant(value=True)), If(test=Name(id='auto_enter', ctx=Load()), body=[Expr(value=Call(func=Name(id='exit_with_result', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='y')], keywords=[]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='Y')], keywords=[])]), FunctionDef(name='key_backspace', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Store())], value=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlH', ctx=Load())], keywords=[])]), FunctionDef(name='set_answer', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='status', ctx=Load()), slice=Constant(value='answer'), ctx=Store())], value=Name(id='default', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='exit_with_result', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='other', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disallow inserting other text.')), Pass()], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])]), Return(value=Call(func=Name(id='Question', ctx=Load()), args=[Attribute(value=Call(func=Name(id='PromptSession', ctx=Load()), args=[Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(arg='key_bindings', value=Name(id='bindings', ctx=Load())), keyword(arg='style', value=Name(id='merged_style', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]), attr='app', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])