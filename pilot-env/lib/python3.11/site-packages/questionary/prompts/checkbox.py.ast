Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style'), alias(name='merge_styles')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='FormattedText')], level=0), ImportFrom(module='questionary', names=[alias(name='utils')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX'), alias(name='DEFAULT_SELECTED_POINTER'), alias(name='DEFAULT_STYLE'), alias(name='INVALID_INPUT')], level=0), ImportFrom(module='questionary.prompts', names=[alias(name='common')], level=0), ImportFrom(module='questionary.prompts.common', names=[alias(name='Choice'), alias(name='InquirerControl'), alias(name='Separator')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), FunctionDef(name='checkbox', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='validate', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='pointer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())), arg(arg='initial_choice', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Choice', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='use_arrow_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='use_jk_keys', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='a')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True)), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Name(id='DEFAULT_SELECTED_POINTER', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Ask the user to select from a list of items.\n\n    This is a multiselect, the user can choose one, none or many of the\n    items.\n\n    Example:\n        >>> import questionary\n        >>> questionary.checkbox(\n        ...    \'Select toppings\',\n        ...    choices=[\n        ...        "Cheese",\n        ...        "Tomato",\n        ...        "Pineapple",\n        ...    ]).ask()\n        ? Select toppings done (2 selections)\n        [\'Cheese\', \'Pineapple\']\n\n    .. image:: ../images/checkbox.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n\n    Args:\n        message: Question text\n\n        choices: Items shown in the selection, this can contain :class:`Choice` or\n                 or :class:`Separator` objects or simple items as strings. Passing\n                 :class:`Choice` objects, allows you to configure the item more\n                 (e.g. preselecting it or disabling it).\n\n        default: Default return value (single value). If you want to preselect\n                 multiple items, use ``Choice("foo", checked=True)`` instead.\n\n        validate: Require the entered value to pass a validation. The\n                  value can not be submitted until the validator accepts\n                  it (e.g. to check minimum password length).\n\n                  This should be a function accepting the input and\n                  returning a boolean. Alternatively, the return value\n                  may be a string (indicating failure), which contains\n                  the error message to be displayed.\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``.\n\n        pointer: Pointer symbol in front of the currently highlighted element.\n                 By default this is a ``Â»``.\n                 Use ``None`` to disable it.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n        initial_choice: A value corresponding to a selectable item in the choices,\n                        to initially set the pointer position to.\n\n        use_arrow_keys: Allow the user to select items from the list using\n                        arrow keys.\n\n        use_jk_keys: Allow the user to select items from the list using\n                     `j` (down) and `k` (up) keys.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='use_arrow_keys', ctx=Load()), Name(id='use_jk_keys', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Some option to move the selection is required. Arrow keys or j/k keys.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='merged_style', ctx=Store())], value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Name(id='DEFAULT_STYLE', ctx=Load()), Call(func=Name(id='Style', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='bottom-toolbar'), Constant(value='noreverse')], ctx=Load())], ctx=Load())], keywords=[]), Name(id='style', ctx=Load())], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='validate', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='validate must be callable')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ic', ctx=Store())], value=Call(func=Name(id='InquirerControl', ctx=Load()), args=[Name(id='choices', ctx=Load()), Name(id='default', ctx=Load())], keywords=[keyword(arg='pointer', value=Name(id='pointer', ctx=Load())), keyword(arg='initial_choice', value=Name(id='initial_choice', ctx=Load()))])), FunctionDef(name='get_prompt_tokens', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:qmark'), Name(id='qmark', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:question'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='ic', ctx=Load()), attr='is_answered', ctx=Load()), body=[Assign(targets=[Name(id='nbr_selected', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='nbr_selected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Constant(value='done')], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='nbr_selected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_selected_values', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='title', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_selected_values', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='title', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='token', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='token', ctx=Store()), iter=Name(id='ts', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Call(func=Attribute(value=Constant(value='[{}]'), attr='format', ctx=Load()), args=[Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_selected_values', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='title', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:answer'), Call(func=Attribute(value=Constant(value='done ({} selections)'), attr='format', ctx=Load()), args=[Name(id='nbr_selected', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:instruction'), Constant(value='(Use arrow keys to move, <space> to select, <a> to toggle, <i> to invert)')], ctx=Load())], keywords=[]))]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_selected_values', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_selected_values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='perform_validation', args=arguments(posonlyargs=[], args=[arg(arg='selected_values', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='verdict', ctx=Store())], value=Call(func=Name(id='validate', ctx=Load()), args=[Name(id='selected_values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid', ctx=Store())], value=Compare(left=Name(id='verdict', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])), If(test=UnaryOp(op=Not(), operand=Name(id='valid', ctx=Load())), body=[If(test=Compare(left=Name(id='verdict', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Assign(targets=[Name(id='error_text', ctx=Store())], value=Name(id='INVALID_INPUT', ctx=Load()))], orelse=[Assign(targets=[Name(id='error_text', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='verdict', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='error_message', ctx=Store())], value=Call(func=Name(id='FormattedText', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='class:validation-toolbar'), Name(id='error_text', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='error_message', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='valid', ctx=Load())), Attribute(value=Name(id='ic', ctx=Load()), attr='submission_attempted', ctx=Load())]), body=Name(id='error_message', ctx=Load()), orelse=Constant(value=None))), Return(value=Name(id='valid', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Attribute(value=Name(id='common', ctx=Load()), attr='create_inquirer_layout', ctx=Load()), args=[Name(id='ic', ctx=Load()), Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='KeyboardInterrupt', ctx=Load())), keyword(arg='style', value=Constant(value='class:aborting'))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlQ', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlC', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='toggle', args=arguments(posonlyargs=[], args=[arg(arg='_event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pointed_choice', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='get_pointed_at', ctx=Load()), args=[], keywords=[]), attr='value', ctx=Load())), If(test=Compare(left=Name(id='pointed_choice', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='pointed_choice', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='pointed_choice', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id='perform_validation', ctx=Load()), args=[Call(func=Name(id='get_selected_values', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=' ')], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='invert', args=arguments(posonlyargs=[], args=[arg(arg='_event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inverted_selection', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='ic', ctx=Load()), attr='choices', ctx=Load()), ifs=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='c', ctx=Load()), attr='disabled', ctx=Load()))])], is_async=0)])), Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Store())], value=Name(id='inverted_selection', ctx=Load())), Expr(value=Call(func=Name(id='perform_validation', ctx=Load()), args=[Call(func=Name(id='get_selected_values', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='i')], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='all', args=arguments(posonlyargs=[], args=[arg(arg='_event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_selected', ctx=Store())], value=Constant(value=True)), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='ic', ctx=Load()), attr='choices', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Separator', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='c', ctx=Load()), attr='disabled', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_selected', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), If(test=Name(id='all_selected', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='selected_options', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='perform_validation', ctx=Load()), args=[Call(func=Name(id='get_selected_values', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='a')], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='move_cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_next', ctx=Load()), args=[], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='is_selection_valid', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_next', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='move_cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_previous', ctx=Load()), args=[], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='is_selection_valid', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='ic', ctx=Load()), attr='select_previous', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), If(test=Name(id='use_arrow_keys', ctx=Load()), body=[Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_down', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_up', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='use_jk_keys', ctx=Load()), body=[Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='j')], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_down', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='k')], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Name(id='move_cursor_up', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='set_answer', args=arguments(posonlyargs=[], args=[arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='selected_values', ctx=Store())], value=Call(func=Name(id='get_selected_values', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='submission_attempted', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Name(id='perform_validation', ctx=Load()), args=[Name(id='selected_values', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='ic', ctx=Load()), attr='is_answered', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Name(id='selected_values', ctx=Load()))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load())], keywords=[keyword(arg='eager', value=Constant(value=True))])]), FunctionDef(name='other', args=arguments(posonlyargs=[], args=[arg(arg='_event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disallow inserting other text. ')), Pass()], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])]), Return(value=Call(func=Name(id='Question', ctx=Load()), args=[Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='layout', value=Name(id='layout', ctx=Load())), keyword(arg='key_bindings', value=Name(id='bindings', ctx=Load())), keyword(arg='style', value=Name(id='merged_style', ctx=Load())), keyword(value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='used_kwargs', ctx=Load()), args=[Name(id='kwargs', ctx=Load()), Attribute(value=Name(id='Application', ctx=Load()), attr='__init__', ctx=Load())], keywords=[]))])], keywords=[]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])