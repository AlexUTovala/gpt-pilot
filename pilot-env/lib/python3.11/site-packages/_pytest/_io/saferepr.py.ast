Module(body=[Import(names=[alias(name='pprint')]), Import(names=[alias(name='reprlib')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='IO')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), FunctionDef(name='_try_repr_or_str', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='SystemExit', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value='("'), FormattedValue(value=Name(id='obj', ctx=Load()), conversion=-1), Constant(value='")')]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_format_repr_exception', args=arguments(posonlyargs=[], args=[arg(arg='exc', annotation=Name(id='BaseException', ctx=Load())), arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='exc_info', ctx=Store())], value=Call(func=Name(id='_try_repr_or_str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='SystemExit', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='exc_info', ctx=Store())], value=JoinedStr(values=[Constant(value='unpresentable exception ('), FormattedValue(value=Call(func=Name(id='_try_repr_or_str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Constant(value='<[{} raised in repr()] {} object at 0x{:x}>'), attr='format', ctx=Load()), args=[Name(id='exc_info', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), Call(func=Name(id='id', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_ellipsize', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load())), arg(arg='maxsize', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='maxsize', ctx=Load())]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=BinOp(left=Name(id='maxsize', ctx=Load()), op=Sub(), right=Constant(value=3)), op=FloorDiv(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='j', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=BinOp(left=Name(id='maxsize', ctx=Load()), op=Sub(), right=Constant(value=3)), op=Sub(), right=Name(id='i', ctx=Load()))], keywords=[])), Return(value=BinOp(left=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()), op=Add(), right=Constant(value='...')), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='j', ctx=Load()))), ctx=Load())))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='SafeRepr', bases=[Attribute(value=Name(id='reprlib', ctx=Load()), attr='Repr', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    repr.Repr that limits the resulting size of repr() and includes\n    information on exceptions raised during the call.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='maxsize', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='use_ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        :param maxsize:\n            If not None, will truncate the resulting repr to that specific size, using ellipsis\n            somewhere in the middle to hide the extra text.\n            If None, will not impose any size limits on the returning repr.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maxstring', ctx=Store())], value=IfExp(test=Compare(left=Name(id='maxsize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='maxsize', ctx=Load()), orelse=Constant(value=1000000000))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maxsize', ctx=Store())], value=Name(id='maxsize', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_ascii', ctx=Store())], value=Name(id='use_ascii', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='repr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_ascii', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='ascii', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='SystemExit', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='_format_repr_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='maxsize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='_ellipsize', ctx=Load()), args=[Name(id='s', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='maxsize', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='repr_instance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x', annotation=Name(id='object', ctx=Load())), arg(arg='level', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='SystemExit', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='_format_repr_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='maxsize', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='_ellipsize', ctx=Load()), args=[Name(id='s', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='maxsize', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='safeformat', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a pretty printed string for the given object.\n\n    Failing __repr__ functions of user instances will be represented\n    with a short exception info.\n    ')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Return(value=Call(func=Name(id='_format_repr_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='obj', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='DEFAULT_REPR_MAX_SIZE', ctx=Store())], value=Constant(value=240)), FunctionDef(name='saferepr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='maxsize', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='use_ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_REPR_MAX_SIZE', ctx=Load()), Constant(value=False)]), body=[Expr(value=Constant(value="Return a size-limited safe repr-string for the given object.\n\n    Failing __repr__ functions of user instances will be represented\n    with a short exception info and 'saferepr' generally takes\n    care to never raise exceptions itself.\n\n    This function is a wrapper around the Repr/reprlib functionality of the\n    stdlib.\n    ")), Return(value=Call(func=Attribute(value=Call(func=Name(id='SafeRepr', ctx=Load()), args=[Name(id='maxsize', ctx=Load()), Name(id='use_ascii', ctx=Load())], keywords=[]), attr='repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='saferepr_unlimited', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='use_ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return an unlimited-size safe repr-string for the given object.\n\n    As with saferepr, failing __repr__ functions of user instances\n    will be represented with a short exception info.\n\n    This function is a wrapper around simple repr.\n\n    Note: a cleaner solution would be to alter ``saferepr``this way\n    when maxsize=None, but that might affect some other code.\n    ')), Try(body=[If(test=Name(id='use_ascii', ctx=Load()), body=[Return(value=Call(func=Name(id='ascii', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Return(value=Call(func=Name(id='_format_repr_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='obj', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='AlwaysDispatchingPrettyPrinter', bases=[Attribute(value=Name(id='pprint', ctx=Load()), attr='PrettyPrinter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='PrettyPrinter that always dispatches (regardless of width).')), FunctionDef(name='_format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='object', annotation=Name(id='object', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='indent', annotation=Name(id='int', ctx=Load())), arg(arg='allowance', annotation=Name(id='int', ctx=Load())), arg(arg='context', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='level', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dispatch', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='object', ctx=Load())], keywords=[]), attr='__repr__', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='objid', ctx=Store())], value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='object', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='objid', ctx=Load()), ops=[In()], comparators=[Name(id='context', ctx=Load())]), Compare(left=Name(id='p', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_format', ctx=Load()), args=[Name(id='object', ctx=Load()), Name(id='stream', ctx=Load()), Name(id='indent', ctx=Load()), Name(id='allowance', ctx=Load()), Name(id='context', ctx=Load()), Name(id='level', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Subscript(value=Name(id='context', ctx=Load()), slice=Name(id='objid', ctx=Load()), ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='object', ctx=Load()), Name(id='stream', ctx=Load()), Name(id='indent', ctx=Load()), Name(id='allowance', ctx=Load()), Name(id='context', ctx=Load()), BinOp(left=Name(id='level', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Delete(targets=[Subscript(value=Name(id='context', ctx=Load()), slice=Name(id='objid', ctx=Load()), ctx=Del())])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_pformat_dispatch', args=arguments(posonlyargs=[], args=[arg(arg='object', annotation=Name(id='object', ctx=Load())), arg(arg='indent', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='compact', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=1), Constant(value=80), Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='AlwaysDispatchingPrettyPrinter', ctx=Load()), args=[], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='depth', value=Name(id='depth', ctx=Load())), keyword(arg='compact', value=Name(id='compact', ctx=Load()))]), attr='pformat', ctx=Load()), args=[Name(id='object', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])