Module(body=[Expr(value=Constant(value='Helper functions for writing to terminals and files.')), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='TextIO')], level=0), ImportFrom(module='wcwidth', names=[alias(name='wcswidth')], level=1), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), FunctionDef(name='get_terminal_width', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[keyword(arg='fallback', value=Tuple(elts=[Constant(value=80), Constant(value=24)], ctx=Load()))])), If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Lt()], comparators=[Constant(value=40)]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Constant(value=80))], orelse=[]), Return(value=Name(id='width', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='should_do_markup', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PY_COLORS')], keywords=[]), ops=[Eq()], comparators=[Constant(value='1')]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PY_COLORS')], keywords=[]), ops=[Eq()], comparators=[Constant(value='0')]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Constant(value='NO_COLOR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Constant(value='FORCE_COLOR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='isatty')], keywords=[]), Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='dumb')])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='TerminalWriter', bases=[], keywords=[], body=[Assign(targets=[Name(id='_esctable', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='black', value=Constant(value=30)), keyword(arg='red', value=Constant(value=31)), keyword(arg='green', value=Constant(value=32)), keyword(arg='yellow', value=Constant(value=33)), keyword(arg='blue', value=Constant(value=34)), keyword(arg='purple', value=Constant(value=35)), keyword(arg='cyan', value=Constant(value=36)), keyword(arg='white', value=Constant(value=37)), keyword(arg='Black', value=Constant(value=40)), keyword(arg='Red', value=Constant(value=41)), keyword(arg='Green', value=Constant(value=42)), keyword(arg='Yellow', value=Constant(value=43)), keyword(arg='Blue', value=Constant(value=44)), keyword(arg='Purple', value=Constant(value=45)), keyword(arg='Cyan', value=Constant(value=46)), keyword(arg='White', value=Constant(value=47)), keyword(arg='bold', value=Constant(value=1)), keyword(arg='light', value=Constant(value=2)), keyword(arg='blink', value=Constant(value=5)), keyword(arg='invert', value=Constant(value=7))])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='isatty')], keywords=[]), Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])]), body=[Try(body=[Import(names=[alias(name='colorama')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='file', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='colorama', ctx=Load()), attr='AnsiToWin32', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), attr='stream', ctx=Load())), Assert(test=Compare(left=Name(id='file', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], finalbody=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Name(id='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hasmarkup', ctx=Store())], value=Call(func=Name(id='should_do_markup', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_line', ctx=Store())], value=Constant(value='')), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_terminal_width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code_highlight', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fullwidth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_terminal_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_terminal_width', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='get_terminal_width', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='fullwidth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_terminal_width', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='fullwidth', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='width_of_current_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return an estimate of the width so far in the current line.')), Return(value=Call(func=Name(id='wcswidth', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_line', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='markup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='markup', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_esctable', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unknown markup: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='hasmarkup', ctx=Load()), body=[Assign(targets=[Name(id='esc', ctx=Store())], value=ListComp(elt=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esctable', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='on', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='markup', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Name(id='on', ctx=Load())], is_async=0)])), If(test=Name(id='esc', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value='\x1b[%sm'), op=Mod(), right=Name(id='cod', ctx=Load())), generators=[comprehension(target=Name(id='cod', ctx=Store()), iter=Name(id='esc', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Name(id='text', ctx=Load())), op=Add(), right=Constant(value='\x1b[0m')))], orelse=[])], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='sep', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sepchar', annotation=Name(id='str', ctx=Load())), arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='fullwidth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='fullwidth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fullwidth', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='fullwidth', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[AugAssign(target=Name(id='fullwidth', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='title', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='N', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='fullwidth', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[])), op=Sub(), right=Constant(value=2)), op=FloorDiv(), right=BinOp(left=Constant(value=2), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sepchar', ctx=Load())], keywords=[]))), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='fill', ctx=Store())], value=BinOp(left=Name(id='sepchar', ctx=Load()), op=Mult(), right=Name(id='N', ctx=Load()))), Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='fill', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='title', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='fill', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Name(id='sepchar', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='fullwidth', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sepchar', ctx=Load())], keywords=[]))))]), If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sepchar', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), ops=[LtE()], comparators=[Name(id='fullwidth', ctx=Load())]), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='sepchar', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='flush', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[If(test=Name(id='msg', ctx=Load()), body=[Assign(targets=[Name(id='current_line', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='\n'), Constant(value=1)], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='msg', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_line', ctx=Store())], value=Name(id='current_line', ctx=Load()))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_current_line', ctx=Store()), op=Add(), value=Name(id='current_line', ctx=Load()))]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))])), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='unicode-escape')], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='flush', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_write_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='indents', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='Write lines of source code possibly highlighted.\n\n        Keeping this private for now because the API is clunky. We should discuss how\n        to evolve the terminal writer so we can have more precise color support, for example\n        being able to write part of a line in one color and the rest in another, and so on.\n        ')), If(test=BoolOp(op=And(), values=[Name(id='indents', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indents', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='indents size ({}) should have same size as lines ({})'), attr='format', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='indents', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='indents', ctx=Load())), body=[Assign(targets=[Name(id='indents', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='')], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])))], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_lines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_highlight', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='indent', ctx=Store()), Name(id='new_line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='indents', ctx=Load()), Name(id='new_lines', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='new_line', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Highlight the given source code if we have markup support.')), ImportFrom(module='_pytest.config.exceptions', names=[alias(name='UsageError')], level=0), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='hasmarkup', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='code_highlight', ctx=Load()))]), body=[Return(value=Name(id='source', ctx=Load()))], orelse=[]), Try(body=[ImportFrom(module='pygments.formatters.terminal', names=[alias(name='TerminalFormatter')], level=0), ImportFrom(module='pygments.lexers.python', names=[alias(name='PythonLexer')], level=0), ImportFrom(module='pygments', names=[alias(name='highlight')], level=0), Import(names=[alias(name='pygments.util')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Return(value=Name(id='source', ctx=Load()))])], orelse=[Try(body=[AnnAssign(target=Name(id='highlighted', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Name(id='highlight', ctx=Load()), args=[Name(id='source', ctx=Load()), Call(func=Name(id='PythonLexer', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TerminalFormatter', ctx=Load()), args=[], keywords=[keyword(arg='bg', value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PYTEST_THEME_MODE'), Constant(value='dark')], keywords=[])), keyword(arg='style', value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PYTEST_THEME')], keywords=[]))])], keywords=[]), simple=1), Return(value=Name(id='highlighted', ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='pygments', ctx=Load()), attr='util', ctx=Load()), attr='ClassNotFound', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="PYTEST_THEME environment variable had an invalid value: '{}'. Only valid pygment styles are allowed."), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PYTEST_THEME')], keywords=[])], keywords=[])], keywords=[]))]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='pygments', ctx=Load()), attr='util', ctx=Load()), attr='OptionError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="PYTEST_THEME_MODE environment variable had an invalid value: '{}'. The only allowed values are 'dark' and 'light'."), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PYTEST_THEME_MODE')], keywords=[])], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())])], type_ignores=[])