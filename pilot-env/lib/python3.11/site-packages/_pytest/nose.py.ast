Module(body=[Expr(value=Constant(value='Run testsuites written for nose.')), Import(names=[alias(name='warnings')]), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='NOSE_SUPPORT')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='getfixturemarker')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Function')], level=0), ImportFrom(module='_pytest.unittest', names=[alias(name='TestCaseFunction')], level=0), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Function', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='TestCaseFunction', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='func', ctx=Store())], value=Name(id='item', ctx=Load())), Expr(value=Call(func=Name(id='call_optional', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='obj', ctx=Load()), Constant(value='setup'), Attribute(value=Name(id='func', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='func', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='call_optional', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='obj', ctx=Load()), Constant(value='teardown'), Attribute(value=Name(id='func', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='trylast', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='call_optional', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='is_fixture', ctx=Store())], value=Compare(left=Call(func=Name(id='getfixturemarker', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Name(id='is_fixture', ctx=Load()), body=[Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='method_name', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='method', ctx=Load()), Constant(value='__name__'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='NOSE_SUPPORT', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='nodeid', value=Name(id='nodeid', ctx=Load())), keyword(arg='method', value=Name(id='method_name', ctx=Load())), keyword(arg='stage', value=Name(id='name', ctx=Load()))])], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Expr(value=Call(func=Name(id='method', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])