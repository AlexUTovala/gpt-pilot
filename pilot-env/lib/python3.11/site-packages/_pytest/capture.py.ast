Module(body=[Expr(value=Constant(value='Per-test stdout/stderr capturing mechanism.')), Import(names=[alias(name='abc')]), Import(names=[alias(name='collections')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='io', names=[alias(name='UnsupportedOperation')], level=0), ImportFrom(module='tempfile', names=[alias(name='TemporaryFile')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='AnyStr')], level=0), ImportFrom(module='typing', names=[alias(name='BinaryIO')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='NamedTuple')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TextIO')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='SubRequest')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='File')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Final')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), Assign(targets=[Name(id='_CaptureMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='fd'), Constant(value='sys'), Constant(value='no'), Constant(value='tee-sys')], ctx=Load()), ctx=Load()))], orelse=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--capture')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='default', value=Constant(value='fd')), keyword(arg='metavar', value=Constant(value='method')), keyword(arg='choices', value=List(elts=[Constant(value='fd'), Constant(value='sys'), Constant(value='no'), Constant(value='tee-sys')], ctx=Load())), keyword(arg='help', value=Constant(value='Per-test capturing method: one of fd|sys|no|tee-sys'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-s')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='const', value=Constant(value='no')), keyword(arg='dest', value=Constant(value='capture')), keyword(arg='help', value=Constant(value='Shortcut for --capture=no'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_colorama_workaround', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure colorama is imported so that it attaches to the correct stdio\n    handles on Windows.\n\n    colorama uses the terminal on import time. So if something does the\n    first import of colorama while I/O capture is active, colorama will\n    fail in various ways.\n    ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='win32')], keywords=[]), body=[Try(body=[Import(names=[alias(name='colorama')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_windowsconsoleio_workaround', args=arguments(posonlyargs=[], args=[arg(arg='stream', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Workaround for Windows Unicode console handling.\n\n    Python 3.6 implemented Unicode console handling for Windows. This works\n    by reading/writing to the raw console handle using\n    ``{Read,Write}ConsoleW``.\n\n    The problem is that we are going to ``dup2`` over the stdio file\n    descriptors when doing ``FDCapture`` and this will ``CloseHandle`` the\n    handles used by Python to write to the console. Though there is still some\n    weirdness and the console handle seems to only be closed randomly and not\n    on the first call to ``CloseHandle``, or maybe it gets reopened with the\n    same handle value when we suspend capturing.\n\n    The workaround in this case will reopen stdio with a different fd which\n    also means a different handle by replicating the logic in\n    "Py_lifecycle.c:initstdio/create_stdio".\n\n    :param stream:\n        In practice ``sys.stdout`` or ``sys.stderr``, but given\n        here as parameter for unittesting purposes.\n\n    See https://github.com/pytest-dev/py/issues/103.\n    ')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='win32')], keywords=[])), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='pypy_version_info')], keywords=[])]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='stream', ctx=Load()), Constant(value='buffer')], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='buffered', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='buffer', ctx=Load()), Constant(value='raw')], keywords=[])), Assign(targets=[Name(id='raw_stdout', ctx=Store())], value=IfExp(test=Name(id='buffered', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='buffer', ctx=Load()), attr='raw', ctx=Load()), orelse=Attribute(value=Name(id='stream', ctx=Load()), attr='buffer', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='raw_stdout', ctx=Load()), Attribute(value=Name(id='io', ctx=Load()), attr='_WindowsConsoleIO', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), FunctionDef(name='_reopen_stdio', args=arguments(posonlyargs=[], args=[arg(arg='f'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='buffered', ctx=Load())), Compare(left=Subscript(value=Name(id='mode', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='w')])]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='buffering', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))]), Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load()), args=[Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[]), Name(id='mode', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]), Attribute(value=Name(id='f', ctx=Load()), attr='encoding', ctx=Load()), Attribute(value=Name(id='f', ctx=Load()), attr='errors', ctx=Load()), Attribute(value=Name(id='f', ctx=Load()), attr='newlines', ctx=Load()), Attribute(value=Name(id='f', ctx=Load()), attr='line_buffering', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Store())], value=Call(func=Name(id='_reopen_stdio', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), Constant(value='rb')], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Call(func=Name(id='_reopen_stdio', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Constant(value='wb')], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Call(func=Name(id='_reopen_stdio', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Constant(value='wb')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_load_initial_conftests', args=arguments(posonlyargs=[], args=[arg(arg='early_config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ns', ctx=Store())], value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='ns', ctx=Load()), attr='capture', ctx=Load()), ops=[Eq()], comparators=[Constant(value='fd')]), body=[Expr(value=Call(func=Name(id='_windowsconsoleio_workaround', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='_colorama_workaround', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pluginmanager', ctx=Store())], value=Attribute(value=Name(id='early_config', ctx=Load()), attr='pluginmanager', ctx=Load())), Assign(targets=[Name(id='capman', ctx=Store())], value=Call(func=Name(id='CaptureManager', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='capture', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='capman', ctx=Load()), Constant(value='capturemanager')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='early_config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Attribute(value=Name(id='capman', ctx=Load()), attr='stop_global_capturing', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='start_global_capturing', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='outcome', ctx=Load()), attr='excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='read_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])]), ClassDef(name='EncodedFile', bases=[Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='mode', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='b'), Constant(value='')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='CaptureIO', bases=[Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8')), keyword(arg='newline', value=Constant(value='')), keyword(arg='write_through', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getvalue', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='UTF-8')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='TeeCaptureIO', bases=[Name(id='CaptureIO', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_other', ctx=Store())], value=Name(id='other', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='write', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_other', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='DontReadFromInput', bases=[Name(id='TextIO', ctx=Load())], keywords=[], body=[FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stdin__', ctx=Load()), attr='encoding', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='pytest: reading from stdin while output is captured!  Consider using `-s`.')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='readline', ctx=Store())], value=Name(id='read', ctx=Load())), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='readlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hint', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='pytest: reading from stdin while output is captured!  Consider using `-s`.')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='redirected stdin is pseudofile, has no fileno()')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='redirected stdin is pseudofile, has no flush()')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='isatty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='readable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='seek', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='whence', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='redirected stdin is pseudofile, has no seek(int)')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='seekable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='tell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='redirected stdin is pseudofile, has no tell()')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='truncate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='cannot truncate stdin')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='cannot write to stdin')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='writelines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='Cannot write to stdin')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='writable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='DontReadFromInput')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='value', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='BinaryIO', ctx=Load()))], decorator_list=[]), ClassDef(name='CaptureBase', bases=[Attribute(value=Name(id='abc', ctx=Load()), attr='ABC', ctx=Load()), Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='EMPTY_BUFFER', ctx=Store()), annotation=Name(id='AnyStr', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fd', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='AnyStr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='abc', ctx=Load()), attr='abstractmethod', ctx=Load())], returns=Name(id='AnyStr', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='patchsysdict', ctx=Store())], value=Dict(keys=[Constant(value=0), Constant(value=1), Constant(value=2)], values=[Constant(value='stdin'), Constant(value='stdout'), Constant(value='stderr')])), ClassDef(name='NoCapture', bases=[Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='EMPTY_BUFFER', ctx=Store())], value=Constant(value='')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fd', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='SysCaptureBase', bases=[Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fd', annotation=Name(id='int', ctx=Load())), arg(arg='tmpfile', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='tee', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='patchsysdict', ctx=Load()), slice=Name(id='fd', ctx=Load()), ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Store()), annotation=Name(id='TextIO', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), If(test=Compare(left=Name(id='tmpfile', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='stdin')]), body=[Assign(targets=[Name(id='tmpfile', ctx=Store())], value=Call(func=Name(id='DontReadFromInput', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='tmpfile', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='tee', ctx=Load())), body=Call(func=Name(id='CaptureIO', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='TeeCaptureIO', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load())], keywords=[])))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Store())], value=Name(id='tmpfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='initialized'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='repr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='class_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{} {} _old={} _state={!r} tmpfile={!r}>'), attr='format', ctx=Load()), args=[Name(id='class_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_old')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load())], keywords=[])]), Constant(value='<UNSET>')]), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{} {} _old={} _state={!r} tmpfile={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_old')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load())], keywords=[])]), Constant(value='<UNSET>')]), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_assert_state', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='states', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[In()], comparators=[Name(id='states', ctx=Load())]), msg=Call(func=Attribute(value=Constant(value='cannot {} in state {!r}: expected one of {}'), attr='format', ctx=Load()), args=[Name(id='op', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='states', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='start'), Tuple(elts=[Constant(value='initialized')], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='done'), Tuple(elts=[Constant(value='initialized'), Constant(value='started'), Constant(value='suspended'), Constant(value='done')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='done')]), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load())], keywords=[])), Delete(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Del())]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='done'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='suspend'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='suspended'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='resume'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='started')]), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started'))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='SysCaptureBinary', bases=[Subscript(value=Name(id='SysCaptureBase', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='EMPTY_BUFFER', ctx=Store())], value=Constant(value=b'')), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='snap'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='buffer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='truncate', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='writeorg'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load()), attr='buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load()), attr='buffer', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='SysCapture', bases=[Subscript(value=Name(id='SysCaptureBase', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='EMPTY_BUFFER', ctx=Store())], value=Constant(value='')), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='snap'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), Name(id='CaptureIO', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='truncate', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='writeorg'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_old', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FDCaptureBase', bases=[Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='targetfd', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Store())], value=Name(id='targetfd', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fstat', ctx=Load()), args=[Name(id='targetfd', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='O_RDWR', ctx=Load())], keywords=[]), simple=0), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Load()), Name(id='targetfd', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Store())], value=Constant(value=None))], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup', ctx=Load()), args=[Name(id='targetfd', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='targetfd', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Store()), annotation=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Name(id='targetfd', ctx=Load())], keywords=[]), simple=0)], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Store())], value=Call(func=Name(id='EncodedFile', ctx=Load()), args=[Call(func=Name(id='TemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='buffering', value=Constant(value=0))])], keywords=[keyword(arg='encoding', value=Constant(value='utf-8')), keyword(arg='errors', value=Constant(value='replace')), keyword(arg='newline', value=Constant(value='')), keyword(arg='write_through', value=Constant(value=True))])), If(test=Compare(left=Name(id='targetfd', ctx=Load()), ops=[In()], comparators=[Name(id='patchsysdict', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Store())], value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Name(id='targetfd', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Store())], value=Call(func=Name(id='NoCapture', ctx=Load()), args=[Name(id='targetfd', ctx=Load())], keywords=[]))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='initialized'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{} {} oldfd={} _state={!r} tmpfile={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_assert_state', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='states', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[In()], comparators=[Name(id='states', ctx=Load())]), msg=Call(func=Attribute(value=Constant(value='cannot {} in state {!r}: expected one of {}'), attr='format', ctx=Load()), args=[Name(id='op', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='states', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Start capturing on targetfd using memorized tmpfile.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='start'), Tuple(elts=[Constant(value='initialized')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stop capturing, restore streams, return original capture file,\n        seeked to position zero.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='done'), Tuple(elts=[Constant(value='initialized'), Constant(value='started'), Constant(value='suspended'), Constant(value='done')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='done')]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_invalid', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='done'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='suspend'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='suspended')]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='suspended'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='resume'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='started')]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='syscapture', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='targetfd', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started'))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FDCaptureBinary', bases=[Subscript(value=Name(id='FDCaptureBase', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Capture IO to/from a given OS-level file descriptor.\n\n    snap() produces `bytes`.\n    ')), Assign(targets=[Name(id='EMPTY_BUFFER', ctx=Store())], value=Constant(value=b'')), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='snap'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='buffer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='truncate', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write to original file descriptor.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='writeorg'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FDCapture', bases=[Subscript(value=Name(id='FDCaptureBase', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Capture IO to/from a given OS-level file descriptor.\n\n    snap() produces text.\n    ')), Assign(targets=[Name(id='EMPTY_BUFFER', ctx=Store())], value=Constant(value='')), FunctionDef(name='snap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='snap'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpfile', ctx=Load()), attr='truncate', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='writeorg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write to original file descriptor.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_state', ctx=Load()), args=[Constant(value='writeorg'), Tuple(elts=[Constant(value='started'), Constant(value='suspended')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='targetfd_save', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), Name(id='TYPE_CHECKING', ctx=Load())]), body=[ClassDef(name='CaptureResult', bases=[Name(id='NamedTuple', ctx=Load()), Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The result of :method:`CaptureFixture.readouterr`.')), AnnAssign(target=Name(id='out', ctx=Store()), annotation=Name(id='AnyStr', ctx=Load()), simple=1), AnnAssign(target=Name(id='err', ctx=Store()), annotation=Name(id='AnyStr', ctx=Load()), simple=1)], decorator_list=[Name(id='final', ctx=Load())])], orelse=[ClassDef(name='CaptureResult', bases=[Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='CaptureResult'), List(elts=[Constant(value='out'), Constant(value='err')], ctx=Load())], keywords=[]), Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The result of :method:`CaptureFixture.readouterr`.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], decorator_list=[])]), ClassDef(name='MultiCapture', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='_in_suspended', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='out', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='err', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='in_', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='out', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='err', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<MultiCapture out={!r} err={!r} in_={!r} _state={!r} _in_suspended={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_in_suspended', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='start_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop_outerr_to_orig', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pop current snapshot out/err capture and flush to orig streams.')), Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='readouterr', ctx=Load()), args=[], keywords=[])), If(test=Name(id='out', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='writeorg', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='err', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='writeorg', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='out', ctx=Load()), Name(id='err', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='AnyStr', ctx=Load()), Name(id='AnyStr', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='suspend_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='suspended')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='in_', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_suspended', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='started')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_in_suspended', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_suspended', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='stop_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stop capturing and reset capturing streams.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='stopped')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='was already stopped')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Constant(value='stopped')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='in_', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_started', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether actively capturing -- not suspended or stopped.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='started')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='readouterr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='out', ctx=Load()), attr='snap', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=''))), Assign(targets=[Name(id='err', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='err', ctx=Load()), attr='snap', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=''))), Return(value=Call(func=Name(id='CaptureResult', ctx=Load()), args=[Name(id='out', ctx=Load()), Name(id='err', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='CaptureResult', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_multicapture', args=arguments(posonlyargs=[], args=[arg(arg='method', annotation=Constant(value='_CaptureMethod'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='fd')]), body=[Return(value=Call(func=Name(id='MultiCapture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Call(func=Name(id='FDCapture', ctx=Load()), args=[Constant(value=0)], keywords=[])), keyword(arg='out', value=Call(func=Name(id='FDCapture', ctx=Load()), args=[Constant(value=1)], keywords=[])), keyword(arg='err', value=Call(func=Name(id='FDCapture', ctx=Load()), args=[Constant(value=2)], keywords=[]))]))], orelse=[If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sys')]), body=[Return(value=Call(func=Name(id='MultiCapture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Constant(value=0)], keywords=[])), keyword(arg='out', value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Constant(value=1)], keywords=[])), keyword(arg='err', value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Constant(value=2)], keywords=[]))]))], orelse=[If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Return(value=Call(func=Name(id='MultiCapture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=None)), keyword(arg='out', value=Constant(value=None)), keyword(arg='err', value=Constant(value=None))]))], orelse=[If(test=Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tee-sys')]), body=[Return(value=Call(func=Name(id='MultiCapture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=None)), keyword(arg='out', value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Constant(value=1)], keywords=[keyword(arg='tee', value=Constant(value=True))])), keyword(arg='err', value=Call(func=Name(id='SysCapture', ctx=Load()), args=[Constant(value=2)], keywords=[keyword(arg='tee', value=Constant(value=True))]))]))], orelse=[])])])]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unknown capturing method: '), FormattedValue(value=Name(id='method', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='MultiCapture', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='CaptureManager', bases=[], keywords=[], body=[Expr(value=Constant(value='The capture plugin.\n\n    Manages that the appropriate capture method is enabled/disabled during\n    collection and each test phase (setup, call, teardown). After each of\n    those points, the captured output is obtained and attached to the\n    collection/runtest report.\n\n    There are two levels of capture:\n\n    * global: enabled by default and can be suppressed by the ``-s``\n      option. This is always enabled/disabled during collection and each test\n      phase.\n\n    * fixture: when a test function or one of its fixture depend on the\n      ``capsys`` or ``capfd`` fixtures. In this case special handling is\n      needed to ensure the fixtures take precedence over the global capture.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method', annotation=Constant(value='_CaptureMethod'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_method', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Name(id='method', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='MultiCapture', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='CaptureFixture', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<CaptureManager _method={!r} _global_capturing={!r} _capture_fixture={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_method', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_globally_capturing', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='global'))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Return(value=BinOp(left=Constant(value='fixture %s'), op=Mod(), right=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='request', ctx=Load()), attr='fixturename', ctx=Load())))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='is_globally_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_method', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='no')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='start_global_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Store())], value=Call(func=Name(id='_get_multicapture', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_method', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='start_capturing', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='stop_global_capturing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='pop_outerr_to_orig', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='stop_capturing', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume_global_capture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='resume_capturing', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend_global_capture', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='suspend_capturing', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Name(id='in_', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='in_', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_fixture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[Name(id='in_', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_fixture', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='read_global_capture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='readouterr', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='CaptureResult', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='set_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='capture_fixture', annotation=Constant(value='CaptureFixture[Any]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Assign(targets=[Name(id='current_fixture', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='request', ctx=Load()), attr='fixturename', ctx=Load())), Assign(targets=[Name(id='requested_fixture', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='request', ctx=Load()), attr='fixturename', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='request', ctx=Load()), attr='raiseerror', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='cannot use {} and {} at the same time'), attr='format', ctx=Load()), args=[Name(id='requested_fixture', ctx=Load()), Name(id='current_fixture', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Store())], value=Name(id='capture_fixture', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unset_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='activate_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If the current item is using ``capsys`` or ``capfd``, activate\n        them so they take precedence over the global capture.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='_start', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='deactivate_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deactivate the ``capsys`` or ``capfd`` fixture of this item, if any.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='_suspend', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='resume_fixture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='_resume', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='global_and_fixture_disabled', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Context manager to temporarily disable global and current fixture capturing.')), Assign(targets=[Name(id='do_fixture', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture_fixture', ctx=Load()), attr='_is_started', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='do_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_fixture', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='do_global', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_global_capturing', ctx=Load()), attr='is_started', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='do_global', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[If(test=Name(id='do_global', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_global_capture', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='do_fixture', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_fixture', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='item_capture', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='when', annotation=Name(id='str', ctx=Load())), arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='activate_fixture', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='deactivate_fixture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=False))]))]), Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='add_report_section', ctx=Load()), args=[Name(id='when', ctx=Load()), Constant(value='stdout'), Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='add_report_section', ctx=Load()), args=[Name(id='when', ctx=Load()), Constant(value='stderr'), Name(id='err', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_make_collect_report', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='collector', annotation=Name(id='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Name(id='File', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resume_global_capture', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_global_capture', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[])), If(test=Name(id='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='sections', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='Captured stdout'), Name(id='out', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='err', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='sections', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='Captured stderr'), Name(id='err', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Yield())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])]), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='item_capture', ctx=Load()), args=[Constant(value='setup'), Name(id='item', ctx=Load())], keywords=[]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='item_capture', ctx=Load()), args=[Constant(value='call'), Name(id='item', ctx=Load())], keywords=[]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_teardown', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='item_capture', ctx=Load()), args=[Constant(value='teardown'), Name(id='item', ctx=Load())], keywords=[]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_keyboard_interrupt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop_global_capturing', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_internalerror', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop_global_capturing', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='CaptureFixture', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`,\n    :fixture:`capfd` and :fixture:`capfdbinary` fixtures.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='captureclass', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Subscript(value=Name(id='CaptureBase', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='captureclass', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Store())], value=Name(id='request', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='MultiCapture', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_captured_out', ctx=Store()), annotation=Name(id='AnyStr', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), attr='EMPTY_BUFFER', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_captured_err', ctx=Store()), annotation=Name(id='AnyStr', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), attr='EMPTY_BUFFER', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Store())], value=Call(func=Name(id='MultiCapture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=None)), keyword(arg='out', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), args=[Constant(value=1)], keywords=[])), keyword(arg='err', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), args=[Constant(value=2)], keywords=[]))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='start_capturing', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='pop_outerr_to_orig', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_captured_out', ctx=Store()), op=Add(), value=Name(id='out', ctx=Load())), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_captured_err', ctx=Store()), op=Add(), value=Name(id='err', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='stop_capturing', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='readouterr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and return the captured output so far, resetting the internal\n        buffer.\n\n        :returns:\n            The captured content as a namedtuple with ``out`` and ``err``\n            string attributes.\n        ')), Assign(targets=[Tuple(elts=[Name(id='captured_out', ctx=Store()), Name(id='captured_err', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_captured_out', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_captured_err', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='readouterr', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='captured_out', ctx=Store()), op=Add(), value=Name(id='out', ctx=Load())), AugAssign(target=Name(id='captured_err', ctx=Store()), op=Add(), value=Name(id='err', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_captured_out', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), attr='EMPTY_BUFFER', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_captured_err', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='captureclass', ctx=Load()), attr='EMPTY_BUFFER', ctx=Load())), Return(value=Call(func=Name(id='CaptureResult', ctx=Load()), args=[Name(id='captured_out', ctx=Load()), Name(id='captured_err', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='CaptureResult', ctx=Load()), slice=Name(id='AnyStr', ctx=Load()), ctx=Load())), FunctionDef(name='_suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Suspend this fixture's own capturing temporarily.")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='suspend_capturing', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Resume this fixture's own capturing temporarily.")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='resume_capturing', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_is_started', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether actively capturing -- not disabled or closed.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_capture', ctx=Load()), attr='is_started', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='disabled', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Temporarily disable capturing while inside the ``with`` block.')), AnnAssign(target=Name(id='capmanager', ctx=Store()), annotation=Name(id='CaptureManager', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]), simple=1), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='capmanager', ctx=Load()), attr='global_and_fixture_disabled', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Yield())])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='capsys', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable text capturing of writes to ``sys.stdout`` and ``sys.stderr``.\n\n    The captured output is made available via ``capsys.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``text`` objects.\n\n    Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_output(capsys):\n            print("hello")\n            captured = capsys.readouterr()\n            assert captured.out == "hello\\n"\n    ')), AnnAssign(target=Name(id='capman', ctx=Store()), annotation=Name(id='CaptureManager', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]), simple=1), Assign(targets=[Name(id='capture_fixture', ctx=Store())], value=Call(func=Name(id='CaptureFixture', ctx=Load()), args=[Name(id='SysCapture', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='set_fixture', ctx=Load()), args=[Name(id='capture_fixture', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='_start', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Name(id='capture_fixture', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='unset_fixture', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='CaptureFixture', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='capsysbinary', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable bytes capturing of writes to ``sys.stdout`` and ``sys.stderr``.\n\n    The captured output is made available via ``capsysbinary.readouterr()``\n    method calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``bytes`` objects.\n\n    Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_output(capsysbinary):\n            print("hello")\n            captured = capsysbinary.readouterr()\n            assert captured.out == b"hello\\n"\n    ')), AnnAssign(target=Name(id='capman', ctx=Store()), annotation=Name(id='CaptureManager', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]), simple=1), Assign(targets=[Name(id='capture_fixture', ctx=Store())], value=Call(func=Name(id='CaptureFixture', ctx=Load()), args=[Name(id='SysCaptureBinary', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='set_fixture', ctx=Load()), args=[Name(id='capture_fixture', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='_start', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Name(id='capture_fixture', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='unset_fixture', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='CaptureFixture', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='capfd', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable text capturing of writes to file descriptors ``1`` and ``2``.\n\n    The captured output is made available via ``capfd.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``text`` objects.\n\n    Returns an instance of :class:`CaptureFixture[str] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_system_echo(capfd):\n            os.system(\'echo "hello"\')\n            captured = capfd.readouterr()\n            assert captured.out == "hello\\n"\n    ')), AnnAssign(target=Name(id='capman', ctx=Store()), annotation=Name(id='CaptureManager', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]), simple=1), Assign(targets=[Name(id='capture_fixture', ctx=Store())], value=Call(func=Name(id='CaptureFixture', ctx=Load()), args=[Name(id='FDCapture', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='set_fixture', ctx=Load()), args=[Name(id='capture_fixture', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='_start', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Name(id='capture_fixture', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='unset_fixture', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='CaptureFixture', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='capfdbinary', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable bytes capturing of writes to file descriptors ``1`` and ``2``.\n\n    The captured output is made available via ``capfd.readouterr()`` method\n    calls, which return a ``(out, err)`` namedtuple.\n    ``out`` and ``err`` will be ``byte`` objects.\n\n    Returns an instance of :class:`CaptureFixture[bytes] <pytest.CaptureFixture>`.\n\n    Example:\n\n    .. code-block:: python\n\n        def test_system_echo(capfdbinary):\n            os.system(\'echo "hello"\')\n            captured = capfdbinary.readouterr()\n            assert captured.out == b"hello\\n"\n\n    ')), AnnAssign(target=Name(id='capman', ctx=Store()), annotation=Name(id='CaptureManager', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]), simple=1), Assign(targets=[Name(id='capture_fixture', ctx=Store())], value=Call(func=Name(id='CaptureFixture', ctx=Load()), args=[Name(id='FDCaptureBinary', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='set_fixture', ctx=Load()), args=[Name(id='capture_fixture', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='_start', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Name(id='capture_fixture', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='capture_fixture', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='unset_fixture', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='CaptureFixture', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])