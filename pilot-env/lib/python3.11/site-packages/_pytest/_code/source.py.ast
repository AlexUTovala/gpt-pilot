Module(body=[Import(names=[alias(name='ast')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='tokenize')]), Import(names=[alias(name='types')]), Import(names=[alias(name='warnings')]), ImportFrom(module='bisect', names=[alias(name='bisect_right')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='overload')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ClassDef(name='Source', bases=[], keywords=[], body=[Expr(value=Constant(value='An immutable object holding a source code fragment.\n\n    When using Source(...), the source lines are deindented.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='obj', ctx=Load())), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='Source', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='lines', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store())], value=Call(func=Name(id='deindent', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='obj', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store())], value=Call(func=Name(id='deindent', ctx=Load()), args=[Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='rawcode', ctx=Store())], value=Call(func=Name(id='getrawcode', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getsource', ctx=Load()), args=[Name(id='rawcode', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getsource', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store())], value=Call(func=Name(id='deindent', ctx=Load()), args=[Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))])])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Source', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='lines', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='slice', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value='Source')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='key', ctx=Load()), attr='step', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=1)], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Constant(value='cannot slice a Source with a step')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='newsource', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='newsource', ctx=Load()), attr='lines', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='key', ctx=Load()), attr='start', ctx=Load()), upper=Attribute(value=Name(id='key', ctx=Load()), attr='stop', ctx=Load())), ctx=Load())), Return(value=Name(id='newsource', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Source')], ctx=Load()), ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='strip', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return new Source object with trailing and leading blank lines removed.')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='start', ctx=Load()), ops=[Lt()], comparators=[Name(id='end', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='start', ctx=Load()), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))]), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='end', ctx=Load()), ops=[Gt()], comparators=[Name(id='start', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))]), body=[AugAssign(target=Name(id='end', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load())), Return(value=Name(id='source', ctx=Load()))], decorator_list=[], returns=Constant(value='Source')), FunctionDef(name='indent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4))]), body=[Expr(value=Constant(value='Return a copy of the source object with all lines indented by the\n        given indent-string.')), Assign(targets=[Name(id='newsource', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='newsource', ctx=Load()), attr='lines', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load())), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='newsource', ctx=Load()))], decorator_list=[], returns=Constant(value='Source')), FunctionDef(name='getstatement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return Source statement which contains the given linenumber\n        (counted from 0).')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getstatementrange', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load()))], decorator_list=[], returns=Constant(value='Source')), FunctionDef(name='getstatementrange', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return (start, end) tuple which spans the minimal statement region\n        which containing the given lineno.')), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='lineno', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])])), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Constant(value='lineno out of range')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='ast', ctx=Store()), Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='getstatementrange_ast', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='deindent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a new Source object deindented.')), Assign(targets=[Name(id='newsource', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='newsource', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(), ctx=Store())], value=Call(func=Name(id='deindent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[])), Return(value=Name(id='newsource', ctx=Load()))], decorator_list=[], returns=Constant(value='Source')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='findsource', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='sourcelines', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='findsource', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='sourcelines', ctx=Load()), ifs=[], is_async=0)])), Return(value=Tuple(elts=[Name(id='source', ctx=Load()), Name(id='lineno', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Source', ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='getrawcode', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='trycall', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return code object for given function.')), Try(body=[Return(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__code__', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), If(test=Name(id='trycall', ctx=Load()), body=[Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__call__'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='call', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]))]), body=[Return(value=Call(func=Name(id='getrawcode', ctx=Load()), args=[Name(id='call', ctx=Load())], keywords=[keyword(arg='trycall', value=Constant(value=False))]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='could not get code object for '), FormattedValue(value=Name(id='obj', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load())), FunctionDef(name='deindent', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_statement_startend2', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='values', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='ExceptHandler', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='ClassDef', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='FunctionDef', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='AsyncFunctionDef', ctx=Load())], ctx=Load())], keywords=[]), body=[For(target=Name(id='d', ctx=Store()), iter=Attribute(value=Name(id='x', ctx=Load()), attr='decorator_list', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='d', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Tuple(elts=[Constant(value='finalbody'), Constant(value='orelse')], ctx=Load()), body=[AnnAssign(target=Name(id='val', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None)], keywords=[]), simple=1), If(test=Name(id='val', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='insert_index', ctx=Store())], value=Call(func=Name(id='bisect_right', ctx=Load()), args=[Name(id='values', ctx=Load()), Name(id='lineno', ctx=Load())], keywords=[])), Assign(targets=[Name(id='start', ctx=Store())], value=Subscript(value=Name(id='values', ctx=Load()), slice=BinOp(left=Name(id='insert_index', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='insert_index', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='end', ctx=Store())], value=Subscript(value=Name(id='values', ctx=Load()), slice=Name(id='insert_index', ctx=Load()), ctx=Load()))]), Return(value=Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='getstatementrange_ast', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='source', annotation=Name(id='Source', ctx=Load())), arg(arg='assertion', annotation=Name(id='bool', ctx=Load())), arg(arg='astnode', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[If(test=Compare(left=Name(id='astnode', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), Assign(targets=[Name(id='astnode', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='content', ctx=Load()), Constant(value='source'), Constant(value='exec')], keywords=[]))])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_statement_startend2', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='astnode', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='block_finder', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='BlockFinder', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='block_finder', ctx=Load()), attr='started', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='start', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='it', ctx=Store())], value=GeneratorExp(elt=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value='\n')), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load()), ifs=[], is_async=0)])), Try(body=[For(target=Name(id='tok', ctx=Store()), iter=Call(func=Attribute(value=Name(id='tokenize', ctx=Load()), attr='generate_tokens', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='next', ctx=Load()), args=[Name(id='it', ctx=Load())], keywords=[]))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='block_finder', ctx=Load()), attr='tokeneater', ctx=Load()), args=[Starred(value=Name(id='tok', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='inspect', ctx=Load()), attr='EndOfBlock', ctx=Load()), Name(id='IndentationError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='block_finder', ctx=Load()), attr='last', ctx=Load()), op=Add(), right=Name(id='start', ctx=Load())))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), While(test=Name(id='end', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), UnaryOp(op=Not(), operand=Name(id='line', ctx=Load()))]), body=[AugAssign(target=Name(id='end', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[Break()])], orelse=[]), Return(value=Tuple(elts=[Name(id='astnode', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])