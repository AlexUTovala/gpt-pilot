Module(body=[Import(names=[alias(name='ast')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), ImportFrom(module='inspect', names=[alias(name='CO_VARARGS')], level=0), ImportFrom(module='inspect', names=[alias(name='CO_VARKEYWORDS')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='traceback', names=[alias(name='format_exception_only')], level=0), ImportFrom(module='types', names=[alias(name='CodeType')], level=0), ImportFrom(module='types', names=[alias(name='FrameType')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='ClassVar')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='overload')], level=0), ImportFrom(module='typing', names=[alias(name='Pattern')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pluggy')]), Import(names=[alias(name='_pytest')]), ImportFrom(module='_pytest._code.source', names=[alias(name='findsource')], level=0), ImportFrom(module='_pytest._code.source', names=[alias(name='getrawcode')], level=0), ImportFrom(module='_pytest._code.source', names=[alias(name='getstatementrange_ast')], level=0), ImportFrom(module='_pytest._code.source', names=[alias(name='Source')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='safeformat')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='saferepr')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='get_real_func')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='bestrelpath')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Final')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='typing_extensions', names=[alias(name='SupportsIndex')], level=0), Assign(targets=[Name(id='_TracebackStyle', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='long'), Constant(value='short'), Constant(value='line'), Constant(value='no'), Constant(value='native'), Constant(value='value'), Constant(value='auto')], ctx=Load()), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), body=[ImportFrom(module='exceptiongroup', names=[alias(name='BaseExceptionGroup')], level=0)], orelse=[]), ClassDef(name='Code', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrapper around Python code objects.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='raw')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Name(id='CodeType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Store())], value=Name(id='obj', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_function', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Name(id='getrawcode', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Code')), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='raw', ctx=Load())]))], decorator_list=[]), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Constant(value=None)), FunctionDef(name='firstlineno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='co_firstlineno', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='co_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a path object pointing to source code, or an ``str`` in\n        case of ``OSError`` / non-existing file.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='co_filename', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[]), Try(body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='co_filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='path check failed.')], keywords=[]))], orelse=[]), Return(value=Name(id='p', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='co_filename', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='fullsource', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a _pytest._code.Source object for the full source file of the code.')), Assign(targets=[Tuple(elts=[Name(id='full', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='findsource', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load())], keywords=[])), Return(value=Name(id='full', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Source'), ctx=Load())), FunctionDef(name='source', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a _pytest._code.Source object for the code object's source only.")), Return(value=Call(func=Name(id='Source', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Source')), FunctionDef(name='getargs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='var', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Return a tuple with the argument names for the code object.\n\n        If 'var' is set True also return the names of the variable and\n        keyword arguments when present.\n        ")), Assign(targets=[Name(id='raw', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load())), Assign(targets=[Name(id='argcount', ctx=Store())], value=Attribute(value=Name(id='raw', ctx=Load()), attr='co_argcount', ctx=Load())), If(test=Name(id='var', ctx=Load()), body=[AugAssign(target=Name(id='argcount', ctx=Store()), op=Add(), value=BinOp(left=Attribute(value=Name(id='raw', ctx=Load()), attr='co_flags', ctx=Load()), op=BitAnd(), right=Name(id='CO_VARARGS', ctx=Load()))), AugAssign(target=Name(id='argcount', ctx=Store()), op=Add(), value=BinOp(left=Attribute(value=Name(id='raw', ctx=Load()), attr='co_flags', ctx=Load()), op=BitAnd(), right=Name(id='CO_VARKEYWORDS', ctx=Load())))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='raw', ctx=Load()), attr='co_varnames', ctx=Load()), slice=Slice(upper=Name(id='argcount', ctx=Load())), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Frame', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrapper around a Python frame holding f_locals and f_globals\n    in which expressions can be evaluated.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='raw')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='frame', annotation=Name(id='FrameType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Store())], value=Name(id='frame', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='lineno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='f_lineno', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='f_globals', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='f_globals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='f_locals', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='f_locals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='code', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Code', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='f_code', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Code', ctx=Load())), FunctionDef(name='statement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Statement this frame is at.')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), attr='fullsource', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Source', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), attr='fullsource', ctx=Load()), attr='getstatement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Source')), FunctionDef(name='eval', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='vars'), defaults=[]), body=[Expr(value=Constant(value="Evaluate 'code' in the frame.\n\n        'vars' are optional additional local variables.\n\n        Returns the result of the evaluation.\n        ")), Assign(targets=[Name(id='f_locals', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='f_locals', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f_locals', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='vars', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='code', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='f_globals', ctx=Load()), Name(id='f_locals', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='repr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='object', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a 'safe' (non-recursive, one-line) string repr for 'object'.")), Return(value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='object', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='getargs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='var', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Return a list of tuples (name, value) for all arguments.\n\n        If 'var' is set True, also include the variable and keyword arguments\n        when present.\n        ")), Assign(targets=[Name(id='retval', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='arg', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), attr='getargs', ctx=Load()), args=[Name(id='var', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='retval', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='arg', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='f_locals', ctx=Load()), slice=Name(id='arg', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='retval', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='TracebackEntry', bases=[], keywords=[], body=[Expr(value=Constant(value='A single entry in a Traceback.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_rawentry'), Constant(value='_repr_style')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rawentry', annotation=Name(id='TracebackType', ctx=Load())), arg(arg='repr_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Literal["short", "long"]'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_rawentry', ctx=Store()), annotation=Constant(value='Final'), value=Name(id='rawentry', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_repr_style', ctx=Store()), annotation=Constant(value='Final'), value=Name(id='repr_style', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='with_repr_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='repr_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Literal["short", "long"]'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='TracebackEntry', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_rawentry', ctx=Load()), Name(id='repr_style', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='TracebackEntry')), FunctionDef(name='lineno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rawentry', ctx=Load()), attr='tb_lineno', ctx=Load()), op=Sub(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='frame', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Frame', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rawentry', ctx=Load()), attr='tb_frame', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Frame', ctx=Load())), FunctionDef(name='relline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='firstlineno', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<TracebackEntry %s:%d>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='path', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='statement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='_pytest._code.Source object for the current statement.')), Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='fullsource', ctx=Load())), Assert(test=Compare(left=Name(id='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='getstatement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Source')), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Path to the source code.')), Return(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='locals', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Locals of underlying frame.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='f_locals', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='getfirstlinesource', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='firstlineno', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='getsource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='astcache', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return failing source code.')), Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='fullsource', ctx=Load())), If(test=Compare(left=Name(id='source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='key', ctx=Store()), Name(id='astnode', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='astcache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='path', ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='astnode', ctx=Store())], value=Call(func=Attribute(value=Name(id='astcache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getfirstlinesource', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='astnode', ctx=Store()), Name(id='_', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Name(id='getstatementrange_ast', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), Name(id='source', ctx=Load())], keywords=[keyword(arg='astnode', value=Name(id='astnode', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='SyntaxError', ctx=Load()), body=[Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='astcache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='astcache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='astnode', ctx=Load()))], orelse=[])], finalbody=[]), Return(value=Subscript(value=Name(id='source', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Source'), ctx=Load())), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='getsource', ctx=Load())], keywords=[])), FunctionDef(name='ishidden', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ExceptionInfo[BaseException]'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if the current frame has a var __tracebackhide__\n        resolving to True.\n\n        If __tracebackhide__ is a callable, it gets called with the\n        ExceptionInfo instance and can decide whether to hide the traceback.\n\n        Mostly for internal use.\n        ')), AnnAssign(target=Name(id='tbh', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=False), simple=1), For(target=Name(id='maybe_ns_dct', ctx=Store()), iter=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='f_locals', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='f_globals', ctx=Load())], ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='tbh', ctx=Store())], value=Subscript(value=Name(id='maybe_ns_dct', ctx=Load()), slice=Constant(value='__tracebackhide__'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[Break()], finalbody=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='tbh', ctx=Load()), Call(func=Name(id='callable', ctx=Load()), args=[Name(id='tbh', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='tbh', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='tbh', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='name', ctx=Load())), Try(body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='statement', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Constant(value='???'))])], orelse=[], finalbody=[]), Return(value=BinOp(left=Constant(value='  File %r:%d in %s\n  %s\n'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='name', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='co_name of underlying code.')), Return(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='raw', ctx=Load()), attr='co_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Traceback', bases=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TracebackEntry', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Traceback objects encapsulate and offer higher level access to Traceback entries.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tb', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TracebackType', ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='TracebackEntry', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize from given python traceback object and ExceptionInfo.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tb', ctx=Load()), Name(id='TracebackType', ctx=Load())], keywords=[]), body=[FunctionDef(name='f', args=arguments(posonlyargs=[], args=[arg(arg='cur', annotation=Name(id='TracebackType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='cur_', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()), value=Name(id='cur', ctx=Load()), simple=1), While(test=Compare(left=Name(id='cur_', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Call(func=Name(id='TracebackEntry', ctx=Load()), args=[Name(id='cur_', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='cur_', ctx=Store())], value=Attribute(value=Name(id='cur_', ctx=Load()), attr='tb_next', ctx=Load()))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='TracebackEntry', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Name(id='f', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cut', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='os.PathLike[str]'), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='lineno', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='firstlineno', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='excludepath', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='os.PathLike[str]'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a Traceback instance wrapping part of this Traceback.\n\n        By providing any combination of path, lineno and firstlineno, the\n        first frame to start the to-be-returned traceback is determined.\n\n        This allows cutting the first part of a Traceback instance e.g.\n        for formatting reasons (removing some uninteresting bits that deal\n        with handling of the exception/traceback).\n        ')), Assign(targets=[Name(id='path_', ctx=Store())], value=IfExp(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='excludepath_', ctx=Store())], value=IfExp(test=Compare(left=Name(id='excludepath', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='excludepath', ctx=Load())], keywords=[]))), For(target=Name(id='x', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load())), Assign(targets=[Name(id='codepath', ctx=Store())], value=Attribute(value=Name(id='code', ctx=Load()), attr='path', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='codepath', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='path_', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='excludepath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='codepath', ctx=Load()), Name(id='Path', ctx=Load())], keywords=[]), Compare(left=Name(id='excludepath_', ctx=Load()), ops=[In()], comparators=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='codepath', ctx=Load()), attr='parents', ctx=Load()), ifs=[], is_async=0)])])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='lineno', ctx=Load()), ops=[NotEq()], comparators=[Name(id='lineno', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='firstlineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='firstlineno', ctx=Load()), ops=[NotEq()], comparators=[Name(id='firstlineno', ctx=Load())])]), body=[Continue()], orelse=[]), Return(value=Call(func=Name(id='Traceback', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='_rawentry', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Traceback')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Constant(value='SupportsIndex'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='TracebackEntry', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='slice', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value='Traceback')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='SupportsIndex'), Name(id='slice', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TracebackEntry', ctx=Load()), Constant(value='Traceback')], ctx=Load()), ctx=Load())), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_excinfo_or_fn', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ExceptionInfo[BaseException]'), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='TracebackEntry', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a Traceback instance with certain items removed.\n\n        If the filter is an `ExceptionInfo`, removes all the ``TracebackEntry``s\n        which are hidden (see ishidden() above).\n\n        Otherwise, the filter is a function that gets a single argument, a\n        ``TracebackEntry`` instance, and should return True when the item should\n        be added to the ``Traceback``, False when not.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='_excinfo_or_fn', ctx=Load()), Name(id='ExceptionInfo', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='ishidden', ctx=Load()), args=[Name(id='_excinfo_or_fn', ctx=Load())], keywords=[]))))], orelse=[Assign(targets=[Name(id='fn', ctx=Store())], value=Name(id='_excinfo_or_fn', ctx=Load()))]), Return(value=Call(func=Name(id='Traceback', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='Traceback')), FunctionDef(name='recursionindex', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the index of the frame/TracebackEntry where recursion originates if\n        appropriate, None if no recursion occurred.')), AnnAssign(target=Name(id='cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='id', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='raw', ctx=Load())], keywords=[]), Attribute(value=Name(id='entry', ctx=Load()), attr='lineno', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='cache', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='key', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), If(test=Name(id='values', ctx=Load()), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load())), Assign(targets=[Name(id='loc', ctx=Store())], value=Attribute(value=Name(id='f', ctx=Load()), attr='f_locals', ctx=Load())), For(target=Name(id='otherloc', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[If(test=Compare(left=Name(id='otherloc', ctx=Load()), ops=[Eq()], comparators=[Name(id='loc', ctx=Load())]), body=[Return(value=Name(id='i', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='f_locals', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='E', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='E')], keywords=[keyword(arg='bound', value=Name(id='BaseException', ctx=Load())), keyword(arg='covariant', value=Constant(value=True))])), ClassDef(name='ExceptionInfo', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Wraps sys.exc_info() objects and offers help for navigating the traceback.')), AnnAssign(target=Name(id='_assert_start_repr', ctx=Store()), annotation=Name(id='ClassVar', ctx=Load()), value=Constant(value="AssertionError('assert "), simple=1), AnnAssign(target=Name(id='_excinfo', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='E'), ctx=Load()), Constant(value='E'), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_striptext', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='_traceback', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Traceback', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='E'), ctx=Load()), Constant(value='E'), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='striptext', annotation=Name(id='str', ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Traceback', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=''), Constant(value=None)]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Store())], value=Name(id='excinfo', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_striptext', ctx=Store())], value=Name(id='striptext', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_traceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_exception', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='exception', annotation=Name(id='E', ctx=Load())), arg(arg='exprinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return an ExceptionInfo for an existing exception.\n\n        The exception must have a non-``None`` ``__traceback__`` attribute,\n        otherwise this function fails with an assertion error. This means that\n        the exception must have been raised, or added a traceback with the\n        :py:meth:`~BaseException.with_traceback()` method.\n\n        :param exprinfo:\n            A text string helping to determine if we should strip\n            ``AssertionError`` from the output. Defaults to the exception\n            message/``__str__()``.\n\n        .. versionadded:: 7.4\n        ')), Assert(test=Attribute(value=Name(id='exception', ctx=Load()), attr='__traceback__', ctx=Load()), msg=Constant(value='Exceptions passed to ExcInfo.from_exception(...) must have a non-None __traceback__.')), Assign(targets=[Name(id='exc_info', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='exception', ctx=Load())], keywords=[]), Name(id='exception', ctx=Load()), Attribute(value=Name(id='exception', ctx=Load()), attr='__traceback__', ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_exc_info', ctx=Load()), args=[Name(id='exc_info', ctx=Load()), Name(id='exprinfo', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='ExceptionInfo[E]')), FunctionDef(name='from_exc_info', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='exc_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Name(id='E', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='exprinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Like :func:`from_exception`, but using old-style exc_info tuple.')), Assign(targets=[Name(id='_striptext', ctx=Store())], value=Constant(value='')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='exprinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='AssertionError', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='exprinfo', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value='msg'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='exprinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exprinfo', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='exprinfo', ctx=Load()), Call(func=Attribute(value=Name(id='exprinfo', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='_assert_start_repr', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='_striptext', ctx=Store())], value=Constant(value='AssertionError: '))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='exc_info', ctx=Load()), Name(id='_striptext', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='ExceptionInfo[E]')), FunctionDef(name='from_current', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='exprinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return an ExceptionInfo matching the current traceback.\n\n        .. warning::\n\n            Experimental API\n\n        :param exprinfo:\n            A text string helping to determine if we should strip\n            ``AssertionError`` from the output. Defaults to the exception\n            message/``__str__()``.\n        ')), Assign(targets=[Name(id='tup', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='no current exception')), Assert(test=Compare(left=Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='no current exception')), Assert(test=Compare(left=Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='no current exception')), Assign(targets=[Name(id='exc_info', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Name(id='tup', ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_exc_info', ctx=Load()), args=[Name(id='exc_info', ctx=Load()), Name(id='exprinfo', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='ExceptionInfo[BaseException]')), FunctionDef(name='for_later', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return an unfilled ExceptionInfo.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='ExceptionInfo[E]')), FunctionDef(name='fill_unfilled', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Name(id='E', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fill an unfilled ExceptionInfo created with ``for_later()``.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), msg=Constant(value='ExceptionInfo was already filled')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Store())], value=Name(id='exc_info', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The exception class.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='.type can only be used after the context manager exits')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load())), FunctionDef(name='value', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The exception value.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='.value can only be used after the context manager exits')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='E', ctx=Load())), FunctionDef(name='tb', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The exception raw traceback.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='.tb can only be used after the context manager exits')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), slice=Constant(value=2), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='TracebackType', ctx=Load())), FunctionDef(name='typename', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The type name of the exception.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='.typename can only be used after the context manager exits')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), attr='__name__', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='traceback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The traceback.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_traceback', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_traceback', ctx=Store())], value=Call(func=Name(id='Traceback', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tb', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_traceback', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Traceback', ctx=Load())), FunctionDef(name='traceback', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Traceback', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_traceback', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='traceback', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value='<ExceptionInfo for raises contextmanager>'))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='<{} {} tblen={}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Call(func=Name(id='saferepr', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_excinfo', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='exconly', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tryshort', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Return the exception as a string.\n\n        When 'tryshort' resolves to True, and the exception is an\n        AssertionError, only the actual exception part of the exception\n        representation is returned (so 'AssertionError: ' is removed from\n        the beginning).\n        ")), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='format_exception_only', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='tryshort', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_striptext', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_striptext', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='errisinstance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if the exception is an instance of exc.\n\n        Consider using ``isinstance(excinfo.value, exc)`` instead.\n        ')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_getreprcrash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Load())], keywords=[])), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='entry', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='entry', ctx=Load()), attr='ishidden', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), body=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='raw', ctx=Load()), attr='co_filename', ctx=Load()), Attribute(value=Name(id='entry', ctx=Load()), attr='lineno', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='exconly', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exconly', ctx=Load()), args=[], keywords=[keyword(arg='tryshort', value=Constant(value=True))])), Return(value=Call(func=Name(id='ReprFileLocation', ctx=Load()), args=[Name(id='path', ctx=Load()), BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='exconly', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load())), FunctionDef(name='getrepr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='showlocals', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Constant(value='_TracebackStyle')), arg(arg='abspath', annotation=Name(id='bool', ctx=Load())), arg(arg='tbfilter', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='ExceptionInfo[BaseException]')], ctx=Load()), Name(id='Traceback', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='funcargs', annotation=Name(id='bool', ctx=Load())), arg(arg='truncate_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='chain', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value='long'), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style=="native"``.\n\n        :param str style:\n            long|short|line|no|native|value traceback style.\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param tbfilter:\n            A filter for traceback entries.\n\n            * If false, don\'t hide any entries.\n            * If true, hide internal entries and entries that contain a local\n              variable ``__tracebackhide__ = True``.\n            * If a callable, delegates the filtering to the callable.\n\n            Ignored if ``style`` is ``"native"``.\n\n        :param bool funcargs:\n            Show fixtures ("funcargs" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain:\n            If chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        ')), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='native')]), body=[Return(value=Call(func=Name(id='ReprExceptionInfo', ctx=Load()), args=[], keywords=[keyword(arg='reprtraceback', value=Call(func=Name(id='ReprTracebackNative', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Load()), body=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='_rawentry', ctx=Load()), orelse=Constant(value=None))], keywords=[])], keywords=[])), keyword(arg='reprcrash', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getreprcrash', ctx=Load()), args=[], keywords=[]))]))], orelse=[]), Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Name(id='FormattedExcinfo', ctx=Load()), args=[], keywords=[keyword(arg='showlocals', value=Name(id='showlocals', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='abspath', value=Name(id='abspath', ctx=Load())), keyword(arg='tbfilter', value=Name(id='tbfilter', ctx=Load())), keyword(arg='funcargs', value=Name(id='funcargs', ctx=Load())), keyword(arg='truncate_locals', value=Name(id='truncate_locals', ctx=Load())), keyword(arg='chain', value=Name(id='chain', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='fmt', ctx=Load()), attr='repr_excinfo', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ReprExceptionInfo'), Constant(value='ExceptionChainRepr')], ctx=Load()), ctx=Load())), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='regexp', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Regex pattern did not match.\n Regex: '), FormattedValue(value=Name(id='regexp', ctx=Load()), conversion=114), Constant(value='\n Input: '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)])), If(test=Compare(left=Name(id='regexp', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='\n Did you mean to `re.escape()` the regex?'))], orelse=[]), Assert(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='regexp', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), msg=Name(id='msg', ctx=Load())), Return(value=Constant(value=True))], decorator_list=[], returns=Constant(value='Literal[True]'))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='FormattedExcinfo', bases=[], keywords=[], body=[Expr(value=Constant(value='Presenting information about failing Functions and Generators.')), AnnAssign(target=Name(id='flow_marker', ctx=Store()), annotation=Name(id='ClassVar', ctx=Load()), value=Constant(value='>'), simple=1), AnnAssign(target=Name(id='fail_marker', ctx=Store()), annotation=Name(id='ClassVar', ctx=Load()), value=Constant(value='E'), simple=1), AnnAssign(target=Name(id='showlocals', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Constant(value='_TracebackStyle'), value=Constant(value='long'), simple=1), AnnAssign(target=Name(id='abspath', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='tbfilter', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())], ctx=Load()), Name(id='Traceback', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='funcargs', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='truncate_locals', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='chain', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), AnnAssign(target=Name(id='astcache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Name(id='dict', ctx=Load())), keyword(arg='init', value=Constant(value=False)), keyword(arg='repr', value=Constant(value=False))]), simple=1), FunctionDef(name='_getindent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Constant(value='Source'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='getstatement', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='source', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Return(value=Constant(value=0))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Return(value=BinOp(left=Constant(value=4), op=Add(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_getentrysource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry', annotation=Name(id='TracebackEntry', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='entry', ctx=Load()), attr='getsource', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='astcache', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='deindent', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='source', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Source'), ctx=Load())), FunctionDef(name='repr_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry', annotation=Name(id='TracebackEntry', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='funcargs', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='argname', ctx=Store()), Name(id='argvalue', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='getargs', ctx=Load()), args=[], keywords=[keyword(arg='var', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='argname', ctx=Load()), Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='argvalue', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='ReprFuncArgs', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFuncArgs'), ctx=Load())), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Source'), ctx=Load())), arg(arg='line_index', annotation=Name(id='int', ctx=Load())), arg(arg='excinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='short', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Return formatted and marked up source lines.')), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='line_index', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[AugAssign(target=Name(id='line_index', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='line_index', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load())], keywords=[])]), Compare(left=Name(id='line_index', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[Constant(value='???')], keywords=[])), Assign(targets=[Name(id='line_index', ctx=Store())], value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='space_prefix', ctx=Store())], value=Constant(value='    ')), If(test=Name(id='short', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='space_prefix', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='line_index', ctx=Load()), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], keywords=[]))], orelse=[For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=Name(id='line_index', ctx=Load())), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='space_prefix', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='flow_marker', ctx=Load()), op=Add(), right=Constant(value='   ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='line_index', ctx=Load()), ctx=Load()))], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='source', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='line_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='space_prefix', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='indent', ctx=Store())], value=IfExp(test=Name(id='short', ctx=Load()), body=Constant(value=4), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getindent', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_exconly', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='markall', value=Constant(value=True))])], keywords=[]))], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_exconly', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='indent', annotation=Name(id='int', ctx=Load())), arg(arg='markall', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value=False)]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='indentstr', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='indent', ctx=Load()))), Assign(targets=[Name(id='exlines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='excinfo', ctx=Load()), attr='exconly', ctx=Load()), args=[], keywords=[keyword(arg='tryshort', value=Constant(value=True))]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='failindent', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='fail_marker', ctx=Load()), op=Add(), right=Subscript(value=Name(id='indentstr', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))), For(target=Name(id='line', ctx=Store()), iter=Name(id='exlines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='failindent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='markall', ctx=Load())), body=[Assign(targets=[Name(id='failindent', ctx=Store())], value=Name(id='indentstr', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='repr_locals', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='locals', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='showlocals', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='keys', ctx=Store())], value=ListComp(elt=Name(id='loc', ctx=Load()), generators=[comprehension(target=Name(id='loc', ctx=Store()), iter=Name(id='locals', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='loc', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='@')])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='keys', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='locals', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__builtins__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='__builtins__ = <builtins>')], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='truncate_locals', ctx=Load()), body=[Assign(targets=[Name(id='str_repr', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='str_repr', ctx=Store())], value=Call(func=Name(id='safeformat', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<10')])), Constant(value=' = '), FormattedValue(value=Name(id='str_repr', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='ReprLocals', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprLocals'), ctx=Load())), FunctionDef(name='repr_traceback_entry', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackEntry', ctx=Load()), ctx=Load())), arg(arg='excinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='style', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Name(id='entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='_repr_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=Attribute(value=Name(id='entry', ctx=Load()), attr='_repr_style', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='style', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='short'), Constant(value='long')], ctx=Load())]), Compare(left=Name(id='entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getentrysource', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[Constant(value='???')], keywords=[])), Assign(targets=[Name(id='line_index', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='line_index', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='entry', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='entry', ctx=Load()), attr='getfirstlinesource', ctx=Load()), args=[], keywords=[])))]), Assign(targets=[Name(id='short', ctx=Store())], value=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='short')])), Assign(targets=[Name(id='reprargs', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='short', ctx=Load())), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_args', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_source', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='line_index', ctx=Load()), Name(id='excinfo', ctx=Load())], keywords=[keyword(arg='short', value=Name(id='short', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=Name(id='short', ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='in %s'), op=Mod(), right=Attribute(value=Name(id='entry', ctx=Load()), attr='name', ctx=Load())))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='excinfo', ctx=Load()), Attribute(value=Name(id='excinfo', ctx=Load()), attr='typename', ctx=Load())]), Constant(value='')]))]), Assign(targets=[Name(id='entry_path', ctx=Store())], value=Attribute(value=Name(id='entry', ctx=Load()), attr='path', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_makepath', ctx=Load()), args=[Name(id='entry_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reprfileloc', ctx=Store())], value=Call(func=Name(id='ReprFileLocation', ctx=Load()), args=[Name(id='path', ctx=Load()), BinOp(left=Attribute(value=Name(id='entry', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='localsrepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_locals', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='locals', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='ReprEntry', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='reprargs', ctx=Load()), Name(id='localsrepr', ctx=Load()), Name(id='reprfileloc', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='value')]), body=[If(test=Name(id='excinfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='ReprEntry', ctx=Load()), args=[Name(id='lines', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Name(id='style', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='excinfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_exconly', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='ReprEntry', ctx=Load()), args=[Name(id='lines', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Name(id='style', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value='ReprEntry')), FunctionDef(name='_makepath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='abspath', ctx=Load())), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='Path', ctx=Load())], keywords=[])]), body=[Try(body=[Assign(targets=[Name(id='np', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='np', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])]), body=[Return(value=Name(id='np', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='repr_traceback', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='traceback', ctx=Store())], value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='traceback', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tbfilter', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='traceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tbfilter', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tbfilter', ctx=Load()), body=[Assign(targets=[Name(id='traceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='RecursionError', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='traceback', ctx=Store()), Name(id='extraline', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_truncate_recursive_traceback', ctx=Load()), args=[Name(id='traceback', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='extraline', ctx=Store())], value=Constant(value=None))]), If(test=UnaryOp(op=Not(), operand=Name(id='traceback', ctx=Load())), body=[If(test=Compare(left=Name(id='extraline', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='extraline', ctx=Store())], value=Constant(value='All traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames.'))], orelse=[]), Assign(targets=[Name(id='entries', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_traceback_entry', ctx=Load()), args=[Constant(value=None), Name(id='excinfo', ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Name(id='ReprTraceback', ctx=Load()), args=[Name(id='entries', ctx=Load()), Name(id='extraline', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='last', ctx=Store())], value=Subscript(value=Name(id='traceback', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='value')]), body=[Assign(targets=[Name(id='entries', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_traceback_entry', ctx=Load()), args=[Name(id='last', ctx=Load()), Name(id='excinfo', ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Name(id='ReprTraceback', ctx=Load()), args=[Name(id='entries', ctx=Load()), Constant(value=None)], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='entries', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_traceback_entry', ctx=Load()), args=[Name(id='entry', ctx=Load()), IfExp(test=Compare(left=Name(id='last', ctx=Load()), ops=[Eq()], comparators=[Name(id='entry', ctx=Load())]), body=Name(id='excinfo', ctx=Load()), orelse=Constant(value=None))], keywords=[]), generators=[comprehension(target=Name(id='entry', ctx=Store()), iter=Name(id='traceback', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='ReprTraceback', ctx=Load()), args=[Name(id='entries', ctx=Load()), Name(id='extraline', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))]))], decorator_list=[], returns=Constant(value='ReprTraceback')), FunctionDef(name='_truncate_recursive_traceback', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='traceback', annotation=Name(id='Traceback', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Truncate the given recursive traceback trying to find the starting\n        point of the recursion.\n\n        The detection is done by going through each traceback entry and\n        finding the point in which the locals of the frame are equal to the\n        locals of a previous frame (see ``recursionindex()``).\n\n        Handle the situation where the recursion process might raise an\n        exception (for example comparing numpy arrays using equality raises a\n        TypeError), in which case we do our best to warn the user of the\n        error and show a limited traceback.\n        ')), Try(body=[Assign(targets=[Name(id='recursionindex', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='recursionindex', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assign(targets=[Name(id='max_frames', ctx=Store())], value=Constant(value=10)), AnnAssign(target=Name(id='extraline', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Constant(value='!!! Recursion error detected, but an error occurred locating the origin of recursion.\n  The following exception happened when comparing locals in the stack frame:\n    {exc_type}: {exc_msg}\n  Displaying first and last {max_frames} stack frames out of {total}.'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='exc_type', value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), attr='__name__', ctx=Load())), keyword(arg='exc_msg', value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), keyword(arg='max_frames', value=Name(id='max_frames', ctx=Load())), keyword(arg='total', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='traceback', ctx=Load())], keywords=[]))]), simple=1), Assign(targets=[Name(id='traceback', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='traceback', ctx=Load()), slice=Slice(upper=Name(id='max_frames', ctx=Load())), ctx=Load()), op=Add(), right=Subscript(value=Name(id='traceback', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='max_frames', ctx=Load()))), ctx=Load())))])], orelse=[If(test=Compare(left=Name(id='recursionindex', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='extraline', ctx=Store())], value=Constant(value='!!! Recursion detected (same locals & position)')), Assign(targets=[Name(id='traceback', ctx=Store())], value=Subscript(value=Name(id='traceback', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='recursionindex', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))], orelse=[Assign(targets=[Name(id='extraline', ctx=Store())], value=Constant(value=None))])], finalbody=[]), Return(value=Tuple(elts=[Name(id='traceback', ctx=Load()), Name(id='extraline', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Traceback', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='repr_excinfo', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='repr_chain', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='ReprTraceback', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ReprFileLocation', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='e', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), simple=1), AnnAssign(target=Name(id='excinfo_', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='excinfo', ctx=Load()), simple=1), Assign(targets=[Name(id='descr', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='seen', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='e', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='id', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='id', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='excinfo_', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='BaseExceptionGroup', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='reprtraceback', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ReprTracebackNative', ctx=Load()), Name(id='ReprTraceback', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='ReprTracebackNative', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='excinfo_', ctx=Load()), attr='value', ctx=Load())], keywords=[]), Attribute(value=Name(id='excinfo_', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Subscript(value=Attribute(value=Name(id='excinfo_', ctx=Load()), attr='traceback', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='_rawentry', ctx=Load())], keywords=[])], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='reprtraceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='repr_traceback', ctx=Load()), args=[Name(id='excinfo_', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='reprcrash', ctx=Store())], value=Call(func=Attribute(value=Name(id='excinfo_', ctx=Load()), attr='_getreprcrash', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='reprtraceback', ctx=Store())], value=Call(func=Name(id='ReprTracebackNative', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='e', ctx=Load()), Constant(value=None)], keywords=[])], keywords=[])), Assign(targets=[Name(id='reprcrash', ctx=Store())], value=Constant(value=None))]), AugAssign(target=Name(id='repr_chain', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Name(id='reprtraceback', ctx=Load()), Name(id='reprcrash', ctx=Load()), Name(id='descr', ctx=Load())], ctx=Load())], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='__cause__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='chain', ctx=Load())]), body=[Assign(targets=[Name(id='e', ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='__cause__', ctx=Load())), Assign(targets=[Name(id='excinfo_', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load()), body=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_exception', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='descr', ctx=Store())], value=Constant(value='The above exception was the direct cause of the following exception:'))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='__context__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='e', ctx=Load()), attr='__suppress_context__', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='chain', ctx=Load())]), body=[Assign(targets=[Name(id='e', ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='__context__', ctx=Load())), Assign(targets=[Name(id='excinfo_', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load()), body=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_exception', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='descr', ctx=Store())], value=Constant(value='During handling of the above exception, another exception occurred:'))], orelse=[Assign(targets=[Name(id='e', ctx=Store())], value=Constant(value=None))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='repr_chain', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='ExceptionChainRepr', ctx=Load()), args=[Name(id='repr_chain', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='ExceptionChainRepr'))], decorator_list=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='TerminalRepr', bases=[], keywords=[], body=[FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='io', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Name(id='io', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), conversion=-1), Constant(value=' instance at '), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='0x')])), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ExceptionRepr', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='reprtraceback', ctx=Store()), annotation=Constant(value='ReprTraceback'), simple=1), AnnAssign(target=Name(id='reprcrash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load()), simple=1), AnnAssign(target=Name(id='sections', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='field', ctx=Load()), args=[], keywords=[keyword(arg='init', value=Constant(value=False)), keyword(arg='default_factory', value=Name(id='list', ctx=Load()))]), simple=1), FunctionDef(name='addsection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='content', annotation=Name(id='str', ctx=Load())), arg(arg='sep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='-')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sections', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Name(id='content', ctx=Load()), Name(id='sep', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='content', ctx=Store()), Name(id='sep', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='sections', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ExceptionChainRepr', bases=[Name(id='ExceptionRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='chain', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='ReprTraceback'), Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chain', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='ReprTraceback'), Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='reprtraceback', value=Subscript(value=Subscript(value=Name(id='chain', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='reprcrash', value=Subscript(value=Subscript(value=Name(id='chain', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=1), ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chain', ctx=Store())], value=Name(id='chain', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='element', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='chain', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='element', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='element', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Subscript(value=Name(id='element', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[keyword(arg='yellow', value=Constant(value=True))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprExceptionInfo', bases=[Name(id='ExceptionRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='reprtraceback', ctx=Store()), annotation=Constant(value='ReprTraceback'), simple=1), AnnAssign(target=Name(id='reprcrash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load()), simple=1), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprtraceback', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprTraceback', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='reprentries', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ReprEntry'), Constant(value='ReprEntryNative')], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='extraline', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Constant(value='_TracebackStyle'), simple=1), AnnAssign(target=Name(id='entrysep', ctx=Store()), annotation=Name(id='ClassVar', ctx=Load()), value=Constant(value='_ '), simple=1), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='entry', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='reprentries', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='long')]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='entry', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='reprentries', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='next_entry', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprentries', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='long')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='short')]), Compare(left=Attribute(value=Name(id='next_entry', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='long')])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='entrysep', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='extraline', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extraline', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprTracebackNative', bases=[Name(id='ReprTraceback', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tblines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reprentries', ctx=Store())], value=List(elts=[Call(func=Name(id='ReprEntryNative', ctx=Load()), args=[Name(id='tblines', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extraline', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Constant(value='native'))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ReprEntryNative', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Constant(value='_TracebackStyle'), ctx=Load()), value=Constant(value='native'), simple=1), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprEntry', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='reprfuncargs', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFuncArgs'), ctx=Load()), simple=1), AnnAssign(target=Name(id='reprlocals', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprLocals'), ctx=Load()), simple=1), AnnAssign(target=Name(id='reprfileloc', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ReprFileLocation'), ctx=Load()), simple=1), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Constant(value='_TracebackStyle'), simple=1), FunctionDef(name='_write_entry_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write the source code portions of a list of traceback entries with syntax highlighting.\n\n        Usually entries are lines like these:\n\n            "     x = 1"\n            ">    assert x == 2"\n            "E    assert 1 == 2"\n\n        This function takes care of rendering the "source" portions of it (the lines without\n        the "E" prefix) using syntax highlighting, taking care to not highlighting the ">"\n        character, as doing so might break line continuations.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='fail_marker', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='FormattedExcinfo', ctx=Load()), attr='fail_marker', ctx=Load()), conversion=-1), Constant(value='   ')])), Assign(targets=[Name(id='indent_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fail_marker', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='indents', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='source_lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='failure_lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='is_failure_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='fail_marker', ctx=Load())], keywords=[])), If(test=Name(id='is_failure_line', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='failure_lines', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load())), ctx=Load())], keywords=[])), Break()], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='value')]), body=[Expr(value=Call(func=Attribute(value=Name(id='source_lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='indents', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Name(id='indent_size', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source_lines', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Name(id='indent_size', ctx=Load())), ctx=Load())], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='_write_source', ctx=Load()), args=[Name(id='source_lines', ctx=Load()), Name(id='indents', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='failure_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(arg='bold', value=Constant(value=True)), keyword(arg='red', value=Constant(value=True))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='short')]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reprfileloc', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprfileloc', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_entry_lines', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reprlocals', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprlocals', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[keyword(arg='indent', value=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=8)))]))], orelse=[]), Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reprfuncargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprfuncargs', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_entry_lines', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reprlocals', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprlocals', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reprfileloc', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reprfileloc', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}\n{}\n{}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='reprlocals', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='reprfileloc', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprFileLocation', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='path', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='lineno', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='message', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='__post_init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n')], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[keyword(arg='bold', value=Constant(value=True)), keyword(arg='red', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[Constant(value=':'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprLocals', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load())), arg(arg='indent')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[For(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), ClassDef(name='ReprFuncArgs', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='args', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), body=[Assign(targets=[Name(id='linesofar', ctx=Store())], value=Constant(value='')), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), body=[Assign(targets=[Name(id='ns', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])), If(test=Compare(left=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ns', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='linesofar', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=2)), ops=[Gt()], comparators=[Attribute(value=Name(id='tw', ctx=Load()), attr='fullwidth', ctx=Load())]), body=[If(test=Name(id='linesofar', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='linesofar', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='linesofar', ctx=Store())], value=Name(id='ns', ctx=Load()))], orelse=[If(test=Name(id='linesofar', ctx=Load()), body=[AugAssign(target=Name(id='linesofar', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=', '), op=Add(), right=Name(id='ns', ctx=Load())))], orelse=[Assign(targets=[Name(id='linesofar', ctx=Store())], value=Name(id='ns', ctx=Load()))])])], orelse=[]), If(test=Name(id='linesofar', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='linesofar', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False))])]), FunctionDef(name='getfslineno', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return source location (path, lineno) for the given object.\n\n    If the source cannot be determined return ("", -1).\n\n    The line number is 0-based.\n    ')), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='get_real_func', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='place_as')], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='place_as', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='Code', ctx=Load()), attr='from_function', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='fn', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getsourcefile', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfile', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value=''), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='fspath', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='fn', ctx=Load()), Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])]), Constant(value='')])), Assign(targets=[Name(id='lineno', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), If(test=Name(id='fspath', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Call(func=Name(id='findsource', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='fspath', ctx=Load()), Name(id='lineno', ctx=Load())], ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Attribute(value=Name(id='code', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='firstlineno', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_PLUGGY_DIR', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='pluggy', ctx=Load()), attr='__file__', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='oc')], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='_PLUGGY_DIR', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__init__.py')]), body=[Assign(targets=[Name(id='_PLUGGY_DIR', ctx=Store())], value=Attribute(value=Name(id='_PLUGGY_DIR', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='_PYTEST_DIR', ctx=Store())], value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='_pytest', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load())), FunctionDef(name='filter_traceback', args=arguments(posonlyargs=[], args=[arg(arg='entry', annotation=Name(id='TracebackEntry', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if a TracebackEntry instance should be included in tracebacks.\n\n    We hide traceback entries of:\n\n    * dynamically generated code (no code to show up for it);\n    * internal traceback from pytest or its internal libraries, py and pluggy.\n    ')), Assign(targets=[Name(id='raw_filename', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='frame', ctx=Load()), attr='code', ctx=Load()), attr='raw', ctx=Load()), attr='co_filename', ctx=Load())), Assign(targets=[Name(id='is_generated', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='<'), ops=[In()], comparators=[Name(id='raw_filename', ctx=Load())]), Compare(left=Constant(value='>'), ops=[In()], comparators=[Name(id='raw_filename', ctx=Load())])])), If(test=Name(id='is_generated', ctx=Load()), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parents', ctx=Store())], value=Attribute(value=Name(id='p', ctx=Load()), attr='parents', ctx=Load())), If(test=Compare(left=Name(id='_PLUGGY_DIR', ctx=Load()), ops=[In()], comparators=[Name(id='parents', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='_PYTEST_DIR', ctx=Load()), ops=[In()], comparators=[Name(id='parents', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])