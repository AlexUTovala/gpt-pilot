Module(body=[Expr(value=Constant(value='Discover and run doctests in modules and test files.')), Import(names=[alias(name='bdb')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='types')]), Import(names=[alias(name='warnings')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Pattern')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest', names=[alias(name='outcomes')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprFileLocation')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='TerminalRepr')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='safe_getattr')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='OutcomeException')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='fnmatch_ex')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='import_path')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Module')], level=0), ImportFrom(module='_pytest.python_api', names=[alias(name='approx')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestWarning')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='doctest')])], orelse=[]), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICE_NONE', ctx=Store())], value=Constant(value='none')), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICE_CDIFF', ctx=Store())], value=Constant(value='cdiff')), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICE_NDIFF', ctx=Store())], value=Constant(value='ndiff')), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICE_UDIFF', ctx=Store())], value=Constant(value='udiff')), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE', ctx=Store())], value=Constant(value='only_first_failure')), Assign(targets=[Name(id='DOCTEST_REPORT_CHOICES', ctx=Store())], value=Tuple(elts=[Name(id='DOCTEST_REPORT_CHOICE_NONE', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_CDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_NDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_UDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='RUNNER_CLASS', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='CHECKER_CLASS', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='doctest.OutputChecker'), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='doctest_optionflags'), Constant(value='Option flags for doctests')], keywords=[keyword(arg='type', value=Constant(value='args')), keyword(arg='default', value=List(elts=[Constant(value='ELLIPSIS')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='doctest_encoding'), Constant(value='Encoding used for doctest files')], keywords=[keyword(arg='default', value=Constant(value='utf-8'))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='collect')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--doctest-modules')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Run doctests in all .py modules')), keyword(arg='dest', value=Constant(value='doctestmodules'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--doctest-report')], keywords=[keyword(arg='type', value=Attribute(value=Name(id='str', ctx=Load()), attr='lower', ctx=Load())), keyword(arg='default', value=Constant(value='udiff')), keyword(arg='help', value=Constant(value='Choose another output format for diffs on doctest failure')), keyword(arg='choices', value=Name(id='DOCTEST_REPORT_CHOICES', ctx=Load())), keyword(arg='dest', value=Constant(value='doctestreport'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--doctest-glob')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='default', value=List(elts=[], ctx=Load())), keyword(arg='metavar', value=Constant(value='pat')), keyword(arg='help', value=Constant(value='Doctests file matching pattern, default: test*.txt')), keyword(arg='dest', value=Constant(value='doctestglob'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--doctest-ignore-import-errors')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Ignore doctest ImportErrors')), keyword(arg='dest', value=Constant(value='doctest_ignore_import_errors'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--doctest-continue-on-failure')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='For a given doctest, continue to run after the first failure')), keyword(arg='dest', value=Constant(value='doctest_continue_on_failure'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_unconfigure', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['RUNNER_CLASS']), Assign(targets=[Name(id='RUNNER_CLASS', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collect_file', args=arguments(posonlyargs=[], args=[arg(arg='file_path', annotation=Name(id='Path', ctx=Load())), arg(arg='parent', annotation=Name(id='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='parent', ctx=Load()), attr='config', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='file_path', ctx=Load()), attr='suffix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.py')]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='doctestmodules', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='_is_setup_py', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[]), Call(func=Name(id='_is_main_py', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))]), body=[AnnAssign(target=Name(id='mod', ctx=Store()), annotation=Name(id='DoctestModule', ctx=Load()), value=Call(func=Attribute(value=Name(id='DoctestModule', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[keyword(arg='path', value=Name(id='file_path', ctx=Load()))]), simple=1), Return(value=Name(id='mod', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='_is_doctest', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='file_path', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='txt', ctx=Store()), annotation=Name(id='DoctestTextfile', ctx=Load()), value=Call(func=Attribute(value=Name(id='DoctestTextfile', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[keyword(arg='path', value=Name(id='file_path', ctx=Load()))]), simple=1), Return(value=Name(id='txt', ctx=Load()))], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='DoctestModule'), Constant(value='DoctestTextfile')], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_is_setup_py', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='path', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='setup.py')]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='read_bytes', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value=b'setuptools'), ops=[In()], comparators=[Name(id='contents', ctx=Load())]), Compare(left=Constant(value=b'distutils'), ops=[In()], comparators=[Name(id='contents', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_is_doctest', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='parent', annotation=Name(id='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='path', ctx=Load()), attr='suffix', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='.txt'), Constant(value='.rst')], ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='parent', ctx=Load()), attr='session', ctx=Load()), attr='isinitpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='globs', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='doctestglob')], keywords=[]), List(elts=[Constant(value='test*.txt')], ctx=Load())])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='fnmatch_ex', ctx=Load()), args=[Name(id='glob', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='glob', ctx=Store()), iter=Name(id='globs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_is_main_py', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='path', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__.py')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='ReprFailDoctest', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reprlocation_lines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='ReprFileLocation', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reprlocation_lines', ctx=Store())], value=Name(id='reprlocation_lines', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='reprlocation', ctx=Store()), Name(id='lines', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='reprlocation_lines', ctx=Load()), body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='reprlocation', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='MultipleDoctestFailures', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='failures', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='doctest.DocTestFailure'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='failures', ctx=Store())], value=Name(id='failures', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_init_runner_class', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), ClassDef(name='PytestDoctestRunner', bases=[Attribute(value=Name(id='doctest', ctx=Load()), attr='DebugRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Runner to collect failures.\n\n        Note that the out variable in this case is a list instead of a\n        stdout-like object.\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='checker', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='doctest.OutputChecker'), ctx=Load())), arg(arg='verbose', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='optionflags', annotation=Name(id='int', ctx=Load())), arg(arg='continue_on_failure', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='checker', value=Name(id='checker', ctx=Load())), keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='optionflags', value=Name(id='optionflags', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='continue_on_failure', ctx=Store())], value=Name(id='continue_on_failure', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='report_failure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='out'), arg(arg='test', annotation=Constant(value='doctest.DocTest')), arg(arg='example', annotation=Constant(value='doctest.Example')), arg(arg='got', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='failure', ctx=Store())], value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestFailure', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='example', ctx=Load()), Name(id='got', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='continue_on_failure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='failure', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Name(id='failure', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='report_unexpected_exception', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='out'), arg(arg='test', annotation=Constant(value='doctest.DocTest')), arg(arg='example', annotation=Constant(value='doctest.Example')), arg(arg='exc_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='OutcomeException', ctx=Load())], keywords=[]), body=[Raise(exc=Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='bdb', ctx=Load()), attr='BdbQuit', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value='Quitting debugger')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='failure', ctx=Store())], value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='UnexpectedException', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='example', ctx=Load()), Name(id='exc_info', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='continue_on_failure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='failure', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Name(id='failure', ctx=Load()))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Return(value=Name(id='PytestDoctestRunner', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='doctest.DocTestRunner'), ctx=Load())), FunctionDef(name='_get_runner', args=arguments(posonlyargs=[], args=[arg(arg='checker', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='doctest.OutputChecker'), ctx=Load())), arg(arg='verbose', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='optionflags', annotation=Name(id='int', ctx=Load())), arg(arg='continue_on_failure', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=True)]), body=[Global(names=['RUNNER_CLASS']), If(test=Compare(left=Name(id='RUNNER_CLASS', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='RUNNER_CLASS', ctx=Store())], value=Call(func=Name(id='_init_runner_class', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='RUNNER_CLASS', ctx=Load()), args=[], keywords=[keyword(arg='checker', value=Name(id='checker', ctx=Load())), keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='optionflags', value=Name(id='optionflags', ctx=Load())), keyword(arg='continue_on_failure', value=Name(id='continue_on_failure', ctx=Load()))]))], decorator_list=[], returns=Constant(value='doctest.DocTestRunner')), ClassDef(name='DoctestItem', bases=[Name(id='Item', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='parent', annotation=Constant(value='Union[DoctestTextfile, DoctestModule]')), arg(arg='runner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='doctest.DocTestRunner'), ctx=Load())), arg(arg='dtest', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='doctest.DocTest'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='runner', ctx=Store())], value=Name(id='runner', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Store())], value=Name(id='dtest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fixture_request', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FixtureRequest', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_parent', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='parent', annotation=Constant(value='Union[DoctestTextfile, DoctestModule]'))], kwonlyargs=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='runner', annotation=Constant(value='doctest.DocTestRunner')), arg(arg='dtest', annotation=Constant(value='doctest.DocTest'))], kw_defaults=[None, None, None], defaults=[]), body=[Expr(value=Constant(value='The public named constructor.')), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='from_parent', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='parent', value=Name(id='parent', ctx=Load())), keyword(arg='runner', value=Name(id='runner', ctx=Load())), keyword(arg='dtest', value=Name(id='dtest', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fixture_request', ctx=Store())], value=Call(func=Name(id='_setup_fixtures', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='globs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='getfixture', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fixture_request', ctx=Load()), attr='getfixturevalue', ctx=Load()))])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fixture_request', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Constant(value='doctest_namespace')], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load()), attr='globs', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='globs', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='runtest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='runner', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Name(id='_check_all_skipped', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_disable_output_capturing_for_darwin', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='failures', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='doctest.DocTestFailure'), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='runner', ctx=Load()), attr='run', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load())], keywords=[keyword(arg='out', value=Name(id='failures', ctx=Load()))])), If(test=Name(id='failures', ctx=Load()), body=[Raise(exc=Call(func=Name(id='MultipleDoctestFailures', ctx=Load()), args=[Name(id='failures', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_disable_output_capturing_for_darwin', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disable output capturing. Otherwise, stdout is lost to doctest (#985).')), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='Darwin')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='capman', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[])), If(test=Name(id='capman', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=True))])), Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='read_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='repr_failure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), AnnAssign(target=Name(id='failures', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestFailure', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='UnexpectedException', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestFailure', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='UnexpectedException', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='failures', ctx=Store())], value=List(elts=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load())], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='MultipleDoctestFailures', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='failures', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='failures', ctx=Load()))], orelse=[])]), If(test=Compare(left=Name(id='failures', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='repr_failure', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='reprlocation_lines', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='failure', ctx=Store()), iter=Name(id='failures', ctx=Load()), body=[Assign(targets=[Name(id='example', ctx=Store())], value=Attribute(value=Name(id='failure', ctx=Load()), attr='example', ctx=Load())), Assign(targets=[Name(id='test', ctx=Store())], value=Attribute(value=Name(id='failure', ctx=Load()), attr='test', ctx=Load())), Assign(targets=[Name(id='filename', ctx=Store())], value=Attribute(value=Name(id='test', ctx=Load()), attr='filename', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='lineno', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='lineno', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='test', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Attribute(value=Name(id='example', ctx=Load()), attr='lineno', ctx=Load())), op=Add(), right=Constant(value=1)))]), Assign(targets=[Name(id='message', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='failure', ctx=Load())], keywords=[]), attr='__name__', ctx=Load())), Assign(targets=[Name(id='reprlocation', ctx=Store())], value=Call(func=Name(id='ReprFileLocation', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='_get_checker', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='report_choice', ctx=Store())], value=Call(func=Name(id='_get_report_choice', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='doctestreport')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='failure', ctx=Load()), attr='test', ctx=Load()), attr='docstring', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='failure', ctx=Load()), attr='test', ctx=Load()), attr='docstring', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=False)], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='%03d %s'), op=Mod(), right=Tuple(elts=[BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Attribute(value=Name(id='test', ctx=Load()), attr='lineno', ctx=Load())), op=Add(), right=Constant(value=1)), Name(id='x', ctx=Load())], ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='example', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Constant(value=9)), Constant(value=0)], keywords=[]), upper=BinOp(left=Attribute(value=Name(id='example', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))], orelse=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Constant(value='EXAMPLE LOCATION UNKNOWN, not showing all tests of that example')], ctx=Load())), Assign(targets=[Name(id='indent', ctx=Store())], value=Constant(value='>>>')), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='example', ctx=Load()), attr='source', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='??? '), FormattedValue(value=Name(id='indent', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='line', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='indent', ctx=Store())], value=Constant(value='...'))], orelse=[])]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='failure', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestFailure', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='checker', ctx=Load()), attr='output_difference', ctx=Load()), args=[Name(id='example', ctx=Load()), Attribute(value=Name(id='failure', ctx=Load()), attr='got', ctx=Load()), Name(id='report_choice', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[Assign(targets=[Name(id='inner_excinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_exc_info', ctx=Load()), args=[Attribute(value=Name(id='failure', ctx=Load()), attr='exc_info', ctx=Load())], keywords=[])), AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=Constant(value='UNEXPECTED EXCEPTION: %s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='inner_excinfo', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], ctx=Load())), AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=ListComp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\n')], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='failure', ctx=Load()), attr='exc_info', ctx=Load()), ctx=Load())], keywords=[]), ifs=[], is_async=0)]))]), Expr(value=Call(func=Attribute(value=Name(id='reprlocation_lines', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='reprlocation', ctx=Load()), Name(id='lines', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='ReprFailDoctest', ctx=Load()), args=[Name(id='reprlocation_lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='reportinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dtest', ctx=Load()), attr='lineno', ctx=Load()), BinOp(left=Constant(value='[doctest] %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='os.PathLike[str]'), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_flag_lookup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='DONT_ACCEPT_TRUE_FOR_1', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='DONT_ACCEPT_TRUE_FOR_1', ctx=Load())), keyword(arg='DONT_ACCEPT_BLANKLINE', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='DONT_ACCEPT_BLANKLINE', ctx=Load())), keyword(arg='NORMALIZE_WHITESPACE', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='NORMALIZE_WHITESPACE', ctx=Load())), keyword(arg='ELLIPSIS', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='ELLIPSIS', ctx=Load())), keyword(arg='IGNORE_EXCEPTION_DETAIL', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='IGNORE_EXCEPTION_DETAIL', ctx=Load())), keyword(arg='COMPARISON_FLAGS', value=Attribute(value=Name(id='doctest', ctx=Load()), attr='COMPARISON_FLAGS', ctx=Load())), keyword(arg='ALLOW_UNICODE', value=Call(func=Name(id='_get_allow_unicode_flag', ctx=Load()), args=[], keywords=[])), keyword(arg='ALLOW_BYTES', value=Call(func=Name(id='_get_allow_bytes_flag', ctx=Load()), args=[], keywords=[])), keyword(arg='NUMBER', value=Call(func=Name(id='_get_number_flag', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_optionflags', args=arguments(posonlyargs=[], args=[arg(arg='parent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='optionflags_str', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='parent', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='doctest_optionflags')], keywords=[])), Assign(targets=[Name(id='flag_lookup_table', ctx=Store())], value=Call(func=Name(id='_get_flag_lookup', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='flag_acc', ctx=Store())], value=Constant(value=0)), For(target=Name(id='flag', ctx=Store()), iter=Name(id='optionflags_str', ctx=Load()), body=[AugAssign(target=Name(id='flag_acc', ctx=Store()), op=BitOr(), value=Subscript(value=Name(id='flag_lookup_table', ctx=Load()), slice=Name(id='flag', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='flag_acc', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_continue_on_failure', args=arguments(posonlyargs=[], args=[arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='continue_on_failure', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='doctest_continue_on_failure')], keywords=[])), If(test=Name(id='continue_on_failure', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='usepdb')], keywords=[]), body=[Assign(targets=[Name(id='continue_on_failure', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='continue_on_failure', ctx=Load()))], decorator_list=[]), ClassDef(name='DoctestTextfile', bases=[Name(id='Module', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Constant(value=None)), FunctionDef(name='collect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='doctest_encoding')], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='read_text', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='globs', ctx=Store())], value=Dict(keys=[Constant(value='__name__')], values=[Constant(value='__main__')])), Assign(targets=[Name(id='optionflags', ctx=Store())], value=Call(func=Name(id='get_optionflags', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='_get_runner', ctx=Load()), args=[], keywords=[keyword(arg='verbose', value=Constant(value=False)), keyword(arg='optionflags', value=Name(id='optionflags', ctx=Load())), keyword(arg='checker', value=Call(func=Name(id='_get_checker', ctx=Load()), args=[], keywords=[])), keyword(arg='continue_on_failure', value=Call(func=Name(id='_get_continue_on_failure', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestParser', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='get_doctest', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='globs', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load()), Constant(value=0)], keywords=[])), If(test=Attribute(value=Name(id='test', ctx=Load()), attr='examples', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='DoctestItem', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='name', value=Attribute(value=Name(id='test', ctx=Load()), attr='name', ctx=Load())), keyword(arg='runner', value=Name(id='runner', ctx=Load())), keyword(arg='dtest', value=Name(id='test', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='DoctestItem', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_check_all_skipped', args=arguments(posonlyargs=[], args=[arg(arg='test', annotation=Constant(value='doctest.DocTest'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise pytest.skip() if all examples in the given DocTest have the SKIP\n    option set.')), Import(names=[alias(name='doctest')]), Assign(targets=[Name(id='all_skipped', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='options', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='doctest', ctx=Load()), attr='SKIP', ctx=Load()), Constant(value=False)], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='test', ctx=Load()), attr='examples', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='all_skipped', ctx=Load()), body=[Expr(value=Call(func=Name(id='skip', ctx=Load()), args=[Constant(value='all tests skipped by +SKIP option')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_is_mocked', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return if an object is possibly a mock object by checking the\n    existence of a highly improbable attribute.')), Return(value=Compare(left=Call(func=Name(id='safe_getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='pytest_mock_example_attribute_that_shouldnt_exist'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_patch_unwrap_mock_aware', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Context manager which replaces ``inspect.unwrap`` with a version\n    that's aware of mock objects and doesn't recurse into them.")), Assign(targets=[Name(id='real_unwrap', ctx=Store())], value=Attribute(value=Name(id='inspect', ctx=Load()), attr='unwrap', ctx=Load())), FunctionDef(name='_mock_aware_unwrap', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='stop', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Try(body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='stop', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='stop', ctx=Load()), ops=[Is()], comparators=[Name(id='_is_mocked', ctx=Load())])]), body=[Return(value=Call(func=Name(id='real_unwrap', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[keyword(arg='stop', value=Name(id='_is_mocked', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='_stop', ctx=Store())], value=Name(id='stop', ctx=Load())), Return(value=Call(func=Name(id='real_unwrap', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[keyword(arg='stop', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='_is_mocked', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='_stop', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])])))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="Got %r when unwrapping %r.  This is usually caused by a violation of Python's object protocol; see e.g. https://github.com/pytest-dev/pytest/issues/5080"), op=Mod(), right=Tuple(elts=[Name(id='e', ctx=Load()), Name(id='func', ctx=Load())], ctx=Load())), Name(id='PytestWarning', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Any', ctx=Load())), Assign(targets=[Attribute(value=Name(id='inspect', ctx=Load()), attr='unwrap', ctx=Store())], value=Name(id='_mock_aware_unwrap', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='inspect', ctx=Load()), attr='unwrap', ctx=Store())], value=Name(id='real_unwrap', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='DoctestModule', bases=[Name(id='Module', ctx=Load())], keywords=[], body=[FunctionDef(name='collect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), ClassDef(name='MockAwareDocTestFinder', bases=[Attribute(value=Name(id='doctest', ctx=Load()), attr='DocTestFinder', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A hackish doctest finder that overrides stdlib internals to fix a stdlib bug.\n\n            https://github.com/pytest-dev/pytest/issues/3456\n            https://bugs.python.org/issue25532\n            ')), FunctionDef(name='_find_lineno', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='source_lines')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Doctest code does not take into account `@property`, this\n                is a hackish way to fix it. https://bugs.python.org/issue17446\n\n                Wrapped Doctests will need to be unwrapped so the correct\n                line number is returned. This will be reported upstream. #8796\n                ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='property', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='fget'), Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__wrapped__')], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='unwrap', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_find_lineno', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='source_lines', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_find', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tests'), arg(arg='obj'), arg(arg='name'), arg(arg='module'), arg(arg='source_lines'), arg(arg='globs'), arg(arg='seen')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_is_mocked', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='_patch_unwrap_mock_aware', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_find', ctx=Load()), args=[Name(id='tests', ctx=Load()), Name(id='obj', ctx=Load()), Name(id='name', ctx=Load()), Name(id='module', ctx=Load()), Name(id='source_lines', ctx=Load()), Name(id='globs', ctx=Load()), Name(id='seen', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=13)], ctx=Load())]), body=[FunctionDef(name='_from_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module'), arg(arg='object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="`cached_property` objects are never considered a part\n                    of the 'current module'. As such they are skipped by doctest.\n                    Here we override `_from_module` to check the underlying\n                    function instead. https://github.com/python/cpython/issues/107995\n                    ")), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='functools', ctx=Load()), Constant(value='cached_property')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='object', ctx=Load()), Attribute(value=Name(id='functools', ctx=Load()), attr='cached_property', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='object', ctx=Store())], value=Attribute(value=Name(id='object', ctx=Load()), attr='func', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_from_module', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='object', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[Pass()])], decorator_list=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='conftest.py')]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='_importconftest', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='importmode')], keywords=[])], keywords=[keyword(arg='rootpath', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load()))]))], orelse=[Try(body=[Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Name(id='import_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[keyword(arg='root', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load())), keyword(arg='mode', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='importmode')], keywords=[]))]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='doctest_ignore_import_errors')], keywords=[]), body=[Expr(value=Call(func=Name(id='skip', ctx=Load()), args=[BinOp(left=Constant(value='unable to import module %r'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()))], keywords=[]))], orelse=[Raise()])])], orelse=[], finalbody=[])]), Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Name(id='MockAwareDocTestFinder', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='optionflags', ctx=Store())], value=Call(func=Name(id='get_optionflags', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='_get_runner', ctx=Load()), args=[], keywords=[keyword(arg='verbose', value=Constant(value=False)), keyword(arg='optionflags', value=Name(id='optionflags', ctx=Load())), keyword(arg='checker', value=Call(func=Name(id='_get_checker', ctx=Load()), args=[], keywords=[])), keyword(arg='continue_on_failure', value=Call(func=Name(id='_get_continue_on_failure', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[]))])), For(target=Name(id='test', ctx=Store()), iter=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='module', ctx=Load()), Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='test', ctx=Load()), attr='examples', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='DoctestItem', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='name', value=Attribute(value=Name(id='test', ctx=Load()), attr='name', ctx=Load())), keyword(arg='runner', value=Name(id='runner', ctx=Load())), keyword(arg='dtest', value=Name(id='test', ctx=Load()))])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='DoctestItem', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_setup_fixtures', args=arguments(posonlyargs=[], args=[arg(arg='doctest_item', annotation=Name(id='DoctestItem', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Used by DoctestTextfile and DoctestItem to setup fixture information.')), FunctionDef(name='func', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='doctest_item', ctx=Load()), attr='funcargs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='fm', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='doctest_item', ctx=Load()), attr='session', ctx=Load()), attr='_fixturemanager', ctx=Load())), Assign(targets=[Attribute(value=Name(id='doctest_item', ctx=Load()), attr='_fixtureinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='fm', ctx=Load()), attr='getfixtureinfo', ctx=Load()), args=[], keywords=[keyword(arg='node', value=Name(id='doctest_item', ctx=Load())), keyword(arg='func', value=Name(id='func', ctx=Load())), keyword(arg='cls', value=Constant(value=None)), keyword(arg='funcargs', value=Constant(value=False))])), Assign(targets=[Name(id='fixture_request', ctx=Store())], value=Call(func=Name(id='FixtureRequest', ctx=Load()), args=[Name(id='doctest_item', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='fixture_request', ctx=Load()), attr='_fillfixtures', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='fixture_request', ctx=Load()))], decorator_list=[], returns=Name(id='FixtureRequest', ctx=Load())), FunctionDef(name='_init_checker_class', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='doctest')]), Import(names=[alias(name='re')]), ClassDef(name='LiteralsOutputChecker', bases=[Attribute(value=Name(id='doctest', ctx=Load()), attr='OutputChecker', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_unicode_literal_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\W|^)[uU]([rR]?[\\\'\\"])'), Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_bytes_literal_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\W|^)[bB]([rR]?[\\\'\\"])'), Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_number_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n            (?P<number>\n              (?P<mantissa>\n                (?P<integer1> [+-]?\\d*)\\.(?P<fraction>\\d+)\n                |\n                (?P<integer2> [+-]?\\d+)\\.\n              )\n              (?:\n                [Ee]\n                (?P<exponent1> [+-]?\\d+)\n              )?\n              |\n              (?P<integer3> [+-]?\\d+)\n              (?:\n                [Ee]\n                (?P<exponent2> [+-]?\\d+)\n              )\n            )\n            '), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), FunctionDef(name='check_output', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='want', annotation=Name(id='str', ctx=Load())), arg(arg='got', annotation=Name(id='str', ctx=Load())), arg(arg='optionflags', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='check_output', ctx=Load()), args=[Name(id='want', ctx=Load()), Name(id='got', ctx=Load()), Name(id='optionflags', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='allow_unicode', ctx=Store())], value=BinOp(left=Name(id='optionflags', ctx=Load()), op=BitAnd(), right=Call(func=Name(id='_get_allow_unicode_flag', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='allow_bytes', ctx=Store())], value=BinOp(left=Name(id='optionflags', ctx=Load()), op=BitAnd(), right=Call(func=Name(id='_get_allow_bytes_flag', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='allow_number', ctx=Store())], value=BinOp(left=Name(id='optionflags', ctx=Load()), op=BitAnd(), right=Call(func=Name(id='_get_number_flag', ctx=Load()), args=[], keywords=[]))), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='allow_unicode', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='allow_bytes', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='allow_number', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[]), FunctionDef(name='remove_prefixes', args=arguments(posonlyargs=[], args=[arg(arg='regex', annotation=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='txt', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='regex', ctx=Load()), Constant(value='\\1\\2'), Name(id='txt', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), If(test=Name(id='allow_unicode', ctx=Load()), body=[Assign(targets=[Name(id='want', ctx=Store())], value=Call(func=Name(id='remove_prefixes', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_literal_re', ctx=Load()), Name(id='want', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Name(id='remove_prefixes', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_literal_re', ctx=Load()), Name(id='got', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='allow_bytes', ctx=Load()), body=[Assign(targets=[Name(id='want', ctx=Store())], value=Call(func=Name(id='remove_prefixes', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bytes_literal_re', ctx=Load()), Name(id='want', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Name(id='remove_prefixes', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bytes_literal_re', ctx=Load()), Name(id='got', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='allow_number', ctx=Load()), body=[Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_unwanted_precision', ctx=Load()), args=[Name(id='want', ctx=Load()), Name(id='got', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='check_output', ctx=Load()), args=[Name(id='want', ctx=Load()), Name(id='got', ctx=Load()), Name(id='optionflags', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_remove_unwanted_precision', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='want', annotation=Name(id='str', ctx=Load())), arg(arg='got', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='wants', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_number_re', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='want', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='gots', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_number_re', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='got', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='wants', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='gots', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='got', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='offset', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='w', ctx=Store()), Name(id='g', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='wants', ctx=Load()), Name(id='gots', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='fraction', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='fraction')], keywords=[]), simple=1), AnnAssign(target=Name(id='exponent', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='exponent1')], keywords=[]), simple=1), If(test=Compare(left=Name(id='exponent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exponent', ctx=Store())], value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='exponent2')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='precision', ctx=Store())], value=IfExp(test=Compare(left=Name(id='fraction', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=0), orelse=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fraction', ctx=Load())], keywords=[]))), If(test=Compare(left=Name(id='exponent', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='precision', ctx=Store()), op=Sub(), value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='exponent', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='approx', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='abs', value=BinOp(left=Constant(value=10), op=Pow(), right=UnaryOp(op=USub(), operand=Name(id='precision', ctx=Load()))))])]), body=[Assign(targets=[Name(id='got', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='got', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='offset', ctx=Load()))), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), op=Add(), right=Subscript(value=Name(id='got', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='offset', ctx=Load()))), ctx=Load()))), AugAssign(target=Name(id='offset', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))))], orelse=[])], orelse=[]), Return(value=Name(id='got', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Return(value=Name(id='LiteralsOutputChecker', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='doctest.OutputChecker'), ctx=Load())), FunctionDef(name='_get_checker', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a doctest.OutputChecker subclass that supports some\n    additional options:\n\n    * ALLOW_UNICODE and ALLOW_BYTES options to ignore u\'\' and b\'\'\n      prefixes (respectively) in string literals. Useful when the same\n      doctest should run in Python 2 and Python 3.\n\n    * NUMBER to ignore floating-point differences smaller than the\n      precision of the literal number in the doctest.\n\n    An inner class is used to avoid importing "doctest" at the module\n    level.\n    ')), Global(names=['CHECKER_CLASS']), If(test=Compare(left=Name(id='CHECKER_CLASS', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='CHECKER_CLASS', ctx=Store())], value=Call(func=Name(id='_init_checker_class', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='CHECKER_CLASS', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value='doctest.OutputChecker')), FunctionDef(name='_get_allow_unicode_flag', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Register and return the ALLOW_UNICODE flag.')), Import(names=[alias(name='doctest')]), Return(value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='register_optionflag', ctx=Load()), args=[Constant(value='ALLOW_UNICODE')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_allow_bytes_flag', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Register and return the ALLOW_BYTES flag.')), Import(names=[alias(name='doctest')]), Return(value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='register_optionflag', ctx=Load()), args=[Constant(value='ALLOW_BYTES')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_number_flag', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Register and return the NUMBER flag.')), Import(names=[alias(name='doctest')]), Return(value=Call(func=Attribute(value=Name(id='doctest', ctx=Load()), attr='register_optionflag', ctx=Load()), args=[Constant(value='NUMBER')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_report_choice', args=arguments(posonlyargs=[], args=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the actual `doctest` module flag value.\n\n    We want to do it as late as possible to avoid importing `doctest` and all\n    its dependencies when parsing options, as it adds overhead and breaks tests.\n    ')), Import(names=[alias(name='doctest')]), Return(value=Subscript(value=Dict(keys=[Name(id='DOCTEST_REPORT_CHOICE_UDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_CDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_NDIFF', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_ONLY_FIRST_FAILURE', ctx=Load()), Name(id='DOCTEST_REPORT_CHOICE_NONE', ctx=Load())], values=[Attribute(value=Name(id='doctest', ctx=Load()), attr='REPORT_UDIFF', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='REPORT_CDIFF', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='REPORT_NDIFF', ctx=Load()), Attribute(value=Name(id='doctest', ctx=Load()), attr='REPORT_ONLY_FIRST_FAILURE', ctx=Load()), Constant(value=0)]), slice=Name(id='key', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='doctest_namespace', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fixture that returns a :py:class:`dict` that will be injected into the\n    namespace of doctests.\n\n    Usually this fixture is used in conjunction with another ``autouse`` fixture:\n\n    .. code-block:: python\n\n        @pytest.fixture(autouse=True)\n        def add_np(doctest_namespace):\n            doctest_namespace["np"] = numpy\n\n    For more details: :ref:`doctest_namespace`.\n    ')), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Constant(value='session'))])], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])