Module(body=[Expr(value=Constant(value='Interactive debugging with PDB, the Python Debugger.')), Import(names=[alias(name='argparse')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Import(names=[alias(name='unittest')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest', names=[alias(name='outcomes')], level=0), ImportFrom(module='_pytest._code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ConftestImportFailure')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='PytestPluginManager')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.config.exceptions', names=[alias(name='UsageError')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Node')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='BaseReport')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest.capture', names=[alias(name='CaptureManager')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='CallInfo')], level=0)], orelse=[]), FunctionDef(name='_validate_usepdb_cls', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Validate syntax of --pdbcls option.')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='modname', ctx=Store()), Name(id='classname', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentTypeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=" is not in the format 'modname:classname'")])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Name(id='modname', ctx=Load()), Name(id='classname', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--pdb')], keywords=[keyword(arg='dest', value=Constant(value='usepdb')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Start the interactive Python debugger on errors or KeyboardInterrupt'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--pdbcls')], keywords=[keyword(arg='dest', value=Constant(value='usepdb_cls')), keyword(arg='metavar', value=Constant(value='modulename:classname')), keyword(arg='type', value=Name(id='_validate_usepdb_cls', ctx=Load())), keyword(arg='help', value=Constant(value='Specify a custom interactive Python debugger for use with --pdb.For example: --pdbcls=IPython.terminal.debugger:TerminalPdb'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--trace')], keywords=[keyword(arg='dest', value=Constant(value='trace')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Immediately break when running each test'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pdb')]), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='trace')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='PdbTrace', ctx=Load()), args=[], keywords=[]), Constant(value='pdbtrace')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='usepdb')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='PdbInvoke', ctx=Load()), args=[], keywords=[]), Constant(value='pdbinvoke')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_saved', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='pdb', ctx=Load()), attr='set_trace', ctx=Load()), Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_pluginmanager', ctx=Load()), Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_config', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='pdb', ctx=Load()), attr='set_trace', ctx=Store())], value=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='set_trace', ctx=Load())), Assign(targets=[Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_pluginmanager', ctx=Store())], value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load())), Assign(targets=[Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), FunctionDef(name='fin', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='pdb', ctx=Load()), attr='set_trace', ctx=Store()), Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_pluginmanager', ctx=Store()), Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_config', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_saved', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Name(id='fin', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='pytestPDB', bases=[], keywords=[], body=[Expr(value=Constant(value='Pseudo PDB that defers to the real pdb.')), AnnAssign(target=Name(id='_pluginmanager', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PytestPluginManager', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_config', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_saved', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PytestPluginManager', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='_recursive_debug', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Name(id='_wrapped_pdb_cls', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='_is_capturing', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='capman', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='CaptureManager'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='capman', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='is_capturing', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_import_pdb_cls', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='capman', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='CaptureManager'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load())), body=[Import(names=[alias(name='pdb')]), Return(value=Attribute(value=Name(id='pdb', ctx=Load()), attr='Pdb', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='usepdb_cls', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='usepdb_cls')], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='cls', ctx=Load()), attr='_wrapped_pdb_cls', ctx=Load()), Compare(left=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_wrapped_pdb_cls', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='usepdb_cls', ctx=Load())])]), body=[Return(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_wrapped_pdb_cls', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), If(test=Name(id='usepdb_cls', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='modname', ctx=Store()), Name(id='classname', ctx=Store())], ctx=Store())], value=Name(id='usepdb_cls', ctx=Load())), Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='classname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='pdb_cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), For(target=Name(id='part', ctx=Store()), iter=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Assign(targets=[Name(id='pdb_cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='pdb_cls', ctx=Load()), Name(id='part', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Constant(value=':'), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='modname', ctx=Load()), Name(id='classname', ctx=Load())], ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[JoinedStr(values=[Constant(value='--pdbcls: could not import '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[]), cause=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Import(names=[alias(name='pdb')]), Assign(targets=[Name(id='pdb_cls', ctx=Store())], value=Attribute(value=Name(id='pdb', ctx=Load()), attr='Pdb', ctx=Load()))]), Assign(targets=[Name(id='wrapped_cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_get_pdb_wrapper_class', ctx=Load()), args=[Name(id='pdb_cls', ctx=Load()), Name(id='capman', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='_wrapped_pdb_cls', ctx=Store())], value=Tuple(elts=[Name(id='usepdb_cls', ctx=Load()), Name(id='wrapped_cls', ctx=Load())], ctx=Load())), Return(value=Name(id='wrapped_cls', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_get_pdb_wrapper_class', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='pdb_cls'), arg(arg='capman', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='CaptureManager'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='_pytest.config')]), ClassDef(name='PytestPdbWrapper', bases=[Name(id='pdb_cls', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_pytest_capman', ctx=Store())], value=Name(id='capman', ctx=Load())), Assign(targets=[Name(id='_continued', ctx=Store())], value=Constant(value=False)), FunctionDef(name='do_debug', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='cls', ctx=Load()), attr='_recursive_debug', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='do_debug', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='cls', ctx=Load()), attr='_recursive_debug', ctx=Store()), op=Sub(), value=Constant(value=1)), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='do_continue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='do_continue', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_recursive_debug', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assert(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='config', ctx=Load()), attr='create_terminal_writer', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='capman', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytest_capman', ctx=Load())), Assign(targets=[Name(id='capturing', ctx=Store())], value=Call(func=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_is_capturing', ctx=Load()), args=[Name(id='capman', ctx=Load())], keywords=[])), If(test=Name(id='capturing', ctx=Load()), body=[If(test=Compare(left=Name(id='capturing', ctx=Load()), ops=[Eq()], comparators=[Constant(value='global')]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), Constant(value='PDB continue (IO-capturing resumed)')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), BinOp(left=Constant(value='PDB continue (IO-capturing resumed for %s)'), op=Mod(), right=Name(id='capturing', ctx=Load()))], keywords=[]))]), Assert(test=Compare(left=Name(id='capman', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), Constant(value='PDB continue')], keywords=[]))])], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_leave_pdb', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load())), keyword(arg='pdb', value=Name(id='self', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_continued', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='do_c', ctx=Store()), Name(id='do_cont', ctx=Store())], value=Name(id='do_continue', ctx=Load())), FunctionDef(name='do_quit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise Exit outcome when quit command is used in pdb.\n\n                This is a bit of a hack - it would be better if BdbQuit\n                could be handled, but this would require to wrap the\n                whole pytest run, and adjust the report etc.\n                ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='do_quit', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_recursive_debug', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value='Quitting debugger')], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='do_q', ctx=Store())], value=Name(id='do_quit', ctx=Load())), Assign(targets=[Name(id='do_exit', ctx=Store())], value=Name(id='do_quit', ctx=Load())), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f'), arg(arg='tb')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Suspend on setup().\n\n                Needed after do_continue resumed, and entering another\n                breakpoint again.\n                ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='setup', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='tb', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='ret', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_continued', ctx=Load())]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_pytest_capman', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytest_capman', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=True))]))], orelse=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_stack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stack', ctx=Store()), Name(id='i', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_stack', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='t', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='f', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[])), While(test=BoolOp(op=And(), values=[Name(id='i', ctx=Load()), Call(func=Attribute(value=Attribute(value=Subscript(value=Subscript(value=Name(id='stack', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='f_locals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__tracebackhide__'), Constant(value=False)], keywords=[])]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='stack', ctx=Load()), Name(id='i', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), Return(value=Name(id='PytestPdbWrapper', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_init_pdb', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='method')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Initialize PDB debugging, dropping any IO capturing.')), Import(names=[alias(name='_pytest.config')]), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='capman', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CaptureManager', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1)], orelse=[Assign(targets=[Name(id='capman', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[]))]), If(test=Name(id='capman', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=True))]))], orelse=[]), If(test=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load()), body=[Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='config', ctx=Load()), attr='create_terminal_writer', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_recursive_debug', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='header', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='header'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='header', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), Name(id='header', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='capturing', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_is_capturing', ctx=Load()), args=[Name(id='capman', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='capturing', ctx=Load()), ops=[Eq()], comparators=[Constant(value='global')]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), JoinedStr(values=[Constant(value='PDB '), FormattedValue(value=Name(id='method', ctx=Load()), conversion=-1), Constant(value=' (IO-capturing turned off)')])], keywords=[]))], orelse=[If(test=Name(id='capturing', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), BinOp(left=Constant(value='PDB %s (IO-capturing turned off for %s)'), op=Mod(), right=Tuple(elts=[Name(id='method', ctx=Load()), Name(id='capturing', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), JoinedStr(values=[Constant(value='PDB '), FormattedValue(value=Name(id='method', ctx=Load()), conversion=-1)])], keywords=[]))])])])], orelse=[])], orelse=[]), Assign(targets=[Name(id='_pdb', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_import_pdb_cls', ctx=Load()), args=[Name(id='capman', ctx=Load())], keywords=[]), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_pluginmanager', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_enter_pdb', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='cls', ctx=Load()), attr='_config', ctx=Load())), keyword(arg='pdb', value=Name(id='_pdb', ctx=Load()))]))], orelse=[]), Return(value=Name(id='_pdb', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='set_trace', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Invoke debugging via ``Pdb.set_trace``, dropping any IO capturing.')), Assign(targets=[Name(id='frame', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[], keywords=[]), attr='f_back', ctx=Load())), Assign(targets=[Name(id='_pdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_init_pdb', ctx=Load()), args=[Constant(value='set_trace'), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_pdb', ctx=Load()), attr='set_trace', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PdbInvoke', bases=[], keywords=[], body=[FunctionDef(name='pytest_exception_interact', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Name(id='Node', ctx=Load())), arg(arg='call', annotation=Constant(value='CallInfo[Any]')), arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='capman', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[])), If(test=Name(id='capman', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='suspend_global_capture', ctx=Load()), args=[], keywords=[keyword(arg='in_', value=Constant(value=True))])), Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='capman', ctx=Load()), attr='read_global_capture', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Name(id='_enter_pdb', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), Name(id='report', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_internalerror', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Name(id='_postmortem_traceback', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='post_mortem', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PdbTrace', bases=[], keywords=[], body=[FunctionDef(name='pytest_pyfunc_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pyfuncitem')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='wrap_pytest_function_for_tracing', ctx=Load()), args=[Name(id='pyfuncitem', ctx=Load())], keywords=[])), Expr(value=Yield())], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='wrap_pytest_function_for_tracing', args=arguments(posonlyargs=[], args=[arg(arg='pyfuncitem')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Change the Python function object of the given Function item by a\n    wrapper which actually enters pdb before calling the python function\n    itself, effectively leaving the user in the pdb prompt in the first\n    statement of the function.')), Assign(targets=[Name(id='_pdb', ctx=Store())], value=Call(func=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_init_pdb', ctx=Load()), args=[Constant(value='runcall')], keywords=[])), Assign(targets=[Name(id='testfunction', ctx=Store())], value=Attribute(value=Name(id='pyfuncitem', ctx=Load()), attr='obj', ctx=Load())), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='func', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='testfunction', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_pdb', ctx=Load()), attr='runcall', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='testfunction', ctx=Load())], keywords=[])]), Assign(targets=[Attribute(value=Name(id='pyfuncitem', ctx=Load()), attr='obj', ctx=Store())], value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='maybe_wrap_pytest_function_for_tracing', args=arguments(posonlyargs=[], args=[arg(arg='pyfuncitem')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrap the given pytestfunct item for tracing support if --trace was given in\n    the command line.')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='pyfuncitem', ctx=Load()), attr='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='trace')], keywords=[]), body=[Expr(value=Call(func=Name(id='wrap_pytest_function_for_tracing', ctx=Load()), args=[Name(id='pyfuncitem', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_enter_pdb', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Node', ctx=Load())), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='rep', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tw', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='getplugin', ctx=Load()), args=[Constant(value='terminalreporter')], keywords=[]), attr='_tw', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='showcapture', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='showcapture', ctx=Load())), For(target=Tuple(elts=[Name(id='sectionname', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Constant(value='stdout'), Attribute(value=Name(id='rep', ctx=Load()), attr='capstdout', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='stderr'), Attribute(value=Name(id='rep', ctx=Load()), attr='capstderr', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='log'), Attribute(value=Name(id='rep', ctx=Load()), attr='caplog', ctx=Load())], ctx=Load())], ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='showcapture', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='sectionname', ctx=Load()), Constant(value='all')], ctx=Load())]), Name(id='content', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), BinOp(left=Constant(value='captured '), op=Add(), right=Name(id='sectionname', ctx=Load()))], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), Constant(value='traceback')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='>'), Constant(value='entering PDB')], keywords=[])), Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Name(id='_postmortem_traceback', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='_pdbshown', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='post_mortem', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[])), Return(value=Name(id='rep', ctx=Load()))], decorator_list=[], returns=Name(id='BaseReport', ctx=Load())), FunctionDef(name='_postmortem_traceback', args=arguments(posonlyargs=[], args=[arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='doctest', names=[alias(name='UnexpectedException')], level=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='UnexpectedException', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='exc_info', ctx=Load()), slice=Constant(value=2), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='ConftestImportFailure', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='excinfo', ctx=Load()), slice=Constant(value=2), ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='excinfo', ctx=Load()), attr='_excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Subscript(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='_excinfo', ctx=Load()), slice=Constant(value=2), ctx=Load()))])])], decorator_list=[], returns=Attribute(value=Name(id='types', ctx=Load()), attr='TracebackType', ctx=Load())), FunctionDef(name='post_mortem', args=arguments(posonlyargs=[], args=[arg(arg='t', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='TracebackType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='pytestPDB', ctx=Load()), attr='_init_pdb', ctx=Load()), args=[Constant(value='post_mortem')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='interaction', ctx=Load()), args=[Constant(value=None), Name(id='t', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='p', ctx=Load()), attr='quitting', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value='Quitting debugger')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])