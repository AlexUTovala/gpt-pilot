Module(body=[Expr(value=Constant(value='Rewrite assertion AST to produce nice error messages.')), Import(names=[alias(name='ast')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='importlib.abc')]), Import(names=[alias(name='importlib.machinery')]), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='io')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='marshal')]), Import(names=[alias(name='os')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tokenize')]), Import(names=[alias(name='types')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='pathlib', names=[alias(name='PurePath')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='IO')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='DEFAULT_REPR_MAX_SIZE')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='saferepr')], level=0), ImportFrom(module='_pytest._version', names=[alias(name='version')], level=0), ImportFrom(module='_pytest.assertion', names=[alias(name='util')], level=0), ImportFrom(module='_pytest.assertion.util', names=[alias(name='format_explanation', asname='_format_explanation')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='fnmatch_ex')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest.assertion', names=[alias(name='AssertionState')], level=0)], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Assign(targets=[Name(id='namedExpr', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='NamedExpr', ctx=Load())), Assign(targets=[Name(id='astNameConstant', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Constant', ctx=Load())), Assign(targets=[Name(id='astStr', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Constant', ctx=Load())), Assign(targets=[Name(id='astNum', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Constant', ctx=Load()))], orelse=[Assign(targets=[Name(id='namedExpr', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Expr', ctx=Load())), Assign(targets=[Name(id='astNameConstant', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='NameConstant', ctx=Load())), Assign(targets=[Name(id='astStr', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Str', ctx=Load())), Assign(targets=[Name(id='astNum', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Num', ctx=Load()))]), Assign(targets=[Name(id='assertstate_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Constant(value='AssertionState'), ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='PYTEST_TAG', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='cache_tag', ctx=Load()), conversion=-1), Constant(value='-pytest-'), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='PYC_EXT', ctx=Store())], value=BinOp(left=Constant(value='.py'), op=Add(), right=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='__debug__', ctx=Load()), Constant(value='c')]), Constant(value='o')]))), Assign(targets=[Name(id='PYC_TAIL', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='PYTEST_TAG', ctx=Load())), op=Add(), right=Name(id='PYC_EXT', ctx=Load()))), ClassDef(name='AssertionRewritingHook', bases=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='abc', ctx=Load()), attr='MetaPathFinder', ctx=Load()), Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='abc', ctx=Load()), attr='Loader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='PEP302/PEP451 import hook which rewrites asserts.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fnpats', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='python_files')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fnpats', ctx=Store())], value=List(elts=[Constant(value='test_*.py'), Constant(value='*_test.py')], ctx=Load()))])], orelse=[], finalbody=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Session', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_rewritten_names', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_must_rewrite', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_writing_pyc', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_basenames_to_check_rewrite', ctx=Store())], value=Set(elts=[Constant(value='conftest')])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_marked_for_rewrite_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session_paths_checked', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_session', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Session', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store())], value=Name(id='session', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session_paths_checked', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='_find_spec', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='PathFinder', ctx=Load()), attr='find_spec', ctx=Load())), FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='target', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_writing_pyc', ctx=Load()), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='state', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_early_rewrite_bailout', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[BinOp(left=Constant(value='find_module called for: %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_spec', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='spec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='SourceFileLoader', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load())], keywords=[]))]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='fn', ctx=Store())], value=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_should_rewrite', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='fn', ctx=Load()), Name(id='state', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_file_location', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[keyword(arg='loader', value=Name(id='self', ctx=Load())), keyword(arg='submodule_search_locations', value=Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='ModuleSpec', ctx=Load()), ctx=Load())), FunctionDef(name='create_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec', annotation=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='ModuleSpec', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), ctx=Load())), FunctionDef(name='exec_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='module', ctx=Load()), attr='__spec__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='module', ctx=Load()), attr='__spec__', ctx=Load()), attr='origin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='module', ctx=Load()), attr='__spec__', ctx=Load()), attr='origin', ctx=Load())], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rewritten_names', ctx=Load()), slice=Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load()), ctx=Store())], value=Name(id='fn', ctx=Load())), Assign(targets=[Name(id='write', ctx=Store())], value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='sys', ctx=Load()), attr='dont_write_bytecode', ctx=Load()))), Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Call(func=Name(id='get_cache_dir', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), If(test=Name(id='write', ctx=Load()), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Call(func=Name(id='try_makedirs', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ok', ctx=Load())), body=[Assign(targets=[Name(id='write', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='read only directory: '), FormattedValue(value=Name(id='cache_dir', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='cache_name', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='fn', ctx=Load()), attr='name', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=3))), ctx=Load()), op=Add(), right=Name(id='PYC_TAIL', ctx=Load()))), Assign(targets=[Name(id='pyc', ctx=Store())], value=BinOp(left=Name(id='cache_dir', ctx=Load()), op=Div(), right=Name(id='cache_name', ctx=Load()))), Assign(targets=[Name(id='co', ctx=Store())], value=Call(func=Name(id='_read_pyc', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='pyc', ctx=Load()), Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='co', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='rewriting '), FormattedValue(value=Name(id='fn', ctx=Load()), conversion=114)])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='source_stat', ctx=Store()), Name(id='co', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_rewrite_test', ctx=Load()), args=[Name(id='fn', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[])), If(test=Name(id='write', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_writing_pyc', ctx=Store())], value=Constant(value=True)), Try(body=[Expr(value=Call(func=Name(id='_write_pyc', ctx=Load()), args=[Name(id='state', ctx=Load()), Name(id='co', ctx=Load()), Name(id='source_stat', ctx=Load()), Name(id='pyc', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_writing_pyc', ctx=Store())], value=Constant(value=False))])], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='found cached rewritten pyc for '), FormattedValue(value=Name(id='fn', ctx=Load()), conversion=-1)])], keywords=[]))]), Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Name(id='co', ctx=Load()), Attribute(value=Name(id='module', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_early_rewrite_bailout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='state', annotation=Constant(value='AssertionState'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A fast way to get out of rewriting modules.\n\n        Profiling has shown that the call to PathFinder.find_spec (inside of\n        the find_spec from this class) is a major slowdown, so, this method\n        tries to filter what we're sure won't be rewritten before getting to\n        it.\n        ")), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_session_paths_checked', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session_paths_checked', ctx=Store())], value=Constant(value=True)), For(target=Name(id='initial_path', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='_initialpaths', ctx=Load()), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='initial_path', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_basenames_to_check_rewrite', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_basenames_to_check_rewrite', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='PurePath', ctx=Load()), args=[Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[]), attr='with_suffix', ctx=Load()), args=[Constant(value='.py')], keywords=[])), For(target=Name(id='pat', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='fnpats', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='pat', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Name(id='fnmatch_ex', ctx=Load()), args=[Name(id='pat', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_marked_for_rewrite', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='early skip of rewriting module: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_should_rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='fn', annotation=Name(id='str', ctx=Load())), arg(arg='state', annotation=Constant(value='AssertionState'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='conftest.py')]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='rewriting conftest file: '), FormattedValue(value=Name(id='fn', ctx=Load()), conversion=114)])], keywords=[])), Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='isinitpath', ctx=Load()), args=[Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='matched test file (was specified on cmdline): '), FormattedValue(value=Name(id='fn', ctx=Load()), conversion=114)])], keywords=[])), Return(value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='fn_path', ctx=Store())], value=Call(func=Name(id='PurePath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), For(target=Name(id='pat', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='fnpats', ctx=Load()), body=[If(test=Call(func=Name(id='fnmatch_ex', ctx=Load()), args=[Name(id='pat', ctx=Load()), Name(id='fn_path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='matched test file '), FormattedValue(value=Name(id='fn', ctx=Load()), conversion=114)])], keywords=[])), Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_marked_for_rewrite', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_is_marked_for_rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='state', annotation=Constant(value='AssertionState'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_marked_for_rewrite_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[For(target=Name(id='marked', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_must_rewrite', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='marked', ctx=Load())]), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Name(id='marked', ctx=Load()), op=Add(), right=Constant(value='.'))], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='matched marked file '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=' (from '), FormattedValue(value=Name(id='marked', ctx=Load()), conversion=114), Constant(value=')')])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_marked_for_rewrite_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Constant(value=True)), Return(value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_marked_for_rewrite_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Constant(value=False)), Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='mark_rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='names', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Mark import names as needing to be rewritten.\n\n        The named module or package as well as any nested modules will\n        be rewritten on import.\n        ')), Assign(targets=[Name(id='already_imported', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]), attr='intersection', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())], keywords=[]), attr='difference', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_rewritten_names', ctx=Load())], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='already_imported', ctx=Load()), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='AssertionRewriter', ctx=Load()), attr='is_rewrite_disabled', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='mod', ctx=Load()), attr='__doc__', ctx=Load()), Constant(value='')])], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='mod', ctx=Load()), attr='__loader__', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_already_imported', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_must_rewrite', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_marked_for_rewrite_cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_warn_already_imported', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestAssertRewriteWarning')], level=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestAssertRewriteWarning', ctx=Load()), args=[BinOp(left=Constant(value='Module already imported so cannot be rewritten: %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=5))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pathname', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Optional PEP302 get_data API.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pathname', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='bytes', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())]), body=[ImportFrom(module='importlib.resources.abc', names=[alias(name='TraversableResources')], level=0)], orelse=[ImportFrom(module='importlib.abc', names=[alias(name='TraversableResources')], level=0)]), FunctionDef(name='get_resource_reader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), body=[ImportFrom(module='importlib.readers', names=[alias(name='FileReader')], level=0)], orelse=[ImportFrom(module='importlib.resources.readers', names=[alias(name='FileReader')], level=0)]), Return(value=Call(func=Name(id='FileReader', ctx=Load()), args=[Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='SimpleNamespace', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rewritten_names', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='TraversableResources', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_write_pyc_fp', args=arguments(posonlyargs=[], args=[arg(arg='fp', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), arg(arg='source_stat', annotation=Attribute(value=Name(id='os', ctx=Load()), attr='stat_result', ctx=Load())), arg(arg='co', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='MAGIC_NUMBER', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=b'\x00\x00\x00\x00')), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mtime', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='source_stat', ctx=Load()), attr='st_mtime', ctx=Load())], keywords=[]), op=BitAnd(), right=Constant(value=4294967295))), Assign(targets=[Name(id='size', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='source_stat', ctx=Load()), attr='st_size', ctx=Load()), op=BitAnd(), right=Constant(value=4294967295))), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='<LL'), Name(id='mtime', ctx=Load()), Name(id='size', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='marshal', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='co', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_write_pyc', args=arguments(posonlyargs=[], args=[arg(arg='state', annotation=Constant(value='AssertionState')), arg(arg='co', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load())), arg(arg='source_stat', annotation=Attribute(value=Name(id='os', ctx=Load()), attr='stat_result', ctx=Load())), arg(arg='pyc', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='proc_pyc', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='pyc', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), conversion=-1)])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='proc_pyc', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Expr(value=Call(func=Name(id='_write_pyc_fp', ctx=Load()), args=[Name(id='fp', ctx=Load()), Name(id='source_stat', ctx=Load()), Name(id='co', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='error writing pyc file at '), FormattedValue(value=Name(id='proc_pyc', ctx=Load()), conversion=-1), Constant(value=': errno='), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='proc_pyc', ctx=Load()), Name(id='pyc', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='error writing pyc file at '), FormattedValue(value=Name(id='pyc', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_rewrite_test', args=arguments(posonlyargs=[], args=[arg(arg='fn', annotation=Name(id='Path', ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and rewrite *fn* and return the code object.')), Assign(targets=[Name(id='stat', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='read_bytes', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='strfn', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='filename', value=Name(id='strfn', ctx=Load()))])), Expr(value=Call(func=Name(id='rewrite_asserts', ctx=Load()), args=[Name(id='tree', ctx=Load()), Name(id='source', ctx=Load()), Name(id='strfn', ctx=Load()), Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='co', ctx=Store())], value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='tree', ctx=Load()), Name(id='strfn', ctx=Load()), Constant(value='exec')], keywords=[keyword(arg='dont_inherit', value=Constant(value=True))])), Return(value=Tuple(elts=[Name(id='stat', ctx=Load()), Name(id='co', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='stat_result', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_read_pyc', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='Path', ctx=Load())), arg(arg='pyc', annotation=Name(id='Path', ctx=Load())), arg(arg='trace', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))]), body=[Expr(value=Constant(value='Possibly read a pytest pyc containing rewritten code.\n\n    Return rewritten code if successful or None if not.\n    ')), Try(body=[Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pyc', ctx=Load()), Constant(value='rb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Name(id='fp', ctx=Load()))], body=[Try(body=[Assign(targets=[Name(id='stat_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mtime', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='stat_result', ctx=Load()), attr='st_mtime', ctx=Load())], keywords=[])), Assign(targets=[Name(id='size', ctx=Store())], value=Attribute(value=Name(id='stat_result', ctx=Load()), attr='st_size', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[Constant(value=16)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='_read_pyc('), FormattedValue(value=Name(id='source', ctx=Load()), conversion=-1), Constant(value='): OSError '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=16)]), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): invalid pyc (too short)'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(upper=Constant(value=4)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='MAGIC_NUMBER', ctx=Load())]), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): invalid pyc (bad magic number)'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=8)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=b'\x00\x00\x00\x00')]), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): invalid pyc (unsupported flags)'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='mtime_data', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Constant(value=8), upper=Constant(value=12)), ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='int', ctx=Load()), attr='from_bytes', ctx=Load()), args=[Name(id='mtime_data', ctx=Load()), Constant(value='little')], keywords=[]), ops=[NotEq()], comparators=[BinOp(left=Name(id='mtime', ctx=Load()), op=BitAnd(), right=Constant(value=4294967295))]), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): out of date'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='size_data', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Constant(value=12), upper=Constant(value=16)), ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='int', ctx=Load()), attr='from_bytes', ctx=Load()), args=[Name(id='size_data', ctx=Load()), Constant(value='little')], keywords=[]), ops=[NotEq()], comparators=[BinOp(left=Name(id='size', ctx=Load()), op=BitAnd(), right=Constant(value=4294967295))]), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): invalid pyc (incorrect size)'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='co', ctx=Store())], value=Call(func=Attribute(value=Name(id='marshal', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='fp', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='_read_pyc('), FormattedValue(value=Name(id='source', ctx=Load()), conversion=-1), Constant(value='): marshal.load error '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='co', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Name(id='trace', ctx=Load()), args=[BinOp(left=Constant(value='_read_pyc(%s): not a code object'), op=Mod(), right=Name(id='source', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='co', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()), ctx=Load())), FunctionDef(name='rewrite_asserts', args=arguments(posonlyargs=[], args=[arg(arg='mod', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Module', ctx=Load())), arg(arg='source', annotation=Name(id='bytes', ctx=Load())), arg(arg='module_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Rewrite the assert statements in mod.')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='AssertionRewriter', ctx=Load()), args=[Name(id='module_path', ctx=Load()), Name(id='config', ctx=Load()), Name(id='source', ctx=Load())], keywords=[]), attr='run', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_saferepr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get a safe repr of an object for assertion error messages.\n\n    The assertion formatting (util.format_explanation()) requires\n    newlines to be escaped since they are a special character for it.\n    Normally assertion.util.format_explanation() does this but for a\n    custom repr it is possible to contain one of the special escape\n    sequences, especially '\\n{' and '\\n}' are likely to be present in\n    JSON reprs.\n    ")), Assign(targets=[Name(id='maxsize', ctx=Store())], value=Call(func=Name(id='_get_maxsize_for_saferepr', ctx=Load()), args=[Attribute(value=Name(id='util', ctx=Load()), attr='_config', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[keyword(arg='maxsize', value=Name(id='maxsize', ctx=Load()))]), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\\n')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_maxsize_for_saferepr', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get `maxsize` configuration for saferepr based on the given config object.')), Assign(targets=[Name(id='verbosity', ctx=Store())], value=IfExp(test=Compare(left=Name(id='config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='verbose')], keywords=[]), orelse=Constant(value=0))), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Return(value=BinOp(left=Name(id='DEFAULT_REPR_MAX_SIZE', ctx=Load()), op=Mult(), right=Constant(value=10)))], orelse=[]), Return(value=Name(id='DEFAULT_REPR_MAX_SIZE', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='_format_assertmsg', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Format the custom assertion message given.\n\n    For strings this simply replaces newlines with '\\n~' so that\n    util.format_explanation() will preserve them instead of escaping\n    newlines.  For other objects saferepr() is used first.\n    ")), Assign(targets=[Name(id='replaces', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='\n'), Constant(value='\n~')], ctx=Load()), Tuple(elts=[Constant(value='%'), Constant(value='%%')], ctx=Load())], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='replaces', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='\\n'), Constant(value='\n~')], ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='r1', ctx=Store()), Name(id='r2', ctx=Store())], ctx=Store()), iter=Name(id='replaces', ctx=Load()), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='r1', ctx=Load()), Name(id='r2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_should_repr_global_name', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__name__')], keywords=[])))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_format_boolop', args=arguments(posonlyargs=[], args=[arg(arg='explanations', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='is_or', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='('), op=Add(), right=Call(func=Attribute(value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='is_or', ctx=Load()), Constant(value=' or ')]), Constant(value=' and ')]), attr='join', ctx=Load()), args=[Name(id='explanations', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=')'))), Return(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='%%')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_call_reprcompare', args=arguments(posonlyargs=[], args=[arg(arg='ops', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='results', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='expls', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='each_obj', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='res', ctx=Store()), Name(id='expl', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ops', ctx=Load())], keywords=[])], keywords=[]), Name(id='results', ctx=Load()), Name(id='expls', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='done', ctx=Store())], value=UnaryOp(op=Not(), operand=Name(id='res', ctx=Load())))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True))])], orelse=[], finalbody=[]), If(test=Name(id='done', ctx=Load()), body=[Break()], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='util', ctx=Load()), attr='_reprcompare', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='custom', ctx=Store())], value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='_reprcompare', ctx=Load()), args=[Subscript(value=Name(id='ops', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='each_obj', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='each_obj', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='custom', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='custom', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='expl', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_call_assertion_pass', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='orig', annotation=Name(id='str', ctx=Load())), arg(arg='expl', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='orig', ctx=Load()), Name(id='expl', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_check_if_assertion_pass_impl', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if any plugins implement the pytest_assertion_pass hook\n    in order not to generate explanation unnecessarily (might be expensive).')), Return(value=IfExp(test=Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Load()), body=Constant(value=True), orelse=Constant(value=False)))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='UNARY_MAP', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='ast', ctx=Load()), attr='Not', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Invert', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='USub', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='UAdd', ctx=Load())], values=[Constant(value='not %s'), Constant(value='~%s'), Constant(value='-%s'), Constant(value='+%s')])), Assign(targets=[Name(id='BINOP_MAP', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='ast', ctx=Load()), attr='BitOr', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='BitXor', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='BitAnd', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='LShift', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='RShift', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Add', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Sub', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Mult', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Div', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='FloorDiv', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Mod', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Eq', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='NotEq', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Lt', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='LtE', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Gt', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='GtE', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Pow', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Is', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='IsNot', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='In', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='NotIn', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='MatMult', ctx=Load())], values=[Constant(value='|'), Constant(value='^'), Constant(value='&'), Constant(value='<<'), Constant(value='>>'), Constant(value='+'), Constant(value='-'), Constant(value='*'), Constant(value='/'), Constant(value='//'), Constant(value='%%'), Constant(value='=='), Constant(value='!='), Constant(value='<'), Constant(value='<='), Constant(value='>'), Constant(value='>='), Constant(value='**'), Constant(value='is'), Constant(value='is not'), Constant(value='in'), Constant(value='not in'), Constant(value='@')])), FunctionDef(name='traverse_node', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Recursively yield node and all its children in depth-first order.')), Expr(value=Yield(value=Name(id='node', ctx=Load()))), For(target=Name(id='child', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='iter_child_nodes', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='traverse_node', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()), ctx=Load())), FunctionDef(name='_get_assertion_exprs', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a mapping from {lineno: "assertion test expression"}.')), AnnAssign(target=Name(id='ret', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='depth', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='assert_lineno', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='seen_lines', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='_write_and_reset', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Nonlocal(names=['depth', 'lines', 'assert_lineno', 'seen_lines']), Assert(test=Compare(left=Name(id='assert_lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='assert_lineno', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='\\')], keywords=[])), Assign(targets=[Name(id='depth', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='assert_lineno', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='seen_lines', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokenize', ctx=Load()), attr='tokenize', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]), attr='readline', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='tp', ctx=Store()), Name(id='source', ctx=Store()), Tuple(elts=[Name(id='lineno', ctx=Store()), Name(id='offset', ctx=Store())], ctx=Store()), Name(id='_', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='tp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tokenize', ctx=Load()), attr='NAME', ctx=Load())]), Compare(left=Name(id='source', ctx=Load()), ops=[Eq()], comparators=[Constant(value='assert')])]), body=[Assign(targets=[Name(id='assert_lineno', ctx=Store())], value=Name(id='lineno', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='assert_lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='tp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tokenize', ctx=Load()), attr='OP', ctx=Load())]), Compare(left=Name(id='source', ctx=Load()), ops=[In()], comparators=[Constant(value='([{')])]), body=[AugAssign(target=Name(id='depth', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='tp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tokenize', ctx=Load()), attr='OP', ctx=Load())]), Compare(left=Name(id='source', ctx=Load()), ops=[In()], comparators=[Constant(value=')]}')])]), body=[AugAssign(target=Name(id='depth', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Name(id='lines', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Name(id='offset', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen_lines', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='depth', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='tp', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='tokenize', ctx=Load()), attr='OP', ctx=Load())]), Compare(left=Name(id='source', ctx=Load()), ops=[Eq()], comparators=[Constant(value=',')])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='lineno', ctx=Load()), ops=[In()], comparators=[Name(id='seen_lines', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Name(id='offset_in_trimmed', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='offset', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Slice(upper=Name(id='offset_in_trimmed', ctx=Load())), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[In()], comparators=[Name(id='seen_lines', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Slice(upper=Name(id='offset', ctx=Load())), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Name(id='offset', ctx=Load())), ctx=Load())], keywords=[]))])]), Expr(value=Call(func=Name(id='_write_and_reset', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='tp', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='tokenize', ctx=Load()), attr='NEWLINE', ctx=Load()), Attribute(value=Name(id='tokenize', ctx=Load()), attr='ENDMARKER', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='_write_and_reset', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='lines', ctx=Load()), Compare(left=Name(id='lineno', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen_lines', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen_lines', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[]))], orelse=[])])])])], orelse=[])])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))])], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='AssertionRewriter', bases=[Attribute(value=Name(id='ast', ctx=Load()), attr='NodeVisitor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Assertion rewriting implementation.\n\n    The main entrypoint is to call .run() with an ast.Module instance,\n    this will then find all the assert statements and rewrite them to\n    provide intermediate values and a detailed assertion error.  See\n    http://pybites.blogspot.be/2011/07/behind-scenes-of-pytests-new-assertion.html\n    for an overview of how this works.\n\n    The entry point here is .run() which will iterate over all the\n    statements in an ast.Module and for each ast.Assert statement it\n    finds call .visit() with it.  Then .visit_Assert() takes over and\n    is responsible for creating new ast statements to replace the\n    original assert statement: it rewrites the test of an assertion\n    to provide intermediate values and replace it with an if statement\n    which raises an assertion error with a detailed explanation in\n    case the expression is false and calls pytest_assertion_pass hook\n    if expression is true.\n\n    For this .visit_Assert() uses the visitor pattern to visit all the\n    AST nodes of the ast.Assert.test field, each visit call returning\n    an AST node and the corresponding explanation string.  During this\n    state is kept in several instance attributes:\n\n    :statements: All the AST statements which will replace the assert\n       statement.\n\n    :variables: This is populated by .variable() with each variable\n       used by the statements so that they can all be set to None at\n       the end of the statements.\n\n    :variable_counter: Counter to create new unique variables needed\n       by statements.  Variables are created using .variable() and\n       have the form of "@py_assert0".\n\n    :expl_stmts: The AST statements which will be executed to get\n       data from the assertion.  This is the code which will construct\n       the detailed assertion message that is used in the AssertionError\n       or for the pytest_assertion_pass hook.\n\n    :explanation_specifiers: A dict filled by .explanation_param()\n       with %-formatting placeholders and their corresponding\n       expressions to use in the building of an assertion message.\n       This is used by .pop_format_context() to build a message.\n\n    :stack: A stack of the explanation_specifiers dicts maintained by\n       .push_format_context() and .pop_format_context() which allows\n       to build another %-formatted string while already building one.\n\n    :variables_overwrite: A dict filled with references to variables\n       that change value within an assert. This happens when a variable is\n       reassigned with the walrus operator\n\n    This state, except the variables_overwrite,  is reset on every new assert\n    statement visited and used by the other visitors.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load())), arg(arg='source', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='module_path', ctx=Store())], value=Name(id='module_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), If(test=Compare(left=Name(id='config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_assertion_pass_hook', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='enable_assertion_pass_hook')], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_assertion_pass_hook', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Store())], value=Name(id='source', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Module', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find all assert statements in *mod* and rewrite them.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='mod', ctx=Load()), attr='body', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='doc', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Constant(value='docstring'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='expect_docstring', ctx=Store())], value=Compare(left=Name(id='doc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='doc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_rewrite_disabled', ctx=Load()), args=[Name(id='doc', ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='item', ctx=Store())], value=Constant(value=None)), For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='mod', ctx=Load()), attr='body', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='expect_docstring', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Expr', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='value', ctx=Load()), Name(id='astStr', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Assign(targets=[Name(id='doc', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='value', ctx=Load()), attr='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='doc', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='value', ctx=Load()), attr='s', ctx=Load()))]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_rewrite_disabled', ctx=Load()), args=[Name(id='doc', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='expect_docstring', ctx=Store())], value=Constant(value=False))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='ImportFrom', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='item', ctx=Load()), attr='level', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='item', ctx=Load()), attr='module', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__future__')])]), body=[Pass()], orelse=[Break()])]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='FunctionDef', ctx=Load())], keywords=[]), Attribute(value=Name(id='item', ctx=Load()), attr='decorator_list', ctx=Load())]), body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='decorator_list', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='lineno', ctx=Load()))], orelse=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='lineno', ctx=Load()))]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=[Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='builtins'), Constant(value='@py_builtins')], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load())), keyword(arg='col_offset', value=Constant(value=0))]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='_pytest.assertion.rewrite'), Constant(value='@pytest_ar')], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load())), keyword(arg='col_offset', value=Constant(value=0))])], ctx=Load()))], orelse=[Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='builtins'), Constant(value='@py_builtins')], keywords=[]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='_pytest.assertion.rewrite'), Constant(value='@pytest_ar')], keywords=[])], ctx=Load()))]), Assign(targets=[Name(id='imports', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Import', ctx=Load()), args=[List(elts=[Name(id='alias', ctx=Load())], ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load())), keyword(arg='col_offset', value=Constant(value=0))]), generators=[comprehension(target=Name(id='alias', ctx=Store()), iter=Name(id='aliases', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Attribute(value=Name(id='mod', ctx=Load()), attr='body', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Store())], value=Name(id='imports', ctx=Load())), AnnAssign(target=Name(id='nodes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()), ctx=Load()), value=List(elts=[Name(id='mod', ctx=Load())], ctx=Load()), simple=1), While(test=Name(id='nodes', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='field', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='iter_fields', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='new', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='child', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Assert', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='new', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='child', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='name', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_rewrite_disabled', args=arguments(posonlyargs=[], args=[arg(arg='docstring', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Constant(value='PYTEST_DONT_REWRITE'), ops=[In()], comparators=[Name(id='docstring', ctx=Load())]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='variable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a new variable.')), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='@py_assert'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='variable_counter', ctx=Load())], keywords=[])], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='assign', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Give *expr* a name.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='variable', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()), Name(id='expr', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())), FunctionDef(name='display', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Call saferepr on the expression.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_saferepr'), Name(id='expr', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), FunctionDef(name='helper', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Call a helper in this module.')), Assign(targets=[Name(id='py_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='@pytest_ar'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='attr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load()), args=[Name(id='py_name', ctx=Load()), Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Name(id='attr', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), List(elts=[], ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), FunctionDef(name='builtin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the builtin called *name*.')), Assign(targets=[Name(id='builtin_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='@py_builtins'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load()), args=[Name(id='builtin_name', ctx=Load()), Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())), FunctionDef(name='explanation_param', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a new named %-formatting placeholder for expr.\n\n        This creates a %-formatting placeholder for expr in the\n        current formatting context, e.g. ``%(py0)s``.  The placeholder\n        and expr are placed in the current format context so that it\n        can be used on the next call to .pop_format_context().\n        ')), Assign(targets=[Name(id='specifier', ctx=Store())], value=BinOp(left=Constant(value='py'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='variable_counter', ctx=Load())], keywords=[])], keywords=[]))), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_specifiers', ctx=Load()), slice=Name(id='specifier', ctx=Load()), ctx=Store())], value=Name(id='expr', ctx=Load())), Return(value=BinOp(left=BinOp(left=Constant(value='%('), op=Add(), right=Name(id='specifier', ctx=Load())), op=Add(), right=Constant(value=')s')))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='push_format_context', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a new formatting context.\n\n        The format context is used for when an explanation wants to\n        have a variable value formatted in the assertion message.  In\n        this case the value required can be added using\n        .explanation_param().  Finally .pop_format_context() is used\n        to format a string of %-formatted values as added by\n        .explanation_param().\n        ')), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_specifiers', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='explanation_specifiers', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop_format_context', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expl_expr', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format the %-formatted string with current format context.\n\n        The expl_expr should be an str ast.expr instance constructed from\n        the %-placeholders created by .explanation_param().  This will\n        add the required code to format said string to .expl_stmts and\n        return the ast.Name instance of the formatted string.\n        ')), Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='explanation_specifiers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='keys', ctx=Store())], value=ListComp(elt=Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='current', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='format_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Dict', ctx=Load()), args=[Name(id='keys', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='current', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='form', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()), args=[Name(id='expl_expr', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Mod', ctx=Load()), args=[], keywords=[]), Name(id='format_dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='@py_format'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='variable_counter', ctx=Load())], keywords=[])], keywords=[]))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enable_assertion_pass_hook', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='format_variables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()), Name(id='form', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())), FunctionDef(name='generic_visit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='AST', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Handle expressions we don't have custom code for.")), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Assert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='assert_', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Assert', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the AST statements to replace the ast.Assert instance.\n\n        This rewrites the test of an assertion to provide\n        intermediate values and replace it with an if statement which\n        raises an assertion error with a detailed explanation in case\n        the expression is false.\n        ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='assert_', ctx=Load()), attr='test', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Tuple', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='assert_', ctx=Load()), attr='test', ctx=Load()), attr='elts', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)])]), body=[ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestAssertRewriteWarning')], level=0), Import(names=[alias(name='warnings')]), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='module_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn_explicit', ctx=Load()), args=[Call(func=Name(id='PytestAssertRewriteWarning', ctx=Load()), args=[Constant(value='assertion is always true, perhaps remove parentheses?')], keywords=[])], keywords=[keyword(arg='category', value=Constant(value=None)), keyword(arg='filename', value=Attribute(value=Name(id='self', ctx=Load()), attr='module_path', ctx=Load())), keyword(arg='lineno', value=Attribute(value=Name(id='assert_', ctx=Load()), attr='lineno', ctx=Load()))]))], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='variable_counter', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enable_assertion_pass_hook', ctx=Load()), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='format_variables', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_format_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='top_condition', ctx=Store()), Name(id='explanation', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='assert_', ctx=Load()), attr='test', ctx=Load())], keywords=[])), Assign(targets=[Name(id='negation', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='UnaryOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Not', ctx=Load()), args=[], keywords=[]), Name(id='top_condition', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enable_assertion_pass_hook', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_format_context', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='explanation', ctx=Load())], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='assert_', ctx=Load()), attr='msg', ctx=Load()), body=[Assign(targets=[Name(id='assertmsg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_assertmsg'), Attribute(value=Name(id='assert_', ctx=Load()), attr='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gluestr', ctx=Store())], value=Constant(value='\n>assert '))], orelse=[Assign(targets=[Name(id='assertmsg', ctx=Store())], value=Call(func=Name(id='astStr', ctx=Load()), args=[Constant(value='')], keywords=[])), Assign(targets=[Name(id='gluestr', ctx=Store())], value=Constant(value='assert '))]), Assign(targets=[Name(id='err_explanation', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='gluestr', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Add', ctx=Load()), args=[], keywords=[]), Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='err_msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()), args=[Name(id='assertmsg', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Add', ctx=Load()), args=[], keywords=[]), Name(id='err_explanation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='err_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='AssertionError'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_explanation'), Name(id='err_msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Name(id='err_name', ctx=Load()), List(elts=[Name(id='fmt', ctx=Load())], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='raise_', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Raise', ctx=Load()), args=[Name(id='exc', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='statements_fail', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='statements_fail', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='statements_fail', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='raise_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fmt_pass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_explanation'), Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='orig', ctx=Store())], value=Subscript(value=Call(func=Name(id='_get_assertion_exprs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load())], keywords=[]), slice=Attribute(value=Name(id='assert_', ctx=Load()), attr='lineno', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='hook_call_pass', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Expr', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_call_assertion_pass'), Call(func=Name(id='astNum', ctx=Load()), args=[Attribute(value=Name(id='assert_', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]), Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='orig', ctx=Load())], keywords=[]), Name(id='fmt_pass', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='hook_impl_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='If', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_check_if_assertion_pass_impl')], keywords=[]), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load()), op=Add(), right=List(elts=[Name(id='hook_call_pass', ctx=Load())], ctx=Load())), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='statements_pass', ctx=Store())], value=List(elts=[Name(id='hook_impl_test', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='main_test', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='If', ctx=Load()), args=[Name(id='negation', ctx=Load()), Name(id='statements_fail', ctx=Load()), Name(id='statements_pass', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='main_test', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='format_variables', ctx=Load()), body=[Assign(targets=[Name(id='variables', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='format_variables', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='clear_format', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[Name(id='variables', ctx=Load()), Call(func=Name(id='astNameConstant', ctx=Load()), args=[Constant(value=None)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='clear_format', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='body', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='If', ctx=Load()), args=[Name(id='negation', ctx=Load()), Name(id='body', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='assert_', ctx=Load()), attr='msg', ctx=Load()), body=[Assign(targets=[Name(id='assertmsg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_assertmsg'), Attribute(value=Name(id='assert_', ctx=Load()), attr='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='explanation', ctx=Store())], value=BinOp(left=Constant(value='\n>assert '), op=Add(), right=Name(id='explanation', ctx=Load())))], orelse=[Assign(targets=[Name(id='assertmsg', ctx=Store())], value=Call(func=Name(id='astStr', ctx=Load()), args=[Constant(value='')], keywords=[])), Assign(targets=[Name(id='explanation', ctx=Store())], value=BinOp(left=Constant(value='assert '), op=Add(), right=Name(id='explanation', ctx=Load())))]), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()), args=[Name(id='assertmsg', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Add', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='explanation', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_format_context', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_explanation'), Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='err_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='AssertionError'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Name(id='err_name', ctx=Load()), List(elts=[Name(id='fmt', ctx=Load())], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='raise_', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Raise', ctx=Load()), args=[Name(id='exc', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='raise_', ctx=Load())], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load()), body=[Assign(targets=[Name(id='variables', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='variables', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='clear', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[Name(id='variables', ctx=Load()), Call(func=Name(id='astNameConstant', ctx=Load()), args=[Constant(value=None)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='clear', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='stmt', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), body=[For(target=Name(id='node', ctx=Store()), iter=Call(func=Name(id='traverse_node', ctx=Load()), args=[Name(id='stmt', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='copy_location', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='assert_', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load())), FunctionDef(name='visit_NamedExpr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='namedExpr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='locs', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='builtin', ctx=Load()), args=[Constant(value='locals')], keywords=[]), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_id', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='name', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Load())), Assign(targets=[Name(id='inlocs', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='target_id', ctx=Load())], keywords=[]), List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='In', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[Name(id='locs', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='dorepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_should_repr_global_name'), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Or', ctx=Load()), args=[], keywords=[]), List(elts=[Name(id='inlocs', ctx=Load()), Name(id='dorepr', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='IfExp', ctx=Load()), args=[Name(id='test', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='target_id', ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='namedExpr', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='locs', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='builtin', ctx=Load()), args=[Constant(value='locals')], keywords=[]), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='inlocs', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='id', ctx=Load())], keywords=[]), List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='In', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[Name(id='locs', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='dorepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_should_repr_global_name'), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Or', ctx=Load()), args=[], keywords=[]), List(elts=[Name(id='inlocs', ctx=Load()), Name(id='dorepr', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='IfExp', ctx=Load()), args=[Name(id='test', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Call(func=Name(id='astStr', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='id', ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_BoolOp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='boolop', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='res_var', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='variable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expl_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='List', ctx=Load()), args=[List(elts=[], ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load()), args=[Name(id='expl_list', ctx=Load()), Constant(value='append'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='is_or', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='boolop', ctx=Load()), attr='op', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Or', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='body', ctx=Store()), Name(id='save', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load())), Assign(targets=[Name(id='fail_save', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load())), Assign(targets=[Name(id='levels', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='boolop', ctx=Load()), attr='values', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_format_context', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='boolop', ctx=Load()), attr='values', ctx=Load())], keywords=[]), body=[If(test=Name(id='i', ctx=Load()), body=[AnnAssign(target=Name(id='fail_inner', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='If', ctx=Load()), args=[Name(id='cond', ctx=Load()), Name(id='fail_inner', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Store())], value=Name(id='fail_inner', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='v', ctx=Load()), attr='left', ctx=Load()), Name(id='namedExpr', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='v', ctx=Load()), attr='left', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Load()), ops=[In()], comparators=[ListComp(elt=Attribute(value=Name(id='ast_expr', ctx=Load()), attr='id', ctx=Load()), generators=[comprehension(target=Name(id='ast_expr', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='boolop', ctx=Load()), attr='values', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()), ifs=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ast_expr', ctx=Load()), Constant(value='id')], keywords=[])], is_async=0)])])]), body=[Assign(targets=[Name(id='pytest_temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='variable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Attribute(value=Attribute(value=Name(id='v', ctx=Load()), attr='left', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='v', ctx=Load()), attr='left', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='v', ctx=Load()), attr='left', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Store())], value=Name(id='pytest_temp', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_format_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='res', ctx=Store()), Name(id='expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='res_var', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()), Name(id='res', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='expl_format', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_format_context', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='expl', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Name(id='app', ctx=Load()), List(elts=[Name(id='expl_format', ctx=Load())], ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Expr', ctx=Load()), args=[Name(id='call', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='levels', ctx=Load())]), body=[AnnAssign(target=Name(id='cond', ctx=Store()), annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()), value=Name(id='res', ctx=Load()), simple=1), If(test=Name(id='is_or', ctx=Load()), body=[Assign(targets=[Name(id='cond', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='UnaryOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Not', ctx=Load()), args=[], keywords=[]), Name(id='cond', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='inner', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ast', ctx=Load()), attr='stmt', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='If', ctx=Load()), args=[Name(id='cond', ctx=Load()), Name(id='inner', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Store()), Name(id='body', ctx=Store())], value=Name(id='inner', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Store())], value=Name(id='save', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expl_stmts', ctx=Store())], value=Name(id='fail_save', ctx=Load())), Assign(targets=[Name(id='expl_template', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_format_boolop'), Name(id='expl_list', ctx=Load()), Call(func=Name(id='astNum', ctx=Load()), args=[Name(id='is_or', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='expl', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_format_context', ctx=Load()), args=[Name(id='expl_template', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='res_var', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Name(id='expl', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_UnaryOp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='unary', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='UnaryOp', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Subscript(value=Name(id='UNARY_MAP', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='unary', ctx=Load()), attr='op', ctx=Load()), attr='__class__', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='operand_res', ctx=Store()), Name(id='operand_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='unary', ctx=Load()), attr='operand', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='UnaryOp', ctx=Load()), args=[Attribute(value=Name(id='unary', ctx=Load()), attr='op', ctx=Load()), Name(id='operand_res', ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), BinOp(left=Name(id='pattern', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='operand_expl', ctx=Load())], ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_BinOp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='binop', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='symbol', ctx=Store())], value=Subscript(value=Name(id='BINOP_MAP', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='binop', ctx=Load()), attr='op', ctx=Load()), attr='__class__', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='left_expr', ctx=Store()), Name(id='left_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='binop', ctx=Load()), attr='left', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='right_expr', ctx=Store()), Name(id='right_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='binop', ctx=Load()), attr='right', ctx=Load())], keywords=[])), Assign(targets=[Name(id='explanation', ctx=Store())], value=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='left_expl', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='symbol', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='right_expl', ctx=Load()), conversion=-1), Constant(value=')')])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BinOp', ctx=Load()), args=[Name(id='left_expr', ctx=Load()), Attribute(value=Name(id='binop', ctx=Load()), attr='op', ctx=Load()), Name(id='right_expr', ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), Name(id='explanation', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='call', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='new_func', ctx=Store()), Name(id='func_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='call', ctx=Load()), attr='func', ctx=Load())], keywords=[])), Assign(targets=[Name(id='arg_expls', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='new_args', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='new_kwargs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='call', ctx=Load()), attr='args', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='arg', ctx=Load()), attr='id', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load())])]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Name(id='arg', ctx=Load()), attr='id', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='res', ctx=Store()), Name(id='expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arg_expls', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='expl', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=Attribute(value=Name(id='call', ctx=Load()), attr='keywords', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='keyword', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='keyword', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='keyword', ctx=Load()), attr='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='keyword', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='res', ctx=Store()), Name(id='expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='keyword', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_kwargs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='keyword', ctx=Load()), args=[Attribute(value=Name(id='keyword', ctx=Load()), attr='arg', ctx=Load()), Name(id='res', ctx=Load())], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='keyword', ctx=Load()), attr='arg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arg_expls', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='keyword', ctx=Load()), attr='arg', ctx=Load()), op=Add(), right=Constant(value='=')), op=Add(), right=Name(id='expl', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='arg_expls', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='**'), op=Add(), right=Name(id='expl', ctx=Load()))], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='expl', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}({})'), attr='format', ctx=Load()), args=[Name(id='func_expl', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='arg_expls', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='new_call', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load()), args=[Name(id='new_func', ctx=Load()), Name(id='new_args', ctx=Load()), Name(id='new_kwargs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Name(id='new_call', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res_expl', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='outer_expl', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='res_expl', ctx=Load()), conversion=-1), Constant(value='\n{'), FormattedValue(value=Name(id='res_expl', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='expl', ctx=Load()), conversion=-1), Constant(value='\n}')])), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), Name(id='outer_expl', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Starred', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='starred', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Starred', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='res', ctx=Store()), Name(id='expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='starred', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_starred', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Starred', ctx=Load()), args=[Name(id='res', ctx=Load()), Attribute(value=Name(id='starred', ctx=Load()), attr='ctx', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='new_starred', ctx=Load()), BinOp(left=Constant(value='*'), op=Add(), right=Name(id='expl', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Starred', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Attribute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attr', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='attr', ctx=Load()), attr='ctx', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='generic_visit', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='value', ctx=Store()), Name(id='value_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='attr', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assign', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='attr', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='res_expl', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='pat', ctx=Store())], value=Constant(value='%s\n{%s = %s.%s\n}')), Assign(targets=[Name(id='expl', ctx=Store())], value=BinOp(left=Name(id='pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='res_expl', ctx=Load()), Name(id='res_expl', ctx=Load()), Name(id='value_expl', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='attr', ctx=Load())], ctx=Load()))), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), Name(id='expl', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visit_Compare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='comp', annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_format_context', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), attr='id', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), attr='id', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), Name(id='namedExpr', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Attribute(value=Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='left_res', ctx=Store()), Name(id='left_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='left', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='left_expl', ctx=Store())], value=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='left_expl', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[]), Assign(targets=[Name(id='res_variables', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='variable', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='ops', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='load_names', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='v', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='res_variables', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='store_names', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='v', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Store', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='res_variables', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='it', ctx=Store())], value=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='ops', ctx=Load())], keywords=[])], keywords=[]), Attribute(value=Name(id='comp', ctx=Load()), attr='ops', ctx=Load()), Attribute(value=Name(id='comp', ctx=Load()), attr='comparators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expls', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='syms', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='results', ctx=Store())], value=List(elts=[Name(id='left_res', ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='op', ctx=Store()), Name(id='next_operand', ctx=Store())], ctx=Store()), iter=Name(id='it', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='next_operand', ctx=Load()), Name(id='namedExpr', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left_res', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='next_operand', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='left_res', ctx=Load()), attr='id', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='next_operand', ctx=Load()), attr='target', ctx=Load()), attr='id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='variable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='variables_overwrite', ctx=Load()), slice=Attribute(value=Name(id='left_res', ctx=Load()), attr='id', ctx=Load()), ctx=Store())], value=Name(id='next_operand', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='next_res', ctx=Store()), Name(id='next_expl', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[Name(id='next_operand', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='next_operand', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='next_expl', ctx=Store())], value=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='next_expl', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='next_res', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sym', ctx=Store())], value=Subscript(value=Name(id='BINOP_MAP', ctx=Load()), slice=Attribute(value=Name(id='op', ctx=Load()), attr='__class__', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='syms', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='sym', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='expl', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='left_expl', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='sym', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='next_expl', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='expls', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='astStr', ctx=Load()), args=[Name(id='expl', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='res_expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Compare', ctx=Load()), args=[Name(id='left_res', ctx=Load()), List(elts=[Name(id='op', ctx=Load())], ctx=Load()), List(elts=[Name(id='next_res', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statements', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Assign', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='store_names', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], ctx=Load()), Name(id='res_expr', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='left_res', ctx=Store()), Name(id='left_expl', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='next_res', ctx=Load()), Name(id='next_expl', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='expl_call', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='helper', ctx=Load()), args=[Constant(value='_call_reprcompare'), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Tuple', ctx=Load()), args=[Name(id='syms', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Tuple', ctx=Load()), args=[Name(id='load_names', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Tuple', ctx=Load()), args=[Name(id='expls', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Tuple', ctx=Load()), args=[Name(id='results', ctx=Load()), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='comp', ctx=Load()), attr='ops', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[AnnAssign(target=Name(id='res', ctx=Store()), annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()), value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='And', ctx=Load()), args=[], keywords=[]), Name(id='load_names', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='res', ctx=Store())], value=Subscript(value=Name(id='load_names', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), Return(value=Tuple(elts=[Name(id='res', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='explanation_param', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_format_context', ctx=Load()), args=[Name(id='expl_call', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='try_makedirs', args=arguments(posonlyargs=[], args=[arg(arg='cache_dir', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Attempt to create the given directory and sub-directories exist.\n\n    Returns True if successful or if it already exists.\n    ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='NotADirectoryError', ctx=Load()), Name(id='FileExistsError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EROFS', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Raise()])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='file_path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the cache directory to write .pyc files for the given .py file path.')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), Attribute(value=Name(id='sys', ctx=Load()), attr='pycache_prefix', ctx=Load())]), body=[Return(value=BinOp(left=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='pycache_prefix', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='Path', ctx=Load()), args=[Starred(value=Subscript(value=Attribute(value=Name(id='file_path', ctx=Load()), attr='parts', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ctx=Load())], keywords=[])))], orelse=[Return(value=BinOp(left=Attribute(value=Name(id='file_path', ctx=Load()), attr='parent', ctx=Load()), op=Div(), right=Constant(value='__pycache__')))])], decorator_list=[], returns=Name(id='Path', ctx=Load()))], type_ignores=[])