Module(body=[Expr(value=Constant(value='Support for presenting detailed information in failing assertions.')), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='_pytest.assertion', names=[alias(name='rewrite')], level=0), ImportFrom(module='_pytest.assertion', names=[alias(name='truncate')], level=0), ImportFrom(module='_pytest.assertion', names=[alias(name='util')], level=0), ImportFrom(module='_pytest.assertion.rewrite', names=[alias(name='assertstate_key')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0)], orelse=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='debugconfig')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--assert')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='assertmode')), keyword(arg='choices', value=Tuple(elts=[Constant(value='rewrite'), Constant(value='plain')], ctx=Load())), keyword(arg='default', value=Constant(value='rewrite')), keyword(arg='metavar', value=Constant(value='MODE')), keyword(arg='help', value=Constant(value="Control assertion debugging tools.\n'plain' performs no assertion debugging.\n'rewrite' (the default) rewrites assert statements in test modules on import to provide assert expression information."))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='enable_assertion_pass_hook')], keywords=[keyword(arg='type', value=Constant(value='bool')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Enables the pytest_assertion_pass hook. Make sure to delete any previously generated pyc cache files.'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='register_assert_rewrite', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='names', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Register one or more module names to be rewritten on import.\n\n    This function will make sure that this module or all modules inside\n    the package will get their assert statements rewritten.\n    Thus you should make sure to call this before the module is\n    actually imported, usually in your __init__.py if you are a plugin\n    using a package.\n\n    :param names: The module names to register.\n    ')), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='expected module names as *args, got {0} instead')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='hook', ctx=Store()), iter=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='hook', ctx=Load()), Attribute(value=Name(id='rewrite', ctx=Load()), attr='AssertionRewritingHook', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='importhook', ctx=Store())], value=Name(id='hook', ctx=Load())), Break()], orelse=[])], orelse=[Assign(targets=[Name(id='importhook', ctx=Store())], value=Call(func=Name(id='DummyRewriteHook', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='importhook', ctx=Load()), attr='mark_rewrite', ctx=Load()), args=[Starred(value=Name(id='names', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='DummyRewriteHook', bases=[], keywords=[], body=[Expr(value=Constant(value='A no-op import hook for when rewriting is disabled.')), FunctionDef(name='mark_rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='names', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='AssertionState', bases=[], keywords=[], body=[Expr(value=Constant(value='State for the assertion plugin.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mode', ctx=Store())], value=Name(id='mode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='assertion')], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='rewrite', ctx=Load()), attr='AssertionRewritingHook', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='install_importhook', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to install the rewrite hook, raise SystemError if it fails.')), Assign(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='AssertionState', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='rewrite')], keywords=[])), Assign(targets=[Attribute(value=Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Load()), attr='hook', ctx=Store()), Name(id='hook', ctx=Store())], value=Call(func=Attribute(value=Name(id='rewrite', ctx=Load()), attr='AssertionRewritingHook', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='hook', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='installed rewrite import hook')], keywords=[])), FunctionDef(name='undo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='assertstate_key', ctx=Load()), ctx=Load()), attr='hook', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='hook', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Name(id='undo', ctx=Load())], keywords=[])), Return(value=Name(id='hook', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='rewrite', ctx=Load()), attr='AssertionRewritingHook', ctx=Load())), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='assertstate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='assertstate_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='assertstate', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='assertstate', ctx=Load()), attr='hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='assertstate', ctx=Load()), attr='hook', ctx=Load()), attr='set_session', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_protocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Setup the pytest_assertrepr_compare and pytest_assertion_pass hooks.\n\n    The rewrite module will use util._reprcompare if it exists to use custom\n    reporting via the pytest_assertrepr_compare hook.  This sets up this custom\n    comparison for the test.\n    ')), Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load())), FunctionDef(name='callbinrepr', args=arguments(posonlyargs=[], args=[arg(arg='op'), arg(arg='left', annotation=Name(id='object', ctx=Load())), arg(arg='right', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Call the pytest_assertrepr_compare hook and prepare the result.\n\n        This uses the first result from the hook and then ensures the\n        following:\n        * Overly verbose explanations are truncated unless configured otherwise\n          (eg. if running in verbose mode).\n        * Embedded newlines are escaped to help util.format_explanation()\n          later.\n        * If the rewrite mode is used embedded %-characters are replaced\n          to protect later % formatting.\n\n        The result can be formatted by util.format_explanation() for\n        pretty printing.\n        ')), Assign(targets=[Name(id='hook_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_assertrepr_compare', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load())), keyword(arg='op', value=Name(id='op', ctx=Load())), keyword(arg='left', value=Name(id='left', ctx=Load())), keyword(arg='right', value=Name(id='right', ctx=Load()))])), For(target=Name(id='new_expl', ctx=Store()), iter=Name(id='hook_result', ctx=Load()), body=[If(test=Name(id='new_expl', ctx=Load()), body=[Assign(targets=[Name(id='new_expl', ctx=Store())], value=Call(func=Attribute(value=Name(id='truncate', ctx=Load()), attr='truncate_if_required', ctx=Load()), args=[Name(id='new_expl', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_expl', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\\n')], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='new_expl', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n~'), attr='join', ctx=Load()), args=[Name(id='new_expl', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='assertmode')], keywords=[]), ops=[Eq()], comparators=[Constant(value='rewrite')]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='%%')], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='saved_assert_hooks', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='util', ctx=Load()), attr='_reprcompare', ctx=Load()), Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='_reprcompare', ctx=Store())], value=Name(id='callbinrepr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='_config', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_assertion_pass', ctx=Load()), attr='get_hookimpls', ctx=Load()), args=[], keywords=[]), body=[FunctionDef(name='call_assertion_pass_hook', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='orig', annotation=Name(id='str', ctx=Load())), arg(arg='expl', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_assertion_pass', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='item', ctx=Load())), keyword(arg='lineno', value=Name(id='lineno', ctx=Load())), keyword(arg='orig', value=Name(id='orig', ctx=Load())), keyword(arg='expl', value=Name(id='expl', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Store())], value=Name(id='call_assertion_pass_hook', ctx=Load()))], orelse=[]), Expr(value=Yield()), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='util', ctx=Load()), attr='_reprcompare', ctx=Store()), Attribute(value=Name(id='util', ctx=Load()), attr='_assertion_pass', ctx=Store())], ctx=Store())], value=Name(id='saved_assert_hooks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='_config', ctx=Store())], value=Constant(value=None))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True)), keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='assertstate', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='assertstate_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='assertstate', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='assertstate', ctx=Load()), attr='hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='assertstate', ctx=Load()), attr='hook', ctx=Load()), attr='set_session', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_assertrepr_compare', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='left', annotation=Name(id='Any', ctx=Load())), arg(arg='right', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='assertrepr_compare', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='op', value=Name(id='op', ctx=Load())), keyword(arg='left', value=Name(id='left', ctx=Load())), keyword(arg='right', value=Name(id='right', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])