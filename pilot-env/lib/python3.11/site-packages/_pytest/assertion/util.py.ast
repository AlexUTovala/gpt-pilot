Module(body=[Expr(value=Constant(value='Utilities for assertion debugging.')), Import(names=[alias(name='collections.abc')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pprint')]), ImportFrom(module='typing', names=[alias(name='AbstractSet')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='unicodedata', names=[alias(name='normalize')], level=0), Import(names=[alias(name='_pytest._code')]), ImportFrom(module='_pytest', names=[alias(name='outcomes')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='_pformat_dispatch')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='saferepr')], level=0), ImportFrom(module='_pytest._io.saferepr', names=[alias(name='saferepr_unlimited')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), AnnAssign(target=Name(id='_reprcompare', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_assertion_pass', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_config', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Config', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='format_explanation', args=arguments(posonlyargs=[], args=[arg(arg='explanation', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format an explanation.\n\n    Normally all embedded newlines are escaped, however there are\n    three exceptions: \\n{, \\n} and \\n~.  The first two are intended\n    cover nested explanations, see function and attribute explanations\n    for examples (.visit_Call(), visit_Attribute()).  The last one is\n    for when one explanation needs to span multiple lines, e.g. when\n    displaying diffs.\n    ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='_split_explanation', ctx=Load()), args=[Name(id='explanation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_format_lines', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_split_explanation', args=arguments(posonlyargs=[], args=[arg(arg='explanation', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a list of individual lines in the explanation.\n\n    This will return a list of lines split on '\\n{', '\\n}' and '\\n~'.\n    Any other newlines will be escaped and appear in the line as the\n    literal '\\n' characters.\n    ")), Assign(targets=[Name(id='raw_lines', ctx=Store())], value=Call(func=Attribute(value=BoolOp(op=Or(), values=[Name(id='explanation', ctx=Load()), Constant(value='')]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Subscript(value=Name(id='raw_lines', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())), For(target=Name(id='values', ctx=Store()), iter=Subscript(value=Name(id='raw_lines', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='values', ctx=Load()), Compare(left=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='{'), Constant(value='}'), Constant(value='~'), Constant(value='>')], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\n'), op=Add(), right=Name(id='values', ctx=Load())))])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_format_lines', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Format the individual lines.\n\n    This will replace the '{', '}' and '~' characters of our mini formatting\n    language with the proper 'where ...', 'and ...' and ' + ...' text, taking\n    care of indentation along the way.\n\n    Return a list of formatted lines.\n    ")), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='stackcnt', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='{')], keywords=[]), body=[If(test=Subscript(value=Name(id='stackcnt', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='and   '))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='where '))]), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Subscript(value=Name(id='stackcnt', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='stackcnt', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value=' +'), op=Add(), right=BinOp(left=Constant(value='  '), op=Mult(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))), op=Add(), right=Name(id='s', ctx=Load())), op=Add(), right=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='}')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stackcnt', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), AugAssign(target=Subscript(value=Name(id='result', ctx=Load()), slice=Subscript(value=Name(id='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Store()), op=Add(), value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[Assert(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='~'), Constant(value='>')], ctx=Load())])), AugAssign(target=Subscript(value=Name(id='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='indent', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='~')], keywords=[]), body=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), orelse=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='  '), op=Mult(), right=Name(id='indent', ctx=Load())), op=Add(), right=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], keywords=[]))])])], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='issequence', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Attribute(value=Name(id='collections', ctx=Load()), attr='abc', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='istext', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isdict', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isset', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Name(id='set', ctx=Load()), Name(id='frozenset', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isnamedtuple', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='_fields'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isdatacls', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__dataclass_fields__'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isattrs', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__attrs_attrs__'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='isiterable', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='istext', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='has_default_eq', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an instance of an object contains the default eq\n\n    First, we check if the object\'s __eq__ attribute has __code__,\n    if so, we check the equally of the method code filename (__code__.co_filename)\n    to the default one generated by the dataclass and attr module\n    for dataclasses the default co_filename is <string>, for attrs class, the __eq__ should contain "attrs eq generated"\n    ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__eq__', ctx=Load()), Constant(value='__code__')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__eq__', ctx=Load()), attr='__code__', ctx=Load()), Constant(value='co_filename')], keywords=[])]), body=[Assign(targets=[Name(id='code_filename', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__eq__', ctx=Load()), attr='__code__', ctx=Load()), attr='co_filename', ctx=Load())), If(test=Call(func=Name(id='isattrs', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Constant(value='attrs generated eq'), ops=[In()], comparators=[Name(id='code_filename', ctx=Load())]))], orelse=[]), Return(value=Compare(left=Name(id='code_filename', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<string>')]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='assertrepr_compare', args=arguments(posonlyargs=[], args=[arg(arg='config'), arg(arg='op', annotation=Name(id='str', ctx=Load())), arg(arg='left', annotation=Name(id='Any', ctx=Load())), arg(arg='right', annotation=Name(id='Any', ctx=Load())), arg(arg='use_ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return specialised explanations for some operators/operands.')), Assign(targets=[Name(id='verbose', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='verbose')], keywords=[])), Assign(targets=[Name(id='use_ascii', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='right', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='normalize', ctx=Load()), args=[Constant(value='NFD'), Name(id='left', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='normalize', ctx=Load()), args=[Constant(value='NFD'), Name(id='right', ctx=Load())], keywords=[])])])), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='left_repr', ctx=Store())], value=Call(func=Name(id='saferepr_unlimited', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[keyword(arg='use_ascii', value=Name(id='use_ascii', ctx=Load()))])), Assign(targets=[Name(id='right_repr', ctx=Store())], value=Call(func=Name(id='saferepr_unlimited', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[keyword(arg='use_ascii', value=Name(id='use_ascii', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='maxsize', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=80), op=Sub(), right=Constant(value=15)), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='op', ctx=Load())], keywords=[])), op=Sub(), right=Constant(value=2)), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='left_repr', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[keyword(arg='maxsize', value=Name(id='maxsize', ctx=Load())), keyword(arg='use_ascii', value=Name(id='use_ascii', ctx=Load()))])), Assign(targets=[Name(id='right_repr', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[keyword(arg='maxsize', value=Name(id='maxsize', ctx=Load())), keyword(arg='use_ascii', value=Name(id='use_ascii', ctx=Load()))]))]), Assign(targets=[Name(id='summary', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='left_repr', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='op', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='right_repr', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='explanation', ctx=Store())], value=Constant(value=None)), Try(body=[If(test=Compare(left=Name(id='op', ctx=Load()), ops=[Eq()], comparators=[Constant(value='==')]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_compare_eq_any', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='op', ctx=Load()), ops=[Eq()], comparators=[Constant(value='not in')]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='istext', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='istext', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_notin_text', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], handlers=[ExceptHandler(type=Attribute(value=Name(id='outcomes', ctx=Load()), attr='Exit', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Constant(value='(pytest_assertion plugin: representation of details failed: {}.'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[]), attr='_getreprcrash', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=' Probably an object has a faulty __repr__.)')], ctx=Load()))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='explanation', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=BinOp(left=List(elts=[Name(id='summary', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='explanation', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_compare_eq_any', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='Any', ctx=Load())), arg(arg='right', annotation=Name(id='Any', ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='istext', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='istext', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_diff_text', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[ImportFrom(module='_pytest.python_api', names=[alias(name='ApproxBase')], level=0), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='ApproxBase', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='right', ctx=Load()), Name(id='ApproxBase', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='approx_side', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='ApproxBase', ctx=Load())], keywords=[]), body=Name(id='left', ctx=Load()), orelse=Name(id='right', ctx=Load()))), Assign(targets=[Name(id='other_side', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='ApproxBase', ctx=Load())], keywords=[]), body=Name(id='right', ctx=Load()), orelse=Name(id='left', ctx=Load()))), Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Attribute(value=Name(id='approx_side', ctx=Load()), attr='_repr_compare', ctx=Load()), args=[Name(id='other_side', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), BoolOp(op=Or(), values=[Call(func=Name(id='isdatacls', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='isattrs', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='isnamedtuple', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_compare_eq_cls', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='issequence', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='issequence', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_compare_eq_sequence', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isset', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='isset', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_compare_eq_set', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isdict', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='isdict', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=Call(func=Name(id='_compare_eq_dict', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]))], orelse=[])])])])]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isiterable', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='isiterable', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='expl', ctx=Store())], value=Call(func=Name(id='_compare_eq_iterable', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='expl', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_diff_text', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='str', ctx=Load())), arg(arg='right', annotation=Name(id='str', ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Return the explanation for the diff between text.\n\n    Unless --verbose is used this will skip leading and trailing\n    characters which are identical to keep the diff minimal.\n    ')), ImportFrom(module='difflib', names=[alias(name='ndiff')], level=0), AnnAssign(target=Name(id='explanation', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Constant(value=42)]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Sub(), value=Constant(value=10)), Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='Skipping %s identical leading characters in diff, use -v to show'), op=Mod(), right=Name(id='i', ctx=Load()))], ctx=Load())), Assign(targets=[Name(id='left', ctx=Store())], value=Subscript(value=Name(id='left', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Subscript(value=Name(id='right', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='left', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='i', ctx=Load())), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='right', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='i', ctx=Load())), ctx=Load())]), body=[Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Constant(value=42)]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Sub(), value=Constant(value=10)), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Call(func=Attribute(value=Constant(value='Skipping {} identical trailing characters in diff, use -v to show'), attr='format', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='left', ctx=Store())], value=Subscript(value=Name(id='left', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='i', ctx=Load()))), ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Subscript(value=Name(id='right', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='i', ctx=Load()))), ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='keepends', ctx=Store())], value=Constant(value=True)), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='left', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='right', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Strings contain only whitespace, escaping them using repr()')], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=ListComp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\n')], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Name(id='ndiff', ctx=Load()), args=[Call(func=Attribute(value=Name(id='right', ctx=Load()), attr='splitlines', ctx=Load()), args=[Name(id='keepends', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='left', ctx=Load()), attr='splitlines', ctx=Load()), args=[Name(id='keepends', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_surrounding_parens_on_own_lines', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move opening/closing parenthesis/bracket to own lines.')), Assign(targets=[Name(id='opening', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='opening', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='('), Constant(value='['), Constant(value='{')], ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=List(elts=[Name(id='opening', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='lines', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='closing', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=Compare(left=Name(id='closing', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value=')'), Constant(value=']'), Constant(value='}')], ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=BinOp(left=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Constant(value=','))), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=Name(id='lines', ctx=Load()), op=Add(), right=List(elts=[Name(id='closing', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_compare_eq_iterable', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='right', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='verbose', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), UnaryOp(op=Not(), operand=Call(func=Name(id='running_on_ci', ctx=Load()), args=[], keywords=[]))]), body=[Return(value=List(elts=[Constant(value='Use -v to get more diff')], ctx=Load()))], orelse=[]), Import(names=[alias(name='difflib')]), Assign(targets=[Name(id='left_formatting', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='right_formatting', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines_left', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='left_formatting', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_right', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='right_formatting', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='lines_left', ctx=Load()), ops=[NotEq()], comparators=[Name(id='lines_right', ctx=Load())]), body=[Assign(targets=[Name(id='left_formatting', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_pformat_dispatch', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='right_formatting', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_pformat_dispatch', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='lines_left', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), Compare(left=Name(id='lines_right', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Expr(value=Call(func=Name(id='_surrounding_parens_on_own_lines', ctx=Load()), args=[Name(id='left_formatting', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_surrounding_parens_on_own_lines', ctx=Load()), args=[Name(id='right_formatting', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[Constant(value='Full diff:')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='difflib', ctx=Load()), attr='ndiff', ctx=Load()), args=[Name(id='right_formatting', ctx=Load()), Name(id='left_formatting', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_compare_eq_sequence', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='right', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='comparing_bytes', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='right', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])])), AnnAssign(target=Name(id='explanation', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='len_left', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])), Assign(targets=[Name(id='len_right', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='len_left', ctx=Load()), Name(id='len_right', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[If(test=Name(id='comparing_bytes', ctx=Load()), body=[Assign(targets=[Name(id='left_value', ctx=Store())], value=Subscript(value=Name(id='left', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='right_value', ctx=Store())], value=Subscript(value=Name(id='right', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))], orelse=[Assign(targets=[Name(id='left_value', ctx=Store())], value=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='right_value', ctx=Store())], value=Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))]), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[JoinedStr(values=[Constant(value='At index '), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), Constant(value=' diff: '), FormattedValue(value=Name(id='left_value', ctx=Load()), conversion=114), Constant(value=' != '), FormattedValue(value=Name(id='right_value', ctx=Load()), conversion=114)])], ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Name(id='comparing_bytes', ctx=Load()), body=[Return(value=Name(id='explanation', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='len_diff', ctx=Store())], value=BinOp(left=Name(id='len_left', ctx=Load()), op=Sub(), right=Name(id='len_right', ctx=Load()))), If(test=Name(id='len_diff', ctx=Load()), body=[If(test=Compare(left=Name(id='len_diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='dir_with_more', ctx=Store())], value=Constant(value='Left')), Assign(targets=[Name(id='extra', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='len_right', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='len_diff', ctx=Store())], value=BinOp(left=Constant(value=0), op=Sub(), right=Name(id='len_diff', ctx=Load()))), Assign(targets=[Name(id='dir_with_more', ctx=Store())], value=Constant(value='Right')), Assign(targets=[Name(id='extra', ctx=Store())], value=Call(func=Name(id='saferepr', ctx=Load()), args=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='len_left', ctx=Load()), ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='len_diff', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[JoinedStr(values=[FormattedValue(value=Name(id='dir_with_more', ctx=Load()), conversion=-1), Constant(value=' contains one more item: '), FormattedValue(value=Name(id='extra', ctx=Load()), conversion=-1)])], ctx=Load()))], orelse=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=Constant(value='%s contains %d more items, first extra item: %s'), op=Mod(), right=Tuple(elts=[Name(id='dir_with_more', ctx=Load()), Name(id='len_diff', ctx=Load()), Name(id='extra', ctx=Load())], ctx=Load()))], ctx=Load()))])], orelse=[]), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_compare_eq_set', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Subscript(value=Name(id='AbstractSet', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='right', annotation=Subscript(value=Name(id='AbstractSet', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='diff_left', ctx=Store())], value=BinOp(left=Name(id='left', ctx=Load()), op=Sub(), right=Name(id='right', ctx=Load()))), Assign(targets=[Name(id='diff_right', ctx=Store())], value=BinOp(left=Name(id='right', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load()))), If(test=Name(id='diff_left', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Extra items in the left set:')], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='diff_left', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='diff_right', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Extra items in the right set:')], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='diff_right', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_compare_eq_dict', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='right', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[AnnAssign(target=Name(id='explanation', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='set_left', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])), Assign(targets=[Name(id='set_right', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[])), Assign(targets=[Name(id='common', ctx=Store())], value=Call(func=Attribute(value=Name(id='set_left', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='set_right', ctx=Load())], keywords=[])), Assign(targets=[Name(id='same', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='common', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())])], is_async=0)])), If(test=BoolOp(op=And(), values=[Name(id='same', ctx=Load()), Compare(left=Name(id='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])]), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=Constant(value='Omitting %s identical items, use -vv to show'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='same', ctx=Load())], keywords=[]))], ctx=Load()))], orelse=[If(test=Name(id='same', ctx=Load()), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Common items:')], ctx=Load())), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='same', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='diff', ctx=Store())], value=SetComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='common', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())])], is_async=0)])), If(test=Name(id='diff', ctx=Load()), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Differing items:')], ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Name(id='diff', ctx=Load()), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=BinOp(left=Call(func=Name(id='saferepr', ctx=Load()), args=[Dict(keys=[Name(id='k', ctx=Load())], values=[Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())])], keywords=[]), op=Add(), right=Constant(value=' != ')), op=Add(), right=Call(func=Name(id='saferepr', ctx=Load()), args=[Dict(keys=[Name(id='k', ctx=Load())], values=[Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())])], keywords=[]))], ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='extra_left', ctx=Store())], value=BinOp(left=Name(id='set_left', ctx=Load()), op=Sub(), right=Name(id='set_right', ctx=Load()))), Assign(targets=[Name(id='len_extra_left', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='extra_left', ctx=Load())], keywords=[])), If(test=Name(id='len_extra_left', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Left contains %d more item%s:'), op=Mod(), right=Tuple(elts=[Name(id='len_extra_left', ctx=Load()), IfExp(test=Compare(left=Name(id='len_extra_left', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value=''), orelse=Constant(value='s'))], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[DictComp(key=Name(id='k', ctx=Load()), value=Subscript(value=Name(id='left', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='extra_left', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='extra_right', ctx=Store())], value=BinOp(left=Name(id='set_right', ctx=Load()), op=Sub(), right=Name(id='set_left', ctx=Load()))), Assign(targets=[Name(id='len_extra_right', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='extra_right', ctx=Load())], keywords=[])), If(test=Name(id='len_extra_right', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Right contains %d more item%s:'), op=Mod(), right=Tuple(elts=[Name(id='len_extra_right', ctx=Load()), IfExp(test=Compare(left=Name(id='len_extra_right', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value=''), orelse=Constant(value='s'))], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[DictComp(key=Name(id='k', ctx=Load()), value=Subscript(value=Name(id='right', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='extra_right', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_compare_eq_cls', args=arguments(posonlyargs=[], args=[arg(arg='left', annotation=Name(id='Any', ctx=Load())), arg(arg='right', annotation=Name(id='Any', ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='has_default_eq', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isdatacls', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), body=[Import(names=[alias(name='dataclasses')]), Assign(targets=[Name(id='all_fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='fields', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fields_to_check', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='info', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='info', ctx=Store()), iter=Name(id='all_fields', ctx=Load()), ifs=[Attribute(value=Name(id='info', ctx=Load()), attr='compare', ctx=Load())], is_async=0)]))], orelse=[If(test=Call(func=Name(id='isattrs', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='all_fields', ctx=Store())], value=Attribute(value=Name(id='left', ctx=Load()), attr='__attrs_attrs__', ctx=Load())), Assign(targets=[Name(id='fields_to_check', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Name(id='all_fields', ctx=Load()), ifs=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='field', ctx=Load()), Constant(value='eq')], keywords=[])], is_async=0)]))], orelse=[If(test=Call(func=Name(id='isnamedtuple', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fields_to_check', ctx=Store())], value=Attribute(value=Name(id='left', ctx=Load()), attr='_fields', ctx=Load()))], orelse=[Assert(test=Constant(value=False))])])]), Assign(targets=[Name(id='indent', ctx=Store())], value=Constant(value='  ')), Assign(targets=[Name(id='same', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='diff', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Name(id='fields_to_check', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='right', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='same', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='diff', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='explanation', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=Or(), values=[Name(id='same', ctx=Load()), Name(id='diff', ctx=Load())]), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='')], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='same', ctx=Load()), Compare(left=Name(id='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='explanation', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Omitting %s identical items, use -vv to show'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='same', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[If(test=Name(id='same', ctx=Load()), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Matching attributes:')], ctx=Load())), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='same', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]))], orelse=[])]), If(test=Name(id='diff', ctx=Load()), body=[AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Differing attributes:')], ctx=Load())), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='diff', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Name(id='diff', ctx=Load()), body=[Assign(targets=[Name(id='field_left', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])), Assign(targets=[Name(id='field_right', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='right', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=List(elts=[Constant(value=''), BinOp(left=Constant(value='Drill down into differing attribute %s:'), op=Mod(), right=Name(id='field', ctx=Load())), BinOp(left=Constant(value='%s%s: %r != %r'), op=Mod(), right=Tuple(elts=[Name(id='indent', ctx=Load()), Name(id='field', ctx=Load()), Name(id='field_left', ctx=Load()), Name(id='field_right', ctx=Load())], ctx=Load()))], ctx=Load())), AugAssign(target=Name(id='explanation', ctx=Store()), op=Add(), value=ListComp(elt=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load())), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Name(id='_compare_eq_any', ctx=Load()), args=[Name(id='field_left', ctx=Load()), Name(id='field_right', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[])], orelse=[]), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_notin_text', args=arguments(posonlyargs=[], args=[arg(arg='term', annotation=Name(id='str', ctx=Load())), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='verbose', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[])), Assign(targets=[Name(id='head', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Name(id='index', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='tail', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='correct_text', ctx=Store())], value=BinOp(left=Name(id='head', ctx=Load()), op=Add(), right=Name(id='tail', ctx=Load()))), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='_diff_text', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='correct_text', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[])), Assign(targets=[Name(id='newdiff', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='%s is contained here:'), op=Mod(), right=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[keyword(arg='maxsize', value=Constant(value=42))]))], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Name(id='diff', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Skipping')], keywords=[]), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='- ')], keywords=[]), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='+ ')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='newdiff', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  '), op=Add(), right=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='newdiff', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='newdiff', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='running_on_ci', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if we're currently running on a CI system.")), Assign(targets=[Name(id='env_vars', ctx=Store())], value=List(elts=[Constant(value='CI'), Constant(value='BUILD_NUMBER')], ctx=Load())), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='var', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), generators=[comprehension(target=Name(id='var', ctx=Store()), iter=Name(id='env_vars', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])