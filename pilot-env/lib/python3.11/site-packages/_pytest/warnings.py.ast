Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest.config', names=[alias(name='apply_warning_filters')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='parse_warning_filter')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0)], orelse=[]), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value='filterwarnings(warning): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings ')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='catch_warnings_for_item', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='ihook'), arg(arg='when', annotation=Constant(value="Literal['config', 'collect', 'runtest']")), arg(arg='item', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Context manager that catches warnings generated in the contained execution block.\n\n    ``item`` can be None if we are not in the context of an item execution.\n\n    Each warning captured triggers the ``pytest_warning_recorded`` hook.\n    ')), Assign(targets=[Name(id='config_filters', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='filterwarnings')], keywords=[])), Assign(targets=[Name(id='cmdline_filters', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='pythonwarnings', ctx=Load()), List(elts=[], ctx=Load())])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='log', ctx=Store()))], body=[Assert(test=Compare(left=Name(id='log', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='sys', ctx=Load()), attr='warnoptions', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='always')], keywords=[keyword(arg='category', value=Name(id='DeprecationWarning', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='always')], keywords=[keyword(arg='category', value=Name(id='PendingDeprecationWarning', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Name(id='apply_warning_filters', ctx=Load()), args=[Name(id='config_filters', ctx=Load()), Name(id='cmdline_filters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nodeid', ctx=Store())], value=IfExp(test=Compare(left=Name(id='item', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=''), orelse=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()))), If(test=Compare(left=Name(id='item', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='filterwarnings'))]), body=[For(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Starred(value=Call(func=Name(id='parse_warning_filter', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[keyword(arg='escape', value=Constant(value=False))]), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Yield()), For(target=Name(id='warning_message', ctx=Store()), iter=Name(id='log', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_warning_recorded', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='warning_message', value=Name(id='warning_message', ctx=Load())), keyword(arg='nodeid', value=Name(id='nodeid', ctx=Load())), keyword(arg='when', value=Name(id='when', ctx=Load())), keyword(arg='location', value=Constant(value=None))]))]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='warning_record_to_str', args=arguments(posonlyargs=[], args=[arg(arg='warning_message', annotation=Attribute(value=Name(id='warnings', ctx=Load()), attr='WarningMessage', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a warnings.WarningMessage to a string.')), Assign(targets=[Name(id='warn_msg', ctx=Store())], value=Attribute(value=Name(id='warning_message', ctx=Load()), attr='message', ctx=Load())), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='formatwarning', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='warn_msg', ctx=Load())], keywords=[]), Attribute(value=Name(id='warning_message', ctx=Load()), attr='category', ctx=Load()), Attribute(value=Name(id='warning_message', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='warning_message', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='warning_message', ctx=Load()), attr='line', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='warning_message', ctx=Load()), attr='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Import(names=[alias(name='tracemalloc')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Attribute(value=Name(id='tracemalloc', ctx=Load()), attr='get_object_traceback', ctx=Load()), args=[Attribute(value=Name(id='warning_message', ctx=Load()), attr='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='tb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='formatted_tb', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tb', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[])], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='\nObject allocated at:\n'), FormattedValue(value=Name(id='formatted_tb', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings')), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='Enable tracemalloc to get traceback where the object was allocated.\n')), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='See '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=-1), Constant(value=' for more info.')]))])], finalbody=[])], orelse=[]), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pytest_runtest_protocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='catch_warnings_for_item', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load())), keyword(arg='ihook', value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load())), keyword(arg='when', value=Constant(value='runtest')), keyword(arg='item', value=Name(id='item', ctx=Load()))]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='catch_warnings_for_item', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='ihook', value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load())), keyword(arg='when', value=Constant(value='collect')), keyword(arg='item', value=Constant(value=None))]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_terminal_summary', args=arguments(posonlyargs=[], args=[arg(arg='terminalreporter', annotation=Name(id='TerminalReporter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='config', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='catch_warnings_for_item', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='ihook', value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load())), keyword(arg='when', value=Constant(value='config')), keyword(arg='item', value=Constant(value=None))]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='catch_warnings_for_item', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='ihook', value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load())), keyword(arg='when', value=Constant(value='config')), keyword(arg='item', value=Constant(value=None))]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_load_initial_conftests', args=arguments(posonlyargs=[], args=[arg(arg='early_config', annotation=Constant(value='Config'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='catch_warnings_for_item', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='early_config', ctx=Load())), keyword(arg='ihook', value=Attribute(value=Name(id='early_config', ctx=Load()), attr='hook', ctx=Load())), keyword(arg='when', value=Constant(value='config')), keyword(arg='item', value=Constant(value=None))]))], body=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])