Module(body=[Expr(value=Constant(value='Helper plugin for pytester; should not be loaded on its own.')), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='CollectReport')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), FunctionDef(name='assertoutcome', args=arguments(posonlyargs=[], args=[arg(arg='outcomes', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='TestReport', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='CollectReport', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='CollectReport', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='passed', annotation=Name(id='int', ctx=Load())), arg(arg='skipped', annotation=Name(id='int', ctx=Load())), arg(arg='failed', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Tuple(elts=[Name(id='realpassed', ctx=Store()), Name(id='realskipped', ctx=Store()), Name(id='realfailed', ctx=Store())], ctx=Store())], value=Name(id='outcomes', ctx=Load())), Assign(targets=[Name(id='obtained', ctx=Store())], value=Dict(keys=[Constant(value='passed'), Constant(value='skipped'), Constant(value='failed')], values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='realpassed', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='realskipped', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='realfailed', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='expected', ctx=Store())], value=Dict(keys=[Constant(value='passed'), Constant(value='skipped'), Constant(value='failed')], values=[Name(id='passed', ctx=Load()), Name(id='skipped', ctx=Load()), Name(id='failed', ctx=Load())])), Assert(test=Compare(left=Name(id='obtained', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]), msg=Name(id='outcomes', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='assert_outcomes', args=arguments(posonlyargs=[], args=[arg(arg='outcomes', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='passed', annotation=Name(id='int', ctx=Load())), arg(arg='skipped', annotation=Name(id='int', ctx=Load())), arg(arg='failed', annotation=Name(id='int', ctx=Load())), arg(arg='errors', annotation=Name(id='int', ctx=Load())), arg(arg='xpassed', annotation=Name(id='int', ctx=Load())), arg(arg='xfailed', annotation=Name(id='int', ctx=Load())), arg(arg='warnings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='deselected', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Assert that the specified outcomes appear with the respective\n    numbers (0 means it didn't occur) in the text output from a test run.")), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='obtained', ctx=Store())], value=Dict(keys=[Constant(value='passed'), Constant(value='skipped'), Constant(value='failed'), Constant(value='errors'), Constant(value='xpassed'), Constant(value='xfailed')], values=[Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='passed'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='skipped'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='failed'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='errors'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='xpassed'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='xfailed'), Constant(value=0)], keywords=[])])), Assign(targets=[Name(id='expected', ctx=Store())], value=Dict(keys=[Constant(value='passed'), Constant(value='skipped'), Constant(value='failed'), Constant(value='errors'), Constant(value='xpassed'), Constant(value='xfailed')], values=[Name(id='passed', ctx=Load()), Name(id='skipped', ctx=Load()), Name(id='failed', ctx=Load()), Name(id='errors', ctx=Load()), Name(id='xpassed', ctx=Load()), Name(id='xfailed', ctx=Load())])), If(test=Compare(left=Name(id='warnings', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='obtained', ctx=Load()), slice=Constant(value='warnings'), ctx=Store())], value=Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='warnings'), Constant(value=0)], keywords=[])), Assign(targets=[Subscript(value=Name(id='expected', ctx=Load()), slice=Constant(value='warnings'), ctx=Store())], value=Name(id='warnings', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='deselected', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='obtained', ctx=Load()), slice=Constant(value='deselected'), ctx=Store())], value=Call(func=Attribute(value=Name(id='outcomes', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='deselected'), Constant(value=0)], keywords=[])), Assign(targets=[Subscript(value=Name(id='expected', ctx=Load()), slice=Constant(value='deselected'), ctx=Store())], value=Name(id='deselected', ctx=Load()))], orelse=[]), Assert(test=Compare(left=Name(id='obtained', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])