Module(body=[Expr(value=Constant(value='Terminal reporting of the full testing process.\n\nThis is a good source for looking at the various reporting hooks.\n')), Import(names=[alias(name='argparse')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='datetime')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='Counter')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='ClassVar')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='NamedTuple')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='TextIO')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pluggy')]), Import(names=[alias(name='_pytest._version')]), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest', names=[alias(name='timing')], level=0), ImportFrom(module='_pytest._code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionRepr')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest._io.wcwidth', names=[alias(name='wcswidth')], level=0), ImportFrom(module='_pytest.assertion.util', names=[alias(name='running_on_ci')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='_PluggyPlugin')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Node')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='bestrelpath')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='BaseReport')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='CollectReport')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0)], orelse=[]), Assign(targets=[Name(id='REPORT_COLLECTING_RESOLUTION', ctx=Store())], value=Constant(value=0.5)), Assign(targets=[Name(id='KNOWN_TYPES', ctx=Store())], value=Tuple(elts=[Constant(value='failed'), Constant(value='passed'), Constant(value='skipped'), Constant(value='deselected'), Constant(value='xfailed'), Constant(value='xpassed'), Constant(value='warnings'), Constant(value='error')], ctx=Load())), Assign(targets=[Name(id='_REPORTCHARS_DEFAULT', ctx=Store())], value=Constant(value='fE')), ClassDef(name='MoreQuietAction', bases=[Attribute(value=Name(id='argparse', ctx=Load()), attr='Action', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A modified copy of the argparse count action which counts down and updates\n    the legacy quiet attribute at the same time.\n\n    Used to unify verbosity handling.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option_strings', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='object', ctx=Load())), arg(arg='required', annotation=Name(id='bool', ctx=Load())), arg(arg='help', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='option_strings', value=Name(id='option_strings', ctx=Load())), keyword(arg='dest', value=Name(id='dest', ctx=Load())), keyword(arg='nargs', value=Constant(value=0)), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='required', value=Name(id='required', ctx=Load())), keyword(arg='help', value=Name(id='help', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load())), arg(arg='namespace', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='Namespace', ctx=Load())), arg(arg='values', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='option_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='new_count', ctx=Store())], value=BinOp(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='namespace', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dest', ctx=Load()), Constant(value=0)], keywords=[]), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='namespace', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dest', ctx=Load()), Name(id='new_count', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='namespace', ctx=Load()), attr='quiet', ctx=Store())], value=BinOp(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='namespace', ctx=Load()), Constant(value='quiet'), Constant(value=0)], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='TestShortLogReport', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Used to store the test status result category, shortletter and verbose word.\n    For example ``"rerun", "R", ("RERUN", {"yellow": True})``.\n\n    :ivar category:\n        The class of result, for example ``“passed”``, ``“skipped”``, ``“error”``, or the empty string.\n\n    :ivar letter:\n        The short letter shown as testing progresses, for example ``"."``, ``"s"``, ``"E"``, or the empty string.\n\n    :ivar word:\n        Verbose word is shown as testing progresses in verbose mode, for example ``"PASSED"``, ``"SKIPPED"``,\n        ``"ERROR"``, or the empty string.\n    ')), AnnAssign(target=Name(id='category', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='letter', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='word', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='terminal reporting'), Constant(value='Reporting')], keywords=[keyword(arg='after', value=Constant(value='general'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-v'), Constant(value='--verbose')], keywords=[keyword(arg='action', value=Constant(value='count')), keyword(arg='default', value=Constant(value=0)), keyword(arg='dest', value=Constant(value='verbose')), keyword(arg='help', value=Constant(value='Increase verbosity'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--no-header')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='no_header')), keyword(arg='help', value=Constant(value='Disable header'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--no-summary')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='no_summary')), keyword(arg='help', value=Constant(value='Disable summary'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-q'), Constant(value='--quiet')], keywords=[keyword(arg='action', value=Name(id='MoreQuietAction', ctx=Load())), keyword(arg='default', value=Constant(value=0)), keyword(arg='dest', value=Constant(value='verbose')), keyword(arg='help', value=Constant(value='Decrease verbosity'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--verbosity')], keywords=[keyword(arg='dest', value=Constant(value='verbose')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=0)), keyword(arg='help', value=Constant(value='Set verbosity. Default: 0.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-r')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='reportchars')), keyword(arg='default', value=Name(id='_REPORTCHARS_DEFAULT', ctx=Load())), keyword(arg='metavar', value=Constant(value='chars')), keyword(arg='help', value=Constant(value="Show extra test summary info as specified by chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)assed, (P)assed with output, (a)ll except passed (p/P), or (A)ll. (w)arnings are enabled by default (see --disable-warnings), 'N' can be used to reset the list. (default: 'fE')."))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--disable-warnings'), Constant(value='--disable-pytest-warnings')], keywords=[keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='disable_warnings')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Disable warnings summary'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-l'), Constant(value='--showlocals')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='showlocals')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Show locals in tracebacks (disabled by default)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--no-showlocals')], keywords=[keyword(arg='action', value=Constant(value='store_false')), keyword(arg='dest', value=Constant(value='showlocals')), keyword(arg='help', value=Constant(value='Hide locals in tracebacks (negate --showlocals passed through addopts)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--tb')], keywords=[keyword(arg='metavar', value=Constant(value='style')), keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='tbstyle')), keyword(arg='default', value=Constant(value='auto')), keyword(arg='choices', value=List(elts=[Constant(value='auto'), Constant(value='long'), Constant(value='short'), Constant(value='no'), Constant(value='line'), Constant(value='native')], ctx=Load())), keyword(arg='help', value=Constant(value='Traceback print mode (auto/long/short/line/native/no)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--show-capture')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='showcapture')), keyword(arg='choices', value=List(elts=[Constant(value='no'), Constant(value='stdout'), Constant(value='stderr'), Constant(value='log'), Constant(value='all')], ctx=Load())), keyword(arg='default', value=Constant(value='all')), keyword(arg='help', value=Constant(value='Controls how captured stdout/stderr/log is shown on failed tests. Default: all.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--fulltrace'), Constant(value='--full-trace')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value="Don't cut any tracebacks (default is to cut)"))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--color')], keywords=[keyword(arg='metavar', value=Constant(value='color')), keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='color')), keyword(arg='default', value=Constant(value='auto')), keyword(arg='choices', value=List(elts=[Constant(value='yes'), Constant(value='no'), Constant(value='auto')], ctx=Load())), keyword(arg='help', value=Constant(value='Color terminal output (yes/no/auto)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--code-highlight')], keywords=[keyword(arg='default', value=Constant(value='yes')), keyword(arg='choices', value=List(elts=[Constant(value='yes'), Constant(value='no')], ctx=Load())), keyword(arg='help', value=Constant(value='Whether code should be highlighted (only if --color is also enabled). Default: yes.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='console_output_style')], keywords=[keyword(arg='help', value=Constant(value='Console output: "classic", or with additional progress information ("progress" (percentage) | "count" | "progress-even-when-capture-no" (forces progress even when capture=no)')), keyword(arg='default', value=Constant(value='progress'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Name(id='TerminalReporter', ctx=Load()), args=[Name(id='config', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='reporter', ctx=Load()), Constant(value='terminalreporter')], keywords=[])), If(test=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='debug', ctx=Load()), Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='traceconfig', ctx=Load())]), body=[FunctionDef(name='mywriter', args=arguments(posonlyargs=[], args=[arg(arg='tags'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='write_line', ctx=Load()), args=[BinOp(left=Constant(value='[traceconfig] '), op=Add(), right=Name(id='msg', ctx=Load()))], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='setprocessor', ctx=Load()), args=[Constant(value='pytest:config'), Name(id='mywriter', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getreportopt', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='reportchars', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='reportchars', ctx=Load()), simple=1), Assign(targets=[Name(id='old_aliases', ctx=Store())], value=Set(elts=[Constant(value='F'), Constant(value='S')])), Assign(targets=[Name(id='reportopts', ctx=Store())], value=Constant(value='')), For(target=Name(id='char', ctx=Store()), iter=Name(id='reportchars', ctx=Load()), body=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Name(id='old_aliases', ctx=Load())]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Call(func=Attribute(value=Name(id='char', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='a')]), body=[Assign(targets=[Name(id='reportopts', ctx=Store())], value=Constant(value='sxXEf'))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='A')]), body=[Assign(targets=[Name(id='reportopts', ctx=Store())], value=Constant(value='PpsxXEf'))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='N')]), body=[Assign(targets=[Name(id='reportopts', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotIn()], comparators=[Name(id='reportopts', ctx=Load())]), body=[AugAssign(target=Name(id='reportopts', ctx=Store()), op=Add(), value=Name(id='char', ctx=Load()))], orelse=[])])])])], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='disable_warnings', ctx=Load())), Compare(left=Constant(value='w'), ops=[NotIn()], comparators=[Name(id='reportopts', ctx=Load())])]), body=[Assign(targets=[Name(id='reportopts', ctx=Store())], value=BinOp(left=Constant(value='w'), op=Add(), right=Name(id='reportopts', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='disable_warnings', ctx=Load()), Compare(left=Constant(value='w'), ops=[In()], comparators=[Name(id='reportopts', ctx=Load())])]), body=[Assign(targets=[Name(id='reportopts', ctx=Store())], value=Call(func=Attribute(value=Name(id='reportopts', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='w'), Constant(value='')], keywords=[]))], orelse=[])]), Return(value=Name(id='reportopts', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pytest_report_teststatus', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='F')), If(test=Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load()), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='.'))], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load()), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='s'))], orelse=[])]), AnnAssign(target=Name(id='outcome', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Attribute(value=Name(id='report', ctx=Load()), attr='outcome', ctx=Load()), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='collect'), Constant(value='setup'), Constant(value='teardown')], ctx=Load())]), Compare(left=Name(id='outcome', ctx=Load()), ops=[Eq()], comparators=[Constant(value='failed')])]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='error')), Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='E'))], orelse=[]), Return(value=Tuple(elts=[Name(id='outcome', ctx=Load()), Name(id='letter', ctx=Load()), Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='trylast', value=Constant(value=True))])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='WarningReport', bases=[], keywords=[], body=[Expr(value=Constant(value='Simple structure to hold warnings information captured by ``pytest_warning_recorded``.\n\n    :ivar str message:\n        User friendly message about the warning.\n    :ivar str|None nodeid:\n        nodeid that generated the warning (see ``get_location``).\n    :ivar tuple fslocation:\n        File system location of the source of the warning (see ``get_location``).\n    ')), AnnAssign(target=Name(id='message', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='nodeid', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='fslocation', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='count_towards_summary', ctx=Store()), annotation=Name(id='ClassVar', ctx=Load()), value=Constant(value=True), simple=1), FunctionDef(name='get_location', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the more user-friendly information about the location of a warning, or None.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='fslocation', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='linenum', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='fslocation', ctx=Load())), Assign(targets=[Name(id='relpath', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()), Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='relpath', ctx=Load()), conversion=-1), Constant(value=':'), FormattedValue(value=Name(id='linenum', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='TerminalReporter', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Import(names=[alias(name='_pytest.config')]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Session', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_showfspath', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_main_color', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_known_types', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load())), If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='config', ctx=Load()), attr='create_terminal_writer', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='file', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_screen_width', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='fullwidth', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='Path', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reportchars', ctx=Store())], value=Call(func=Name(id='getreportopt', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hasmarkup', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='hasmarkup', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='isatty', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_determine_show_progress_info', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_collect_report_last_write', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_already_displayed_warnings', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_keyboardinterrupt_memo', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ExceptionRepr', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_determine_show_progress_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether we should display progress information based on the current config.')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='capture'), Constant(value='no')], keywords=[]), ops=[Eq()], comparators=[Constant(value='no')]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='console_output_style')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='progress-even-when-capture-no')])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='setupshow'), Constant(value=False)], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), AnnAssign(target=Name(id='cfg', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='console_output_style')], keywords=[]), simple=1), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='cfg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='progress')]), Compare(left=Name(id='cfg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='progress-even-when-capture-no')])]), body=[Return(value=Constant(value='progress'))], orelse=[If(test=Compare(left=Name(id='cfg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='count')]), body=[Return(value=Constant(value='count'))], orelse=[Return(value=Constant(value=False))])])], decorator_list=[], returns=Constant(value="Literal['progress', 'count', False]")), FunctionDef(name='verbosity', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='verbosity', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), simple=1), Return(value=Name(id='verbosity', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='showheader', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='no_header', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='no_header', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='no_summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='no_summary', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='showfspath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_showfspath', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_showfspath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='showfspath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_showfspath', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='showfspath', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='showlongtestinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='hasopt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='char', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Call(func=Attribute(value=Dict(keys=[Constant(value='xfailed'), Constant(value='skipped')], values=[Constant(value='x'), Constant(value='s')]), attr='get', ctx=Load()), args=[Name(id='char', ctx=Load()), Name(id='char', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='reportchars', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='write_fspath_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load())), arg(arg='res')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='fspath', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load()), op=Div(), right=Subscript(value=Call(func=Attribute(value=Name(id='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[]), slice=Constant(value=0), ctx=Load()))), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='fspath', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Load())])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_progress_information_filling_space', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store())], value=Name(id='fspath', ctx=Load())), Assign(targets=[Name(id='relfspath', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load()), Name(id='fspath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='relfspath', ctx=Load()), op=Add(), right=Constant(value=' '))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[keyword(arg='flush', value=Constant(value=True)), keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_ensure_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load())), arg(arg='extra', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value='')]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Load()), ops=[NotEq()], comparators=[Name(id='prefix', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store())], value=Name(id='prefix', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='extra', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=2)))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ensure_newline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='wrap_write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='flush', annotation=Name(id='bool', ctx=Load())), arg(arg='margin', annotation=Name(id='int', ctx=Load())), arg(arg='line_sep', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=False), Constant(value=8), Constant(value='\n')], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Wrap message with margin for progress info.')), Assign(targets=[Name(id='width_of_current_line', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='width_of_current_line', ctx=Load())), Assign(targets=[Name(id='wrapped', ctx=Store())], value=Call(func=Attribute(value=Name(id='line_sep', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='wrap', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='width_of_current_line', ctx=Load())), op=Add(), right=Name(id='content', ctx=Load()))], keywords=[keyword(arg='width', value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_screen_width', ctx=Load()), op=Sub(), right=Name(id='margin', ctx=Load()))), keyword(arg='drop_whitespace', value=Constant(value=True)), keyword(arg='replace_whitespace', value=Constant(value=False))])], keywords=[])), Assign(targets=[Name(id='wrapped', ctx=Store())], value=Subscript(value=Name(id='wrapped', ctx=Load()), slice=Slice(lower=Name(id='width_of_current_line', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='wrapped', ctx=Load())], keywords=[keyword(arg='flush', value=Name(id='flush', ctx=Load())), keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='flush', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[keyword(arg='flush', value=Name(id='flush', ctx=Load())), keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_newline', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Rewinds the terminal cursor to the beginning and writes the given line.\n\n        :param erase:\n            If True, will also add spaces until the full terminal width to ensure\n            previous lines are properly erased.\n\n        The rest of the keyword arguments are markup instructions.\n        ')), Assign(targets=[Name(id='erase', ctx=Store())], value=Call(func=Attribute(value=Name(id='markup', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='erase'), Constant(value=False)], keywords=[])), If(test=Name(id='erase', ctx=Load()), body=[Assign(targets=[Name(id='fill_count', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='fullwidth', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='fill', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='fill_count', ctx=Load())))], orelse=[Assign(targets=[Name(id='fill', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\r'), op=Add(), right=Name(id='line', ctx=Load())), op=Add(), right=Name(id='fill', ctx=Load()))], keywords=[keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_sep', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='fullwidth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='markup', annotation=Name(id='bool', ctx=Load())), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_newline', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='sep', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='title', ctx=Load()), Name(id='fullwidth', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='section', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load())), arg(arg='sep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='bool', ctx=Load())), defaults=[Constant(value='=')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='sep', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='title', ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='bool', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_add_stats', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='category', annotation=Name(id='str', ctx=Load())), arg(arg='items', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='set_main_color', ctx=Store())], value=Compare(left=Name(id='category', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load())])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='category', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='extend', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), If(test=Name(id='set_main_color', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_main_color', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_internalerror', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excrepr', annotation=Name(id='ExceptionRepr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='excrepr', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[BinOp(left=Constant(value='INTERNALERROR> '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pytest_warning_recorded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warning_message', annotation=Attribute(value=Name(id='warnings', ctx=Load()), attr='WarningMessage', ctx=Load())), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_pytest.warnings', names=[alias(name='warning_record_to_str')], level=0), Assign(targets=[Name(id='fslocation', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='warning_message', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='warning_message', ctx=Load()), attr='lineno', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Name(id='warning_record_to_str', ctx=Load()), args=[Name(id='warning_message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='warning_report', ctx=Store())], value=Call(func=Name(id='WarningReport', ctx=Load()), args=[], keywords=[keyword(arg='fslocation', value=Name(id='fslocation', ctx=Load())), keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='nodeid', value=Name(id='nodeid', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_stats', ctx=Load()), args=[Constant(value='warnings'), List(elts=[Name(id='warning_report', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_plugin_registered', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plugin', annotation=Name(id='_PluggyPlugin', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='traceconfig', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='PLUGIN registered: '), FormattedValue(value=Name(id='plugin', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_deselected', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_stats', ctx=Load()), args=[Constant(value='deselected'), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_logstart', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='showlongtestinfo', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_locationline', ctx=Load()), args=[Name(id='nodeid', ctx=Load()), Starred(value=Name(id='location', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_ensure_prefix', ctx=Load()), args=[Name(id='line', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='showfspath', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_fspath_result', ctx=Load()), args=[Name(id='nodeid', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tests_ran', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='rep', ctx=Store())], value=Name(id='report', ctx=Load())), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='TestShortLogReport', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_report_teststatus', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='rep', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()))]), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='category', ctx=Store()), Name(id='letter', ctx=Store()), Name(id='word', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='res', ctx=Load()), attr='category', ctx=Load()), Attribute(value=Name(id='res', ctx=Load()), attr='letter', ctx=Load()), Attribute(value=Name(id='res', ctx=Load()), attr='word', ctx=Load())], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='word', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='markup', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Tuple(elts=[Name(id='word', ctx=Store()), Name(id='markup', ctx=Store())], ctx=Store())], value=Name(id='word', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_stats', ctx=Load()), args=[Name(id='category', ctx=Load()), List(elts=[Name(id='rep', ctx=Load())], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='letter', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='word', ctx=Load()))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='running_xdist', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='node')], keywords=[])), If(test=Compare(left=Name(id='markup', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='was_xfail', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='was_xfail', ctx=Load()))]), body=[Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[Constant(value='green')], values=[Constant(value=True)]))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), Name(id='was_xfail', ctx=Load())]), body=[Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[Constant(value='yellow')], values=[Constant(value=True)]))], orelse=[If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='failed', ctx=Load()), body=[Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[Constant(value='red')], values=[Constant(value=True)]))], orelse=[If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='skipped', ctx=Load()), body=[Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[Constant(value='yellow')], values=[Constant(value=True)]))], orelse=[Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[], values=[]))])])])])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='letter', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_locationline', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load()), Starred(value=Attribute(value=Name(id='rep', ctx=Load()), attr='location', ctx=Load()), ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='running_xdist', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_ensure_prefix', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='word', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))])), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='rep', ctx=Load()), attr='skipped', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[])]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Name(id='_get_raw_skip_reason', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='available_width', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='fullwidth', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='width_of_current_line', ctx=Load())), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=' [100%]')], keywords=[])), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='formatted_reason', ctx=Store())], value=Call(func=Name(id='_format_trimmed', ctx=Load()), args=[Constant(value=' ({})'), Name(id='reason', ctx=Load()), Name(id='available_width', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='formatted_reason', ctx=Store())], value=JoinedStr(values=[Constant(value=' ('), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1), Constant(value=')')]))]), If(test=BoolOp(op=And(), values=[Name(id='reason', ctx=Load()), Compare(left=Name(id='formatted_reason', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap_write', ctx=Load()), args=[Name(id='formatted_reason', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_progress_information_filling_space', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_newline', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='[%s]'), op=Mod(), right=Attribute(value=Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='node', ctx=Load()), attr='gateway', ctx=Load()), attr='id', ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_progress_information_message', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=' '))], keywords=[keyword(arg='cyan', value=Constant(value=True))]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=' ')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='currentfspath', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=2)))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_is_last_item', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), attr='testscollected', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pytest_runtest_logfinish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load()), ops=[Eq()], comparators=[Constant(value='count')]), body=[Assign(targets=[Name(id='num_tests', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), attr='testscollected', ctx=Load())), Assign(targets=[Name(id='progress_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[JoinedStr(values=[Constant(value=' ['), FormattedValue(value=Name(id='num_tests', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='num_tests', ctx=Load()), conversion=-1), Constant(value=']')])], keywords=[]))], orelse=[Assign(targets=[Name(id='progress_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=' [100%]')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_is_last_item', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_progress_information_filling_space', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='main_color', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_main_color', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_width_of_current_line', ctx=Load())), Assign(targets=[Name(id='past_edge', ctx=Store())], value=Compare(left=BinOp(left=BinOp(left=Name(id='w', ctx=Load()), op=Add(), right=Name(id='progress_length', ctx=Load())), op=Add(), right=Constant(value=1)), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_screen_width', ctx=Load())])), If(test=Name(id='past_edge', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_progress_information_message', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[keyword(value=Dict(keys=[Name(id='main_color', ctx=Load())], values=[Constant(value=True)]))]))], orelse=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_progress_information_message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load())), Assign(targets=[Name(id='collected', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), attr='testscollected', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_show_progress_info', ctx=Load()), ops=[Eq()], comparators=[Constant(value='count')]), body=[If(test=Name(id='collected', ctx=Load()), body=[Assign(targets=[Name(id='progress', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Load())), Assign(targets=[Name(id='counter_format', ctx=Store())], value=JoinedStr(values=[Constant(value='{:'), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='collected', ctx=Load())], keywords=[])], keywords=[]), conversion=-1), Constant(value='d}')])), Assign(targets=[Name(id='format_string', ctx=Store())], value=JoinedStr(values=[Constant(value=' ['), FormattedValue(value=Name(id='counter_format', ctx=Load()), conversion=-1), Constant(value='/{}]')])), Return(value=Call(func=Attribute(value=Name(id='format_string', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='progress', ctx=Load())], keywords=[]), Name(id='collected', ctx=Load())], keywords=[]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value=' [ '), FormattedValue(value=Name(id='collected', ctx=Load()), conversion=-1), Constant(value=' / '), FormattedValue(value=Name(id='collected', ctx=Load()), conversion=-1), Constant(value=' ]')]))], orelse=[If(test=Name(id='collected', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Constant(value=' [{:3d}%]'), attr='format', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_progress_nodeids_reported', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=100)), op=FloorDiv(), right=Name(id='collected', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Constant(value=' [100%]'))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_write_progress_information_filling_space', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='color', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_main_color', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_progress_information_message', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_width_of_current_line', ctx=Load())), Assign(targets=[Name(id='fill', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='fullwidth', ctx=Load()), op=Sub(), right=Name(id='w', ctx=Load())), op=Sub(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='rjust', ctx=Load()), args=[Name(id='fill', ctx=Load())], keywords=[])], keywords=[keyword(arg='flush', value=Constant(value=True)), keyword(value=Dict(keys=[Name(id='color', ctx=Load())], values=[Constant(value=True)]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_width_of_current_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the width of the current line.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='width_of_current_line', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='isatty', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='collecting ... ')], keywords=[keyword(arg='flush', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_collect_report_last_write', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='collecting ... ')], keywords=[keyword(arg='flush', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collectreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='CollectReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_stats', ctx=Load()), args=[Constant(value='error'), List(elts=[Name(id='report', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_stats', ctx=Load()), args=[Constant(value='skipped'), List(elts=[Name(id='report', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='items', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='report', ctx=Load()), attr='result', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='Item', ctx=Load())], keywords=[])], is_async=0)])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='isatty', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report_collect', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='report_collect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='final', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='final', ctx=Load())), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_collect_report_last_write', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_collect_report_last_write', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='t', ctx=Load()), op=Sub(), right=Name(id='REPORT_COLLECTING_RESOLUTION', ctx=Load()))])]), body=[Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_collect_report_last_write', ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='error'), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='skipped', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='skipped'), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='deselected', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='deselected'), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='selected', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), op=Sub(), right=Name(id='deselected', ctx=Load()))), Assign(targets=[Name(id='line', ctx=Store())], value=IfExp(test=Name(id='final', ctx=Load()), body=Constant(value='collected '), orelse=Constant(value='collecting '))), AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' item')), op=Add(), right=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value=''), orelse=Constant(value='s')))), If(test=Name(id='errors', ctx=Load()), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' / %d error%s'), op=Mod(), right=Tuple(elts=[Name(id='errors', ctx=Load()), IfExp(test=Compare(left=Name(id='errors', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=Constant(value='s'), orelse=Constant(value=''))], ctx=Load())))], orelse=[]), If(test=Name(id='deselected', ctx=Load()), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' / %d deselected'), op=Mod(), right=Name(id='deselected', ctx=Load())))], orelse=[]), If(test=Name(id='skipped', ctx=Load()), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' / %d skipped'), op=Mod(), right=Name(id='skipped', ctx=Load())))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), ops=[Gt()], comparators=[Name(id='selected', ctx=Load())]), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' / %d selected'), op=Mod(), right=Name(id='selected', ctx=Load())))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='isatty', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rewrite', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(arg='bold', value=Constant(value=True)), keyword(arg='erase', value=Constant(value=True))])), If(test=Name(id='final', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store())], value=Name(id='session', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_sessionstarttime', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='showheader', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='test session starts')], keywords=[keyword(arg='bold', value=Constant(value=True))])), Assign(targets=[Name(id='verinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_header', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='platform '), FormattedValue(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), conversion=-1), Constant(value=' -- Python '), FormattedValue(value=Name(id='verinfo', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='pypy_version_info', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='pypy_version_info'), Constant(value=None)], keywords=[])), If(test=Name(id='pypy_version_info', ctx=Load()), body=[Assign(targets=[Name(id='verinfo', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Subscript(value=Name(id='pypy_version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='[pypy-'), FormattedValue(value=Name(id='verinfo', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Subscript(value=Name(id='pypy_version_info', ctx=Load()), slice=Constant(value=3), ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=', pytest-{}, pluggy-{}'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_version', ctx=Load()), attr='version', ctx=Load()), Attribute(value=Name(id='pluggy', ctx=Load()), attr='__version__', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='debug', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), Constant(value='pastebin'), Constant(value=None)], keywords=[])]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' -- '), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_report_header', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), keyword(arg='start_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_report_lines_from_hooks', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='trylast', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='_write_report_lines_from_hooks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='line_or_lines', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='line_or_lines', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='line_or_lines', ctx=Load())], keywords=[]))], orelse=[For(target=Name(id='line', ctx=Store()), iter=Name(id='line_or_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_report_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[JoinedStr(values=[Constant(value='rootdir: '), FormattedValue(value=Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load()), conversion=-1)])], ctx=Load())), If(test=Attribute(value=Name(id='config', ctx=Load()), attr='inipath', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='configfile: '), op=Add(), right=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='inipath', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='args_source', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='Config', ctx=Load()), attr='ArgsSource', ctx=Load()), attr='TESTPATHS', ctx=Load())]), body=[AnnAssign(target=Name(id='testpaths', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='testpaths')], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='testpaths: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='testpaths', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='plugininfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='list_plugin_distinfo', ctx=Load()), args=[], keywords=[])), If(test=Name(id='plugininfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='plugins: %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='_plugin_nameversions', ctx=Load()), args=[Name(id='plugininfo', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_collection_finish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report_collect', ctx=Load()), args=[Constant(value=True)], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_report_collectionfinish', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), keyword(arg='start_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load())), keyword(arg='items', value=Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_report_lines_from_hooks', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='collectonly')], keywords=[]), body=[If(test=Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Gt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_printcollecteditems', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='failed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='failed')], keywords=[])), If(test=Name(id='failed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='!'), Constant(value='collection failures')], keywords=[])), For(target=Name(id='rep', ctx=Store()), iter=Name(id='failed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='toterminal', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_printcollecteditems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='count', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='counts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='%s: %d'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='count', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[]))], orelse=[])]), Return()], orelse=[]), AnnAssign(target=Name(id='stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='indent', ctx=Store())], value=Constant(value='')), For(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Assign(targets=[Name(id='needed_collectors', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='listchain', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load())), While(test=Name(id='stack', ctx=Load()), body=[If(test=Compare(left=Name(id='stack', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='needed_collectors', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[])), ctx=Load())]), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='col', ctx=Store()), iter=Subscript(value=Name(id='needed_collectors', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[])), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indent', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Mult(), right=Constant(value='  '))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='indent', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='col', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='col', ctx=Load()), Constant(value='obj'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='doc', ctx=Store())], value=IfExp(test=Name(id='obj', ctx=Load()), body=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getdoc', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), orelse=Constant(value=None))), If(test=Name(id='doc', ctx=Load()), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='doc', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value='  ')), Name(id='line', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Constant(value='Session')), arg(arg='exitstatus', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='')], keywords=[])), Assign(targets=[Name(id='summary_exit_codes', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='ExitCode', ctx=Load()), attr='OK', ctx=Load()), Attribute(value=Name(id='ExitCode', ctx=Load()), attr='TESTS_FAILED', ctx=Load()), Attribute(value=Name(id='ExitCode', ctx=Load()), attr='INTERRUPTED', ctx=Load()), Attribute(value=Name(id='ExitCode', ctx=Load()), attr='USAGE_ERROR', ctx=Load()), Attribute(value=Name(id='ExitCode', ctx=Load()), attr='NO_TESTS_COLLECTED', ctx=Load())], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='exitstatus', ctx=Load()), ops=[In()], comparators=[Name(id='summary_exit_codes', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_summary', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_terminal_summary', ctx=Load()), args=[], keywords=[keyword(arg='terminalreporter', value=Name(id='self', ctx=Load())), keyword(arg='exitstatus', value=Name(id='exitstatus', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()))]))], orelse=[]), If(test=Attribute(value=Name(id='session', ctx=Load()), attr='shouldfail', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='!'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='shouldfail', ctx=Load())], keywords=[])], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[]), If(test=Compare(left=Name(id='exitstatus', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ExitCode', ctx=Load()), attr='INTERRUPTED', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_report_keyboardinterrupt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_keyboardinterrupt_memo', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Attribute(value=Name(id='session', ctx=Load()), attr='shouldstop', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='!'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='shouldstop', ctx=Load())], keywords=[])], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_stats', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])]), FunctionDef(name='pytest_terminal_summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_errors', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_failures', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_warnings', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_passes', ctx=Load()), args=[], keywords=[])), Expr(value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='short_test_summary', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='summary_warnings', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_keyboard_interrupt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_keyboardinterrupt_memo', ctx=Store())], value=Call(func=Attribute(value=Name(id='excinfo', ctx=Load()), attr='getrepr', ctx=Load()), args=[], keywords=[keyword(arg='funcargs', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_unconfigure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_keyboardinterrupt_memo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_report_keyboardinterrupt', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_report_keyboardinterrupt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='excrepr', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_keyboardinterrupt_memo', ctx=Load())), Assert(test=Compare(left=Name(id='excrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='excrepr', ctx=Load()), attr='reprcrash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='msg', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='excrepr', ctx=Load()), attr='reprcrash', ctx=Load()), attr='message', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='!'), Name(id='msg', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='KeyboardInterrupt'), ops=[In()], comparators=[Name(id='msg', ctx=Load())]), body=[If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='fulltrace', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='excrepr', ctx=Load()), attr='toterminal', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='excrepr', ctx=Load()), attr='reprcrash', ctx=Load()), attr='toterminal', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='(to show a full traceback on KeyboardInterrupt use --full-trace)')], keywords=[keyword(arg='yellow', value=Constant(value=True))]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_locationline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load())), arg(arg='fspath', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='domain', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='mkrel', args=arguments(posonlyargs=[], args=[arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='cwd_relative_nodeid', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='domain', ctx=Load()), Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='domain', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='domain', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='domain', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='[')], keywords=[])), Assign(targets=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='::')], keywords=[])), AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value='['), attr='join', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='line', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), If(test=Name(id='fspath', ctx=Load()), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='mkrel', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Attribute(value=Name(id='nodes', ctx=Load()), attr='SEP', ctx=Load())], keywords=[])])]), body=[AugAssign(target=Name(id='res', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' <- '), op=Add(), right=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load()), Call(func=Name(id='Path', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])], keywords=[])))], orelse=[])], orelse=[Assign(targets=[Name(id='res', ctx=Store())], value=Constant(value='[location]'))]), Return(value=BinOp(left=Name(id='res', ctx=Load()), op=Add(), right=Constant(value=' ')))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_getfailureheadline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='head_line', ctx=Store())], value=Attribute(value=Name(id='rep', ctx=Load()), attr='head_line', ctx=Load())), If(test=Name(id='head_line', ctx=Load()), body=[Return(value=Name(id='head_line', ctx=Load()))], orelse=[]), Return(value=Constant(value='test session'))], decorator_list=[]), FunctionDef(name='_getcrashline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Load()), attr='reprcrash', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Return(value=Subscript(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[]), slice=Slice(upper=Constant(value=50)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='getreports', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value='_pdbshown')], keywords=[]))], is_async=0)]))], decorator_list=[]), FunctionDef(name='summary_warnings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='hasopt', ctx=Load()), args=[Constant(value='w')], keywords=[]), body=[AnnAssign(target=Name(id='all_warnings', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='WarningReport', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='warnings')], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='all_warnings', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='final', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_already_displayed_warnings', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Name(id='final', ctx=Load()), body=[Assign(targets=[Name(id='warning_reports', ctx=Store())], value=Subscript(value=Name(id='all_warnings', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='_already_displayed_warnings', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='warning_reports', ctx=Store())], value=Name(id='all_warnings', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_already_displayed_warnings', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='warning_reports', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='warning_reports', ctx=Load())), body=[Return()], orelse=[]), AnnAssign(target=Name(id='reports_grouped_by_message', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='WarningReport', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='wr', ctx=Store()), iter=Name(id='warning_reports', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='reports_grouped_by_message', ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Name(id='wr', ctx=Load()), attr='message', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='wr', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='collapsed_location_report', args=arguments(posonlyargs=[], args=[arg(arg='reports', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='WarningReport', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='locations', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='w', ctx=Store()), iter=Name(id='reports', ctx=Load()), body=[Assign(targets=[Name(id='location', ctx=Store())], value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='get_location', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[])), If(test=Name(id='location', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='locations', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='locations', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=10)]), body=[Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='locations', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='counts_by_filename', ctx=Store())], value=Call(func=Name(id='Counter', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='loc', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='::'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='loc', ctx=Store()), iter=Name(id='locations', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Constant(value='{}: {} warning{}'), attr='format', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load()), IfExp(test=Compare(left=Name(id='v', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=Constant(value='s'), orelse=Constant(value=''))], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='counts_by_filename', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='title', ctx=Store())], value=IfExp(test=Name(id='final', ctx=Load()), body=Constant(value='warnings summary (final)'), orelse=Constant(value='warnings summary'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Name(id='title', ctx=Load())], keywords=[keyword(arg='yellow', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=False))])), For(target=Tuple(elts=[Name(id='message', ctx=Store()), Name(id='message_reports', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='reports_grouped_by_message', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='maybe_location', ctx=Store())], value=Call(func=Name(id='collapsed_location_report', ctx=Load()), args=[Name(id='message_reports', ctx=Load())], keywords=[])), If(test=Name(id='maybe_location', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='maybe_location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='indented', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value='  '), op=Add(), right=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='indented', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='summary_passes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='tbstyle', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='no')]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='hasopt', ctx=Load()), args=[Constant(value='P')], keywords=[]), body=[AnnAssign(target=Name(id='reports', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TestReport', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getreports', ctx=Load()), args=[Constant(value='passed')], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='reports', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='PASSES')], keywords=[])), For(target=Name(id='rep', ctx=Store()), iter=Name(id='reports', ctx=Load()), body=[If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='sections', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getfailureheadline', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='_'), Name(id='msg', ctx=Load())], keywords=[keyword(arg='green', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_outrep_summary', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_teardown_sections', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_teardown_reports', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reports', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getreports', ctx=Load()), args=[Constant(value='')], keywords=[])), Return(value=ListComp(elt=Name(id='report', ctx=Load()), generators=[comprehension(target=Name(id='report', ctx=Store()), iter=Name(id='reports', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='teardown')]), Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Name(id='nodeid', ctx=Load())])])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TestReport', ctx=Load()), ctx=Load())), FunctionDef(name='_handle_teardown_sections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='report', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_teardown_reports', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_teardown_sections', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_teardown_sections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rep', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='showcapture', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='showcapture', ctx=Load())), If(test=Compare(left=Name(id='showcapture', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Return()], orelse=[]), For(target=Tuple(elts=[Name(id='secname', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='rep', ctx=Load()), attr='sections', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='showcapture', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='showcapture', ctx=Load()), ops=[NotIn()], comparators=[Name(id='secname', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=Compare(left=Constant(value='teardown'), ops=[In()], comparators=[Name(id='secname', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='-'), Name(id='secname', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='summary_failures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='tbstyle', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='no')]), body=[AnnAssign(target=Name(id='reports', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BaseReport', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getreports', ctx=Load()), args=[Constant(value='failed')], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='reports', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='FAILURES')], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='tbstyle', ctx=Load()), ops=[Eq()], comparators=[Constant(value='line')]), body=[For(target=Name(id='rep', ctx=Store()), iter=Name(id='reports', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getcrashline', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='rep', ctx=Store()), iter=Name(id='reports', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getfailureheadline', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='_'), Name(id='msg', ctx=Load())], keywords=[keyword(arg='red', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_outrep_summary', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_teardown_sections', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='summary_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='tbstyle', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='no')]), body=[AnnAssign(target=Name(id='reports', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BaseReport', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getreports', ctx=Load()), args=[Constant(value='error')], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='reports', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='ERRORS')], keywords=[])), For(target=Name(id='rep', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='error'), ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getfailureheadline', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='rep', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='collect')]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='ERROR collecting '), op=Add(), right=Name(id='msg', ctx=Load())))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='ERROR at '), FormattedValue(value=Attribute(value=Name(id='rep', ctx=Load()), attr='when', ctx=Load()), conversion=-1), Constant(value=' of '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1)]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='_'), Name(id='msg', ctx=Load())], keywords=[keyword(arg='red', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_outrep_summary', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_outrep_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rep', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='toterminal', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='showcapture', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='showcapture', ctx=Load())), If(test=Compare(left=Name(id='showcapture', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Return()], orelse=[]), For(target=Tuple(elts=[Name(id='secname', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='rep', ctx=Load()), attr='sections', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='showcapture', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='all')]), Compare(left=Name(id='showcapture', ctx=Load()), ops=[NotIn()], comparators=[Name(id='secname', ctx=Load())])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='-'), Name(id='secname', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Subscript(value=Name(id='content', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='summary_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='session_duration', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_sessionstarttime', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='parts', ctx=Store()), Name(id='main_color', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_summary_stats_line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='line_parts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='display_sep', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), If(test=Name(id='display_sep', ctx=Load()), body=[Assign(targets=[Name(id='fullwidth', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='fullwidth', ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='markup', ctx=Store())], ctx=Store()), iter=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='with_markup', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(value=Name(id='markup', ctx=Load()))])), If(test=Name(id='display_sep', ctx=Load()), body=[AugAssign(target=Name(id='fullwidth', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='with_markup', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='line_parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='with_markup', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='line_parts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='main_markup', ctx=Store())], value=Dict(keys=[Name(id='main_color', ctx=Load())], values=[Constant(value=True)])), Assign(targets=[Name(id='duration', ctx=Store())], value=JoinedStr(values=[Constant(value=' in '), FormattedValue(value=Call(func=Name(id='format_session_duration', ctx=Load()), args=[Name(id='session_duration', ctx=Load())], keywords=[]), conversion=-1)])), Assign(targets=[Name(id='duration_with_markup', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='duration', ctx=Load())], keywords=[keyword(value=Name(id='main_markup', ctx=Load()))])), If(test=Name(id='display_sep', ctx=Load()), body=[AugAssign(target=Name(id='fullwidth', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='duration_with_markup', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='duration', ctx=Load())], keywords=[])))], orelse=[]), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Name(id='duration_with_markup', ctx=Load())), If(test=Name(id='display_sep', ctx=Load()), body=[Assign(targets=[Name(id='markup_for_end_sep', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Constant(value='')], keywords=[keyword(value=Name(id='main_markup', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='markup_for_end_sep', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\x1b[0m')], keywords=[]), body=[Assign(targets=[Name(id='markup_for_end_sep', ctx=Store())], value=Subscript(value=Name(id='markup_for_end_sep', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='fullwidth', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='markup_for_end_sep', ctx=Load())], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Name(id='markup_for_end_sep', ctx=Load()))], orelse=[]), If(test=Name(id='display_sep', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Name(id='msg', ctx=Load())], keywords=[keyword(arg='fullwidth', value=Name(id='fullwidth', ctx=Load())), keyword(value=Name(id='main_markup', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(value=Name(id='main_markup', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='short_test_summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='reportchars', ctx=Load())), body=[Return()], orelse=[]), FunctionDef(name='show_simple', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='stat', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Name(id='failed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='stat', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='failed', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), For(target=Name(id='rep', ctx=Store()), iter=Name(id='failed', ctx=Load()), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='_color_for_type', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='stat', ctx=Load()), Name(id='_color_for_type_default', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='_get_line_with_reprcrash_message', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='rep', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), Dict(keys=[Name(id='color', ctx=Load())], values=[Constant(value=True)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_xfailed', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xfailed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='xfailed'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='rep', ctx=Store()), iter=Name(id='xfailed', ctx=Load()), body=[Assign(targets=[Name(id='verbose_word', ctx=Store())], value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='_get_verbose_word', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='markup_word', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='verbose_word', ctx=Load())], keywords=[keyword(value=Dict(keys=[Subscript(value=Name(id='_color_for_type', ctx=Load()), slice=Constant(value='warnings'), ctx=Load())], values=[Constant(value=True)]))])), Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Name(id='_get_node_id_with_markup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), Name(id='rep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='markup_word', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='nodeid', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='reason', ctx=Store())], value=Attribute(value=Name(id='rep', ctx=Load()), attr='wasxfail', ctx=Load())), If(test=Name(id='reason', ctx=Load()), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' - '), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_xpassed', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xpassed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='xpassed'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='rep', ctx=Store()), iter=Name(id='xpassed', ctx=Load()), body=[Assign(targets=[Name(id='verbose_word', ctx=Store())], value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='_get_verbose_word', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='markup_word', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='verbose_word', ctx=Load())], keywords=[keyword(value=Dict(keys=[Subscript(value=Name(id='_color_for_type', ctx=Load()), slice=Constant(value='warnings'), ctx=Load())], values=[Constant(value=True)]))])), Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Name(id='_get_node_id_with_markup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), Name(id='rep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reason', ctx=Store())], value=Attribute(value=Name(id='rep', ctx=Load()), attr='wasxfail', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='markup_word', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='nodeid', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_skipped', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='skipped', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CollectReport', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='skipped'), List(elts=[], ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='fskips', ctx=Store())], value=IfExp(test=Name(id='skipped', ctx=Load()), body=Call(func=Name(id='_folded_skips', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load()), Name(id='skipped', ctx=Load())], keywords=[]), orelse=List(elts=[], ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='fskips', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='verbose_word', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='skipped', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='_get_verbose_word', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='markup_word', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='verbose_word', ctx=Load())], keywords=[keyword(value=Dict(keys=[Subscript(value=Name(id='_color_for_type', ctx=Load()), slice=Constant(value='warnings'), ctx=Load())], values=[Constant(value=True)]))])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='Skipped: ')), For(target=Tuple(elts=[Name(id='num', ctx=Store()), Name(id='fspath', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='reason', ctx=Store())], ctx=Store()), iter=Name(id='fskips', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='reason', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Subscript(value=Name(id='reason', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='%s [%d] %s:%d: %s'), op=Mod(), right=Tuple(elts=[Name(id='markup_word', ctx=Load()), Name(id='num', ctx=Load()), Name(id='fspath', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='reason', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='%s [%d] %s: %s'), op=Mod(), right=Tuple(elts=[Name(id='markup_word', ctx=Load()), Name(id='num', ctx=Load()), Name(id='fspath', ctx=Load()), Name(id='reason', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='REPORTCHAR_ACTIONS', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='x'), Constant(value='X'), Constant(value='f'), Constant(value='s'), Constant(value='p'), Constant(value='E')], values=[Name(id='show_xfailed', ctx=Load()), Name(id='show_xpassed', ctx=Load()), Call(func=Name(id='partial', ctx=Load()), args=[Name(id='show_simple', ctx=Load())], keywords=[keyword(arg='stat', value=Constant(value='failed'))]), Name(id='show_skipped', ctx=Load()), Call(func=Name(id='partial', ctx=Load()), args=[Name(id='show_simple', ctx=Load())], keywords=[keyword(arg='stat', value=Constant(value='passed'))]), Call(func=Name(id='partial', ctx=Load()), args=[Name(id='show_simple', ctx=Load())], keywords=[keyword(arg='stat', value=Constant(value='error'))])]), simple=1), AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='char', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='reportchars', ctx=Load()), body=[Assign(targets=[Name(id='action', ctx=Store())], value=Call(func=Attribute(value=Name(id='REPORTCHAR_ACTIONS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[])), If(test=Name(id='action', ctx=Load()), body=[Expr(value=Call(func=Name(id='action', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='short test summary info')], keywords=[keyword(arg='cyan', value=Constant(value=True)), keyword(arg='bold', value=Constant(value=True))])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_main_color', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_main_color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_known_types', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_is_last_item', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_main_color', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='_main_color', ctx=Load())), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='_known_types', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_main_color', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_known_types', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_determine_main_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='unknown_type_seen', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stats', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='failed'), ops=[In()], comparators=[Name(id='stats', ctx=Load())]), Compare(left=Constant(value='error'), ops=[In()], comparators=[Name(id='stats', ctx=Load())])]), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='red'))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='warnings'), ops=[In()], comparators=[Name(id='stats', ctx=Load())]), Compare(left=Constant(value='xpassed'), ops=[In()], comparators=[Name(id='stats', ctx=Load())]), Name(id='unknown_type_seen', ctx=Load())]), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='yellow'))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='passed'), ops=[In()], comparators=[Name(id='stats', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_is_last_item', ctx=Load()))]), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='green'))], orelse=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='yellow'))])])]), Return(value=Name(id='main_color', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_set_main_color', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='unknown_types', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='found_type', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='found_type', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='found_type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='KNOWN_TYPES', ctx=Load())]), Compare(left=Name(id='found_type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='unknown_types', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='unknown_types', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='found_type', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_known_types', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='KNOWN_TYPES', ctx=Load())], keywords=[]), op=Add(), right=Name(id='unknown_types', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_main_color', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_determine_main_color', ctx=Load()), args=[Call(func=Name(id='bool', ctx=Load()), args=[Name(id='unknown_types', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='build_summary_stats_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Build the parts used in the last summary stats line.\n\n        The summary stats line is the line shown at the end, "=== 12 passed, 2 errors in Xs===".\n\n        This function builds a list of the "parts" that make up for the text in that line, in\n        the example above it would be:\n\n            [\n                ("12 passed", {"green": True}),\n                ("2 errors", {"red": True}\n            ]\n\n        That last dict for each line is a "markup dictionary", used by TerminalWriter to\n        color output.\n\n        The final color of the line is also determined by this function, and is the second\n        element of the returned tuple.\n        ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='collectonly')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_collect_only_summary_stats_line', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_normal_summary_stats_line', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_reports_to_display', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get test/collection reports for the given status key, such as `passed` or `error`.')), Assign(targets=[Name(id='reports', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Return(value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='reports', ctx=Load()), ifs=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value='count_towards_summary'), Constant(value=True)], keywords=[])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='_build_normal_summary_stats_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='main_color', ctx=Store()), Name(id='known_types', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_main_color', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='key', ctx=Store()), iter=Name(id='known_types', ctx=Load()), body=[Assign(targets=[Name(id='reports', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_reports_to_display', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Name(id='reports', ctx=Load()), body=[Assign(targets=[Name(id='count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='reports', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='_color_for_type', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='_color_for_type_default', ctx=Load())], keywords=[])), Assign(targets=[Name(id='markup', ctx=Store())], value=Dict(keys=[Name(id='color', ctx=Load()), Constant(value='bold')], values=[Constant(value=True), Compare(left=Name(id='color', ctx=Load()), ops=[Eq()], comparators=[Name(id='main_color', ctx=Load())])])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='%d %s'), op=Mod(), right=Call(func=Name(id='pluralize', ctx=Load()), args=[Name(id='count', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Name(id='markup', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='parts', ctx=Load())), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='no tests ran'), Dict(keys=[Name(id='_color_for_type_default', ctx=Load())], values=[Constant(value=True)])], ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='parts', ctx=Load()), Name(id='main_color', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_build_collect_only_summary_stats_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='deselected', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_reports_to_display', ctx=Load()), args=[Constant(value='deselected')], keywords=[])], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_reports_to_display', ctx=Load()), args=[Constant(value='error')], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='no tests collected'), Dict(keys=[Constant(value='yellow')], values=[Constant(value=True)])], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='yellow'))], orelse=[If(test=Compare(left=Name(id='deselected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='green')), Assign(targets=[Name(id='collected_output', ctx=Store())], value=BinOp(left=Constant(value='%d %s collected'), op=Mod(), right=Call(func=Name(id='pluralize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), Constant(value='test')], keywords=[]))), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='collected_output', ctx=Load()), Dict(keys=[Name(id='main_color', ctx=Load())], values=[Constant(value=True)])], ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='all_tests_were_deselected', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), ops=[Eq()], comparators=[Name(id='deselected', ctx=Load())])), If(test=Name(id='all_tests_were_deselected', ctx=Load()), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='yellow')), Assign(targets=[Name(id='collected_output', ctx=Store())], value=JoinedStr(values=[Constant(value='no tests collected ('), FormattedValue(value=Name(id='deselected', ctx=Load()), conversion=-1), Constant(value=' deselected)')]))], orelse=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Constant(value='green')), Assign(targets=[Name(id='selected', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), op=Sub(), right=Name(id='deselected', ctx=Load()))), Assign(targets=[Name(id='collected_output', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='selected', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_numcollected', ctx=Load()), conversion=-1), Constant(value=' tests collected ('), FormattedValue(value=Name(id='deselected', ctx=Load()), conversion=-1), Constant(value=' deselected)')]))]), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='collected_output', ctx=Load()), Dict(keys=[Name(id='main_color', ctx=Load())], values=[Constant(value=True)])], ctx=Load())], ctx=Load()))])]), If(test=Name(id='errors', ctx=Load()), body=[Assign(targets=[Name(id='main_color', ctx=Store())], value=Subscript(value=Name(id='_color_for_type', ctx=Load()), slice=Constant(value='error'), ctx=Load())), AugAssign(target=Name(id='parts', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[BinOp(left=Constant(value='%d %s'), op=Mod(), right=Call(func=Name(id='pluralize', ctx=Load()), args=[Name(id='errors', ctx=Load()), Constant(value='error')], keywords=[])), Dict(keys=[Name(id='main_color', ctx=Load())], values=[Constant(value=True)])], ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='parts', ctx=Load()), Name(id='main_color', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='_get_node_id_with_markup', args=arguments(posonlyargs=[], args=[arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='rep', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='cwd_relative_nodeid', ctx=Load()), args=[Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Starred(value=Name(id='parts', ctx=Store()), ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[])), If(test=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='parts_markup', ctx=Store())], value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='markup', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='::'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])], keywords=[keyword(arg='bold', value=Constant(value=True))])), Return(value=BinOp(left=BinOp(left=Name(id='path', ctx=Load()), op=Add(), right=Constant(value='::')), op=Add(), right=Name(id='parts_markup', ctx=Load())))], orelse=[Return(value=Name(id='path', ctx=Load()))])], decorator_list=[]), FunctionDef(name='_format_trimmed', args=arguments(posonlyargs=[], args=[arg(arg='format', annotation=Name(id='str', ctx=Load())), arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Format msg into format, ellipsizing it if doesn't fit in available_width.\n\n    Returns None if even the ellipsis can't fit.\n    ")), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n')], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ellipsis', ctx=Store())], value=Constant(value='...')), Assign(targets=[Name(id='format_width', ctx=Store())], value=Call(func=Name(id='wcswidth', ctx=Load()), args=[Call(func=Attribute(value=Name(id='format', ctx=Load()), attr='format', ctx=Load()), args=[Constant(value='')], keywords=[])], keywords=[])), If(test=Compare(left=BinOp(left=Name(id='format_width', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ellipsis', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Name(id='available_width', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='format_width', ctx=Load()), op=Add(), right=Call(func=Name(id='wcswidth', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Name(id='available_width', ctx=Load())]), body=[AugAssign(target=Name(id='available_width', ctx=Store()), op=Sub(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ellipsis', ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(upper=Name(id='available_width', ctx=Load())), ctx=Load())), While(test=Compare(left=BinOp(left=Name(id='format_width', ctx=Load()), op=Add(), right=Call(func=Name(id='wcswidth', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Name(id='available_width', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Name(id='ellipsis', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='format', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_line_with_reprcrash_message', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='rep', annotation=Name(id='BaseReport', ctx=Load())), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load())), arg(arg='word_markup', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get summary line for a report, trying to add reprcrash message.')), Assign(targets=[Name(id='verbose_word', ctx=Store())], value=Call(func=Attribute(value=Name(id='rep', ctx=Load()), attr='_get_verbose_word', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='verbose_word', ctx=Load())], keywords=[keyword(value=Name(id='word_markup', ctx=Load()))])), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='_get_node_id_with_markup', ctx=Load()), args=[Name(id='tw', ctx=Load()), Name(id='config', ctx=Load()), Name(id='rep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='word', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='node', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='line_width', ctx=Store())], value=Call(func=Name(id='wcswidth', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Load()), attr='reprcrash', ctx=Load()), attr='message', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='running_on_ci', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='available_width', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='tw', ctx=Load()), attr='fullwidth', ctx=Load()), op=Sub(), right=Name(id='line_width', ctx=Load()))), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='_format_trimmed', ctx=Load()), args=[Constant(value=' - {}'), Name(id='msg', ctx=Load()), Name(id='available_width', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value=' - '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1)]))]), If(test=Compare(left=Name(id='msg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='line', ctx=Store()), op=Add(), value=Name(id='msg', ctx=Load()))], orelse=[])], finalbody=[]), Return(value=Name(id='line', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_folded_skips', args=arguments(posonlyargs=[], args=[arg(arg='startpath', annotation=Name(id='Path', ctx=Load())), arg(arg='skipped', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='CollectReport', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='d', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CollectReport', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='event', ctx=Store()), iter=Name(id='skipped', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), msg=Tuple(elts=[Name(id='event', ctx=Load()), Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load())], ctx=Load())), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), msg=Tuple(elts=[Name(id='event', ctx=Load()), Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='fspath', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='reason', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='longrepr', ctx=Load())), Assign(targets=[Name(id='fspath', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Name(id='startpath', ctx=Load()), Call(func=Name(id='Path', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='keywords', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='event', ctx=Load()), Constant(value='keywords'), Dict(keys=[], values=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='setup')]), Compare(left=Constant(value='skip'), ops=[In()], comparators=[Name(id='keywords', ctx=Load())]), Compare(left=Constant(value='pytestmark'), ops=[NotIn()], comparators=[Name(id='keywords', ctx=Load())])]), body=[AnnAssign(target=Name(id='key', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Name(id='fspath', ctx=Load()), Constant(value=None), Name(id='reason', ctx=Load())], ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='fspath', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='reason', ctx=Load())], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='key', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='values', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='events', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='events', ctx=Load())], keywords=[]), Starred(value=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='values', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_color_for_type', ctx=Store())], value=Dict(keys=[Constant(value='failed'), Constant(value='error'), Constant(value='warnings'), Constant(value='passed')], values=[Constant(value='red'), Constant(value='red'), Constant(value='yellow'), Constant(value='green')])), Assign(targets=[Name(id='_color_for_type_default', ctx=Store())], value=Constant(value='yellow')), FunctionDef(name='pluralize', args=arguments(posonlyargs=[], args=[arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='noun', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='noun', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Constant(value='error'), Constant(value='warnings'), Constant(value='test')], ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='count', ctx=Load()), Name(id='noun', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='noun', ctx=Store())], value=Call(func=Attribute(value=Name(id='noun', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='warnings'), Constant(value='warning')], keywords=[])), Return(value=Tuple(elts=[Name(id='count', ctx=Load()), IfExp(test=Compare(left=Name(id='count', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=BinOp(left=Name(id='noun', ctx=Load()), op=Add(), right=Constant(value='s')), orelse=Name(id='noun', ctx=Load()))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_plugin_nameversions', args=arguments(posonlyargs=[], args=[arg(arg='plugininfo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='values', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='plugin', ctx=Store()), Name(id='dist', ctx=Store())], ctx=Store()), iter=Name(id='plugininfo', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{dist.project_name}-{dist.version}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='dist', value=Name(id='dist', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pytest-')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=7)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='values', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='values', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='format_session_duration', args=arguments(posonlyargs=[], args=[arg(arg='seconds', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format the given seconds in a human readable manner to show in the final summary.')), If(test=Compare(left=Name(id='seconds', ctx=Load()), ops=[Lt()], comparators=[Constant(value=60)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='seconds', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='s')]))], orelse=[Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='seconds', ctx=Load())], keywords=[]))])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='seconds', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')])), Constant(value='s ('), FormattedValue(value=Name(id='dt', ctx=Load()), conversion=-1), Constant(value=')')]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_raw_skip_reason', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the reason string of a skip/xfail/xpass test report.\n\n    The string is just the part given by the user.\n    ')), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='report', ctx=Load()), attr='wasxfail', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='reason', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='reason: ')], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Subscript(value=Name(id='reason', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='reason: ')], keywords=[])), ctx=Load()))], orelse=[]), Return(value=Name(id='reason', ctx=Load()))], orelse=[Assert(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='reason', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='reason', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Skipped: ')], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Subscript(value=Name(id='reason', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='Skipped: ')], keywords=[])), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='reason', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Skipped')]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Constant(value=''))], orelse=[])]), Return(value=Name(id='reason', ctx=Load()))])], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])