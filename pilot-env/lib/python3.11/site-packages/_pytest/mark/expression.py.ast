Module(body=[Expr(value=Constant(value="Evaluate match expressions, as used by `-k` and `-m`.\n\nThe grammar is:\n\nexpression: expr? EOF\nexpr:       and_expr ('or' and_expr)*\nand_expr:   not_expr ('and' not_expr)*\nnot_expr:   'not' not_expr | '(' expr ')' | ident\nident:      (\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+\n\nThe semantics are:\n\n- Empty expression evaluates to False.\n- ident evaluates to True of False according to a provided matcher function.\n- or/and/not evaluate according to the usual boolean semantics.\n")), Import(names=[alias(name='ast')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='enum')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Assign(targets=[Name(id='astNameConstant', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='Constant', ctx=Load()))], orelse=[Assign(targets=[Name(id='astNameConstant', ctx=Store())], value=Attribute(value=Name(id='ast', ctx=Load()), attr='NameConstant', ctx=Load()))]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Expression'), Constant(value='ParseError')], ctx=Load())), ClassDef(name='TokenType', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='LPAREN', ctx=Store())], value=Constant(value='left parenthesis')), Assign(targets=[Name(id='RPAREN', ctx=Store())], value=Constant(value='right parenthesis')), Assign(targets=[Name(id='OR', ctx=Store())], value=Constant(value='or')), Assign(targets=[Name(id='AND', ctx=Store())], value=Constant(value='and')), Assign(targets=[Name(id='NOT', ctx=Store())], value=Constant(value='not')), Assign(targets=[Name(id='IDENT', ctx=Store())], value=Constant(value='identifier')), Assign(targets=[Name(id='EOF', ctx=Store())], value=Constant(value='end of input'))], decorator_list=[]), ClassDef(name='Token', bases=[], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='type'), Constant(value='value'), Constant(value='pos')], ctx=Load())), AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='TokenType', ctx=Load()), simple=1), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='pos', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), ClassDef(name='ParseError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The expression contains invalid syntax.\n\n    :param column: The column in the line where the error occurred (1-based).\n    :param message: A description of the error.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='column', annotation=Name(id='int', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='column', ctx=Store())], value=Name(id='column', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='at column '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='column', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Scanner', bases=[], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='tokens'), Constant(value='current')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lex', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='lex', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='input', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=' '), Constant(value='\t')], ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='input', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='(')]), body=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='LPAREN', ctx=Load()), Constant(value='('), Name(id='pos', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='input', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=')')]), body=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='RPAREN', ctx=Load()), Constant(value=')'), Name(id='pos', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='(:?\\w|:|\\+|-|\\.|\\[|\\]|\\\\|/)+'), Subscript(value=Name(id='input', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load())), ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='or')]), body=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='OR', ctx=Load()), Name(id='value', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])))], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='and')]), body=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='AND', ctx=Load()), Name(id='value', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])))], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='not')]), body=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='NOT', ctx=Load()), Name(id='value', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='IDENT', ctx=Load()), Name(id='value', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])))])])]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), JoinedStr(values=[Constant(value='unexpected character "'), FormattedValue(value=Subscript(value=Name(id='input', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), conversion=-1), Constant(value='"')])], keywords=[]))])])])])], orelse=[]), Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='EOF', ctx=Load()), Constant(value=''), Name(id='pos', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load())), FunctionDef(name='accept', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type', annotation=Name(id='TokenType', ctx=Load()))], kwonlyargs=[arg(arg='reject', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Is()], comparators=[Name(id='type', ctx=Load())]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='type', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='EOF', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='token', ctx=Load()))], orelse=[]), If(test=Name(id='reject', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reject', ctx=Load()), args=[Tuple(elts=[Name(id='type', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load())), FunctionDef(name='reject', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expected', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='TokenType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Attribute(value=Constant(value='expected {}; got {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' OR '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='type', ctx=Load()), attr='value', ctx=Load()), generators=[comprehension(target=Name(id='type', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), attr='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='IDENT_PREFIX', ctx=Store())], value=Constant(value='$')), FunctionDef(name='expression', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='Scanner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='EOF', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='ret', ctx=Store()), annotation=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load()), value=Call(func=Name(id='astNameConstant', ctx=Load()), args=[Constant(value=False)], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='EOF', ctx=Load())], keywords=[keyword(arg='reject', value=Constant(value=True))]))]), Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='fix_missing_locations', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Expression', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='Expression', ctx=Load())), FunctionDef(name='expr', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='Scanner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='and_expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), While(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='OR', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='and_expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Or', ctx=Load()), args=[], keywords=[]), List(elts=[Name(id='ret', ctx=Load()), Name(id='rhs', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), FunctionDef(name='and_expr', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='Scanner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='not_expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), While(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='AND', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='not_expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='BoolOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='And', ctx=Load()), args=[], keywords=[]), List(elts=[Name(id='ret', ctx=Load()), Name(id='rhs', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), FunctionDef(name='not_expr', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='Scanner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='NOT', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='UnaryOp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Not', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='not_expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='LPAREN', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='expr', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='RPAREN', ctx=Load())], keywords=[keyword(arg='reject', value=Constant(value=True))])), Return(value=Name(id='ret', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ident', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='accept', ctx=Load()), args=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='IDENT', ctx=Load())], keywords=[])), If(test=Name(id='ident', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load()), args=[BinOp(left=Name(id='IDENT_PREFIX', ctx=Load()), op=Add(), right=Attribute(value=Name(id='ident', ctx=Load()), attr='value', ctx=Load())), Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='Load', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='reject', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='TokenType', ctx=Load()), attr='NOT', ctx=Load()), Attribute(value=Name(id='TokenType', ctx=Load()), attr='LPAREN', ctx=Load()), Attribute(value=Name(id='TokenType', ctx=Load()), attr='IDENT', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='ast', ctx=Load()), attr='expr', ctx=Load())), ClassDef(name='MatcherAdapter', bases=[Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Adapts a matcher function to a locals mapping as required by eval().')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='matcher', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Store())], value=Name(id='matcher', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Load()), args=[Subscript(value=Name(id='key', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='IDENT_PREFIX', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='Expression', bases=[], keywords=[], body=[Expr(value=Constant(value='A compiled match expression as used by -k and -m.\n\n    The expression can be evaluated against different matchers.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='code')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Store())], value=Name(id='code', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compile a match expression.\n\n        :param input: The input expression - one line.\n        ')), Assign(targets=[Name(id='astexpr', ctx=Store())], value=Call(func=Name(id='expression', ctx=Load()), args=[Call(func=Name(id='Scanner', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='code', ctx=Store()), annotation=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()), value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='astexpr', ctx=Load())], keywords=[keyword(arg='filename', value=Constant(value='<pytest match expression>')), keyword(arg='mode', value=Constant(value='eval'))]), simple=1), Return(value=Call(func=Name(id='Expression', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Expression')), FunctionDef(name='evaluate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='matcher', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Evaluate the match expression.\n\n        :param matcher:\n            Given an identifier, should return whether it matches or not.\n            Should be prepared to handle arbitrary strings as input.\n\n        :returns: Whether the expression matches or not.\n        ')), AnnAssign(target=Name(id='ret', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Name(id='eval', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), Dict(keys=[Constant(value='__builtins__')], values=[Dict(keys=[], values=[])]), Call(func=Name(id='MatcherAdapter', ctx=Load()), args=[Name(id='matcher', ctx=Load())], keywords=[])], keywords=[]), simple=1), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[])], type_ignores=[])