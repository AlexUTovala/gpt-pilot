Module(body=[ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest.cacheprovider', names=[alias(name='Cache')], level=0)], orelse=[]), Assign(targets=[Name(id='STEPWISE_CACHE_DIR', ctx=Store())], value=Constant(value='cache/stepwise')), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--sw'), Constant(value='--stepwise')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='stepwise')), keyword(arg='help', value=Constant(value='Exit on test failure and continue from last failing test next time'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--sw-skip'), Constant(value='--stepwise-skip')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='stepwise_skip')), keyword(arg='help', value=Constant(value='Ignore the first failing test but stop on the next failing test. Implicitly enables --stepwise.'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='stepwise_skip', ctx=Load()), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='stepwise', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='stepwise')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='StepwisePlugin', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]), Constant(value='stepwiseplugin')], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='stepwise')], keywords=[])), body=[Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), Constant(value='workerinput')], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='STEPWISE_CACHE_DIR', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), ClassDef(name='StepwisePlugin', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Session', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Store())], value=Constant(value='')), Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Store()), annotation=Name(id='Cache', ctx=Load()), value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='STEPWISE_CACHE_DIR', ctx=Load()), Constant(value=None)], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='skip', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='stepwise_skip')], keywords=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store())], value=Name(id='session', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collection_modifyitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='items', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Store())], value=Constant(value='no previously failed tests, not skipping.')), Return()], orelse=[]), Assign(targets=[Name(id='failed_index', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Assign(targets=[Name(id='failed_index', ctx=Store())], value=Name(id='index', ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='failed_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Store())], value=Constant(value='previously failed test not found, not skipping.'))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Store())], value=JoinedStr(values=[Constant(value='skipping '), FormattedValue(value=Name(id='failed_index', ctx=Load()), conversion=-1), Constant(value=' already passed items.')])), Assign(targets=[Name(id='deselected', ctx=Store())], value=Subscript(value=Name(id='items', ctx=Load()), slice=Slice(upper=Name(id='failed_index', ctx=Load())), ctx=Load())), Delete(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(upper=Name(id='failed_index', ctx=Load())), ctx=Del())]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_deselected', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Name(id='deselected', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='skip', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='shouldstop', ctx=Store())], value=Constant(value='Test failed, continuing from this test next run.'))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_report_collectionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='verbose')], keywords=[]), ops=[GtE()], comparators=[Constant(value=0)]), Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Load())]), body=[Return(value=JoinedStr(values=[Constant(value='stepwise: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='report_status', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), Constant(value='workerinput')], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='STEPWISE_CACHE_DIR', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])