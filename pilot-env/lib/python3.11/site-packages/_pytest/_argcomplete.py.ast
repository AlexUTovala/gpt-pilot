Module(body=[Expr(value=Constant(value='Allow bash-completion for argparse with argcomplete if installed.\n\nNeeds argcomplete>=0.5.6 for python 3.2/3.3 (older versions fail\nto find the magic string, so _ARGCOMPLETE env. var is never set, and\nthis does not need special code).\n\nFunction try_argcomplete(parser) should be called directly before\nthe call to ArgumentParser.parse_args().\n\nThe filescompleter is what you normally would use on the positional\narguments specification, in order to get "dirname/" after "dirn<TAB>"\ninstead of the default "dirname ":\n\n   optparser.add_argument(Config._file_or_dir, nargs=\'*\').completer=filescompleter\n\nOther, application specific, completers should go in the file\ndoing the add_argument calls as they need to be specified as .completer\nattributes as well. (If argcomplete is not installed, the function the\nattribute points to will not be used).\n\nSPEEDUP\n=======\n\nThe generic argcomplete script for bash-completion\n(/etc/bash_completion.d/python-argcomplete.sh)\nuses a python program to determine startup script generated by pip.\nYou can speed up completion somewhat by changing this script to include\n  # PYTHON_ARGCOMPLETE_OK\nso the python-argcomplete-check-easy-install-script does not\nneed to be called to find the entry point of the code and see if that is\nmarked  with PYTHON_ARGCOMPLETE_OK.\n\nINSTALL/DEBUGGING\n=================\n\nTo include this support in another application that has setup.py generated\nscripts:\n\n- Add the line:\n    # PYTHON_ARGCOMPLETE_OK\n  near the top of the main python entry point.\n\n- Include in the file calling parse_args():\n    from _argcomplete import try_argcomplete, filescompleter\n  Call try_argcomplete just before parse_args(), and optionally add\n  filescompleter to the positional arguments\' add_argument().\n\nIf things do not work right away:\n\n- Switch on argcomplete debugging with (also helpful when doing custom\n  completers):\n    export _ARC_DEBUG=1\n\n- Run:\n    python-argcomplete-check-easy-install-script $(which appname)\n    echo $?\n  will echo 0 if the magic line has been found, 1 if not.\n\n- Sometimes it helps to find early on errors using:\n    _ARGCOMPLETE=1 _ARC_DEBUG=1 appname\n  which should throw a KeyError: \'COMPLINE\' (which is properly set by the\n  global argcomplete script).\n')), Import(names=[alias(name='argparse')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='glob', names=[alias(name='glob')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ClassDef(name='FastFilesCompleter', bases=[], keywords=[], body=[Expr(value=Constant(value='Fast file completer class.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='directories', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='directories', ctx=Store())], value=Name(id='directories', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='prefix_dir', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='prefix_dir', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='completion', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='globbed', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='*'), ops=[NotIn()], comparators=[Name(id='prefix', ctx=Load())]), Compare(left=Constant(value='?'), ops=[NotIn()], comparators=[Name(id='prefix', ctx=Load())])]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), Compare(left=Subscript(value=Name(id='prefix', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='globbed', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='glob', ctx=Load()), args=[BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Constant(value='.*'))], keywords=[])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='prefix', ctx=Store()), op=Add(), value=Constant(value='*'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='globbed', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='glob', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='globbed', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=Constant(value='/'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='completion', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=Slice(lower=Name(id='prefix_dir', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='completion', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='_ARGCOMPLETE')], keywords=[]), body=[Try(body=[Import(names=[alias(name='argcomplete.completers')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))])], orelse=[], finalbody=[]), AnnAssign(target=Name(id='filescompleter', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FastFilesCompleter', ctx=Load()), ctx=Load()), value=Call(func=Name(id='FastFilesCompleter', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='try_argcomplete', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='argcomplete', ctx=Load()), attr='autocomplete', ctx=Load()), args=[Name(id='parser', ctx=Load())], keywords=[keyword(arg='always_complete_options', value=Constant(value=False))]))], decorator_list=[], returns=Constant(value=None))], orelse=[FunctionDef(name='try_argcomplete', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='filescompleter', ctx=Store())], value=Constant(value=None))])], type_ignores=[])