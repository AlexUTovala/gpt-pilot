Module(body=[Expr(value=Constant(value='Discover and run std-library "unittest" style tests.')), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='types')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='_pytest._code')]), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest.compat', names=[alias(name='getimfunc')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='is_async_function')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='exit')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='xfail')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Class')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Function')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Module')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='CallInfo')], level=0), ImportFrom(module='_pytest.scope', names=[alias(name='Scope')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='unittest')]), Import(names=[alias(name='twisted.trial.unittest')]), Assign(targets=[Name(id='_SysExcInfoType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[]), FunctionDef(name='pytest_pycollect_makeitem', args=arguments(posonlyargs=[], args=[arg(arg='collector', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Module', ctx=Load()), Name(id='Class', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='ut', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='unittest'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='ut', ctx=Load()), attr='TestCase', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), AnnAssign(target=Name(id='item', ctx=Store()), annotation=Name(id='UnitTestCase', ctx=Load()), value=Call(func=Attribute(value=Name(id='UnitTestCase', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='collector', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='obj', value=Name(id='obj', ctx=Load()))]), simple=1), Return(value=Name(id='item', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='UnitTestCase'), ctx=Load())), ClassDef(name='UnitTestCase', bases=[Name(id='Class', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='nofuncargs', ctx=Store())], value=Constant(value=True)), FunctionDef(name='collect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='unittest', names=[alias(name='TestLoader')], level=0), Assign(targets=[Name(id='cls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__test__'), Constant(value=True)], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='skipped', ctx=Store())], value=Call(func=Name(id='_is_skipped', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='skipped', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_inject_setup_teardown_fixtures', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_inject_setup_class_fixture', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='_fixturemanager', ctx=Load()), attr='parsefactories', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='unittest', value=Constant(value=True))])), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='TestLoader', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='foundsomething', ctx=Store())], value=Constant(value=False)), For(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='getTestCaseNames', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value='__test__'), Constant(value=True)], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='funcobj', ctx=Store())], value=Call(func=Name(id='getimfunc', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='TestCaseFunction', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='callobj', value=Name(id='funcobj', ctx=Load()))]))), Assign(targets=[Name(id='foundsomething', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='foundsomething', ctx=Load())), body=[Assign(targets=[Name(id='runtest', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load()), Constant(value='runTest'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='runtest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ut', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='twisted.trial.unittest'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='ut', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='runtest', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='ut', ctx=Load()), attr='TestCase', ctx=Load()), attr='runTest', ctx=Load())])]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='TestCaseFunction', ctx=Load()), attr='from_parent', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='runTest'))])))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Item', ctx=Load()), Name(id='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_inject_setup_teardown_fixtures', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cls', annotation=Name(id='type', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Injects a hidden auto-use fixture to invoke setUpClass/setup_method and corresponding\n        teardown functions (#517).')), Assign(targets=[Name(id='class_fixture', ctx=Store())], value=Call(func=Name(id='_make_xunit_fixture', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='setUpClass'), Constant(value='tearDownClass'), Constant(value='doClassCleanups')], keywords=[keyword(arg='scope', value=Attribute(value=Name(id='Scope', ctx=Load()), attr='Class', ctx=Load())), keyword(arg='pass_self', value=Constant(value=False))])), If(test=Name(id='class_fixture', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__pytest_class_setup', ctx=Store())], value=Name(id='class_fixture', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='method_fixture', ctx=Store())], value=Call(func=Name(id='_make_xunit_fixture', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='setup_method'), Constant(value='teardown_method'), Constant(value=None)], keywords=[keyword(arg='scope', value=Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())), keyword(arg='pass_self', value=Constant(value=True))])), If(test=Name(id='method_fixture', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__pytest_method_setup', ctx=Store())], value=Name(id='method_fixture', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_make_xunit_fixture', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='type', ctx=Load())), arg(arg='setup_name', annotation=Name(id='str', ctx=Load())), arg(arg='teardown_name', annotation=Name(id='str', ctx=Load())), arg(arg='cleanup_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='scope', annotation=Name(id='Scope', ctx=Load())), arg(arg='pass_self', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='setup', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='setup_name', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='teardown', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='teardown_name', ctx=Load()), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='setup', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='teardown', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Name(id='cleanup_name', ctx=Load()), body=[Assign(targets=[Name(id='cleanup', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='cleanup_name', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))], keywords=[]))], orelse=[FunctionDef(name='cleanup', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])]), FunctionDef(name='fixture', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_is_skipped', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__unittest_skip_why__', ctx=Load())), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='skip', ctx=Load()), attr='Exception', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[keyword(arg='_use_item_location', value=Constant(value=True))]))], orelse=[]), If(test=Compare(left=Name(id='setup', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[If(test=Name(id='pass_self', ctx=Load()), body=[Expr(value=Call(func=Name(id='setup', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='request', ctx=Load()), attr='function', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='setup', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=Name(id='pass_self', ctx=Load()), body=[Expr(value=Call(func=Name(id='cleanup', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='cleanup', ctx=Load()), args=[], keywords=[]))]), Raise()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Yield()), Try(body=[If(test=Compare(left=Name(id='teardown', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Name(id='pass_self', ctx=Load()), body=[Expr(value=Call(func=Name(id='teardown', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='request', ctx=Load()), attr='function', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='teardown', ctx=Load()), args=[], keywords=[]))])], orelse=[])], handlers=[], orelse=[], finalbody=[If(test=Name(id='pass_self', ctx=Load()), body=[Expr(value=Call(func=Name(id='cleanup', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='cleanup', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Attribute(value=Name(id='scope', ctx=Load()), attr='value', ctx=Load())), keyword(arg='autouse', value=Constant(value=True)), keyword(arg='name', value=JoinedStr(values=[Constant(value='_unittest_'), FormattedValue(value=Name(id='setup_name', ctx=Load()), conversion=-1), Constant(value='_fixture_'), FormattedValue(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__qualname__', ctx=Load()), conversion=-1)]))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), Return(value=Name(id='fixture', ctx=Load()))], decorator_list=[]), ClassDef(name='TestCaseFunction', bases=[Name(id='Function', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='nofuncargs', ctx=Store())], value=Constant(value=True)), AnnAssign(target=Name(id='_excinfo', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_testcase', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='unittest.TestCase'), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='_getobj', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), attr='obj', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='originalname', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_explicit_tearDown', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), attr='obj', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_request')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_request', ctx=Load()), attr='_fillfixtures', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='teardown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_explicit_tearDown', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_explicit_tearDown', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_explicit_tearDown', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='startTest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_addexcinfo', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rawexcinfo', annotation=Constant(value='_SysExcInfoType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawexcinfo', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rawexcinfo', ctx=Load()), Constant(value='_rawexcinfo'), Name(id='rawexcinfo', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), attr='from_exc_info', ctx=Load()), args=[Name(id='rawexcinfo', ctx=Load())], keywords=[])), Expr(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load())), Expr(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='traceback', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Try(body=[Try(body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Starred(value=Name(id='rawexcinfo', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='NOTE: Incompatible Exception Representation, displaying natively:\n\n')], keywords=[])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='fail', ctx=Load()), attr='Exception', ctx=Load()), Name(id='KeyboardInterrupt', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[BinOp(left=Constant(value='ERROR: Unknown Incompatible Exception representation:\n%r'), op=Mod(), right=Tuple(elts=[Name(id='rawexcinfo', ctx=Load())], ctx=Load()))], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[], finalbody=[])], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Attribute(value=Name(id='fail', ctx=Load()), attr='Exception', ctx=Load()), body=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='_excinfo'), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='rawexcinfo', annotation=Constant(value='_SysExcInfoType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='rawexcinfo', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='exit', ctx=Load()), attr='Exception', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='exit', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='rawexcinfo', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='msg', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_addexcinfo', ctx=Load()), args=[Name(id='rawexcinfo', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addFailure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='rawexcinfo', annotation=Constant(value='_SysExcInfoType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_addexcinfo', ctx=Load()), args=[Name(id='rawexcinfo', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addSkip', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='reason', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='skip', ctx=Load()), attr='Exception', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[keyword(arg='_use_item_location', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='skip', ctx=Load()), attr='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_addexcinfo', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addExpectedFailure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='rawexcinfo', annotation=Constant(value='_SysExcInfoType')), arg(arg='reason', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Try(body=[Expr(value=Call(func=Name(id='xfail', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='xfail', ctx=Load()), attr='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_addexcinfo', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addUnexpectedSuccess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='reason', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='twisted.trial.unittest.Todo'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Unexpected success')), If(test=Name(id='reason', ctx=Load()), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=': '), FormattedValue(value=Attribute(value=Name(id='reason', ctx=Load()), attr='reason', ctx=Load()), conversion=-1)]))], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='fail', ctx=Load()), attr='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_addexcinfo', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addSuccess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='stopTest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addDuration', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testcase', annotation=Constant(value='unittest.TestCase')), arg(arg='elapsed', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='runtest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_pytest.debugging', names=[alias(name='maybe_wrap_pytest_function_for_tracing')], level=0), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Name(id='maybe_wrap_pytest_function_for_tracing', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='is_async_function', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Name(id='self', ctx=Load()))]))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), Name(id='UnitTestCase', ctx=Load())], keywords=[])), Assign(targets=[Name(id='skipped', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='_is_skipped', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[]), Call(func=Name(id='_is_skipped', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), attr='obj', ctx=Load())], keywords=[])])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='usepdb')], keywords=[]), UnaryOp(op=Not(), operand=Name(id='skipped', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_explicit_tearDown', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), attr='tearDown', ctx=Load())), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), Constant(value='tearDown'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Name(id='self', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='delattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_testcase', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_traceback_filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='traceback', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_traceback_filter', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ntraceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='frame', ctx=Load()), attr='f_globals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__unittest')], keywords=[])))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ntraceback', ctx=Load())), body=[Assign(targets=[Name(id='ntraceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], orelse=[]), Return(value=Name(id='ntraceback', ctx=Load()))], decorator_list=[], returns=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='Traceback', ctx=Load()))], decorator_list=[]), FunctionDef(name='pytest_runtest_makereport', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='call', annotation=Subscript(value=Name(id='CallInfo', ctx=Load()), slice=Constant(value=None), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='TestCaseFunction', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='item', ctx=Load()), attr='_excinfo', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='_excinfo', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Try(body=[Delete(targets=[Attribute(value=Name(id='call', ctx=Load()), attr='result', ctx=Del())])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='unittest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unittest')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='unittest', ctx=Load()), Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())), Assign(targets=[Name(id='call2', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='CallInfo', ctx=Load()), slice=Constant(value=None), ctx=Load()), attr='from_call', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='skip', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load())], keywords=[])], keywords=[])), Attribute(value=Name(id='call', ctx=Load()), attr='when', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Store())], value=Attribute(value=Name(id='call2', ctx=Load()), attr='excinfo', ctx=Load()))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_protocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='TestCaseFunction', ctx=Load())], keywords=[]), Compare(left=Constant(value='twisted.trial.unittest'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())])]), body=[AnnAssign(target=Name(id='ut', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='twisted.python.failure'), ctx=Load()), simple=1), Assign(targets=[Name(id='Failure__init__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ut', ctx=Load()), attr='Failure', ctx=Load()), attr='__init__', ctx=Load())), Expr(value=Call(func=Name(id='check_testcase_implements_trial_reporter', ctx=Load()), args=[], keywords=[])), FunctionDef(name='excstore', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_value'), arg(arg='exc_type'), arg(arg='exc_tb'), arg(arg='captureVars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='exc_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rawexcinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='exc_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exc_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc_value', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rawexcinfo', ctx=Store())], value=Tuple(elts=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='exc_tb', ctx=Load())], ctx=Load()))]), Try(body=[Expr(value=Call(func=Name(id='Failure__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='exc_type', ctx=Load()), Name(id='exc_tb', ctx=Load())], keywords=[keyword(arg='captureVars', value=Name(id='captureVars', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Expr(value=Call(func=Name(id='Failure__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='exc_type', ctx=Load()), Name(id='exc_tb', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Attribute(value=Attribute(value=Name(id='ut', ctx=Load()), attr='Failure', ctx=Load()), attr='__init__', ctx=Store())], value=Name(id='excstore', ctx=Load())), Expr(value=Yield()), Assign(targets=[Attribute(value=Attribute(value=Name(id='ut', ctx=Load()), attr='Failure', ctx=Load()), attr='__init__', ctx=Store())], value=Name(id='Failure__init__', ctx=Load()))], orelse=[Expr(value=Yield())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='check_testcase_implements_trial_reporter', args=arguments(posonlyargs=[], args=[arg(arg='done', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Name(id='done', ctx=Load()), body=[Return()], orelse=[]), ImportFrom(module='zope.interface', names=[alias(name='classImplements')], level=0), ImportFrom(module='twisted.trial.itrial', names=[alias(name='IReporter')], level=0), Expr(value=Call(func=Name(id='classImplements', ctx=Load()), args=[Name(id='TestCaseFunction', ctx=Load()), Name(id='IReporter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='done', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_is_skipped', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if the given object has been marked with @unittest.skip.')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__unittest_skip__'), Constant(value=False)], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])