Module(body=[Expr(value=Constant(value='Python version compatibility code.')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='enum')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='inspect', names=[alias(name='Parameter')], level=0), ImportFrom(module='inspect', names=[alias(name='signature')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), Import(names=[alias(name='py')]), If(test=Constant(value=True), body=[ImportFrom(module='typing', names=[alias(name='overload', asname='overload')], level=0)], orelse=[]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Final')], level=0)], orelse=[]), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), Assign(targets=[Name(id='_S', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_S')], keywords=[])), Assign(targets=[Name(id='LEGACY_PATH', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='py', ctx=Load()), attr='path', ctx=Load()), attr='local', ctx=Load())), FunctionDef(name='legacy_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Internal wrapper to prepare lazy proxies for legacy_path instances')), Return(value=Call(func=Name(id='LEGACY_PATH', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), ClassDef(name='NotSetType', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='token', ctx=Store())], value=Constant(value=0))], decorator_list=[]), AnnAssign(target=Name(id='NOTSET', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Attribute(value=Name(id='NotSetType', ctx=Load()), attr='token', ctx=Load()), simple=1), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Import(names=[alias(name='importlib.metadata')]), Assign(targets=[Name(id='importlib_metadata', ctx=Store())], value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()))], orelse=[Import(names=[alias(name='importlib_metadata', asname='importlib_metadata')])]), FunctionDef(name='_format_args', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='signature', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_generator', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='genfunc', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isgeneratorfunction', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), Return(value=BoolOp(op=And(), values=[Name(id='genfunc', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='iscoroutinefunction', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='iscoroutinefunction', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if func is a coroutine function (a function defined with async\n    def syntax, and doesn\'t contain yield), or a function decorated with\n    @asyncio.coroutine.\n\n    Note: copied and modified from Python 3.5\'s builtin couroutines.py to avoid\n    importing asyncio directly, which in turns also initializes the "logging"\n    module as a side-effect (see issue #8).\n    ')), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='iscoroutinefunction', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value='_is_coroutine'), Constant(value=False)], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_async_function', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if the given function seems to be an async function or\n    an async generator.')), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='iscoroutinefunction', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isasyncgenfunction', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='getlocation', args=arguments(posonlyargs=[], args=[arg(arg='function'), arg(arg='curdir', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='function', ctx=Store())], value=Call(func=Name(id='get_real_func', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfile', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='function', ctx=Load()), attr='__code__', ctx=Load()), attr='co_firstlineno', ctx=Load())), If(test=Compare(left=Name(id='curdir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='relfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='relative_to', ctx=Load()), args=[Name(id='curdir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[Return(value=BinOp(left=Constant(value='%s:%d'), op=Mod(), right=Tuple(elts=[Name(id='relfn', ctx=Load()), BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())))], finalbody=[])], orelse=[]), Return(value=BinOp(left=Constant(value='%s:%d'), op=Mod(), right=Tuple(elts=[Name(id='fn', ctx=Load()), BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='num_mock_patch_args', args=arguments(posonlyargs=[], args=[arg(arg='function')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return number of arguments used up by mock arguments (if any).')), Assign(targets=[Name(id='patchings', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='function', ctx=Load()), Constant(value='patchings'), Constant(value=None)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='patchings', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='mock_sentinel', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='mock')], keywords=[]), Constant(value='DEFAULT'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ut_mock_sentinel', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unittest.mock')], keywords=[]), Constant(value='DEFAULT'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='patchings', ctx=Load()), ifs=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='p', ctx=Load()), attr='attribute_name', ctx=Load())), BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='new', ctx=Load()), ops=[Is()], comparators=[Name(id='mock_sentinel', ctx=Load())]), Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='new', ctx=Load()), ops=[Is()], comparators=[Name(id='ut_mock_sentinel', ctx=Load())])])])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='getfuncargnames', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='is_method', annotation=Name(id='bool', ctx=Load())), arg(arg='cls', annotation=BinOp(left=Name(id='type', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=''), Constant(value=False), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="Return the names of a function's mandatory arguments.\n\n    Should return the names of all function arguments that:\n    * Aren't bound to an instance or type as in instance or class methods.\n    * Don't have default values.\n    * Aren't bound with functools.partial.\n    * Aren't replaced with mocks.\n\n    The is_method and cls arguments indicate that the function should\n    be treated as a bound method even though it's not unless, only in\n    the case of cls, the function is a static method.\n\n    The name parameter should be the original name in which the function was collected.\n    ")), Try(body=[Assign(targets=[Name(id='parameters', ctx=Store())], value=Attribute(value=Call(func=Name(id='signature', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[]), attr='parameters', ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), name='e', body=[ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not determine arguments of '), FormattedValue(value=Name(id='function', ctx=Load()), conversion=114), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='arg_names', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='kind', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Parameter', ctx=Load()), attr='POSITIONAL_OR_KEYWORD', ctx=Load())]), Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='kind', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Parameter', ctx=Load()), attr='KEYWORD_ONLY', ctx=Load())])]), Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='default', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Parameter', ctx=Load()), attr='empty', ctx=Load())])])], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='function', ctx=Load()), attr='__name__', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='is_method', ctx=Load()), BoolOp(op=And(), values=[Name(id='cls', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getattr_static', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=None))]), Name(id='staticmethod', ctx=Load())], keywords=[]))])]), body=[Assign(targets=[Name(id='arg_names', ctx=Store())], value=Subscript(value=Name(id='arg_names', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='function', ctx=Load()), Constant(value='__wrapped__')], keywords=[]), body=[Assign(targets=[Name(id='arg_names', ctx=Store())], value=Subscript(value=Name(id='arg_names', ctx=Load()), slice=Slice(lower=Call(func=Name(id='num_mock_patch_args', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[]), Return(value=Name(id='arg_names', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_default_arg_names', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='signature', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[]), attr='parameters', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='kind', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='Parameter', ctx=Load()), attr='POSITIONAL_OR_KEYWORD', ctx=Load()), Attribute(value=Name(id='Parameter', ctx=Load()), attr='KEYWORD_ONLY', ctx=Load())], ctx=Load())]), Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='default', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='Parameter', ctx=Load()), attr='empty', ctx=Load())])])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_non_printable_ascii_translate_table', ctx=Store())], value=DictComp(key=Name(id='i', ctx=Load()), value=JoinedStr(values=[Constant(value='\\x'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')]))]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=128)], keywords=[]), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=32), Constant(value=127)], keywords=[])])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='_non_printable_ascii_translate_table', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='\t')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='\r')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='\n')], keywords=[])], values=[Constant(value='\\t'), Constant(value='\\r'), Constant(value='\\n')])], keywords=[])), FunctionDef(name='_translate_non_printable', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='_non_printable_ascii_translate_table', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='STRING_TYPES', ctx=Store())], value=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())), FunctionDef(name='_bytes_to_ascii', args=arguments(posonlyargs=[], args=[arg(arg='val', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii'), Constant(value='backslashreplace')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='ascii_escaped', args=arguments(posonlyargs=[], args=[arg(arg='val', annotation=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If val is pure ASCII, return it as an str, otherwise, escape\n    bytes objects into a sequence of escaped bytes:\n\n    b\'\\xc3\\xb4\\xc5\\xd6\' -> r\'\\xc3\\xb4\\xc5\\xd6\'\n\n    and escapes unicode objects into a sequence of escaped unicode\n    ids, e.g.:\n\n    r\'4\\nV\\U00043efa\\x0eMXWB\\x1e\\u3028\\u15fd\\xcd\\U0007d944\'\n\n    Note:\n       The obvious "v.decode(\'unicode-escape\')" will return\n       valid UTF-8 unicode if it finds them in bytes, but we\n       want to return escaped bytes for any byte, even if they match\n       a UTF-8 string.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='_bytes_to_ascii', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='unicode_escape')], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))]), Return(value=Call(func=Name(id='_translate_non_printable', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='_PytestWrapper', bases=[], keywords=[], body=[Expr(value=Constant(value='Dummy wrapper around a function object for internal use only.\n\n    Used to correctly unwrap the underlying function object when we are\n    creating fixtures, because we wrap the function object ourselves with a\n    decorator to issue warnings when the fixture function is called directly.\n    ')), AnnAssign(target=Name(id='obj', ctx=Store()), annotation=Name(id='Any', ctx=Load()), simple=1)], decorator_list=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), FunctionDef(name='get_real_func', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the real function object of the (possibly) wrapped object by\n    functools.wraps or functools.partial.')), Assign(targets=[Name(id='start_obj', ctx=Store())], value=Name(id='obj', ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='new_obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__pytest_wrapped__'), Constant(value=None)], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_obj', ctx=Load()), Name(id='_PytestWrapper', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Attribute(value=Name(id='new_obj', ctx=Load()), attr='obj', ctx=Load())), Break()], orelse=[]), Assign(targets=[Name(id='new_obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__wrapped__'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='new_obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Name(id='new_obj', ctx=Load()))], orelse=[ImportFrom(module='_pytest._io.saferepr', names=[alias(name='saferepr')], level=0), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='could not find real function of {start}\nstopped at {current}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='start_obj', ctx=Load())], keywords=[])), keyword(arg='current', value=Call(func=Name(id='saferepr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))])], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='func', ctx=Load()))], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_real_method', args=arguments(posonlyargs=[], args=[arg(arg='obj'), arg(arg='holder')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Attempt to obtain the real function object that might be wrapping\n    ``obj``, while at the same time returning a bound method to ``holder`` if\n    the original object was a bound method.')), Try(body=[Assign(targets=[Name(id='is_method', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__func__')], keywords=[])), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='get_real_func', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Name(id='obj', ctx=Load()))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='is_method', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__get__')], keywords=[]), Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__get__', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='__get__', ctx=Load()), args=[Name(id='holder', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='getimfunc', args=arguments(posonlyargs=[], args=[arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Attribute(value=Name(id='func', ctx=Load()), attr='__func__', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Name(id='func', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='safe_getattr', args=arguments(posonlyargs=[], args=[arg(arg='object', annotation=Name(id='Any', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Like getattr but return default upon any Exception or any OutcomeException.\n\n    Attribute access can potentially fail for 'evil' Python objects.\n    See issue #214.\n    It catches OutcomeException because of #2490 (issue #580), new outcomes\n    are derived from BaseException instead of Exception (for more details\n    check #2707).\n    ")), ImportFrom(module='_pytest.outcomes', names=[alias(name='TEST_OUTCOME')], level=0), Try(body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='object', ctx=Load()), Name(id='name', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TEST_OUTCOME', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='safe_isclass', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ignore any exception via isinstance on Python 3.')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='final', asname='final')], level=0)], orelse=[ImportFrom(module='typing_extensions', names=[alias(name='final', asname='final')], level=0)])], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='final', asname='final')], level=0)], orelse=[FunctionDef(name='final', args=arguments(posonlyargs=[], args=[arg(arg='f')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='f', ctx=Load()))], decorator_list=[])])]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='functools', names=[alias(name='cached_property', asname='cached_property')], level=0)], orelse=[ClassDef(name='cached_property', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Tuple(elts=[Name(id='_S', ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='func'), Constant(value='__doc__')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_S', ctx=Load())], ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Store())], value=Name(id='func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Name(id='func', ctx=Load()), attr='__doc__', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance', annotation=Constant(value=None)), arg(arg='owner', annotation=BinOp(left=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_S', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='cached_property', ctx=Load()), slice=Tuple(elts=[Name(id='_S', ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance', annotation=Name(id='_S', ctx=Load())), arg(arg='owner', annotation=BinOp(left=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_S', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='_T', ctx=Load())), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='owner')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store()), Subscript(value=Attribute(value=Name(id='instance', ctx=Load()), attr='__dict__', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), attr='__name__', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Return(value=Name(id='value', ctx=Load()))], decorator_list=[])], decorator_list=[])]), FunctionDef(name='get_user_id', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current user id, or None if we cannot get it reliably on the current platform.')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='win32'), Constant(value='emscripten')], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='uid', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='uid', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=Name(id='uid', ctx=Load()), orelse=Constant(value=None)))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='assert_never', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='NoReturn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Constant(value=False), msg=JoinedStr(values=[Constant(value='Unhandled value: '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=')')]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load()))], type_ignores=[])