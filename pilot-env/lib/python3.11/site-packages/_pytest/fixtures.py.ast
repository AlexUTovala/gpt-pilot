Module(body=[Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='contextlib', names=[alias(name='suppress')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='MutableMapping')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='_pytest')]), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest._code', names=[alias(name='getfslineno')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='FormattedExcinfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='TerminalRepr')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='_format_args')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='_PytestWrapper')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='assert_never')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='get_real_func')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='get_real_method')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='getfuncargnames')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='getimfunc')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='getlocation')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='is_generator')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='NOTSET')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='NotSetType')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='overload')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='safe_getattr')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='_PluggyPlugin')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='YIELD_FIXTURE')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='Mark')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='ParameterSet')], level=0), ImportFrom(module='_pytest.mark.structures', names=[alias(name='MarkDecorator')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='TEST_OUTCOME')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='bestrelpath')], level=0), ImportFrom(module='_pytest.scope', names=[alias(name='HIGH_SCOPES')], level=0), ImportFrom(module='_pytest.scope', names=[alias(name='Scope')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Deque')], level=0), ImportFrom(module='_pytest.scope', names=[alias(name='_ScopeName')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='CallSpec2')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Metafunc')], level=0)], orelse=[]), Assign(targets=[Name(id='FixtureValue', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='FixtureValue')], keywords=[])), Assign(targets=[Name(id='FixtureFunction', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='FixtureFunction')], keywords=[keyword(arg='bound', value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='_FixtureFunc', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='FixtureValue', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='FixtureValue', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_FixtureCachedResult', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='FixtureValue', ctx=Load()), Name(id='object', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='object', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='PseudoFixtureDef', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='FixtureValue', ctx=Load()), ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='cached_result', ctx=Store()), annotation=Constant(value='_FixtureCachedResult[FixtureValue]'), simple=1), AnnAssign(target=Name(id='_scope', ctx=Store()), annotation=Name(id='Scope', ctx=Load()), simple=1)], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='_fixturemanager', ctx=Store())], value=Call(func=Name(id='FixtureManager', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_scope_package', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())), arg(arg='fixturedef', annotation=Constant(value='FixtureDef[object]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_pytest.python', names=[alias(name='Package')], level=0), AnnAssign(target=Name(id='current', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='node', ctx=Load()), simple=1), Assign(targets=[Name(id='fixture_package_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}/{}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='baseid', ctx=Load()), Constant(value='__init__.py')], keywords=[])), While(test=BoolOp(op=And(), values=[Name(id='current', ctx=Load()), BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='current', ctx=Load()), Name(id='Package', ctx=Load())], keywords=[])), Compare(left=Name(id='fixture_package_name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='current', ctx=Load()), attr='nodeid', ctx=Load())])])]), body=[Assign(targets=[Name(id='current', ctx=Store())], value=Attribute(value=Name(id='current', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='current', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='session', ctx=Load()))], orelse=[]), Return(value=Name(id='current', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_scope_node', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())), arg(arg='scope', annotation=Name(id='Scope', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='_pytest.python')]), If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Class', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Class', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Module', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Module', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Package', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Package', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Session', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='main', ctx=Load()), attr='Session', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='assert_never', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[]))])])])])])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='name2pseudofixturedef_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='FixtureDef[Any]')], ctx=Load()), ctx=Load()), ctx=Load()), args=[], keywords=[])), FunctionDef(name='add_funcarg_pseudo_fixture_def', args=arguments(posonlyargs=[], args=[arg(arg='collector', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())), arg(arg='metafunc', annotation=Constant(value='Metafunc')), arg(arg='fixturemanager', annotation=Constant(value='FixtureManager'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Subscript(value=Attribute(value=Name(id='metafunc', ctx=Load()), attr='_calls', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='funcargs', ctx=Load())), body=[Return()], orelse=[]), AnnAssign(target=Name(id='arg2params', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='arg2scope', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Scope', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='callspec', ctx=Store()), iter=Attribute(value=Name(id='metafunc', ctx=Load()), attr='_calls', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='argname', ctx=Store()), Name(id='argvalue', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='funcargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='argname', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='callspec', ctx=Load()), attr='params', ctx=Load())])), Assign(targets=[Subscript(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='params', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='argvalue', ctx=Load())), Assign(targets=[Name(id='arg2params_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='arg2params', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='argname', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='indices', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arg2params_list', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arg2params_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='argvalue', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[NotIn()], comparators=[Name(id='arg2scope', ctx=Load())]), body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='_arg2scope', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='argname', ctx=Load()), Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='arg2scope', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='scope', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='funcargs', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='arg2fixturedefs', ctx=Store())], value=Attribute(value=Name(id='metafunc', ctx=Load()), attr='_arg2fixturedefs', ctx=Load())), For(target=Tuple(elts=[Name(id='argname', ctx=Store()), Name(id='valuelist', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='arg2params', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Subscript(value=Name(id='arg2scope', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='get_scope_node', ctx=Load()), args=[Name(id='collector', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='node', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assert(test=BoolOp(op=And(), values=[Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Class', ctx=Load())]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Module', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='node', ctx=Store())], value=Name(id='collector', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='node', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='name2pseudofixturedef', ctx=Store())], value=Constant(value=None))], orelse=[AnnAssign(target=Name(id='default', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='name2pseudofixturedef', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='stash', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='name2pseudofixturedef_key', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name2pseudofixturedef', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Name(id='name2pseudofixturedef', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='arg2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=List(elts=[Subscript(value=Name(id='name2pseudofixturedef', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='fixturedef', ctx=Store())], value=Call(func=Name(id='FixtureDef', ctx=Load()), args=[], keywords=[keyword(arg='fixturemanager', value=Name(id='fixturemanager', ctx=Load())), keyword(arg='baseid', value=Constant(value='')), keyword(arg='argname', value=Name(id='argname', ctx=Load())), keyword(arg='func', value=Name(id='get_direct_param_fixture_func', ctx=Load())), keyword(arg='scope', value=Subscript(value=Name(id='arg2scope', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load())), keyword(arg='params', value=Name(id='valuelist', ctx=Load())), keyword(arg='unittest', value=Constant(value=False)), keyword(arg='ids', value=Constant(value=None))])), Assign(targets=[Subscript(value=Name(id='arg2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=List(elts=[Name(id='fixturedef', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='name2pseudofixturedef', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='name2pseudofixturedef', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='fixturedef', ctx=Load()))], orelse=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getfixturemarker', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return fixturemarker or None if it doesn't exist or raised\n    exceptions.")), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FixtureFunctionMarker', ctx=Load()), ctx=Load()), Call(func=Name(id='safe_getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='_pytestfixturefunction'), Constant(value=None)], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='FixtureFunctionMarker'), ctx=Load())), Assign(targets=[Name(id='_Key', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='object', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_parametrized_fixture_keys', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())), arg(arg='scope', annotation=Name(id='Scope', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return list of keys for all parametrized arguments which match\n    the specified scope.')), Assert(test=Compare(left=Name(id='scope', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())])), Try(body=[Assign(targets=[Name(id='callspec', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='callspec', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[AnnAssign(target=Name(id='cs', ctx=Store()), annotation=Name(id='CallSpec2', ctx=Load()), value=Name(id='callspec', ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='argname', ctx=Store()), Name(id='param_index', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='cs', ctx=Load()), attr='indices', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='cs', ctx=Load()), attr='_arg2scope', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='scope', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Session', ctx=Load())]), body=[AnnAssign(target=Name(id='key', ctx=Store()), annotation=Name(id='_Key', ctx=Load()), value=Tuple(elts=[Name(id='argname', ctx=Load()), Name(id='param_index', ctx=Load())], ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Package', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='argname', ctx=Load()), Name(id='param_index', ctx=Load()), Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='path', ctx=Load()), attr='parent', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Module', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='argname', ctx=Load()), Name(id='param_index', ctx=Load()), Attribute(value=Name(id='item', ctx=Load()), attr='path', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Class', ctx=Load())]), body=[Assign(targets=[Name(id='item_cls', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='cls', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='argname', ctx=Load()), Name(id='param_index', ctx=Load()), Attribute(value=Name(id='item', ctx=Load()), attr='path', ctx=Load()), Name(id='item_cls', ctx=Load())], ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='assert_never', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[]))])])])]), Expr(value=Yield(value=Name(id='key', ctx=Load())))], orelse=[])], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='_Key', ctx=Load()), ctx=Load())), FunctionDef(name='reorder_items', args=arguments(posonlyargs=[], args=[arg(arg='items', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='argkeys_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='items_by_argkey', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Subscript(value=Name(id='Deque', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='scope', ctx=Store()), iter=Name(id='HIGH_SCOPES', ctx=Load()), body=[AnnAssign(target=Name(id='d', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Subscript(value=Name(id='argkeys_cache', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Store())], value=Name(id='d', ctx=Load())), AnnAssign(target=Name(id='item_d', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Subscript(value=Name(id='Deque', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='deque', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Subscript(value=Name(id='items_by_argkey', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Store())], value=Name(id='item_d', ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[Call(func=Name(id='get_parametrized_fixture_keys', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[])), If(test=Name(id='keys', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Store())], value=Name(id='keys', ctx=Load())), For(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='item_d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='items_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[Name(id='items', ctx=Load()), Constant(value=None)], keywords=[])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='reorder_items_atscope', ctx=Load()), args=[Name(id='items_dict', ctx=Load()), Name(id='argkeys_cache', ctx=Load()), Name(id='items_by_argkey', ctx=Load()), Attribute(value=Name(id='Scope', ctx=Load()), attr='Session', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())), FunctionDef(name='fix_cache_order', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())), arg(arg='argkeys_cache', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='items_by_argkey', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value='Deque[nodes.Item]')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='scope', ctx=Store()), iter=Name(id='HIGH_SCOPES', ctx=Load()), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='argkeys_cache', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Load()), attr='get', ctx=Load()), args=[Name(id='item', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='items_by_argkey', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reorder_items_atscope', args=arguments(posonlyargs=[], args=[arg(arg='items', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='argkeys_cache', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='items_by_argkey', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_Key', ctx=Load()), Constant(value='Deque[nodes.Item]')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='scope', annotation=Name(id='Scope', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)])]), body=[Return(value=Name(id='items', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='ignore', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_Key', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='items_deque', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='items_done', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='scoped_items_by_argkey', ctx=Store())], value=Subscript(value=Name(id='items_by_argkey', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='scoped_argkeys_cache', ctx=Store())], value=Subscript(value=Name(id='argkeys_cache', ctx=Load()), slice=Name(id='scope', ctx=Load()), ctx=Load())), While(test=Name(id='items_deque', ctx=Load()), body=[AnnAssign(target=Name(id='no_argkey_group', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='slicing_argkey', ctx=Store())], value=Constant(value=None)), While(test=Name(id='items_deque', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='items_deque', ctx=Load()), attr='popleft', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='item', ctx=Load()), ops=[In()], comparators=[Name(id='items_done', ctx=Load())]), Compare(left=Name(id='item', ctx=Load()), ops=[In()], comparators=[Name(id='no_argkey_group', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='argkeys', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[GeneratorExp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='scoped_argkeys_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='item', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore', ctx=Load())])], is_async=0)]), Constant(value=None)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='argkeys', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='no_argkey_group', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Tuple(elts=[Name(id='slicing_argkey', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='argkeys', ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='matching_items', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Subscript(value=Name(id='scoped_items_by_argkey', ctx=Load()), slice=Name(id='slicing_argkey', ctx=Load()), ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Name(id='items', ctx=Load())])], is_async=0)])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='matching_items', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='fix_cache_order', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='argkeys_cache', ctx=Load()), Name(id='items_by_argkey', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='items_deque', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Break()])], orelse=[]), If(test=Name(id='no_argkey_group', ctx=Load()), body=[Assign(targets=[Name(id='no_argkey_group', ctx=Store())], value=Call(func=Name(id='reorder_items_atscope', ctx=Load()), args=[Name(id='no_argkey_group', ctx=Load()), Name(id='argkeys_cache', ctx=Load()), Name(id='items_by_argkey', ctx=Load()), Call(func=Attribute(value=Name(id='scope', ctx=Load()), attr='next_lower', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='no_argkey_group', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='items_done', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ignore', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='slicing_argkey', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='items_done', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='get_direct_param_fixture_func', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Constant(value='FixtureRequest'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='request', ctx=Load()), attr='param', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), ClassDef(name='FuncFixtureInfo', bases=[], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='argnames'), Constant(value='initialnames'), Constant(value='names_closure'), Constant(value='name2fixturedefs')], ctx=Load())), AnnAssign(target=Name(id='argnames', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='initialnames', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='names_closure', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='name2fixturedefs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='FixtureDef[Any]'), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='prune_dependency_tree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Recompute names_closure from initialnames and name2fixturedefs.\n\n        Can only reduce names_closure, which means that the new closure will\n        always be a subset of the old one. The order is preserved.\n\n        This method is needed because direct parametrization may shadow some\n        of the fixtures that were included in the originally built dependency\n        tree. In this way the dependency tree can get pruned, and the closure\n        of argnames may get reduced.\n        ')), AnnAssign(target=Name(id='closure', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='working_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='initialnames', ctx=Load())], keywords=[])), While(test=Name(id='working_set', ctx=Load()), body=[Assign(targets=[Name(id='argname', ctx=Store())], value=Call(func=Attribute(value=Name(id='working_set', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='argname', ctx=Load()), ops=[NotIn()], comparators=[Name(id='closure', ctx=Load())]), Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='names_closure', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='closure', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='name2fixturedefs', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='working_set', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='name2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='argnames', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='names_closure', ctx=Load()), slice=Slice(), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='closure', ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='names_closure', ctx=Load()), attr='index', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='FixtureRequest', bases=[], keywords=[], body=[Expr(value=Constant(value='A request for a fixture from a test or fixture function.\n\n    A request object gives access to the requesting test context and has\n    an optional ``param`` attribute in case the fixture is parametrized\n    indirectly.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pyfuncitem')], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Store())], value=Name(id='pyfuncitem', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='fixturename', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Store())], value=Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fixture_defs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Name(id='fixtureinfo', ctx=Store()), annotation=Name(id='FuncFixtureInfo', ctx=Load()), value=Attribute(value=Name(id='pyfuncitem', ctx=Load()), attr='_fixtureinfo', ctx=Load()), simple=1), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='fixtureinfo', ctx=Load()), attr='name2fixturedefs', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2index', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fixturemanager', ctx=Store()), annotation=Name(id='FixtureManager', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='pyfuncitem', ctx=Load()), attr='session', ctx=Load()), attr='_fixturemanager', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='param', ctx=Store()), annotation=Name(id='Any', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scope string, one of "function", "class", "module", "package", "session".')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='_ScopeName')), FunctionDef(name='fixturenames', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Names of all active fixtures in this request.')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='_fixtureinfo', ctx=Load()), attr='names_closure', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fixture_defs', ctx=Load())], keywords=[]), attr='difference', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='node', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Underlying collection node (depends on current request scope).')), Assign(targets=[Name(id='scope', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Load())), If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())]), body=[AnnAssign(target=Name(id='node', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Package', ctx=Load())]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='get_scope_package', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_fixturedef', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='get_scope_node', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='node', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Class', ctx=Load())])]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()))], orelse=[]), Assert(test=Name(id='node', ctx=Load()), msg=Call(func=Attribute(value=Constant(value='Could not obtain a node for scope "{}" for function {!r}'), attr='format', ctx=Load()), args=[Name(id='scope', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load())], keywords=[])), Return(value=Name(id='node', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_getnextfixturedef', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fixturedefs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='argname', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='fixturedefs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='parent', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='parentid', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='parent', ctx=Load()), attr='nodeid', ctx=Load())), Assign(targets=[Name(id='fixturedefs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixturemanager', ctx=Load()), attr='getfixturedefs', ctx=Load()), args=[Name(id='argname', ctx=Load()), Name(id='parentid', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='fixturedefs', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2index', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='argname', ctx=Load()), Constant(value=0)], keywords=[]), op=Sub(), right=Constant(value=1))), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='fixturedefs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=UnaryOp(op=USub(), operand=Name(id='index', ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='fixturedefs', ctx=Load())], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='FixtureLookupError', ctx=Load()), args=[Name(id='argname', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2index', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='index', ctx=Load())), Return(value=Subscript(value=Name(id='fixturedefs', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Constant(value='FixtureDef[Any]')), FunctionDef(name='config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The pytest config object associated with this request.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='config', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Config', ctx=Load())), FunctionDef(name='function', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test function object if the request has a per-function scope.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='function')]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='function not available in '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), conversion=-1), Constant(value='-scoped context')])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='obj', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='cls', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Class (can be None) where the test function was collected.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='class'), Constant(value='function')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='cls not available in '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), conversion=-1), Constant(value='-scoped context')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='clscol', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Class', ctx=Load())], keywords=[])), If(test=Name(id='clscol', ctx=Load()), body=[Return(value=Attribute(value=Name(id='clscol', ctx=Load()), attr='obj', ctx=Load()))], orelse=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='instance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Instance (can be None) on which test function was collected.')), Try(body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='_testcase', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='function', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='function'), Constant(value=None)], keywords=[])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='function', ctx=Load()), Constant(value='__self__'), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='module', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Python module object where the test function was collected.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='function'), Constant(value='class'), Constant(value='module')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module not available in '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), conversion=-1), Constant(value='-scoped context')])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='getparent', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='python', ctx=Load()), attr='Module', ctx=Load())], keywords=[]), attr='obj', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Path where the test function was collected.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='function'), Constant(value='class'), Constant(value='module'), Constant(value='package')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='path not available in '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), conversion=-1), Constant(value='-scoped context')])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='keywords', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Keywords/markers dictionary for the underlying node.')), AnnAssign(target=Name(id='node', ctx=Store()), annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), simple=1), Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='keywords', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='session', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pytest session object.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='session', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Session')), FunctionDef(name='addfinalizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finalizer', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add finalizer/teardown function to be called without arguments after\n        the last test within the requesting test context finished execution.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='applymarker', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='marker', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='MarkDecorator', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Apply a marker to a single test function invocation.\n\n        This method is useful if you don't want to have a keyword/marker\n        on all function invocations.\n\n        :param marker:\n            An object created by a call to ``pytest.mark.NAME(...)``.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), attr='add_marker', ctx=Load()), args=[Name(id='marker', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='raiseerror', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise a FixtureLookupError exception.\n\n        :param msg:\n            An optional custom error message.\n        ')), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixturemanager', ctx=Load()), attr='FixtureLookupError', ctx=Load()), args=[Constant(value=None), Name(id='self', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), FunctionDef(name='_fillfixtures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load())), Assign(targets=[Name(id='fixturenames', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='fixturenames'), Attribute(value=Name(id='self', ctx=Load()), attr='fixturenames', ctx=Load())], keywords=[])), For(target=Name(id='argname', ctx=Store()), iter=Name(id='fixturenames', ctx=Load()), body=[If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='item', ctx=Load()), attr='funcargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='funcargs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getfixturevalue', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getfixturevalue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Dynamically run a named fixture function.\n\n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n\n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n\n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        ")), Assign(targets=[Name(id='fixturedef', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_active_fixturedef', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=JoinedStr(values=[Constant(value='The fixture value for "'), FormattedValue(value=Name(id='argname', ctx=Load()), conversion=-1), Constant(value='" is not available.  This can happen when the fixture has already been torn down.')])), Return(value=Subscript(value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='_get_active_fixturedef', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixture_defs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='fixturedef', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getnextfixturedef', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FixtureLookupError', ctx=Load()), body=[If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='request')]), body=[Assign(targets=[Name(id='cached_result', ctx=Store())], value=Tuple(elts=[Name(id='self', ctx=Load()), List(elts=[Constant(value=0)], ctx=Load()), Constant(value=None)], ctx=Load())), Return(value=Call(func=Name(id='PseudoFixtureDef', ctx=Load()), args=[Name(id='cached_result', ctx=Load()), Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compute_fixture_value', ctx=Load()), args=[Name(id='fixturedef', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixture_defs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='fixturedef', ctx=Load())), Return(value=Name(id='fixturedef', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='FixtureDef[object]'), Subscript(value=Name(id='PseudoFixtureDef', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_fixturestack', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='current', ctx=Store())], value=Name(id='self', ctx=Load())), AnnAssign(target=Name(id='values', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), While(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='current', ctx=Load()), Name(id='SubRequest', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='current', ctx=Load()), attr='_fixturedef', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current', ctx=Store())], value=Attribute(value=Name(id='current', ctx=Load()), attr='_parent_request', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='values', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='FixtureDef[Any]'), ctx=Load())), FunctionDef(name='_compute_fixture_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturedef', annotation=Constant(value='FixtureDef[object]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a SubRequest based on "self" and call the execute method\n        of the given FixtureDef object.\n\n        This will force the FixtureDef object to throw away any previous\n        results and compute a new fixture value, which will be stored into\n        the FixtureDef object itself.\n        ')), Assign(targets=[Name(id='argname', ctx=Store())], value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argname', ctx=Load())), Assign(targets=[Name(id='funcitem', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load())), Assign(targets=[Name(id='scope', ctx=Store())], value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='_scope', ctx=Load())), Try(body=[Assign(targets=[Name(id='callspec', ctx=Store())], value=Attribute(value=Name(id='funcitem', ctx=Load()), attr='callspec', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='callspec', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='callspec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='callspec', ctx=Load()), attr='params', ctx=Load())])]), body=[Assign(targets=[Name(id='param', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='params', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='param_index', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='indices', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='KeyError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='callspec', ctx=Load()), attr='_arg2scope', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load()))])], orelse=[Assign(targets=[Name(id='param', ctx=Store())], value=Name(id='NOTSET', ctx=Load())), Assign(targets=[Name(id='param_index', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='has_params', ctx=Store())], value=Compare(left=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='params', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='fixtures_not_supported', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='funcitem', ctx=Load()), Constant(value='nofuncargs'), Constant(value=False)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='has_params', ctx=Load()), Name(id='fixtures_not_supported', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{name} does not support fixtures, maybe unittest.TestCase subclass?\nNode id: {nodeid}\nFunction type: {typename}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='funcitem', ctx=Load()), attr='name', ctx=Load())), keyword(arg='nodeid', value=Attribute(value=Name(id='funcitem', ctx=Load()), attr='nodeid', ctx=Load())), keyword(arg='typename', value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='funcitem', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[]), If(test=Name(id='has_params', ctx=Load()), body=[Assign(targets=[Name(id='frame', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='stack', ctx=Load()), args=[], keywords=[]), slice=Constant(value=3), ctx=Load())), Assign(targets=[Name(id='frameinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getframeinfo', ctx=Load()), args=[Subscript(value=Name(id='frame', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='source_path', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Attribute(value=Name(id='frameinfo', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='source_lineno', ctx=Store())], value=Attribute(value=Name(id='frameinfo', ctx=Load()), attr='lineno', ctx=Load())), Try(body=[Assign(targets=[Name(id='source_path_str', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='source_path', ctx=Load()), attr='relative_to', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='funcitem', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='source_path_str', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='source_path', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value="The requested fixture has no parameter defined for test:\n    {}\n\nRequested fixture '{}' defined in:\n{}\n\nRequested here:\n{}:{}"), attr='format', ctx=Load()), args=[Attribute(value=Name(id='funcitem', ctx=Load()), attr='nodeid', ctx=Load()), Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argname', ctx=Load()), Call(func=Name(id='getlocation', ctx=Load()), args=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Attribute(value=Name(id='funcitem', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[]), Name(id='source_path_str', ctx=Load()), Name(id='source_lineno', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[])]), Assign(targets=[Name(id='subrequest', ctx=Store())], value=Call(func=Name(id='SubRequest', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='scope', ctx=Load()), Name(id='param', ctx=Load()), Name(id='param_index', ctx=Load()), Name(id='fixturedef', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='subrequest', ctx=Load()), attr='_check_scope', ctx=Load()), args=[Name(id='argname', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='execute', ctx=Load()), args=[], keywords=[keyword(arg='request', value=Name(id='subrequest', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_schedule_finalizers', ctx=Load()), args=[Name(id='fixturedef', ctx=Load()), Name(id='subrequest', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_schedule_finalizers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturedef', annotation=Constant(value='FixtureDef[object]')), arg(arg='subrequest', annotation=Constant(value='SubRequest'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='subrequest', ctx=Load()), attr='node', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='finish', ctx=Load()), args=[], keywords=[keyword(arg='request', value=Name(id='subrequest', ctx=Load()))]))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_check_scope', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Name(id='str', ctx=Load())), arg(arg='invoking_scope', annotation=Name(id='Scope', ctx=Load())), arg(arg='requested_scope', annotation=Name(id='Scope', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='request')]), body=[Return()], orelse=[]), If(test=Compare(left=Name(id='invoking_scope', ctx=Load()), ops=[Gt()], comparators=[Name(id='requested_scope', ctx=Load())]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_factorytraceback', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='ScopeMismatch: You tried to access the '), FormattedValue(value=Attribute(value=Name(id='requested_scope', ctx=Load()), attr='value', ctx=Load()), conversion=-1), Constant(value=' scoped fixture '), FormattedValue(value=Name(id='argname', ctx=Load()), conversion=-1), Constant(value=' with a '), FormattedValue(value=Attribute(value=Name(id='invoking_scope', ctx=Load()), attr='value', ctx=Load()), conversion=-1), Constant(value=' scoped request object, involved factories:\n'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_factorytraceback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='fixturedef', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_fixturestack', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='factory', ctx=Store())], value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='fs', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Call(func=Name(id='getfslineno', ctx=Load()), args=[Name(id='factory', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fs', ctx=Load()), Name(id='Path', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='session', ctx=Store()), annotation=Name(id='Session', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='session', ctx=Load()), simple=1), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='path', ctx=Load()), Name(id='fs', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='p', ctx=Store())], value=Name(id='fs', ctx=Load()))]), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='_format_args', ctx=Load()), args=[Name(id='factory', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='%s:%d:  def %s%s'), op=Mod(), right=Tuple(elts=[Name(id='p', ctx=Load()), BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='factory', ctx=Load()), attr='__name__', ctx=Load()), Name(id='args', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<FixtureRequest for %r>'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='SubRequest', bases=[Name(id='FixtureRequest', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A sub request for handling getting a fixture from a test function/fixture.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Constant(value='FixtureRequest')), arg(arg='scope', annotation=Name(id='Scope', ctx=Load())), arg(arg='param', annotation=Name(id='Any', ctx=Load())), arg(arg='param_index', annotation=Name(id='int', ctx=Load())), arg(arg='fixturedef', annotation=Constant(value='FixtureDef[object]'))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parent_request', ctx=Store())], value=Name(id='request', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fixturename', ctx=Store())], value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argname', ctx=Load())), If(test=Compare(left=Name(id='param', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTSET', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='param', ctx=Store())], value=Name(id='param', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='param_index', ctx=Store())], value=Name(id='param_index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Store())], value=Name(id='scope', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fixturedef', ctx=Store())], value=Name(id='fixturedef', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='_pyfuncitem', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fixture_defs', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='_fixture_defs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='_arg2fixturedefs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_arg2index', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='_arg2index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fixturemanager', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='_fixturemanager', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<SubRequest '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='fixturename', ctx=Load()), conversion=114), Constant(value=' for '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pyfuncitem', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='addfinalizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finalizer', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add finalizer/teardown function to be called without arguments after\n        the last test within the requesting test context finished execution.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixturedef', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_schedule_finalizers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturedef', annotation=Constant(value='FixtureDef[object]')), arg(arg='subrequest', annotation=Constant(value='SubRequest'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argname', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='fixturenames', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fixturedef', ctx=Load()), attr='finish', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='self', ctx=Load()))])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_schedule_finalizers', ctx=Load()), args=[Name(id='fixturedef', ctx=Load()), Name(id='subrequest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='FixtureLookupError', bases=[Name(id='LookupError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Could not return a requested fixture (missing or invalid).')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load())), arg(arg='msg', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Store())], value=Name(id='argname', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Store())], value=Name(id='request', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fixturestack', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='_get_fixturestack', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='formatrepr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='tblines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='addline', ctx=Store())], value=Attribute(value=Name(id='tblines', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='obj', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='func', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='fixturestack', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Load())), If(test=Compare(left=Name(id='msg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stack', ctx=Store())], value=Subscript(value=Name(id='stack', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), For(target=Name(id='function', ctx=Store()), iter=Name(id='stack', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='fspath', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Call(func=Name(id='getfslineno', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='lines', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getsourcelines', ctx=Load()), args=[Call(func=Name(id='get_real_func', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IndexError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='error_msg', ctx=Store())], value=Constant(value='file %s, line %s: source code not available')), Expr(value=Call(func=Name(id='addline', ctx=Load()), args=[BinOp(left=Name(id='error_msg', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='fspath', ctx=Load()), BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load()))], keywords=[]))])], orelse=[Expr(value=Call(func=Name(id='addline', ctx=Load()), args=[JoinedStr(values=[Constant(value='file '), FormattedValue(value=Name(id='fspath', ctx=Load()), conversion=-1), Constant(value=', line '), FormattedValue(value=BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='addline', ctx=Load()), args=[BinOp(left=Constant(value='  '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='def')], keywords=[]), body=[Break()], orelse=[])], orelse=[])], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='msg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fm', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), attr='_fixturemanager', ctx=Load())), Assign(targets=[Name(id='available', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='parentid', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), attr='_pyfuncitem', ctx=Load()), attr='parent', ctx=Load()), attr='nodeid', ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='fixturedefs', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='fm', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='faclist', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fm', ctx=Load()), attr='_matchfactories', ctx=Load()), args=[Name(id='fixturedefs', ctx=Load()), Name(id='parentid', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='faclist', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='available', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Load()), ops=[In()], comparators=[Name(id='available', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value=" recursive dependency involving fixture '{}' detected"), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value="fixture '"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Load()), conversion=-1), Constant(value="' not found")]))]), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value='\n available fixtures: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='available', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value="\n use 'pytest --fixtures [testpath]' for help on them."))], orelse=[]), Return(value=Call(func=Name(id='FixtureLookupErrorRepr', ctx=Load()), args=[Name(id='fspath', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='tblines', ctx=Load()), Name(id='msg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='FixtureLookupErrorRepr'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='FixtureLookupErrorRepr', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load())), arg(arg='firstlineno', annotation=Name(id='int', ctx=Load())), arg(arg='tblines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errorstring', annotation=Name(id='str', ctx=Load())), arg(arg='argname', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tblines', ctx=Store())], value=Name(id='tblines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='errorstring', ctx=Store())], value=Name(id='errorstring', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='firstlineno', ctx=Store())], value=Name(id='firstlineno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Store())], value=Name(id='argname', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tw', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='tbline', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='tblines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tbline', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errorstring', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), If(test=Name(id='lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='FormattedExcinfo', ctx=Load()), attr='fail_marker', ctx=Load()), conversion=-1), Constant(value='       '), FormattedValue(value=Call(func=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), conversion=-1)])], keywords=[keyword(arg='red', value=Constant(value=True))])), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='FormattedExcinfo', ctx=Load()), attr='flow_marker', ctx=Load()), conversion=-1), Constant(value='       '), FormattedValue(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), conversion=-1)])], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='%s:%d'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='firstlineno', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='fail_fixturefunc', args=arguments(posonlyargs=[], args=[arg(arg='fixturefunc'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='fs', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store())], value=Call(func=Name(id='getfslineno', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='location', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='fs', ctx=Load()), conversion=-1), Constant(value=':'), FormattedValue(value=BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)])), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='Source', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value=':\n\n')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='indent', ctx=Load()), args=[], keywords=[])], keywords=[])), op=Add(), right=Constant(value='\n')), op=Add(), right=Name(id='location', ctx=Load()))], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), FunctionDef(name='call_fixture_func', args=arguments(posonlyargs=[], args=[arg(arg='fixturefunc', annotation=Constant(value='_FixtureFunc[FixtureValue]')), arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load())), arg(arg='kwargs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='is_generator', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='FixtureValue', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Name(id='fixturefunc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='generator', ctx=Store())], value=Call(func=Name(id='fixturefunc', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Try(body=[Assign(targets=[Name(id='fixture_result', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='generator', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='request', ctx=Load()), attr='fixturename', ctx=Load()), conversion=-1), Constant(value=' did not yield a value')])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='finalizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='_teardown_yield_fixture', ctx=Load()), Name(id='fixturefunc', ctx=Load()), Name(id='generator', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='FixtureValue', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='fixturefunc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fixture_result', ctx=Store())], value=Call(func=Name(id='fixturefunc', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))]), Return(value=Name(id='fixture_result', ctx=Load()))], decorator_list=[], returns=Name(id='FixtureValue', ctx=Load())), FunctionDef(name='_teardown_yield_fixture', args=arguments(posonlyargs=[], args=[arg(arg='fixturefunc'), arg(arg='it')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Execute the teardown of a fixture function by advancing the iterator\n    after the yield and ensure the iteration ends (if not it means there is\n    more than one yield in the function).')), Try(body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='it', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Name(id='fail_fixturefunc', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load()), Constant(value="fixture function has more than one 'yield'")], keywords=[]))], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_eval_scope_callable', args=arguments(posonlyargs=[], args=[arg(arg='scope_callable', annotation=Constant(value='Callable[[str, Config], _ScopeName]')), arg(arg='fixture_name', annotation=Name(id='str', ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='scope_callable', ctx=Load()), args=[], keywords=[keyword(arg='fixture_name', value=Name(id='fixture_name', ctx=Load())), keyword(arg='config', value=Name(id='config', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Error evaluating {} while defining fixture '{}'.\nExpected a function with the signature (*, fixture_name, config)"), attr='format', ctx=Load()), args=[Name(id='scope_callable', ctx=Load()), Name(id='fixture_name', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Expected {} to return a 'str' while defining fixture '{}', but it returned:\n{!r}"), attr='format', ctx=Load()), args=[Name(id='scope_callable', ctx=Load()), Name(id='fixture_name', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Constant(value='_ScopeName')), ClassDef(name='FixtureDef', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='FixtureValue', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A container for a fixture definition.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturemanager', annotation=Constant(value='FixtureManager')), arg(arg='baseid', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='argname', annotation=Name(id='str', ctx=Load())), arg(arg='func', annotation=Constant(value='_FixtureFunc[FixtureValue]')), arg(arg='scope', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Scope', ctx=Load()), Constant(value='_ScopeName'), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='Config', ctx=Load())], ctx=Load()), Constant(value='_ScopeName')], ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='unittest', annotation=Name(id='bool', ctx=Load())), arg(arg='ids', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fixturemanager', ctx=Store())], value=Name(id='fixturemanager', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='baseid', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='baseid', ctx=Load()), Constant(value='')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='has_location', ctx=Store())], value=Compare(left=Name(id='baseid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Store())], value=Name(id='func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Store())], value=Name(id='argname', ctx=Load())), If(test=Compare(left=Name(id='scope', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load()))], orelse=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Call(func=Name(id='_eval_scope_callable', ctx=Load()), args=[Name(id='scope', ctx=Load()), Name(id='argname', ctx=Load()), Attribute(value=Name(id='fixturemanager', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='scope', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Call(func=Attribute(value=Name(id='Scope', ctx=Load()), attr='from_user', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[keyword(arg='descr', value=JoinedStr(values=[Constant(value="Fixture '"), FormattedValue(value=Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value="'")])), keyword(arg='where', value=Name(id='baseid', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Store())], value=Name(id='scope', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='params', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='params', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ids', ctx=Store())], value=Name(id='ids', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='argnames', ctx=Store())], value=Call(func=Name(id='getfuncargnames', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='argname', ctx=Load())), keyword(arg='is_method', value=Name(id='unittest', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='unittest', ctx=Store())], value=Name(id='unittest', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='_FixtureCachedResult', ctx=Load()), slice=Name(id='FixtureValue', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_finalizers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scope string, one of "function", "class", "module", "package", "session".')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scope', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='_ScopeName')), FunctionDef(name='addfinalizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finalizer', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finalizers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='finish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Constant(value=None)), Try(body=[While(test=Attribute(value=Name(id='self', ctx=Load()), attr='_finalizers', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='func', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finalizers', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='e', body=[If(test=Compare(left=Name(id='exc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Name(id='e', ctx=Load()))], orelse=[])])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='exc', ctx=Load()), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[])], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='ihook', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_fixture_post_finalizer', ctx=Load()), args=[], keywords=[keyword(arg='fixturedef', value=Name(id='self', ctx=Load())), keyword(arg='request', value=Name(id='request', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_finalizers', ctx=Store())], value=List(elts=[], ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='argname', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='argnames', ctx=Load()), body=[Assign(targets=[Name(id='fixturedef', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='_get_active_fixturedef', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='request')]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fixturedef', ctx=Load()), Name(id='FixtureDef', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='addfinalizer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='finish', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='my_cache_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cache_key', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cache_key', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Name(id='my_cache_key', ctx=Load()), ops=[Is()], comparators=[Name(id='cache_key', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='val', ctx=Store()), Name(id='tb', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), slice=Constant(value=2), ctx=Load())), Raise(exc=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='with_traceback', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Name(id='result', ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finish', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cached_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], orelse=[]), Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='ihook', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_fixture_setup', ctx=Load()), args=[], keywords=[keyword(arg='fixturedef', value=Name(id='self', ctx=Load())), keyword(arg='request', value=Name(id='request', ctx=Load()))])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='FixtureValue', ctx=Load())), FunctionDef(name='cache_key', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='request', ctx=Load()), Constant(value='param')], keywords=[])), body=Attribute(value=Name(id='request', ctx=Load()), attr='param_index', ctx=Load()), orelse=Attribute(value=Name(id='request', ctx=Load()), attr='param', ctx=Load())))], decorator_list=[], returns=Name(id='object', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<FixtureDef argname={!r} scope={!r} baseid={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='argname', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='scope', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='baseid', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='resolve_fixture_function', args=arguments(posonlyargs=[], args=[arg(arg='fixturedef', annotation=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='FixtureValue', ctx=Load()), ctx=Load())), arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the actual callable that can be called to obtain the fixture\n    value, dealing with unittest-specific instances and bound methods.')), Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load())), If(test=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='unittest', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='instance', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load()), attr='__get__', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='instance', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='instance', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load()), Constant(value='__self__')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Attribute(value=Name(id='fixturefunc', ctx=Load()), attr='__self__', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]))]), body=[Return(value=Name(id='fixturefunc', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Name(id='getimfunc', ctx=Load()), args=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fixturefunc', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='func', ctx=Load())]), body=[Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Attribute(value=Name(id='fixturefunc', ctx=Load()), attr='__get__', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='instance', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='fixturefunc', ctx=Load()))], decorator_list=[], returns=Constant(value='_FixtureFunc[FixtureValue]')), FunctionDef(name='pytest_fixture_setup', args=arguments(posonlyargs=[], args=[arg(arg='fixturedef', annotation=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='FixtureValue', ctx=Load()), ctx=Load())), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Execution of fixture setup.')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='argname', ctx=Store()), iter=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argnames', ctx=Load()), body=[Assign(targets=[Name(id='fixdef', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='_get_active_fixturedef', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='fixdef', ctx=Load()), attr='cached_result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='result', ctx=Store()), Name(id='arg_cache_key', ctx=Store()), Name(id='exc', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='fixdef', ctx=Load()), attr='cached_result', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='_check_scope', ctx=Load()), args=[Name(id='argname', ctx=Load()), Attribute(value=Name(id='request', ctx=Load()), attr='_scope', ctx=Load()), Attribute(value=Name(id='fixdef', ctx=Load()), attr='_scope', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fixturefunc', ctx=Store())], value=Call(func=Name(id='resolve_fixture_function', ctx=Load()), args=[Name(id='fixturedef', ctx=Load()), Name(id='request', ctx=Load())], keywords=[])), Assign(targets=[Name(id='my_cache_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cache_key', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='call_fixture_func', ctx=Load()), args=[Name(id='fixturefunc', ctx=Load()), Name(id='request', ctx=Load()), Name(id='kwargs', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TEST_OUTCOME', ctx=Load()), body=[Assign(targets=[Name(id='exc_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='skip', ctx=Load()), attr='Exception', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='fixturefunc', ctx=Load()), attr='__name__', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='xunit_setup')], keywords=[]))]), body=[Assign(targets=[Attribute(value=Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='_use_item_location', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Store())], value=Tuple(elts=[Constant(value=None), Name(id='my_cache_key', ctx=Load()), Name(id='exc_info', ctx=Load())], ctx=Load())), Raise()])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Store())], value=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='my_cache_key', ctx=Load()), Constant(value=None)], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='FixtureValue', ctx=Load())), FunctionDef(name='_ensure_immutable_ids', args=arguments(posonlyargs=[], args=[arg(arg='ids', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='ids', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='ids', ctx=Load())], keywords=[]), body=[Return(value=Name(id='ids', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='ids', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_params_converter', args=arguments(posonlyargs=[], args=[arg(arg='params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='params', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='params', ctx=Load())], keywords=[]), orelse=Constant(value=None)))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='object', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='wrap_function_to_error_out_if_called_directly', args=arguments(posonlyargs=[], args=[arg(arg='function', annotation=Name(id='FixtureFunction', ctx=Load())), arg(arg='fixture_marker', annotation=Constant(value='FixtureFunctionMarker'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrap the given fixture function so we can raise an error about it being called directly,\n    instead of used as an argument in a test function.')), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Fixture "{name}" called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and\nhttps://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='name', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='fixture_marker', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='function', ctx=Load()), attr='__name__', ctx=Load())]))])), FunctionDef(name='result', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='__pytest_wrapped__', ctx=Store())], value=Call(func=Name(id='_PytestWrapper', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='FixtureFunction', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='FixtureFunction', ctx=Load())), ClassDef(name='FixtureFunctionMarker', bases=[], keywords=[], body=[AnnAssign(target=Name(id='scope', ctx=Store()), annotation=Constant(value='Union[_ScopeName, Callable[[str, Config], _ScopeName]]'), simple=1), AnnAssign(target=Name(id='params', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='object', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='autouse', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='ids', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_ispytest', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='InitVar', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=False), simple=1), FunctionDef(name='__post_init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='function', annotation=Name(id='FixtureFunction', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isclass', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='class fixtures not supported (maybe in the future)')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='function', ctx=Load()), Constant(value='_pytestfixturefunction'), Constant(value=False)], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='fixture is being applied more than once to the same function')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='function', ctx=Store())], value=Call(func=Name(id='wrap_function_to_error_out_if_called_directly', ctx=Load()), args=[Name(id='function', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='function', ctx=Load()), attr='__name__', ctx=Load())])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='request')]), body=[Assign(targets=[Name(id='location', ctx=Store())], value=Call(func=Name(id='getlocation', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="'request' is a reserved word for fixtures, use another name:\n  {}"), attr='format', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='function', ctx=Load()), attr='_pytestfixturefunction', ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Name(id='function', ctx=Load()))], decorator_list=[], returns=Name(id='FixtureFunction', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load()), Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), FunctionDef(name='fixture', args=arguments(posonlyargs=[], args=[arg(arg='fixture_function', annotation=Name(id='FixtureFunction', ctx=Load()))], kwonlyargs=[arg(arg='scope', annotation=Constant(value='Union[_ScopeName, Callable[[str, Config], _ScopeName]]')), arg(arg='params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='autouse', annotation=Name(id='bool', ctx=Load())), arg(arg='ids', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=Ellipsis)], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='FixtureFunction', ctx=Load())), FunctionDef(name='fixture', args=arguments(posonlyargs=[], args=[arg(arg='fixture_function', annotation=Constant(value=None))], kwonlyargs=[arg(arg='scope', annotation=Constant(value='Union[_ScopeName, Callable[[str, Config], _ScopeName]]')), arg(arg='params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='autouse', annotation=Name(id='bool', ctx=Load())), arg(arg='ids', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=Ellipsis), Constant(value=None)], defaults=[Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='FixtureFunctionMarker', ctx=Load())), FunctionDef(name='fixture', args=arguments(posonlyargs=[], args=[arg(arg='fixture_function', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FixtureFunction', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='scope', annotation=Constant(value='Union[_ScopeName, Callable[[str, Config], _ScopeName]]')), arg(arg='params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='autouse', annotation=Name(id='bool', ctx=Load())), arg(arg='ids', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value='function'), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Decorator to mark a fixture factory function.\n\n    This decorator can be used, with or without parameters, to define a\n    fixture function.\n\n    The name of the fixture function can later be referenced to cause its\n    invocation ahead of running tests: test modules or classes can use the\n    ``pytest.mark.usefixtures(fixturename)`` marker.\n\n    Test functions can directly use fixture names as input arguments in which\n    case the fixture instance returned from the fixture function will be\n    injected.\n\n    Fixtures can provide their values to test functions using ``return`` or\n    ``yield`` statements. When using ``yield`` the code block after the\n    ``yield`` statement is executed as teardown code regardless of the test\n    outcome, and must yield exactly once.\n\n    :param scope:\n        The scope for which this fixture is shared; one of ``"function"``\n        (default), ``"class"``, ``"module"``, ``"package"`` or ``"session"``.\n\n        This parameter may also be a callable which receives ``(fixture_name, config)``\n        as parameters, and must return a ``str`` with one of the values mentioned above.\n\n        See :ref:`dynamic scope` in the docs for more information.\n\n    :param params:\n        An optional list of parameters which will cause multiple invocations\n        of the fixture function and all of the tests using it. The current\n        parameter is available in ``request.param``.\n\n    :param autouse:\n        If True, the fixture func is activated for all tests that can see it.\n        If False (the default), an explicit reference is needed to activate\n        the fixture.\n\n    :param ids:\n        Sequence of ids each corresponding to the params so that they are\n        part of the test id. If no ids are provided they will be generated\n        automatically from the params.\n\n    :param name:\n        The name of the fixture. This defaults to the name of the decorated\n        function. If a fixture is used in the same module in which it is\n        defined, the function name of the fixture will be shadowed by the\n        function arg that requests the fixture; one way to resolve this is to\n        name the decorated function ``fixture_<fixturename>`` and then use\n        ``@pytest.fixture(name=\'<fixturename>\')``.\n    ')), Assign(targets=[Name(id='fixture_marker', ctx=Store())], value=Call(func=Name(id='FixtureFunctionMarker', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Name(id='scope', ctx=Load())), keyword(arg='params', value=IfExp(test=Compare(left=Name(id='params', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='params', ctx=Load())], keywords=[]), orelse=Constant(value=None))), keyword(arg='autouse', value=Name(id='autouse', ctx=Load())), keyword(arg='ids', value=IfExp(test=Compare(left=Name(id='ids', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=IfExp(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='ids', ctx=Load())], keywords=[]), body=Name(id='ids', ctx=Load()), orelse=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='ids', ctx=Load())], keywords=[])))), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='_ispytest', value=Constant(value=True))])), If(test=Name(id='fixture_function', ctx=Load()), body=[Return(value=Call(func=Name(id='fixture_marker', ctx=Load()), args=[Name(id='fixture_function', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='fixture_marker', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='FixtureFunctionMarker', ctx=Load()), Name(id='FixtureFunction', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='yield_fixture', args=arguments(posonlyargs=[], args=[arg(arg='fixture_function')], vararg=arg(arg='args'), kwonlyargs=[arg(arg='scope'), arg(arg='params'), arg(arg='autouse'), arg(arg='ids'), arg(arg='name')], kw_defaults=[Constant(value='function'), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='(Return a) decorator to mark a yield-fixture factory function.\n\n    .. deprecated:: 3.0\n        Use :py:func:`pytest.fixture` directly instead.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='YIELD_FIXTURE', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Call(func=Name(id='fixture', ctx=Load()), args=[Name(id='fixture_function', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='scope', value=Name(id='scope', ctx=Load())), keyword(arg='params', value=Name(id='params', ctx=Load())), keyword(arg='autouse', value=Name(id='autouse', ctx=Load())), keyword(arg='ids', value=Name(id='ids', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='pytestconfig', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Session-scoped fixture that returns the session\'s :class:`pytest.Config`\n    object.\n\n    Example::\n\n        def test_foo(pytestconfig):\n            if pytestconfig.getoption("verbose") > 0:\n                ...\n\n    ')), Return(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()))], decorator_list=[Call(func=Name(id='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Constant(value='session'))])], returns=Name(id='Config', ctx=Load())), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='usefixtures')], keywords=[keyword(arg='type', value=Constant(value='args')), keyword(arg='default', value=List(elts=[], ctx=Load())), keyword(arg='help', value=Constant(value='List of default fixtures to be used with this project'))]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='FixtureManager', bases=[], keywords=[], body=[Expr(value=Constant(value='pytest fixture definitions and information is stored and managed\n    from this class.\n\n    During collection fm.parsefactories() is called multiple times to parse\n    fixture function definitions into FixtureDef objects and internal\n    data structures.\n\n    During collection of test functions, metafunc-mechanics instantiate\n    a FuncFixtureInfo object which is cached per node/func-name.\n    This FuncFixtureInfo object is later retrieved by Function nodes\n    which themselves offer a fixturenames attribute.\n\n    The FuncFixtureInfo object holds information about fixtures and FixtureDefs\n    relevant for a particular function. An initial list of fixtures is\n    assembled like this:\n\n    - ini-defined usefixtures\n    - autouse-marked fixtures along the collection chain up from the function\n    - usefixtures markers at module/class/function level\n    - test function funcargs\n\n    Subsequently the funcfixtureinfo.fixturenames attribute is computed\n    as the closure of the fixtures needed to setup the initial fixtures,\n    i.e. fixtures needed by fixture functions themselves are appended\n    to the fixturenames list.\n\n    Upon the test-setup phases all fixturenames are instantiated, retrieved\n    by a lookup of their FuncFixtureInfo.\n    ')), Assign(targets=[Name(id='FixtureLookupError', ctx=Store())], value=Name(id='FixtureLookupError', ctx=Load())), Assign(targets=[Name(id='FixtureLookupErrorRepr', ctx=Store())], value=Name(id='FixtureLookupErrorRepr', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store())], value=Name(id='session', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store()), annotation=Name(id='Config', ctx=Load()), value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_holderobjseen', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_nodeid_autousenames', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='usefixtures')], keywords=[])]), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='funcmanage')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_direct_parametrize_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return all direct parametrization arguments of a node, so we don't\n        mistake them for fixtures.\n\n        Check https://github.com/pytest-dev/pytest/issues/5036.\n\n        These things are done later as well when dealing with parametrization\n        so this could be improved.\n        ")), AnnAssign(target=Name(id='parametrize_argnames', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='marker', ctx=Store()), iter=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='parametrize'))]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='marker', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='indirect'), Constant(value=False)], keywords=[])), body=[Assign(targets=[Tuple(elts=[Name(id='p_argnames', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ParameterSet', ctx=Load()), attr='_parse_parametrize_args', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='marker', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='marker', ctx=Load()), attr='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='parametrize_argnames', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='p_argnames', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='parametrize_argnames', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='getfixtureinfo', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())), arg(arg='func'), arg(arg='cls'), arg(arg='funcargs', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=BoolOp(op=And(), values=[Name(id='funcargs', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='node', ctx=Load()), Constant(value='nofuncargs'), Constant(value=False)], keywords=[]))]), body=[Assign(targets=[Name(id='argnames', ctx=Store())], value=Call(func=Name(id='getfuncargnames', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[keyword(arg='name', value=Attribute(value=Name(id='node', ctx=Load()), attr='name', ctx=Load())), keyword(arg='cls', value=Name(id='cls', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='argnames', ctx=Store())], value=Tuple(elts=[], ctx=Load()))]), Assign(targets=[Name(id='usefixtures', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='arg', ctx=Load()), generators=[comprehension(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='usefixtures'))]), ifs=[], is_async=0), comprehension(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='initialnames', ctx=Store())], value=BinOp(left=Name(id='usefixtures', ctx=Load()), op=Add(), right=Name(id='argnames', ctx=Load()))), Assign(targets=[Name(id='fm', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='session', ctx=Load()), attr='_fixturemanager', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='initialnames', ctx=Store()), Name(id='names_closure', ctx=Store()), Name(id='arg2fixturedefs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='fm', ctx=Load()), attr='getfixtureclosure', ctx=Load()), args=[Name(id='initialnames', ctx=Load()), Name(id='node', ctx=Load())], keywords=[keyword(arg='ignore_args', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_direct_parametrize_args', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))])), Return(value=Call(func=Name(id='FuncFixtureInfo', ctx=Load()), args=[Name(id='argnames', ctx=Load()), Name(id='initialnames', ctx=Load()), Name(id='names_closure', ctx=Load()), Name(id='arg2fixturedefs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='FuncFixtureInfo', ctx=Load())), FunctionDef(name='pytest_plugin_registered', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plugin', annotation=Name(id='_PluggyPlugin', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Attribute(value=Name(id='plugin', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='conftest.py')], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='parent', ctx=Load()), attr='relative_to', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Constant(value=''))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='nodeid', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Constant(value=''))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='nodes', ctx=Load()), attr='SEP', ctx=Load())]), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodeid', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='SEP', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parsefactories', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Name(id='nodeid', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_getautousenames', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the names of autouse fixtures applicable to nodeid.')), For(target=Name(id='parentnodeid', ctx=Store()), iter=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='iterparentnodeids', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_nodeid_autousenames', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='parentnodeid', ctx=Load())], keywords=[])), If(test=Name(id='basenames', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='basenames', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='getfixtureclosure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturenames', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), arg(arg='parentnode', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())), arg(arg='ignore_args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='parentid', ctx=Store())], value=Attribute(value=Name(id='parentnode', ctx=Load()), attr='nodeid', ctx=Load())), Assign(targets=[Name(id='fixturenames_closure', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getautousenames', ctx=Load()), args=[Name(id='parentid', ctx=Load())], keywords=[])], keywords=[])), FunctionDef(name='merge', args=arguments(posonlyargs=[], args=[arg(arg='otherlist', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='arg', ctx=Store()), iter=Name(id='otherlist', ctx=Load()), body=[If(test=Compare(left=Name(id='arg', ctx=Load()), ops=[NotIn()], comparators=[Name(id='fixturenames_closure', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='fixturenames_closure', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='merge', ctx=Load()), args=[Name(id='fixturenames', ctx=Load())], keywords=[])), Assign(targets=[Name(id='initialnames', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='fixturenames_closure', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='arg2fixturedefs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='lastlen', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=Compare(left=Name(id='lastlen', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='fixturenames_closure', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='lastlen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fixturenames_closure', ctx=Load())], keywords=[])), For(target=Name(id='argname', ctx=Store()), iter=Name(id='fixturenames_closure', ctx=Load()), body=[If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Name(id='ignore_args', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Name(id='arg2fixturedefs', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='fixturedefs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getfixturedefs', ctx=Load()), args=[Name(id='argname', ctx=Load()), Name(id='parentid', ctx=Load())], keywords=[])), If(test=Name(id='fixturedefs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='arg2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Store())], value=Name(id='fixturedefs', ctx=Load())), Expr(value=Call(func=Name(id='merge', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='fixturedefs', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='argnames', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), FunctionDef(name='sort_by_scope', args=arguments(posonlyargs=[], args=[arg(arg='arg_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='fixturedefs', ctx=Store())], value=Subscript(value=Name(id='arg2fixturedefs', ctx=Load()), slice=Name(id='arg_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load()))])], orelse=[Return(value=Attribute(value=Subscript(value=Name(id='fixturedefs', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='_scope', ctx=Load()))], finalbody=[])], decorator_list=[], returns=Name(id='Scope', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='fixturenames_closure', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='sort_by_scope', ctx=Load())), keyword(arg='reverse', value=Constant(value=True))])), Return(value=Tuple(elts=[Name(id='initialnames', ctx=Load()), Name(id='fixturenames_closure', ctx=Load()), Name(id='arg2fixturedefs', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_generate_tests', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metafunc', annotation=Constant(value='Metafunc'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate new tests based on parametrized fixtures used by the given metafunc')), FunctionDef(name='get_parametrize_mark_argnames', args=arguments(posonlyargs=[], args=[arg(arg='mark', annotation=Name(id='Mark', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='args', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ParameterSet', ctx=Load()), attr='_parse_parametrize_args', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()))])), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), For(target=Name(id='argname', ctx=Store()), iter=Attribute(value=Name(id='metafunc', ctx=Load()), attr='fixturenames', ctx=Load()), body=[Assign(targets=[Name(id='fixture_defs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='metafunc', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='argname', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='fixture_defs', ctx=Load())), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='argname', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='get_parametrize_mark_argnames', ctx=Load()), args=[Name(id='mark', ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='metafunc', ctx=Load()), attr='definition', ctx=Load()), attr='iter_markers', ctx=Load()), args=[Constant(value='parametrize')], keywords=[]), ifs=[], is_async=0)])], keywords=[]), body=[Continue()], orelse=[]), For(target=Name(id='fixturedef', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='fixture_defs', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='params', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='metafunc', ctx=Load()), attr='parametrize', ctx=Load()), args=[Name(id='argname', ctx=Load()), Attribute(value=Name(id='fixturedef', ctx=Load()), attr='params', ctx=Load())], keywords=[keyword(arg='indirect', value=Constant(value=True)), keyword(arg='scope', value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='scope', ctx=Load())), keyword(arg='ids', value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='ids', ctx=Load()))])), Break()], orelse=[]), If(test=Compare(left=Name(id='argname', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='argnames', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collection_modifyitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=Call(func=Name(id='reorder_items', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='parsefactories', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node_or_obj', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()))], kwonlyargs=[arg(arg='unittest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=Ellipsis)], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='parsefactories', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node_or_obj', annotation=Name(id='object', ctx=Load())), arg(arg='nodeid', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='unittest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=Ellipsis)], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='parsefactories', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node_or_obj', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='nodeid', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='NotSetType', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='unittest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Name(id='NOTSET', ctx=Load())]), body=[Expr(value=Constant(value='Collect fixtures from a collection node or object.\n\n        Found fixtures are parsed into `FixtureDef`s and saved.\n\n        If `node_or_object` is a collection node (with an underlying Python\n        object), the node\'s object is traversed and the node\'s nodeid is used to\n        determine the fixtures\' visibilty. `nodeid` must not be specified in\n        this case.\n\n        If `node_or_object` is an object (e.g. a plugin), the object is\n        traversed and the given `nodeid` is used to determine the fixtures\'\n        visibility. `nodeid` must be specified in this case; None and "" mean\n        total visibility.\n        ')), If(test=Compare(left=Name(id='nodeid', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTSET', ctx=Load())]), body=[Assign(targets=[Name(id='holderobj', ctx=Store())], value=Name(id='node_or_obj', ctx=Load()))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node_or_obj', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='holderobj', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='object', ctx=Load()), Attribute(value=Name(id='node_or_obj', ctx=Load()), attr='obj', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node_or_obj', ctx=Load()), attr='nodeid', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nodeid', ctx=Store())], value=Attribute(value=Name(id='node_or_obj', ctx=Load()), attr='nodeid', ctx=Load()))]), If(test=Compare(left=Name(id='holderobj', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_holderobjseen', ctx=Load())]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_holderobjseen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='holderobj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='autousenames', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='holderobj', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='holderobj', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())], keywords=[]), Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='fspath')])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='safe_getattr', ctx=Load()), args=[Name(id='holderobj', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Name(id='getfixturemarker', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='marker', ctx=Load()), Name(id='FixtureFunctionMarker', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), If(test=Attribute(value=Name(id='marker', ctx=Load()), attr='name', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='marker', ctx=Load()), attr='name', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='get_real_method', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='holderobj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fixture_def', ctx=Store())], value=Call(func=Name(id='FixtureDef', ctx=Load()), args=[], keywords=[keyword(arg='fixturemanager', value=Name(id='self', ctx=Load())), keyword(arg='baseid', value=Name(id='nodeid', ctx=Load())), keyword(arg='argname', value=Name(id='name', ctx=Load())), keyword(arg='func', value=Name(id='obj', ctx=Load())), keyword(arg='scope', value=Attribute(value=Name(id='marker', ctx=Load()), attr='scope', ctx=Load())), keyword(arg='params', value=Attribute(value=Name(id='marker', ctx=Load()), attr='params', ctx=Load())), keyword(arg='unittest', value=Name(id='unittest', ctx=Load())), keyword(arg='ids', value=Attribute(value=Name(id='marker', ctx=Load()), attr='ids', ctx=Load()))])), Assign(targets=[Name(id='faclist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='name', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='fixture_def', ctx=Load()), attr='has_location', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='faclist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fixture_def', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='faclist', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='f', ctx=Load()), attr='has_location', ctx=Load()))], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='faclist', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='fixture_def', ctx=Load())], keywords=[]))]), If(test=Attribute(value=Name(id='marker', ctx=Load()), attr='autouse', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='autousenames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='autousenames', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_nodeid_autousenames', ctx=Load()), attr='setdefault', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='nodeid', ctx=Load()), Constant(value='')]), List(elts=[], ctx=Load())], keywords=[]), attr='extend', ctx=Load()), args=[Name(id='autousenames', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getfixturedefs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argname', annotation=Name(id='str', ctx=Load())), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a list of fixtures which are applicable to the given node id.\n\n        :param str argname: Name of the fixture to search for.\n        :param str nodeid: Full node id of the requesting test.\n        :rtype: Sequence[FixtureDef]\n        ')), Try(body=[Assign(targets=[Name(id='fixturedefs', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg2fixturedefs', ctx=Load()), slice=Name(id='argname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_matchfactories', ctx=Load()), args=[Name(id='fixturedefs', ctx=Load()), Name(id='nodeid', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_matchfactories', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fixturedefs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parentnodeids', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='iterparentnodeids', ctx=Load()), args=[Name(id='nodeid', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='fixturedef', ctx=Store()), iter=Name(id='fixturedefs', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='baseid', ctx=Load()), ops=[In()], comparators=[Name(id='parentnodeids', ctx=Load())]), body=[Expr(value=Yield(value=Name(id='fixturedef', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])