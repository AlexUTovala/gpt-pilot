Module(body=[Expr(value=Constant(value='Implementation of the cache provider.')), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='pathlib', names=[alias(name='resolve_from_str')], level=1), ImportFrom(module='pathlib', names=[alias(name='rm_rf')], level=1), ImportFrom(module='reports', names=[alias(name='CollectReport')], level=1), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='File')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Package')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), Assign(targets=[Name(id='README_CONTENT', ctx=Store())], value=Constant(value="# pytest cache directory #\n\nThis directory contains data from the pytest's cache plugin,\nwhich provides the `--lf` and `--ff` options, as well as the `cache` fixture.\n\n**Do not** commit this to version control.\n\nSee [the docs](https://docs.pytest.org/en/stable/how-to/cache.html) for more information.\n")), Assign(targets=[Name(id='CACHEDIR_TAG_CONTENT', ctx=Store())], value=Constant(value=b'Signature: 8a477f597d28d172789f06886806bc55\n# This file is a cache directory tag created by pytest.\n# For information about cache directory tags, see:\n#\thttps://bford.info/cachedir/spec.html\n')), ClassDef(name='Cache', bases=[], keywords=[], body=[Expr(value=Constant(value='Instance of the `cache` fixture.')), AnnAssign(target=Name(id='_cachedir', ctx=Store()), annotation=Name(id='Path', ctx=Load()), value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='field', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Constant(value=False))]), simple=1), AnnAssign(target=Name(id='_config', ctx=Store()), annotation=Name(id='Config', ctx=Load()), value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='field', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Constant(value=False))]), simple=1), Assign(targets=[Name(id='_CACHE_PREFIX_DIRS', ctx=Store())], value=Constant(value='d')), Assign(targets=[Name(id='_CACHE_PREFIX_VALUES', ctx=Store())], value=Constant(value='v')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cachedir', annotation=Name(id='Path', ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Store())], value=Name(id='cachedir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='for_config', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Create the Cache instance for a Config.\n\n        :meta private:\n        ')), Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cachedir', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='cache_dir_from_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='cacheclear')], keywords=[]), Call(func=Attribute(value=Name(id='cachedir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='clear_cache', ctx=Load()), args=[Name(id='cachedir', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='cachedir', ctx=Load()), Name(id='config', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Cache')), FunctionDef(name='clear_cache', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='cachedir', annotation=Name(id='Path', ctx=Load())), arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Clear the sub-directories used to hold cached directories and values.\n\n        :meta private:\n        ')), Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), For(target=Name(id='prefix', ctx=Store()), iter=Tuple(elts=[Attribute(value=Name(id='cls', ctx=Load()), attr='_CACHE_PREFIX_DIRS', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='_CACHE_PREFIX_VALUES', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=Name(id='cachedir', ctx=Load()), op=Div(), right=Name(id='prefix', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='rm_rf', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cache_dir_from_config', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Get the path to the cache directory for a Config.\n\n        :meta private:\n        ')), Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='resolve_from_str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='cache_dir')], keywords=[]), Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fmt', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], kwarg=arg(arg='args', annotation=Name(id='object', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Issue a cache warning.\n\n        :meta private:\n        ')), Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Import(names=[alias(name='warnings')]), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestCacheWarning')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='PytestCacheWarning', ctx=Load()), args=[IfExp(test=Name(id='args', ctx=Load()), body=Call(func=Attribute(value=Name(id='fmt', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Name(id='args', ctx=Load()))]), orelse=Name(id='fmt', ctx=Load()))], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='hook', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=3))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='mkdir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='path', ctx=Load()), attr='parts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='name is not allowed to contain path separators')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), attr='joinpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_CACHE_PREFIX_DIRS', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='exist_ok', value=Constant(value=True)), keyword(arg='parents', value=Constant(value=True))])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='_getvaluepath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), attr='joinpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_CACHE_PREFIX_VALUES', ctx=Load()), Call(func=Name(id='Path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getvaluepath', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Save value for the given key.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param value:\n            Must be of any combination of basic python types,\n            including nested types like lists of dictionaries.\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getvaluepath', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Try(body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='path', ctx=Load()), attr='parent', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cache_dir_exists_already', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='cache_dir_exists_already', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='path', ctx=Load()), attr='parent', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='exist_ok', value=Constant(value=True)), keyword(arg='parents', value=Constant(value=True))]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='could not create cache path '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Return()])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='cache_dir_exists_already', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_supporting_files', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='ensure_ascii', value=Constant(value=False)), keyword(arg='indent', value=Constant(value=2))])), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='cache could not write path '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))])], orelse=[With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_ensure_supporting_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create supporting files in the cache dir that are not really part of the cache.')), Assign(targets=[Name(id='readme_path', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), op=Div(), right=Constant(value='README.md'))), Expr(value=Call(func=Attribute(value=Name(id='readme_path', ctx=Load()), attr='write_text', ctx=Load()), args=[Name(id='README_CONTENT', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))])), Assign(targets=[Name(id='gitignore_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='.gitignore')], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='# Created by pytest automatically.\n*\n')), Expr(value=Call(func=Attribute(value=Name(id='gitignore_path', ctx=Load()), attr='write_text', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))])), Assign(targets=[Name(id='cachedir_tag_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cachedir', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='CACHEDIR.TAG')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cachedir_tag_path', ctx=Load()), attr='write_bytes', ctx=Load()), args=[Name(id='CACHEDIR_TAG_CONTENT', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='LFPluginCollWrapper', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lfplugin', annotation=Constant(value='LFPlugin'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Store())], value=Name(id='lfplugin', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_collected_at_least_one_failure', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_make_collect_report', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='collector', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Tuple(elts=[Name(id='Session', ctx=Load()), Name(id='Package', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Yield()), AnnAssign(target=Name(id='res', ctx=Store()), annotation=Name(id='CollectReport', ctx=Load()), value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='lf_paths', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='_last_failed_paths', ctx=Load())), FunctionDef(name='sort_key', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Package', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='path', ctx=Load()), attr='parent', ctx=Load()))], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='node', ctx=Load()), attr='path', ctx=Load()))]), Return(value=Compare(left=Name(id='path', ctx=Load()), ops=[In()], comparators=[Name(id='lf_paths', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Attribute(value=Name(id='res', ctx=Load()), attr='result', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='res', ctx=Load()), attr='result', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='sort_key', ctx=Load())), keyword(arg='reverse', value=Constant(value=True))])), Return()], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Name(id='File', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='collector', ctx=Load()), attr='path', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='_last_failed_paths', ctx=Load())]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Yield()), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='res', ctx=Load()), attr='result', ctx=Load())), Assign(targets=[Name(id='lastfailed', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='lastfailed', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_collected_at_least_one_failure', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='nodeid', ctx=Load()), ops=[In()], comparators=[Name(id='lastfailed', ctx=Load())]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='result', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='LFPluginCollSkipfiles', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load())], keywords=[]), Constant(value='lfplugin-collskip')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_collected_at_least_one_failure', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='session', ctx=Store())], value=Attribute(value=Name(id='collector', ctx=Load()), attr='session', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Slice(), ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='result', ctx=Load()), ifs=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='nodeid', ctx=Load()), ops=[In()], comparators=[Name(id='lastfailed', ctx=Load())]), Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='isinitpath', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], keywords=[])])], is_async=0)])), Return()], orelse=[])], orelse=[])]), Expr(value=Yield())], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])])], decorator_list=[]), ClassDef(name='LFPluginCollSkipfiles', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lfplugin', annotation=Constant(value='LFPlugin'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Store())], value=Name(id='lfplugin', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_make_collect_report', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='collector', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Name(id='File', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='collector', ctx=Load()), Name(id='Package', ctx=Load())], keywords=[]))]), body=[If(test=Compare(left=Attribute(value=Name(id='collector', ctx=Load()), attr='path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='_last_failed_paths', ctx=Load())]), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lfplugin', ctx=Load()), attr='_skipped_files', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='CollectReport', ctx=Load()), args=[Attribute(value=Name(id='collector', ctx=Load()), attr='nodeid', ctx=Load()), Constant(value='passed')], keywords=[keyword(arg='longrepr', value=Constant(value=None)), keyword(arg='result', value=List(elts=[], ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CollectReport', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='LFPlugin', bases=[], keywords=[], body=[Expr(value=Constant(value='Plugin which implements the --lf (run last-failing) option.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Name(id='active_keys', ctx=Store())], value=Tuple(elts=[Constant(value='lf'), Constant(value='failedfirst')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='active_keys', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assert(test=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cache/lastfailed'), Dict(keys=[], values=[])], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_previously_failed_count', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_skipped_files', ctx=Store())], value=Constant(value=0)), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='lf')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_failed_paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_last_failed_paths', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='LFPluginCollWrapper', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Constant(value='lfplugin-collwrapper')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_last_failed_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a set with all Paths of the previously failed nodeids and\n        their parents.')), Assign(targets=[Name(id='rootpath', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='nodeid', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Name(id='rootpath', ctx=Load()), op=Div(), right=Subscript(value=Call(func=Attribute(value=Name(id='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[]), slice=Constant(value=0), ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='path', ctx=Load()), attr='parents', ctx=Load())], keywords=[]))], orelse=[]), Return(value=SetComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='result', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_report_collectionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='verbose')], keywords=[]), ops=[GtE()], comparators=[Constant(value=0)])]), body=[Return(value=BinOp(left=Constant(value='run-last-failure: %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load())]), Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), slice=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collectreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='CollectReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='passed', ctx=Store())], value=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='outcome', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='passed'), Constant(value='skipped')], ctx=Load())])), If(test=Name(id='passed', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), Constant(value=True)], ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='report', ctx=Load()), attr='result', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), slice=Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load()), ctx=Store())], value=Constant(value=True))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collection_modifyitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='items', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield()), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Load())), body=[Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load()), body=[Assign(targets=[Name(id='previously_failed', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='previously_passed', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='previously_failed', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='previously_passed', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_previously_failed_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='previously_failed', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='previously_failed', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store())], value=BinOp(left=Constant(value='%d known failures not in selected tests'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='lf')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='previously_failed', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_deselected', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Name(id='previously_passed', ctx=Load()))]))], orelse=[Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=Name(id='previously_failed', ctx=Load()), op=Add(), right=Name(id='previously_passed', ctx=Load())))]), Assign(targets=[Name(id='noun', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_previously_failed_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='failure'), orelse=Constant(value='failures'))), Assign(targets=[Name(id='suffix', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='failedfirst')], keywords=[]), body=Constant(value=' first'), orelse=Constant(value=''))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store())], value=Call(func=Attribute(value=Constant(value='rerun previous {count} {noun}{suffix}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='self', ctx=Load()), attr='_previously_failed_count', ctx=Load())), keyword(arg='suffix', value=Name(id='suffix', ctx=Load())), keyword(arg='noun', value=Name(id='noun', ctx=Load()))]))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_skipped_files', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='files_noun', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_skipped_files', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='file'), orelse=Constant(value='files'))), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=' (skipped {files} {files_noun})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Attribute(value=Name(id='self', ctx=Load()), attr='_skipped_files', ctx=Load())), keyword(arg='files_noun', value=Name(id='files_noun', ctx=Load()))]))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store())], value=Constant(value='no previously failed tests, ')), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='last_failed_no_failures')], keywords=[]), ops=[Eq()], comparators=[Constant(value='none')]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store()), op=Add(), value=Constant(value='deselecting all items.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_deselected', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_report_status', ctx=Store()), op=Add(), value=Constant(value='not deselecting items.'))])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='cacheshow')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='workerinput')], keywords=[])]), body=[Return()], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='saved_lastfailed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cache/lastfailed'), Dict(keys=[], values=[])], keywords=[])), If(test=Compare(left=Name(id='saved_lastfailed', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='cache/lastfailed'), Attribute(value=Name(id='self', ctx=Load()), attr='lastfailed', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='NFPlugin', bases=[], keywords=[], body=[Expr(value=Constant(value='Plugin which implements the --nf (run new-first) option.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='newfirst', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cached_nodeids', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cache/nodeids'), List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collection_modifyitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield()), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Load()), body=[AnnAssign(target=Name(id='new_items', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='other_items', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='cached_nodeids', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_items', ctx=Load()), slice=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), ctx=Store())], value=Name(id='item', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='other_items', ctx=Load()), slice=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), ctx=Store())], value=Name(id='item', ctx=Load()))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_increasing_order', ctx=Load()), args=[Call(func=Attribute(value=Name(id='new_items', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_increasing_order', ctx=Load()), args=[Call(func=Attribute(value=Name(id='other_items', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_nodeids', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='new_items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cached_nodeids', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_get_increasing_order', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='path', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]), attr='st_mtime', ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='cacheshow')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='workerinput')], keywords=[])]), body=[Return()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='collectonly')], keywords=[]), body=[Return()], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='cache/nodeids'), Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cached_nodeids', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--lf'), Constant(value='--last-failed')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='lf')), keyword(arg='help', value=Constant(value='Rerun only the tests that failed at the last run (or all if none failed)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--ff'), Constant(value='--failed-first')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='failedfirst')), keyword(arg='help', value=Constant(value='Run all tests, but run the last failures first. This may re-order tests and thus lead to repeated fixture setup/teardown.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--nf'), Constant(value='--new-first')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='newfirst')), keyword(arg='help', value=Constant(value='Run tests from new files first, then the rest of the tests sorted by file mtime'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--cache-show')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='nargs', value=Constant(value='?')), keyword(arg='dest', value=Constant(value='cacheshow')), keyword(arg='help', value=Constant(value="Show cache contents, don't perform collection or tests. Optional argument: glob (default: '*')."))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--cache-clear')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='cacheclear')), keyword(arg='help', value=Constant(value='Remove all cache contents at start of test run'))])), Assign(targets=[Name(id='cache_dir_default', ctx=Store())], value=Constant(value='.pytest_cache')), If(test=Compare(left=Constant(value='TOX_ENV_DIR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cache_dir_default', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='TOX_ENV_DIR'), ctx=Load()), Name(id='cache_dir_default', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='cache_dir')], keywords=[keyword(arg='default', value=Name(id='cache_dir_default', ctx=Load())), keyword(arg='help', value=Constant(value='Cache directory path'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--lfnf'), Constant(value='--last-failed-no-failures')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='last_failed_no_failures')), keyword(arg='choices', value=Tuple(elts=[Constant(value='all'), Constant(value='none')], ctx=Load())), keyword(arg='default', value=Constant(value='all')), keyword(arg='help', value=Constant(value='With ``--lf``, determines whether to execute tests when there are no previously (known) failures or when no cached ``lastfailed`` data was found. ``all`` (the default) runs the full test suite again. ``none`` just emits a message about no known failures and exits successfully.'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_cmdline_main', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='cacheshow', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='help', ctx=Load()))]), body=[ImportFrom(module='_pytest.main', names=[alias(name='wrap_session')], level=0), Return(value=Call(func=Name(id='wrap_session', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='cacheshow', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Store())], value=Call(func=Attribute(value=Name(id='Cache', ctx=Load()), attr='for_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='LFPlugin', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]), Constant(value='lfplugin')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='NFPlugin', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]), Constant(value='nfplugin')], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='cache', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a cache object that can persist state between testing sessions.\n\n    cache.get(key, default)\n    cache.set(key, value)\n\n    Keys must be ``/`` separated strings, where the first part is usually the\n    name of your plugin or application to avoid clashes with other cache users.\n\n    Values can be any object handled by the json stdlib module.\n    ')), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='cache', ctx=Load()))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Name(id='Cache', ctx=Load())), FunctionDef(name='pytest_report_header', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Display cachedir with --cache-show and if non-default.')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='cache_dir')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='.pytest_cache')])]), body=[Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='cachedir', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='_cachedir', ctx=Load())), Try(body=[Assign(targets=[Name(id='displaypath', ctx=Store())], value=Call(func=Attribute(value=Name(id='cachedir', ctx=Load()), attr='relative_to', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='displaypath', ctx=Store())], value=Name(id='cachedir', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=JoinedStr(values=[Constant(value='cachedir: '), FormattedValue(value=Name(id='displaypath', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='cacheshow', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pprint', names=[alias(name='pformat')], level=0), Assert(test=Compare(left=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='cachedir: '), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='_cachedir', ctx=Load())], keywords=[]))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='_cachedir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='cache is empty')], keywords=[])), Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='glob', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='cacheshow', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='glob', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='glob', ctx=Store())], value=Constant(value='*'))], orelse=[]), Assign(targets=[Name(id='dummy', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='basedir', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='_cachedir', ctx=Load())), Assign(targets=[Name(id='vdir', ctx=Store())], value=BinOp(left=Name(id='basedir', ctx=Load()), op=Div(), right=Attribute(value=Name(id='Cache', ctx=Load()), attr='_CACHE_PREFIX_VALUES', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='-'), BinOp(left=Constant(value='cache values for %r'), op=Mod(), right=Name(id='glob', ctx=Load()))], keywords=[])), For(target=Name(id='valpath', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='vdir', ctx=Load()), attr='rglob', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[])], is_async=0)])], keywords=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='valpath', ctx=Load()), attr='relative_to', ctx=Load()), args=[Name(id='vdir', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='dummy', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Is()], comparators=[Name(id='dummy', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='%s contains unreadable content, will be ignored'), op=Mod(), right=Name(id='key', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='%s contains:'), op=Mod(), right=Name(id='key', ctx=Load()))], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='pformat', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='  '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='ddir', ctx=Store())], value=BinOp(left=Name(id='basedir', ctx=Load()), op=Div(), right=Attribute(value=Name(id='Cache', ctx=Load()), attr='_CACHE_PREFIX_DIRS', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='ddir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ddir', ctx=Load()), attr='rglob', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='sep', ctx=Load()), args=[Constant(value='-'), BinOp(left=Constant(value='cache directories for %r'), op=Mod(), right=Name(id='glob', ctx=Load()))], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='contents', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='relative_to', ctx=Load()), args=[Name(id='basedir', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=' is a file of length '), FormattedValue(value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]), attr='st_size', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='d')]))])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load()))], type_ignores=[])