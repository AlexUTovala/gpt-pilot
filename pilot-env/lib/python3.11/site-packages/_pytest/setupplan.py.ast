Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureDef')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='SubRequest')], level=0), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='debugconfig')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--setupplan'), Constant(value='--setup-plan')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value="Show what fixtures and tests would be executed but don't execute anything"))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_fixture_setup', args=arguments(posonlyargs=[], args=[arg(arg='fixturedef', annotation=Subscript(value=Name(id='FixtureDef', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='request', annotation=Name(id='SubRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='setupplan', ctx=Load()), body=[Assign(targets=[Name(id='my_cache_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cache_key', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Store())], value=Tuple(elts=[Constant(value=None), Name(id='my_cache_key', ctx=Load()), Constant(value=None)], ctx=Load())), Return(value=Attribute(value=Name(id='fixturedef', ctx=Load()), attr='cached_result', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_cmdline_main', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='setupplan', ctx=Load()), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='setuponly', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='setupshow', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])