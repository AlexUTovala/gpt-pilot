Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='iniconfig')]), ImportFrom(module='exceptions', names=[alias(name='UsageError')], level=1), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='commonpath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='safe_exists')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(names=[alias(name='Config')], level=1)], orelse=[]), FunctionDef(name='_parse_ini_config', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse the given generic '.ini' file using legacy IniConfig parser, returning\n    the parsed object.\n\n    Raise UsageError if the file cannot be parsed.\n    ")), Try(body=[Return(value=Call(func=Attribute(value=Name(id='iniconfig', ctx=Load()), attr='IniConfig', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='iniconfig', ctx=Load()), attr='ParseError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='iniconfig', ctx=Load()), attr='IniConfig', ctx=Load())), FunctionDef(name='load_config_dict_from_file', args=arguments(posonlyargs=[], args=[arg(arg='filepath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load pytest configuration from the given file path, if supported.\n\n    Return None if the file does not contain valid pytest configuration.\n    ')), If(test=Compare(left=Attribute(value=Name(id='filepath', ctx=Load()), attr='suffix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.ini')]), body=[Assign(targets=[Name(id='iniconfig', ctx=Store())], value=Call(func=Name(id='_parse_ini_config', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='pytest'), ops=[In()], comparators=[Name(id='iniconfig', ctx=Load())]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='iniconfig', ctx=Load()), slice=Constant(value='pytest'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='filepath', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pytest.ini')]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[])])], orelse=[If(test=Compare(left=Attribute(value=Name(id='filepath', ctx=Load()), attr='suffix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.cfg')]), body=[Assign(targets=[Name(id='iniconfig', ctx=Store())], value=Call(func=Name(id='_parse_ini_config', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='tool:pytest'), ops=[In()], comparators=[Attribute(value=Name(id='iniconfig', ctx=Load()), attr='sections', ctx=Load())]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='iniconfig', ctx=Load()), slice=Constant(value='tool:pytest'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='pytest'), ops=[In()], comparators=[Attribute(value=Name(id='iniconfig', ctx=Load()), attr='sections', ctx=Load())]), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Name(id='CFG_PYTEST_SECTION', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='filename', value=Constant(value='setup.cfg'))])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[])])], orelse=[If(test=Compare(left=Attribute(value=Name(id='filepath', ctx=Load()), attr='suffix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.toml')]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), body=[Import(names=[alias(name='tomllib')])], orelse=[Import(names=[alias(name='tomli', asname='tomllib')])]), Assign(targets=[Name(id='toml_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='filepath', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Try(body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='tomllib', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='toml_text', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='tomllib', ctx=Load()), attr='TOMLDecodeError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='filepath', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[]), cause=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='pytest'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='ini_options'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[FunctionDef(name='make_scalar', args=arguments(posonlyargs=[], args=[arg(arg='v', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Name(id='v', ctx=Load()), orelse=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Name(id='make_scalar', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[])], orelse=[])])]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='locate_config', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Search in the list of arguments for a valid ini-file for pytest,\n    and return a tuple of (rootdir, inifile, cfg-dict).')), Assign(targets=[Name(id='config_names', ctx=Store())], value=List(elts=[Constant(value='pytest.ini'), Constant(value='.pytest.ini'), Constant(value='pyproject.toml'), Constant(value='tox.ini'), Constant(value='setup.cfg')], ctx=Load())), Assign(targets=[Name(id='args', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='-')], keywords=[]))], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[]), For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='argpath', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), For(target=Name(id='base', ctx=Store()), iter=Tuple(elts=[Name(id='argpath', ctx=Load()), Starred(value=Attribute(value=Name(id='argpath', ctx=Load()), attr='parents', ctx=Load()), ctx=Load())], ctx=Load()), body=[For(target=Name(id='config_name', ctx=Store()), iter=Name(id='config_names', ctx=Load()), body=[Assign(targets=[Name(id='p', ctx=Store())], value=BinOp(left=Name(id='base', ctx=Load()), op=Div(), right=Name(id='config_name', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='ini_config', ctx=Store())], value=Call(func=Name(id='load_config_dict_from_file', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ini_config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='base', ctx=Load()), Name(id='p', ctx=Load()), Name(id='ini_config', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None), Dict(keys=[], values=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_common_ancestor', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='common_ancestor', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), For(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='common_ancestor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='common_ancestor', ctx=Store())], value=Name(id='path', ctx=Load()))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='common_ancestor', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='path', ctx=Load()), attr='parents', ctx=Load())]), Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Name(id='common_ancestor', ctx=Load())])]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='common_ancestor', ctx=Load()), attr='parents', ctx=Load())]), body=[Assign(targets=[Name(id='common_ancestor', ctx=Store())], value=Name(id='path', ctx=Load()))], orelse=[Assign(targets=[Name(id='shared', ctx=Store())], value=Call(func=Name(id='commonpath', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='common_ancestor', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='shared', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='common_ancestor', ctx=Store())], value=Name(id='shared', ctx=Load()))], orelse=[])])])])], orelse=[]), If(test=Compare(left=Name(id='common_ancestor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='common_ancestor', ctx=Store())], value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='common_ancestor', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='common_ancestor', ctx=Store())], value=Attribute(value=Name(id='common_ancestor', ctx=Load()), attr='parent', ctx=Load()))], orelse=[])]), Return(value=Name(id='common_ancestor', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='get_dirs_from_args', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='is_option', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='-')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_file_part_from_node_id', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_dir_from_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='path', ctx=Load()), attr='parent', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), Assign(targets=[Name(id='possible_paths', ctx=Store())], value=GeneratorExp(elt=Call(func=Name(id='absolutepath', ctx=Load()), args=[Call(func=Name(id='get_file_part_from_node_id', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id='is_option', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], is_async=0)])), Return(value=ListComp(elt=Call(func=Name(id='get_dir_from_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='possible_paths', ctx=Load()), ifs=[Call(func=Name(id='safe_exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CFG_PYTEST_SECTION', ctx=Store())], value=Constant(value='[pytest] section in {filename} files is no longer supported, change to [tool:pytest] instead.')), FunctionDef(name='determine_setup', args=arguments(posonlyargs=[], args=[arg(arg='inifile', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='rootdir_cmd_arg', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='config', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Config'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='dirs', ctx=Store())], value=Call(func=Name(id='get_dirs_from_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), If(test=Name(id='inifile', ctx=Load()), body=[Assign(targets=[Name(id='inipath_', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='inifile', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='inipath', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Name(id='inipath_', ctx=Load()), simple=1), Assign(targets=[Name(id='inicfg', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='load_config_dict_from_file', ctx=Load()), args=[Name(id='inipath_', ctx=Load())], keywords=[]), Dict(keys=[], values=[])])), If(test=Compare(left=Name(id='rootdir_cmd_arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Attribute(value=Name(id='inipath_', ctx=Load()), attr='parent', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='ancestor', ctx=Store())], value=Call(func=Name(id='get_common_ancestor', ctx=Load()), args=[Name(id='dirs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='rootdir', ctx=Store()), Name(id='inipath', ctx=Store()), Name(id='inicfg', ctx=Store())], ctx=Store())], value=Call(func=Name(id='locate_config', ctx=Load()), args=[List(elts=[Name(id='ancestor', ctx=Load())], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='rootdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='rootdir_cmd_arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[For(target=Name(id='possible_rootdir', ctx=Store()), iter=Tuple(elts=[Name(id='ancestor', ctx=Load()), Starred(value=Attribute(value=Name(id='ancestor', ctx=Load()), attr='parents', ctx=Load()), ctx=Load())], ctx=Load()), body=[If(test=Call(func=Attribute(value=BinOp(left=Name(id='possible_rootdir', ctx=Load()), op=Div(), right=Constant(value='setup.py')), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Name(id='possible_rootdir', ctx=Load())), Break()], orelse=[])], orelse=[If(test=Compare(left=Name(id='dirs', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[Name(id='ancestor', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='rootdir', ctx=Store()), Name(id='inipath', ctx=Store()), Name(id='inicfg', ctx=Store())], ctx=Store())], value=Call(func=Name(id='locate_config', ctx=Load()), args=[Name(id='dirs', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='rootdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='config', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cwd', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()))], orelse=[Assign(targets=[Name(id='cwd', ctx=Store())], value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Name(id='get_common_ancestor', ctx=Load()), args=[List(elts=[Name(id='cwd', ctx=Load()), Name(id='ancestor', ctx=Load())], ctx=Load())], keywords=[])), If(test=Call(func=Name(id='is_fs_root', ctx=Load()), args=[Name(id='rootdir', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Name(id='ancestor', ctx=Load()))], orelse=[])], orelse=[])])], orelse=[])]), If(test=Name(id='rootdir_cmd_arg', ctx=Load()), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expandvars', ctx=Load()), args=[Name(id='rootdir_cmd_arg', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Directory '{}' not found. Check your '--rootdir' option."), attr='format', ctx=Load()), args=[Name(id='rootdir', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assert(test=Compare(left=Name(id='rootdir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Tuple(elts=[Name(id='rootdir', ctx=Load()), Name(id='inipath', ctx=Load()), BoolOp(op=Or(), values=[Name(id='inicfg', ctx=Load()), Dict(keys=[], values=[])])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='is_fs_root', args=arguments(posonlyargs=[], args=[arg(arg='p', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return True if the given path is pointing to the root of the\n    file system ("/" on Unix and "C:\\\\" on Windows for example).\n    ')), Return(value=Compare(left=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])