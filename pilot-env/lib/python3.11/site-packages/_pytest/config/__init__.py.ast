Module(body=[Expr(value=Constant(value='Command line options, ini-file and conftest.py processing.')), Import(names=[alias(name='argparse')]), Import(names=[alias(name='collections.abc')]), Import(names=[alias(name='copy')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='enum')]), Import(names=[alias(name='glob')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Import(names=[alias(name='warnings')]), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), ImportFrom(module='types', names=[alias(name='FunctionType')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='IO')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='TextIO')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='pluggy', names=[alias(name='HookimplMarker')], level=0), ImportFrom(module='pluggy', names=[alias(name='HookspecMarker')], level=0), ImportFrom(module='pluggy', names=[alias(name='PluginManager')], level=0), Import(names=[alias(name='_pytest._code')]), Import(names=[alias(name='_pytest.deprecated')]), Import(names=[alias(name='_pytest.hookspec')]), ImportFrom(module='exceptions', names=[alias(name='PrintHelp', asname='PrintHelp')], level=1), ImportFrom(module='exceptions', names=[alias(name='UsageError', asname='UsageError')], level=1), ImportFrom(module='findpaths', names=[alias(name='determine_setup')], level=1), ImportFrom(module='_pytest._code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest._code', names=[alias(name='filter_traceback')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='importlib_metadata')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='Skipped')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='bestrelpath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='import_path')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='ImportMode')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='resolve_package_path')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='safe_exists')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='Stash')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestConfigWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='warn_explicit_for')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest._code.code', names=[alias(name='_TracebackStyle')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), ImportFrom(module='argparsing', names=[alias(name='Argument')], level=1)], orelse=[]), Assign(targets=[Name(id='_PluggyPlugin', ctx=Store())], value=Name(id='object', ctx=Load())), Expr(value=Constant(value="A type to represent plugin objects.\n\nPlugins can be any namespace, so we can't narrow it down much, but we use an\nalias to make the intent clear.\n\nIdeally this type would be provided by pluggy itself.\n")), Assign(targets=[Name(id='hookimpl', ctx=Store())], value=Call(func=Name(id='HookimplMarker', ctx=Load()), args=[Constant(value='pytest')], keywords=[])), Assign(targets=[Name(id='hookspec', ctx=Store())], value=Call(func=Name(id='HookspecMarker', ctx=Load()), args=[Constant(value='pytest')], keywords=[])), ClassDef(name='ExitCode', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encodes the valid exit codes by pytest.\n\n    Currently users and plugins may supply other exit codes as well.\n\n    .. versionadded:: 5.0\n    ')), Assign(targets=[Name(id='OK', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='TESTS_FAILED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='INTERRUPTED', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='INTERNAL_ERROR', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='USAGE_ERROR', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='NO_TESTS_COLLECTED', ctx=Store())], value=Constant(value=5))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='ConftestImportFailure', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='excinfo', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Exception', ctx=Load()), ctx=Load()), Name(id='Exception', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='excinfo', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Name(id='path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Store())], value=Name(id='excinfo', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}: {} (from {})'), attr='format', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='__name__', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='filter_traceback_for_conftest_import_failure', args=arguments(posonlyargs=[], args=[arg(arg='entry', annotation=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='TracebackEntry', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Filter tracebacks entries which point to pytest internals or importlib.\n\n    Make a special case for importlib because we use it to import test modules and conftest files\n    in _pytest.pathlib.import_path.\n    ')), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='filter_traceback', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]), Compare(left=Constant(value='importlib'), ops=[NotIn()], comparators=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[])])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='plugins', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_PluggyPlugin', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Perform an in-process test run.\n\n    :param args:\n        List of command line arguments. If `None` or not given, defaults to reading\n        arguments directly from the process command line (:data:`sys.argv`).\n    :param plugins: List of plugin objects to be auto-registered during initialization.\n\n    :returns: An exit code.\n    ')), Try(body=[Try(body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='_prepareconfig', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='plugins', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ConftestImportFailure', ctx=Load()), name='e', body=[Assign(targets=[Name(id='exc_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_exc_info', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='excinfo', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[Constant(value="ImportError while loading conftest '"), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='path', ctx=Load()), conversion=-1), Constant(value="'.")])], keywords=[keyword(arg='red', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='exc_info', ctx=Load()), attr='traceback', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='exc_info', ctx=Load()), attr='traceback', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='filter_traceback_for_conftest_import_failure', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exc_repr', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='exc_info', ctx=Load()), attr='traceback', ctx=Load()), body=Call(func=Attribute(value=Name(id='exc_info', ctx=Load()), attr='getrepr', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='short')), keyword(arg='chain', value=Constant(value=False))]), orelse=Call(func=Attribute(value=Name(id='exc_info', ctx=Load()), attr='exconly', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='formatted_tb', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc_repr', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='formatted_tb', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[]), Return(value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='USAGE_ERROR', ctx=Load()))])], orelse=[Try(body=[AnnAssign(target=Name(id='ret', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ExitCode', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_cmdline_main', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load()))]), simple=1), Try(body=[Return(value=Call(func=Name(id='ExitCode', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='ret', ctx=Load()))])], orelse=[], finalbody=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_ensure_unconfigure', ctx=Load()), args=[], keywords=[]))])], finalbody=[])], handlers=[ExceptHandler(type=Name(id='UsageError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), For(target=Name(id='msg', ctx=Store()), iter=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[Constant(value='ERROR: '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[]), Return(value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='USAGE_ERROR', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='console_main', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The CLI entry point of pytest.\n\n    This function is not meant for programmable use; use `main()` instead.\n    ')), Try(body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='code', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='BrokenPipeError', ctx=Load()), body=[Assign(targets=[Name(id='devnull', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='O_WRONLY', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup2', ctx=Load()), args=[Name(id='devnull', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='int', ctx=Load())), ClassDef(name='cmdline', bases=[], keywords=[], body=[Assign(targets=[Name(id='main', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Name(id='main', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='filename_arg', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='optname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Argparse type validator for filename arguments.\n\n    :path: Path of filename.\n    :optname: Name of the option.\n    ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='optname', ctx=Load()), conversion=-1), Constant(value=' must be a filename, given: '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='directory_arg', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='optname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Argparse type validator for directory arguments.\n\n    :path: Path of directory.\n    :optname: Name of the option.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='optname', ctx=Load()), conversion=-1), Constant(value=' must be a directory, given: '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='essential_plugins', ctx=Store())], value=Tuple(elts=[Constant(value='mark'), Constant(value='main'), Constant(value='runner'), Constant(value='fixtures'), Constant(value='helpconfig')], ctx=Load())), Assign(targets=[Name(id='default_plugins', ctx=Store())], value=BinOp(left=Name(id='essential_plugins', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value='python'), Constant(value='terminal'), Constant(value='debugging'), Constant(value='unittest'), Constant(value='capture'), Constant(value='skipping'), Constant(value='legacypath'), Constant(value='tmpdir'), Constant(value='monkeypatch'), Constant(value='recwarn'), Constant(value='pastebin'), Constant(value='nose'), Constant(value='assertion'), Constant(value='junitxml'), Constant(value='doctest'), Constant(value='cacheprovider'), Constant(value='freeze_support'), Constant(value='setuponly'), Constant(value='setupplan'), Constant(value='stepwise'), Constant(value='warnings'), Constant(value='logging'), Constant(value='reports'), Constant(value='python_path'), Starred(value=IfExp(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=List(elts=[Constant(value='unraisableexception'), Constant(value='threadexception')], ctx=Load()), orelse=List(elts=[], ctx=Load())), ctx=Load()), Constant(value='faulthandler')], ctx=Load()))), Assign(targets=[Name(id='builtin_plugins', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='default_plugins', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='builtin_plugins', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='pytester')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='builtin_plugins', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='pytester_assertions')], keywords=[])), FunctionDef(name='get_config', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='plugins', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_PluggyPlugin', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='pluginmanager', ctx=Store())], value=Call(func=Name(id='PytestPluginManager', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='Config', ctx=Load()), args=[Name(id='pluginmanager', ctx=Load())], keywords=[keyword(arg='invocation_params', value=Call(func=Attribute(value=Name(id='Config', ctx=Load()), attr='InvocationParams', ctx=Load()), args=[], keywords=[keyword(arg='args', value=BoolOp(op=Or(), values=[Name(id='args', ctx=Load()), Tuple(elts=[], ctx=Load())])), keyword(arg='plugins', value=Name(id='plugins', ctx=Load())), keyword(arg='dir', value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]))]))])), If(test=Compare(left=Name(id='args', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='consider_preparse', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='exclude_only', value=Constant(value=True))]))], orelse=[]), For(target=Name(id='spec', ctx=Store()), iter=Name(id='default_plugins', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='import_plugin', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[], returns=Constant(value='Config')), FunctionDef(name='get_plugin_manager', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Obtain a new instance of the\n    :py:class:`pytest.PytestPluginManager`, with default plugins\n    already loaded.\n\n    This function can be used by integration with other tools, like hooking\n    into pytest to run tests into an IDE.\n    ')), Return(value=Attribute(value=Call(func=Name(id='get_config', ctx=Load()), args=[], keywords=[]), attr='pluginmanager', ctx=Load()))], decorator_list=[], returns=Constant(value='PytestPluginManager')), FunctionDef(name='_prepareconfig', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='plugins', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_PluggyPlugin', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='args', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='`args` parameter expected to be a list of strings, got: {!r} (type: {})')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='args', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])])]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='get_config', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='plugins', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pluginmanager', ctx=Store())], value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load())), Try(body=[If(test=Name(id='plugins', ctx=Load()), body=[For(target=Name(id='plugin', ctx=Store()), iter=Name(id='plugins', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='consider_pluginarg', ctx=Load()), args=[Name(id='plugin', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='plugin', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[]), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pluginmanager', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_cmdline_parse', ctx=Load()), args=[], keywords=[keyword(arg='pluginmanager', value=Name(id='pluginmanager', ctx=Load())), keyword(arg='args', value=Name(id='args', ctx=Load()))])), Return(value=Name(id='config', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_ensure_unconfigure', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value='Config')), FunctionDef(name='_get_directory', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the directory of a path - itself if already a directory.')), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Return(value=Attribute(value=Name(id='path', ctx=Load()), attr='parent', ctx=Load()))], orelse=[Return(value=Name(id='path', ctx=Load()))])], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='_get_legacy_hook_marks', args=arguments(posonlyargs=[], args=[arg(arg='method', annotation=Name(id='Any', ctx=Load())), arg(arg='hook_type', annotation=Name(id='str', ctx=Load())), arg(arg='opt_names', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isroutine', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='known_marks', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=SetComp(elt=Attribute(value=Name(id='m', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='method', ctx=Load()), Constant(value='pytestmark'), List(elts=[], ctx=Load())], keywords=[]), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Name(id='must_warn', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='opts', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='opt_name', ctx=Store()), iter=Name(id='opt_names', ctx=Load()), body=[Assign(targets=[Name(id='opt_attr', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='opt_name', ctx=Load()), Name(id='AttributeError', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='opt_attr', ctx=Load()), ops=[IsNot()], comparators=[Name(id='AttributeError', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='must_warn', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='opt_name', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='opt_attr', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Subscript(value=Name(id='opts', ctx=Load()), slice=Name(id='opt_name', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='opt_name', ctx=Load()), ops=[In()], comparators=[Name(id='known_marks', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='must_warn', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='opt_name', ctx=Load()), conversion=-1), Constant(value='=True')])], keywords=[])), Assign(targets=[Subscript(value=Name(id='opts', ctx=Load()), slice=Name(id='opt_name', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Subscript(value=Name(id='opts', ctx=Load()), slice=Name(id='opt_name', ctx=Load()), ctx=Store())], value=Constant(value=False))])])], orelse=[]), If(test=Name(id='must_warn', ctx=Load()), body=[Assign(targets=[Name(id='hook_opts', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='must_warn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='deprecated', ctx=Load()), attr='HOOK_LEGACY_MARKING', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Name(id='hook_type', ctx=Load())), keyword(arg='fullname', value=Attribute(value=Name(id='method', ctx=Load()), attr='__qualname__', ctx=Load())), keyword(arg='hook_opts', value=Name(id='hook_opts', ctx=Load()))])), Expr(value=Call(func=Name(id='warn_explicit_for', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='FunctionType', ctx=Load()), Name(id='method', ctx=Load())], keywords=[]), Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='opts', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='PytestPluginManager', bases=[Name(id='PluginManager', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with\n    additional pytest-specific functionality:\n\n    * Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and\n      ``pytest_plugins`` global variables found in plugins being loaded.\n    * ``conftest.py`` loading during start-up.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='_pytest.assertion')]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Constant(value='pytest')], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_conftest_plugins', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_dirpath2confmods', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_confcutdir', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_noconftest', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_directory', ctx=Store())], value=Call(func=Call(func=Name(id='lru_cache', ctx=Load()), args=[Constant(value=256)], keywords=[]), args=[Name(id='_get_directory', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_duplicatepaths', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='skipped_plugins', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_hookspecs', ctx=Load()), args=[Attribute(value=Name(id='_pytest', ctx=Load()), attr='hookspec', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_DEBUG')], keywords=[]), body=[AnnAssign(target=Name(id='err', ctx=Store()), annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), simple=1), AnnAssign(target=Name(id='encoding', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='err', ctx=Load()), Constant(value='encoding'), Constant(value='utf8')], keywords=[]), simple=1), Try(body=[Assign(targets=[Name(id='err', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup', ctx=Load()), args=[Call(func=Attribute(value=Name(id='err', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='mode', value=Attribute(value=Name(id='err', ctx=Load()), attr='mode', ctx=Load())), keyword(arg='buffering', value=Constant(value=1)), keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='setwriter', ctx=Load()), args=[Attribute(value=Name(id='err', ctx=Load()), attr='write', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enable_tracing', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rewrite_hook', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='assertion', ctx=Load()), attr='DummyRewriteHook', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='parse_hookimpl_opts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plugin', annotation=Name(id='_PluggyPlugin', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pytest_')], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pytest_plugins')]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='parse_hookimpl_opts', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='opts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='opts', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isroutine', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='_get_legacy_hook_marks', ctx=Load()), args=[Name(id='method', ctx=Load()), Constant(value='impl'), Tuple(elts=[Constant(value='tryfirst'), Constant(value='trylast'), Constant(value='optionalhook'), Constant(value='hookwrapper')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_hookspec_opts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module_or_class'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='parse_hookspec_opts', ctx=Load()), args=[Name(id='module_or_class', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='opts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module_or_class', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pytest_')], keywords=[]), body=[Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Name(id='_get_legacy_hook_marks', ctx=Load()), args=[Name(id='method', ctx=Load()), Constant(value='spec'), Tuple(elts=[Constant(value='firstresult'), Constant(value='historic')], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='opts', ctx=Load()))], decorator_list=[]), FunctionDef(name='register', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plugin', annotation=Name(id='_PluggyPlugin', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='deprecated', ctx=Load()), attr='DEPRECATED_EXTERNAL_PLUGINS', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} plugin has been merged into the core, please remove it from your requirements.'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[])], keywords=[])], keywords=[])], keywords=[])), Return(value=Constant(value=None))], orelse=[]), AnnAssign(target=Name(id='ret', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='register', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), simple=1), If(test=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_plugin_registered', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='plugin', value=Name(id='plugin', ctx=Load())), keyword(arg='manager', value=Name(id='self', ctx=Load()))]))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='consider_module', ctx=Load()), args=[Name(id='plugin', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='getplugin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='plugin', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_PluggyPlugin', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), simple=1), Return(value=Name(id='plugin', ctx=Load()))], decorator_list=[]), FunctionDef(name='hasplugin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether a plugin with the given name is registered.')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Constant(value='Config'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value='tryfirst: mark a hook implementation function such that the plugin machinery will try to call it first/as early as possible. DEPRECATED, use @pytest.hookimpl(tryfirst=True) instead.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value='trylast: mark a hook implementation function such that the plugin machinery will try to call it last/as late as possible. DEPRECATED, use @pytest.hookimpl(trylast=True) instead.')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_set_initial_conftests', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='pyargs', annotation=Name(id='bool', ctx=Load())), arg(arg='noconftest', annotation=Name(id='bool', ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load())), arg(arg='confcutdir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='importmode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ImportMode', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load initial conftest files given a preparsed "namespace".\n\n        As conftest files may add their own command line options which have\n        arguments (\'--my-opt somepath\') we might get some false positives.\n        All builtin and 3rd party plugins will have been loaded, however, so\n        common options will not confuse our logic here.\n        ')), Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_confcutdir', ctx=Store())], value=IfExp(test=Name(id='confcutdir', ctx=Load()), body=Call(func=Name(id='absolutepath', ctx=Load()), args=[BinOp(left=Name(id='current', ctx=Load()), op=Div(), right=Name(id='confcutdir', ctx=Load()))], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_noconftest', ctx=Store())], value=Name(id='noconftest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_using_pyargs', ctx=Store())], value=Name(id='pyargs', ctx=Load())), Assign(targets=[Name(id='foundanchor', ctx=Store())], value=Constant(value=False)), For(target=Name(id='intitial_path', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='intitial_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='::')], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='anchor', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[BinOp(left=Name(id='current', ctx=Load()), op=Div(), right=Name(id='path', ctx=Load()))], keywords=[])), If(test=Call(func=Name(id='safe_exists', ctx=Load()), args=[Name(id='anchor', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_try_load_conftest', ctx=Load()), args=[Name(id='anchor', ctx=Load()), Name(id='importmode', ctx=Load()), Name(id='rootpath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='foundanchor', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='foundanchor', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_try_load_conftest', ctx=Load()), args=[Name(id='current', ctx=Load()), Name(id='importmode', ctx=Load()), Name(id='rootpath', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_is_in_confcutdir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether a path is within the confcutdir.\n\n        When false, should not load conftest.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_confcutdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Compare(left=Name(id='path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_confcutdir', ctx=Load()), attr='parents', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_try_load_conftest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='anchor', annotation=Name(id='Path', ctx=Load())), arg(arg='importmode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ImportMode', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getconftestmodules', ctx=Load()), args=[Name(id='anchor', ctx=Load()), Name(id='importmode', ctx=Load()), Name(id='rootpath', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='anchor', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='anchor', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='test*')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getconftestmodules', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='importmode', ctx=Load()), Name(id='rootpath', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_getconftestmodules', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='importmode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ImportMode', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_noconftest', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_directory', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='existing_clist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dirpath2confmods', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='existing_clist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='existing_clist', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='clist', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='parent', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Tuple(elts=[Name(id='directory', ctx=Load()), Starred(value=Attribute(value=Name(id='directory', ctx=Load()), attr='parents', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_in_confcutdir', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='conftestpath', ctx=Store())], value=BinOp(left=Name(id='parent', ctx=Load()), op=Div(), right=Constant(value='conftest.py'))), If(test=Call(func=Attribute(value=Name(id='conftestpath', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_importconftest', ctx=Load()), args=[Name(id='conftestpath', ctx=Load()), Name(id='importmode', ctx=Load()), Name(id='rootpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='clist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dirpath2confmods', ctx=Load()), slice=Name(id='directory', ctx=Load()), ctx=Store())], value=Name(id='clist', ctx=Load())), Return(value=Name(id='clist', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), ctx=Load())), FunctionDef(name='_rget_with_confmod', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='importmode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ImportMode', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='modules', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getconftestmodules', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='importmode', ctx=Load())], keywords=[keyword(arg='rootpath', value=Name(id='rootpath', ctx=Load()))])), For(target=Name(id='mod', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='modules', ctx=Load())], keywords=[]), body=[Try(body=[Return(value=Tuple(elts=[Name(id='mod', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_importconftest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conftestpath', annotation=Name(id='Path', ctx=Load())), arg(arg='importmode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ImportMode', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='existing', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='conftestpath', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='existing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='existing', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pkgpath', ctx=Store())], value=Call(func=Name(id='resolve_package_path', ctx=Load()), args=[Name(id='conftestpath', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pkgpath', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_ensure_removed_sysmodule', ctx=Load()), args=[Attribute(value=Name(id='conftestpath', ctx=Load()), attr='stem', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='import_path', ctx=Load()), args=[Name(id='conftestpath', ctx=Load())], keywords=[keyword(arg='mode', value=Name(id='importmode', ctx=Load())), keyword(arg='root', value=Name(id='rootpath', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assert(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='exc_info', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), Name(id='e', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load())], ctx=Load())), Raise(exc=Call(func=Name(id='ConftestImportFailure', ctx=Load()), args=[Name(id='conftestpath', ctx=Load()), Name(id='exc_info', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_non_top_pytest_plugins', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='conftestpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conftest_plugins', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dirpath', ctx=Store())], value=Attribute(value=Name(id='conftestpath', ctx=Load()), attr='parent', ctx=Load())), If(test=Compare(left=Name(id='dirpath', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_dirpath2confmods', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='path', ctx=Store()), Name(id='mods', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dirpath2confmods', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='dirpath', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='path', ctx=Load()), attr='parents', ctx=Load())]), Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Name(id='dirpath', ctx=Load())])]), body=[Assert(test=Compare(left=Name(id='mod', ctx=Load()), ops=[NotIn()], comparators=[Name(id='mods', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='mods', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[JoinedStr(values=[Constant(value='loading conftestmodule '), FormattedValue(value=Name(id='mod', ctx=Load()), conversion=114)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='consider_conftest', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[])), Return(value=Name(id='mod', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())), FunctionDef(name='_check_non_top_pytest_plugins', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())), arg(arg='conftestpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Constant(value='pytest_plugins')], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_using_pyargs', ctx=Load()))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="Defining 'pytest_plugins' in a non-top-level conftest is no longer supported:\nIt affects the entire test suite instead of just below the conftest as expected.\n  {}\nPlease move it to a top level conftest file at the rootdir:\n  {}\nFor more information, visit:\n  https://docs.pytest.org/en/stable/deprecations.html#pytest-plugins-in-non-top-level-conftest-files")), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='conftestpath', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_confcutdir', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consider_preparse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='exclude_only', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='n', ctx=Load())]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='opt', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-p')]), body=[Try(body=[Assign(targets=[Name(id='parg', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Call(func=Attribute(value=Name(id='opt', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='-p')], keywords=[]), body=[Assign(targets=[Name(id='parg', ctx=Store())], value=Subscript(value=Name(id='opt', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], orelse=[Continue()])]), Assign(targets=[Name(id='parg', ctx=Store())], value=Call(func=Attribute(value=Name(id='parg', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='exclude_only', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='parg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='no:')], keywords=[]))]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='consider_pluginarg', ctx=Load()), args=[Name(id='parg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consider_pluginarg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), If(test=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='no:')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='arg', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='essential_plugins', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[BinOp(left=Constant(value='plugin %s cannot be disabled'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cacheprovider')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_blocked', ctx=Load()), args=[Constant(value='stepwise')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_blocked', ctx=Load()), args=[Constant(value='pytest_stepwise')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_blocked', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pytest_')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_blocked', ctx=Load()), args=[BinOp(left=Constant(value='pytest_'), op=Add(), right=Name(id='name', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='name', ctx=Store())], value=Name(id='arg', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name2plugin', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name2plugin', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pytest_')], keywords=[])), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name2plugin', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Constant(value='pytest_'), op=Add(), right=Name(id='name', ctx=Load())), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name2plugin', ctx=Load()), slice=BinOp(left=Constant(value='pytest_'), op=Add(), right=Name(id='name', ctx=Load())), ctx=Del())])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='import_plugin', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[keyword(arg='consider_entry_points', value=Constant(value=True))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consider_conftest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conftestmodule', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='conftestmodule', ctx=Load())], keywords=[keyword(arg='name', value=Attribute(value=Name(id='conftestmodule', ctx=Load()), attr='__file__', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consider_env', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_import_plugin_specs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_PLUGINS')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consider_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_import_plugin_specs', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Constant(value='pytest_plugins'), List(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_import_plugin_specs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='plugins', ctx=Store())], value=Call(func=Name(id='_get_plugin_specs_as_list', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), For(target=Name(id='import_spec', ctx=Store()), iter=Name(id='plugins', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='import_plugin', ctx=Load()), args=[Name(id='import_spec', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='import_plugin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='modname', annotation=Name(id='str', ctx=Load())), arg(arg='consider_entry_points', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Import a plugin with ``modname``.\n\n        If ``consider_entry_points`` is True, entry point names are also\n        considered to find a plugin.\n        ')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='modname', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), msg=BinOp(left=Constant(value='module name as text required, got %r'), op=Mod(), right=Name(id='modname', ctx=Load()))), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_blocked', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[]), Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='importspec', ctx=Store())], value=IfExp(test=Compare(left=Name(id='modname', ctx=Load()), ops=[In()], comparators=[Name(id='builtin_plugins', ctx=Load())]), body=BinOp(left=Constant(value='_pytest.'), op=Add(), right=Name(id='modname', ctx=Load())), orelse=Name(id='modname', ctx=Load()))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rewrite_hook', ctx=Load()), attr='mark_rewrite', ctx=Load()), args=[Name(id='importspec', ctx=Load())], keywords=[])), If(test=Name(id='consider_entry_points', ctx=Load()), body=[Assign(targets=[Name(id='loaded', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_setuptools_entrypoints', ctx=Load()), args=[Constant(value='pytest11')], keywords=[keyword(arg='name', value=Name(id='modname', ctx=Load()))])), If(test=Name(id='loaded', ctx=Load()), body=[Return()], orelse=[])], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='importspec', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Call(func=Name(id='ImportError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error importing plugin "'), FormattedValue(value=Name(id='modname', ctx=Load()), conversion=-1), Constant(value='": '), FormattedValue(value=Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)])], keywords=[]), attr='with_traceback', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))]), ExceptHandler(type=Name(id='Skipped', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='skipped_plugins', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='modname', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), Constant(value='')])], ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='importspec', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='modname', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='_get_plugin_specs_as_list', args=arguments(posonlyargs=[], args=[arg(arg='specs', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a plugins specification into a list of plugin names.')), If(test=Compare(left=Name(id='specs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='specs', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='specs', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=IfExp(test=Name(id='specs', ctx=Load()), body=Call(func=Attribute(value=Name(id='specs', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), orelse=List(elts=[], ctx=Load())))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='specs', ctx=Load()), Attribute(value=Attribute(value=Name(id='collections', ctx=Load()), attr='abc', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='specs', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[BinOp(left=Constant(value="Plugins may be specified as a sequence or a ','-separated string of plugin names. Got: %r"), op=Mod(), right=Name(id='specs', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_ensure_removed_sysmodule', args=arguments(posonlyargs=[], args=[arg(arg='modname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), ClassDef(name='Notset', bases=[], keywords=[], body=[FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='<NOTSET>'))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='notset', ctx=Store())], value=Call(func=Name(id='Notset', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_iter_rewritable_modules', args=arguments(posonlyargs=[], args=[arg(arg='package_files', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given an iterable of file names in a source distribution, return the "names" that should\n    be marked for assertion rewrite.\n\n    For example the package "pytest_mock/__init__.py" should be added as "pytest_mock" in\n    the assertion rewrite mechanism.\n\n    This function has to deal with dist-info based distributions and egg based distributions\n    (which are still very much in use for "editable" installs).\n\n    Here are the file names as seen in a dist-info based distribution:\n\n        pytest_mock/__init__.py\n        pytest_mock/_version.py\n        pytest_mock/plugin.py\n        pytest_mock.egg-info/PKG-INFO\n\n    Here are the file names as seen in an egg based distribution:\n\n        src/pytest_mock/__init__.py\n        src/pytest_mock/_version.py\n        src/pytest_mock/plugin.py\n        src/pytest_mock.egg-info/PKG-INFO\n        LICENSE\n        setup.py\n\n    We have to take in account those two distribution flavors in order to determine which\n    names should be considered for assertion rewriting.\n\n    More information:\n        https://github.com/pytest-dev/pytest-mock/issues/167\n    ')), Assign(targets=[Name(id='package_files', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='package_files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='seen_some', ctx=Store())], value=Constant(value=False)), For(target=Name(id='fn', ctx=Store()), iter=Name(id='package_files', ctx=Load()), body=[Assign(targets=[Name(id='is_simple_module', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='/'), ops=[NotIn()], comparators=[Name(id='fn', ctx=Load())]), Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[])])), Assign(targets=[Name(id='is_package', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='/')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='__init__.py')], keywords=[])])), If(test=Name(id='is_simple_module', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='module_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='setup')]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='module_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__editable__')], keywords=[]))]), body=[Assign(targets=[Name(id='seen_some', ctx=Store())], value=Constant(value=True)), Expr(value=Yield(value=Name(id='module_name', ctx=Load())))], orelse=[])], orelse=[If(test=Name(id='is_package', ctx=Load()), body=[Assign(targets=[Name(id='package_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='seen_some', ctx=Store())], value=Constant(value=True)), Expr(value=Yield(value=Name(id='package_name', ctx=Load())))], orelse=[])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='seen_some', ctx=Load())), body=[Assign(targets=[Name(id='new_package_files', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='fn', ctx=Store()), iter=Name(id='package_files', ctx=Load()), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='new_fn', ctx=Store())], value=Call(func=Attribute(value=Constant(value='/'), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Name(id='new_fn', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_package_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_fn', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='new_package_files', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Name(id='_iter_rewritable_modules', ctx=Load()), args=[Name(id='new_package_files', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='Config', bases=[], keywords=[], body=[Expr(value=Constant(value='Access to configuration values, pluginmanager and plugin hooks.\n\n    :param PytestPluginManager pluginmanager:\n        A pytest PluginManager.\n\n    :param InvocationParams invocation_params:\n        Object containing parameters regarding the :func:`pytest.main`\n        invocation.\n    ')), ClassDef(name='InvocationParams', bases=[], keywords=[], body=[Expr(value=Constant(value='Holds parameters passed during :func:`pytest.main`.\n\n        The object attributes are read-only.\n\n        .. versionadded:: 5.1\n\n        .. note::\n\n            Note that the environment variable ``PYTEST_ADDOPTS`` and the ``addopts``\n            ini option are handled by pytest, not being included in the ``args`` attribute.\n\n            Plugins accessing ``InvocationParams`` must be aware of that.\n        ')), AnnAssign(target=Name(id='args', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='The command-line arguments as passed to :func:`pytest.main`.')), AnnAssign(target=Name(id='plugins', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_PluggyPlugin', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Extra plugins, might be `None`.')), AnnAssign(target=Name(id='dir', ctx=Store()), annotation=Name(id='Path', ctx=Load()), simple=1), Expr(value=Constant(value='The directory from which :func:`pytest.main` was invoked.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='args', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='plugins', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_PluggyPlugin', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='dir', annotation=Name(id='Path', ctx=Load()))], kw_defaults=[None, None, None], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='args'), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='plugins'), Name(id='plugins', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='dir'), Name(id='dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='final', ctx=Load()), Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), ClassDef(name='ArgsSource', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Indicates the source of the test arguments.\n\n        .. versionadded:: 7.2\n        ')), Assign(targets=[Name(id='ARGS', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='INCOVATION_DIR', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='TESTPATHS', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pluginmanager', annotation=Name(id='PytestPluginManager', ctx=Load()))], kwonlyargs=[arg(arg='invocation_params', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InvocationParams', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[ImportFrom(module='argparsing', names=[alias(name='Parser'), alias(name='FILE_OR_DIR')], level=1), If(test=Compare(left=Name(id='invocation_params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='invocation_params', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='InvocationParams', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Tuple(elts=[], ctx=Load())), keyword(arg='plugins', value=Constant(value=None)), keyword(arg='dir', value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='Namespace', ctx=Load()), args=[], keywords=[])), Expr(value=Constant(value='Access to command line option as attributes.\n\n        :type: argparse.Namespace\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invocation_params', ctx=Store())], value=Name(id='invocation_params', ctx=Load())), Expr(value=Constant(value='The parameters with which pytest was invoked.\n\n        :type: InvocationParams\n        ')), Assign(targets=[Name(id='_a', ctx=Store())], value=Name(id='FILE_OR_DIR', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Store())], value=Call(func=Name(id='Parser', ctx=Load()), args=[], keywords=[keyword(arg='usage', value=JoinedStr(values=[Constant(value='%(prog)s [options] ['), FormattedValue(value=Name(id='_a', ctx=Load()), conversion=-1), Constant(value='] ['), FormattedValue(value=Name(id='_a', ctx=Load()), conversion=-1), Constant(value='] [...]')])), keyword(arg='processopt', value=Attribute(value=Name(id='self', ctx=Load()), attr='_processopt', ctx=Load())), keyword(arg='_ispytest', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Store())], value=Name(id='pluginmanager', ctx=Load())), Expr(value=Constant(value='The plugin manager handles plugin registration and hook invocation.\n\n        :type: PytestPluginManager\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stash', ctx=Store())], value=Call(func=Name(id='Stash', ctx=Load()), args=[], keywords=[])), Expr(value=Constant(value='A place where plugins can store information on the config for their\n        own use.\n\n        :type: Stash\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_store', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='stash', ctx=Load())), ImportFrom(module='compat', names=[alias(name='PathAwareHookProxy')], level=1), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='config')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Store())], value=Call(func=Name(id='PathAwareHookProxy', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='hook', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_inicache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_override_ini', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_opt2dest', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_cleanup', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='pytestconfig')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_addoption', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='parser', value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load())), keyword(arg='pluginmanager', value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()))]))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args_source', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='Config', ctx=Load()), attr='ArgsSource', ctx=Load()), attr='ARGS', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_pytest.cacheprovider', names=[alias(name='Cache')], level=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Cache', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='rootpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path to the :ref:`rootdir <rootdir>`.\n\n        :type: pathlib.Path\n\n        .. versionadded:: 6.1\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rootpath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='inipath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path to the :ref:`configfile <configfiles>`.\n\n        :type: Optional[pathlib.Path]\n\n        .. versionadded:: 6.1\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_inipath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), FunctionDef(name='add_cleanup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a function to be called when the config object gets out of\n        use (usually coinciding with pytest_unconfigure).')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cleanup', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_do_configure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Store())], value=Constant(value=True)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_configure', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='self', ctx=Load()))]))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_ensure_unconfigure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_configured', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_unconfigure', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='self', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_configure', ctx=Load()), attr='_call_history', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), While(test=Attribute(value=Name(id='self', ctx=Load()), attr='_cleanup', ctx=Load()), body=[Assign(targets=[Name(id='fin', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cleanup', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='fin', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_terminal_writer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='terminalreporter', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalReporter', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='terminalreporter')], keywords=[]), simple=1), Assert(test=Compare(left=Name(id='terminalreporter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='_tw', ctx=Load()))], decorator_list=[], returns=Name(id='TerminalWriter', ctx=Load())), FunctionDef(name='pytest_cmdline_parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pluginmanager', annotation=Name(id='PytestPluginManager', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UsageError', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()), Constant(value='version'), Constant(value=False)], keywords=[]), Compare(left=Constant(value='--version'), ops=[In()], comparators=[Name(id='args', ctx=Load())])]), body=[ImportFrom(module='_pytest.helpconfig', names=[alias(name='showversion')], level=0), Expr(value=Call(func=Name(id='showversion', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()), Constant(value='help'), Constant(value=False)], keywords=[]), Compare(left=Constant(value='--help'), ops=[In()], comparators=[Name(id='args', ctx=Load())]), Compare(left=Constant(value='-h'), ops=[In()], comparators=[Name(id='args', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='_getparser', ctx=Load()), args=[], keywords=[]), attr='print_help', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\nNOTE: displaying only minimal help due to UsageError.\n\n')], keywords=[]))], orelse=[])]), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Config')), FunctionDef(name='notify_exception', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excinfo', annotation=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='option', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='argparse', ctx=Load()), attr='Namespace', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Name(id='option', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='option', ctx=Load()), Constant(value='fulltrace'), Constant(value=False)], keywords=[])]), body=[AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='_TracebackStyle', ctx=Load()), value=Constant(value='long'), simple=1)], orelse=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='native'))]), Assign(targets=[Name(id='excrepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='excinfo', ctx=Load()), attr='getrepr', ctx=Load()), args=[], keywords=[keyword(arg='funcargs', value=Constant(value=True)), keyword(arg='showlocals', value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='option', ctx=Load()), Constant(value='showlocals'), Constant(value=False)], keywords=[])), keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_internalerror', ctx=Load()), args=[], keywords=[keyword(arg='excrepr', value=Name(id='excrepr', ctx=Load())), keyword(arg='excinfo', value=Name(id='excinfo', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='excrepr', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='INTERNALERROR> %s\n'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cwd_relative_nodeid', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load())]), body=[Assign(targets=[Name(id='fullpath', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load()), op=Div(), right=Name(id='nodeid', ctx=Load()))), Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()), Name(id='fullpath', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='nodeid', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='fromdictargs', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='option_dict'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Constructor usable for subprocesses.')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='get_config', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='option_dict', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='addopts', value=Constant(value=False))])), For(target=Name(id='x', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='plugins', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='consider_pluginarg', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='config', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Config')), FunctionDef(name='_processopt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='opt', annotation=Constant(value='Argument'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='name', ctx=Store()), iter=BinOp(left=Attribute(value=Name(id='opt', ctx=Load()), attr='_short_opts', ctx=Load()), op=Add(), right=Attribute(value=Name(id='opt', ctx=Load()), attr='_long_opts', ctx=Load())), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opt2dest', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='opt', ctx=Load()), attr='dest', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='opt', ctx=Load()), Constant(value='default')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()), Attribute(value=Name(id='opt', ctx=Load()), attr='dest', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()), Attribute(value=Name(id='opt', ctx=Load()), attr='dest', ctx=Load()), Attribute(value=Name(id='opt', ctx=Load()), attr='default', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_load_initial_conftests', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='early_config', annotation=Constant(value='Config'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='args', ctx=Store()), Name(id='args_source', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='early_config', ctx=Load()), attr='_decide_args', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='file_or_dir', ctx=Load())), keyword(arg='pyargs', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='pyargs', ctx=Load())), keyword(arg='testpaths', value=Call(func=Attribute(value=Name(id='early_config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='testpaths')], keywords=[])), keyword(arg='invocation_dir', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load())), keyword(arg='rootpath', value=Attribute(value=Name(id='early_config', ctx=Load()), attr='rootpath', ctx=Load())), keyword(arg='warn', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='_set_initial_conftests', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Name(id='args', ctx=Load())), keyword(arg='pyargs', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='pyargs', ctx=Load())), keyword(arg='noconftest', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='noconftest', ctx=Load())), keyword(arg='rootpath', value=Attribute(value=Name(id='early_config', ctx=Load()), attr='rootpath', ctx=Load())), keyword(arg='confcutdir', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='confcutdir', ctx=Load())), keyword(arg='importmode', value=Attribute(value=Attribute(value=Name(id='early_config', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='importmode', ctx=Load()))]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='trylast', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='_initini', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ns', ctx=Store()), Name(id='unknown_args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_known_and_unknown_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='namespace', value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load())], keywords=[]))])), Assign(targets=[Tuple(elts=[Name(id='rootpath', ctx=Store()), Name(id='inipath', ctx=Store()), Name(id='inicfg', ctx=Store())], ctx=Store())], value=Call(func=Name(id='determine_setup', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='inifilename', ctx=Load()), BinOp(left=Attribute(value=Name(id='ns', ctx=Load()), attr='file_or_dir', ctx=Load()), op=Add(), right=Name(id='unknown_args', ctx=Load()))], keywords=[keyword(arg='rootdir_cmd_arg', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ns', ctx=Load()), attr='rootdir', ctx=Load()), Constant(value=None)])), keyword(arg='config', value=Name(id='self', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rootpath', ctx=Store())], value=Name(id='rootpath', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_inipath', ctx=Store())], value=Name(id='inipath', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inicfg', ctx=Store())], value=Name(id='inicfg', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='extra_info', ctx=Load()), slice=Constant(value='rootdir'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='extra_info', ctx=Load()), slice=Constant(value='inifile'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='addopts'), Constant(value='Extra command line options'), Constant(value='args')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='minversion'), Constant(value='Minimally required pytest version')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='required_plugins'), Constant(value='Plugins that must be present for pytest to run')], keywords=[keyword(arg='type', value=Constant(value='args')), keyword(arg='default', value=List(elts=[], ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_override_ini', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ns', ctx=Load()), attr='override_ini', ctx=Load()), Tuple(elts=[], ctx=Load())]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_consider_importhook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Install the PEP 302 import hook if using assertion rewriting.\n\n        Needs to parse the --assert=<mode> option from the commandline\n        and find all the installed plugins to mark them for rewriting\n        by the importhook.\n        ')), Assign(targets=[Tuple(elts=[Name(id='ns', ctx=Store()), Name(id='unknown_args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_known_and_unknown_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ns', ctx=Load()), Constant(value='assertmode'), Constant(value='plain')], keywords=[])), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='rewrite')]), body=[Import(names=[alias(name='_pytest.assertion')]), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='assertion', ctx=Load()), attr='install_importhook', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SystemError', ctx=Load()), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='plain'))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mark_plugins_for_rewrite', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_about_missing_assertion', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_mark_plugins_for_rewrite', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given an importhook, mark for rewrite any top-level\n        modules or packages in the distribution package for\n        all pytest plugins.')), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='rewrite_hook', ctx=Store())], value=Name(id='hook', ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_DISABLE_PLUGIN_AUTOLOAD')], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='package_files', ctx=Store())], value=GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='importlib_metadata', ctx=Load()), attr='distributions', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Attribute(value=Name(id='ep', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pytest11')]), generators=[comprehension(target=Name(id='ep', ctx=Store()), iter=Attribute(value=Name(id='dist', ctx=Load()), attr='entry_points', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0), comprehension(target=Name(id='file', ctx=Store()), iter=BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='files', ctx=Load()), List(elts=[], ctx=Load())]), ifs=[], is_async=0)])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='_iter_rewritable_modules', ctx=Load()), args=[Name(id='package_files', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='mark_rewrite', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_validate_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='via', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Validate known args.')), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='_config_source_hint', ctx=Store())], value=Name(id='via', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_known_and_unknown_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='namespace', value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load())], keywords=[]))]))], handlers=[], orelse=[], finalbody=[Delete(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='_config_source_hint', ctx=Del())])]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_decide_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='pyargs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='testpaths', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='invocation_dir', annotation=Name(id='Path', ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load())), arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, None, None, None, None, None], defaults=[]), body=[Expr(value=Constant(value='Decide the args (initial paths/nodeids) to use given the relevant inputs.\n\n        :param warn: Whether can issue warnings.\n        ')), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='Config', ctx=Load()), attr='ArgsSource', ctx=Load()), attr='ARGS', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='args', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='invocation_dir', ctx=Load()), ops=[Eq()], comparators=[Name(id='rootpath', ctx=Load())]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='Config', ctx=Load()), attr='ArgsSource', ctx=Load()), attr='TESTPATHS', ctx=Load())), If(test=Name(id='pyargs', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='testpaths', ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='path', ctx=Store()), iter=Name(id='testpaths', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='iglob', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))])], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='testpaths', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='result', ctx=Load()))]), body=[If(test=Name(id='warn', ctx=Load()), body=[Assign(targets=[Name(id='warning_text', ctx=Store())], value=Constant(value='No files were found in testpaths; consider removing or adjusting your testpaths configuration. Searching recursively from the current directory instead.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[Name(id='warning_text', ctx=Load())], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=3))]))], orelse=[])], orelse=[])])], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='Config', ctx=Load()), attr='ArgsSource', ctx=Load()), attr='INCOVATION_DIR', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='invocation_dir', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[])]), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='source', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='ArgsSource', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_preparse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='addopts', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Name(id='addopts', ctx=Load()), body=[Assign(targets=[Name(id='env_addopts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_ADDOPTS'), Constant(value='')], keywords=[])), If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='env_addopts', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_args', ctx=Load()), args=[Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='env_addopts', ctx=Load())], keywords=[]), Constant(value='via PYTEST_ADDOPTS')], keywords=[]), op=Add(), right=Name(id='args', ctx=Load())))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_initini', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), If(test=Name(id='addopts', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_args', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='addopts')], keywords=[]), Constant(value='via addopts config')], keywords=[]), op=Add(), right=Name(id='args', ctx=Load())))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_known_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='namespace', value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_checkversion', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consider_importhook', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='consider_preparse', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='exclude_only', value=Constant(value=False))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_DISABLE_PLUGIN_AUTOLOAD')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='load_setuptools_entrypoints', ctx=Load()), args=[Constant(value='pytest11')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='consider_env', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_known_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='namespace', value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_plugins', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_about_skipped_plugins', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='strict', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='deprecated', ctx=Load()), attr='STRICT_OPTION', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='confcutdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='confcutdir', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), attr='parent', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='confcutdir', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='confcutdir', ctx=Store())], value=Name(id='confcutdir', ctx=Load()))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_load_initial_conftests', ctx=Load()), args=[], keywords=[keyword(arg='early_config', value=Name(id='self', ctx=Load())), keyword(arg='args', value=Name(id='args', ctx=Load())), keyword(arg='parser', value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ConftestImportFailure', ctx=Load()), name='e', body=[If(test=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='help', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='version', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[JoinedStr(values=[Constant(value='could not load initial conftests: '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='path', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[Raise()])])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield()), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_config_options', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_checkversion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pytest')]), Assign(targets=[Name(id='minver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='inicfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='minversion'), Constant(value=None)], keywords=[])), If(test=Name(id='minver', ctx=Load()), body=[ImportFrom(module='packaging.version', names=[alias(name='Version')], level=0), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='minver', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='UsageError', ctx=Load()), args=[BinOp(left=Constant(value="%s: 'minversion' must be a single value"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='Version', ctx=Load()), args=[Name(id='minver', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='Version', ctx=Load()), args=[Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='UsageError', ctx=Load()), args=[BinOp(left=Constant(value="%s: 'minversion' requires pytest-%s, actual pytest-%s'"), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), Name(id='minver', ctx=Load()), Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_validate_config_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_unknown_ini_keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_or_fail_if_strict', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unknown config option: '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_validate_plugins', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='required_plugins', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='required_plugins')], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='required_plugins', ctx=Load())), body=[Return()], orelse=[]), ImportFrom(module='packaging.version', names=[alias(name='Version')], level=0), ImportFrom(module='packaging.requirements', names=[alias(name='InvalidRequirement'), alias(name='Requirement')], level=0), Assign(targets=[Name(id='plugin_info', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='list_plugin_distinfo', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='plugin_dist_info', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='dist', ctx=Load()), attr='project_name', ctx=Load()), value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='dist', ctx=Store())], ctx=Store()), iter=Name(id='plugin_info', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='missing_plugins', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='required_plugin', ctx=Store()), iter=Name(id='required_plugins', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='required_plugin', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='missing_plugins', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='required_plugin', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='plugin_dist_info', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='missing_plugins', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='required_plugin', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Call(func=Name(id='Version', ctx=Load()), args=[Subscript(value=Name(id='plugin_dist_info', ctx=Load()), slice=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), ctx=Load())], keywords=[])], keywords=[keyword(arg='prereleases', value=Constant(value=True))])), body=[Expr(value=Call(func=Attribute(value=Name(id='missing_plugins', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='required_plugin', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), If(test=Name(id='missing_plugins', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Missing required plugins: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='missing_plugins', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_warn_or_fail_if_strict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='strict_config', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=3))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_unknown_ini_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parser_inicfg', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='_inidict', ctx=Load())), Return(value=ListComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='inicfg', ctx=Load()), ifs=[Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='parser_inicfg', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='addopts', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), msg=Constant(value='can only parse cmdline args at most once per Config object')), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_addhooks', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='pluginmanager', value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()))]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_preparse', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='addopts', value=Name(id='addopts', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_cmdline_preparse', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='self', ctx=Load())), keyword(arg='args', value=Name(id='args', ctx=Load()))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='after_preparse', ctx=Store())], value=Constant(value=True)), Try(body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='parse_setoption', ctx=Load()), args=[Name(id='args', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load())], keywords=[keyword(arg='namespace', value=Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()))])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='args_source', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decide_args', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Name(id='args', ctx=Load())), keyword(arg='pyargs', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='pyargs', ctx=Load())), keyword(arg='testpaths', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='testpaths')], keywords=[])), keyword(arg='invocation_dir', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load())), keyword(arg='rootpath', value=Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load())), keyword(arg='warn', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='PrintHelp', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='issue_config_time_warning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warning', annotation=Name(id='Warning', ctx=Load())), arg(arg='stacklevel', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Issue and handle a warning during the "configure" stage.\n\n        During ``pytest_configure`` we can\'t capture warnings using the ``catch_warnings_for_item``\n        function because it is not possible to have hookwrappers around ``pytest_configure``.\n\n        This function is mainly intended for plugins that need to issue warnings during\n        ``pytest_configure`` (or similar stages).\n\n        :param warning: The warning instance.\n        :param stacklevel: stacklevel forwarded to warnings.warn.\n        ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='is_blocked', ctx=Load()), args=[Constant(value='warnings')], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='cmdline_filters', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_args_namespace', ctx=Load()), attr='pythonwarnings', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='config_filters', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='filterwarnings')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='records', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always'), Call(func=Name(id='type', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='apply_warning_filters', ctx=Load()), args=[Name(id='config_filters', ctx=Load()), Name(id='cmdline_filters', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='warning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Name(id='stacklevel', ctx=Load()))]))]), If(test=Name(id='records', ctx=Load()), body=[Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[BinOp(left=Name(id='stacklevel', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='location', ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_filename', ctx=Load()), Attribute(value=Name(id='frame', ctx=Load()), attr='f_lineno', ctx=Load()), Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_name', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_warning_recorded', ctx=Load()), attr='call_historic', ctx=Load()), args=[], keywords=[keyword(arg='kwargs', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='warning_message', value=Subscript(value=Name(id='records', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='when', value=Constant(value='config')), keyword(arg='nodeid', value=Constant(value='')), keyword(arg='location', value=Name(id='location', ctx=Load()))]))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addinivalue_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a line to an ini-file option. The option must have been\n        declared but might not yet be set in which case the line becomes\n        the first line in its value.')), Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getini', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='getini', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return configuration value from an :ref:`ini file <configfiles>`.\n\n        If the specified name hasn't been registered through a prior\n        :func:`parser.addini <pytest.Parser.addini>` call (usually from a\n        plugin), a ValueError is raised.\n        ")), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_inicache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_inicache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store()), Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getini', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Name(id='val', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_getini_unknown_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='type', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='unknown configuration type: '), FormattedValue(value=Name(id='type', ctx=Load()), conversion=-1)])), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_getini', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='description', ctx=Store()), Name(id='type', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parser', ctx=Load()), attr='_inidict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unknown configuration value: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='override_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_override_ini_value', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='override_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='inicfg', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='override_value', ctx=Load()))]), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='paths')]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='dp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='input_values', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load()))), Return(value=ListComp(elt=BinOp(left=Name(id='dp', ctx=Load()), op=Div(), right=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='input_values', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='args')]), body=[Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='linelist')]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=ListComp(elt=Name(id='t', ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Call(func=Name(id='map', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]), ifs=[Name(id='t', ctx=Load())], is_async=0)]))], orelse=[Return(value=Name(id='value', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='bool')]), body=[Return(value=Call(func=Name(id='_strtobool', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='string')]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getini_unknown_type', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='type', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])])])])])])], decorator_list=[]), FunctionDef(name='_getconftest_pathlist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='rootpath', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='mod', ctx=Store()), Name(id='relroots', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='_rget_with_confmod', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='path', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='importmode')], keywords=[]), Name(id='rootpath', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assert(test=Compare(left=Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='modpath', ctx=Store())], value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load())), AnnAssign(target=Name(id='values', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='relroot', ctx=Store()), iter=Name(id='relroots', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relroot', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='relroot', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='relroot', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='relroot', ctx=Store())], value=Call(func=Attribute(value=Name(id='relroot', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='/'), Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='relroot', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[BinOp(left=Name(id='modpath', ctx=Load()), op=Div(), right=Name(id='relroot', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='relroot', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='values', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_get_override_ini_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=None)), For(target=Name(id='ini_config', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_override_ini', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='user_ini_value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ini_config', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='-o/--override-ini expects option=value style (got: {!r}).'), attr='format', ctx=Load()), args=[Name(id='ini_config', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='user_ini_value', ctx=Load()))], orelse=[])], finalbody=[])], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='getoption', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='default'), arg(arg='skip', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='notset', ctx=Load()), Constant(value=False)]), body=[Expr(value=Constant(value='Return command line option value.\n\n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the "dest" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opt2dest', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='option', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='val', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='skip', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='val', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name='e', body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='notset', ctx=Load())]), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), If(test=Name(id='skip', ctx=Load()), body=[Import(names=[alias(name='pytest')]), Expr(value=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='skip', ctx=Load()), args=[JoinedStr(values=[Constant(value='no '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=' option found')])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='no option named '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='getvalue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Deprecated, use getoption() instead.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getoption', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='getvalueorskip', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Deprecated, use getoption(skip=True) instead.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getoption', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='skip', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='_warn_about_missing_assertion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_assertion_supported', ctx=Load()), args=[], keywords=[])), body=[If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='plain')]), body=[Assign(targets=[Name(id='warning_text', ctx=Store())], value=Constant(value='ASSERTIONS ARE NOT EXECUTED and FAILING TESTS WILL PASS.  Are you using python -O?'))], orelse=[Assign(targets=[Name(id='warning_text', ctx=Store())], value=Constant(value='assertions not in test modules or plugins will be ignored because assert statements are not executed by the underlying Python interpreter (are you using python -O?)\n'))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[Name(id='warning_text', ctx=Load())], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=3))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_warn_about_skipped_plugins', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='msg', ctx=Store())], ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='skipped_plugins', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='issue_config_time_warning', ctx=Load()), args=[Call(func=Name(id='PytestConfigWarning', ctx=Load()), args=[JoinedStr(values=[Constant(value='skipped plugin '), FormattedValue(value=Name(id='module_name', ctx=Load()), conversion=114), Constant(value=': '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='_assertion_supported', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assert(test=Constant(value=False))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[Return(value=Constant(value=False))], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='create_terminal_writer', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create a TerminalWriter instance configured according to the options\n    in the config object.\n\n    Every code which requires a TerminalWriter object and has access to a\n    config object should use this function.\n    ')), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='color', ctx=Load()), ops=[Eq()], comparators=[Constant(value='yes')]), body=[Assign(targets=[Attribute(value=Name(id='tw', ctx=Load()), attr='hasmarkup', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='color', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Assign(targets=[Attribute(value=Name(id='tw', ctx=Load()), attr='hasmarkup', ctx=Store())], value=Constant(value=False))], orelse=[])]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='code_highlight', ctx=Load()), ops=[Eq()], comparators=[Constant(value='yes')]), body=[Assign(targets=[Attribute(value=Name(id='tw', ctx=Load()), attr='code_highlight', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='code_highlight', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Assign(targets=[Attribute(value=Name(id='tw', ctx=Load()), attr='code_highlight', ctx=Store())], value=Constant(value=False))], orelse=[])]), Return(value=Name(id='tw', ctx=Load()))], decorator_list=[], returns=Name(id='TerminalWriter', ctx=Load())), FunctionDef(name='_strtobool', args=arguments(posonlyargs=[], args=[arg(arg='val', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a string representation of truth to True or False.\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n\n    .. note:: Copied from distutils.util.\n    ")), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='y'), Constant(value='yes'), Constant(value='t'), Constant(value='true'), Constant(value='on'), Constant(value='1')], ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='n'), Constant(value='no'), Constant(value='f'), Constant(value='false'), Constant(value='off'), Constant(value='0')], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid truth value '), FormattedValue(value=Name(id='val', ctx=Load()), conversion=114)])], keywords=[]))])])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='parse_warning_filter', args=arguments(posonlyargs=[], args=[arg(arg='arg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='escape', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Expr(value=Constant(value='Parse a warnings filter string.\n\n    This is copied from warnings._setoption with the following changes:\n\n    * Does not apply the filter.\n    * Escaping is optional.\n    * Raises UsageError so we get nice error messages on failure.\n    ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='error_template', ctx=Store())], value=Call(func=Name(id='dedent', ctx=Load()), args=[JoinedStr(values=[Constant(value='        while parsing the following warning configuration:\n\n          '), FormattedValue(value=Name(id='arg', ctx=Load()), conversion=-1), Constant(value='\n\n        This error occurred:\n\n        {error}\n        ')])], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=5)]), body=[Assign(targets=[Name(id='doc_url', ctx=Store())], value=Constant(value='https://docs.python.org/3/library/warnings.html#describing-warning-filters')), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='dedent', ctx=Load()), args=[JoinedStr(values=[Constant(value='            Too many fields ('), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), conversion=-1), Constant(value='), expected at most 5 separated by colons:\n\n              action:message:category:module:line\n\n            For more information please consult: '), FormattedValue(value=Name(id='doc_url', ctx=Load()), conversion=-1), Constant(value='\n            ')])], keywords=[])), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='error_template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='error', value=Name(id='error', ctx=Load()))])], keywords=[]))], orelse=[]), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=5)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='action_', ctx=Store()), Name(id='message', ctx=Store()), Name(id='category_', ctx=Store()), Name(id='module', ctx=Store()), Name(id='lineno_', ctx=Store())], ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='parts', ctx=Load()), ifs=[], is_async=0)])), Try(body=[AnnAssign(target=Name(id='action', ctx=Store()), annotation=Constant(value='warnings._ActionKind'), value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='_getaction', ctx=Load()), args=[Name(id='action_', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Attribute(value=Name(id='warnings', ctx=Load()), attr='_OptionError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='error_template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='error', value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[AnnAssign(target=Name(id='category', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Warning', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_resolve_warning_category', ctx=Load()), args=[Name(id='category_', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='exc_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exception_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='exc_info', ctx=Load()), attr='getrepr', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='native'))])), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='error_template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='error', value=Name(id='exception_text', ctx=Load()))])], keywords=[]))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='message', ctx=Load()), Name(id='escape', ctx=Load())]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='module', ctx=Load()), Name(id='escape', ctx=Load())]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='module', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\\Z')))], orelse=[]), If(test=Name(id='lineno_', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='lineno_', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='number is negative')], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='error_template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='error', value=JoinedStr(values=[Constant(value='invalid lineno '), FormattedValue(value=Name(id='lineno_', ctx=Load()), conversion=114), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)]))])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Constant(value=0))]), Return(value=Tuple(elts=[Name(id='action', ctx=Load()), Name(id='message', ctx=Load()), Name(id='category', ctx=Load()), Name(id='module', ctx=Load()), Name(id='lineno', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=50))])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='warnings._ActionKind'), Name(id='str', ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Warning', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_resolve_warning_category', args=arguments(posonlyargs=[], args=[arg(arg='category', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Copied from warnings._getcategory, but changed so it lets exceptions (specially ImportErrors)\n    propagate so we can get access to their tracebacks (#9218).\n    ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Name(id='category', ctx=Load())), body=[Return(value=Name(id='Warning', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='category', ctx=Load())]), body=[Import(names=[alias(name='builtins', asname='m')]), Assign(targets=[Name(id='klass', ctx=Store())], value=Name(id='category', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='module', ctx=Store()), Name(id='_', ctx=Store()), Name(id='klass', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='category', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Name(id='klass', ctx=Load())], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='cat', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='klass', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='cat', ctx=Load()), Name(id='Warning', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='cat', ctx=Load()), conversion=-1), Constant(value=' is not a Warning subclass')])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Warning', ctx=Load()), ctx=Load()), Name(id='cat', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Warning', ctx=Load()), ctx=Load())), FunctionDef(name='apply_warning_filters', args=arguments(posonlyargs=[], args=[arg(arg='config_filters', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='cmdline_filters', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Applies pytest-configured filters to the warnings module')), For(target=Name(id='arg', ctx=Store()), iter=Name(id='config_filters', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Starred(value=Call(func=Name(id='parse_warning_filter', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[keyword(arg='escape', value=Constant(value=False))]), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='arg', ctx=Store()), iter=Name(id='cmdline_filters', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Starred(value=Call(func=Name(id='parse_warning_filter', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[keyword(arg='escape', value=Constant(value=True))]), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])