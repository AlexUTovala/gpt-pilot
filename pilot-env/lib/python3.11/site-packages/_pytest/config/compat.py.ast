Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='warnings')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='compat', names=[alias(name='LEGACY_PATH')], level=2), ImportFrom(module='compat', names=[alias(name='legacy_path')], level=2), ImportFrom(module='deprecated', names=[alias(name='HOOK_LEGACY_PATH_ARG')], level=2), ImportFrom(module='_pytest.nodes', names=[alias(name='_check_path')], level=0), Assign(targets=[Name(id='imply_paths_hooks', ctx=Store())], value=Dict(keys=[Constant(value='pytest_ignore_collect'), Constant(value='pytest_collect_file'), Constant(value='pytest_pycollect_makemodule'), Constant(value='pytest_report_header'), Constant(value='pytest_report_collectionfinish')], values=[Tuple(elts=[Constant(value='collection_path'), Constant(value='path')], ctx=Load()), Tuple(elts=[Constant(value='file_path'), Constant(value='path')], ctx=Load()), Tuple(elts=[Constant(value='module_path'), Constant(value='path')], ctx=Load()), Tuple(elts=[Constant(value='start_path'), Constant(value='startdir')], ctx=Load()), Tuple(elts=[Constant(value='start_path'), Constant(value='startdir')], ctx=Load())])), ClassDef(name='PathAwareHookProxy', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    this helper wraps around hook callers\n    until pluggy supports fixingcalls, this one will do\n\n    it currently doesn't return full hook caller proxies for fixed hooks,\n    this may have to be changed later depending on bugs\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook_caller')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__hook_caller', ctx=Store())], value=Name(id='hook_caller', ctx=Load()))], decorator_list=[]), FunctionDef(name='__dir__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__hook_caller', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='_wraps')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load())]), body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__hook_caller', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='imply_paths_hooks', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='hook', ctx=Load())), Return(value=Name(id='hook', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='path_var', ctx=Store()), Name(id='fspath_var', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='imply_paths_hooks', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), FunctionDef(name='fixed_hook', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[AnnAssign(target=Name(id='path_value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='path_var', ctx=Load()), Constant(value=None)], keywords=[]), simple=1), AnnAssign(target=Name(id='fspath_value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LEGACY_PATH', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='fspath_var', ctx=Load()), Constant(value=None)], keywords=[]), simple=1), If(test=Compare(left=Name(id='fspath_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='HOOK_LEGACY_PATH_ARG', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='pylib_path_arg', value=Name(id='fspath_var', ctx=Load())), keyword(arg='pathlib_path_arg', value=Name(id='path_var', ctx=Load()))])], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[]), If(test=Compare(left=Name(id='path_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='fspath_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_check_path', ctx=Load()), args=[Name(id='path_value', ctx=Load()), Name(id='fspath_value', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='fspath_value', ctx=Store())], value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Name(id='path_value', ctx=Load())], keywords=[]))])], orelse=[Assert(test=Compare(left=Name(id='fspath_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='path_value', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='fspath_value', ctx=Load())], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='kw', ctx=Load()), slice=Name(id='path_var', ctx=Load()), ctx=Store())], value=Name(id='path_value', ctx=Load())), Assign(targets=[Subscript(value=Name(id='kw', ctx=Load()), slice=Name(id='fspath_var', ctx=Load()), ctx=Store())], value=Name(id='fspath_value', ctx=Load())), Return(value=Call(func=Name(id='hook', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[Call(func=Name(id='_wraps', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[])]), Assign(targets=[Attribute(value=Name(id='fixed_hook', ctx=Load()), attr='__name__', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='fixed_hook', ctx=Load())), Return(value=Name(id='fixed_hook', ctx=Load()))])], decorator_list=[])], decorator_list=[])], type_ignores=[])