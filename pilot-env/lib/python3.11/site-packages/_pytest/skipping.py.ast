Module(body=[Expr(value=Constant(value='Support for skip/xfail functions and markers.')), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), ImportFrom(module='collections.abc', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.mark.structures', names=[alias(name='Mark')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='xfail')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='BaseReport')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='CallInfo')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--runxfail')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='runxfail')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Report the results of xfail tests as if they were not marked'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='xfail_strict'), Constant(value='Default for the strict parameter of xfail markers when not given explicitly (default: False)')], keywords=[keyword(arg='default', value=Constant(value=False)), keyword(arg='type', value=Constant(value='bool'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='runxfail', ctx=Load()), body=[Import(names=[alias(name='pytest')]), Assign(targets=[Name(id='old', ctx=Store())], value=Attribute(value=Name(id='pytest', ctx=Load()), attr='xfail', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='pytest', ctx=Load()), Constant(value='xfail'), Name(id='old', ctx=Load())], keywords=[]))], keywords=[])), FunctionDef(name='nop', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Pass()], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='nop', ctx=Load()), attr='Exception', ctx=Store())], value=Attribute(value=Name(id='xfail', ctx=Load()), attr='Exception', ctx=Load())), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='pytest', ctx=Load()), Constant(value='xfail'), Name(id='nop', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value='skip(reason=None): skip the given test function with an optional reason. Example: skip(reason="no way of currently testing this") skips the test.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value="skipif(condition, ..., *, reason=...): skip the given test function if any of the conditions evaluate to True. Example: skipif(sys.platform == 'win32') skips the test if we are on the win32 platform. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='addinivalue_line', ctx=Load()), args=[Constant(value='markers'), Constant(value="xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): mark the test function as an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don't even want to execute the test function. If only specific exception(s) are expected, you can list them in raises, and if the test fails in other ways, it will be reported as a true failure. See https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail")], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='evaluate_condition', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='mark', annotation=Name(id='Mark', ctx=Load())), arg(arg='condition', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Evaluate a single skipif/xfail condition.\n\n    If an old-style string condition is given, it is eval()'d, otherwise the\n    condition is bool()'d. If this fails, an appropriately formatted pytest.fail\n    is raised.\n\n    Returns (result, reason). The reason is only relevant if the result is True.\n    ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='condition', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='globals_', ctx=Store())], value=Dict(keys=[Constant(value='os'), Constant(value='sys'), Constant(value='platform'), Constant(value='config')], values=[Name(id='os', ctx=Load()), Name(id='sys', ctx=Load()), Name(id='platform', ctx=Load()), Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load())])), For(target=Name(id='dictionary', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_markeval_namespace', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()))])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='dictionary', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='pytest_markeval_namespace() needs to return a dict, got {!r}'), attr='format', ctx=Load()), args=[Name(id='dictionary', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='globals_', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='dictionary', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='obj')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='globals_', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='obj', ctx=Load()), attr='__globals__', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Name(id='mark', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' condition>')])), Assign(targets=[Name(id='condition_code', ctx=Store())], value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='condition', ctx=Load()), Name(id='filename', ctx=Load()), Constant(value='eval')], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='condition_code', ctx=Load()), Name(id='globals_', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SyntaxError', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='msglines', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='Error evaluating %r condition'), op=Mod(), right=Attribute(value=Name(id='mark', ctx=Load()), attr='name', ctx=Load())), BinOp(left=Constant(value='    '), op=Add(), right=Name(id='condition', ctx=Load())), BinOp(left=BinOp(left=Constant(value='    '), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=BoolOp(op=Or(), values=[Attribute(value=Name(id='exc', ctx=Load()), attr='offset', ctx=Load()), Constant(value=0)]))), op=Add(), right=Constant(value='^')), Constant(value='SyntaxError: invalid syntax')], ctx=Load())), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='msglines', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='msglines', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='Error evaluating %r condition'), op=Mod(), right=Attribute(value=Name(id='mark', ctx=Load()), attr='name', ctx=Load())), BinOp(left=Constant(value='    '), op=Add(), right=Name(id='condition', ctx=Load())), Starred(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception_only', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), Name(id='exc', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='msglines', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[], finalbody=[])], orelse=[Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='condition', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='msglines', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='Error evaluating %r condition as a boolean'), op=Mod(), right=Attribute(value=Name(id='mark', ctx=Load()), attr='name', ctx=Load())), Starred(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception_only', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), Name(id='exc', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='msglines', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[], finalbody=[])]), Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='reason'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='reason', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='condition', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=BinOp(left=Constant(value='condition: '), op=Add(), right=Name(id='condition', ctx=Load())))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='Error evaluating %r: '), op=Mod(), right=Attribute(value=Name(id='mark', ctx=Load()), attr='name', ctx=Load())), op=Add(), right=Constant(value='you need to specify reason=STRING when using booleans as conditions.'))), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[]), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='reason', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Skip', bases=[], keywords=[], body=[Expr(value=Constant(value='The result of evaluate_skip_marks().')), AnnAssign(target=Name(id='reason', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value='unconditional skip'), simple=1)], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), FunctionDef(name='evaluate_skip_marks', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Evaluate skip and skipif marks on item, returning Skip if triggered.')), For(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='skipif'))]), body=[If(test=Compare(left=Constant(value='condition'), ops=[NotIn()], comparators=[Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='conditions', ctx=Store())], value=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()))], orelse=[Assign(targets=[Name(id='conditions', ctx=Store())], value=Tuple(elts=[Subscript(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='condition'), ctx=Load())], ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='conditions', ctx=Load())), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='reason'), Constant(value='')], keywords=[])), Return(value=Call(func=Name(id='Skip', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='condition', ctx=Store()), iter=Name(id='conditions', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='result', ctx=Store()), Name(id='reason', ctx=Store())], ctx=Store())], value=Call(func=Name(id='evaluate_condition', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='mark', ctx=Load()), Name(id='condition', ctx=Load())], keywords=[])), If(test=Name(id='result', ctx=Load()), body=[Return(value=Call(func=Name(id='Skip', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='skip'))]), body=[Try(body=[Return(value=Call(func=Name(id='Skip', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' - maybe you meant pytest.mark.skipif?'))], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Skip', ctx=Load()), ctx=Load())), ClassDef(name='Xfail', bases=[], keywords=[], body=[Expr(value=Constant(value='The result of evaluate_xfail_marks().')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='reason'), Constant(value='run'), Constant(value='strict'), Constant(value='raises')], ctx=Load())), AnnAssign(target=Name(id='reason', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='run', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='strict', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='raises', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()), simple=1)], decorator_list=[Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load()), args=[], keywords=[keyword(arg='frozen', value=Constant(value=True))])]), FunctionDef(name='evaluate_xfail_marks', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Evaluate xfail marks on item, returning Xfail if triggered.')), For(target=Name(id='mark', ctx=Store()), iter=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='iter_markers', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='xfail'))]), body=[Assign(targets=[Name(id='run', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='run'), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='strict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='strict'), Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='xfail_strict')], keywords=[])], keywords=[])), Assign(targets=[Name(id='raises', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='raises'), Constant(value=None)], keywords=[])), If(test=Compare(left=Constant(value='condition'), ops=[NotIn()], comparators=[Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='conditions', ctx=Store())], value=Attribute(value=Name(id='mark', ctx=Load()), attr='args', ctx=Load()))], orelse=[Assign(targets=[Name(id='conditions', ctx=Store())], value=Tuple(elts=[Subscript(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='condition'), ctx=Load())], ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='conditions', ctx=Load())), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mark', ctx=Load()), attr='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='reason'), Constant(value='')], keywords=[])), Return(value=Call(func=Name(id='Xfail', ctx=Load()), args=[Name(id='reason', ctx=Load()), Name(id='run', ctx=Load()), Name(id='strict', ctx=Load()), Name(id='raises', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='condition', ctx=Store()), iter=Name(id='conditions', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='result', ctx=Store()), Name(id='reason', ctx=Store())], ctx=Store())], value=Call(func=Name(id='evaluate_condition', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='mark', ctx=Load()), Name(id='condition', ctx=Load())], keywords=[])), If(test=Name(id='result', ctx=Load()), body=[Return(value=Call(func=Name(id='Xfail', ctx=Load()), args=[Name(id='reason', ctx=Load()), Name(id='run', ctx=Load()), Name(id='strict', ctx=Load()), Name(id='raises', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Xfail', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='xfailed_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Xfail', ctx=Load()), ctx=Load()), ctx=Load()), args=[], keywords=[])), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='skipped', ctx=Store())], value=Call(func=Name(id='evaluate_skip_marks', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Name(id='skipped', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='skip', ctx=Load()), attr='Exception', ctx=Load()), args=[Attribute(value=Name(id='skipped', ctx=Load()), attr='reason', ctx=Load())], keywords=[keyword(arg='_use_item_location', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xfailed_key', ctx=Load()), ctx=Store()), Name(id='xfailed', ctx=Store())], value=Call(func=Name(id='evaluate_xfail_marks', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='xfailed', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='runxfail', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='xfailed', ctx=Load()), attr='run', ctx=Load()))]), body=[Expr(value=Call(func=Name(id='xfail', ctx=Load()), args=[BinOp(left=Constant(value='[NOTRUN] '), op=Add(), right=Attribute(value=Name(id='xfailed', ctx=Load()), attr='reason', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_call', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xfailed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xfailed_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='xfailed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xfailed_key', ctx=Load()), ctx=Store()), Name(id='xfailed', ctx=Store())], value=Call(func=Name(id='evaluate_xfail_marks', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='xfailed', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='runxfail', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='xfailed', ctx=Load()), attr='run', ctx=Load()))]), body=[Expr(value=Call(func=Name(id='xfail', ctx=Load()), args=[BinOp(left=Constant(value='[NOTRUN] '), op=Add(), right=Attribute(value=Name(id='xfailed', ctx=Load()), attr='reason', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Yield()), Assign(targets=[Name(id='xfailed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xfailed_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='xfailed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xfailed_key', ctx=Load()), ctx=Store()), Name(id='xfailed', ctx=Store())], value=Call(func=Name(id='evaluate_xfail_marks', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_makereport', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='call', annotation=Subscript(value=Name(id='CallInfo', ctx=Load()), slice=Constant(value=None), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='xfailed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xfailed_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='runxfail', ctx=Load()), body=[Pass()], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='xfail', ctx=Load()), attr='Exception', ctx=Load())], keywords=[])]), body=[Assert(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='msg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='wasxfail', ctx=Store())], value=BinOp(left=Constant(value='reason: '), op=Add(), right=Attribute(value=Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='msg', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value='skipped'))], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='rep', ctx=Load()), attr='skipped', ctx=Load())), Name(id='xfailed', ctx=Load())]), body=[If(test=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), body=[Assign(targets=[Name(id='raises', ctx=Store())], value=Attribute(value=Name(id='xfailed', ctx=Load()), attr='raises', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='raises', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='raises', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value='failed'))], orelse=[Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value='skipped')), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='wasxfail', ctx=Store())], value=Attribute(value=Name(id='xfailed', ctx=Load()), attr='reason', ctx=Load()))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='call', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[If(test=Attribute(value=Name(id='xfailed', ctx=Load()), attr='strict', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value='failed')), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Store())], value=BinOp(left=Constant(value='[XPASS(strict)] '), op=Add(), right=Attribute(value=Name(id='xfailed', ctx=Load()), attr='reason', ctx=Load())))], orelse=[Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value='passed')), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='wasxfail', ctx=Store())], value=Attribute(value=Name(id='xfailed', ctx=Load()), attr='reason', ctx=Load()))])], orelse=[])])], orelse=[])])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])]), FunctionDef(name='pytest_report_teststatus', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]), body=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value='xfailed'), Constant(value='x'), Constant(value='XFAIL')], ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value='xpassed'), Constant(value='X'), Constant(value='XPASS')], ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], type_ignores=[])