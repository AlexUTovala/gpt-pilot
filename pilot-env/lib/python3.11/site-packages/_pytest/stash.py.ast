Module(body=[ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Stash'), Constant(value='StashKey')], ctx=Load())), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), Assign(targets=[Name(id='D', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='D')], keywords=[])), ClassDef(name='StashKey', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='``StashKey`` is an object used as a key to a :class:`Stash`.\n\n    A ``StashKey`` is associated with the type ``T`` of the value of the key.\n\n    A ``StashKey`` is unique and cannot conflict with another key.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], decorator_list=[]), ClassDef(name='Stash', bases=[], keywords=[], body=[Expr(value=Constant(value='``Stash`` is a type-safe heterogeneous mutable mapping that\n    allows keys and value types to be defined separately from\n    where it (the ``Stash``) is created.\n\n    Usually you will be given an object which has a ``Stash``, for example\n    :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:\n\n    .. code-block:: python\n\n        stash: Stash = some_object.stash\n\n    If a module or plugin wants to store data in this ``Stash``, it creates\n    :class:`StashKey`\\s for its keys (at the module level):\n\n    .. code-block:: python\n\n        # At the top-level of the module\n        some_str_key = StashKey[str]()\n        some_bool_key = StashKey[bool]()\n\n    To store information:\n\n    .. code-block:: python\n\n        # Value type must match the key.\n        stash[some_str_key] = "value"\n        stash[some_bool_key] = True\n\n    To retrieve the information:\n\n    .. code-block:: python\n\n        # The static type of some_str is str.\n        some_str = stash[some_str_key]\n        # The static type of some_bool is bool.\n        some_bool = stash[some_bool_key]\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_storage')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())), arg(arg='value', annotation=Name(id='T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set a value for key.')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the value for key.\n\n        Raises ``KeyError`` if the key wasn't set before.\n        ")), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='T', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='T', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())), arg(arg='default', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the value for key, or return default if the key wasn't set\n        before.")), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='T', ctx=Load()), Name(id='D', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='setdefault', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())), arg(arg='default', annotation=Name(id='T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the value of key if already set, otherwise set the value\n        of key to default and return default.')), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='default', ctx=Load())), Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='T', ctx=Load())), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Delete the value for key.\n\n        Raises ``KeyError`` if the key wasn't set before.\n        ")), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether key was set.')), Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return how many items exist in the stash.')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])