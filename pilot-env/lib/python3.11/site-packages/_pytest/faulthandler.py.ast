Module(body=[Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), Assign(targets=[Name(id='fault_handler_stderr_fd_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fault_handler_originally_enabled_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), args=[], keywords=[])), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='help', ctx=Store())], value=Constant(value='Dump the traceback of all threads if a test takes more than TIMEOUT seconds to finish')), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='faulthandler_timeout'), Name(id='help', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=0.0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='faulthandler')]), Assign(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='dup', ctx=Load()), args=[Call(func=Name(id='get_stderr_fileno', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_originally_enabled_key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='is_enabled', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='enable', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_unconfigure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='faulthandler')]), Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='disable', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ctx=Del())])], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='fault_handler_originally_enabled_key', ctx=Load()), Constant(value=False)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='enable', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Call(func=Name(id='get_stderr_fileno', ctx=Load()), args=[], keywords=[]))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_stderr_fileno', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='fileno', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='fileno', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='fileno', ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load())], ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stderr__', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_timeout_config_value', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='float', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='faulthandler_timeout')], keywords=[]), Constant(value=0.0)])], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='pytest_runtest_protocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Name(id='get_timeout_config_value', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Import(names=[alias(name='faulthandler')]), Assign(targets=[Name(id='stderr', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='fault_handler_stderr_fd_key', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='dump_traceback_later', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[keyword(arg='file', value=Name(id='stderr', ctx=Load()))])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='cancel_dump_traceback_later', ctx=Load()), args=[], keywords=[]))])], orelse=[Expr(value=Yield())])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='trylast', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_enter_pdb', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cancel any traceback dumping due to timeout before entering pdb.')), Import(names=[alias(name='faulthandler')]), Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='cancel_dump_traceback_later', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_exception_interact', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cancel any traceback dumping due to an interactive exception being\n    raised.')), Import(names=[alias(name='faulthandler')]), Expr(value=Call(func=Attribute(value=Name(id='faulthandler', ctx=Load()), attr='cancel_dump_traceback_later', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None))], type_ignores=[])