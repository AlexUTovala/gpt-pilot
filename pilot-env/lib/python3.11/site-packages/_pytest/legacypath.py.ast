Module(body=[Expr(value=Constant(value='Add backward compatibility support for the legacy py path type.')), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='subprocess')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='iniconfig', names=[alias(name='SectionWrapper')], level=0), ImportFrom(module='_pytest.cacheprovider', names=[alias(name='Cache')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='LEGACY_PATH')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='legacy_path')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='PytestPluginManager')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.monkeypatch', names=[alias(name='MonkeyPatch')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Node')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='HookRecorder')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='Pytester')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='RunResult')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), ImportFrom(module='_pytest.tmpdir', names=[alias(name='TempPathFactory')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Final')], level=0), Import(names=[alias(name='pexpect')])], orelse=[]), ClassDef(name='Testdir', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead.\n\n    All methods just forward to an internal :class:`Pytester` instance, converting results\n    to `legacy_path` objects as necessary.\n    ')), Assign(targets=[Name(id='__test__', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Name(id='CLOSE_STDIN', ctx=Store()), annotation=Constant(value='Final'), value=Attribute(value=Name(id='Pytester', ctx=Load()), attr='CLOSE_STDIN', ctx=Load()), simple=1), AnnAssign(target=Name(id='TimeoutExpired', ctx=Store()), annotation=Constant(value='Final'), value=Attribute(value=Name(id='Pytester', ctx=Load()), attr='TimeoutExpired', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pytester', annotation=Name(id='Pytester', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Store())], value=Name(id='pytester', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='tmpdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Temporary directory where tests are executed.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='test_tmproot', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='_test_tmproot', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='request', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='_request', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='plugins', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='plugins', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='plugins', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plugins')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='plugins', ctx=Store())], value=Name(id='plugins', ctx=Load()))], decorator_list=[Attribute(value=Name(id='plugins', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='monkeypatch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='_monkeypatch', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='MonkeyPatch', ctx=Load())), FunctionDef(name='make_hook_recorder', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pluginmanager')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.make_hook_recorder`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='make_hook_recorder', ctx=Load()), args=[Name(id='pluginmanager', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='HookRecorder', ctx=Load())), FunctionDef(name='chdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.chdir`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='chdir', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='finalize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester._finalize`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='_finalize', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.makefile`.')), If(test=BoolOp(op=And(), values=[Name(id='ext', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[]))]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='ext', ctx=Load())))], orelse=[]), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='makefile', ctx=Load()), args=[Name(id='ext', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='makeconftest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.makeconftest`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='makeconftest', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='makeini', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.makeini`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='makeini', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='getinicfg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.getinicfg`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getinicfg', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='SectionWrapper', ctx=Load())), FunctionDef(name='makepyprojecttoml', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.makepyprojecttoml`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='makepyprojecttoml', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='makepyfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.makepyfile`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='makepyfile', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='maketxtfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.maketxtfile`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='maketxtfile', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='syspathinsert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='See :meth:`Pytester.syspathinsert`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='syspathinsert', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='mkdir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.mkdir`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='mkpydir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.mkpydir`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='mkpydir', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='copy_example', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='See :meth:`Pytester.copy_example`.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='copy_example', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='getnode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.getnode`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getnode', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Item', ctx=Load()), Name(id='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='getpathnode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.getpathnode`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getpathnode', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='genitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='colitems', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Item', ctx=Load()), Name(id='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.genitems`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='genitems', ctx=Load()), args=[Name(id='colitems', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load())), FunctionDef(name='runitem', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runitem`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runitem', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='inline_runsource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], vararg=arg(arg='cmdlineargs'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.inline_runsource`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='inline_runsource', ctx=Load()), args=[Name(id='source', ctx=Load()), Starred(value=Name(id='cmdlineargs', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='inline_genitems', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.inline_genitems`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='inline_genitems', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='inline_run', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[arg(arg='plugins'), arg(arg='no_reraise_ctrlc', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Tuple(elts=[], ctx=Load()), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.inline_run`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='inline_run', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='plugins', value=Name(id='plugins', ctx=Load())), keyword(arg='no_reraise_ctrlc', value=Name(id='no_reraise_ctrlc', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='runpytest_inprocess', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runpytest_inprocess`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runpytest_inprocess', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='RunResult', ctx=Load())), FunctionDef(name='runpytest', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runpytest`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runpytest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='RunResult', ctx=Load())), FunctionDef(name='parseconfig', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.parseconfig`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='parseconfig', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Config', ctx=Load())), FunctionDef(name='parseconfigure', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.parseconfigure`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='parseconfigure', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Config', ctx=Load())), FunctionDef(name='getitem', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source'), arg(arg='funcname')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='test_func')]), body=[Expr(value=Constant(value='See :meth:`Pytester.getitem`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getitem', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='funcname', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='getitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.getitems`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getitems', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='getmodulecol', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source'), arg(arg='configargs'), arg(arg='withinit')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=False)]), body=[Expr(value=Constant(value='See :meth:`Pytester.getmodulecol`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='getmodulecol', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='configargs', value=Name(id='configargs', ctx=Load())), keyword(arg='withinit', value=Name(id='withinit', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='collect_by_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='modcol', annotation=Name(id='Collector', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.collect_by_name`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='collect_by_name', ctx=Load()), args=[Name(id='modcol', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Item', ctx=Load()), Name(id='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='popen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmdargs'), arg(arg='stdout'), arg(arg='stderr'), arg(arg='stdin')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()), Name(id='CLOSE_STDIN', ctx=Load())]), body=[Expr(value=Constant(value='See :meth:`Pytester.popen`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='popen', ctx=Load()), args=[Name(id='cmdargs', ctx=Load()), Name(id='stdout', ctx=Load()), Name(id='stderr', ctx=Load()), Name(id='stdin', ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='cmdargs'), kwonlyargs=[arg(arg='timeout'), arg(arg='stdin')], kw_defaults=[Constant(value=None), Name(id='CLOSE_STDIN', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.run`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='run', ctx=Load()), args=[Starred(value=Name(id='cmdargs', ctx=Load()), ctx=Load())], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(arg='stdin', value=Name(id='stdin', ctx=Load()))]))], decorator_list=[], returns=Name(id='RunResult', ctx=Load())), FunctionDef(name='runpython', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='script')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runpython`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runpython', ctx=Load()), args=[Name(id='script', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='RunResult', ctx=Load())), FunctionDef(name='runpython_c', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runpython_c`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runpython_c', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='runpytest_subprocess', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[arg(arg='timeout')], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='See :meth:`Pytester.runpytest_subprocess`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='runpytest_subprocess', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))]))], decorator_list=[], returns=Name(id='RunResult', ctx=Load())), FunctionDef(name='spawn_pytest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load())), arg(arg='expect_timeout', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10.0)]), body=[Expr(value=Constant(value='See :meth:`Pytester.spawn_pytest`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='spawn_pytest', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[keyword(arg='expect_timeout', value=Name(id='expect_timeout', ctx=Load()))]))], decorator_list=[], returns=Constant(value='pexpect.spawn')), FunctionDef(name='spawn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmd', annotation=Name(id='str', ctx=Load())), arg(arg='expect_timeout', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10.0)]), body=[Expr(value=Constant(value='See :meth:`Pytester.spawn`.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pytester', ctx=Load()), attr='spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='expect_timeout', value=Name(id='expect_timeout', ctx=Load()))]))], decorator_list=[], returns=Constant(value='pexpect.spawn')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Testdir '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmpdir', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tmpdir', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='LegacyTestdirPlugin', bases=[], keywords=[], body=[FunctionDef(name='testdir', args=arguments(posonlyargs=[], args=[arg(arg='pytester', annotation=Name(id='Pytester', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Identical to :fixture:`pytester`, and provides an instance whose methods return\n        legacy ``LEGACY_PATH`` objects instead when applicable.\n\n        New code should avoid using :fixture:`testdir` in favor of :fixture:`pytester`.\n        ')), Return(value=Call(func=Name(id='Testdir', ctx=Load()), args=[Name(id='pytester', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='staticmethod', ctx=Load()), Name(id='fixture', ctx=Load())], returns=Name(id='Testdir', ctx=Load()))], decorator_list=[]), ClassDef(name='TempdirFactory', bases=[], keywords=[], body=[Expr(value=Constant(value='Backward compatibility wrapper that implements :class:`py.path.local`\n    for :class:`TempPathFactory`.\n\n    .. note::\n        These days, it is preferred to use ``tmp_path_factory``.\n\n        :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.\n\n    ')), AnnAssign(target=Name(id='_tmppath_factory', ctx=Store()), annotation=Name(id='TempPathFactory', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tmppath_factory', annotation=Name(id='TempPathFactory', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tmppath_factory', ctx=Store())], value=Name(id='tmppath_factory', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='mktemp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='basename', annotation=Name(id='str', ctx=Load())), arg(arg='numbered', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Same as :meth:`TempPathFactory.mktemp`, but returns a :class:`py.path.local` object.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tmppath_factory', ctx=Load()), attr='mktemp', ctx=Load()), args=[Name(id='basename', ctx=Load()), Name(id='numbered', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='getbasetemp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Same as :meth:`TempPathFactory.getbasetemp`, but returns a :class:`py.path.local` object.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tmppath_factory', ctx=Load()), attr='getbasetemp', ctx=Load()), args=[], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='LegacyTmpdirPlugin', bases=[], keywords=[], body=[FunctionDef(name='tmpdir_factory', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a :class:`pytest.TempdirFactory` instance for the test session.')), Return(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='_tmpdirhandler', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load()), Call(func=Name(id='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Constant(value='session'))])], returns=Name(id='TempdirFactory', ctx=Load())), FunctionDef(name='tmpdir', args=arguments(posonlyargs=[], args=[arg(arg='tmp_path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a temporary directory path object which is unique to each test\n        function invocation, created as a sub directory of the base temporary\n        directory.\n\n        By default, a new base temporary directory is created each test session,\n        and old bases are removed after 3 sessions, to aid in debugging. If\n        ``--basetemp`` is used then it is cleared each session. See :ref:`base\n        temporary directory`.\n\n        The returned object is a `legacy_path`_ object.\n\n        .. note::\n            These days, it is preferred to use ``tmp_path``.\n\n            :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.\n\n        .. _legacy_path: https://py.readthedocs.io/en/latest/path.html\n        ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Name(id='tmp_path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load()), Name(id='fixture', ctx=Load())], returns=Name(id='LEGACY_PATH', ctx=Load()))], decorator_list=[]), FunctionDef(name='Cache_makedir', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Cache', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a directory path object with the given name.\n\n    Same as :func:`mkdir`, but returns a legacy py path instance.\n    ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='FixtureRequest_fspath', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='(deprecated) The file system path of the test module which collected this test.')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='TerminalReporter_startdir', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='TerminalReporter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The directory from which pytest was invoked.\n\n    Prefer to use ``startpath`` which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='Config_invocation_dir', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The directory from which pytest was invoked.\n\n    Prefer to use :attr:`invocation_params.dir <InvocationParams.dir>`,\n    which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='Config_rootdir', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path to the :ref:`rootdir <rootdir>`.\n\n    Prefer to use :attr:`rootpath`, which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='Config_inifile', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path to the :ref:`configfile <configfiles>`.\n\n    Prefer to use :attr:`inipath`, which is a :class:`pathlib.Path`.\n\n    :type: Optional[LEGACY_PATH]\n    ')), Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), body=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load())], keywords=[])], keywords=[]), orelse=Constant(value=None)))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LEGACY_PATH', ctx=Load()), ctx=Load())), FunctionDef(name='Session_stardir', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path from which pytest was invoked.\n\n    Prefer to use ``startpath`` which is a :class:`pathlib.Path`.\n\n    :type: LEGACY_PATH\n    ')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='startpath', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='Config__getini_unknown_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='type', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pathlist')]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='dp', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='inipath', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='input_values', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load()))), Return(value=ListComp(elt=Call(func=Name(id='legacy_path', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='dp', ctx=Load()), op=Div(), right=Name(id='x', ctx=Load()))], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='input_values', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unknown configuration type: '), FormattedValue(value=Name(id='type', ctx=Load()), conversion=-1)]), Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='Node_fspath', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='(deprecated) returns a legacy_path copy of self.path')), Return(value=Call(func=Name(id='legacy_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='LEGACY_PATH', ctx=Load())), FunctionDef(name='Node_fspath_set', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Node', ctx=Load())), arg(arg='value', annotation=Name(id='LEGACY_PATH', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_load_initial_conftests', args=arguments(posonlyargs=[], args=[arg(arg='early_config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Monkeypatch legacy path attributes in several classes, as early as possible.')), Assign(targets=[Name(id='mp', ctx=Store())], value=Call(func=Name(id='MonkeyPatch', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='early_config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Attribute(value=Name(id='mp', ctx=Load()), attr='undo', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Cache', ctx=Load()), Constant(value='makedir'), Name(id='Cache_makedir', ctx=Load())], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='FixtureRequest', ctx=Load()), Constant(value='fspath'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='FixtureRequest_fspath', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='TerminalReporter', ctx=Load()), Constant(value='startdir'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='TerminalReporter_startdir', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Config', ctx=Load()), Constant(value='invocation_dir'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='Config_invocation_dir', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Config', ctx=Load()), Constant(value='rootdir'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='Config_rootdir', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Config', ctx=Load()), Constant(value='inifile'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='Config_inifile', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Session', ctx=Load()), Constant(value='startdir'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='Session_stardir', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Config', ctx=Load()), Constant(value='_getini_unknown_type'), Name(id='Config__getini_unknown_type', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='Node', ctx=Load()), Constant(value='fspath'), Call(func=Name(id='property', ctx=Load()), args=[Name(id='Node_fspath', ctx=Load()), Name(id='Node_fspath_set', ctx=Load())], keywords=[])], keywords=[keyword(arg='raising', value=Constant(value=False))]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Installs the LegacyTmpdirPlugin if the ``tmpdir`` plugin is also installed.')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='has_plugin', ctx=Load()), args=[Constant(value='tmpdir')], keywords=[]), body=[Assign(targets=[Name(id='mp', ctx=Store())], value=Call(func=Name(id='MonkeyPatch', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Attribute(value=Name(id='mp', ctx=Load()), attr='undo', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='tmp_path_factory', ctx=Store())], value=Attribute(value=Name(id='config', ctx=Load()), attr='_tmp_path_factory', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='_tmpdirhandler', ctx=Store())], value=Call(func=Name(id='TempdirFactory', ctx=Load()), args=[Name(id='tmp_path_factory', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='_tmpdirhandler'), Name(id='_tmpdirhandler', ctx=Load())], keywords=[keyword(arg='raising', value=Constant(value=False))]))], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='LegacyTmpdirPlugin', ctx=Load()), Constant(value='legacypath-tmpdir')], keywords=[]))], orelse=[])], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='pytest_plugin_registered', args=arguments(posonlyargs=[], args=[arg(arg='plugin', annotation=Name(id='object', ctx=Load())), arg(arg='manager', annotation=Name(id='PytestPluginManager', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='is_pytester', ctx=Store())], value=Compare(left=Name(id='plugin', ctx=Load()), ops=[Is()], comparators=[Call(func=Attribute(value=Name(id='manager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='pytester')], keywords=[])])), If(test=BoolOp(op=And(), values=[Name(id='is_pytester', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='manager', ctx=Load()), attr='is_registered', ctx=Load()), args=[Name(id='LegacyTestdirPlugin', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='manager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='LegacyTestdirPlugin', ctx=Load()), Constant(value='legacypath-pytester')], keywords=[]))], orelse=[])], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None))], type_ignores=[])