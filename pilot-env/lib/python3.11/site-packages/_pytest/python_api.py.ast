Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='pprint')]), ImportFrom(module='collections.abc', names=[alias(name='Collection')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Sized')], level=0), ImportFrom(module='decimal', names=[alias(name='Decimal')], level=0), ImportFrom(module='numbers', names=[alias(name='Complex')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='ContextManager')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Pattern')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='numpy', names=[alias(name='ndarray')], level=0)], orelse=[]), Import(names=[alias(name='_pytest._code')]), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='STRING_TYPES')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='overload')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), FunctionDef(name='_non_numeric_type_error', args=arguments(posonlyargs=[], args=[arg(arg='value'), arg(arg='at', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='at_str', ctx=Store())], value=IfExp(test=Name(id='at', ctx=Load()), body=JoinedStr(values=[Constant(value=' at '), FormattedValue(value=Name(id='at', ctx=Load()), conversion=-1)]), orelse=Constant(value=''))), Return(value=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='cannot make approximate comparisons to non-numeric values: {!r} {}'), attr='format', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='at_str', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='TypeError', ctx=Load())), FunctionDef(name='_compare_approx', args=arguments(posonlyargs=[], args=[arg(arg='full_object', annotation=Name(id='object', ctx=Load())), arg(arg='message_data', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='number_of_elements', annotation=Name(id='int', ctx=Load())), arg(arg='different_ids', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='max_abs_diff', annotation=Name(id='float', ctx=Load())), arg(arg='max_rel_diff', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message_list', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='message_data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='message_list', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Tuple(elts=[Constant(value='Index'), Constant(value='Obtained'), Constant(value='Expected')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_sizes', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='obtained', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Name(id='message_list', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=1), ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='obtained', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=2), ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=2), ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='explanation', ctx=Store())], value=BinOp(left=List(elts=[JoinedStr(values=[Constant(value='comparison failed. Mismatched elements: '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='different_ids', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' / '), FormattedValue(value=Name(id='number_of_elements', ctx=Load()), conversion=-1), Constant(value=':')]), JoinedStr(values=[Constant(value='Max absolute difference: '), FormattedValue(value=Name(id='max_abs_diff', ctx=Load()), conversion=-1)]), JoinedStr(values=[Constant(value='Max relative difference: '), FormattedValue(value=Name(id='max_rel_diff', ctx=Load()), conversion=-1)])], ctx=Load()), op=Add(), right=ListComp(elt=JoinedStr(values=[FormattedValue(value=Name(id='indexes', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)])), Constant(value=' | '), FormattedValue(value=Name(id='obtained', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)])), Constant(value=' | '), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Subscript(value=Name(id='max_sizes', ctx=Load()), slice=Constant(value=2), ctx=Load()), conversion=-1)]))]), generators=[comprehension(target=Tuple(elts=[Name(id='indexes', ctx=Store()), Name(id='obtained', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Name(id='message_list', ctx=Load()), ifs=[], is_async=0)]))), Return(value=Name(id='explanation', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='ApproxBase', bases=[], keywords=[], body=[Expr(value=Constant(value='Provide shared utilities for making approximate comparisons between\n    numbers or sequences of numbers.')), Assign(targets=[Name(id='__array_ufunc__', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='__array_priority__', ctx=Store())], value=Constant(value=100)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expected'), arg(arg='rel'), arg(arg='abs'), arg(arg='nan_ok', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Store())], value=Name(id='expected', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='abs', ctx=Store())], value=Name(id='abs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rel', ctx=Store())], value=Name(id='rel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_ok', ctx=Store())], value=Name(id='nan_ok', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_type', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_repr_compare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_side', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value='comparison failed'), JoinedStr(values=[Constant(value='Obtained: '), FormattedValue(value=Name(id='other_side', ctx=Load()), conversion=-1)]), JoinedStr(values=[Constant(value='Expected: '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='a', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])]), generators=[comprehension(target=Tuple(elts=[Name(id='a', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_yield_comparisons', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[Constant(value='approx() is not supported in a boolean context.\nDid you mean: `assert a == approx(b)`?')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Compare(left=Name(id='actual', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())])))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_approx_scalar', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='Decimal', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='ApproxDecimal', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='rel', value=Attribute(value=Name(id='self', ctx=Load()), attr='rel', ctx=Load())), keyword(arg='abs', value=Attribute(value=Name(id='self', ctx=Load()), attr='abs', ctx=Load())), keyword(arg='nan_ok', value=Attribute(value=Name(id='self', ctx=Load()), attr='nan_ok', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Name(id='ApproxScalar', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[keyword(arg='rel', value=Attribute(value=Name(id='self', ctx=Load()), attr='rel', ctx=Load())), keyword(arg='abs', value=Attribute(value=Name(id='self', ctx=Load()), attr='abs', ctx=Load())), keyword(arg='nan_ok', value=Attribute(value=Name(id='self', ctx=Load()), attr='nan_ok', ctx=Load()))]))], decorator_list=[], returns=Constant(value='ApproxScalar')), FunctionDef(name='_yield_comparisons', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Yield all the pairs of numbers to be compared.\n\n        This is used to implement the `__eq__` method.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[]), FunctionDef(name='_check_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise a TypeError if the expected value is not a valid type.'))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_recursive_sequence_map', args=arguments(posonlyargs=[], args=[arg(arg='f'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Recursively map a function over a sequence of arbitrary depth')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='seq_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='seq_type', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='_recursive_sequence_map', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='xi', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='xi', ctx=Store()), iter=Name(id='x', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='f', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))])], decorator_list=[]), ClassDef(name='ApproxNumpy', bases=[Name(id='ApproxBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Perform approximate comparisons where the expected value is numpy array.')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='list_scalars', ctx=Store())], value=Call(func=Name(id='_recursive_sequence_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=JoinedStr(values=[Constant(value='approx('), FormattedValue(value=Name(id='list_scalars', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_repr_compare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_side', annotation=Constant(value='ndarray'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='itertools')]), Import(names=[alias(name='math')]), FunctionDef(name='get_value_from_nested_list', args=arguments(posonlyargs=[], args=[arg(arg='nested_list', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='nd_index', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n            Helper function to get the value out of a nested list, given an n-dimensional index.\n            This mimics numpy's indexing, but for raw nested python lists.\n            ")), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Name(id='nested_list', ctx=Load()), simple=1), For(target=Name(id='i', ctx=Store()), iter=Name(id='nd_index', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='np_array_shape', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='shape', ctx=Load())), Assign(targets=[Name(id='approx_side_as_seq', ctx=Store())], value=Call(func=Name(id='_recursive_sequence_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='tolist', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='np_array_shape', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other_side', ctx=Load()), attr='shape', ctx=Load())]), body=[Return(value=List(elts=[Constant(value='Impossible to compare arrays with different shapes.'), JoinedStr(values=[Constant(value='Shapes: '), FormattedValue(value=Name(id='np_array_shape', ctx=Load()), conversion=-1), Constant(value=' and '), FormattedValue(value=Attribute(value=Name(id='other_side', ctx=Load()), attr='shape', ctx=Load()), conversion=-1)])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='number_of_elements', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='size', ctx=Load())), Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='different_ids', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='index', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[Starred(value=GeneratorExp(elt=Call(func=Name(id='range', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='np_array_shape', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='approx_value', ctx=Store())], value=Call(func=Name(id='get_value_from_nested_list', ctx=Load()), args=[Name(id='approx_side_as_seq', ctx=Load()), Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='other_value', ctx=Store())], value=Call(func=Name(id='get_value_from_nested_list', ctx=Load()), args=[Name(id='other_side', ctx=Load()), Name(id='index', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='approx_value', ctx=Load()), ops=[NotEq()], comparators=[Name(id='other_value', ctx=Load())]), body=[Assign(targets=[Name(id='abs_diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), op=Sub(), right=Name(id='other_value', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_abs_diff', ctx=Load()), Name(id='abs_diff', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='other_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0.0)]), body=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))], orelse=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_rel_diff', ctx=Load()), BinOp(left=Name(id='abs_diff', ctx=Load()), op=Div(), right=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='other_value', ctx=Load())], keywords=[]))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='different_ids', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='message_data', ctx=Store())], value=ListComp(elt=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='get_value_from_nested_list', ctx=Load()), args=[Name(id='other_side', ctx=Load()), Name(id='index', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='get_value_from_nested_list', ctx=Load()), args=[Name(id='approx_side_as_seq', ctx=Load()), Name(id='index', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='index', ctx=Store()), iter=Name(id='different_ids', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_compare_approx', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Name(id='message_data', ctx=Load()), Name(id='number_of_elements', ctx=Load()), Name(id='different_ids', ctx=Load()), Name(id='max_abs_diff', ctx=Load()), Name(id='max_rel_diff', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='numpy', asname='np')]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isscalar', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='actual', ctx=Store())], value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value="cannot compare '"), FormattedValue(value=Name(id='actual', ctx=Load()), conversion=-1), Constant(value="' to numpy.ndarray")])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isscalar', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='actual', ctx=Load()), attr='shape', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='shape', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__eq__', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_yield_comparisons', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='numpy', asname='np')]), If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isscalar', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndindex', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='actual', ctx=Load()), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])], ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='ndindex', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='shape', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='actual', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='item', ctx=Load()), args=[], keywords=[])], ctx=Load())))], orelse=[])])], decorator_list=[])], decorator_list=[]), ClassDef(name='ApproxMapping', bases=[Name(id='ApproxBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Perform approximate comparisons where the expected value is a mapping\n    with numeric values (the keys can be anything).')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='approx({!r})'), attr='format', ctx=Load()), args=[DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_repr_compare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_side', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='object', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='math')]), Assign(targets=[Name(id='approx_side_as_map', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='number_of_elements', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='approx_side_as_map', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='different_ids', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Tuple(elts=[Name(id='approx_key', ctx=Store()), Name(id='approx_value', ctx=Store())], ctx=Store()), Name(id='other_value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='approx_side_as_map', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='other_side', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='approx_value', ctx=Load()), ops=[NotEq()], comparators=[Name(id='other_value', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='other_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_abs_diff', ctx=Load()), Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), op=Sub(), right=Name(id='other_value', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0.0)]), body=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))], orelse=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_rel_diff', ctx=Load()), Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), op=Sub(), right=Name(id='other_value', ctx=Load())), op=Div(), right=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()))], keywords=[])], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='different_ids', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='approx_key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='message_data', ctx=Store())], value=ListComp(elt=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='other_side', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='approx_side_as_map', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='different_ids', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_compare_approx', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Name(id='message_data', ctx=Load()), Name(id='number_of_elements', ctx=Load()), Name(id='different_ids', ctx=Load()), Name(id='max_abs_diff', ctx=Load()), Name(id='max_rel_diff', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='actual', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__eq__', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_yield_comparisons', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Subscript(value=Name(id='actual', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='_check_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='pytest.approx() does not support nested dictionaries: key={!r} value={!r}\n  full mapping={}')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load()), Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ApproxSequenceLike', bases=[Name(id='ApproxBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Perform approximate comparisons where the expected value is a sequence of numbers.')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='seq_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='seq_type', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='seq_type', ctx=Store())], value=Name(id='list', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='approx({!r})'), attr='format', ctx=Load()), args=[Call(func=Name(id='seq_type', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_repr_compare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_side', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='math')]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='other_side', ctx=Load())], keywords=[])]), body=[Return(value=List(elts=[Constant(value='Impossible to compare lists with different sizes.'), JoinedStr(values=[Constant(value='Lengths: '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' and '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='other_side', ctx=Load())], keywords=[]), conversion=-1)])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='approx_side_as_map', ctx=Store())], value=Call(func=Name(id='_recursive_sequence_map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_approx_scalar', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])), Assign(targets=[Name(id='number_of_elements', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='approx_side_as_map', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))), Assign(targets=[Name(id='different_ids', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='approx_value', ctx=Store()), Name(id='other_value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='approx_side_as_map', ctx=Load()), Name(id='other_side', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='approx_value', ctx=Load()), ops=[NotEq()], comparators=[Name(id='other_value', ctx=Load())]), body=[Assign(targets=[Name(id='abs_diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='approx_value', ctx=Load()), attr='expected', ctx=Load()), op=Sub(), right=Name(id='other_value', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='max_abs_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_abs_diff', ctx=Load()), Name(id='abs_diff', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='other_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0.0)]), body=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Attribute(value=Name(id='math', ctx=Load()), attr='inf', ctx=Load()))], orelse=[Assign(targets=[Name(id='max_rel_diff', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_rel_diff', ctx=Load()), BinOp(left=Name(id='abs_diff', ctx=Load()), op=Div(), right=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='other_value', ctx=Load())], keywords=[]))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='different_ids', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='message_data', ctx=Store())], value=ListComp(elt=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='other_side', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='approx_side_as_map', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='different_ids', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='_compare_approx', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Name(id='message_data', ctx=Load()), Name(id='number_of_elements', ctx=Load()), Name(id='different_ids', ctx=Load()), Name(id='max_abs_diff', ctx=Load()), Name(id='max_rel_diff', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__eq__', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_yield_comparisons', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='actual', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_check_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='pytest.approx() does not support nested data structures: {!r} at index {}\n  full sequence: {}')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='index', ctx=Load()), Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ApproxScalar', bases=[Name(id='ApproxBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Perform approximate comparisons where the expected value is a single number.')), AnnAssign(target=Name(id='DEFAULT_ABSOLUTE_TOLERANCE', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=1e-12), simple=1), AnnAssign(target=Name(id='DEFAULT_RELATIVE_TOLERANCE', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=1e-06), simple=1), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a string communicating both the expected value and the\n        tolerance for the comparison being made.\n\n        For example, ``1.0 ± 1e-6``, ``(3+4j) ± 5e-6 ∠ ±180°``.\n        ')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Tuple(elts=[Name(id='Complex', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load())], keywords=[])), Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isinf', ctx=Load()), args=[Call(func=Name(id='abs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[])]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='vetted_tolerance', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='tolerance', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.1e')]))])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Name(id='Complex', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), attr='imag', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isinf', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tolerance', ctx=Load())], keywords=[]))]), body=[AugAssign(target=Name(id='vetted_tolerance', ctx=Store()), op=Add(), value=Constant(value=' ∠ ±180°'))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='vetted_tolerance', ctx=Store())], value=Constant(value='???'))])], orelse=[], finalbody=[]), Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), conversion=-1), Constant(value=' ± '), FormattedValue(value=Name(id='vetted_tolerance', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='actual')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether the given value is equal to the expected value\n        within the pre-specified tolerance.')), Assign(targets=[Name(id='asarray', ctx=Store())], value=Call(func=Name(id='_as_numpy_array', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='asarray', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Attribute(value=Name(id='asarray', ctx=Load()), attr='flat', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='actual', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), Tuple(elts=[Name(id='Complex', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='actual', ctx=Load()), Tuple(elts=[Name(id='Complex', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load())], keywords=[])])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isnan', ctx=Load()), args=[Call(func=Name(id='abs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='nan_ok', ctx=Load()), Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isnan', ctx=Load()), args=[Call(func=Name(id='abs', ctx=Load()), args=[Name(id='actual', ctx=Load())], keywords=[])], keywords=[])]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isinf', ctx=Load()), args=[Call(func=Name(id='abs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load()), op=Sub(), right=Name(id='actual', ctx=Load()))], keywords=[]), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='tolerance', ctx=Load())]), simple=1), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Constant(value=None)), FunctionDef(name='tolerance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the tolerance for the comparison.\n\n        This could be either an absolute tolerance or a relative tolerance,\n        depending on what the user specified or which would be larger.\n        ')), FunctionDef(name='set_default', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='x', ctx=Load()), orelse=Name(id='default', ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='absolute_tolerance', ctx=Store())], value=Call(func=Name(id='set_default', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='abs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_ABSOLUTE_TOLERANCE', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='absolute_tolerance', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="absolute tolerance can't be negative: "), FormattedValue(value=Name(id='absolute_tolerance', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='absolute_tolerance', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="absolute tolerance can't be NaN.")], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='rel', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='abs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='absolute_tolerance', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='relative_tolerance', ctx=Store())], value=BinOp(left=Call(func=Name(id='set_default', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rel', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_RELATIVE_TOLERANCE', ctx=Load())], keywords=[]), op=Mult(), right=Call(func=Name(id='abs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], keywords=[]))), If(test=Compare(left=Name(id='relative_tolerance', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="relative tolerance can't be negative: "), FormattedValue(value=Name(id='relative_tolerance', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='isnan', ctx=Load()), args=[Name(id='relative_tolerance', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="relative tolerance can't be NaN.")], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='relative_tolerance', ctx=Load()), Name(id='absolute_tolerance', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='ApproxDecimal', bases=[Name(id='ApproxScalar', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Perform approximate comparisons where the expected value is a Decimal.')), Assign(targets=[Name(id='DEFAULT_ABSOLUTE_TOLERANCE', ctx=Store())], value=Call(func=Name(id='Decimal', ctx=Load()), args=[Constant(value='1e-12')], keywords=[])), Assign(targets=[Name(id='DEFAULT_RELATIVE_TOLERANCE', ctx=Store())], value=Call(func=Name(id='Decimal', ctx=Load()), args=[Constant(value='1e-6')], keywords=[]))], decorator_list=[]), FunctionDef(name='approx', args=arguments(posonlyargs=[], args=[arg(arg='expected'), arg(arg='rel'), arg(arg='abs'), arg(arg='nan_ok', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Assert that two numbers (or two ordered sequences of numbers) are equal to each other\n    within some tolerance.\n\n    Due to the :doc:`python:tutorial/floatingpoint`, numbers that we\n    would intuitively expect to be equal are not always so::\n\n        >>> 0.1 + 0.2 == 0.3\n        False\n\n    This problem is commonly encountered when writing tests, e.g. when making\n    sure that floating-point values are what you expect them to be.  One way to\n    deal with this problem is to assert that two floating-point numbers are\n    equal to within some appropriate tolerance::\n\n        >>> abs((0.1 + 0.2) - 0.3) < 1e-6\n        True\n\n    However, comparisons like this are tedious to write and difficult to\n    understand.  Furthermore, absolute comparisons like the one above are\n    usually discouraged because there\'s no tolerance that works well for all\n    situations.  ``1e-6`` is good for numbers around ``1``, but too small for\n    very big numbers and too big for very small ones.  It\'s better to express\n    the tolerance as a fraction of the expected value, but relative comparisons\n    like that are even more difficult to write correctly and concisely.\n\n    The ``approx`` class performs floating-point comparisons using a syntax\n    that\'s as intuitive as possible::\n\n        >>> from pytest import approx\n        >>> 0.1 + 0.2 == approx(0.3)\n        True\n\n    The same syntax also works for ordered sequences of numbers::\n\n        >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))\n        True\n\n    ``numpy`` arrays::\n\n        >>> import numpy as np                                                          # doctest: +SKIP\n        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.4]) == approx(np.array([0.3, 0.6])) # doctest: +SKIP\n        True\n\n    And for a ``numpy`` array against a scalar::\n\n        >>> import numpy as np                                         # doctest: +SKIP\n        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP\n        True\n\n    Only ordered sequences are supported, because ``approx`` needs\n    to infer the relative position of the sequences without ambiguity. This means\n    ``sets`` and other unordered sequences are not supported.\n\n    Finally, dictionary *values* can also be compared::\n\n        >>> {\'a\': 0.1 + 0.2, \'b\': 0.2 + 0.4} == approx({\'a\': 0.3, \'b\': 0.6})\n        True\n\n    The comparison will be true if both mappings have the same keys and their\n    respective values match the expected tolerances.\n\n    **Tolerances**\n\n    By default, ``approx`` considers numbers within a relative tolerance of\n    ``1e-6`` (i.e. one part in a million) of its expected value to be equal.\n    This treatment would lead to surprising results if the expected value was\n    ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``.\n    To handle this case less surprisingly, ``approx`` also considers numbers\n    within an absolute tolerance of ``1e-12`` of its expected value to be\n    equal.  Infinity and NaN are special cases.  Infinity is only considered\n    equal to itself, regardless of the relative tolerance.  NaN is not\n    considered equal to anything by default, but you can make it be equal to\n    itself by setting the ``nan_ok`` argument to True.  (This is meant to\n    facilitate comparing arrays that use NaN to mean "no data".)\n\n    Both the relative and absolute tolerances can be changed by passing\n    arguments to the ``approx`` constructor::\n\n        >>> 1.0001 == approx(1)\n        False\n        >>> 1.0001 == approx(1, rel=1e-3)\n        True\n        >>> 1.0001 == approx(1, abs=1e-3)\n        True\n\n    If you specify ``abs`` but not ``rel``, the comparison will not consider\n    the relative tolerance at all.  In other words, two numbers that are within\n    the default relative tolerance of ``1e-6`` will still be considered unequal\n    if they exceed the specified absolute tolerance.  If you specify both\n    ``abs`` and ``rel``, the numbers will be considered equal if either\n    tolerance is met::\n\n        >>> 1 + 1e-8 == approx(1)\n        True\n        >>> 1 + 1e-8 == approx(1, abs=1e-12)\n        False\n        >>> 1 + 1e-8 == approx(1, rel=1e-6, abs=1e-12)\n        True\n\n    You can also use ``approx`` to compare nonnumeric types, or dicts and\n    sequences containing nonnumeric types, in which case it falls back to\n    strict equality. This can be useful for comparing dicts and sequences that\n    can contain optional values::\n\n        >>> {"required": 1.0000005, "optional": None} == approx({"required": 1, "optional": None})\n        True\n        >>> [None, 1.0000005] == approx([None,1])\n        True\n        >>> ["foo", 1.0000005] == approx([None,1])\n        False\n\n    If you\'re thinking about using ``approx``, then you might want to know how\n    it compares to other good ways of comparing floating-point numbers.  All of\n    these algorithms are based on relative and absolute tolerances and should\n    agree for the most part, but they do have meaningful differences:\n\n    - ``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative\n      tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute\n      tolerance is met.  Because the relative tolerance is calculated w.r.t.\n      both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor\n      ``b`` is a "reference value").  You have to specify an absolute tolerance\n      if you want to compare to ``0.0`` because there is no tolerance by\n      default.  More information: :py:func:`math.isclose`.\n\n    - ``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference\n      between ``a`` and ``b`` is less that the sum of the relative tolerance\n      w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance\n      is only calculated w.r.t. ``b``, this test is asymmetric and you can\n      think of ``b`` as the reference value.  Support for comparing sequences\n      is provided by :py:func:`numpy.allclose`.  More information:\n      :std:doc:`numpy:reference/generated/numpy.isclose`.\n\n    - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``\n      are within an absolute tolerance of ``1e-7``.  No relative tolerance is\n      considered , so this function is not appropriate for very large or very\n      small numbers.  Also, it\'s only available in subclasses of ``unittest.TestCase``\n      and it\'s ugly because it doesn\'t follow PEP8.  More information:\n      :py:meth:`unittest.TestCase.assertAlmostEqual`.\n\n    - ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative\n      tolerance is met w.r.t. ``b`` or if the absolute tolerance is met.\n      Because the relative tolerance is only calculated w.r.t. ``b``, this test\n      is asymmetric and you can think of ``b`` as the reference value.  In the\n      special case that you explicitly specify an absolute tolerance but not a\n      relative tolerance, only the absolute tolerance is considered.\n\n    .. note::\n\n        ``approx`` can handle numpy arrays, but we recommend the\n        specialised test helpers in :std:doc:`numpy:reference/routines.testing`\n        if you need support for comparisons, NaNs, or ULP-based tolerances.\n\n        To match strings using regex, you can use\n        `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_\n        from the\n        `re_assert package <https://github.com/asottile/re-assert>`_.\n\n    .. warning::\n\n       .. versionchanged:: 3.2\n\n       In order to avoid inconsistent behavior, :py:exc:`TypeError` is\n       raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons.\n       The example below illustrates the problem::\n\n           assert approx(0.1) > 0.1 + 1e-10  # calls approx(0.1).__gt__(0.1 + 1e-10)\n           assert 0.1 + 1e-10 > approx(0.1)  # calls approx(0.1).__lt__(0.1 + 1e-10)\n\n       In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)``\n       to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to\n       comparison. This is because the call hierarchy of rich comparisons\n       follows a fixed behavior. More information: :py:meth:`object.__ge__`\n\n    .. versionchanged:: 3.7.1\n       ``approx`` raises ``TypeError`` when it encounters a dict value or\n       sequence element of nonnumeric type.\n\n    .. versionchanged:: 6.1.0\n       ``approx`` falls back to strict equality for nonnumeric types instead\n       of raising ``TypeError``.\n    ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='Decimal', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='cls', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='ApproxBase', ctx=Load()), ctx=Load()), value=Name(id='ApproxDecimal', ctx=Load()), simple=1)], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Name(id='ApproxMapping', ctx=Load()))], orelse=[If(test=Call(func=Name(id='_is_numpy_array', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Name(id='_as_numpy_array', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Name(id='ApproxNumpy', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='expected', ctx=Load()), Constant(value='__getitem__')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='Sized', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='STRING_TYPES', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Name(id='ApproxSequenceLike', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='Collection', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='STRING_TYPES', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='pytest.approx() only supports ordered sequences, but got: '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[]), conversion=-1)])), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='cls', ctx=Store())], value=Name(id='ApproxScalar', ctx=Load()))])])])])]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='rel', ctx=Load()), Name(id='abs', ctx=Load()), Name(id='nan_ok', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ApproxBase', ctx=Load())), FunctionDef(name='_is_numpy_array', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return true if the given object is implicitly convertible to ndarray,\n    and numpy is already imported.\n    ')), Return(value=Compare(left=Call(func=Name(id='_as_numpy_array', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_as_numpy_array', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return an ndarray if the given object is implicitly convertible to ndarray,\n    and numpy is already imported, otherwise None.\n    ')), Import(names=[alias(name='sys')]), AnnAssign(target=Name(id='np', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='numpy')], keywords=[]), simple=1), If(test=Compare(left=Name(id='np', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='isscalar', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=None))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='np', ctx=Load()), attr='ndarray', ctx=Load())], keywords=[]), body=[Return(value=Name(id='obj', ctx=Load()))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__array__')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Constant(value='obj'), Constant(value='__array_interface__')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='asarray', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='ndarray'), ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='E')], keywords=[keyword(arg='bound', value=Name(id='BaseException', ctx=Load()))])), FunctionDef(name='raises', args=arguments(posonlyargs=[], args=[arg(arg='expected_exception', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='match', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=Ellipsis)], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value='RaisesContext[E]')), FunctionDef(name='raises', args=arguments(posonlyargs=[], args=[arg(arg='expected_exception', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load())), FunctionDef(name='raises', args=arguments(posonlyargs=[], args=[arg(arg='expected_exception', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Assert that a code block/function call raises an exception.\n\n    :param typing.Type[E] | typing.Tuple[typing.Type[E], ...] expected_exception:\n        The expected exception type, or a tuple if one of multiple possible\n        exception types are expected.\n    :kwparam str | typing.Pattern[str] | None match:\n        If specified, a string containing a regular expression,\n        or a regular expression object, that is tested against the string\n        representation of the exception using :func:`re.search`.\n\n        To match a literal string that may contain :ref:`special characters\n        <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.\n\n        (This is only used when :py:func:`pytest.raises` is used as a context manager,\n        and passed through to the function otherwise.\n        When using :py:func:`pytest.raises` as a function, you can use:\n        ``pytest.raises(Exc, func, match="passed on").match("my pattern")``.)\n\n    .. currentmodule:: _pytest._code\n\n    Use ``pytest.raises`` as a context manager, which will capture the exception of the given\n    type::\n\n        >>> import pytest\n        >>> with pytest.raises(ZeroDivisionError):\n        ...    1/0\n\n    If the code block does not raise the expected exception (``ZeroDivisionError`` in the example\n    above), or no exception at all, the check will fail instead.\n\n    You can also use the keyword argument ``match`` to assert that the\n    exception matches a text or regex::\n\n        >>> with pytest.raises(ValueError, match=\'must be 0 or None\'):\n        ...     raise ValueError("value must be 0 or None")\n\n        >>> with pytest.raises(ValueError, match=r\'must be \\d+$\'):\n        ...     raise ValueError("value must be 42")\n\n    The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the\n    details of the captured exception::\n\n        >>> with pytest.raises(ValueError) as exc_info:\n        ...     raise ValueError("value must be 42")\n        >>> assert exc_info.type is ValueError\n        >>> assert exc_info.value.args[0] == "value must be 42"\n\n    .. note::\n\n       When using ``pytest.raises`` as a context manager, it\'s worthwhile to\n       note that normal context manager rules apply and that the exception\n       raised *must* be the final line in the scope of the context manager.\n       Lines of code after that, within the scope of the context manager will\n       not be executed. For example::\n\n           >>> value = 15\n           >>> with pytest.raises(ValueError) as exc_info:\n           ...     if value > 10:\n           ...         raise ValueError("value must be <= 10")\n           ...     assert exc_info.type is ValueError  # this will not execute\n\n       Instead, the following approach must be taken (note the difference in\n       scope)::\n\n           >>> with pytest.raises(ValueError) as exc_info:\n           ...     if value > 10:\n           ...         raise ValueError("value must be <= 10")\n           ...\n           >>> assert exc_info.type is ValueError\n\n    **Using with** ``pytest.mark.parametrize``\n\n    When using :ref:`pytest.mark.parametrize ref`\n    it is possible to parametrize tests such that\n    some runs raise an exception and others do not.\n\n    See :ref:`parametrizing_conditional_raising` for an example.\n\n    **Legacy form**\n\n    It is possible to specify a callable by passing a to-be-called lambda::\n\n        >>> raises(ZeroDivisionError, lambda: 1/0)\n        <ExceptionInfo ...>\n\n    or you can specify an arbitrary callable with arguments::\n\n        >>> def f(x): return 1/x\n        ...\n        >>> raises(ZeroDivisionError, f, 0)\n        <ExceptionInfo ...>\n        >>> raises(ZeroDivisionError, f, x=0)\n        <ExceptionInfo ...>\n\n    The form above is fully supported but discouraged for new code because the\n    context manager form is regarded as more readable and less error-prone.\n\n    .. note::\n        Similar to caught exception objects in Python, explicitly clearing\n        local references to returned ``ExceptionInfo`` objects can\n        help the Python interpreter speed up its garbage collection.\n\n        Clearing those references breaks a reference cycle\n        (``ExceptionInfo`` --> caught exception --> frame stack raising\n        the exception --> current frame stack --> local variables -->\n        ``ExceptionInfo``) which makes Python keep all objects referenced\n        from that cycle (including all local variables in the current\n        frame) alive until the next cyclic garbage collection run.\n        More detailed information can be found in the official Python\n        documentation for :ref:`the try statement <python:try>`.\n    ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Name(id='expected_exception', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected an exception type or a tuple of exception types, but got `'), FormattedValue(value=Name(id='expected_exception', ctx=Load()), conversion=114), Constant(value="`. Raising exceptions is already understood as failing the test, so you don't need any special code to say 'this should never raise an exception'.")])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected_exception', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='expected_exceptions', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Name(id='expected_exception', ctx=Load())], ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='expected_exceptions', ctx=Store())], value=Name(id='expected_exception', ctx=Load()))]), For(target=Name(id='exc', ctx=Store()), iter=Name(id='expected_exceptions', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='BaseException', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='expected exception must be a BaseException type, not {}')), Assign(targets=[Name(id='not_a', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='exc', ctx=Load()), attr='__name__', ctx=Load()), orelse=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='not_a', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='DID NOT RAISE '), FormattedValue(value=Name(id='expected_exception', ctx=Load()), conversion=-1)])), If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[AnnAssign(target=Name(id='match', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='match'), Constant(value=None)], keywords=[]), simple=1), If(test=Name(id='kwargs', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Unexpected keyword arguments passed to pytest.raises: ')), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='\nUse context-manager form instead?')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='RaisesContext', ctx=Load()), args=[Name(id='expected_exception', ctx=Load()), Name(id='message', ctx=Load()), Name(id='match', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='func', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='func', ctx=Load()), conversion=114), Constant(value=' object (type: '), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]), conversion=-1), Constant(value=') must be callable')])], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='expected_exception', ctx=Load()), name='e', body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='from_exception', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])]), Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='RaisesContext[E]'), Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='raises', ctx=Load()), attr='Exception', ctx=Store())], value=Attribute(value=Name(id='fail', ctx=Load()), attr='Exception', ctx=Load())), ClassDef(name='RaisesContext', bases=[Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expected_exception', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='match_expr', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expected_exception', ctx=Store())], value=Name(id='expected_exception', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match_expr', ctx=Store())], value=Name(id='match_expr', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='for_later', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Name(id='exc_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]))], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='expected_exception', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='exc_info', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='E', ctx=Load()), ctx=Load()), Name(id='E', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load()), Tuple(elts=[Name(id='exc_type', ctx=Load()), Name(id='exc_val', ctx=Load()), Name(id='exc_tb', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), attr='fill_unfilled', ctx=Load()), args=[Name(id='exc_info', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='match_expr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='match_expr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())])], type_ignores=[])