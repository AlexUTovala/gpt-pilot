Module(body=[Expr(value=Constant(value='Provides a function to report all internal modules for using freezing\ntools.')), Import(names=[alias(name='types')]), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), FunctionDef(name='freeze_includes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of module names used by pytest that should be\n    included by cx_freeze.')), Import(names=[alias(name='_pytest')]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='_iter_all_modules', ctx=Load()), args=[Name(id='_pytest', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_iter_all_modules', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value="Iterate over the names of all modules that can be found in the given\n    package, recursively.\n\n        >>> import _pytest\n        >>> list(_iter_all_modules(_pytest))\n        ['_pytest._argcomplete', '_pytest._code.code', ...]\n    ")), Import(names=[alias(name='os')]), Import(names=[alias(name='pkgutil')]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='package', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Name(id='package', ctx=Load()))], orelse=[Assign(targets=[Name(id='package_path', ctx=Store())], value=Attribute(value=Name(id='package', ctx=Load()), attr='__path__', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='prefix', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='package_path', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Attribute(value=Name(id='package', ctx=Load()), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='.'))], ctx=Load()))]), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='name', ctx=Store()), Name(id='is_package', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='pkgutil', ctx=Load()), attr='iter_modules', ctx=Load()), args=[List(elts=[Name(id='path', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Name(id='is_package', ctx=Load()), body=[For(target=Name(id='m', ctx=Store()), iter=Call(func=Name(id='_iter_all_modules', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[keyword(arg='prefix', value=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.')))]), body=[Expr(value=Yield(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='m', ctx=Load()))))], orelse=[])], orelse=[Expr(value=Yield(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='name', ctx=Load()))))])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])