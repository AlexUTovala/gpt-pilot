Module(body=[Expr(value=Constant(value='Access and control log capturing.')), Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='contextlib', names=[alias(name='nullcontext')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='datetime', names=[alias(name='timedelta')], level=0), ImportFrom(module='datetime', names=[alias(name='timezone')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='logging', names=[alias(name='LogRecord')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='AbstractSet')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.capture', names=[alias(name='CaptureManager')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='_strtobool')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='create_terminal_writer')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='UsageError')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Assign(targets=[Name(id='logging_StreamHandler', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()), slice=Name(id='StringIO', ctx=Load()), ctx=Load())), ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0)], orelse=[Assign(targets=[Name(id='logging_StreamHandler', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()))]), Assign(targets=[Name(id='DEFAULT_LOG_FORMAT', ctx=Store())], value=Constant(value='%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s')), Assign(targets=[Name(id='DEFAULT_LOG_DATE_FORMAT', ctx=Store())], value=Constant(value='%H:%M:%S')), Assign(targets=[Name(id='_ANSI_ESCAPE_SEQ', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\x1b\\[[\\d;]+m')], keywords=[])), Assign(targets=[Name(id='caplog_handler_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Constant(value='LogCaptureHandler'), ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='caplog_records_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), args=[], keywords=[])), FunctionDef(name='_remove_ansi_escape_sequences', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='_ANSI_ESCAPE_SEQ', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=''), Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='DatetimeFormatter', bases=[Attribute(value=Name(id='logging', ctx=Load()), attr='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging formatter which formats record with\n    :func:`datetime.datetime.strftime` formatter instead of\n    :func:`time.strftime` in case of microseconds in format string.\n    ')), FunctionDef(name='formatTime', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Name(id='LogRecord', ctx=Load())), arg(arg='datefmt')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Name(id='datefmt', ctx=Load()), Compare(left=Constant(value='%f'), ops=[In()], comparators=[Name(id='datefmt', ctx=Load())])]), body=[Assign(targets=[Name(id='ct', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='converter', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='created', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tz', ctx=Store())], value=Call(func=Name(id='timezone', ctx=Load()), args=[Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=Attribute(value=Name(id='ct', ctx=Load()), attr='tm_gmtoff', ctx=Load()))]), Attribute(value=Name(id='ct', ctx=Load()), attr='tm_zone', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dt', ctx=Store())], value=Call(func=Name(id='datetime', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='ct', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=6)), ctx=Load()), ctx=Load())], keywords=[keyword(arg='microsecond', value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='record', ctx=Load()), attr='msecs', ctx=Load()), op=Mult(), right=Constant(value=1000))], keywords=[])), keyword(arg='tzinfo', value=Name(id='tz', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='datefmt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='formatTime', ctx=Load()), args=[Name(id='record', ctx=Load()), Name(id='datefmt', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ColoredLevelFormatter', bases=[Name(id='DatetimeFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging formatter which colorizes the %(levelname)..s part of the\n    log format passed to __init__.')), AnnAssign(target=Name(id='LOGLEVEL_COLOROPTS', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='AbstractSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='logging', ctx=Load()), attr='CRITICAL', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='ERROR', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='WARN', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='NOTSET', ctx=Load())], values=[Set(elts=[Constant(value='red')]), Set(elts=[Constant(value='red'), Constant(value='bold')]), Set(elts=[Constant(value='yellow')]), Set(elts=[Constant(value='yellow')]), Set(elts=[Constant(value='green')]), Set(elts=[Constant(value='purple')]), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])]), simple=1), Assign(targets=[Name(id='LEVELNAME_FMT_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='%\\(levelname\\)([+-.]?\\d*(?:\\.\\d+)?s)')], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='terminalwriter', annotation=Name(id='TerminalWriter', ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_terminalwriter', ctx=Store())], value=Name(id='terminalwriter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_fmt', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style', ctx=Load()), attr='_fmt', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_level_to_fmt_mapping', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), For(target=Tuple(elts=[Name(id='level', ctx=Store()), Name(id='color_opts', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOGLEVEL_COLOROPTS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_color_level', ctx=Load()), args=[Name(id='level', ctx=Load()), Starred(value=Name(id='color_opts', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_color_level', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Name(id='int', ctx=Load()))], vararg=arg(arg='color_opts', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Add or update color opts for a log level.\n\n        :param level:\n            Log level to apply a style to, e.g. ``logging.INFO``.\n        :param color_opts:\n            ANSI escape sequence color options. Capitalized colors indicates\n            background color, i.e. ``'green', 'Yellow', 'bold'`` will give bold\n            green text on yellow background.\n\n        .. warning::\n            This is an experimental API.\n        ")), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fmt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='levelname_fmt_match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LEVELNAME_FMT_REGEX', ctx=Load()), attr='search', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fmt', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='levelname_fmt_match', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='levelname_fmt', ctx=Store())], value=Call(func=Attribute(value=Name(id='levelname_fmt_match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='formatted_levelname', ctx=Store())], value=BinOp(left=Name(id='levelname_fmt', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='levelname')], values=[Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLevelName', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])]))), Assign(targets=[Name(id='color_kwargs', ctx=Store())], value=DictComp(key=Name(id='name', ctx=Load()), value=Constant(value=True), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='color_opts', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='colorized_formatted_levelname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_terminalwriter', ctx=Load()), attr='markup', ctx=Load()), args=[Name(id='formatted_levelname', ctx=Load())], keywords=[keyword(value=Name(id='color_kwargs', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_level_to_fmt_mapping', ctx=Load()), slice=Name(id='level', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LEVELNAME_FMT_REGEX', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='colorized_formatted_levelname', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_fmt', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_level_to_fmt_mapping', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_original_fmt', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style', ctx=Load()), attr='_fmt', ctx=Store())], value=Name(id='fmt', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='format', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='PercentStyleMultiline', bases=[Attribute(value=Name(id='logging', ctx=Load()), attr='PercentStyle', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging style with special support for multiline messages.\n\n    If the message of a record consists of multiple lines, this style\n    formats the message as if each line were logged separately.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fmt', annotation=Name(id='str', ctx=Load())), arg(arg='auto_indent', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='bool', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='fmt', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_auto_indent', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_auto_indent', ctx=Load()), args=[Name(id='auto_indent', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_auto_indent', args=arguments(posonlyargs=[], args=[arg(arg='auto_indent_option', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='bool', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine the current auto indentation setting.\n\n        Specify auto indent behavior (on/off/fixed) by passing in\n        extra={"auto_indent": [value]} to the call to logging.log() or\n        using a --log-auto-indent [value] command line or the\n        log_auto_indent [value] config option.\n\n        Default behavior is auto-indent off.\n\n        Using the string "True" or "on" or the boolean True as the value\n        turns auto indent on, using the string "False" or "off" or the\n        boolean False or the int 0 turns it off, and specifying a\n        positive integer fixes the indentation position to the value\n        specified.\n\n        Any other values for the option are invalid, and will silently be\n        converted to the default.\n\n        :param None|bool|int|str auto_indent_option:\n            User specified option for indentation from command line, config\n            or extra kwarg. Accepts int, bool or str. str option accepts the\n            same range of values as boolean config options, as well as\n            positive integers represented in str form.\n\n        :returns:\n            Indentation value, which can be\n            -1 (automatically determine indentation) or\n            0 (auto-indent turned off) or\n            >0 (explicitly set indentation position).\n        ')), If(test=Compare(left=Name(id='auto_indent_option', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[If(test=Name(id='auto_indent_option', ctx=Load()), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Return(value=Constant(value=0))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[If(test=Call(func=Name(id='_strtobool', ctx=Load()), args=[Name(id='auto_indent_option', ctx=Load())], keywords=[]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=0))])], orelse=[], finalbody=[])], orelse=[])])])]), Return(value=Constant(value=0))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Attribute(value=Name(id='record', ctx=Load()), attr='message', ctx=Load())]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='record', ctx=Load()), Constant(value='auto_indent')], keywords=[]), body=[Assign(targets=[Name(id='auto_indent', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_auto_indent', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='auto_indent', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='auto_indent', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_auto_indent', ctx=Load()))]), If(test=Name(id='auto_indent', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='record', ctx=Load()), attr='message', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='formatted', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fmt', ctx=Load()), op=Mod(), right=Dict(keys=[None, Constant(value='message')], values=[Attribute(value=Name(id='record', ctx=Load()), attr='__dict__', ctx=Load()), Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load())]))), If(test=Compare(left=Name(id='auto_indent', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='indentation', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_remove_ansi_escape_sequences', ctx=Load()), args=[Name(id='formatted', ctx=Load())], keywords=[]), attr='find', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='indentation', ctx=Store())], value=Name(id='auto_indent', ctx=Load()))]), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='formatted', ctx=Load())), Return(value=Call(func=Attribute(value=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='indentation', ctx=Load()))), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fmt', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='record', ctx=Load()), attr='__dict__', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_option_ini', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], vararg=arg(arg='names', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='ret', ctx=Load()), body=[Return(value=Name(id='ret', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add options to control log capturing.')), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='logging')], keywords=[])), FunctionDef(name='add_option_ini', args=arguments(posonlyargs=[], args=[arg(arg='option'), arg(arg='dest'), arg(arg='default'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='type', value=Name(id='type', ctx=Load())), keyword(arg='help', value=BinOp(left=Constant(value='Default value for '), op=Add(), right=Name(id='option', ctx=Load())))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[keyword(arg='dest', value=Name(id='dest', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-level')], keywords=[keyword(arg='dest', value=Constant(value='log_level')), keyword(arg='default', value=Constant(value=None)), keyword(arg='metavar', value=Constant(value='LEVEL')), keyword(arg='help', value=Constant(value='Level of messages to catch/display. Not set by default, so it depends on the root/parent log handler\'s effective level, where it is "WARNING" by default.'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-format')], keywords=[keyword(arg='dest', value=Constant(value='log_format')), keyword(arg='default', value=Name(id='DEFAULT_LOG_FORMAT', ctx=Load())), keyword(arg='help', value=Constant(value='Log format used by the logging module'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-date-format')], keywords=[keyword(arg='dest', value=Constant(value='log_date_format')), keyword(arg='default', value=Name(id='DEFAULT_LOG_DATE_FORMAT', ctx=Load())), keyword(arg='help', value=Constant(value='Log date format used by the logging module'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='log_cli')], keywords=[keyword(arg='default', value=Constant(value=False)), keyword(arg='type', value=Constant(value='bool')), keyword(arg='help', value=Constant(value='Enable log display during test run (also known as "live logging")'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-cli-level')], keywords=[keyword(arg='dest', value=Constant(value='log_cli_level')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='CLI logging level'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-cli-format')], keywords=[keyword(arg='dest', value=Constant(value='log_cli_format')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Log format used by the logging module'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-cli-date-format')], keywords=[keyword(arg='dest', value=Constant(value='log_cli_date_format')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Log date format used by the logging module'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-file')], keywords=[keyword(arg='dest', value=Constant(value='log_file')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Path to a file when logging will be written to'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-file-level')], keywords=[keyword(arg='dest', value=Constant(value='log_file_level')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Log file logging level'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-file-format')], keywords=[keyword(arg='dest', value=Constant(value='log_file_format')), keyword(arg='default', value=Name(id='DEFAULT_LOG_FORMAT', ctx=Load())), keyword(arg='help', value=Constant(value='Log format used by the logging module'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-file-date-format')], keywords=[keyword(arg='dest', value=Constant(value='log_file_date_format')), keyword(arg='default', value=Name(id='DEFAULT_LOG_DATE_FORMAT', ctx=Load())), keyword(arg='help', value=Constant(value='Log date format used by the logging module'))])), Expr(value=Call(func=Name(id='add_option_ini', ctx=Load()), args=[Constant(value='--log-auto-indent')], keywords=[keyword(arg='dest', value=Constant(value='log_auto_indent')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--log-disable')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='default', value=List(elts=[], ctx=Load())), keyword(arg='dest', value=Constant(value='logger_disable')), keyword(arg='help', value=Constant(value='Disable a logger by name. Can be passed multiple times.'))]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='_HandlerType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_HandlerType')], keywords=[keyword(arg='bound', value=Attribute(value=Name(id='logging', ctx=Load()), attr='Handler', ctx=Load()))])), ClassDef(name='catching_logs', bases=[], keywords=[], body=[Expr(value=Constant(value='Context manager that prepares the whole logging machinery properly.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='handler'), Constant(value='level'), Constant(value='orig_level')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Name(id='_HandlerType', ctx=Load())), arg(arg='level', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Store())], value=Name(id='handler', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Store())], value=Name(id='level', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='root_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='setLevel', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='root_logger', ctx=Load()), attr='addHandler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='orig_level', ctx=Store())], value=Attribute(value=Name(id='root_logger', ctx=Load()), attr='level', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='root_logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='orig_level', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type'), arg(arg='value'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='root_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='root_logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='orig_level', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='root_logger', ctx=Load()), attr='removeHandler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LogCaptureHandler', bases=[Name(id='logging_StreamHandler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging handler that stores log records and the log text.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a new log handler.')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Keep the log records in a list in addition to the log text.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='emit', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handleError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='logging', ctx=Load()), attr='raiseExceptions', ctx=Load()), body=[Raise()], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='LogCaptureFixture', bases=[], keywords=[], body=[Expr(value=Constant(value='Provides access and control of log capturing.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_item', ctx=Store())], value=Name(id='item', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_handler_level', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_logger_levels', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_finalize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Finalize the fixture.\n\n        This restores the log levels and the disabled logging levels changed by :meth:`set_level`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_handler_level', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='setLevel', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_handler_level', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='logger_name', ctx=Store()), Name(id='level', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_logger_levels', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='logger_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='disable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the logging handler used by the fixture.')), Return(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_handler_key', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='LogCaptureHandler', ctx=Load())), FunctionDef(name='get_records', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='when', annotation=Constant(value="Literal['setup', 'call', 'teardown']"))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the logging records for one of the possible test phases.\n\n        :param when:\n            Which test phase to obtain the records from.\n            Valid values are: "setup", "call" and "teardown".\n\n        :returns: The list of captured records at the given stage.\n\n        .. versionadded:: 3.4\n        ')), Return(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_records_key', ctx=Load()), ctx=Load()), attr='get', ctx=Load()), args=[Name(id='when', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()), ctx=Load())), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The formatted log text.')), Return(value=Call(func=Name(id='_remove_ansi_escape_sequences', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='stream', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='records', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The list of log records.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='records', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()), ctx=Load())), FunctionDef(name='record_tuples', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A list of a stripped down version of log records intended\n        for use in assertion comparison.\n\n        The format of the tuple is:\n\n            (logger_name, log_level, message)\n        ')), Return(value=ListComp(elt=Tuple(elts=[Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='r', ctx=Load()), attr='levelno', ctx=Load()), Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='getMessage', ctx=Load()), args=[], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='messages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A list of format-interpolated log messages.\n\n        Unlike 'records', which contains the format string and parameters for\n        interpolation, log messages in this list are all interpolated.\n\n        Unlike 'text', which contains the output from the handler, log\n        messages in this list are unadorned with levels, timestamps, etc,\n        making exact comparisons more reliable.\n\n        Note that traceback or stack info (from :func:`logging.exception` or\n        the `exc_info` or `stack_info` arguments to the logging functions) is\n        not included, as this is added by the formatter in the handler.\n\n        .. versionadded:: 3.7\n        ")), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='getMessage', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='records', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset the list of log records and the captured log text.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_force_enable_logging', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='logger_obj', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='Logger', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Enable the desired logging level if the global level was disabled via ``logging.disabled``.\n\n        Only enables logging levels greater than or equal to the requested ``level``.\n\n        Does nothing if the desired ``level`` wasn't disabled.\n\n        :param level:\n            The logger level caplog should capture.\n            All logging is enabled if a non-standard logging level string is supplied.\n            Valid level strings are in :data:`logging._nameToLevel`.\n        :param logger_obj: The logger object to check.\n\n        :return: The original disabled logging level.\n        ")), AnnAssign(target=Name(id='original_disable_level', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='manager', ctx=Load()), attr='disable', ctx=Load()), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='level', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='level', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLevelName', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='level', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='disable', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='NOTSET', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='disable_level', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Name(id='level', ctx=Load()), op=Sub(), right=Constant(value=10)), Attribute(value=Name(id='logging', ctx=Load()), attr='NOTSET', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='disable', ctx=Load()), args=[Name(id='disable_level', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='original_disable_level', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='set_level', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='logger', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Set the threshold level of a logger for the duration of a test.\n\n        Logging messages which are less severe than this level will not be captured.\n\n        .. versionchanged:: 3.4\n            The levels of the loggers changed by this function will be\n            restored to their initial values at the end of the test.\n\n        Will enable the requested logging level if it was disabled via :meth:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        ')), Assign(targets=[Name(id='logger_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='logger', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_logger_levels', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='logger', ctx=Load()), Attribute(value=Name(id='logger_obj', ctx=Load()), attr='level', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_handler_level', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_handler_level', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='level', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), Assign(targets=[Name(id='initial_disabled_logging_level', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_force_enable_logging', ctx=Load()), args=[Name(id='level', ctx=Load()), Name(id='logger_obj', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initial_disabled_logging_level', ctx=Store())], value=Name(id='initial_disabled_logging_level', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='at_level', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='logger', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :meth:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        ")), Assign(targets=[Name(id='logger_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='logger', ctx=Load())], keywords=[])), Assign(targets=[Name(id='orig_level', ctx=Store())], value=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='level', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), Assign(targets=[Name(id='handler_orig_level', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='level', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), Assign(targets=[Name(id='original_disable_level', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_force_enable_logging', ctx=Load()), args=[Name(id='level', ctx=Load()), Name(id='logger_obj', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='logger_obj', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='orig_level', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='handler_orig_level', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='disable', ctx=Load()), args=[Name(id='original_disable_level', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='caplog', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Access and control log capturing.\n\n    Captured logs are available through the following properties/methods::\n\n    * caplog.messages        -> list of format-interpolated log messages\n    * caplog.text            -> string containing formatted log output\n    * caplog.records         -> list of logging.LogRecord instances\n    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n    * caplog.clear()         -> clear captured records and formatted log output string\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='LogCaptureFixture', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Yield(value=Name(id='result', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='_finalize', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='LogCaptureFixture', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='get_log_level_for_setting', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], vararg=arg(arg='setting_names', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='setting_name', ctx=Store()), iter=Name(id='setting_names', ctx=Load()), body=[Assign(targets=[Name(id='log_level', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Name(id='setting_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='log_level', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='log_level', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Name(id='setting_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='log_level', ctx=Load()), body=[Break()], orelse=[])], orelse=[Return(value=Constant(value=None))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='log_level', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='log_level', ctx=Store())], value=Call(func=Attribute(value=Name(id='log_level', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='logging', ctx=Load()), Name(id='log_level', ctx=Load()), Name(id='log_level', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="'{}' is not recognized as a logging level name for '{}'. Please consider passing the logging level num instead."), attr='format', ctx=Load()), args=[Name(id='log_level', ctx=Load()), Name(id='setting_name', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='LoggingPlugin', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]), Constant(value='logging-plugin')], keywords=[]))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='trylast', value=Constant(value=True))])], returns=Constant(value=None)), ClassDef(name='LoggingPlugin', bases=[], keywords=[], body=[Expr(value=Constant(value='Attaches to the logging module and captures log messages for each test.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a new plugin to capture log messages.\n\n        The formatter can be safely shared across all handlers so\n        create a single one for the entire test session here.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_formatter', ctx=Load()), args=[Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_format')], keywords=[]), Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_date_format')], keywords=[]), Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_auto_indent')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_level', ctx=Store())], value=Call(func=Name(id='get_log_level_for_setting', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_level')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='caplog_handler', ctx=Store())], value=Call(func=Name(id='LogCaptureHandler', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='caplog_handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_handler', ctx=Store())], value=Call(func=Name(id='LogCaptureHandler', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='report_handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_level', ctx=Store())], value=Call(func=Name(id='get_log_level_for_setting', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_file_level')], keywords=[])), Assign(targets=[Name(id='log_file', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_file')], keywords=[]), Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load())])), If(test=Compare(left=Name(id='log_file', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load())]), body=[Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='log_file', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Store())], value=Call(func=Name(id='_FileHandler', ctx=Load()), args=[Name(id='log_file', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='w')), keyword(arg='encoding', value=Constant(value='UTF-8'))])), Assign(targets=[Name(id='log_file_format', ctx=Store())], value=Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_file_format'), Constant(value='log_format')], keywords=[])), Assign(targets=[Name(id='log_file_date_format', ctx=Store())], value=Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_file_date_format'), Constant(value='log_date_format')], keywords=[])), Assign(targets=[Name(id='log_file_formatter', ctx=Store())], value=Call(func=Name(id='DatetimeFormatter', ctx=Load()), args=[Name(id='log_file_format', ctx=Load())], keywords=[keyword(arg='datefmt', value=Name(id='log_file_date_format', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Name(id='log_file_formatter', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_level', ctx=Store())], value=Call(func=Name(id='get_log_level_for_setting', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_cli_level'), Constant(value='log_level')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_cli_enabled', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='terminal_reporter', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='terminalreporter')], keywords=[])), Assert(test=Compare(left=Name(id='terminal_reporter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='capture_manager', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='capturemanager')], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='_LiveLoggingStreamHandler', ctx=Load()), Name(id='_LiveLoggingNullHandler', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='_LiveLoggingStreamHandler', ctx=Load()), args=[Name(id='terminal_reporter', ctx=Load()), Name(id='capture_manager', ctx=Load())], keywords=[]), simple=0)], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Store())], value=Call(func=Name(id='_LiveLoggingNullHandler', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='log_cli_formatter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_formatter', ctx=Load()), args=[Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_cli_format'), Constant(value='log_format')], keywords=[]), Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_cli_date_format'), Constant(value='log_date_format')], keywords=[]), Call(func=Name(id='get_option_ini', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='log_auto_indent')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Name(id='log_cli_formatter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_disable_loggers', ctx=Load()), args=[], keywords=[keyword(arg='loggers_to_disable', value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='logger_disable', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_disable_loggers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='loggers_to_disable', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='loggers_to_disable', ctx=Load())), body=[Return()], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Name(id='loggers_to_disable', ctx=Load()), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='logger', ctx=Load()), attr='disabled', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_create_formatter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='log_format'), arg(arg='log_date_format'), arg(arg='auto_indent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='option', ctx=Load()), Constant(value='color'), Constant(value='no')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='color', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='no')]), Call(func=Attribute(value=Attribute(value=Name(id='ColoredLevelFormatter', ctx=Load()), attr='LEVELNAME_FMT_REGEX', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='log_format', ctx=Load())], keywords=[])]), body=[AnnAssign(target=Name(id='formatter', ctx=Store()), annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='Formatter', ctx=Load()), value=Call(func=Name(id='ColoredLevelFormatter', ctx=Load()), args=[Call(func=Name(id='create_terminal_writer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load())], keywords=[]), Name(id='log_format', ctx=Load()), Name(id='log_date_format', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='DatetimeFormatter', ctx=Load()), args=[Name(id='log_format', ctx=Load()), Name(id='log_date_format', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='formatter', ctx=Load()), attr='_style', ctx=Store())], value=Call(func=Name(id='PercentStyleMultiline', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='formatter', ctx=Load()), attr='_style', ctx=Load()), attr='_fmt', ctx=Load())], keywords=[keyword(arg='auto_indent', value=Name(id='auto_indent', ctx=Load()))])), Return(value=Name(id='formatter', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_log_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the filename parameter for Logging.FileHandler().\n\n        Creates parent directory if it does not exist.\n\n        .. warning::\n            This is an experimental API.\n        ')), Assign(targets=[Name(id='fpath', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='fpath', ctx=Load()), attr='is_absolute', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='fpath', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='rootpath', ctx=Load()), op=Div(), right=Name(id='fpath', ctx=Load())))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='fpath', ctx=Load()), attr='parent', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='fpath', ctx=Load()), attr='parent', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='exist_ok', value=Constant(value=True)), keyword(arg='parents', value=Constant(value=True))]))], orelse=[]), AnnAssign(target=Name(id='stream', ctx=Store()), annotation=Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load()), value=Call(func=Attribute(value=Name(id='fpath', ctx=Load()), attr='open', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='w')), keyword(arg='encoding', value=Constant(value='UTF-8'))]), simple=1), Assign(targets=[Name(id='old_stream', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load()), attr='setStream', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), If(test=Name(id='old_stream', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='old_stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_log_cli_enabled', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether live logging is enabled.')), Assign(targets=[Name(id='enabled', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='--log-cli-level')], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='log_cli')], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='enabled', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='terminal_reporter', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='terminalreporter')], keywords=[])), If(test=Compare(left=Name(id='terminal_reporter', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='sessionstart')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_level', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_level', ctx=Load()))]))], body=[Expr(value=Yield())])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='collection')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_level', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_level', ctx=Load()))]))], body=[Expr(value=Yield())])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtestloop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Name(id='Session', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='collectonly', ctx=Load()), body=[Expr(value=Yield()), Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_cli_enabled', ctx=Load()), args=[], keywords=[]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='verbose')], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), attr='option', ctx=Load()), attr='verbose', ctx=Store())], value=Constant(value=1))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_level', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_level', ctx=Load()))]))], body=[Expr(value=Yield())])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_logstart', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='start')], keywords=[]))], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='logreport')], keywords=[]))], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_runtest_for', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())), arg(arg='when', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Implement the internals of the pytest_runtest_xxx() hooks.')), With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='caplog_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_level', ctx=Load()))]), optional_vars=Name(id='caplog_handler', ctx=Store())), withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='report_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_level', ctx=Load()))]), optional_vars=Name(id='report_handler', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='caplog_handler', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='report_handler', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_records_key', ctx=Load()), ctx=Load()), slice=Name(id='when', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='caplog_handler', ctx=Load()), attr='records', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_handler_key', ctx=Load()), ctx=Store())], value=Name(id='caplog_handler', ctx=Load())), Expr(value=Yield()), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='report_handler', ctx=Load()), attr='stream', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='add_report_section', ctx=Load()), args=[Name(id='when', ctx=Load()), Constant(value='log'), Name(id='log', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='setup')], keywords=[])), AnnAssign(target=Name(id='empty', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_records_key', ctx=Load()), ctx=Store())], value=Name(id='empty', ctx=Load())), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_runtest_for', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='setup')], keywords=[])))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='call')], keywords=[])), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_runtest_for', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='call')], keywords=[])))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_teardown', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='teardown')], keywords=[])), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_runtest_for', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='teardown')], keywords=[]))), Delete(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_records_key', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='caplog_handler_key', ctx=Load()), ctx=Del())])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_logfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='finish')], keywords=[]))], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value='sessionfinish')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_cli_level', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='catching_logs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load())], keywords=[keyword(arg='level', value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_level', ctx=Load()))]))], body=[Expr(value=Yield())])])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_unconfigure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='log_file_handler', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='hookimpl', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_FileHandler', bases=[Attribute(value=Name(id='logging', ctx=Load()), attr='FileHandler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging FileHandler with pytest tweaks.')), FunctionDef(name='handleError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_LiveLoggingStreamHandler', bases=[Name(id='logging_StreamHandler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A logging StreamHandler used by the live logging feature: it will\n    write a newline before the first log message in each test.\n\n    During live logging we must also explicitly disable stdout/stderr\n    capturing otherwise it will get captured and won't appear in the\n    terminal.\n    ")), AnnAssign(target=Name(id='stream', ctx=Store()), annotation=Name(id='TerminalReporter', ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='terminal_reporter', annotation=Name(id='TerminalReporter', ctx=Load())), arg(arg='capture_manager', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CaptureManager', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='stream', value=Name(id='terminal_reporter', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='capture_manager', ctx=Store())], value=Name(id='capture_manager', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_when', ctx=Load()), args=[Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_test_outcome_written', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset the handler; should be called before the start of each test.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_first_record_emitted', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_when', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='when', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare for the given test phase (setup/call/teardown).')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_when', ctx=Store())], value=Name(id='when', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_section_name_shown', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='start')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_test_outcome_written', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctx_manager', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='capture_manager', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='capture_manager', ctx=Load()), attr='global_and_fixture_disabled', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='nullcontext', ctx=Load()), args=[], keywords=[]))), With(items=[withitem(context_expr=Name(id='ctx_manager', ctx=Load()))], body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_first_record_emitted', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_first_record_emitted', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_when', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='teardown'), Constant(value='finish')], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_test_outcome_written', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_test_outcome_written', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], orelse=[])]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_section_name_shown', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_when', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='section', ctx=Load()), args=[BinOp(left=Constant(value='live log '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_when', ctx=Load()))], keywords=[keyword(arg='sep', value=Constant(value='-')), keyword(arg='bold', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_section_name_shown', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='emit', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handleError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_LiveLoggingNullHandler', bases=[Attribute(value=Name(id='logging', ctx=Load()), attr='NullHandler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging handler used when live logging is disabled.')), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_when', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='when', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handleError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])