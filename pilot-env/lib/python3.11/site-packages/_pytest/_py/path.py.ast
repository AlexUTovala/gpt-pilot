Module(body=[Expr(value=Constant(value='local path implementation.')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='atexit')]), Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='warnings')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='os.path', names=[alias(name='abspath')], level=0), ImportFrom(module='os.path', names=[alias(name='dirname')], level=0), ImportFrom(module='os.path', names=[alias(name='exists')], level=0), ImportFrom(module='os.path', names=[alias(name='isabs')], level=0), ImportFrom(module='os.path', names=[alias(name='isdir')], level=0), ImportFrom(module='os.path', names=[alias(name='isfile')], level=0), ImportFrom(module='os.path', names=[alias(name='islink')], level=0), ImportFrom(module='os.path', names=[alias(name='normpath')], level=0), ImportFrom(module='stat', names=[alias(name='S_ISDIR')], level=0), ImportFrom(module='stat', names=[alias(name='S_ISLNK')], level=0), ImportFrom(module='stat', names=[alias(name='S_ISREG')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='overload')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(names=[alias(name='error')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[]), Assign(targets=[Name(id='iswin32', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='_name'), Constant(value=False)], keywords=[]), ops=[Eq()], comparators=[Constant(value='nt')])])), ClassDef(name='Checkers', bases=[], keywords=[], body=[Assign(targets=[Name(id='_depend_on_existence', ctx=Store())], value=Tuple(elts=[Constant(value='exists'), Constant(value='link'), Constant(value='dir'), Constant(value='file')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Name(id='path', ctx=Load()))], decorator_list=[]), FunctionDef(name='dotfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[]))], decorator_list=[]), FunctionDef(name='ext', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[])), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='arg', ctx=Load())))], orelse=[]), Return(value=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='ext', ctx=Load()), ops=[Eq()], comparators=[Name(id='arg', ctx=Load())]))], decorator_list=[]), FunctionDef(name='basename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), ops=[Eq()], comparators=[Name(id='arg', ctx=Load())]))], decorator_list=[]), FunctionDef(name='basestarts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='relto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fnmatch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='fnmatch', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='endswith', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='endswith', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_evaluate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kw')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_code.source', names=[alias(name='getrawcode')], level=2), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='invert', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='meth', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='meth', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='not')]), body=[Assign(targets=[Name(id='invert', ctx=Store())], value=Constant(value=True)), Try(body=[Assign(targets=[Name(id='meth', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='meth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='no '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=' checker available for '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Try(body=[If(test=Compare(left=Attribute(value=Call(func=Name(id='getrawcode', ctx=Load()), args=[Name(id='meth', ctx=Load())], keywords=[]), attr='co_argcount', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[If(test=BinOp(left=UnaryOp(op=Not(), operand=Call(func=Name(id='meth', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), op=BitXor(), right=Name(id='invert', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[If(test=BinOp(left=BinOp(left=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), op=BitXor(), right=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='meth', ctx=Load()), args=[], keywords=[])], keywords=[])), op=BitXor(), right=Name(id='invert', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[])])], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='ENOTDIR', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='EBUSY', ctx=Load())], ctx=Load()), body=[For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_depend_on_existence', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='not'), op=Add(), right=Name(id='name', ctx=Load()))), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[])], orelse=[])])], orelse=[], finalbody=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), AnnAssign(target=Name(id='_statcache', ctx=Store()), annotation=Name(id='Stat', ctx=Load()), simple=1), FunctionDef(name='_stat', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_statcache', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_statcache', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='ELOOP', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_statcache', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='lstat', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_statcache', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Stat', ctx=Load())), FunctionDef(name='dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='S_ISDIR', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stat', ctx=Load()), args=[], keywords=[]), attr='mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='S_ISREG', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stat', ctx=Load()), args=[], keywords=[]), attr='mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exists', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stat', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='lstat', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='S_ISLNK', ctx=Load()), args=[Attribute(value=Name(id='st', ctx=Load()), attr='mode', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NeverRaised', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='Visitor', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fil'), arg(arg='rec'), arg(arg='ignore'), arg(arg='bf'), arg(arg='sort')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fil', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fil', ctx=Store())], value=Call(func=Name(id='FNMatcher', ctx=Load()), args=[Name(id='fil', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='rec', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='rec', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='LocalPath', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='FNMatcher', ctx=Load()), args=[Name(id='rec', ctx=Load())], keywords=[]), simple=0)], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='rec', ctx=Load()), Constant(value='__call__')], keywords=[])), Name(id='rec', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rec', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True)))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rec', ctx=Store())], value=Name(id='rec', ctx=Load()))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fil', ctx=Store())], value=Name(id='fil', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore', ctx=Store())], value=Name(id='ignore', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='breadthfirst', ctx=Store())], value=Name(id='bf', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optsort', ctx=Store())], value=IfExp(test=Name(id='sort', ctx=Load()), body=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='sorted', ctx=Load())], keywords=[]), orelse=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='x', ctx=Load()))))], decorator_list=[]), FunctionDef(name='gen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='entries', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='listdir', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='self', ctx=Load()), attr='ignore', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='rec', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='rec', ctx=Load())), Assign(targets=[Name(id='dirs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='optsort', ctx=Load()), args=[ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='entries', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]), BoolOp(op=Or(), values=[Compare(left=Name(id='rec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='rec', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])])])], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='breadthfirst', ctx=Load())), body=[For(target=Name(id='subdir', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gen', ctx=Load()), args=[Name(id='subdir', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='p', ctx=Load())))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='optsort', ctx=Load()), args=[Name(id='entries', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fil', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fil', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])]), body=[Expr(value=Yield(value=Name(id='p', ctx=Load())))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='breadthfirst', ctx=Load()), body=[For(target=Name(id='subdir', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gen', ctx=Load()), args=[Name(id='subdir', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='p', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='FNMatcher', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='find', ctx=Load()), args=[Attribute(value=Name(id='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), Name(id='iswin32', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='find', ctx=Load()), args=[Attribute(value=Name(id='posixpath', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))])]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='posixpath', ctx=Load()), attr='sep', ctx=Load()), Attribute(value=Name(id='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='find', ctx=Load()), args=[Attribute(value=Name(id='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='path', ctx=Load()), attr='basename', ctx=Load()))], orelse=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='*'), op=Add(), right=Attribute(value=Name(id='path', ctx=Load()), attr='sep', ctx=Load())), op=Add(), right=Name(id='pattern', ctx=Load())))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='fnmatch', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='pattern', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='map_as_list', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='iter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='iter', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), ClassDef(name='Stat', bases=[], keywords=[], body=[If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[FunctionDef(name='size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='mtime', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], orelse=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_osstatresult', ctx=Load()), BinOp(left=Constant(value='st_'), op=Add(), right=Name(id='name', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='osstatresult')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Name(id='path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_osstatresult', ctx=Store())], value=Name(id='osstatresult', ctx=Load()))], decorator_list=[]), FunctionDef(name='owner', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='iswin32', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='XXX win32')], keywords=[]))], orelse=[]), Import(names=[alias(name='pwd')]), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='pwd', ctx=Load()), attr='getpwuid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='uid', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='entry', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return group name of file.')), If(test=Name(id='iswin32', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='XXX win32')], keywords=[]))], orelse=[]), Import(names=[alias(name='grp')]), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='grp', ctx=Load()), attr='getgrgid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='gid', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='entry', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='isdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='S_ISDIR', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_osstatresult', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='isfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='S_ISREG', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_osstatresult', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='islink', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), attr='lstat', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='S_ISLNK', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_osstatresult', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='getuserid', args=arguments(posonlyargs=[], args=[arg(arg='user')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pwd')]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='user', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='pwd', ctx=Load()), attr='getpwnam', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()))], orelse=[]), Return(value=Name(id='user', ctx=Load()))], decorator_list=[]), FunctionDef(name='getgroupid', args=arguments(posonlyargs=[], args=[arg(arg='group')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='grp')]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='group', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='grp', ctx=Load()), attr='getgrnam', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()))], orelse=[]), Return(value=Name(id='group', ctx=Load()))], decorator_list=[]), ClassDef(name='LocalPath', bases=[], keywords=[], body=[Expr(value=Constant(value='Object oriented interface to os.path and other local filesystem\n    related information.\n    ')), ClassDef(name='ImportMismatchError', bases=[Name(id='ImportError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="raised on pyimport() if there is a mismatch of __file__'s"))], decorator_list=[]), Assign(targets=[Name(id='sep', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='expanduser')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Initialize and return a local Path instance.\n\n        Path can be relative to the current directory.\n        If path is None it defaults to the current working directory.\n        If expanduser is True, tilde-expansion is performed.\n        Note that Path instances always carry an absolute path.\n        Note also that passing in a local path object will simply return\n        the exact same path object. Use new() to get a new copy.\n        ')), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load())], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='can only pass None, Path instances or non-empty strings to LocalPath')], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='expanduser', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Store())], value=Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')]), body=[FunctionDef(name='chown', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='user'), arg(arg='group'), arg(arg='rec')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Change ownership to the given user and group.\n            user and group may be specified by a number or\n            by a name.  if rec is True change ownership\n            recursively.\n            ')), Assign(targets=[Name(id='uid', ctx=Store())], value=Call(func=Name(id='getuserid', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gid', ctx=Store())], value=Call(func=Name(id='getgroupid', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[])), If(test=Name(id='rec', ctx=Load()), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[], keywords=[keyword(arg='rec', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Constant(value=0))])))]), body=[If(test=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Constant(value=0))]), body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='chown', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), Name(id='uid', ctx=Load()), Name(id='gid', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='chown', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Name(id='uid', ctx=Load()), Name(id='gid', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='readlink', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return value of a symbolic link.')), Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='readlink', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='mklinkto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='oldname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Posix style hard link to another name.')), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='link', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='oldname', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='mksymlinkto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='absolute')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Create a symbolic link with the given value (pointing to another name).')), If(test=Name(id='absolute', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='symlink', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='common', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='relsource', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='relto', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reldest', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Attribute(value=Name(id='reldest', ctx=Load()), attr='count', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load()), attr='join', ctx=Load()), args=[BinOp(left=BinOp(left=Tuple(elts=[Constant(value='..')], ctx=Load()), op=Mult(), right=Name(id='n', ctx=Load())), op=Add(), right=Tuple(elts=[Name(id='relsource', ctx=Load())], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='symlink', ctx=Load()), Name(id='target', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))])], decorator_list=[])], orelse=[]), FunctionDef(name='__div__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__truediv__', ctx=Store())], value=Name(id='__div__', ctx=Load())), FunctionDef(name='basename', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Basename part of path.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getbyspec', ctx=Load()), args=[Constant(value='basename')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='dirname', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dirname part of path.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getbyspec', ctx=Load()), args=[Constant(value='dirname')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='purebasename', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pure base name of the path.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getbyspec', ctx=Load()), args=[Constant(value='purebasename')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='ext', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Extension of the path (including the '.').")), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getbyspec', ctx=Load()), args=[Constant(value='ext')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='read_binary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and return a bytestring from reading the path.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='read_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and return a Unicode string from reading the path.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='r')], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='r')]), body=[Expr(value=Constant(value='Read and return a bytestring from reading the path.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='readlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cr')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Read and return a list of lines from the path. if cr is False, the\n        newline will be removed from the end of each line.')), Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r')), If(test=UnaryOp(op=Not(), operand=Name(id='cr', ctx=Load())), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='(deprecated) return object unpickled from self.read()')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='rb')], keywords=[])), Try(body=[Import(names=[alias(name='pickle')]), Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='move', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move this path to target.')), If(test=Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='EINVAL', ctx=Load()), args=[Name(id='target', ctx=Load()), Constant(value='cannot move path into a subdirectory of itself')], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rename', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='EXDEV', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='fnmatch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return true if the basename/fullname matches the glob-'pattern'.\n\n        valid pattern characters::\n\n            *       matches everything\n            ?       matches any single character\n            [seq]   matches any character in seq\n            [!seq]  matches any char not in seq\n\n        If the pattern contains a path-separator then the full path\n        is used for pattern matching and a '*' is prepended to the\n        pattern.\n\n        if the pattern doesn't contain a path-separator the pattern\n        is only matched against the basename.\n        ")), Return(value=Call(func=Call(func=Name(id='FNMatcher', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='relto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='relpath')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a string which is the relative part of the path\n        to the given 'relpath'.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='relpath', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='LocalPath', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='relpath', ctx=Load()), conversion=114), Constant(value=': not a string or path object')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='strrelpath', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='relpath', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='strrelpath', ctx=Load()), Compare(left=Subscript(value=Name(id='strrelpath', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())])]), body=[AugAssign(target=Name(id='strrelpath', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='strself', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='_name'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Constant(value='nt')])]), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='strself', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='strrelpath', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=Subscript(value=Name(id='strself', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='strrelpath', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Attribute(value=Name(id='strself', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='strrelpath', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Name(id='strself', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='strrelpath', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[])]), Return(value=Constant(value=''))], decorator_list=[]), FunctionDef(name='ensure_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure the path joined with args is a directory.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Dict(keys=[Constant(value='dir')], values=[Constant(value=True)]))]))], decorator_list=[]), FunctionDef(name='bestrelpath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a string which is a relative path from self\n        (assumed to be a directory) to dest such that\n        self.join(bestrelpath) == dest and if not such\n        path can be determined return dest.\n        ')), Try(body=[If(test=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='dest', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='common', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='base', ctx=Load())), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='self2base', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reldest', ctx=Store())], value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), If(test=Name(id='self2base', ctx=Load()), body=[Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self2base', ctx=Load()), attr='count', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='n', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='lst', ctx=Store())], value=BinOp(left=List(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='pardir', ctx=Load())], ctx=Load()), op=Mult(), right=Name(id='n', ctx=Load()))), If(test=Name(id='reldest', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='reldest', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='dest', ctx=Load()), attr='sep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[])), Return(value=Name(id='target', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='exists', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='isdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='isfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='parts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return a root-first list of all ancestor directories\n        plus the path itself.\n        ')), Assign(targets=[Name(id='current', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='lst', ctx=Store())], value=List(elts=[Name(id='self', ctx=Load())], ctx=Load())), While(test=Constant(value=1), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='current', ctx=Load())), Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Attribute(value=Name(id='current', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='last', ctx=Load()), ops=[Eq()], comparators=[Name(id='current', ctx=Load())]), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='current', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='reverse', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='lst', ctx=Load()))], decorator_list=[]), FunctionDef(name='common', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the common part shared with the other path\n        or None if there is no common part.\n        ')), Assign(targets=[Name(id='last', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parts', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='parts', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[NotEq()], comparators=[Name(id='y', ctx=Load())]), body=[Return(value=Name(id='last', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='x', ctx=Load()))], orelse=[]), Return(value=Name(id='last', ctx=Load()))], decorator_list=[]), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return new path object with 'other' added to the basename")), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new', ctx=Load()), args=[], keywords=[keyword(arg='basename', value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='basename', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))]))], decorator_list=[]), FunctionDef(name='visit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fil'), arg(arg='rec'), arg(arg='ignore'), arg(arg='bf'), arg(arg='sort')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Name(id='NeverRaised', ctx=Load()), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='Yields all paths below the current one\n\n        fil is a filter (glob pattern or callable), if not matching the\n        path will not be yielded, defaulting to None (everything is\n        returned)\n\n        rec is a filter (glob pattern or callable) that controls whether\n        a node is descended, defaulting to None\n\n        ignore is an Exception class that is ignoredwhen calling dirlist()\n        on any of the paths (by default, all exceptions are reported)\n\n        bf if True will cause a breadthfirst search instead of the\n        default depthfirst. Default: False\n\n        sort if True will sort entries within each directory level.\n        ')), Expr(value=YieldFrom(value=Call(func=Attribute(value=Call(func=Name(id='Visitor', ctx=Load()), args=[Name(id='fil', ctx=Load()), Name(id='rec', ctx=Load()), Name(id='ignore', ctx=Load()), Name(id='bf', ctx=Load()), Name(id='sort', ctx=Load())], keywords=[]), attr='gen', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='_sortlist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='res'), arg(arg='sort')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='sort', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sort', ctx=Load()), Constant(value='__call__')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='DeprecationWarning', ctx=Load()), args=[Constant(value='listdir(sort=callable) is deprecated and breaks on python3')], keywords=[])], keywords=[keyword(arg='stacklevel', value=Constant(value=3))])), Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='sort', ctx=Load()), args=[Name(id='sort', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='__fspath__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())), If(test=Name(id='iswin32', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s1', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='s2', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), If(test=Name(id='iswin32', ctx=Load()), body=[Assign(targets=[Name(id='s1', ctx=Store())], value=Call(func=Attribute(value=Name(id='s1', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='s2', ctx=Store())], value=Call(func=Attribute(value=Name(id='s2', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Compare(left=Name(id='s1', ctx=Load()), ops=[Eq()], comparators=[Name(id='s2', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())])))], decorator_list=[]), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='samefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return True if 'other' references the same file as 'self'.")), Assign(targets=[Name(id='other', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isabs', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='other', ctx=Store())], value=Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), Constant(value='samefile')], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='other', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rec'), arg(arg='ignore_errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='Remove a file or directory (or a directory tree if rec=1).\n        if ignore_errors is True, errors while removing directories will\n        be ignored.\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1)), keyword(arg='link', value=Constant(value=0))]), body=[If(test=Name(id='rec', ctx=Load()), body=[If(test=Name(id='iswin32', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='chmod', ctx=Load()), args=[Constant(value=448)], keywords=[keyword(arg='rec', value=Constant(value=1))]))], orelse=[]), Import(names=[alias(name='shutil')]), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Name(id='ignore_errors', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))])], orelse=[If(test=Name(id='iswin32', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='chmod', ctx=Load()), args=[Constant(value=448)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='computehash', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hashtype'), arg(arg='chunksize')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='md5'), Constant(value=524288)]), body=[Expr(value=Constant(value='Return hexdigest of hashvalue for this file.')), Try(body=[Try(body=[Import(names=[alias(name='hashlib', asname='mod')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[If(test=Compare(left=Name(id='hashtype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sha1')]), body=[Assign(targets=[Name(id='hashtype', ctx=Store())], value=Constant(value='sha'))], orelse=[]), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='hashtype', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='hash', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='hashtype', ctx=Load())], keywords=[]), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ImportError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Don't know how to compute "), FormattedValue(value=Name(id='hashtype', ctx=Load()), conversion=114), Constant(value=' hash')])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='rb')], keywords=[])), Try(body=[While(test=Constant(value=1), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='chunksize', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='buf', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='new', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Expr(value=Constant(value='Create a modified version of this path.\n        the following keyword arguments modify various path parts::\n\n          a:/some/path/to/a/file.ext\n          xx                           drive\n          xxxxxxxxxxxxxxxxx            dirname\n                            xxxxxxxx   basename\n                            xxxx       purebasename\n                                 xxx   ext\n        ')), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='kw', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='strpath', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())), Return(value=Name(id='obj', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='drive', ctx=Store()), Name(id='dirname', ctx=Store()), Name(id='basename', ctx=Store()), Name(id='purebasename', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getbyspec', ctx=Load()), args=[Constant(value='drive,dirname,basename,purebasename,ext')], keywords=[])), If(test=Compare(left=Constant(value='basename'), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='purebasename'), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), Compare(left=Constant(value='ext'), ops=[In()], comparators=[Name(id='kw', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid specification %r'), op=Mod(), right=Name(id='kw', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='pb', ctx=Store())], value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='purebasename'), Name(id='purebasename', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='ext'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[If(test=BoolOp(op=And(), values=[Name(id='ext', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[]))]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='ext', ctx=Load())))], orelse=[])], finalbody=[]), Assign(targets=[Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='basename'), ctx=Store())], value=BinOp(left=Name(id='pb', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())))]), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='dirname'), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), UnaryOp(op=Not(), operand=Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='dirname'), ctx=Load()))]), body=[Assign(targets=[Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='dirname'), ctx=Store())], value=Name(id='drive', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='dirname'), Name(id='dirname', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='sep'), Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='strpath', ctx=Store())], value=Call(func=Name(id='normpath', ctx=Load()), args=[BinOp(left=Constant(value='%(dirname)s%(sep)s%(basename)s'), op=Mod(), right=Name(id='kw', ctx=Load()))], keywords=[])), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='_getbyspec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="See new for what 'spec' can be.")), Assign(targets=[Name(id='res', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Constant(value=None), Call(func=Attribute(value=Name(id='spec', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='drive')]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='dirname')]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load()), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='basename', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='basename')]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='basename', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Tuple(elts=[Name(id='purebasename', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='basename', ctx=Load()), Constant(value='')], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='purebasename', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='basename', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()), Subscript(value=Name(id='basename', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load()))]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='purebasename')]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='purebasename', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ext')]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid part specification %r'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))])])])])])], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='dirpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Return the directory path joined with any given path arguments.')), If(test=UnaryOp(op=Not(), operand=Name(id='kwargs', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='path', ctx=Load()), attr='strpath', ctx=Store())], value=Call(func=Name(id='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new', ctx=Load()), args=[], keywords=[keyword(arg='basename', value=Constant(value=''))]), attr='join', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='join', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), kwonlyargs=[arg(arg='abs', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value="Return a new path by appending all 'args' as path\n        components.  if abs=1 is used restart from root if any\n        of the args is an absolute path.\n        ")), Assign(targets=[Name(id='sep', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())), Assign(targets=[Name(id='strargs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='strpath', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())), If(test=Name(id='abs', ctx=Load()), body=[AnnAssign(target=Name(id='newargs', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='arg', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='strargs', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isabs', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='strpath', ctx=Store())], value=Name(id='arg', ctx=Load())), Assign(targets=[Name(id='strargs', ctx=Store())], value=Name(id='newargs', ctx=Load())), Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='newargs', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='arg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='actual_sep', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='strpath', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[]), body=Constant(value=''), orelse=Name(id='sep', ctx=Load()))), For(target=Name(id='arg', ctx=Store()), iter=Name(id='strargs', ctx=Load()), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='strip', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])), If(test=Name(id='iswin32', ctx=Load()), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='/'), Name(id='sep', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='strpath', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='strpath', ctx=Load()), op=Add(), right=Name(id='actual_sep', ctx=Load())), op=Add(), right=Name(id='arg', ctx=Load()))), Assign(targets=[Name(id='actual_sep', ctx=Store())], value=Name(id='sep', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='strpath', ctx=Store())], value=Call(func=Name(id='normpath', ctx=Load()), args=[Name(id='strpath', ctx=Load())], keywords=[])), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[], returns=Name(id='LocalPath', ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='ensure'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='r'), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Return an opened file with the given mode.\n\n        If ensure is True, create parent directories if needed.\n        ')), If(test=Name(id='ensure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], orelse=[]), If(test=Name(id='encoding', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='io', ctx=Load()), attr='open', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Name(id='open', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_fastjoin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='child', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='child', ctx=Load()), attr='strpath', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())), op=Add(), right=Name(id='name', ctx=Load()))), Return(value=Name(id='child', ctx=Load()))], decorator_list=[]), FunctionDef(name='islink', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='islink', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Expr(value=Constant(value='Check a path for existence and properties.\n\n        Without arguments, return True if the path exists, otherwise False.\n\n        valid checkers::\n\n            file=1    # is a file\n            file=0    # is not a file (may not even exist)\n            dir=1     # is a dir\n            link=1    # is a link\n            exists=1  # exists\n\n        You can specify multiple checker definitions, for example::\n\n            path.check(file=1, link=1)  # a link pointing to a file\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='kw', ctx=Load())), body=[Return(value=Call(func=Name(id='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[If(test=Compare(left=Constant(value='dir'), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), body=[Return(value=UnaryOp(op=Not(), operand=BinOp(left=Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='dir'), ctx=Load()), op=BitXor(), right=Call(func=Name(id='isdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))))], orelse=[]), If(test=Compare(left=Constant(value='file'), ops=[In()], comparators=[Name(id='kw', ctx=Load())]), body=[Return(value=UnaryOp(op=Not(), operand=BinOp(left=Subscript(value=Name(id='kw', ctx=Load()), slice=Constant(value='file'), ctx=Load()), op=BitXor(), right=Call(func=Name(id='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='kw', ctx=Load())), body=[Assign(targets=[Name(id='kw', ctx=Store())], value=Dict(keys=[Constant(value='exists')], values=[Constant(value=1)]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='Checkers', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='_evaluate', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='_patternchars', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=Constant(value='*?['), op=Add(), right=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()))], keywords=[])), FunctionDef(name='listdir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fil'), arg(arg='sort')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='List directory contents, possibly filter by the given fil func\n        and possibly sorted.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='fil', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='sort', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='map_as_list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fastjoin', ctx=Load()), Name(id='names', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fil', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_patternchars', ctx=Load()), attr='intersection', ctx=Load()), args=[Name(id='fil', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='child', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fastjoin', ctx=Load()), args=[Name(id='fil', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='exists', ctx=Load()), args=[Attribute(value=Name(id='child', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]), body=[Return(value=List(elts=[Name(id='child', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fil', ctx=Store())], value=Call(func=Name(id='FNMatcher', ctx=Load()), args=[Name(id='fil', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='child', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fastjoin', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='fil', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='fil', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_sortlist', ctx=Load()), args=[Name(id='res', ctx=Load()), Name(id='sort', ctx=Load())], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return size of the underlying file object')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]), attr='size', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='mtime', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return last modification time of the path.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]), attr='mtime', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target'), arg(arg='mode'), arg(arg='stat')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='Copy path to target.\n\n        If mode is True, will copy copy permission from path to target.\n        If stat is True, copy permission, last modification\n        time, last access time, and flags from path to target.\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))]), body=[If(test=Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='basename', ctx=Load())], keywords=[]))], orelse=[]), Assert(test=Compare(left=Name(id='self', ctx=Load()), ops=[NotEq()], comparators=[Name(id='target', ctx=Load())])), Expr(value=Call(func=Name(id='copychunked', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), If(test=Name(id='mode', ctx=Load()), body=[Expr(value=Call(func=Name(id='copymode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Attribute(value=Name(id='target', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='stat', ctx=Load()), body=[Expr(value=Call(func=Name(id='copystat', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='target', ctx=Load())], keywords=[]))], orelse=[])], orelse=[FunctionDef(name='rec', args=arguments(posonlyargs=[], args=[arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Constant(value=0))]))], decorator_list=[]), For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[], keywords=[keyword(arg='rec', value=Name(id='rec', ctx=Load()))]), body=[Assign(targets=[Name(id='relpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='relto', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='newx', ctx=Store())], value=Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='relpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='newx', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))])), If(test=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='newx', ctx=Load()), attr='mksymlinkto', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='readlink', ctx=Load()), args=[], keywords=[])], keywords=[])), Continue()], orelse=[If(test=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))]), body=[Expr(value=Call(func=Name(id='copychunked', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='newx', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='newx', ctx=Load()), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], orelse=[])])]), If(test=Name(id='mode', ctx=Load()), body=[Expr(value=Call(func=Name(id='copymode', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='strpath', ctx=Load()), Attribute(value=Name(id='newx', ctx=Load()), attr='strpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='stat', ctx=Load()), body=[Expr(value=Call(func=Name(id='copystat', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='newx', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='rename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Rename this path to target.')), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='rename', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='target', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='bin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Pickle object into path location')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='wb')], keywords=[])), Import(names=[alias(name='pickle')]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), Name(id='obj', ctx=Load()), Name(id='f', ctx=Load()), Name(id='bin', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='mkdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create & return the directory joined with args.')), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='p', ctx=Load()))], decorator_list=[]), FunctionDef(name='write_binary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='ensure')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Write binary data into path.   If ensure is True create\n        missing parent directories.\n        ')), If(test=Name(id='ensure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='write_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='encoding'), arg(arg='ensure')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        ')), If(test=Name(id='ensure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='w')], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='mode'), arg(arg='ensure')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='w'), Constant(value=False)]), body=[Expr(value=Constant(value='Write data into path.   If ensure is True create\n        missing parent directories.\n        ')), If(test=Name(id='ensure', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='ensure', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=1))]))], orelse=[]), If(test=Compare(left=Constant(value='b'), ops=[In()], comparators=[Name(id='mode', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='can only process bytes')], keywords=[]))], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getdefaultencoding', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[])]), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_ensuredirs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=0))]), body=[Expr(value=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='_ensuredirs', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=0))]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='EEXIST', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Constant(value=0))]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value="Ensure that an args-joined path exists (by default as\n        a file). if you specify a keyword argument 'dir=True'\n        then the path is forced to be a directory path.\n        ")), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dir'), Constant(value=0)], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='_ensuredirs', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[]), attr='_ensuredirs', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))])), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='wb')], keywords=[]), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='p', ctx=Load()))])], decorator_list=[]), FunctionDef(name='stat', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='raising', annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=True), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='Stat', ctx=Load())), FunctionDef(name='stat', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='raising', annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=BinOp(left=Name(id='Stat', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='stat', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='raising', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return an os.stat() tuple.')), If(test=Name(id='raising', ctx=Load()), body=[Return(value=Call(func=Name(id='Stat', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='Stat', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=Name(id='Stat', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='lstat', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return an os.lstat() tuple.')), Return(value=Call(func=Name(id='Stat', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='lstat', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Stat', ctx=Load())), FunctionDef(name='setmtime', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mtime')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Set modification time for the given path.  if 'mtime' is None\n        (the default) then the file's mtime is set to current time.\n\n        Note that the resolution for 'mtime' is platform dependent.\n        ")), If(test=Compare(left=Name(id='mtime', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='utime', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='mtime', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='utime', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Name(id='mtime', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='EINVAL', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='utime', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='atime', ctx=Load()), args=[], keywords=[]), Name(id='mtime', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='chdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Change directory to self and return old current directory')), Try(body=[Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), body=[Assign(targets=[Name(id='old', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])), Return(value=Name(id='old', ctx=Load()))], decorator_list=[]), FunctionDef(name='as_cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager, which changes to the path\'s dir during the\n        managed "with" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        ')), Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='chdir', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='old', ctx=Load())))], handlers=[], orelse=[], finalbody=[If(test=Compare(left=Name(id='old', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='old', ctx=Load()), attr='chdir', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())]), FunctionDef(name='realpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a new path which contains no symbolic links.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='atime', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return last access time of the path.')), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[]), attr='atime', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='local(%r)'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load())))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return string representation of the Path.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()))], decorator_list=[]), FunctionDef(name='chmod', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='rec')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='mode', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='mode '), FormattedValue(value=Name(id='mode', ctx=Load()), conversion=114), Constant(value=' must be an integer')])], keywords=[]))], orelse=[]), If(test=Name(id='rec', ctx=Load()), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='visit', ctx=Load()), args=[], keywords=[keyword(arg='rec', value=Name(id='rec', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), Name(id='mode', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='strpath', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pypkgpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the Python package path by looking for the last\n        directory upwards which still contains an __init__.py.\n        Return None if a pkgpath can not be determined.\n        ')), Assign(targets=[Name(id='pkgpath', ctx=Store())], value=Constant(value=None)), For(target=Name(id='parent', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parts', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]), body=[If(test=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='isdir', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='__init__.py')], keywords=[]), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Break()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isimportable', ctx=Load()), args=[Attribute(value=Name(id='parent', ctx=Load()), attr='basename', ctx=Load())], keywords=[])), body=[Break()], orelse=[]), Assign(targets=[Name(id='pkgpath', ctx=Store())], value=Name(id='parent', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='pkgpath', ctx=Load()))], decorator_list=[]), FunctionDef(name='_ensuresyspath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ensuremode'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='ensuremode', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ensuremode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='append')]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='s', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='pyimport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='modname'), arg(arg='ensuresyspath')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Return path as an imported python module.\n\n        If modname is None, look for the containing package\n        and construct an according module name.\n        The module will be put/looked up in sys.modules.\n        if ensuresyspath is True then the root dir for importing\n        the file (taking __init__.py files into account) will\n        be prepended to sys.path if it isn\'t there already.\n        If ensuresyspath=="append" the root dir will be appended\n        if it isn\'t already contained in sys.path.\n        if ensuresyspath is False no modification of syspath happens.\n\n        Special value of ensuresyspath=="importlib" is intended\n        purely for using in pytest, it is capable only of importing\n        separate .py files outside packages, e.g. for test suite\n        without any __init__.py file. It effectively allows having\n        same-named test modules in different places and offers\n        mild opt-in via this option. Note that it works only in\n        recent versions of python.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ensuresyspath', ctx=Load()), ops=[Eq()], comparators=[Constant(value='importlib')]), body=[If(test=Compare(left=Name(id='modname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='modname', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='purebasename', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_file_location', ctx=Load()), args=[Name(id='modname', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='spec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Can't find module "), FormattedValue(value=Name(id='modname', ctx=Load()), conversion=-1), Constant(value=' at location '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='module_from_spec', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), attr='exec_module', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[])), Return(value=Name(id='mod', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pkgpath', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='modname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pkgpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pypkgpath', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='pkgpath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pkgroot', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkgpath', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new', ctx=Load()), args=[], keywords=[keyword(arg='ext', value=Constant(value=''))]), attr='relto', ctx=Load()), args=[Name(id='pkgroot', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='names', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='__init__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='modname', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='pkgroot', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dirpath', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='modname', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='purebasename', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensuresyspath', ctx=Load()), args=[Name(id='ensuresyspath', ctx=Load()), Name(id='pkgroot', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='basename', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__init__.py')]), body=[Return(value=Name(id='mod', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='modfile', ctx=Store())], value=Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load())), Assert(test=Compare(left=Name(id='modfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Subscript(value=Name(id='modfile', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='.pyc'), Constant(value='.pyo')], ctx=Load())]), body=[Assign(targets=[Name(id='modfile', ctx=Store())], value=Subscript(value=Name(id='modfile', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Name(id='modfile', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='$py.class')], keywords=[]), body=[Assign(targets=[Name(id='modfile', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='modfile', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=9))), ctx=Load()), op=Add(), right=Constant(value='.py')))], orelse=[])]), If(test=Call(func=Attribute(value=Name(id='modfile', ctx=Load()), attr='endswith', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), op=Add(), right=Constant(value='__init__.py'))], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='basename', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__init__.py')]), body=[Assign(targets=[Name(id='modfile', ctx=Store())], value=Subscript(value=Name(id='modfile', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=12))), ctx=Load()))], orelse=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='issame', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='modfile', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), body=[Assign(targets=[Name(id='issame', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='issame', ctx=Load())), body=[Assign(targets=[Name(id='ignore', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PY_IGNORE_IMPORTMISMATCH')], keywords=[])), If(test=Compare(left=Name(id='ignore', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='1')]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ImportMismatchError', ctx=Load()), args=[Name(id='modname', ctx=Load()), Name(id='modfile', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='mod', ctx=Load()))], orelse=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Import(names=[alias(name='types')]), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Store())], value=Name(id='mod', ctx=Load())), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='mod', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='modname', ctx=Load()), ctx=Del())]), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='mod', ctx=Load()))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='sysexec', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='argv', annotation=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='popen_opts', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value="Return stdout text from executing a system child process,\n        where the 'self' path points to executable.\n        The process is directly invoked and not through a system shell.\n        ")), ImportFrom(module='subprocess', names=[alias(name='Popen'), alias(name='PIPE')], level=0), Expr(value=Call(func=Attribute(value=Name(id='popen_opts', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='stdout'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='popen_opts', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='stderr'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Name(id='Popen', ctx=Load()), args=[BinOp(left=List(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='argv', ctx=Load()), ifs=[], is_async=0)]))], keywords=[keyword(value=Name(id='popen_opts', ctx=Load())), keyword(arg='stdout', value=Name(id='PIPE', ctx=Load())), keyword(arg='stderr', value=Name(id='PIPE', ctx=Load()))])), AnnAssign(target=Name(id='stdout', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='bytes', ctx=Load())), simple=1), Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='stdout', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getdefaultencoding', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='stderr', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='stderr', ctx=Store())], value=Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getdefaultencoding', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='ret', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Name(id='stdout', ctx=Load()), Name(id='stderr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='stdout', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='sysfind', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='checker'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a path object found by looking at the systems\n        underlying PATH specification. If the checker is not None\n        it will be invoked to filter matching paths.  If a binary\n        cannot be found, None is returned\n        Note: This is probably not working on plain win32 systems\n        but may work on cygwin.\n        ')), If(test=Call(func=Name(id='isabs', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='local', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))]), body=[Return(value=Name(id='p', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='paths', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='iswin32', ctx=Load()), body=[Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='Path'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=''), ops=[NotIn()], comparators=[Name(id='paths', ctx=Load())]), Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='paths', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='systemroot', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='SYSTEMROOT'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='paths', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%SystemRoot%'), Name(id='systemroot', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)]))], finalbody=[])], orelse=[Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PATH'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='tryadd', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='iswin32', ctx=Load()), body=[AugAssign(target=Name(id='tryadd', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PATHEXT'), ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tryadd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='')], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[For(target=Name(id='addext', ctx=Store()), iter=Name(id='tryadd', ctx=Load()), body=[Assign(targets=[Name(id='p', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Call(func=Name(id='local', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), attr='join', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='abs', value=Constant(value=True))]), op=Add(), right=Name(id='addext', ctx=Load()))), Try(body=[If(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='check', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Constant(value=1))]), body=[If(test=Name(id='checker', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='checker', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), body=[Continue()], orelse=[])], orelse=[]), Return(value=Name(id='p', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='EACCES', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_gethomedir', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='HOME'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='x', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='HOMEDRIVE'), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='HOMEPATH'), ctx=Load())))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_temproot', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the system's temporary directory\n        (where tempfiles are usually created in)\n        ")), Import(names=[alias(name='tempfile')]), Return(value=Call(func=Name(id='local', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='gettempdir', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='mkdtemp', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='rootdir')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return a Path object pointing to a fresh new temporary directory\n        (which we created ourself).\n        ')), Import(names=[alias(name='tempfile')]), If(test=Compare(left=Name(id='rootdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_temproot', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load())], keywords=[keyword(arg='dir', value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='rootdir', ctx=Load())], keywords=[]))])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='make_numbered_dir', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='prefix'), arg(arg='rootdir'), arg(arg='keep'), arg(arg='lock_timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='session-'), Constant(value=None), Constant(value=3), Constant(value=172800)]), body=[Expr(value=Constant(value='Return unique directory with a number greater than the current\n        maximum one.  The number is assumed to start directly after prefix.\n        if keep is true directories with a number less than (maxnum-keep)\n        will be removed. If .lock files are used (lock_timeout non-zero),\n        algorithm is multi-process safe.\n        ')), If(test=Compare(left=Name(id='rootdir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_temproot', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='nprefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), FunctionDef(name='parse_num', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse the number out of a path (if it matches the prefix)')), Assign(targets=[Name(id='nbasename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='path', ctx=Load()), attr='basename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='nbasename', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='nprefix', ctx=Load())], keywords=[]), body=[Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='nbasename', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='nprefix', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='create_lockfile', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exclusively create lockfile. Throws when failed')), Assign(targets=[Name(id='mypid', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lockfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='.lock')], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='lockfile', ctx=Load()), Constant(value='mksymlinkto')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lockfile', ctx=Load()), attr='mksymlinkto', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='mypid', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='checked_call', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='lockfile', ctx=Load())], keywords=[]), BinOp(left=BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='O_WRONLY', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_CREAT', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_EXCL', ctx=Load())), Constant(value=420)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fdopen', ctx=Load()), args=[Name(id='fd', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='mypid', ctx=Load())], keywords=[])], keywords=[]))])]), Return(value=Name(id='lockfile', ctx=Load()))], decorator_list=[]), FunctionDef(name='atexit_remove_lockfile', args=arguments(posonlyargs=[], args=[arg(arg='lockfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure lockfile is removed at process exit')), Assign(targets=[Name(id='mypid', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), FunctionDef(name='try_remove_lockfile', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Name(id='mypid', ctx=Load())]), body=[Return()], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='lockfile', ctx=Load()), attr='remove', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='Error', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='atexit', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='try_remove_lockfile', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='lastmax', ctx=Store())], value=Constant(value=None)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='maxnum', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='listdir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='parse_num', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='num', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='maxnum', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='maxnum', ctx=Load()), Name(id='num', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='udir', ctx=Store())], value=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='mkdir', ctx=Load()), args=[BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Name(id='maxnum', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], keywords=[])), If(test=Name(id='lock_timeout', ctx=Load()), body=[Assign(targets=[Name(id='lockfile', ctx=Store())], value=Call(func=Name(id='create_lockfile', ctx=Load()), args=[Name(id='udir', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='atexit_remove_lockfile', ctx=Load()), args=[Name(id='lockfile', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='EEXIST', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='EBUSY', ctx=Load())], ctx=Load()), body=[If(test=Compare(left=Name(id='lastmax', ctx=Load()), ops=[Eq()], comparators=[Name(id='maxnum', ctx=Load())]), body=[Raise()], orelse=[]), Assign(targets=[Name(id='lastmax', ctx=Store())], value=Name(id='maxnum', ctx=Load())), Continue()])], orelse=[], finalbody=[]), Break()], orelse=[]), FunctionDef(name='get_mtime', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read file modification time')), Try(body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='lstat', ctx=Load()), args=[], keywords=[]), attr='mtime', ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='error', ctx=Load()), attr='Error', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='garbage_prefix', ctx=Store())], value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Constant(value='garbage-'))), FunctionDef(name='is_garbage', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if path denotes directory scheduled for removal')), Assign(targets=[Name(id='bn', ctx=Store())], value=Attribute(value=Name(id='path', ctx=Load()), attr='basename', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='bn', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='garbage_prefix', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='udir_time', ctx=Store())], value=Call(func=Name(id='get_mtime', ctx=Load()), args=[Name(id='udir', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='keep', ctx=Load()), Name(id='udir_time', ctx=Load())]), body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='listdir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='parse_num', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='num', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='num', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Name(id='maxnum', ctx=Load()), op=Sub(), right=Name(id='keep', ctx=Load()))])]), body=[Try(body=[If(test=Name(id='lock_timeout', ctx=Load()), body=[Expr(value=Call(func=Name(id='create_lockfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='EEXIST', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='ENOENT', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='EBUSY', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='path_time', ctx=Store())], value=Call(func=Name(id='get_mtime', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='path_time', ctx=Load())), body=[Continue()], orelse=[]), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='udir_time', ctx=Load()), op=Sub(), right=Name(id='path_time', ctx=Load()))], keywords=[]), ops=[Lt()], comparators=[Name(id='lock_timeout', ctx=Load())]), body=[Continue()], orelse=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='garbage_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='join', ctx=Load()), args=[BinOp(left=Name(id='garbage_prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='rename', ctx=Load()), args=[Name(id='garbage_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='garbage_path', ctx=Load()), attr='remove', ctx=Load()), args=[], keywords=[keyword(arg='rec', value=Constant(value=1))]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Call(func=Name(id='is_garbage', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='remove', ctx=Load()), args=[], keywords=[keyword(arg='rec', value=Constant(value=1))]))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='username', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='USER'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='username', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='USERNAME'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='username', ctx=Store())], value=Constant(value='current'))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='udir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dest', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='-')], keywords=[])), ctx=Load()), op=Add(), right=Constant(value='-')), op=Add(), right=Name(id='username', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='symlink', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='AttributeError', ctx=Load()), Name(id='NotImplementedError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Name(id='udir', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='copymode', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Copy permission from src to dst.')), Import(names=[alias(name='shutil')]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copymode', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='copystat', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Copy permission,  last modification time,\n    last access time, and flags from src to dst.')), Import(names=[alias(name='shutil')]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copystat', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='copychunked', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dest')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='chunksize', ctx=Store())], value=Constant(value=524288)), Assign(targets=[Name(id='fsrc', ctx=Store())], value=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='rb')], keywords=[])), Try(body=[Assign(targets=[Name(id='fdest', ctx=Store())], value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='wb')], keywords=[])), Try(body=[While(test=Constant(value=1), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='fsrc', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='chunksize', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='buf', ctx=Load())), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fdest', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fdest', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fsrc', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='isimportable', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='name', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Attribute(value=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='_')])])]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[])), Return(value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='isalnum', ctx=Load()), args=[], keywords=[])]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='local', ctx=Store())], value=Name(id='LocalPath', ctx=Load()))], type_ignores=[])