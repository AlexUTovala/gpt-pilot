Module(body=[Expr(value=Constant(value='create errno-specific classes for IO or os calls.')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='errno')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='ParamSpec')], level=0), Assign(targets=[Name(id='P', ctx=Store())], value=Call(func=Name(id='ParamSpec', ctx=Load()), args=[Constant(value='P')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='R', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='R')], keywords=[])), ClassDef(name='Error', bases=[Name(id='EnvironmentError', ctx=Load())], keywords=[], body=[FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}.{} {!r}: {} '), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__module__', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__doc__', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Constant(value='[{}]: {}'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__doc__', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_winerrnomap', ctx=Store())], value=Dict(keys=[Constant(value=2), Constant(value=3), Constant(value=17), Constant(value=18), Constant(value=13), Constant(value=22), Constant(value=20), Constant(value=267), Constant(value=5)], values=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EXDEV', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EBUSY', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='ENOTDIR', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='ENOTDIR', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='ENOTDIR', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())])), ClassDef(name='ErrorMaker', bases=[], keywords=[], body=[Expr(value=Constant(value="lazily provides Exception classes for each possible POSIX errno\n    (as defined per the 'errno' module).  All such instances\n    subclass EnvironmentError.\n    ")), AnnAssign(target=Name(id='_errno2class', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Error', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='_')]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='eno', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='errno', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_geterrnoclass', ctx=Load()), args=[Name(id='eno', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Error', ctx=Load()), ctx=Load())), FunctionDef(name='_geterrnoclass', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='eno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_errno2class', ctx=Load()), slice=Name(id='eno', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='clsname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='errno', ctx=Load()), attr='errorcode', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='eno', ctx=Load()), BinOp(left=Constant(value='UnknownErrno%d'), op=Mod(), right=Tuple(elts=[Name(id='eno', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='errorcls', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='clsname', ctx=Load()), Tuple(elts=[Name(id='Error', ctx=Load())], ctx=Load()), Dict(keys=[Constant(value='__module__'), Constant(value='__doc__')], values=[Constant(value='py.error'), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='strerror', ctx=Load()), args=[Name(id='eno', ctx=Load())], keywords=[])])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_errno2class', ctx=Load()), slice=Name(id='eno', ctx=Load()), ctx=Store())], value=Name(id='errorcls', ctx=Load())), Return(value=Name(id='errorcls', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Error', ctx=Load()), ctx=Load())), FunctionDef(name='checked_call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Name(id='P', ctx=Load()), Name(id='R', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='P', ctx=Load()), attr='args', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='P', ctx=Load()), attr='kwargs', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Call a function and raise an errno-exception if applicable.')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Try(body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Error', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='OSError', ctx=Load()), name='value', body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='errno')], keywords=[])), body=[Raise()], orelse=[]), Assign(targets=[Name(id='errno', ctx=Store())], value=Attribute(value=Name(id='value', ctx=Load()), attr='errno', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Try(body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_geterrnoclass', ctx=Load()), args=[Subscript(value=Name(id='_winerrnomap', ctx=Load()), slice=Name(id='errno', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_geterrnoclass', ctx=Load()), args=[Name(id='errno', ctx=Load())], keywords=[]))]), Raise(exc=Call(func=Name(id='cls', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='args', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='R', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_error_maker', ctx=Store())], value=Call(func=Name(id='ErrorMaker', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='checked_call', ctx=Store())], value=Attribute(value=Name(id='_error_maker', ctx=Load()), attr='checked_call', ctx=Load())), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='attr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='_error_maker', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Error', ctx=Load()), ctx=Load()))], type_ignores=[])