Module(body=[Expr(value=Constant(value='Core implementation of the testing process: init, session, runtest loop.')), Import(names=[alias(name='argparse')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='importlib')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='FrozenSet')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='Set')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='_pytest._code')]), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='overload')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='directory_arg')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='PytestPluginManager')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='UsageError')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureManager')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='exit')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='absolutepath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='bestrelpath')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='fnmatch_ex')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='safe_exists')], level=0), ImportFrom(module='_pytest.pathlib', names=[alias(name='visit')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='CollectReport')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='collect_one_node')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='SetupState')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0)], orelse=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='norecursedirs'), Constant(value='Directory patterns to avoid for recursion')], keywords=[keyword(arg='type', value=Constant(value='args')), keyword(arg='default', value=List(elts=[Constant(value='*.egg'), Constant(value='.*'), Constant(value='_darcs'), Constant(value='build'), Constant(value='CVS'), Constant(value='dist'), Constant(value='node_modules'), Constant(value='venv'), Constant(value='{arch}')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='testpaths'), Constant(value='Directories to search for tests when no files or directories are given on the command line')], keywords=[keyword(arg='type', value=Constant(value='args')), keyword(arg='default', value=List(elts=[], ctx=Load()))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='general'), Constant(value='Running and selection options')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-x'), Constant(value='--exitfirst')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='dest', value=Constant(value='maxfail')), keyword(arg='const', value=Constant(value=1)), keyword(arg='help', value=Constant(value='Exit instantly on first error or failed test'))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='pytest-warnings')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='-W'), Constant(value='--pythonwarnings')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='help', value=Constant(value='Set which warnings to report, see -W option of Python itself'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='filterwarnings')], keywords=[keyword(arg='type', value=Constant(value='linelist')), keyword(arg='help', value=Constant(value='Each line specifies a pattern for warnings.filterwarnings. Processed after -W/--pythonwarnings.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--maxfail')], keywords=[keyword(arg='metavar', value=Constant(value='num')), keyword(arg='action', value=Constant(value='store')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='dest', value=Constant(value='maxfail')), keyword(arg='default', value=Constant(value=0)), keyword(arg='help', value=Constant(value='Exit after first num failures or errors'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--strict-config')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Any warnings encountered while parsing the `pytest` section of the configuration file raise errors'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--strict-markers')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Markers not registered in the `markers` section of the configuration file raise errors'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--strict')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='(Deprecated) alias to --strict-markers'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-c'), Constant(value='--config-file')], keywords=[keyword(arg='metavar', value=Constant(value='FILE')), keyword(arg='type', value=Name(id='str', ctx=Load())), keyword(arg='dest', value=Constant(value='inifilename')), keyword(arg='help', value=Constant(value='Load configuration from `FILE` instead of trying to locate one of the implicit configuration files.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--continue-on-collection-errors')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='continue_on_collection_errors')), keyword(arg='help', value=Constant(value='Force test execution even if collection errors occur'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='--rootdir')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='rootdir')), keyword(arg='help', value=Constant(value="Define root directory for tests. Can be relative path: 'root_dir', './root_dir', 'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: '$HOME/root_dir'."))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='collect'), Constant(value='collection')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--collectonly'), Constant(value='--collect-only'), Constant(value='--co')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value="Only collect tests, don't execute them"))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--pyargs')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Try to interpret all arguments as Python packages'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--ignore')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='metavar', value=Constant(value='path')), keyword(arg='help', value=Constant(value='Ignore path during collection (multi-allowed)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--ignore-glob')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='metavar', value=Constant(value='path')), keyword(arg='help', value=Constant(value='Ignore path pattern during collection (multi-allowed)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--deselect')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='metavar', value=Constant(value='nodeid_prefix')), keyword(arg='help', value=Constant(value='Deselect item (via node id prefix) during collection (multi-allowed)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--confcutdir')], keywords=[keyword(arg='dest', value=Constant(value='confcutdir')), keyword(arg='default', value=Constant(value=None)), keyword(arg='metavar', value=Constant(value='dir')), keyword(arg='type', value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='directory_arg', ctx=Load())], keywords=[keyword(arg='optname', value=Constant(value='--confcutdir'))])), keyword(arg='help', value=Constant(value="Only load conftest.py's relative to specified dir"))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--noconftest')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='noconftest')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value="Don't load any conftest.py files"))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--keepduplicates'), Constant(value='--keep-duplicates')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='keepduplicates')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Keep duplicate tests'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--collect-in-virtualenv')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='collect_in_virtualenv')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value="Don't ignore tests in a local virtualenv directory"))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--import-mode')], keywords=[keyword(arg='default', value=Constant(value='prepend')), keyword(arg='choices', value=List(elts=[Constant(value='prepend'), Constant(value='append'), Constant(value='importlib')], ctx=Load())), keyword(arg='dest', value=Constant(value='importmode')), keyword(arg='help', value=Constant(value='Prepend/append to sys.path when importing test modules and conftest files. Default: prepend.'))])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='debugconfig'), Constant(value='test session debugging and configuration')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--basetemp')], keywords=[keyword(arg='dest', value=Constant(value='basetemp')), keyword(arg='default', value=Constant(value=None)), keyword(arg='type', value=Name(id='validate_basetemp', ctx=Load())), keyword(arg='metavar', value=Constant(value='dir')), keyword(arg='help', value=Constant(value='Base temporary directory for this test run. (Warning: this directory is removed if it exists.)'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate_basetemp', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='basetemp must not be empty, the current working directory or any parent directory of it')), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentTypeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='is_ancestor', args=arguments(posonlyargs=[], args=[arg(arg='base', annotation=Name(id='Path', ctx=Load())), arg(arg='query', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether query is an ancestor of base.')), If(test=Compare(left=Name(id='base', ctx=Load()), ops=[Eq()], comparators=[Name(id='query', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Compare(left=Name(id='query', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='base', ctx=Load()), attr='parents', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), If(test=Call(func=Name(id='is_ancestor', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='absolute', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentTypeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='is_ancestor', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentTypeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='wrap_session', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='doit', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Config', ctx=Load()), Constant(value='Session')], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Skeleton command line program.')), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='Session', ctx=Load()), attr='from_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='OK', ctx=Load())), Assign(targets=[Name(id='initstate', ctx=Store())], value=Constant(value=0)), Try(body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_do_configure', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='initstate', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_sessionstart', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load()))])), Assign(targets=[Name(id='initstate', ctx=Store())], value=Constant(value=2)), Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='doit', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='session', ctx=Load())], keywords=[]), Constant(value=0)]))], handlers=[ExceptHandler(type=Name(id='UsageError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='USAGE_ERROR', ctx=Load())), Raise()]), ExceptHandler(type=Name(id='Failed', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='TESTS_FAILED', ctx=Load()))]), ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Attribute(value=Name(id='exit', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='exitstatus', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='INTERRUPTED', ctx=Load()), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='exit', ctx=Load()), attr='Exception', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='returncode', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exitstatus', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='returncode', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='initstate', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='typename', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='msg', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_keyboard_interrupt', ctx=Load()), args=[], keywords=[keyword(arg='excinfo', value=Name(id='excinfo', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Name(id='exitstatus', ctx=Load()))]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='INTERNAL_ERROR', ctx=Load())), Assign(targets=[Name(id='excinfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='_pytest', ctx=Load()), attr='_code', ctx=Load()), attr='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='notify_exception', ctx=Load()), args=[Name(id='excinfo', ctx=Load()), Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='exit', ctx=Load()), attr='Exception', ctx=Load()), name='exc', body=[If(test=Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='returncode', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='exc', ctx=Load()), attr='returncode', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='SystemExit', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='mainloop: caught unexpected SystemExit!\n')], keywords=[]))], orelse=[])], finalbody=[])])], orelse=[], finalbody=[])], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='startpath', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='initstate', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_sessionfinish', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='exitstatus', value=Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='exit', ctx=Load()), attr='Exception', ctx=Load()), name='exc', body=[If(test=Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='returncode', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Store())], value=Attribute(value=Name(id='exc', ctx=Load()), attr='returncode', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_ensure_unconfigure', ctx=Load()), args=[], keywords=[]))]), Return(value=Attribute(value=Name(id='session', ctx=Load()), attr='exitstatus', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_cmdline_main', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='wrap_session', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='_main', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_main', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load())), arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Default command line protocol for initialization, session,\n    running tests and reporting.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_collection', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_runtestloop', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load()))])), If(test=Attribute(value=Name(id='session', ctx=Load()), attr='testsfailed', ctx=Load()), body=[Return(value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='TESTS_FAILED', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='session', ctx=Load()), attr='testscollected', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Name(id='ExitCode', ctx=Load()), attr='NO_TESTS_COLLECTED', ctx=Load()))], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='pytest_collection', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='perform_collect', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtestloop', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='session', ctx=Load()), attr='testsfailed', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='continue_on_collection_errors', ctx=Load()))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='Interrupted', ctx=Load()), args=[BinOp(left=Constant(value='%d error%s during collection'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='session', ctx=Load()), attr='testsfailed', ctx=Load()), IfExp(test=Compare(left=Attribute(value=Name(id='session', ctx=Load()), attr='testsfailed', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=Constant(value='s'), orelse=Constant(value=''))], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='collectonly', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='nextitem', ctx=Store())], value=IfExp(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load())], keywords=[])]), body=Subscript(value=Attribute(value=Name(id='session', ctx=Load()), attr='items', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), orelse=Constant(value=None))), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_runtest_protocol', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='item', ctx=Load())), keyword(arg='nextitem', value=Name(id='nextitem', ctx=Load()))])), If(test=Attribute(value=Name(id='session', ctx=Load()), attr='shouldfail', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='Failed', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='shouldfail', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='session', ctx=Load()), attr='shouldstop', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='Interrupted', ctx=Load()), args=[Attribute(value=Name(id='session', ctx=Load()), attr='shouldstop', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_in_venv', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Attempt to detect if ``path`` is the root of a Virtual Environment by\n    checking for the existence of the appropriate activate script.')), Assign(targets=[Name(id='bindir', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='joinpath', ctx=Load()), args=[IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='win')], keywords=[]), body=Constant(value='Scripts'), orelse=Constant(value='bin'))], keywords=[])), Try(body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='bindir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='activates', ctx=Store())], value=Tuple(elts=[Constant(value='activate'), Constant(value='activate.csh'), Constant(value='activate.fish'), Constant(value='Activate'), Constant(value='Activate.bat'), Constant(value='Activate.ps1')], ctx=Load())), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Attribute(value=Name(id='fname', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='activates', ctx=Load())]), generators=[comprehension(target=Name(id='fname', ctx=Store()), iter=Call(func=Attribute(value=Name(id='bindir', ctx=Load()), attr='iterdir', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pytest_ignore_collect', args=arguments(posonlyargs=[], args=[arg(arg='collection_path', annotation=Name(id='Path', ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ignore_paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_getconftest_pathlist', ctx=Load()), args=[Constant(value='collect_ignore')], keywords=[keyword(arg='path', value=Attribute(value=Name(id='collection_path', ctx=Load()), attr='parent', ctx=Load())), keyword(arg='rootpath', value=Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load()))])), Assign(targets=[Name(id='ignore_paths', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='ignore_paths', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='excludeopt', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), If(test=Name(id='excludeopt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ignore_paths', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='excludeopt', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='collection_path', ctx=Load()), ops=[In()], comparators=[Name(id='ignore_paths', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='ignore_globs', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_getconftest_pathlist', ctx=Load()), args=[Constant(value='collect_ignore_glob')], keywords=[keyword(arg='path', value=Attribute(value=Name(id='collection_path', ctx=Load()), attr='parent', ctx=Load())), keyword(arg='rootpath', value=Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load()))])), Assign(targets=[Name(id='ignore_globs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='ignore_globs', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='excludeglobopt', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='ignore_glob')], keywords=[])), If(test=Name(id='excludeglobopt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ignore_globs', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='excludeglobopt', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='fnmatch', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='collection_path', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='glob', ctx=Store()), iter=Name(id='ignore_globs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='allow_in_venv', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='collect_in_virtualenv')], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='allow_in_venv', ctx=Load())), Call(func=Name(id='_in_venv', ctx=Load()), args=[Name(id='collection_path', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='collection_path', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='norecursepatterns', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='norecursedirs')], keywords=[])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='fnmatch_ex', ctx=Load()), args=[Name(id='pat', ctx=Load()), Name(id='collection_path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='pat', ctx=Store()), iter=Name(id='norecursepatterns', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_collection_modifyitems', args=arguments(posonlyargs=[], args=[arg(arg='items', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='deselect_prefixes', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='deselect')], keywords=[]), List(elts=[], ctx=Load())])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='deselect_prefixes', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='deselected', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='colitem', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='colitem', ctx=Load()), attr='nodeid', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='deselect_prefixes', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='deselected', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='colitem', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='remaining', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='colitem', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='deselected', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_deselected', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Name(id='deselected', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='remaining', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), ClassDef(name='FSHookProxy', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pm', annotation=Name(id='PytestPluginManager', ctx=Load())), arg(arg='remove_mods')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pm', ctx=Store())], value=Name(id='pm', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='remove_mods', ctx=Store())], value=Name(id='remove_mods', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pm', ctx=Load()), attr='subset_hook_caller', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='remove_plugins', value=Attribute(value=Name(id='self', ctx=Load()), attr='remove_mods', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='x', ctx=Load())), Return(value=Name(id='x', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Interrupted', bases=[Name(id='KeyboardInterrupt', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Signals that the test run was interrupted.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='builtins'))], decorator_list=[]), ClassDef(name='Failed', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Signals a stop as failed test run.'))], decorator_list=[]), ClassDef(name='_bestrelpath_cache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='path')], ctx=Load())), AnnAssign(target=Name(id='path', ctx=Store()), annotation=Name(id='Path', ctx=Load()), simple=1), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='bestrelpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='path', ctx=Load()), ctx=Store())], value=Name(id='r', ctx=Load())), Return(value=Name(id='r', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), ClassDef(name='Session', bases=[Attribute(value=Name(id='nodes', ctx=Load()), attr='FSCollector', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The root of the collection tree.\n\n    ``Session`` collects the initial paths given as arguments to pytest.\n    ')), Assign(targets=[Name(id='Interrupted', ctx=Store())], value=Name(id='Interrupted', ctx=Load())), Assign(targets=[Name(id='Failed', ctx=Store())], value=Name(id='Failed', ctx=Load())), AnnAssign(target=Name(id='_setupstate', ctx=Store()), annotation=Name(id='SetupState', ctx=Load()), simple=1), AnnAssign(target=Name(id='_fixturemanager', ctx=Store()), annotation=Name(id='FixtureManager', ctx=Load()), simple=1), AnnAssign(target=Name(id='exitstatus', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load())), keyword(arg='fspath', value=Constant(value=None)), keyword(arg='parent', value=Constant(value=None)), keyword(arg='config', value=Name(id='config', ctx=Load())), keyword(arg='session', value=Name(id='self', ctx=Load())), keyword(arg='nodeid', value=Constant(value=''))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='testsfailed', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='testscollected', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='shouldstop', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=False), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='shouldfail', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=False), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='collection')], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_initialpaths', ctx=Store()), annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bestrelpathcache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='_bestrelpath_cache', ctx=Load()), args=[Attribute(value=Name(id='config', ctx=Load()), attr='rootpath', ctx=Load())], keywords=[]), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='session'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_config', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='session', ctx=Store()), annotation=Name(id='Session', ctx=Load()), value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_create', ctx=Load()), args=[], keywords=[keyword(arg='config', value=Name(id='config', ctx=Load()))]), simple=1), Return(value=Name(id='session', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Session')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<%s %s exitstatus=%r testsfailed=%d testscollected=%d>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='exitstatus'), Constant(value='<UNSET>')], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='testsfailed', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='testscollected', ctx=Load())], ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='startpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path from which pytest was invoked.\n\n        .. versionadded:: 7.0.0\n        ')), Return(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='_node_location_to_relpath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node_path', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bestrelpathcache', ctx=Load()), slice=Name(id='node_path', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pytest_collectstart', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='shouldfail', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Failed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='shouldfail', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='shouldstop', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Interrupted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='shouldstop', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TestReport', ctx=Load()), Name(id='CollectReport', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]))]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='testsfailed', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='maxfail', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='maxfail')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='maxfail', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='testsfailed', ctx=Load()), ops=[GtE()], comparators=[Name(id='maxfail', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shouldfail', ctx=Store())], value=BinOp(left=Constant(value='stopping after %d failures'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='testsfailed', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True))])], returns=Constant(value=None)), Assign(targets=[Name(id='pytest_collectreport', ctx=Store())], value=Name(id='pytest_runtest_logreport', ctx=Load())), FunctionDef(name='isinitpath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path_', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='Path', ctx=Load())], keywords=[]), body=Name(id='path', ctx=Load()), orelse=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))), Return(value=Compare(left=Name(id='path_', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_initialpaths', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='gethookproxy', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fspath', annotation=Constant(value='os.PathLike[str]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fspath', ctx=Load()), Name(id='Path', ctx=Load())], keywords=[]), body=Name(id='fspath', ctx=Load()), orelse=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='pm', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load())), Assign(targets=[Name(id='my_conftestmodules', ctx=Store())], value=Call(func=Attribute(value=Name(id='pm', ctx=Load()), attr='_getconftestmodules', ctx=Load()), args=[Name(id='path', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='importmode')], keywords=[])], keywords=[keyword(arg='rootpath', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='rootpath', ctx=Load()))])), Assign(targets=[Name(id='remove_mods', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pm', ctx=Load()), attr='_conftest_plugins', ctx=Load()), attr='difference', ctx=Load()), args=[Name(id='my_conftestmodules', ctx=Load())], keywords=[])), If(test=Name(id='remove_mods', ctx=Load()), body=[ImportFrom(module='config.compat', names=[alias(name='PathAwareHookProxy')], level=1), Assign(targets=[Name(id='proxy', ctx=Store())], value=Call(func=Name(id='PathAwareHookProxy', ctx=Load()), args=[Call(func=Name(id='FSHookProxy', ctx=Load()), args=[Name(id='pm', ctx=Load()), Name(id='remove_mods', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='proxy', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load()))]), Return(value=Name(id='proxy', ctx=Load()))], decorator_list=[]), FunctionDef(name='_recurse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='direntry', annotation=Constant(value='os.DirEntry[str]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='direntry', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__pycache__')]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='fspath', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='direntry', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ihook', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gethookproxy', ctx=Load()), args=[Attribute(value=Name(id='fspath', ctx=Load()), attr='parent', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_ignore_collect', ctx=Load()), args=[], keywords=[keyword(arg='collection_path', value=Name(id='fspath', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_collectfile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fspath', annotation=Name(id='Path', ctx=Load())), arg(arg='handle_dupes', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assert(test=Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), msg=Call(func=Attribute(value=Constant(value='{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})'), attr='format', ctx=Load()), args=[Name(id='fspath', ctx=Load()), Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='is_symlink', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='ihook', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gethookproxy', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='isinitpath', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), body=[If(test=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_ignore_collect', ctx=Load()), args=[], keywords=[keyword(arg='collection_path', value=Name(id='fspath', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()))]), body=[Return(value=Tuple(elts=[], ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='handle_dupes', ctx=Load()), body=[Assign(targets=[Name(id='keepduplicates', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='keepduplicates')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='keepduplicates', ctx=Load())), body=[Assign(targets=[Name(id='duplicate_paths', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='_duplicatepaths', ctx=Load())), If(test=Compare(left=Name(id='fspath', ctx=Load()), ops=[In()], comparators=[Name(id='duplicate_paths', ctx=Load())]), body=[Return(value=Tuple(elts=[], ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='duplicate_paths', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_collect_file', ctx=Load()), args=[], keywords=[keyword(arg='file_path', value=Name(id='fspath', ctx=Load())), keyword(arg='parent', value=Name(id='self', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()), ctx=Load())), FunctionDef(name='perform_collect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='genitems', annotation=Constant(value='Literal[True]'))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=Ellipsis), Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load())), FunctionDef(name='perform_collect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='genitems', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=Ellipsis), Constant(value=Ellipsis)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='perform_collect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='genitems', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Perform the collection phase for this session.\n\n        This is called by the default :hook:`pytest_collection` hook\n        implementation; see the documentation of this hook for more details.\n        For testing purposes, it may also be called directly on a fresh\n        ``Session``.\n\n        This function normally recursively expands any collectors collected\n        from the session to their items, and only items are returned. For\n        testing purposes, this may be suppressed by passing ``genitems=False``,\n        in which case the return value contains these collectors unexpanded,\n        and ``session.items`` is empty.\n        ')), If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='args', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='perform_collect'), Name(id='self', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Add(), value=Constant(value=1)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_notfound', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='hook', ctx=Load())), AnnAssign(target=Name(id='items', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), simple=1), Try(body=[AnnAssign(target=Name(id='initialpaths', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='fspath', ctx=Store()), Name(id='parts', ctx=Store())], ctx=Store())], value=Call(func=Name(id='resolve_collection_argument', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='dir', ctx=Load()), Name(id='arg', ctx=Load())], keywords=[keyword(arg='as_pypath', value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='pyargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_parts', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='fspath', ctx=Load()), Name(id='parts', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='initialpaths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_initialpaths', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='initialpaths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Name(id='collect_one_node', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_collectreport', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='rep', ctx=Load()))])), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Sub(), value=Constant(value=1)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_notfound', ctx=Load()), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='arg', ctx=Store()), Name(id='collectors', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_notfound', ctx=Load()), body=[If(test=Name(id='collectors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='not found: '), FormattedValue(value=Name(id='arg', ctx=Load()), conversion=-1), Constant(value='\n(no name '), FormattedValue(value=Name(id='arg', ctx=Load()), conversion=114), Constant(value=' in any of '), FormattedValue(value=Name(id='collectors', ctx=Load()), conversion=114), Constant(value=')')])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='found no collectors for '), FormattedValue(value=Name(id='arg', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[]), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Starred(value=Name(id='errors', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='genitems', ctx=Load())), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Attribute(value=Name(id='rep', ctx=Load()), attr='result', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), body=[For(target=Name(id='node', ctx=Store()), iter=Attribute(value=Name(id='rep', ctx=Load()), attr='result', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='genitems', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='check_pending', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='pytest_collection_modifyitems', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='self', ctx=Load())), keyword(arg='config', value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load())), keyword(arg='items', value=Name(id='items', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='pytest_collection_finish', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='self', ctx=Load()))]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='testscollected', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Return(value=Name(id='items', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='collect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='_pytest.python', names=[alias(name='Package')], level=0), AnnAssign(target=Name(id='node_cache1', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='node_cache2', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()), ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='matchnodes_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='CollectReport', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='pkg_roots', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Name(id='Package', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='argpath', ctx=Store()), Name(id='names', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_initial_parts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='processing argument'), Tuple(elts=[Name(id='argpath', ctx=Load()), Name(id='names', ctx=Load())], ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='doctestmodules'), Constant(value=False)], keywords=[])), body=[Assign(targets=[Name(id='pm', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='pluginmanager', ctx=Load())), For(target=Name(id='parent', ctx=Store()), iter=Tuple(elts=[Name(id='argpath', ctx=Load()), Starred(value=Attribute(value=Name(id='argpath', ctx=Load()), attr='parents', ctx=Load()), ctx=Load())], ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='pm', ctx=Load()), attr='_is_in_confcutdir', ctx=Load()), args=[Name(id='argpath', ctx=Load())], keywords=[])), body=[Break()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='pkginit', ctx=Store())], value=BinOp(left=Name(id='parent', ctx=Load()), op=Div(), right=Constant(value='__init__.py'))), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='pkginit', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='pkginit', ctx=Load()), ops=[NotIn()], comparators=[Name(id='node_cache1', ctx=Load())])]), body=[Assign(targets=[Name(id='col', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collectfile', ctx=Load()), args=[Name(id='pkginit', ctx=Load())], keywords=[keyword(arg='handle_dupes', value=Constant(value=False))])), If(test=Name(id='col', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='Package', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='pkg_roots', ctx=Load()), slice=Name(id='parent', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='node_cache1', ctx=Load()), slice=Attribute(value=Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='path', ctx=Load()), ctx=Store())], value=List(elts=[Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='argpath', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Assert(test=UnaryOp(op=Not(), operand=Name(id='names', ctx=Load())), msg=JoinedStr(values=[Constant(value='invalid arg '), FormattedValue(value=Tuple(elts=[Name(id='argpath', ctx=Load()), Name(id='names', ctx=Load())], ctx=Load()), conversion=114)])), AnnAssign(target=Name(id='seen_dirs', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='direntry', ctx=Store()), iter=Call(func=Name(id='visit', ctx=Load()), args=[Name(id='argpath', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_recurse', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='direntry', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='direntry', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dirpath', ctx=Store())], value=Attribute(value=Name(id='path', ctx=Load()), attr='parent', ctx=Load())), If(test=Compare(left=Name(id='dirpath', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen_dirs', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen_dirs', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dirpath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pkginit', ctx=Store())], value=BinOp(left=Name(id='dirpath', ctx=Load()), op=Div(), right=Constant(value='__init__.py'))), If(test=Call(func=Attribute(value=Name(id='pkginit', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collectfile', ctx=Load()), args=[Name(id='pkginit', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='x', ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='Package', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='pkg_roots', ctx=Load()), slice=Name(id='dirpath', ctx=Load()), ctx=Store())], value=Name(id='x', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='dirpath', ctx=Load()), ops=[In()], comparators=[Name(id='pkg_roots', ctx=Load())]), body=[Continue()], orelse=[]), For(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collectfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='key2', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='key2', ctx=Load()), ops=[In()], comparators=[Name(id='node_cache2', ctx=Load())]), body=[Expr(value=Yield(value=Subscript(value=Name(id='node_cache2', ctx=Load()), slice=Name(id='key2', ctx=Load()), ctx=Load())))], orelse=[Assign(targets=[Subscript(value=Name(id='node_cache2', ctx=Load()), slice=Name(id='key2', ctx=Load()), ctx=Store())], value=Name(id='x', ctx=Load())), Expr(value=Yield(value=Name(id='x', ctx=Load())))])], orelse=[])], orelse=[])], orelse=[Assert(test=Call(func=Attribute(value=Name(id='argpath', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='argpath', ctx=Load()), ops=[In()], comparators=[Name(id='node_cache1', ctx=Load())]), body=[Assign(targets=[Name(id='col', ctx=Store())], value=Subscript(value=Name(id='node_cache1', ctx=Load()), slice=Name(id='argpath', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='collect_root', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg_roots', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='argpath', ctx=Load()), attr='parent', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='col', ctx=Store())], value=Call(func=Attribute(value=Name(id='collect_root', ctx=Load()), attr='_collectfile', ctx=Load()), args=[Name(id='argpath', ctx=Load())], keywords=[keyword(arg='handle_dupes', value=Constant(value=False))])), If(test=Name(id='col', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='node_cache1', ctx=Load()), slice=Name(id='argpath', ctx=Load()), ctx=Store())], value=Name(id='col', ctx=Load()))], orelse=[])]), Assign(targets=[Name(id='matching', ctx=Store())], value=List(elts=[], ctx=Load())), AnnAssign(target=Name(id='work', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Tuple(elts=[Name(id='col', ctx=Load()), Name(id='names', ctx=Load())], ctx=Load())], ctx=Load()), simple=1), While(test=Name(id='work', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='matchnodes'), Name(id='col', ctx=Load()), Name(id='names', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='matchnodes', ctx=Store()), Name(id='matchnames', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='work', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), For(target=Name(id='node', ctx=Store()), iter=Name(id='matchnodes', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='matchnames', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='matching', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), Attribute(value=Name(id='node', ctx=Load()), attr='nodeid', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='matchnodes_cache', ctx=Load())]), body=[Assign(targets=[Name(id='rep', ctx=Store())], value=Subscript(value=Name(id='matchnodes_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Name(id='collect_one_node', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='matchnodes_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='rep', ctx=Load()))]), If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), body=[Assign(targets=[Name(id='submatchnodes', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='r', ctx=Store()), iter=Attribute(value=Name(id='rep', ctx=Load()), attr='result', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='matchnames', ctx=Load()), slice=Constant(value=0), ctx=Load())]), Compare(left=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='[')], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='matchnames', ctx=Load()), slice=Constant(value=0), ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='submatchnodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='submatchnodes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='work', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='submatchnodes', ctx=Load()), Subscript(value=Name(id='matchnames', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_collectreport', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='rep', ctx=Load()))]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='matchnodes finished -> '), Call(func=Name(id='len', ctx=Load()), args=[Name(id='matching', ctx=Load())], keywords=[]), Constant(value='nodes')], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='matching', ctx=Load())), body=[Assign(targets=[Name(id='report_arg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='::'), attr='join', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='argpath', ctx=Load())], keywords=[]), Starred(value=Name(id='names', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_notfound', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='report_arg', ctx=Load()), Name(id='col', ctx=Load())], ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='argpath', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__init__.py')]), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='matching', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='Package', ctx=Load())], keywords=[])]), body=[Try(body=[Expr(value=Yield(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='matching', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='collect', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Continue()], orelse=[]), Expr(value=YieldFrom(value=Name(id='matching', ctx=Load())))]), AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='indent', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='genitems', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), args=[Constant(value='genitems'), Name(id='node', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_itemcollected', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='node', ctx=Load()))])), Expr(value=Yield(value=Name(id='node', ctx=Load())))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Collector', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Name(id='collect_one_node', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), body=[For(target=Name(id='subnode', ctx=Store()), iter=Attribute(value=Name(id='rep', ctx=Load()), attr='result', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='genitems', ctx=Load()), args=[Name(id='subnode', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_collectreport', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='rep', ctx=Load()))]))])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Item', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), FunctionDef(name='search_pypath', args=arguments(posonlyargs=[], args=[arg(arg='module_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Search sys.path for the given a dotted module name, and return its file system path.')), Try(body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='find_spec', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ImportError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='module_name', ctx=Load()))])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='spec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[Eq()], comparators=[Constant(value='namespace')])]), body=[Return(value=Name(id='module_name', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load())], keywords=[]))], orelse=[Return(value=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()))])])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='resolve_collection_argument', args=arguments(posonlyargs=[], args=[arg(arg='invocation_path', annotation=Name(id='Path', ctx=Load())), arg(arg='arg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='as_pypath', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Parse path arguments optionally containing selection parts and return (fspath, names).\n\n    Command-line arguments can point to files and/or directories, and optionally contain\n    parts for specific tests selection, for example:\n\n        "pkg/tests/test_foo.py::TestClass::test_foo"\n\n    This function ensures the path exists, and returns a tuple:\n\n        (Path("/full/path/to/pkg/tests/test_foo.py"), ["TestClass", "test_foo"])\n\n    When as_pypath is True, expects that the command-line argument actually contains\n    module paths instead of file-system paths:\n\n        "pkg.tests.test_foo::TestClass::test_foo"\n\n    In which case we search sys.path for a matching module, and then return the *path* to the\n    found module.\n\n    If the path doesn\'t exist, raise UsageError.\n    If the path is a directory and selection parts are present, raise UsageError.\n    ')), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='squacket', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), attr='partition', ctx=Load()), args=[Constant(value='[')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='strpath', ctx=Store()), Starred(value=Name(id='parts', ctx=Store()), ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='base', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[])), If(test=Name(id='parts', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), conversion=-1), FormattedValue(value=Name(id='squacket', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='rest', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Name(id='as_pypath', ctx=Load()), body=[Assign(targets=[Name(id='strpath', ctx=Store())], value=Call(func=Name(id='search_pypath', ctx=Load()), args=[Name(id='strpath', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fspath', ctx=Store())], value=BinOp(left=Name(id='invocation_path', ctx=Load()), op=Div(), right=Name(id='strpath', ctx=Load()))), Assign(targets=[Name(id='fspath', ctx=Store())], value=Call(func=Name(id='absolutepath', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='safe_exists', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=IfExp(test=Name(id='as_pypath', ctx=Load()), body=Constant(value='module or package not found: {arg} (missing __init__.py?)'), orelse=Constant(value='file or directory not found: {arg}'))), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='arg', value=Name(id='arg', ctx=Load()))])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='parts', ctx=Load()), Call(func=Attribute(value=Name(id='fspath', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=IfExp(test=Name(id='as_pypath', ctx=Load()), body=Constant(value='package argument cannot contain :: selection parts: {arg}'), orelse=Constant(value='directory argument cannot contain :: selection parts: {arg}'))), Raise(exc=Call(func=Name(id='UsageError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='arg', value=Name(id='arg', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='fspath', ctx=Load()), Name(id='parts', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])