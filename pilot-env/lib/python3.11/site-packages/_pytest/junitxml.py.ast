Module(body=[Expr(value=Constant(value='Report test results in JUnit-XML format, for use with Jenkins and build\nintegration servers.\n\nBased on initial code from Ross Lawley.\n\nOutput conforms to\nhttps://github.com/jenkinsci/xunit-plugin/blob/master/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n')), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='re')]), Import(names=[alias(name='xml.etree.ElementTree', asname='ET')]), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Match')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest', names=[alias(name='nodes')], level=0), ImportFrom(module='_pytest', names=[alias(name='timing')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionRepr')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprFileLocation')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='filename_arg')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), Assign(targets=[Name(id='xml_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Constant(value='LogXML'), ctx=Load()), args=[], keywords=[])), FunctionDef(name='bin_xml_escape', args=arguments(posonlyargs=[], args=[arg(arg='arg', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Visually escape invalid XML characters.\n\n    For example, transforms\n        'hello\\aworld\\b'\n    into\n        'hello#x07world#x08'\n    Note that the #xABs are *not* XML escapes - missing the ampersand &#xAB.\n    The idea is to escape visually for the user rather than for XML itself.\n    ")), FunctionDef(name='repl', args=arguments(posonlyargs=[], args=[arg(arg='matchobj', annotation=Subscript(value=Name(id='Match', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)]), body=[Return(value=BinOp(left=Constant(value='#x%02X'), op=Mod(), right=Name(id='i', ctx=Load())))], orelse=[Return(value=BinOp(left=Constant(value='#x%04X'), op=Mod(), right=Name(id='i', ctx=Load())))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='illegal_xml_re', ctx=Store())], value=Constant(value='[^\t\n\r -~\x80-\ud7ff\ue000-�က0-ჿFF]')), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='illegal_xml_re', ctx=Load()), Name(id='repl', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='merge_family', args=arguments(posonlyargs=[], args=[arg(arg='left'), arg(arg='right')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='kl', ctx=Store()), Name(id='vl', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='left', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id='kr', ctx=Store()), Name(id='vr', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='right', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='vl', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='vl', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='kl', ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='vl', ctx=Load()), op=Add(), right=Name(id='vr', ctx=Load())))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='left', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='families', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='_base'), ctx=Store())], value=Dict(keys=[Constant(value='testcase')], values=[List(elts=[Constant(value='classname'), Constant(value='name')], ctx=Load())])), Assign(targets=[Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='_base_legacy'), ctx=Store())], value=Dict(keys=[Constant(value='testcase')], values=[List(elts=[Constant(value='file'), Constant(value='line'), Constant(value='url')], ctx=Load())])), Assign(targets=[Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='xunit1'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='_base'), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='merge_family', ctx=Load()), args=[Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='xunit1'), ctx=Load()), Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='_base_legacy'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='xunit2'), ctx=Store())], value=Subscript(value=Name(id='families', ctx=Load()), slice=Constant(value='_base'), ctx=Load())), ClassDef(name='_NodeReporter', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='xml', annotation=Constant(value='LogXML'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Store())], value=Name(id='nodeid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Store())], value=Name(id='xml', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='add_stats', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='add_stats', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='family', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='duration', ctx=Store())], value=Constant(value=0.0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='properties', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='add_stats', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_property', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='properties', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_attribute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load()), slice=Call(func=Name(id='str', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='make_properties_node', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a Junit node containing custom properties, if any.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='properties', ctx=Load()), body=[Assign(targets=[Name(id='properties', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='properties')], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='properties', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='properties', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='property')], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Name(id='properties', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), ctx=Load())), FunctionDef(name='record_testreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='testreport', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Name(id='mangle_test_address', ctx=Load()), args=[Attribute(value=Name(id='testreport', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='existing_attrs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load())), Assign(targets=[Name(id='classnames', ctx=Store())], value=Subscript(value=Name(id='names', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='prefix', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='classnames', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='attrs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='classname'), Constant(value='name'), Constant(value='file')], values=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='classnames', ctx=Load())], keywords=[]), Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Subscript(value=Name(id='names', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), Subscript(value=Attribute(value=Name(id='testreport', ctx=Load()), attr='location', ctx=Load()), slice=Constant(value=0), ctx=Load())]), simple=1), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='testreport', ctx=Load()), attr='location', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='line'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='testreport', ctx=Load()), attr='location', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='testreport', ctx=Load()), Constant(value='url')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='url'), ctx=Store())], value=Attribute(value=Name(id='testreport', ctx=Load()), attr='url', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Store())], value=Name(id='attrs', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='existing_attrs', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Constant(value='xunit1')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='temp_attrs', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Subscript(value=Subscript(value=Name(id='families', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Load()), ctx=Load()), slice=Constant(value='testcase'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='temp_attrs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Store())], value=Name(id='temp_attrs', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='to_xml', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testcase', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='testcase'), Attribute(value=Name(id='self', ctx=Load()), attr='attrs', ctx=Load())], keywords=[keyword(arg='time', value=BinOp(left=Constant(value='%.3f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='duration', ctx=Load())))])), Assign(targets=[Name(id='properties', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_properties_node', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='properties', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='testcase', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='properties', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='testcase', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodes', ctx=Load())], keywords=[])), Return(value=Name(id='testcase', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load())), FunctionDef(name='_add_simple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tag', annotation=Name(id='str', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='data', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Name(id='tag', ctx=Load())], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_captured_output', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='log_passing_tests', ctx=Load())), Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='content_out', ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='capstdout', ctx=Load())), Assign(targets=[Name(id='content_log', ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='caplog', ctx=Load())), Assign(targets=[Name(id='content_err', ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='capstderr', ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='logging', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='content_all', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='logging', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='log'), Constant(value='all')], ctx=Load())]), body=[Assign(targets=[Name(id='content_all', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_content', ctx=Load()), args=[Name(id='content_log', ctx=Load()), Constant(value=' Captured Log ')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='logging', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='system-out'), Constant(value='out-err'), Constant(value='all')], ctx=Load())]), body=[AugAssign(target=Name(id='content_all', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_content', ctx=Load()), args=[Name(id='content_out', ctx=Load()), Constant(value=' Captured Out ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_content', ctx=Load()), args=[Name(id='report', ctx=Load()), Name(id='content_all', ctx=Load()), Constant(value='system-out')], keywords=[])), Assign(targets=[Name(id='content_all', ctx=Store())], value=Constant(value=''))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='xml', ctx=Load()), attr='logging', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='system-err'), Constant(value='out-err'), Constant(value='all')], ctx=Load())]), body=[AugAssign(target=Name(id='content_all', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_content', ctx=Load()), args=[Name(id='content_err', ctx=Load()), Constant(value=' Captured Err ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_content', ctx=Load()), args=[Name(id='report', ctx=Load()), Name(id='content_all', ctx=Load()), Constant(value='system-err')], keywords=[])), Assign(targets=[Name(id='content_all', ctx=Store())], value=Constant(value=''))], orelse=[]), If(test=Name(id='content_all', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_content', ctx=Load()), args=[Name(id='report', ctx=Load()), Name(id='content_all', ctx=Load()), Constant(value='system-out')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='str', ctx=Load())), arg(arg='header', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='center', ctx=Load()), args=[Constant(value=80), Constant(value='-')], keywords=[]), Name(id='content', ctx=Load()), Constant(value='')], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_write_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load())), arg(arg='content', annotation=Name(id='str', ctx=Load())), arg(arg='jheader', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tag', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Name(id='jheader', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tag', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tag', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_pass', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_stats', ctx=Load()), args=[Constant(value='passed')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_failure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='skipped'), Constant(value='xfail-marked test passes unexpectedly')], keywords=[]))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), AnnAssign(target=Name(id='reprcrash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ReprFileLocation', ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Constant(value='reprcrash'), Constant(value=None)], keywords=[]), simple=1), If(test=Compare(left=Name(id='reprcrash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Attribute(value=Name(id='reprcrash', ctx=Load()), attr='message', ctx=Load()))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='failure'), Name(id='message', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_collect_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='error'), Constant(value='collection failure'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_collect_skipped', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='skipped'), Constant(value='collection skipped'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), AnnAssign(target=Name(id='reprcrash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ReprFileLocation', ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Constant(value='reprcrash'), Constant(value=None)], keywords=[]), simple=1), If(test=Compare(left=Name(id='reprcrash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Attribute(value=Name(id='reprcrash', ctx=Load()), attr='message', ctx=Load()))], orelse=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='teardown')]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='failed on teardown with "'), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1), Constant(value='"')]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='failed on setup with "'), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1), Constant(value='"')]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='error'), Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_skipped', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]), body=[Assign(targets=[Name(id='xfailreason', ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='wasxfail', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='xfailreason', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='reason: ')], keywords=[]), body=[Assign(targets=[Name(id='xfailreason', ctx=Store())], value=Subscript(value=Name(id='xfailreason', ctx=Load()), slice=Slice(lower=Constant(value=8)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='xfailreason', ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='xfailreason', ctx=Load())], keywords=[])), Assign(targets=[Name(id='skipped', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='skipped')], keywords=[keyword(arg='type', value=Constant(value='pytest.xfail')), keyword(arg='message', value=Name(id='xfailreason', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='skipped', ctx=Load())], keywords=[]))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='skipreason', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='skipreason', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Skipped: ')], keywords=[]), body=[Assign(targets=[Name(id='skipreason', ctx=Store())], value=Subscript(value=Name(id='skipreason', ctx=Load()), slice=Slice(lower=Constant(value=9)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='details', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value=':'), FormattedValue(value=Name(id='lineno', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='skipreason', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='skipped', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='skipped')], keywords=[keyword(arg='type', value=Constant(value='pytest.skip')), keyword(arg='message', value=Name(id='skipreason', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='skipped', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='details', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='skipped', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_captured_output', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='finalize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_xml', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='to_xml', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='data', ctx=Load())))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_warn_incompatibility_with_xunit2', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load())), arg(arg='fixture_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Emit a PytestWarning about the given fixture being incompatible with newer xunit revisions.')), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestWarning')], level=0), Assign(targets=[Name(id='xml', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xml_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='xml', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='xml', ctx=Load()), attr='family', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='xunit1'), Constant(value='legacy')], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='PytestWarning', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="{fixture_name} is incompatible with junit_family '{family}' (use 'legacy' or 'xunit1')"), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='fixture_name', value=Name(id='fixture_name', ctx=Load())), keyword(arg='family', value=Attribute(value=Name(id='xml', ctx=Load()), attr='family', ctx=Load()))])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='record_property', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add extra properties to the calling test.\n\n    User properties become part of the test report and are available to the\n    configured reporters, like JUnit XML.\n\n    The fixture is callable with ``name, value``. The value is automatically\n    XML-encoded.\n\n    Example::\n\n        def test_function(record_property):\n            record_property("example_key", 1)\n    ')), Expr(value=Call(func=Name(id='_warn_incompatibility_with_xunit2', ctx=Load()), args=[Name(id='request', ctx=Load()), Constant(value='record_property')], keywords=[])), FunctionDef(name='append_property', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='user_properties', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Return(value=Name(id='append_property', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='record_xml_attribute', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add extra xml attributes to the tag for the calling test.\n\n    The fixture is callable with ``name, value``. The value is\n    automatically XML-encoded.\n    ')), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestExperimentalApiWarning')], level=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Name(id='PytestExperimentalApiWarning', ctx=Load()), args=[Constant(value='record_xml_attribute is an experimental feature')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_warn_incompatibility_with_xunit2', ctx=Load()), args=[Name(id='request', ctx=Load()), Constant(value='record_xml_attribute')], keywords=[])), FunctionDef(name='add_attr_noop', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='attr_func', ctx=Store())], value=Name(id='add_attr_noop', ctx=Load())), Assign(targets=[Name(id='xml', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xml_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='xml', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='node_reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='xml', ctx=Load()), attr='node_reporter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='attr_func', ctx=Store())], value=Attribute(value=Name(id='node_reporter', ctx=Load()), attr='add_attribute', ctx=Load()))], orelse=[]), Return(value=Name(id='attr_func', ctx=Load()))], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_check_record_param_type', args=arguments(posonlyargs=[], args=[arg(arg='param', annotation=Name(id='str', ctx=Load())), arg(arg='v', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Used by record_testsuite_property to check that the given parameter name is of the proper\n    type.')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='{param} parameter needs to be a string, but {g} given')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='param', value=Name(id='param', ctx=Load())), keyword(arg='g', value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='record_testsuite_property', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Record a new ``<property>`` tag as child of the root ``<testsuite>``.\n\n    This is suitable to writing global information regarding the entire test\n    suite, and is compatible with ``xunit2`` JUnit family.\n\n    This is a ``session``-scoped fixture which is called with ``(name, value)``. Example:\n\n    .. code-block:: python\n\n        def test_foo(record_testsuite_property):\n            record_testsuite_property("ARCH", "PPC")\n            record_testsuite_property("STORAGE_TYPE", "CEPH")\n\n    :param name:\n        The property name.\n    :param value:\n        The property value. Will be converted to a string.\n\n    .. warning::\n\n        Currently this fixture **does not work** with the\n        `pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__ plugin. See\n        :issue:`7767` for details.\n    ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), FunctionDef(name='record_func', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='No-op function in case --junitxml was not passed in the command-line.')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='_check_record_param_type', ctx=Load()), args=[Constant(value='name'), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='xml', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xml_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='xml', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='record_func', ctx=Store())], value=Attribute(value=Name(id='xml', ctx=Load()), attr='add_global_property', ctx=Load()))], orelse=[]), Return(value=Name(id='record_func', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Constant(value='session'))])], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='terminal reporting')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--junitxml'), Constant(value='--junit-xml')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='xmlpath')), keyword(arg='metavar', value=Constant(value='path')), keyword(arg='type', value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='filename_arg', ctx=Load())], keywords=[keyword(arg='optname', value=Constant(value='--junitxml'))])), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Create junit-xml style report file at given path'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--junitprefix'), Constant(value='--junit-prefix')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='metavar', value=Constant(value='str')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Prepend prefix to classnames in junit-xml output'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='junit_suite_name'), Constant(value='Test suite name for JUnit report')], keywords=[keyword(arg='default', value=Constant(value='pytest'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='junit_logging'), Constant(value='Write captured log messages to JUnit report: one of no|log|system-out|system-err|out-err|all')], keywords=[keyword(arg='default', value=Constant(value='no'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='junit_log_passing_tests'), Constant(value='Capture log information for passing tests to JUnit report: ')], keywords=[keyword(arg='type', value=Constant(value='bool')), keyword(arg='default', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='junit_duration_report'), Constant(value='Duration time to report: one of total|call')], keywords=[keyword(arg='default', value=Constant(value='total'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='junit_family'), Constant(value='Emit XML for schema: one of legacy|xunit1|xunit2')], keywords=[keyword(arg='default', value=Constant(value='xunit2'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xmlpath', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='xmlpath', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='xmlpath', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='workerinput')], keywords=[]))]), body=[Assign(targets=[Name(id='junit_family', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='junit_family')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xml_key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='LogXML', ctx=Load()), args=[Name(id='xmlpath', ctx=Load()), Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='junitprefix', ctx=Load()), Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='junit_suite_name')], keywords=[]), Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='junit_logging')], keywords=[]), Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='junit_duration_report')], keywords=[]), Name(id='junit_family', ctx=Load()), Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='junit_log_passing_tests')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='register', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xml_key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_unconfigure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xml', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='xml_key', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='xml', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='config', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='xml_key', ctx=Load()), ctx=Del())]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='unregister', ctx=Load()), args=[Name(id='xml', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='mangle_test_address', args=arguments(posonlyargs=[], args=[arg(arg='address', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='possible_open_bracket', ctx=Store()), Name(id='params', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='address', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='[')], keywords=[])), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[])), Assign(targets=[Subscript(value=Name(id='names', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='names', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='nodes', ctx=Load()), attr='SEP', ctx=Load()), Constant(value='.')], keywords=[])), Assign(targets=[Subscript(value=Name(id='names', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\.py$'), Constant(value=''), Subscript(value=Name(id='names', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), AugAssign(target=Subscript(value=Name(id='names', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store()), op=Add(), value=BinOp(left=Name(id='possible_open_bracket', ctx=Load()), op=Add(), right=Name(id='params', ctx=Load()))), Return(value=Name(id='names', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='LogXML', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='logfile'), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='suite_name', annotation=Name(id='str', ctx=Load())), arg(arg='logging', annotation=Name(id='str', ctx=Load())), arg(arg='report_duration', annotation=Name(id='str', ctx=Load())), arg(arg='family'), arg(arg='log_passing_tests', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='pytest'), Constant(value='no'), Constant(value='total'), Constant(value='xunit1'), Constant(value=True)]), body=[Assign(targets=[Name(id='logfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expandvars', ctx=Load()), args=[Name(id='logfile', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='logfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='logfile', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Name(id='prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suite_name', ctx=Store())], value=Name(id='suite_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='logging', ctx=Store())], value=Name(id='logging', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_passing_tests', ctx=Store())], value=Name(id='log_passing_tests', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='report_duration', ctx=Store())], value=Name(id='report_duration', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Store())], value=Name(id='family', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[List(elts=[Constant(value='error'), Constant(value='passed'), Constant(value='failure'), Constant(value='skipped')], ctx=Load()), Constant(value=0)], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='_NodeReporter', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters_ordered', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='_NodeReporter', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='global_properties', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='open_reports', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TestReport', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cnt_double_fail_tests', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Constant(value='legacy')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='family', ctx=Store())], value=Constant(value='xunit1'))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='finalize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nodeid', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='nodeid'), Name(id='report', ctx=Load())], keywords=[])), Assign(targets=[Name(id='workernode', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='node'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters', ctx=Load()), attr='pop', ctx=Load()), args=[Tuple(elts=[Name(id='nodeid', ctx=Load()), Name(id='workernode', ctx=Load())], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='propname', ctx=Store()), Name(id='propvalue', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='report', ctx=Load()), attr='user_properties', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='add_property', ctx=Load()), args=[Name(id='propname', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='propvalue', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='reporter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='finalize', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='node_reporter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='TestReport', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='nodeid', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='nodeid'), Name(id='report', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='workernode', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='node'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='nodeid', ctx=Load()), Name(id='workernode', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Name(id='_NodeReporter', ctx=Load()), args=[Name(id='nodeid', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='reporter', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters_ordered', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='reporter', ctx=Load())], keywords=[])), Return(value=Name(id='reporter', ctx=Load()))], decorator_list=[], returns=Name(id='_NodeReporter', ctx=Load())), FunctionDef(name='add_stats', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load())]), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_opentestcase', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporter', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='record_testreport', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Return(value=Name(id='reporter', ctx=Load()))], decorator_list=[], returns=Name(id='_NodeReporter', ctx=Load())), FunctionDef(name='pytest_runtest_logreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Handle a setup/call/teardown report, generating the appropriate\n        XML tags as necessary.\n\n        Note: due to plugins like xdist, this hook may be called in interlaced\n        order with reports from other nodes. For example:\n\n        Usual call order:\n            -> setup node1\n            -> call node1\n            -> teardown node1\n            -> setup node2\n            -> call node2\n            -> teardown node2\n\n        Possible call order in xdist:\n            -> setup node1\n            -> call node1\n            -> setup node2\n            -> call node2\n            -> teardown node2\n            -> teardown node1\n        ')), Assign(targets=[Name(id='close_report', ctx=Store())], value=Constant(value=None)), If(test=Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_opentestcase', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_pass', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='teardown')]), body=[Assign(targets=[Name(id='report_wid', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='worker_id'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='report_ii', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='item_index'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='close_report', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='rep', ctx=Load()), generators=[comprehension(target=Name(id='rep', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='open_reports', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='item_index'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Name(id='report_ii', ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='worker_id'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Name(id='report_wid', ctx=Load())])])], is_async=0)]), Constant(value=None)], keywords=[])), If(test=Name(id='close_report', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize', ctx=Load()), args=[Name(id='close_report', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cnt_double_fail_tests', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_opentestcase', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_failure', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_reports', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='log_passing_tests', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='write_captured_output', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_error', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))])], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load()), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_opentestcase', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_skipped', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_testcase_duration', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='teardown')]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_opentestcase', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='write_captured_output', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), Assign(targets=[Name(id='report_wid', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='worker_id'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='report_ii', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='item_index'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='close_report', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='rep', ctx=Load()), generators=[comprehension(target=Name(id='rep', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='open_reports', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='report', ctx=Load()), attr='nodeid', ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='item_index'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Name(id='report_ii', ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='worker_id'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Name(id='report_wid', ctx=Load())])])], is_async=0)]), Constant(value=None)], keywords=[])), If(test=Name(id='close_report', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_reports', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='close_report', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_testcase_duration', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Accumulate total duration for nodeid from given report and update\n        the Junit.testcase with the new total if already created.')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='report_duration', ctx=Load()), ops=[Eq()], comparators=[Constant(value='total')]), Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='report_duration', ctx=Load())])]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporter', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='reporter', ctx=Load()), attr='duration', ctx=Store()), op=Add(), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='duration'), Constant(value=0.0)], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_collectreport', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='report', annotation=Name(id='TestReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='report', ctx=Load()), attr='passed', ctx=Load())), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_opentestcase', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_collect_error', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='append_collect_skipped', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_internalerror', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='excrepr', annotation=Name(id='ExceptionRepr', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reporter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporter', ctx=Load()), args=[Constant(value='internal')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='reporter', ctx=Load()), attr='attrs', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='classname', value=Constant(value='pytest')), keyword(arg='name', value=Constant(value='internal'))])), Expr(value=Call(func=Attribute(value=Name(id='reporter', ctx=Load()), attr='_add_simple', ctx=Load()), args=[Constant(value='error'), Constant(value='internal error'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='excrepr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suite_start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dirname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='logfile', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='logfile', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='logfile', ctx=Store()))], body=[Assign(targets=[Name(id='suite_stop_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='suite_time_delta', ctx=Store())], value=BinOp(left=Name(id='suite_stop_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='suite_start_time', ctx=Load()))), Assign(targets=[Name(id='numtests', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='passed'), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='failure'), ctx=Load())), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='skipped'), ctx=Load())), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='error'), ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cnt_double_fail_tests', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='logfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='<?xml version="1.0" encoding="utf-8"?>')], keywords=[])), Assign(targets=[Name(id='suite_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='testsuite')], keywords=[keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='suite_name', ctx=Load())), keyword(arg='errors', value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='error'), ctx=Load())], keywords=[])), keyword(arg='failures', value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='failure'), ctx=Load())], keywords=[])), keyword(arg='skipped', value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stats', ctx=Load()), slice=Constant(value='skipped'), ctx=Load())], keywords=[])), keyword(arg='tests', value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='numtests', ctx=Load())], keywords=[])), keyword(arg='time', value=BinOp(left=Constant(value='%.3f'), op=Mod(), right=Name(id='suite_time_delta', ctx=Load()))), keyword(arg='timestamp', value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='suite_start_time', ctx=Load())], keywords=[]), attr='isoformat', ctx=Load()), args=[], keywords=[])), keyword(arg='hostname', value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='node', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='global_properties', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_global_properties_node', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='global_properties', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='suite_node', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='global_properties', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='node_reporter', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='node_reporters_ordered', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='suite_node', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='node_reporter', ctx=Load()), attr='to_xml', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='testsuites', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='testsuites')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='testsuites', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='suite_node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='tostring', ctx=Load()), args=[Name(id='testsuites', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='unicode'))])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_terminal_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='terminalreporter', annotation=Name(id='TerminalReporter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='-'), JoinedStr(values=[Constant(value='generated xml file: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='logfile', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_global_property', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='_check_record_param_type', ctx=Load()), args=[Constant(value='name'), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='global_properties', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='bin_xml_escape', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_global_properties_node', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a Junit node containing custom properties, if any.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='global_properties', ctx=Load()), body=[Assign(targets=[Name(id='properties', ctx=Store())], value=Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='properties')], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='global_properties', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='properties', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), args=[Constant(value='property')], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Name(id='properties', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='ET', ctx=Load()), attr='Element', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])