Module(body=[Expr(value=Constant(value="\nScope definition and related utilities.\n\nThose are defined here, instead of in the 'fixtures' module because\ntheir use is spread across many other pytest modules, and centralizing it in 'fixtures'\nwould cause circular references.\n\nAlso this makes the module light to import, as it should.\n")), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='total_ordering')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), Assign(targets=[Name(id='_ScopeName', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='session'), Constant(value='package'), Constant(value='module'), Constant(value='class'), Constant(value='function')], ctx=Load()), ctx=Load()))], orelse=[]), ClassDef(name='Scope', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Represents one of the possible fixture scopes in pytest.\n\n    Scopes are ordered from lower to higher, that is:\n\n              ->>> higher ->>>\n\n    Function < Class < Module < Package < Session\n\n              <<<- lower  <<<-\n    ')), AnnAssign(target=Name(id='Function', ctx=Store()), annotation=Constant(value='_ScopeName'), value=Constant(value='function'), simple=1), AnnAssign(target=Name(id='Class', ctx=Store()), annotation=Constant(value='_ScopeName'), value=Constant(value='class'), simple=1), AnnAssign(target=Name(id='Module', ctx=Store()), annotation=Constant(value='_ScopeName'), value=Constant(value='module'), simple=1), AnnAssign(target=Name(id='Package', ctx=Store()), annotation=Constant(value='_ScopeName'), value=Constant(value='package'), simple=1), AnnAssign(target=Name(id='Session', ctx=Store()), annotation=Constant(value='_ScopeName'), value=Constant(value='session'), simple=1), FunctionDef(name='next_lower', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the next lower scope.')), Assign(targets=[Name(id='index', ctx=Store())], value=Subscript(value=Name(id='_SCOPE_INDICES', ctx=Load()), slice=Name(id='self', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value=' is the lower-most scope')])], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_ALL_SCOPES', ctx=Load()), slice=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Constant(value='Scope')), FunctionDef(name='next_higher', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the next higher scope.')), Assign(targets=[Name(id='index', ctx=Store())], value=Subscript(value=Name(id='_SCOPE_INDICES', ctx=Load()), slice=Name(id='self', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='_SCOPE_INDICES', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value=' is the upper-most scope')])], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_ALL_SCOPES', ctx=Load()), slice=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Constant(value='Scope')), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='Scope'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='self_index', ctx=Store())], value=Subscript(value=Name(id='_SCOPE_INDICES', ctx=Load()), slice=Name(id='self', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='other_index', ctx=Store())], value=Subscript(value=Name(id='_SCOPE_INDICES', ctx=Load()), slice=Name(id='other', ctx=Load()), ctx=Load())), Return(value=Compare(left=Name(id='self_index', ctx=Load()), ops=[Lt()], comparators=[Name(id='other_index', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='from_user', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='scope_name', annotation=Constant(value='_ScopeName')), arg(arg='descr', annotation=Name(id='str', ctx=Load())), arg(arg='where', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Given a scope name from the user, return the equivalent Scope enum. Should be used\n        whenever we want to convert a user provided scope name to its enum object.\n\n        If the scope name is invalid, construct a user friendly message and call pytest.fail.\n        ')), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), Try(body=[Assign(targets=[Name(id='scope', ctx=Store())], value=Call(func=Name(id='Scope', ctx=Load()), args=[Name(id='scope_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Name(id='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="{} {}got an unexpected scope value '{}'"), attr='format', ctx=Load()), args=[Name(id='descr', ctx=Load()), IfExp(test=Name(id='where', ctx=Load()), body=JoinedStr(values=[Constant(value='from '), FormattedValue(value=Name(id='where', ctx=Load()), conversion=-1), Constant(value=' ')]), orelse=Constant(value='')), Name(id='scope_name', ctx=Load())], keywords=[])], keywords=[keyword(arg='pytrace', value=Constant(value=False))]))])], orelse=[], finalbody=[]), Return(value=Name(id='scope', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Scope'))], decorator_list=[Name(id='total_ordering', ctx=Load())]), Assign(targets=[Name(id='_ALL_SCOPES', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='Scope', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_SCOPE_INDICES', ctx=Store())], value=DictComp(key=Name(id='scope', ctx=Load()), value=Name(id='index', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='scope', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='_ALL_SCOPES', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='HIGH_SCOPES', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='Scope', ctx=Load()), ifs=[Compare(left=Name(id='x', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='Scope', ctx=Load()), attr='Function', ctx=Load())])], is_async=0)]))], type_ignores=[])