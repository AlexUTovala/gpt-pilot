Module(body=[Expr(value=Constant(value='Version info, help messages, tracing configuration.')), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='argparse', names=[alias(name='Action')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='PrintHelp')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0), ClassDef(name='HelpAction', bases=[Name(id='Action', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An argparse Action that will raise an exception in order to skip the\n    rest of the argument parsing when --help is passed.\n\n    This prevents argparse from quitting due to missing required arguments\n    when any are defined, for example by ``pytest_addoption``.\n    This is similar to the way that the builtin argparse --help option is\n    implemented by raising SystemExit.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option_strings'), arg(arg='dest'), arg(arg='default'), arg(arg='help')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='option_strings', value=Name(id='option_strings', ctx=Load())), keyword(arg='dest', value=Name(id='dest', ctx=Load())), keyword(arg='const', value=Constant(value=True)), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='nargs', value=Constant(value=0)), keyword(arg='help', value=Name(id='help', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser'), arg(arg='namespace'), arg(arg='values'), arg(arg='option_string')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='namespace', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dest', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='const', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='_parser', ctx=Load()), Constant(value='after_preparse'), Constant(value=False)], keywords=[]), body=[Raise(exc=Name(id='PrintHelp', ctx=Load()))], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='debugconfig')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--version'), Constant(value='-V')], keywords=[keyword(arg='action', value=Constant(value='count')), keyword(arg='default', value=Constant(value=0)), keyword(arg='dest', value=Constant(value='version')), keyword(arg='help', value=Constant(value='Display pytest version and information about plugins. When given twice, also display information about plugins.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-h'), Constant(value='--help')], keywords=[keyword(arg='action', value=Name(id='HelpAction', ctx=Load())), keyword(arg='dest', value=Constant(value='help')), keyword(arg='help', value=Constant(value='Show help message and configuration info'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-p')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='dest', value=Constant(value='plugins')), keyword(arg='default', value=List(elts=[], ctx=Load())), keyword(arg='metavar', value=Constant(value='name')), keyword(arg='help', value=Constant(value='Early-load given plugin module name or entry point (multi-allowed). To avoid loading of plugins, use the `no:` prefix, e.g. `no:doctest`.'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--traceconfig'), Constant(value='--trace-config')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Trace considerations of conftest.py files'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--debug')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='nargs', value=Constant(value='?')), keyword(arg='const', value=Constant(value='pytestdebug.log')), keyword(arg='dest', value=Constant(value='debug')), keyword(arg='metavar', value=Constant(value='DEBUG_FILE_NAME')), keyword(arg='help', value=Constant(value="Store internal tracing debug information in this log file. This file is opened with 'w' and truncated as a result, care advised. Default: pytestdebug.log."))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='_addoption', ctx=Load()), args=[Constant(value='-o'), Constant(value='--override-ini')], keywords=[keyword(arg='dest', value=Constant(value='override_ini')), keyword(arg='action', value=Constant(value='append')), keyword(arg='help', value=Constant(value='Override ini option with "option=value" style, e.g. `-o xfail_strict=True -o cache_dir=cache`.'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_cmdline_parse', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), AnnAssign(target=Name(id='config', ctx=Store()), annotation=Name(id='Config', ctx=Load()), value=Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[]), simple=1), If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='debug', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='debug', ctx=Load())), Assign(targets=[Name(id='debugfile', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Expr(value=Call(func=Attribute(value=Name(id='debugfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='versions pytest-%s, python-%s\ncwd=%s\nargs=%s\n\n'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load()), Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load())], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='invocation_params', ctx=Load()), attr='args', ctx=Load())], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='setwriter', ctx=Load()), args=[Attribute(value=Name(id='debugfile', ctx=Load()), attr='write', ctx=Load())], keywords=[])), Assign(targets=[Name(id='undo_tracing', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='enable_tracing', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='writing pytest debug information to %s\n'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[])), FunctionDef(name='unset_tracing', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='debugfile', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='wrote pytest debug information to %s\n'), op=Mod(), right=Attribute(value=Name(id='debugfile', ctx=Load()), attr='name', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='root', ctx=Load()), attr='setwriter', ctx=Load()), args=[Constant(value=None)], keywords=[])), Expr(value=Call(func=Name(id='undo_tracing', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Name(id='unset_tracing', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True))])]), FunctionDef(name='showversion', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='version', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='This is pytest version {}, imported from {}\n'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load()), Attribute(value=Name(id='pytest', ctx=Load()), attr='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='plugininfo', ctx=Store())], value=Call(func=Name(id='getpluginversioninfo', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), If(test=Name(id='plugininfo', ctx=Load()), body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='plugininfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[])], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[Constant(value='pytest '), FormattedValue(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_cmdline_main', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='version', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='showversion', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Return(value=Constant(value=0))], orelse=[If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='help', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_do_configure', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='showhelp', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='_ensure_unconfigure', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=0))], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='showhelp', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='textwrap')]), AnnAssign(target=Name(id='reporter', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalReporter', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='get_plugin', ctx=Load()), args=[Constant(value='terminalreporter')], keywords=[]), simple=1), Assert(test=Compare(left=Name(id='reporter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='tw', ctx=Store())], value=Attribute(value=Name(id='reporter', ctx=Load()), attr='_tw', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='_parser', ctx=Load()), attr='optparser', ctx=Load()), attr='format_help', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='[pytest] ini-options in the first pytest.ini|tox.ini|setup.cfg|pyproject.toml file found:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='tw', ctx=Load()), attr='fullwidth', ctx=Load())), Assign(targets=[Name(id='indent_len', ctx=Store())], value=Constant(value=24)), Assign(targets=[Name(id='indent', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='indent_len', ctx=Load()))), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='_parser', ctx=Load()), attr='_ininames', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='help', ctx=Store()), Name(id='type', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='_parser', ctx=Load()), attr='_inidict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Constant(value='string'))], orelse=[]), If(test=Compare(left=Name(id='help', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='help argument cannot be None for '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='spec', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='type', ctx=Load()), conversion=-1), Constant(value='):')])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='  %s'), op=Mod(), right=Name(id='spec', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='spec_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='spec_len', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='indent_len', ctx=Load()), op=Sub(), right=Constant(value=3))]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='helplines', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='wrap', ctx=Load()), args=[Name(id='help', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[keyword(arg='initial_indent', value=Name(id='indent', ctx=Load())), keyword(arg='subsequent_indent', value=Name(id='indent', ctx=Load())), keyword(arg='break_on_hyphens', value=Constant(value=False))])), For(target=Name(id='line', ctx=Store()), iter=Name(id='helplines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=BinOp(left=Name(id='indent_len', ctx=Load()), op=Sub(), right=Name(id='spec_len', ctx=Load())), op=Sub(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='wrapped', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='wrap', ctx=Load()), args=[Name(id='help', ctx=Load()), BinOp(left=Name(id='columns', ctx=Load()), op=Sub(), right=Name(id='indent_len', ctx=Load()))], keywords=[keyword(arg='break_on_hyphens', value=Constant(value=False))])), If(test=Name(id='wrapped', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Subscript(value=Name(id='wrapped', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='wrapped', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='Environment variables:')], keywords=[])), Assign(targets=[Name(id='vars', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='PYTEST_ADDOPTS'), Constant(value='Extra command line options')], ctx=Load()), Tuple(elts=[Constant(value='PYTEST_PLUGINS'), Constant(value='Comma-separated plugins to load during startup')], ctx=Load()), Tuple(elts=[Constant(value='PYTEST_DISABLE_PLUGIN_AUTOLOAD'), Constant(value='Set to disable plugin auto-loading')], ctx=Load()), Tuple(elts=[Constant(value='PYTEST_DEBUG'), Constant(value="Set to enable debug tracing of pytest's internals")], ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='help', ctx=Store())], ctx=Store()), iter=Name(id='vars', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[JoinedStr(values=[Constant(value='  '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<24')])), Constant(value=' '), FormattedValue(value=Name(id='help', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='to see available markers type: pytest --markers')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value='to see available fixtures type: pytest --fixtures')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[Constant(value="(shown according to specified file_or_dir or current dir if not specified; fixtures with leading '_' are only shown with the '-v' option")], keywords=[])), For(target=Name(id='warningreport', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='reporter', ctx=Load()), attr='stats', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='warnings'), List(elts=[], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[BinOp(left=Constant(value='warning : '), op=Add(), right=Attribute(value=Name(id='warningreport', ctx=Load()), attr='message', ctx=Load()))], keywords=[keyword(arg='red', value=Constant(value=True))]))], orelse=[]), Return()], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='conftest_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='pytest_plugins'), Constant(value='list of plugin names to load')], ctx=Load())], ctx=Load())), FunctionDef(name='getpluginversioninfo', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='plugininfo', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='list_plugin_distinfo', ctx=Load()), args=[], keywords=[])), If(test=Name(id='plugininfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='setuptools registered plugins:')], keywords=[])), For(target=Tuple(elts=[Name(id='plugin', ctx=Store()), Name(id='dist', ctx=Store())], ctx=Store()), iter=Name(id='plugininfo', ctx=Load()), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Constant(value='__file__'), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='plugin', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='content', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='project_name', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1), Constant(value=' at '), FormattedValue(value=Name(id='loc', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  '), op=Add(), right=Name(id='content', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_report_header', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='debug', ctx=Load()), Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='traceconfig', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='using: pytest-'), FormattedValue(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='__version__', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='verinfo', ctx=Store())], value=Call(func=Name(id='getpluginversioninfo', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), If(test=Name(id='verinfo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='verinfo', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='traceconfig', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='active plugins:')], keywords=[])), Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='pluginmanager', ctx=Load()), attr='list_name_plugin', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='plugin', ctx=Store())], ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='plugin', ctx=Load()), Constant(value='__file__')], keywords=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Attribute(value=Name(id='plugin', ctx=Load()), attr='__file__', ctx=Load()))], orelse=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='plugin', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='    '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<20')])), Constant(value=': '), FormattedValue(value=Name(id='r', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])