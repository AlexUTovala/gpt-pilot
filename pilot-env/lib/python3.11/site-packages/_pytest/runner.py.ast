Module(body=[Expr(value=Constant(value='Basic collect and runtest protocol implementations.')), Import(names=[alias(name='bdb')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='reports', names=[alias(name='BaseReport')], level=1), ImportFrom(module='reports', names=[alias(name='CollectErrorRepr')], level=1), ImportFrom(module='reports', names=[alias(name='CollectReport')], level=1), ImportFrom(module='reports', names=[alias(name='TestReport')], level=1), ImportFrom(module='_pytest', names=[alias(name='timing')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionChainRepr')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='TerminalRepr')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Node')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='Exit')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='OutcomeException')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='Skipped')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='TEST_OUTCOME')], level=0), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), body=[ImportFrom(module='exceptiongroup', names=[alias(name='BaseExceptionGroup')], level=0)], orelse=[]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TerminalReporter')], level=0)], orelse=[]), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getgroup', ctx=Load()), args=[Constant(value='terminal reporting'), Constant(value='Reporting')], keywords=[keyword(arg='after', value=Constant(value='general'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--durations')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=None)), keyword(arg='metavar', value=Constant(value='N')), keyword(arg='help', value=Constant(value='Show N slowest setup/test durations (N=0 for all)'))])), Expr(value=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='addoption', ctx=Load()), args=[Constant(value='--durations-min')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='type', value=Name(id='float', ctx=Load())), keyword(arg='default', value=Constant(value=0.005)), keyword(arg='metavar', value=Constant(value='N')), keyword(arg='help', value=Constant(value='Minimal duration in seconds for inclusion in slowest list. Default: 0.005.'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_terminal_summary', args=arguments(posonlyargs=[], args=[arg(arg='terminalreporter', annotation=Constant(value='TerminalReporter'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='durations', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='durations', ctx=Load())), Assign(targets=[Name(id='durations_min', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='config', ctx=Load()), attr='option', ctx=Load()), attr='durations_min', ctx=Load())), Assign(targets=[Name(id='verbose', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='terminalreporter', ctx=Load()), attr='config', ctx=Load()), attr='getvalue', ctx=Load()), args=[Constant(value='verbose')], keywords=[])), If(test=Compare(left=Name(id='durations', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='tr', ctx=Store())], value=Name(id='terminalreporter', ctx=Load())), Assign(targets=[Name(id='dlist', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='replist', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='tr', ctx=Load()), attr='stats', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='rep', ctx=Store()), iter=Name(id='replist', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='rep', ctx=Load()), Constant(value='duration')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='dlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='rep', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dlist', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dlist', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='duration', ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Name(id='durations', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='tr', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), Constant(value='slowest durations')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tr', ctx=Load()), attr='write_sep', ctx=Load()), args=[Constant(value='='), BinOp(left=Constant(value='slowest %s durations'), op=Mod(), right=Name(id='durations', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='dlist', ctx=Store())], value=Subscript(value=Name(id='dlist', ctx=Load()), slice=Slice(upper=Name(id='durations', ctx=Load())), ctx=Load()))]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='rep', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='dlist', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), Compare(left=Attribute(value=Name(id='rep', ctx=Load()), attr='duration', ctx=Load()), ops=[Lt()], comparators=[Name(id='durations_min', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='tr', ctx=Load()), attr='write_line', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tr', ctx=Load()), attr='write_line', ctx=Load()), args=[BinOp(left=Constant(value='(%s durations < %gs hidden.  Use -vv to show these durations.)'), op=Mod(), right=Tuple(elts=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dlist', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='i', ctx=Load())), Name(id='durations_min', ctx=Load())], ctx=Load()))], keywords=[])), Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tr', ctx=Load()), attr='write_line', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='rep', ctx=Load()), attr='duration', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02.2f')])), Constant(value='s '), FormattedValue(value=Attribute(value=Name(id='rep', ctx=Load()), attr='when', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='<8')])), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='rep', ctx=Load()), attr='nodeid', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionstart', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='_setupstate', ctx=Store())], value=Call(func=Name(id='SetupState', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Constant(value='Session'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='_setupstate', ctx=Load()), attr='teardown_exact', ctx=Load()), args=[Constant(value=None)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_protocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='nextitem', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_runtest_logstart', ctx=Load()), args=[], keywords=[keyword(arg='nodeid', value=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load())), keyword(arg='location', value=Attribute(value=Name(id='item', ctx=Load()), attr='location', ctx=Load()))])), Expr(value=Call(func=Name(id='runtestprotocol', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[keyword(arg='nextitem', value=Name(id='nextitem', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_runtest_logfinish', ctx=Load()), args=[], keywords=[keyword(arg='nodeid', value=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load())), keyword(arg='location', value=Attribute(value=Name(id='item', ctx=Load()), attr='location', ctx=Load()))])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='runtestprotocol', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='log', annotation=Name(id='bool', ctx=Load())), arg(arg='nextitem', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='hasrequest', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='_request')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='hasrequest', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='item', ctx=Load()), attr='_request', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='_initrequest', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Name(id='call_and_report', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='setup'), Name(id='log', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reports', ctx=Store())], value=List(elts=[Name(id='rep', ctx=Load())], ctx=Load())), If(test=Attribute(value=Name(id='rep', ctx=Load()), attr='passed', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='setupshow'), Constant(value=False)], keywords=[]), body=[Expr(value=Call(func=Name(id='show_test_item', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='setuponly'), Constant(value=False)], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='reports', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='call_and_report', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='call'), Name(id='log', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='reports', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='call_and_report', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='teardown'), Name(id='log', ctx=Load())], keywords=[keyword(arg='nextitem', value=Name(id='nextitem', ctx=Load()))])], keywords=[])), If(test=Name(id='hasrequest', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='item', ctx=Load()), attr='_request', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='item', ctx=Load()), attr='funcargs', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='reports', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TestReport', ctx=Load()), ctx=Load())), FunctionDef(name='show_test_item', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show test function, parameters and the fixtures of the test item.')), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='get_terminal_writer', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=8))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='used_fixtures', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='fixturenames'), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='used_fixtures', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' (fixtures used: {})'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='used_fixtures', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tw', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_update_current_test_var', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='setup')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='session', ctx=Load()), attr='_setupstate', ctx=Load()), attr='setup', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_call', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_update_current_test_var', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='call')], keywords=[])), Try(body=[Delete(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_type', ctx=Del())]), Delete(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_value', ctx=Del())]), Delete(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_traceback', ctx=Del())])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='runtest', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_value', ctx=Store())], value=Name(id='e', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='last_traceback', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='e', ctx=Load()), attr='__traceback__', ctx=Load()), attr='tb_next', ctx=Load())), Raise(exc=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_runtest_teardown', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='nextitem', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_update_current_test_var', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='teardown')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='session', ctx=Load()), attr='_setupstate', ctx=Load()), attr='teardown_exact', ctx=Load()), args=[Name(id='nextitem', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_update_current_test_var', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_update_current_test_var', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='when', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value="Literal['setup', 'call', 'teardown']"), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update :envvar:`PYTEST_CURRENT_TEST` to reflect the current item and stage.\n\n    If ``when`` is None, delete ``PYTEST_CURRENT_TEST`` from the environment.\n    ')), Assign(targets=[Name(id='var_name', ctx=Store())], value=Constant(value='PYTEST_CURRENT_TEST')), If(test=Name(id='when', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='when', ctx=Load()), conversion=-1), Constant(value=')')])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\x00'), Constant(value='(null)')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Name(id='var_name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='var_name', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_report_teststatus', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='report', ctx=Load()), attr='when', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='setup'), Constant(value='teardown')], ctx=Load())]), body=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='failed', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value='error'), Constant(value='E'), Constant(value='ERROR')], ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='report', ctx=Load()), attr='skipped', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value='skipped'), Constant(value='s'), Constant(value='SKIPPED')], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Constant(value=''), Constant(value=''), Constant(value='')], ctx=Load()))])])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='call_and_report', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='when', annotation=Constant(value="Literal['setup', 'call', 'teardown']")), arg(arg='log', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Name(id='call_runtest_hook', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='when', ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load())), AnnAssign(target=Name(id='report', ctx=Store()), annotation=Name(id='TestReport', ctx=Load()), value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='pytest_runtest_makereport', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='item', ctx=Load())), keyword(arg='call', value=Name(id='call', ctx=Load()))]), simple=1), If(test=Name(id='log', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='pytest_runtest_logreport', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='report', ctx=Load()))]))], orelse=[]), If(test=Call(func=Name(id='check_interactive_exception', ctx=Load()), args=[Name(id='call', ctx=Load()), Name(id='report', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='pytest_exception_interact', ctx=Load()), args=[], keywords=[keyword(arg='node', value=Name(id='item', ctx=Load())), keyword(arg='call', value=Name(id='call', ctx=Load())), keyword(arg='report', value=Name(id='report', ctx=Load()))]))], orelse=[]), Return(value=Name(id='report', ctx=Load()))], decorator_list=[], returns=Name(id='TestReport', ctx=Load())), FunctionDef(name='check_interactive_exception', args=arguments(posonlyargs=[], args=[arg(arg='call', annotation=Constant(value='CallInfo[object]')), arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check whether the call raised an exception that should be reported as\n    interactive.')), If(test=Compare(left=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='report', ctx=Load()), Constant(value='wasxfail')], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Tuple(elts=[Name(id='Skipped', ctx=Load()), Attribute(value=Name(id='bdb', ctx=Load()), attr='BdbQuit', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='call_runtest_hook', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='when', annotation=Constant(value="Literal['setup', 'call', 'teardown']"))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[If(test=Compare(left=Name(id='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='setup')]), body=[AnnAssign(target=Name(id='ihook', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()), value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_runtest_setup', ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_runtest_call', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='teardown')]), body=[Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='ihook', ctx=Load()), attr='pytest_runtest_teardown', ctx=Load()))], orelse=[Assert(test=Constant(value=False), msg=JoinedStr(values=[Constant(value='Unhandled runtest hook case: '), FormattedValue(value=Name(id='when', ctx=Load()), conversion=-1)]))])])]), AnnAssign(target=Name(id='reraise', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Name(id='Exit', ctx=Load())], ctx=Load()), simple=1), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='usepdb'), Constant(value=False)], keywords=[])), body=[AugAssign(target=Name(id='reraise', ctx=Store()), op=Add(), value=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='CallInfo', ctx=Load()), attr='from_call', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='ihook', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='item', ctx=Load())), keyword(value=Name(id='kwds', ctx=Load()))]))], keywords=[keyword(arg='when', value=Name(id='when', ctx=Load())), keyword(arg='reraise', value=Name(id='reraise', ctx=Load()))]))], decorator_list=[], returns=Constant(value='CallInfo[None]')), Assign(targets=[Name(id='TResult', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='TResult')], keywords=[keyword(arg='covariant', value=Constant(value=True))])), ClassDef(name='CallInfo', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='TResult', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Result/Exception info of a function invocation.')), AnnAssign(target=Name(id='_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TResult', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='excinfo', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='start', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), AnnAssign(target=Name(id='stop', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), AnnAssign(target=Name(id='duration', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), AnnAssign(target=Name(id='when', ctx=Store()), annotation=Constant(value="Literal['collect', 'setup', 'call', 'teardown']"), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TResult', ctx=Load()), ctx=Load())), arg(arg='excinfo', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='start', annotation=Name(id='float', ctx=Load())), arg(arg='stop', annotation=Name(id='float', ctx=Load())), arg(arg='duration', annotation=Name(id='float', ctx=Load())), arg(arg='when', annotation=Constant(value="Literal['collect', 'setup', 'call', 'teardown']"))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Name(id='result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Store())], value=Name(id='excinfo', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Store())], value=Name(id='start', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Store())], value=Name(id='stop', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='duration', ctx=Store())], value=Name(id='duration', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='when', ctx=Store())], value=Name(id='when', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='result', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="The return value of the call, if it didn't raise.\n\n        Can only be accessed if excinfo is None.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='self', ctx=Load()), conversion=114), Constant(value=' has no valid result')])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TResult', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='TResult', ctx=Load())), FunctionDef(name='from_call', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='func', annotation=Constant(value='Callable[[], TResult]')), arg(arg='when', annotation=Constant(value="Literal['collect', 'setup', 'call', 'teardown']")), arg(arg='reraise', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Call func, wrapping the result in a CallInfo.\n\n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        ')), Assign(targets=[Name(id='excinfo', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='precise_start', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='perf_counter', ctx=Load()), args=[], keywords=[])), Try(body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TResult', ctx=Load()), ctx=Load()), value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Assign(targets=[Name(id='excinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='ExceptionInfo', ctx=Load()), attr='from_current', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='reraise', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Name(id='reraise', ctx=Load())], keywords=[])]), body=[Raise()], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='precise_stop', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='perf_counter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='duration', ctx=Store())], value=BinOp(left=Name(id='precise_stop', ctx=Load()), op=Sub(), right=Name(id='precise_start', ctx=Load()))), Assign(targets=[Name(id='stop', ctx=Store())], value=Call(func=Attribute(value=Name(id='timing', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Name(id='start', ctx=Load())), keyword(arg='stop', value=Name(id='stop', ctx=Load())), keyword(arg='duration', value=Name(id='duration', ctx=Load())), keyword(arg='when', value=Name(id='when', ctx=Load())), keyword(arg='result', value=Name(id='result', ctx=Load())), keyword(arg='excinfo', value=Name(id='excinfo', ctx=Load())), keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='CallInfo[TResult]')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=JoinedStr(values=[Constant(value='<CallInfo when='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='when', ctx=Load()), conversion=114), Constant(value=' result: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()), conversion=114), Constant(value='>')]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='<CallInfo when='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='when', ctx=Load()), conversion=114), Constant(value=' excinfo='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='excinfo', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), FunctionDef(name='pytest_runtest_makereport', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='call', annotation=Subscript(value=Name(id='CallInfo', ctx=Load()), slice=Constant(value=None), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='TestReport', ctx=Load()), attr='from_item_and_call', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='call', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='TestReport', ctx=Load())), FunctionDef(name='pytest_make_collect_report', args=arguments(posonlyargs=[], args=[arg(arg='collector', annotation=Name(id='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Attribute(value=Name(id='CallInfo', ctx=Load()), attr='from_call', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='collector', ctx=Load()), attr='collect', ctx=Load()), args=[], keywords=[])], keywords=[])), Constant(value='collect')], keywords=[])), AnnAssign(target=Name(id='longrepr', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())), body=[AnnAssign(target=Name(id='outcome', ctx=Store()), annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='passed'), Constant(value='skipped'), Constant(value='failed')], ctx=Load()), ctx=Load()), value=Constant(value='passed'), simple=1)], orelse=[Assign(targets=[Name(id='skip_exceptions', ctx=Store())], value=List(elts=[Name(id='Skipped', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='unittest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unittest')], keywords=[])), If(test=Compare(left=Name(id='unittest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='skip_exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), attr='value', ctx=Load()), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='skip_exceptions', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='skipped')), Assign(targets=[Name(id='r_', ctx=Store())], value=Call(func=Attribute(value=Name(id='collector', ctx=Load()), attr='_repr_failure_py', ctx=Load()), args=[Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load()), Constant(value='line')], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='r_', ctx=Load()), Name(id='ExceptionChainRepr', ctx=Load())], keywords=[]), msg=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='r_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='r', ctx=Store())], value=Attribute(value=Name(id='r_', ctx=Load()), attr='reprcrash', ctx=Load())), Assert(test=Name(id='r', ctx=Load())), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='path', ctx=Load())], keywords=[]), Attribute(value=Name(id='r', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='r', ctx=Load()), attr='message', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='failed')), Assign(targets=[Name(id='errorinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='collector', ctx=Load()), attr='repr_failure', ctx=Load()), args=[Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='errorinfo', ctx=Load()), Constant(value='toterminal')], keywords=[])), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='errorinfo', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errorinfo', ctx=Store())], value=Call(func=Name(id='CollectErrorRepr', ctx=Load()), args=[Name(id='errorinfo', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Name(id='errorinfo', ctx=Load()))])]), Assign(targets=[Name(id='result', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())), body=Attribute(value=Name(id='call', ctx=Load()), attr='result', ctx=Load()), orelse=Constant(value=None))), Assign(targets=[Name(id='rep', ctx=Store())], value=Call(func=Name(id='CollectReport', ctx=Load()), args=[Attribute(value=Name(id='collector', ctx=Load()), attr='nodeid', ctx=Load()), Name(id='outcome', ctx=Load()), Name(id='longrepr', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='rep', ctx=Load()), attr='call', ctx=Store())], value=Name(id='call', ctx=Load())), Return(value=Name(id='rep', ctx=Load()))], decorator_list=[], returns=Name(id='CollectReport', ctx=Load())), ClassDef(name='SetupState', bases=[], keywords=[], body=[Expr(value=Constant(value='Shared state for setting up/tearing down test items or collectors\n    in a session.\n\n    Suppose we have a collection tree as follows:\n\n    <Session session>\n        <Module mod1>\n            <Function item1>\n        <Module mod2>\n            <Function item2>\n\n    The SetupState maintains a stack. The stack starts out empty:\n\n        []\n\n    During the setup phase of item1, setup(item1) is called. What it does\n    is:\n\n        push session to stack, run session.setup()\n        push mod1 to stack, run mod1.setup()\n        push item1 to stack, run item1.setup()\n\n    The stack is:\n\n        [session, mod1, item1]\n\n    While the stack is in this shape, it is allowed to add finalizers to\n    each of session, mod1, item1 using addfinalizer().\n\n    During the teardown phase of item1, teardown_exact(item2) is called,\n    where item2 is the next item to item1. What it does is:\n\n        pop item1 from stack, run its teardowns\n        pop mod1 from stack, run its teardowns\n\n    mod1 was popped because it ended its purpose with item1. The stack is:\n\n        [session]\n\n    During the setup phase of item2, setup(item2) is called. What it does\n    is:\n\n        push mod2 to stack, run mod2.setup()\n        push item2 to stack, run item2.setup()\n\n    Stack:\n\n        [session, mod2, item2]\n\n    During the teardown phase of item2, teardown_exact(None) is called,\n    because item2 is the last item. What it does is:\n\n        pop item2 from stack, run its teardowns\n        pop mod2 from stack, run its teardowns\n        pop session from stack, run its teardowns\n\n    Stack:\n\n        []\n\n    The end!\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Node', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OutcomeException', ctx=Load()), Name(id='Exception', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='Item', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Setup objects along the collector chain to the item.')), Assign(targets=[Name(id='needed_collectors', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='listchain', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='col', ctx=Store()), Tuple(elts=[Name(id='finalizers', ctx=Store()), Name(id='exc', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Name(id='col', ctx=Load()), ops=[In()], comparators=[Name(id='needed_collectors', ctx=Load())]), msg=Constant(value='previous item was not torn down properly')), If(test=Name(id='exc', ctx=Load()), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='col', ctx=Store()), iter=Subscript(value=Name(id='needed_collectors', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())], keywords=[])), ctx=Load()), body=[Assert(test=Compare(left=Name(id='col', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Store())], value=Tuple(elts=[List(elts=[Attribute(value=Name(id='col', ctx=Load()), attr='teardown', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='col', ctx=Load()), attr='setup', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TEST_OUTCOME', ctx=Load()), name='exc', body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Store())], value=Tuple(elts=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='exc', ctx=Load())], ctx=Load())), Raise(exc=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='addfinalizer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finalizer', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Attach a finalizer to the given node.\n\n        The node must be currently active in the stack.\n        ')), Assert(test=BoolOp(op=And(), values=[Name(id='node', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]))])), Assert(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='node', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())]), msg=Tuple(elts=[Name(id='node', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='finalizer', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='teardown_exact', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nextitem', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Item', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Teardown the current stack up until reaching nodes that nextitem\n        also descends from.\n\n        When nextitem is None (meaning we're at the last item), the entire\n        stack is torn down.\n        ")), Assign(targets=[Name(id='needed_collectors', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='nextitem', ctx=Load()), Call(func=Attribute(value=Name(id='nextitem', ctx=Load()), attr='listchain', ctx=Load()), args=[], keywords=[])]), List(elts=[], ctx=Load())])), AnnAssign(target=Name(id='exceptions', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), While(test=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Subscript(value=Name(id='needed_collectors', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())], keywords=[])), ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='node', ctx=Store()), Tuple(elts=[Name(id='finalizers', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='these_exceptions', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Name(id='finalizers', ctx=Load()), body=[Assign(targets=[Name(id='fin', ctx=Store())], value=Call(func=Attribute(value=Name(id='finalizers', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='fin', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TEST_OUTCOME', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='these_exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='these_exceptions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='these_exceptions', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='these_exceptions', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='errors while tearing down '), FormattedValue(value=Name(id='node', ctx=Load()), conversion=114)])), Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='BaseExceptionGroup', ctx=Load()), args=[Name(id='msg', ctx=Load()), Subscript(value=Name(id='these_exceptions', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='exceptions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Raise(exc=Subscript(value=Name(id='exceptions', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Name(id='exceptions', ctx=Load()), body=[Raise(exc=Call(func=Name(id='BaseExceptionGroup', ctx=Load()), args=[Constant(value='errors during test teardown'), Subscript(value=Name(id='exceptions', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='nextitem', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='collect_one_node', args=arguments(posonlyargs=[], args=[arg(arg='collector', annotation=Name(id='Collector', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ihook', ctx=Store())], value=Attribute(value=Name(id='collector', ctx=Load()), attr='ihook', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_collectstart', ctx=Load()), args=[], keywords=[keyword(arg='collector', value=Name(id='collector', ctx=Load()))])), AnnAssign(target=Name(id='rep', ctx=Store()), annotation=Name(id='CollectReport', ctx=Load()), value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_make_collect_report', ctx=Load()), args=[], keywords=[keyword(arg='collector', value=Name(id='collector', ctx=Load()))]), simple=1), Assign(targets=[Name(id='call', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='rep', ctx=Load()), attr='__dict__', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='call'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='call', ctx=Load()), Call(func=Name(id='check_interactive_exception', ctx=Load()), args=[Name(id='call', ctx=Load()), Name(id='rep', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='ihook', ctx=Load()), attr='pytest_exception_interact', ctx=Load()), args=[], keywords=[keyword(arg='node', value=Name(id='collector', ctx=Load())), keyword(arg='call', value=Name(id='call', ctx=Load())), keyword(arg='report', value=Name(id='rep', ctx=Load()))]))], orelse=[]), Return(value=Name(id='rep', ctx=Load()))], decorator_list=[], returns=Name(id='CollectReport', ctx=Load()))], type_ignores=[])