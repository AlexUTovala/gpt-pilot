Module(body=[Expr(value=Constant(value='Support for providing temporary directories to test functions.')), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='shutil', names=[alias(name='rmtree')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='CollectReport')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), Assign(targets=[Name(id='RetentionType', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='all'), Constant(value='failed'), Constant(value='none')], ctx=Load()), ctx=Load()))], orelse=[]), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='pathlib', names=[alias(name='LOCK_TIMEOUT')], level=1), ImportFrom(module='pathlib', names=[alias(name='make_numbered_dir')], level=1), ImportFrom(module='pathlib', names=[alias(name='make_numbered_dir_with_cleanup')], level=1), ImportFrom(module='pathlib', names=[alias(name='rm_rf')], level=1), ImportFrom(module='pathlib', names=[alias(name='cleanup_dead_symlinks')], level=1), ImportFrom(module='_pytest.compat', names=[alias(name='final'), alias(name='get_user_id')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.deprecated', names=[alias(name='check_ispytest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.monkeypatch', names=[alias(name='MonkeyPatch')], level=0), Assign(targets=[Name(id='tmppath_result_key', ctx=Store())], value=Call(func=Subscript(value=Name(id='StashKey', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), args=[], keywords=[])), ClassDef(name='TempPathFactory', bases=[], keywords=[], body=[Expr(value=Constant(value='Factory for temporary directories under the common base temp directory.\n\n    The base directory can be configured using the ``--basetemp`` option.\n    ')), AnnAssign(target=Name(id='_given_basetemp', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_trace', ctx=Store()), annotation=Name(id='Any', ctx=Load()), simple=1), AnnAssign(target=Name(id='_basetemp', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_retention_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='_retention_policy', ctx=Store()), annotation=Constant(value='RetentionType'), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='given_basetemp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load())), arg(arg='retention_count', annotation=Name(id='int', ctx=Load())), arg(arg='retention_policy', annotation=Constant(value='RetentionType')), arg(arg='trace'), arg(arg='basetemp', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='given_basetemp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_given_basetemp', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_given_basetemp', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='given_basetemp', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_trace', ctx=Store())], value=Name(id='trace', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_retention_count', ctx=Store())], value=Name(id='retention_count', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_retention_policy', ctx=Store())], value=Name(id='retention_policy', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_basetemp', ctx=Store())], value=Name(id='basetemp', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_config', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[arg(arg='_ispytest', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Create a factory according to pytest configuration.\n\n        :meta private:\n        ')), Expr(value=Call(func=Name(id='check_ispytest', ctx=Load()), args=[Name(id='_ispytest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='count', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='tmp_path_retention_count')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='tmp_path_retention_count must be >= 0. Current input: '), FormattedValue(value=Name(id='count', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='policy', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='getini', ctx=Load()), args=[Constant(value='tmp_path_retention_policy')], keywords=[])), If(test=Compare(left=Name(id='policy', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='all'), Constant(value='failed'), Constant(value='none')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='tmp_path_retention_policy must be either all, failed, none. Current input: '), FormattedValue(value=Name(id='policy', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='given_basetemp', value=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='option', ctx=Load()), attr='basetemp', ctx=Load())), keyword(arg='trace', value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='trace', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tmpdir')], keywords=[])), keyword(arg='retention_count', value=Name(id='count', ctx=Load())), keyword(arg='retention_policy', value=Name(id='policy', ctx=Load())), keyword(arg='_ispytest', value=Constant(value=True))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='TempPathFactory')), FunctionDef(name='_ensure_relative_to_basetemp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='basename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='basename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getbasetemp', ctx=Load()), args=[], keywords=[]), op=Div(), right=Name(id='basename', ctx=Load())), attr='resolve', ctx=Load()), args=[], keywords=[]), attr='parent', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getbasetemp', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='basename', ctx=Load()), conversion=-1), Constant(value=' is not a normalized and relative path')])], keywords=[]))], orelse=[]), Return(value=Name(id='basename', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='mktemp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='basename', annotation=Name(id='str', ctx=Load())), arg(arg='numbered', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Create a new temporary directory managed by the factory.\n\n        :param basename:\n            Directory base name, must be a relative path.\n\n        :param numbered:\n            If ``True``, ensure the directory is unique by adding a numbered\n            suffix greater than any existing one: ``basename="foo-"`` and ``numbered=True``\n            means that this function will create directories named ``"foo-0"``,\n            ``"foo-1"``, ``"foo-2"`` and so on.\n\n        :returns:\n            The path to the new directory.\n        ')), Assign(targets=[Name(id='basename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_relative_to_basetemp', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='numbered', ctx=Load())), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getbasetemp', ctx=Load()), args=[], keywords=[]), attr='joinpath', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value=448))]))], orelse=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='make_numbered_dir', ctx=Load()), args=[], keywords=[keyword(arg='root', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getbasetemp', ctx=Load()), args=[], keywords=[])), keyword(arg='prefix', value=Name(id='basename', ctx=Load())), keyword(arg='mode', value=Constant(value=448))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_trace', ctx=Load()), args=[Constant(value='mktemp'), Name(id='p', ctx=Load())], keywords=[]))]), Return(value=Name(id='p', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='getbasetemp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the base temporary directory, creating it if needed.\n\n        :returns:\n            The base temporary directory.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_basetemp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_basetemp', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_given_basetemp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='basetemp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_given_basetemp', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='basetemp', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='rm_rf', ctx=Load()), args=[Name(id='basetemp', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='basetemp', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value=448))])), Assign(targets=[Name(id='basetemp', ctx=Store())], value=Call(func=Attribute(value=Name(id='basetemp', ctx=Load()), attr='resolve', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='from_env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTEST_DEBUG_TEMPROOT')], keywords=[])), Assign(targets=[Name(id='temproot', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='from_env', ctx=Load()), Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='gettempdir', ctx=Load()), args=[], keywords=[])])], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='user', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='get_user', ctx=Load()), args=[], keywords=[]), Constant(value='unknown')])), Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='temproot', ctx=Load()), attr='joinpath', ctx=Load()), args=[JoinedStr(values=[Constant(value='pytest-of-'), FormattedValue(value=Name(id='user', ctx=Load()), conversion=-1)])], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value=448)), keyword(arg='exist_ok', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Name(id='rootdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='temproot', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='pytest-of-unknown')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value=448)), keyword(arg='exist_ok', value=Constant(value=True))]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='uid', ctx=Store())], value=Call(func=Name(id='get_user_id', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='uid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rootdir_stat', ctx=Store())], value=Call(func=Attribute(value=Name(id='rootdir', ctx=Load()), attr='stat', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='rootdir_stat', ctx=Load()), attr='st_uid', ctx=Load()), ops=[NotEq()], comparators=[Name(id='uid', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[JoinedStr(values=[Constant(value='The temporary directory '), FormattedValue(value=Name(id='rootdir', ctx=Load()), conversion=-1), Constant(value=' is not owned by the current user. Fix this and try again.')])], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Attribute(value=Name(id='rootdir_stat', ctx=Load()), attr='st_mode', ctx=Load()), op=BitAnd(), right=Constant(value=63)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='rootdir', ctx=Load()), BinOp(left=Attribute(value=Name(id='rootdir_stat', ctx=Load()), attr='st_mode', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Constant(value=63)))], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='keep', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_retention_count', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_retention_policy', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Assign(targets=[Name(id='keep', ctx=Store())], value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='basetemp', ctx=Store())], value=Call(func=Name(id='make_numbered_dir_with_cleanup', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=Constant(value='pytest-')), keyword(arg='root', value=Name(id='rootdir', ctx=Load())), keyword(arg='keep', value=Name(id='keep', ctx=Load())), keyword(arg='lock_timeout', value=Name(id='LOCK_TIMEOUT', ctx=Load())), keyword(arg='mode', value=Constant(value=448))]))]), Assert(test=Compare(left=Name(id='basetemp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Name(id='basetemp', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_basetemp', ctx=Store())], value=Name(id='basetemp', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_trace', ctx=Load()), args=[Constant(value='new basetemp'), Name(id='basetemp', ctx=Load())], keywords=[])), Return(value=Name(id='basetemp', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), FunctionDef(name='get_user', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).')), Try(body=[Import(names=[alias(name='getpass')]), Return(value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getuser', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='pytest_configure', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a TempPathFactory and attach it to the config object.\n\n    This is to comply with existing plugins which expect the handler to be\n    available at pytest_configure time, but ideally should be moved entirely\n    to the tmp_path_factory session fixture.\n    ')), Assign(targets=[Name(id='mp', ctx=Store())], value=Call(func=Name(id='MonkeyPatch', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_cleanup', ctx=Load()), args=[Attribute(value=Name(id='mp', ctx=Load()), attr='undo', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_tmp_path_factory', ctx=Store())], value=Call(func=Attribute(value=Name(id='TempPathFactory', ctx=Load()), attr='from_config', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[keyword(arg='_ispytest', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='mp', ctx=Load()), attr='setattr', ctx=Load()), args=[Name(id='config', ctx=Load()), Constant(value='_tmp_path_factory'), Name(id='_tmp_path_factory', ctx=Load())], keywords=[keyword(arg='raising', value=Constant(value=False))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pytest_addoption', args=arguments(posonlyargs=[], args=[arg(arg='parser', annotation=Name(id='Parser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='tmp_path_retention_count')], keywords=[keyword(arg='help', value=Constant(value='How many sessions should we keep the `tmp_path` directories, according to `tmp_path_retention_policy`.')), keyword(arg='default', value=Constant(value=3))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='addini', ctx=Load()), args=[Constant(value='tmp_path_retention_policy')], keywords=[keyword(arg='help', value=Constant(value='Controls which directories created by the `tmp_path` fixture are kept around, based on test outcome. (all/failed/none)')), keyword(arg='default', value=Constant(value='all'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='tmp_path_factory', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a :class:`pytest.TempPathFactory` instance for the test session.')), Return(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='config', ctx=Load()), attr='_tmp_path_factory', ctx=Load()))], decorator_list=[Call(func=Name(id='fixture', ctx=Load()), args=[], keywords=[keyword(arg='scope', value=Constant(value='session'))])], returns=Name(id='TempPathFactory', ctx=Load())), FunctionDef(name='_mk_tmp', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load())), arg(arg='factory', annotation=Name(id='TempPathFactory', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[\\W]'), Constant(value='_'), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='MAXVAL', ctx=Store())], value=Constant(value=30)), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=Name(id='MAXVAL', ctx=Load())), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='factory', ctx=Load()), attr='mktemp', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='numbered', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='tmp_path', args=arguments(posonlyargs=[], args=[arg(arg='request', annotation=Name(id='FixtureRequest', ctx=Load())), arg(arg='tmp_path_factory', annotation=Name(id='TempPathFactory', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a temporary directory path object which is unique to each test\n    function invocation, created as a sub directory of the base temporary\n    directory.\n\n    By default, a new base temporary directory is created each test session,\n    and old bases are removed after 3 sessions, to aid in debugging.\n    This behavior can be configured with :confval:`tmp_path_retention_count` and\n    :confval:`tmp_path_retention_policy`.\n    If ``--basetemp`` is used then it is cleared each session. See :ref:`base\n    temporary directory`.\n\n    The returned object is a :class:`pathlib.Path` object.\n    ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='_mk_tmp', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='tmp_path_factory', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='path', ctx=Load()))), AnnAssign(target=Name(id='tmp_path_factory', ctx=Store()), annotation=Name(id='TempPathFactory', ctx=Load()), value=Attribute(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='session', ctx=Load()), attr='config', ctx=Load()), attr='_tmp_path_factory', ctx=Load()), simple=1), Assign(targets=[Name(id='policy', ctx=Store())], value=Attribute(value=Name(id='tmp_path_factory', ctx=Load()), attr='_retention_policy', ctx=Load())), Assign(targets=[Name(id='result_dict', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='tmppath_result_key', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='policy', ctx=Load()), ops=[Eq()], comparators=[Constant(value='failed')]), Call(func=Attribute(value=Name(id='result_dict', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='call'), Constant(value=True)], keywords=[])]), body=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True))]))], orelse=[]), Delete(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='node', ctx=Load()), attr='stash', ctx=Load()), slice=Name(id='tmppath_result_key', ctx=Load()), ctx=Del())])], decorator_list=[Name(id='fixture', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='Path', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_sessionfinish', args=arguments(posonlyargs=[], args=[arg(arg='session'), arg(arg='exitstatus', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ExitCode', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='After each session, remove base directory if all the tests passed,\n    the policy is "failed", and the basetemp is not specified by a user.\n    ')), AnnAssign(target=Name(id='tmp_path_factory', ctx=Store()), annotation=Name(id='TempPathFactory', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='config', ctx=Load()), attr='_tmp_path_factory', ctx=Load()), simple=1), Assign(targets=[Name(id='basetemp', ctx=Store())], value=Attribute(value=Name(id='tmp_path_factory', ctx=Load()), attr='_basetemp', ctx=Load())), If(test=Compare(left=Name(id='basetemp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='policy', ctx=Store())], value=Attribute(value=Name(id='tmp_path_factory', ctx=Load()), attr='_retention_policy', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='exitstatus', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='policy', ctx=Load()), ops=[Eq()], comparators=[Constant(value='failed')]), Compare(left=Attribute(value=Name(id='tmp_path_factory', ctx=Load()), attr='_given_basetemp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[If(test=Call(func=Attribute(value=Name(id='basetemp', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Name(id='basetemp', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=True))]))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='basetemp', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='cleanup_dead_symlinks', ctx=Load()), args=[Name(id='basetemp', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='pytest_runtest_makereport', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='call')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Yield()), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='CollectReport', ctx=Load()), value=Call(func=Attribute(value=Name(id='outcome', ctx=Load()), attr='get_result', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='empty', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='stash', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='tmppath_result_key', ctx=Load()), Name(id='empty', ctx=Load())], keywords=[]), slice=Attribute(value=Name(id='result', ctx=Load()), attr='when', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='passed', ctx=Load()))], decorator_list=[Call(func=Name(id='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='tryfirst', value=Constant(value=True)), keyword(arg='hookwrapper', value=Constant(value=True))])])], type_ignores=[])