Module(body=[Expr(value=Constant(value='Deprecation messages and bits of code used elsewhere in the codebase that\nis planned to be removed in the next pytest release.\n\nKeeping it in a central location makes it easy to track what is deprecated and should\nbe removed when the time comes.\n\nAll constants defined in this module should be either instances of\n:class:`PytestWarning`, or :class:`UnformattedWarning`\nin case of warnings which need to format their messages.\n')), ImportFrom(module='warnings', names=[alias(name='warn')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestDeprecationWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestRemovedIn8Warning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='UnformattedWarning')], level=0), Assign(targets=[Name(id='DEPRECATED_EXTERNAL_PLUGINS', ctx=Store())], value=Set(elts=[Constant(value='pytest_catchlog'), Constant(value='pytest_capturelog'), Constant(value='pytest_faulthandler')])), Assign(targets=[Name(id='NOSE_SUPPORT', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='Support for nose tests is deprecated and will be removed in a future release.\n{nodeid} is using nose method: `{method}` ({stage})\nSee docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose')], keywords=[])), Assign(targets=[Name(id='NOSE_SUPPORT_METHOD', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='Support for nose tests is deprecated and will be removed in a future release.\n{nodeid} is using nose-specific method: `{method}(self)`\nTo remove this warning, rename it to `{method}_method(self)`\nSee docs: https://docs.pytest.org/en/stable/deprecations.html#support-for-tests-written-for-nose')], keywords=[])), Assign(targets=[Name(id='YIELD_FIXTURE', ctx=Store())], value=Call(func=Name(id='PytestDeprecationWarning', ctx=Load()), args=[Constant(value='@pytest.yield_fixture is deprecated.\nUse @pytest.fixture instead; they are the same.')], keywords=[])), Assign(targets=[Name(id='WARNING_CMDLINE_PREPARSE_HOOK', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='The pytest_cmdline_preparse hook is deprecated and will be removed in a future release. \nPlease use pytest_load_initial_conftests hook instead.')], keywords=[])), Assign(targets=[Name(id='FSCOLLECTOR_GETHOOKPROXY_ISINITPATH', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='The gethookproxy() and isinitpath() methods of FSCollector and Package are deprecated; use self.session.gethookproxy() and self.session.isinitpath() instead. ')], keywords=[])), Assign(targets=[Name(id='STRICT_OPTION', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='The --strict option is deprecated, use --strict-markers instead.')], keywords=[])), Assign(targets=[Name(id='PRIVATE', ctx=Store())], value=Call(func=Name(id='PytestDeprecationWarning', ctx=Load()), args=[Constant(value='A private pytest class or function was used.')], keywords=[])), Assign(targets=[Name(id='ARGUMENT_PERCENT_DEFAULT', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='pytest now uses argparse. "%default" should be changed to "%(default)s"')], keywords=[])), Assign(targets=[Name(id='ARGUMENT_TYPE_STR_CHOICE', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='`type` argument to addoption() is the string {typ!r}. For choices this is optional and can be omitted,  but when supplied should be a type (for example `str` or `int`). (options: {names})')], keywords=[])), Assign(targets=[Name(id='ARGUMENT_TYPE_STR', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='`type` argument to addoption() is the string {typ!r},  but when supplied should be a type (for example `str` or `int`). (options: {names})')], keywords=[])), Assign(targets=[Name(id='HOOK_LEGACY_PATH_ARG', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='The ({pylib_path_arg}: py.path.local) argument is deprecated, please use ({pathlib_path_arg}: pathlib.Path)\nsee https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path')], keywords=[])), Assign(targets=[Name(id='NODE_CTOR_FSPATH_ARG', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='The (fspath: py.path.local) argument to {node_type_name} is deprecated. Please use the (path: pathlib.Path) argument instead.\nSee https://docs.pytest.org/en/latest/deprecations.html#fspath-argument-for-node-constructors-replaced-with-pathlib-path')], keywords=[])), Assign(targets=[Name(id='WARNS_NONE_ARG', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='Passing None has been deprecated.\nSee https://docs.pytest.org/en/latest/how-to/capture-warnings.html#additional-use-cases-of-warnings-in-tests for alternatives in common use cases.')], keywords=[])), Assign(targets=[Name(id='KEYWORD_MSG_ARG', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestRemovedIn8Warning', ctx=Load()), Constant(value='pytest.{func}(msg=...) is now deprecated, use pytest.{func}(reason=...) instead')], keywords=[])), Assign(targets=[Name(id='INSTANCE_COLLECTOR', ctx=Store())], value=Call(func=Name(id='PytestRemovedIn8Warning', ctx=Load()), args=[Constant(value='The pytest.Instance collector type is deprecated and is no longer used. See https://docs.pytest.org/en/latest/deprecations.html#the-pytest-instance-collector')], keywords=[])), Assign(targets=[Name(id='HOOK_LEGACY_MARKING', ctx=Store())], value=Call(func=Name(id='UnformattedWarning', ctx=Load()), args=[Name(id='PytestDeprecationWarning', ctx=Load()), Constant(value='The hook{type} {fullname} uses old-style configuration options (marks or attributes).\nPlease use the pytest.hook{type}({hook_opts}) decorator instead\n to configure the hooks.\n See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers')], keywords=[])), FunctionDef(name='check_ispytest', args=arguments(posonlyargs=[], args=[arg(arg='ispytest', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ispytest', ctx=Load())), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Name(id='PRIVATE', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=3))]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])