Module(body=[Import(names=[alias(name='threading')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='warnings')]), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), Import(names=[alias(name='pytest')]), ClassDef(name='catch_threading_exception', bases=[], keywords=[], body=[Expr(value=Constant(value='Context manager catching threading.Thread exception using\n    threading.excepthook.\n\n    Storing exc_value using a custom hook can create a reference cycle. The\n    reference cycle is broken explicitly when the context manager exits.\n\n    Storing thread using a custom hook can resurrect it if it is set to an\n    object which is being finalized. Exiting the context manager clears the\n    stored object.\n\n    Usage:\n        with threading_helper.catch_threading_exception() as cm:\n            # code spawning a thread which raises an exception\n            ...\n            # check the thread exception: use cm.args\n            ...\n        # cm.args attribute no longer exists at this point\n        # (to break a reference cycle)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='threading.ExceptHookArgs'), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_old_hook', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='threading.ExceptHookArgs')], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_hook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Constant(value='threading.ExceptHookArgs'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_old_hook', ctx=Store())], value=Attribute(value=Name(id='threading', ctx=Load()), attr='excepthook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='threading', ctx=Load()), attr='excepthook', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_hook', ctx=Load())), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='catch_threading_exception')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_old_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='threading', ctx=Load()), attr='excepthook', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_old_hook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_old_hook', ctx=Store())], value=Constant(value=None)), Delete(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Del())])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='thread_exception_runtest_hook', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='catch_threading_exception', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Yield()), If(test=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), body=[Assign(targets=[Name(id='thread_name', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), attr='thread', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value='<unknown>'), orelse=Attribute(value=Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), attr='thread', ctx=Load()), attr='name', ctx=Load()))), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Exception in thread '), FormattedValue(value=Name(id='thread_name', ctx=Load()), conversion=-1), Constant(value='\n\n')])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), attr='exc_type', ctx=Load()), Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), attr='exc_value', ctx=Load()), Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='args', ctx=Load()), attr='exc_traceback', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='PytestUnhandledThreadExceptionWarning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_setup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='thread_exception_runtest_hook', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='trylast', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_call', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='thread_exception_runtest_hook', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pytest_runtest_teardown', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='thread_exception_runtest_hook', ctx=Load()), args=[], keywords=[])))], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='hookimpl', ctx=Load()), args=[], keywords=[keyword(arg='hookwrapper', value=Constant(value=True)), keyword(arg='tryfirst', value=Constant(value=True))])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])