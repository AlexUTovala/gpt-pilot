Module(body=[Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='os')]), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='pprint', names=[alias(name='pprint')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='Dict')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='typing', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionChainRepr')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ExceptionRepr')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprEntry')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprEntryNative')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprExceptionInfo')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprFileLocation')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprFuncArgs')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprLocals')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='ReprTraceback')], level=0), ImportFrom(module='_pytest._code.code', names=[alias(name='TerminalRepr')], level=0), ImportFrom(module='_pytest._io', names=[alias(name='TerminalWriter')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='CallInfo')], level=0)], orelse=[]), FunctionDef(name='getworkerinfoline', args=arguments(posonlyargs=[], args=[arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='_workerinfocache', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Attribute(value=Name(id='node', ctx=Load()), attr='workerinfo', ctx=Load())), Assign(targets=[Name(id='ver', ctx=Store())], value=BinOp(left=Constant(value='%s.%s.%s'), op=Mod(), right=Subscript(value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='version_info'), ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))), Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='_workerinfocache', ctx=Store()), Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Constant(value='[{}] {} -- Python {} {}'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='id'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='sysplatform'), ctx=Load()), Name(id='ver', ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='executable'), ctx=Load())], keywords=[])), Return(value=Name(id='s', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='_R', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_R')], keywords=[keyword(arg='bound', value=Constant(value='BaseReport'))])), ClassDef(name='BaseReport', bases=[], keywords=[], body=[AnnAssign(target=Name(id='when', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='location', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='longrepr', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='sections', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='nodeid', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='outcome', ctx=Store()), annotation=Constant(value="Literal['passed', 'failed', 'skipped']"), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='Any', ctx=Load()))], orelse=[]), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='out', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='node')], keywords=[]), body=[Assign(targets=[Name(id='worker_info', ctx=Store())], value=Call(func=Name(id='getworkerinfoline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load())], keywords=[])), If(test=Name(id='worker_info', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='worker_info', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='longrepr', ctx=Load())), If(test=Compare(left=Name(id='longrepr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='longrepr', ctx=Load()), Constant(value='toterminal')], keywords=[]), body=[Assign(targets=[Name(id='longrepr_terminal', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TerminalRepr', ctx=Load()), Name(id='longrepr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='longrepr_terminal', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='longrepr', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='<unprintable longrepr>'))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='line', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_sections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='sections', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='prefix', ctx=Load()), Name(id='content', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='longreprtext', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read-only property that returns the full string representation of\n        ``longrepr``.\n\n        .. versionadded:: 3.0\n        ')), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tw', ctx=Store())], value=Call(func=Name(id='TerminalWriter', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='tw', ctx=Load()), attr='hasmarkup', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='toterminal', ctx=Load()), args=[Name(id='tw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='exc', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='caplog', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return captured log lines, if log capturing is enabled.\n\n        .. versionadded:: 3.5\n        ')), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Name(id='content', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sections', ctx=Load()), args=[Constant(value='Captured log')], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='capstdout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return captured text from stdout, if capturing is enabled.\n\n        .. versionadded:: 3.0\n        ')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Name(id='content', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sections', ctx=Load()), args=[Constant(value='Captured stdout')], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='capstderr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return captured text from stderr, if capturing is enabled.\n\n        .. versionadded:: 3.0\n        ')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Name(id='content', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sections', ctx=Load()), args=[Constant(value='Captured stderr')], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='passed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether the outcome is passed.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), ops=[Eq()], comparators=[Constant(value='passed')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='failed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether the outcome is failed.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), ops=[Eq()], comparators=[Constant(value='failed')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='skipped', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether the outcome is skipped.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), ops=[Eq()], comparators=[Constant(value='skipped')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='fspath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The path portion of the reported node, as a string.')), Return(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='count_towards_summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='**Experimental** Whether this report should be counted towards the\n        totals shown at the end of the test session: "1 passed, 1 failure, etc".\n\n        .. note::\n\n            This function is considered **experimental**, so beware that it is subject to changes\n            even in patch releases.\n        ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='head_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='**Experimental** The head line shown with longrepr output for this\n        report, more commonly during traceback representation during\n        failures::\n\n            ________ Test.foo ________\n\n\n        In the example above, the head_line is "Test.foo".\n\n        .. note::\n\n            This function is considered **experimental**, so beware that it is subject to changes\n            even in patch releases.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='location', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='fspath', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='domain', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='location', ctx=Load())), Return(value=Name(id='domain', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_verbose_word', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='Config', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_category', ctx=Store()), Name(id='_short', ctx=Store()), Name(id='verbose', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='config', ctx=Load()), attr='hook', ctx=Load()), attr='pytest_report_teststatus', ctx=Load()), args=[], keywords=[keyword(arg='report', value=Name(id='self', ctx=Load())), keyword(arg='config', value=Name(id='config', ctx=Load()))])), Return(value=Name(id='verbose', ctx=Load()))], decorator_list=[]), FunctionDef(name='_to_json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the contents of this report as a dict of builtin entries,\n        suitable for serialization.\n\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Experimental method.\n        ')), Return(value=Call(func=Name(id='_report_to_json', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_from_json', args=arguments(posonlyargs=[], args=[arg(arg='cls', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='_R', ctx=Load()), ctx=Load())), arg(arg='reportdict', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create either a TestReport or CollectReport, depending on the calling class.\n\n        It is the callers responsibility to know which class to pass here.\n\n        This was originally the serialize_report() function from xdist (ca03269).\n\n        Experimental method.\n        ')), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Name(id='_report_kwargs_from_json', ctx=Load()), args=[Name(id='reportdict', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='_R', ctx=Load()))], decorator_list=[]), FunctionDef(name='_report_unserialization_failure', args=arguments(posonlyargs=[], args=[arg(arg='type_name', annotation=Name(id='str', ctx=Load())), arg(arg='report_class', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseReport', ctx=Load()), ctx=Load())), arg(arg='reportdict')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='https://github.com/pytest-dev/pytest/issues')), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=100))], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[BinOp(left=Constant(value='INTERNALERROR: Unknown entry type returned: %s'), op=Mod(), right=Name(id='type_name', ctx=Load()))], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[BinOp(left=Constant(value='report_name: %s'), op=Mod(), right=Name(id='report_class', ctx=Load()))], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[Name(id='reportdict', ctx=Load())], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[BinOp(left=Constant(value='Please report this bug at %s'), op=Mod(), right=Name(id='url', ctx=Load()))], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=100))], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), ClassDef(name='TestReport', bases=[Name(id='BaseReport', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Basic test report object (also used for setup and teardown calls if\n    they fail).\n\n    Reports can contain arbitrary extra attributes.\n    ')), Assign(targets=[Name(id='__test__', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='keywords', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='outcome', annotation=Constant(value="Literal['passed', 'failed', 'skipped']")), arg(arg='longrepr', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='when', annotation=Constant(value="Literal['setup', 'call', 'teardown']")), arg(arg='sections', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='duration', annotation=Name(id='float', ctx=Load())), arg(arg='start', annotation=Name(id='float', ctx=Load())), arg(arg='stop', annotation=Name(id='float', ctx=Load())), arg(arg='user_properties', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='extra'), defaults=[Tuple(elts=[], ctx=Load()), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Store())], value=Name(id='nodeid', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='location', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Name(id='location', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Name(id='keywords', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store())], value=Name(id='outcome', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='longrepr', ctx=Store())], value=Name(id='longrepr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='when', ctx=Store())], value=Name(id='when', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_properties', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='user_properties', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sections', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='sections', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='duration', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='duration', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='start', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='stop', ctx=Load()), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{} {!r} when={!r} outcome={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='when', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='from_item_and_call', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='item', annotation=Name(id='Item', ctx=Load())), arg(arg='call', annotation=Constant(value='CallInfo[None]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create and fill a TestReport with standard item and call info.\n\n        :param item: The item.\n        :param call: The call info.\n        ')), Assign(targets=[Name(id='when', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='when', ctx=Load())), Assert(test=Compare(left=Name(id='when', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='collect')])), Assign(targets=[Name(id='duration', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='duration', ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='start', ctx=Load())), Assign(targets=[Name(id='stop', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='stop', ctx=Load())), Assign(targets=[Name(id='keywords', ctx=Store())], value=DictComp(key=Name(id='x', ctx=Load()), value=Constant(value=1), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='item', ctx=Load()), attr='keywords', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='excinfo', ctx=Store())], value=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())), Assign(targets=[Name(id='sections', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='call', ctx=Load()), attr='excinfo', ctx=Load())), body=[AnnAssign(target=Name(id='outcome', ctx=Store()), annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='passed'), Constant(value='failed'), Constant(value='skipped')], ctx=Load()), ctx=Load()), value=Constant(value='passed'), simple=1), AnnAssign(target=Name(id='longrepr', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1)], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='excinfo', ctx=Load()), Name(id='ExceptionInfo', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='failed')), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Name(id='excinfo', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='skip', ctx=Load()), attr='Exception', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='skipped')), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='excinfo', ctx=Load()), attr='_getreprcrash', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Name(id='r', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='There should always be a traceback entry for skipping a test.')), If(test=Attribute(value=Attribute(value=Name(id='excinfo', ctx=Load()), attr='value', ctx=Load()), attr='_use_item_location', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='reportinfo', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())), Assert(test=Compare(left=Name(id='line', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='r', ctx=Load()), attr='message', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='longrepr', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='path', ctx=Load())], keywords=[]), Attribute(value=Name(id='r', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='r', ctx=Load()), attr='message', ctx=Load())], ctx=Load()))])], orelse=[Assign(targets=[Name(id='outcome', ctx=Store())], value=Constant(value='failed')), If(test=Compare(left=Attribute(value=Name(id='call', ctx=Load()), attr='when', ctx=Load()), ops=[Eq()], comparators=[Constant(value='call')]), body=[Assign(targets=[Name(id='longrepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='repr_failure', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='longrepr', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='_repr_failure_py', ctx=Load()), args=[Name(id='excinfo', ctx=Load())], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Attribute(value=Name(id='item', ctx=Load()), attr='config', ctx=Load()), attr='getoption', ctx=Load()), args=[Constant(value='tbstyle'), Constant(value='auto')], keywords=[]))]))])])])]), For(target=Tuple(elts=[Name(id='rwhen', ctx=Store()), Name(id='key', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='item', ctx=Load()), attr='_report_sections', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sections', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[Constant(value='Captured '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='rwhen', ctx=Load()), conversion=-1)]), Name(id='content', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='nodeid', ctx=Load()), Attribute(value=Name(id='item', ctx=Load()), attr='location', ctx=Load()), Name(id='keywords', ctx=Load()), Name(id='outcome', ctx=Load()), Name(id='longrepr', ctx=Load()), Name(id='when', ctx=Load()), Name(id='sections', ctx=Load()), Name(id='duration', ctx=Load()), Name(id='start', ctx=Load()), Name(id='stop', ctx=Load())], keywords=[keyword(arg='user_properties', value=Attribute(value=Name(id='item', ctx=Load()), attr='user_properties', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='TestReport'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='CollectReport', bases=[Name(id='BaseReport', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Collection report object.\n\n    Reports can contain arbitrary extra attributes.\n    ')), Assign(targets=[Name(id='when', ctx=Store())], value=Constant(value='collect')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nodeid', annotation=Name(id='str', ctx=Load())), arg(arg='outcome', annotation=Constant(value="Literal['passed', 'failed', 'skipped']")), arg(arg='longrepr', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='ExceptionInfo', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='TerminalRepr', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='result', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Item', ctx=Load()), Name(id='Collector', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='sections', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='extra'), defaults=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Store())], value=Name(id='nodeid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store())], value=Name(id='outcome', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='longrepr', ctx=Store())], value=Name(id='longrepr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='result', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sections', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='sections', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='fspath', ctx=Load()), Constant(value=None), Attribute(value=Name(id='self', ctx=Load()), attr='fspath', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<CollectReport {!r} lenresult={} outcome={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='nodeid', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='CollectErrorRepr', bases=[Name(id='TerminalRepr', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='longrepr', ctx=Store())], value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='toterminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='out', annotation=Name(id='TerminalWriter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='line', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[keyword(arg='red', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='pytest_report_to_serializable', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='CollectReport', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='report', ctx=Load()), Tuple(elts=[Name(id='TestReport', ctx=Load()), Name(id='CollectReport', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='report', ctx=Load()), attr='_to_json', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='$report_type'), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='report', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), Return(value=Name(id='data', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='pytest_report_from_serializable', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='$report_type'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='$report_type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='TestReport')]), body=[Return(value=Call(func=Attribute(value=Name(id='TestReport', ctx=Load()), attr='_from_json', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='$report_type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='CollectReport')]), body=[Return(value=Call(func=Attribute(value=Name(id='CollectReport', ctx=Load()), attr='_from_json', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[])]), Assert(test=Constant(value=False), msg=Call(func=Attribute(value=Constant(value='Unknown report_type unserialize data: {}'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='$report_type'), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='CollectReport', ctx=Load()), Name(id='TestReport', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_report_to_json', args=arguments(posonlyargs=[], args=[arg(arg='report', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the contents of this report as a dict of builtin entries,\n    suitable for serialization.\n\n    This was originally the serialize_report() function from xdist (ca03269).\n    ')), FunctionDef(name='serialize_repr_entry', args=arguments(posonlyargs=[], args=[arg(arg='entry', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ReprEntry', ctx=Load()), Name(id='ReprEntryNative', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='asdict', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__dict__')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='asdict', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='entry_data', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='data')], values=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), Name(id='data', ctx=Load())])), Return(value=Name(id='entry_data', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='serialize_repr_traceback', args=arguments(posonlyargs=[], args=[arg(arg='reprtraceback', annotation=Name(id='ReprTraceback', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='asdict', ctx=Load()), args=[Name(id='reprtraceback', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='reprentries'), ctx=Store())], value=ListComp(elt=Call(func=Name(id='serialize_repr_entry', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='reprtraceback', ctx=Load()), attr='reprentries', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='serialize_repr_crash', args=arguments(posonlyargs=[], args=[arg(arg='reprcrash', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ReprFileLocation', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='reprcrash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='dataclasses', ctx=Load()), attr='asdict', ctx=Load()), args=[Name(id='reprcrash', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value=None))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='serialize_exception_longrepr', args=arguments(posonlyargs=[], args=[arg(arg='rep', annotation=Name(id='BaseReport', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='longrepr', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='ExceptionRepr', ctx=Load()), Attribute(value=Name(id='rep', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='reprcrash'), Constant(value='reprtraceback'), Constant(value='sections')], values=[Call(func=Name(id='serialize_repr_crash', ctx=Load()), args=[Attribute(value=Name(id='longrepr', ctx=Load()), attr='reprcrash', ctx=Load())], keywords=[]), Call(func=Name(id='serialize_repr_traceback', ctx=Load()), args=[Attribute(value=Name(id='longrepr', ctx=Load()), attr='reprtraceback', ctx=Load())], keywords=[]), Attribute(value=Name(id='longrepr', ctx=Load()), attr='sections', ctx=Load())]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='longrepr', ctx=Load()), Name(id='ExceptionChainRepr', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='chain'), ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='repr_traceback', ctx=Store()), Name(id='repr_crash', ctx=Store()), Name(id='description', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='longrepr', ctx=Load()), attr='chain', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='chain'), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='serialize_repr_traceback', ctx=Load()), args=[Name(id='repr_traceback', ctx=Load())], keywords=[]), Call(func=Name(id='serialize_repr_crash', ctx=Load()), args=[Name(id='repr_crash', ctx=Load())], keywords=[]), Name(id='description', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='chain'), ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='report', ctx=Load()), attr='__dict__', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Constant(value='toterminal')], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Constant(value='reprtraceback')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()), Constant(value='reprcrash')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='longrepr'), ctx=Store())], value=Call(func=Name(id='serialize_exception_longrepr', ctx=Load()), args=[Name(id='report', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='longrepr'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='longrepr'), ctx=Store())], value=Attribute(value=Name(id='report', ctx=Load()), attr='longrepr', ctx=Load()))]), For(target=Name(id='name', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='result')]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[])])], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_report_kwargs_from_json', args=arguments(posonlyargs=[], args=[arg(arg='reportdict', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return **kwargs that can be used to construct a TestReport or\n    CollectReport instance.\n\n    This was originally the serialize_report() function from xdist (ca03269).\n    ')), FunctionDef(name='deserialize_repr_entry', args=arguments(posonlyargs=[], args=[arg(arg='entry_data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='entry_data', ctx=Load()), slice=Constant(value='data'), ctx=Load())), Assign(targets=[Name(id='entry_type', ctx=Store())], value=Subscript(value=Name(id='entry_data', ctx=Load()), slice=Constant(value='type'), ctx=Load())), If(test=Compare(left=Name(id='entry_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ReprEntry')]), body=[Assign(targets=[Name(id='reprfuncargs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='reprfileloc', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='reprlocals', ctx=Store())], value=Constant(value=None)), If(test=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprfuncargs'), ctx=Load()), body=[Assign(targets=[Name(id='reprfuncargs', ctx=Store())], value=Call(func=Name(id='ReprFuncArgs', ctx=Load()), args=[], keywords=[keyword(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprfuncargs'), ctx=Load()))]))], orelse=[]), If(test=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprfileloc'), ctx=Load()), body=[Assign(targets=[Name(id='reprfileloc', ctx=Store())], value=Call(func=Name(id='ReprFileLocation', ctx=Load()), args=[], keywords=[keyword(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprfileloc'), ctx=Load()))]))], orelse=[]), If(test=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprlocals'), ctx=Load()), body=[Assign(targets=[Name(id='reprlocals', ctx=Store())], value=Call(func=Name(id='ReprLocals', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='reprlocals'), ctx=Load()), slice=Constant(value='lines'), ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='reprentry', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ReprEntry', ctx=Load()), Name(id='ReprEntryNative', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='ReprEntry', ctx=Load()), args=[], keywords=[keyword(arg='lines', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='lines'), ctx=Load())), keyword(arg='reprfuncargs', value=Name(id='reprfuncargs', ctx=Load())), keyword(arg='reprlocals', value=Name(id='reprlocals', ctx=Load())), keyword(arg='reprfileloc', value=Name(id='reprfileloc', ctx=Load())), keyword(arg='style', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='style'), ctx=Load()))]), simple=1)], orelse=[If(test=Compare(left=Name(id='entry_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ReprEntryNative')]), body=[Assign(targets=[Name(id='reprentry', ctx=Store())], value=Call(func=Name(id='ReprEntryNative', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='lines'), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_report_unserialization_failure', ctx=Load()), args=[Name(id='entry_type', ctx=Load()), Name(id='TestReport', ctx=Load()), Name(id='reportdict', ctx=Load())], keywords=[]))])]), Return(value=Name(id='reprentry', ctx=Load()))], decorator_list=[]), FunctionDef(name='deserialize_repr_traceback', args=arguments(posonlyargs=[], args=[arg(arg='repr_traceback_dict')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='repr_traceback_dict', ctx=Load()), slice=Constant(value='reprentries'), ctx=Store())], value=ListComp(elt=Call(func=Name(id='deserialize_repr_entry', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='repr_traceback_dict', ctx=Load()), slice=Constant(value='reprentries'), ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='ReprTraceback', ctx=Load()), args=[], keywords=[keyword(value=Name(id='repr_traceback_dict', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='deserialize_repr_crash', args=arguments(posonlyargs=[], args=[arg(arg='repr_crash_dict', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='repr_crash_dict', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='ReprFileLocation', ctx=Load()), args=[], keywords=[keyword(value=Name(id='repr_crash_dict', ctx=Load()))]))], orelse=[Return(value=Constant(value=None))])], decorator_list=[]), If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), Compare(left=Constant(value='reprcrash'), ops=[In()], comparators=[Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load())]), Compare(left=Constant(value='reprtraceback'), ops=[In()], comparators=[Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load())])]), body=[Assign(targets=[Name(id='reprtraceback', ctx=Store())], value=Call(func=Name(id='deserialize_repr_traceback', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), slice=Constant(value='reprtraceback'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='reprcrash', ctx=Store())], value=Call(func=Name(id='deserialize_repr_crash', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), slice=Constant(value='reprcrash'), ctx=Load())], keywords=[])), If(test=Subscript(value=Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), slice=Constant(value='chain'), ctx=Load()), body=[Assign(targets=[Name(id='chain', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='repr_traceback_data', ctx=Store()), Name(id='repr_crash_data', ctx=Store()), Name(id='description', ctx=Store())], ctx=Store()), iter=Subscript(value=Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), slice=Constant(value='chain'), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='chain', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='deserialize_repr_traceback', ctx=Load()), args=[Name(id='repr_traceback_data', ctx=Load())], keywords=[]), Call(func=Name(id='deserialize_repr_crash', ctx=Load()), args=[Name(id='repr_crash_data', ctx=Load())], keywords=[]), Name(id='description', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='exception_info', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ExceptionChainRepr', ctx=Load()), Name(id='ReprExceptionInfo', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='ExceptionChainRepr', ctx=Load()), args=[Name(id='chain', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='exception_info', ctx=Store())], value=Call(func=Name(id='ReprExceptionInfo', ctx=Load()), args=[], keywords=[keyword(arg='reprtraceback', value=Name(id='reprtraceback', ctx=Load())), keyword(arg='reprcrash', value=Name(id='reprcrash', ctx=Load()))]))]), For(target=Name(id='section', ctx=Store()), iter=Subscript(value=Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Load()), slice=Constant(value='sections'), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='exception_info', ctx=Load()), attr='addsection', ctx=Load()), args=[Starred(value=Name(id='section', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='reportdict', ctx=Load()), slice=Constant(value='longrepr'), ctx=Store())], value=Name(id='exception_info', ctx=Load()))], orelse=[]), Return(value=Name(id='reportdict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])