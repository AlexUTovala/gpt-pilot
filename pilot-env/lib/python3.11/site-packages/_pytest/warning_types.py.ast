Module(body=[Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='warnings')]), ImportFrom(module='types', names=[alias(name='FunctionType')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), ImportFrom(module='_pytest.compat', names=[alias(name='final')], level=0), ClassDef(name='PytestWarning', bases=[Name(id='UserWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for all warnings emitted by pytest.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[]), ClassDef(name='PytestAssertRewriteWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted by the pytest assert rewrite module.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestCacheWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted by the cache plugin in various situations.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestConfigWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted for configuration issues.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestCollectionWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted when pytest is not able to collect a file or symbol in a module.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestDeprecationWarning', bases=[Name(id='PytestWarning', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning class for features that will be removed in a future version.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[]), ClassDef(name='PytestRemovedIn8Warning', bases=[Name(id='PytestDeprecationWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning class for features that will be removed in pytest 8.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[]), ClassDef(name='PytestReturnNotNoneWarning', bases=[Name(id='PytestRemovedIn8Warning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted when a test function is returning value other than None.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[]), ClassDef(name='PytestExperimentalApiWarning', bases=[Name(id='PytestWarning', ctx=Load()), Name(id='FutureWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning category used to denote experiments in pytest.\n\n    Use sparingly as the API might change or even be removed completely in a\n    future version.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest')), FunctionDef(name='simple', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='apiname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{apiname} is an experimental api that may change over time'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='apiname', value=Name(id='apiname', ctx=Load()))])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='PytestExperimentalApiWarning'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestUnhandledCoroutineWarning', bases=[Name(id='PytestReturnNotNoneWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted for an unhandled coroutine.\n\n    A coroutine was encountered when collecting test functions, but was not\n    handled by any async-aware plugin.\n    Coroutine test functions are not natively supported.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestUnknownMarkWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warning emitted on use of unknown markers.\n\n    See :ref:`mark` for details.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestUnraisableExceptionWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An unraisable exception was reported.\n\n    Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>`\n    implementations and similar situations when the exception cannot be raised\n    as normal.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), ClassDef(name='PytestUnhandledThreadExceptionWarning', bases=[Name(id='PytestWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An unhandled exception occurred in a :class:`~threading.Thread`.\n\n    Such exceptions don't propagate normally.\n    ")), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='pytest'))], decorator_list=[Name(id='final', ctx=Load())]), Assign(targets=[Name(id='_W', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_W')], keywords=[keyword(arg='bound', value=Name(id='PytestWarning', ctx=Load()))])), ClassDef(name='UnformattedWarning', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_W', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A warning meant to be formatted during runtime.\n\n    This is used to hold warnings that need to format their message at runtime,\n    as opposed to a direct message.\n    ')), AnnAssign(target=Name(id='category', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='_W'), ctx=Load()), simple=1), AnnAssign(target=Name(id='template', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Return an instance of the warning category, formatted with given kwargs.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='category', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='_W', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load()), Attribute(value=Name(id='dataclasses', ctx=Load()), attr='dataclass', ctx=Load())]), FunctionDef(name='warn_explicit_for', args=arguments(posonlyargs=[], args=[arg(arg='method', annotation=Name(id='FunctionType', ctx=Load())), arg(arg='message', annotation=Name(id='PytestWarning', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Issue the warning :param:`message` for the definition of the given :param:`method`\n\n    this helps to log warnings for functions defined prior to finding an issue with them\n    (like hook wrappers being marked in a legacy mechanism)\n    ')), Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='method', ctx=Load()), attr='__code__', ctx=Load()), attr='co_firstlineno', ctx=Load())), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfile', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), Assign(targets=[Name(id='module', ctx=Store())], value=Attribute(value=Name(id='method', ctx=Load()), attr='__module__', ctx=Load())), Assign(targets=[Name(id='mod_globals', ctx=Store())], value=Attribute(value=Name(id='method', ctx=Load()), attr='__globals__', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn_explicit', ctx=Load()), args=[Name(id='message', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], keywords=[keyword(arg='filename', value=Name(id='filename', ctx=Load())), keyword(arg='module', value=Name(id='module', ctx=Load())), keyword(arg='registry', value=Call(func=Attribute(value=Name(id='mod_globals', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='__warningregistry__'), Dict(keys=[], values=[])], keywords=[])), keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Warning', ctx=Load()), name='w', body=[Raise(exc=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), args=[JoinedStr(values=[FormattedValue(value=Name(id='w', ctx=Load()), conversion=-1), Constant(value='\n at '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value=':'), FormattedValue(value=Name(id='lineno', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])