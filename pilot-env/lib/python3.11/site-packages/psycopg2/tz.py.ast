Module(body=[Expr(value=Constant(value="tzinfo implementations for psycopg2\n\nThis module holds two different tzinfo implementations that can be used as\nthe 'tzinfo' argument to datetime constructors, directly passed to psycopg\nfunctions or used to set the .tzinfo_factory attribute in cursors.\n")), Import(names=[alias(name='datetime')]), Import(names=[alias(name='time')]), Assign(targets=[Name(id='ZERO', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[Constant(value=0)], keywords=[])), ClassDef(name='FixedOffsetTimezone', bases=[Attribute(value=Name(id='datetime', ctx=Load()), attr='tzinfo', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Fixed offset in minutes east from UTC.\n\n    This is exactly the implementation__ found in Python 2.3.x documentation,\n    with a small change to the `!__init__()` method to allow for pickling\n    and a default name in the form ``sHH:MM`` (``s`` is the sign.).\n\n    The implementation also caches instances. During creation, if a\n    FixedOffsetTimezone instance has previously been created with the same\n    offset and name that instance will be returned. This saves memory and\n    improves comparability.\n\n    .. versionchanged:: 2.9\n\n        The constructor can take either a timedelta or a number of minutes of\n        offset. Previously only minutes were supported.\n\n    .. __: https://docs.python.org/library/datetime.html\n    ')), Assign(targets=[Name(id='_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='_offset', ctx=Store())], value=Name(id='ZERO', ctx=Load())), Assign(targets=[Name(id='_cache', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='offset', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='offset', ctx=Load()), Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='offset', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='minutes', value=Name(id='offset', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Store())], value=Name(id='offset', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='offset'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a suitable instance created earlier if it exists\n        ')), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='offset', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load())), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='tz', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='offset', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='tz', ctx=Load())), Return(value=Name(id='tz', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='psycopg2.tz.FixedOffsetTimezone(offset=%r, name=%r)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='FixedOffsetTimezone', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_offset', ctx=Load())]))], orelse=[Return(value=Name(id='NotImplemented', ctx=Load()))])], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='FixedOffsetTimezone', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_offset', ctx=Load())]))], orelse=[Return(value=Name(id='NotImplemented', ctx=Load()))])], decorator_list=[]), FunctionDef(name='__getinitargs__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='utcoffset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()))], decorator_list=[]), FunctionDef(name='tzname', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='minutes', ctx=Store()), Name(id='seconds', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_offset', ctx=Load()), attr='total_seconds', ctx=Load()), args=[], keywords=[]), Constant(value=60)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hours', ctx=Store()), Name(id='minutes', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='minutes', ctx=Load()), Constant(value=60)], keywords=[])), Assign(targets=[Name(id='rv', ctx=Store())], value=BinOp(left=Constant(value='%+03d'), op=Mod(), right=Name(id='hours', ctx=Load()))), If(test=BoolOp(op=Or(), values=[Name(id='minutes', ctx=Load()), Name(id='seconds', ctx=Load())]), body=[AugAssign(target=Name(id='rv', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=':%02d'), op=Mod(), right=Name(id='minutes', ctx=Load()))), If(test=Name(id='seconds', ctx=Load()), body=[AugAssign(target=Name(id='rv', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=':%02d'), op=Mod(), right=Name(id='seconds', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[]), FunctionDef(name='dst', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='ZERO', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='STDOFFSET', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='time', ctx=Load()), attr='timezone', ctx=Load())))])), If(test=Attribute(value=Name(id='time', ctx=Load()), attr='daylight', ctx=Load()), body=[Assign(targets=[Name(id='DSTOFFSET', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='time', ctx=Load()), attr='altzone', ctx=Load())))]))], orelse=[Assign(targets=[Name(id='DSTOFFSET', ctx=Store())], value=Name(id='STDOFFSET', ctx=Load()))]), Assign(targets=[Name(id='DSTDIFF', ctx=Store())], value=BinOp(left=Name(id='DSTOFFSET', ctx=Load()), op=Sub(), right=Name(id='STDOFFSET', ctx=Load()))), ClassDef(name='LocalTimezone', bases=[Attribute(value=Name(id='datetime', ctx=Load()), attr='tzinfo', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Platform idea of local timezone.\n\n    This is the exact implementation from the Python 2.3 documentation.\n    ')), FunctionDef(name='utcoffset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_isdst', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[]), body=[Return(value=Name(id='DSTOFFSET', ctx=Load()))], orelse=[Return(value=Name(id='STDOFFSET', ctx=Load()))])], decorator_list=[]), FunctionDef(name='dst', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_isdst', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[]), body=[Return(value=Name(id='DSTDIFF', ctx=Load()))], orelse=[Return(value=Name(id='ZERO', ctx=Load()))])], decorator_list=[]), FunctionDef(name='tzname', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='time', ctx=Load()), attr='tzname', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_isdst', ctx=Load()), args=[Name(id='dt', ctx=Load())], keywords=[]), ctx=Load()))], decorator_list=[]), FunctionDef(name='_isdst', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tt', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='dt', ctx=Load()), attr='year', ctx=Load()), Attribute(value=Name(id='dt', ctx=Load()), attr='month', ctx=Load()), Attribute(value=Name(id='dt', ctx=Load()), attr='day', ctx=Load()), Attribute(value=Name(id='dt', ctx=Load()), attr='hour', ctx=Load()), Attribute(value=Name(id='dt', ctx=Load()), attr='minute', ctx=Load()), Attribute(value=Name(id='dt', ctx=Load()), attr='second', ctx=Load()), Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='weekday', ctx=Load()), args=[], keywords=[]), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())), Assign(targets=[Name(id='stamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='mktime', ctx=Load()), args=[Name(id='tt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tt', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Name(id='stamp', ctx=Load())], keywords=[])), Return(value=Compare(left=Attribute(value=Name(id='tt', ctx=Load()), attr='tm_isdst', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='LOCAL', ctx=Store())], value=Call(func=Name(id='LocalTimezone', ctx=Load()), args=[], keywords=[]))], type_ignores=[])