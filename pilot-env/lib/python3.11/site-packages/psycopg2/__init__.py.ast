Module(body=[Expr(value=Constant(value='A Python driver for PostgreSQL\n\npsycopg is a PostgreSQL_ database adapter for the Python_ programming\nlanguage. This is version 2, a complete rewrite of the original code to\nprovide new-style classes for connection and cursor objects and other sweet\ncandies. Like the original, psycopg 2 was written with the aim of being very\nsmall and fast, and stable as a rock.\n\nHomepage: https://psycopg.org/\n\n.. _PostgreSQL: https://www.postgresql.org/\n.. _Python: https://www.python.org/\n\n:Groups:\n  * `Connections creation`: connect\n  * `Value objects constructors`: Binary, Date, DateFromTicks, Time,\n    TimeFromTicks, Timestamp, TimestampFromTicks\n')), ImportFrom(module='psycopg2._psycopg', names=[alias(name='BINARY'), alias(name='NUMBER'), alias(name='STRING'), alias(name='DATETIME'), alias(name='ROWID'), alias(name='Binary'), alias(name='Date'), alias(name='Time'), alias(name='Timestamp'), alias(name='DateFromTicks'), alias(name='TimeFromTicks'), alias(name='TimestampFromTicks'), alias(name='Error'), alias(name='Warning'), alias(name='DataError'), alias(name='DatabaseError'), alias(name='ProgrammingError'), alias(name='IntegrityError'), alias(name='InterfaceError'), alias(name='InternalError'), alias(name='NotSupportedError'), alias(name='OperationalError'), alias(name='_connect'), alias(name='apilevel'), alias(name='threadsafety'), alias(name='paramstyle'), alias(name='__version__'), alias(name='__libpq_version__')], level=0), ImportFrom(module='psycopg2', names=[alias(name='extensions', asname='_ext')], level=0), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Name(id='tuple', ctx=Load()), Attribute(value=Name(id='_ext', ctx=Load()), attr='SQL_IN', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[]), Attribute(value=Name(id='_ext', ctx=Load()), attr='NoneAdapter', ctx=Load())], keywords=[])), ImportFrom(module='decimal', names=[alias(name='Decimal')], level=0), ImportFrom(module='psycopg2._psycopg', names=[alias(name='Decimal', asname='Adapter')], level=0), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Name(id='Decimal', ctx=Load()), Name(id='Adapter', ctx=Load())], keywords=[])), Delete(targets=[Name(id='Decimal', ctx=Del()), Name(id='Adapter', ctx=Del())]), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='dsn'), arg(arg='connection_factory'), arg(arg='cursor_factory')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Create a new database connection.\n\n    The connection parameters can be specified as a string:\n\n        conn = psycopg2.connect("dbname=test user=postgres password=secret")\n\n    or using a set of keyword arguments:\n\n        conn = psycopg2.connect(database="test", user="postgres", password="secret")\n\n    Or as a mix of both. The basic connection parameters are:\n\n    - *dbname*: the database name\n    - *database*: the database name (only as keyword argument)\n    - *user*: user name used to authenticate\n    - *password*: password used to authenticate\n    - *host*: database host address (defaults to UNIX socket if not provided)\n    - *port*: connection port number (defaults to 5432 if not provided)\n\n    Using the *connection_factory* parameter a different class or connections\n    factory can be specified. It should be a callable object taking a dsn\n    argument.\n\n    Using the *cursor_factory* parameter, a new default cursor factory will be\n    used by cursor().\n\n    Using *async*=True an asynchronous connection will be created. *async_* is\n    a valid alias (for Python versions where ``async`` is a keyword).\n\n    Any other keyword parameter will be passed to the underlying client\n    library: the list of supported parameters depends on the library version.\n\n    ')), Assign(targets=[Name(id='kwasync', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Constant(value='async'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwasync', ctx=Load()), slice=Constant(value='async'), ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='async')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='async_'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwasync', ctx=Load()), slice=Constant(value='async_'), ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='async_')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dsn', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='make_dsn', ctx=Load()), args=[Name(id='dsn', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Name(id='_connect', ctx=Load()), args=[Name(id='dsn', ctx=Load())], keywords=[keyword(arg='connection_factory', value=Name(id='connection_factory', ctx=Load())), keyword(value=Name(id='kwasync', ctx=Load()))])), If(test=Compare(left=Name(id='cursor_factory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='cursor_factory', ctx=Store())], value=Name(id='cursor_factory', ctx=Load()))], orelse=[]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[])], type_ignores=[])