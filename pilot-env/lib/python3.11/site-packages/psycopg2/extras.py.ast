Module(body=[Expr(value=Constant(value='Miscellaneous goodies for psycopg2\n\nThis module is a generic place used to hold little helper functions\nand classes until a better place in the distribution is found.\n')), Import(names=[alias(name='os', asname='_os')]), Import(names=[alias(name='time', asname='_time')]), Import(names=[alias(name='re', asname='_re')]), ImportFrom(module='collections', names=[alias(name='namedtuple'), alias(name='OrderedDict')], level=0), Import(names=[alias(name='logging', asname='_logging')]), Import(names=[alias(name='psycopg2')]), ImportFrom(module='psycopg2', names=[alias(name='extensions', asname='_ext')], level=0), ImportFrom(module='extensions', names=[alias(name='cursor', asname='_cursor')], level=1), ImportFrom(module='extensions', names=[alias(name='connection', asname='_connection')], level=1), ImportFrom(module='extensions', names=[alias(name='adapt', asname='_A'), alias(name='quote_ident')], level=1), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='psycopg2._psycopg', names=[alias(name='REPLICATION_PHYSICAL'), alias(name='REPLICATION_LOGICAL'), alias(name='ReplicationConnection', asname='_replicationConnection'), alias(name='ReplicationCursor', asname='_replicationCursor'), alias(name='ReplicationMessage')], level=0), ImportFrom(module='psycopg2._json', names=[alias(name='json'), alias(name='Json'), alias(name='register_json'), alias(name='register_default_json'), alias(name='register_default_jsonb')], level=0), ImportFrom(module='psycopg2._range', names=[alias(name='Range'), alias(name='NumericRange'), alias(name='DateRange'), alias(name='DateTimeRange'), alias(name='DateTimeTZRange'), alias(name='register_range'), alias(name='RangeAdapter'), alias(name='RangeCaster')], level=0), ImportFrom(module='psycopg2._ipaddress', names=[alias(name='register_ipaddress')], level=0), ClassDef(name='DictCursorBase', bases=[Name(id='_cursor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for all dict-like cursors.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Constant(value='row_factory'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='row_factory', ctx=Store())], value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='row_factory'), ctx=Load())), Delete(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='row_factory'), ctx=Del())])], orelse=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value="DictCursorBase can't be instantiated without a row factory.")], keywords=[]))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='row_factory', ctx=Store())], value=Name(id='row_factory', ctx=Load()))], decorator_list=[]), FunctionDef(name='fetchone', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load()), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchone', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load())), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchone', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='fetchmany', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load()), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchmany', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load())), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchmany', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='fetchall', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load()), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchall', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load())), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchall', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load()), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__iter__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='first', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Load())), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__iter__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='first', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='first', ctx=Load()))), While(test=Constant(value=True), body=[Expr(value=Yield(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[])))], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Return()])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='DictConnection', bases=[Name(id='_connection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A connection that uses `DictCursor` automatically.')), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cursor_factory'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_factory', ctx=Load()), Name(id='DictCursor', ctx=Load())])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cursor', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='DictCursor', bases=[Name(id='DictCursorBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cursor that keeps a list of column name -> index mappings__.\n\n    .. __: https://docs.python.org/glossary.html#term-mapping\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='row_factory'), ctx=Store())], value=Name(id='DictRow', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prefetch', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=True)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='callproc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='procname'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=True)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='callproc', ctx=Load()), args=[Name(id='procname', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_build_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load())]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load()), slice=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='DictRow', bases=[Name(id='list', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A row object that allow by-column-name access to data.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_index')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Store())], value=Attribute(value=Name(id='cursor', ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=List(elts=[Constant(value=None)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='cursor', ctx=Load()), attr='description', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x'), arg(arg='v')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__setitem__', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='g', ctx=Store())], value=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load())), Return(value=GeneratorExp(elt=Tuple(elts=[Name(id='n', ctx=Load()), Call(func=Name(id='g', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='g', ctx=Store())], value=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load())), Return(value=GeneratorExp(elt=Call(func=Name(id='g', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='x', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__reduce__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Subscript(value=Name(id='self', ctx=Load()), slice=Slice(), ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Slice(), ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_index', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='RealDictConnection', bases=[Name(id='_connection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A connection that uses `RealDictCursor` automatically.')), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cursor_factory'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_factory', ctx=Load()), Name(id='RealDictCursor', ctx=Load())])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cursor', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='RealDictCursor', bases=[Name(id='DictCursorBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cursor that uses a real dict as the base type for rows.\n\n    Note that this cursor is extremely specialized and does not allow\n    the normal access (using integer indices) to fetched data. If you need\n    to access database rows both as a dictionary and a list, then use\n    the generic `DictCursor` instead of `!RealDictCursor`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='row_factory'), ctx=Store())], value=Name(id='RealDictRow', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='column_mapping', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=True)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='callproc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='procname'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='column_mapping', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=True)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='callproc', ctx=Load()), args=[Name(id='procname', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_build_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='column_mapping', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_query_executed', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='RealDictRow', bases=[Name(id='OrderedDict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A `!dict` subclass representing a data record.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='args', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='_cursor', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='cursor', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='cursor', ctx=Store())], value=Constant(value=None))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Compare(left=Name(id='cursor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='cursor', ctx=Load()), attr='description', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='cursor', ctx=Load()), attr='column_mapping', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='RealDictRow', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='cursor', ctx=Load()), attr='column_mapping', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='RealDictRow', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='RealDictRow', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__setitem__', ctx=Load()), args=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='mapping', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='RealDictRow', ctx=Load()), ctx=Del())])], orelse=[]), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__setitem__', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NamedTupleConnection', bases=[Name(id='_connection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A connection that uses `NamedTupleCursor` automatically.')), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cursor_factory'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_factory', ctx=Load()), Name(id='NamedTupleCursor', ctx=Load())])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cursor', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NamedTupleCursor', bases=[Name(id='_cursor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cursor that generates results as `~collections.namedtuple`.\n\n    `!fetch*()` methods will return named tuples instead of regular tuples, so\n    their elements can be accessed both as regular numeric items as well as\n    attributes.\n\n        >>> nt_cur = conn.cursor(cursor_factory=psycopg2.extras.NamedTupleCursor)\n        >>> rec = nt_cur.fetchone()\n        >>> rec\n        Record(id=1, num=100, data="abc\'def")\n        >>> rec[1]\n        100\n        >>> rec.data\n        "abc\'def"\n    ')), Assign(targets=[Name(id='Record', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='MAX_CACHE', ctx=Store())], value=Constant(value=1024)), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Constant(value=None)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='executemany', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Constant(value=None)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='executemany', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='callproc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='procname'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Constant(value=None)), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='callproc', ctx=Load()), args=[Name(id='procname', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fetchone', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchone', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='t', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nt', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Load())), If(test=Compare(left=Name(id='nt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nt', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_nt', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='nt', ctx=Load()), attr='_make', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='fetchmany', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchmany', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nt', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Load())), If(test=Compare(left=Name(id='nt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nt', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_nt', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='_make', ctx=Load()), Name(id='ts', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='fetchall', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='fetchall', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='nt', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Load())), If(test=Compare(left=Name(id='nt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nt', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_nt', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='_make', ctx=Load()), Name(id='ts', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='it', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__iter__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='it', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nt', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Load())), If(test=Compare(left=Name(id='nt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nt', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='Record', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_nt', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='nt', ctx=Load()), attr='_make', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))), While(test=Constant(value=True), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='nt', ctx=Load()), attr='_make', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Name(id='it', ctx=Load())], keywords=[])], keywords=[])))], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Return()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_make_nt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()), body=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), orelse=Tuple(elts=[], ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cached_make_nt', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_do_make_nt', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Name(id='key', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re_clean', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='_'), Name(id='s', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='_')]), Compare(left=Constant(value='0'), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='9')])]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='f'), op=Add(), right=Name(id='s', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='Record'), Name(id='fields', ctx=Load())], keywords=[])), Return(value=Name(id='nt', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='_cached_make_nt', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_do_make_nt', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[Constant(value=512)], keywords=[])]), Assign(targets=[Attribute(value=Name(id='NamedTupleCursor', ctx=Load()), attr='_cached_make_nt', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Name(id='_cached_make_nt', ctx=Load())], keywords=[])), ClassDef(name='LoggingConnection', bases=[Name(id='_connection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A connection that logs all queries to a file or logger__ object.\n\n    .. __: https://docs.python.org/library/logging.html\n    ')), FunctionDef(name='initialize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='logobj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize the connection to log to `!logobj`.\n\n        The `!logobj` parameter can be an open file object or a Logger/LoggerAdapter\n        instance from the standard logging module.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_logobj', ctx=Store())], value=Name(id='logobj', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='_logging', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='logobj', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='_logging', ctx=Load()), attr='Logger', ctx=Load()), Attribute(value=Name(id='_logging', ctx=Load()), attr='LoggerAdapter', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_logtologger', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_logtofile', ctx=Load()))])], decorator_list=[]), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Filter the query before logging it.\n\n        This is the method to overwrite to filter unwanted queries out of the\n        log or to add some extra data to the output. The default implementation\n        just does nothing.\n        ')), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[]), FunctionDef(name='_logtofile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='curs', ctx=Load())], keywords=[])), If(test=Name(id='msg', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='decode', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='encodings', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ctx=Load()), Constant(value='replace')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_logobj', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Attribute(value=Name(id='_os', ctx=Load()), attr='linesep', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_logtologger', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='curs', ctx=Load())], keywords=[])), If(test=Name(id='msg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_logobj', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_check', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_logobj')], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='LoggingConnection object has not been initialize()d')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cursor_factory'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_factory', ctx=Load()), Name(id='LoggingCursor', ctx=Load())])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cursor', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LoggingCursor', bases=[Name(id='_cursor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cursor that logs queries using its connection logging facilities.')), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='log', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='callproc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='procname'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='callproc', ctx=Load()), args=[Name(id='procname', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='log', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='MinTimeLoggingConnection', bases=[Name(id='LoggingConnection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A connection that logs queries based on execution time.\n\n    This is just an example of how to sub-class `LoggingConnection` to\n    provide some extra filtering for the logged queries. Both the\n    `initialize()` and `filter()` methods are overwritten to make sure\n    that only queries executing for more than ``mintime`` ms are logged.\n\n    Note that this connection uses the specialized cursor\n    `MinTimeLoggingCursor`.\n    ')), FunctionDef(name='initialize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='logobj'), arg(arg='mintime')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='LoggingConnection', ctx=Load()), attr='initialize', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='logobj', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mintime', ctx=Store())], value=Name(id='mintime', ctx=Load()))], decorator_list=[]), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='_time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='curs', ctx=Load()), attr='timestamp', ctx=Load())), op=Mult(), right=Constant(value=1000))), If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mintime', ctx=Load())]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='decode', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='encodings', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ctx=Load()), Constant(value='replace')], keywords=[]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Name(id='_os', ctx=Load()), attr='linesep', ctx=Load()), conversion=-1), Constant(value='  (execution time: '), FormattedValue(value=Name(id='t', ctx=Load()), conversion=-1), Constant(value=' ms)')]))], orelse=[])], decorator_list=[]), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cursor_factory'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_factory', ctx=Load()), Name(id='MinTimeLoggingCursor', ctx=Load())])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='LoggingConnection', ctx=Load()), attr='cursor', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MinTimeLoggingCursor', bases=[Name(id='LoggingCursor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The cursor sub-class companion to `MinTimeLoggingConnection`.')), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='_time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='LoggingCursor', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='query', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='callproc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='procname'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='_time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='LoggingCursor', ctx=Load()), attr='callproc', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='procname', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LogicalReplicationConnection', bases=[Name(id='_replicationConnection', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='replication_type'), ctx=Store())], value=Name(id='REPLICATION_LOGICAL', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='PhysicalReplicationConnection', bases=[Name(id='_replicationConnection', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='replication_type'), ctx=Store())], value=Name(id='REPLICATION_PHYSICAL', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='StopReplication', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Exception used to break out of the endless loop in\n    `~ReplicationCursor.consume_stream()`.\n\n    Subclass of `~exceptions.Exception`.  Intentionally *not* inherited from\n    `~psycopg2.Error` as occurrence of this exception does not indicate an\n    error.\n    ')), Pass()], decorator_list=[]), ClassDef(name='ReplicationCursor', bases=[Name(id='_replicationCursor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cursor used for communication on replication connections.')), FunctionDef(name='create_replication_slot', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='slot_name'), arg(arg='slot_type'), arg(arg='output_plugin')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create streaming replication slot.')), Assign(targets=[Name(id='command', ctx=Store())], value=JoinedStr(values=[Constant(value='CREATE_REPLICATION_SLOT '), FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='slot_name', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' ')])), If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='slot_type', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='replication_type', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_LOGICAL', ctx=Load())]), body=[If(test=Compare(left=Name(id='output_plugin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='output plugin name is required to create logical replication slot')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='LOGICAL '), FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='output_plugin', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1)]))], orelse=[If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_PHYSICAL', ctx=Load())]), body=[If(test=Compare(left=Name(id='output_plugin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='cannot specify output plugin name when creating physical replication slot')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Constant(value='PHYSICAL'))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unrecognized replication type: '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='slot_type', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='drop_replication_slot', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='slot_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Drop streaming replication slot.')), Assign(targets=[Name(id='command', ctx=Store())], value=JoinedStr(values=[Constant(value='DROP_REPLICATION_SLOT '), FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='slot_name', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='start_replication', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='slot_name'), arg(arg='slot_type'), arg(arg='start_lsn'), arg(arg='timeline'), arg(arg='options'), arg(arg='decode'), arg(arg='status_interval')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=False), Constant(value=10)]), body=[Expr(value=Constant(value='Start replication stream.')), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='START_REPLICATION ')), If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='slot_type', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='replication_type', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_LOGICAL', ctx=Load())]), body=[If(test=Name(id='slot_name', ctx=Load()), body=[AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='SLOT '), FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='slot_name', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' ')]))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='slot name is required for logical replication')], keywords=[]))]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Constant(value='LOGICAL '))], orelse=[If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_PHYSICAL', ctx=Load())]), body=[If(test=Name(id='slot_name', ctx=Load()), body=[AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='SLOT '), FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='slot_name', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' ')]))], orelse=[])], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unrecognized replication type: '), FormattedValue(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='slot_type', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])]), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='start_lsn', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='str', ctx=Load())]), body=[Assign(targets=[Name(id='lsn', ctx=Store())], value=Call(func=Attribute(value=Name(id='start_lsn', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='lsn', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='lsn', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=16)], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='X')])), Constant(value='/'), FormattedValue(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='lsn', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=16)], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='08X')]))]))], orelse=[Assign(targets=[Name(id='lsn', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=BinOp(left=BinOp(left=Name(id='start_lsn', ctx=Load()), op=RShift(), right=Constant(value=32)), op=BitAnd(), right=Constant(value=4294967295)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='X')])), Constant(value='/'), FormattedValue(value=BinOp(left=Name(id='start_lsn', ctx=Load()), op=BitAnd(), right=Constant(value=4294967295)), conversion=-1, format_spec=JoinedStr(values=[Constant(value='08X')]))]))]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Name(id='lsn', ctx=Load())), If(test=Compare(left=Name(id='timeline', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_LOGICAL', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='cannot specify timeline for logical replication')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' TIMELINE '), FormattedValue(value=Name(id='timeline', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Name(id='options', ctx=Load()), body=[If(test=Compare(left=Name(id='slot_type', ctx=Load()), ops=[Eq()], comparators=[Name(id='REPLICATION_PHYSICAL', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='cannot specify output plugin options for physical replication')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Constant(value=' (')), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='command', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='(')], keywords=[])), body=[AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Constant(value=', '))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' '), FormattedValue(value=Call(func=Name(id='_A', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]), conversion=-1)]))], orelse=[]), AugAssign(target=Name(id='command', ctx=Store()), op=Add(), value=Constant(value=')'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start_replication_expert', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[keyword(arg='decode', value=Name(id='decode', ctx=Load())), keyword(arg='status_interval', value=Name(id='status_interval', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='UUID_adapter', bases=[], keywords=[], body=[Expr(value=Constant(value="Adapt Python's uuid.UUID__ type to PostgreSQL's uuid__.\n\n    .. __: https://docs.python.org/library/uuid.html\n    .. __: https://www.postgresql.org/docs/current/static/datatype-uuid.html\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uuid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_uuid', ctx=Store())], value=Name(id='uuid', ctx=Load()))], decorator_list=[]), FunctionDef(name='__conform__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proto')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='proto', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='_ext', ctx=Load()), attr='ISQLQuote', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=JoinedStr(values=[Constant(value="'"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_uuid', ctx=Load()), conversion=-1), Constant(value="'::uuid")]), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value="'"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_uuid', ctx=Load()), conversion=-1), Constant(value="'::uuid")]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='register_uuid', args=arguments(posonlyargs=[], args=[arg(arg='oids'), arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create the UUID type and an uuid.UUID adapter.\n\n    :param oids: oid for the PostgreSQL :sql:`uuid` type, or 2-items sequence\n        with oids of the type and the array. If not specified, use PostgreSQL\n        standard oids.\n    :param conn_or_curs: where to register the typecaster. If not specified,\n        register it globally.\n    ')), Import(names=[alias(name='uuid')]), If(test=UnaryOp(op=Not(), operand=Name(id='oids', ctx=Load())), body=[Assign(targets=[Name(id='oid1', ctx=Store())], value=Constant(value=2950)), Assign(targets=[Name(id='oid2', ctx=Store())], value=Constant(value=2951))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='oids', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='oid1', ctx=Store()), Name(id='oid2', ctx=Store())], ctx=Store())], value=Name(id='oids', ctx=Load()))], orelse=[Assign(targets=[Name(id='oid1', ctx=Store())], value=Name(id='oids', ctx=Load())), Assign(targets=[Name(id='oid2', ctx=Store())], value=Constant(value=2951))])]), Assign(targets=[Attribute(value=Name(id='_ext', ctx=Load()), attr='UUID', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid1', ctx=Load())], ctx=Load()), Constant(value='UUID'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='cursor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='data', ctx=Load()), Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='UUID', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])]), Constant(value=None)]))], keywords=[])), Assign(targets=[Attribute(value=Name(id='_ext', ctx=Load()), attr='UUIDARRAY', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_array_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid2', ctx=Load())], ctx=Load()), Constant(value='UUID[]'), Attribute(value=Name(id='_ext', ctx=Load()), attr='UUID', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='_ext', ctx=Load()), attr='UUID', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='_ext', ctx=Load()), attr='UUIDARRAY', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Attribute(value=Name(id='uuid', ctx=Load()), attr='UUID', ctx=Load()), Name(id='UUID_adapter', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='UUID', ctx=Load()))], decorator_list=[]), ClassDef(name='Inet', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrap a string to allow for correct SQL-quoting of inet values.\n\n    Note that this adapter does NOT check the passed value to make\n    sure it really is an inet-compatible address but DOES call adapt()\n    on it to make sure it is impossible to execute an SQL-injection\n    by passing an evil value to the initializer.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='addr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='addr', ctx=Store())], value=Name(id='addr', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='addr', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Store())], value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='_A', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='addr', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='prepare')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=b'::inet')))], decorator_list=[]), FunctionDef(name='__conform__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proto')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='proto', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='_ext', ctx=Load()), attr='ISQLQuote', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='addr', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='register_inet', args=arguments(posonlyargs=[], args=[arg(arg='oid'), arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create the INET type and an Inet adapter.\n\n    :param oid: oid for the PostgreSQL :sql:`inet` type, or 2-items sequence\n        with oids of the type and the array. If not specified, use PostgreSQL\n        standard oids.\n    :param conn_or_curs: where to register the typecaster. If not specified,\n        register it globally.\n    ')), Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="the inet adapter is deprecated, it's not very useful"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='oid', ctx=Load())), body=[Assign(targets=[Name(id='oid1', ctx=Store())], value=Constant(value=869)), Assign(targets=[Name(id='oid2', ctx=Store())], value=Constant(value=1041))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='oid', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='oid1', ctx=Store()), Name(id='oid2', ctx=Store())], ctx=Store())], value=Name(id='oid', ctx=Load()))], orelse=[Assign(targets=[Name(id='oid1', ctx=Store())], value=Name(id='oid', ctx=Load())), Assign(targets=[Name(id='oid2', ctx=Store())], value=Constant(value=1041))])]), Assign(targets=[Attribute(value=Name(id='_ext', ctx=Load()), attr='INET', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid1', ctx=Load())], ctx=Load()), Constant(value='INET'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='cursor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='data', ctx=Load()), Call(func=Name(id='Inet', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])]), Constant(value=None)]))], keywords=[])), Assign(targets=[Attribute(value=Name(id='_ext', ctx=Load()), attr='INETARRAY', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_array_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid2', ctx=Load())], ctx=Load()), Constant(value='INETARRAY'), Attribute(value=Name(id='_ext', ctx=Load()), attr='INET', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='_ext', ctx=Load()), attr='INET', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='_ext', ctx=Load()), attr='INETARRAY', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='INET', ctx=Load()))], decorator_list=[]), FunctionDef(name='wait_select', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wait until a connection or cursor has data available.\n\n    The function is an example of a wait callback to be registered with\n    `~psycopg2.extensions.set_wait_callback()`. This function uses\n    :py:func:`~select.select()` to wait for data to become available, and\n    therefore is able to handle/receive SIGINT/KeyboardInterrupt.\n    ')), Import(names=[alias(name='select')]), ImportFrom(module='psycopg2.extensions', names=[alias(name='POLL_OK'), alias(name='POLL_READ'), alias(name='POLL_WRITE')], level=0), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='poll', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Name(id='POLL_OK', ctx=Load())]), body=[Break()], orelse=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Name(id='POLL_READ', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Name(id='POLL_WRITE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), args=[List(elts=[], ctx=Load()), List(elts=[Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='OperationalError', ctx=Load()), args=[JoinedStr(values=[Constant(value='bad state from poll: '), FormattedValue(value=Name(id='state', ctx=Load()), conversion=-1)])], keywords=[]))])])])], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_solve_conn_curs', args=arguments(posonlyargs=[], args=[arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the connection and a DBAPI cursor from a connection or cursor.')), If(test=Compare(left=Name(id='conn_or_curs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value='no connection or cursor provided')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='conn_or_curs', ctx=Load()), Constant(value='execute')], keywords=[]), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Attribute(value=Name(id='conn_or_curs', ctx=Load()), attr='connection', ctx=Load())), Assign(targets=[Name(id='curs', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[keyword(arg='cursor_factory', value=Name(id='_cursor', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='conn', ctx=Store())], value=Name(id='conn_or_curs', ctx=Load())), Assign(targets=[Name(id='curs', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[keyword(arg='cursor_factory', value=Name(id='_cursor', ctx=Load()))]))]), Return(value=Tuple(elts=[Name(id='conn', ctx=Load()), Name(id='curs', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='HstoreAdapter', bases=[], keywords=[], body=[Expr(value=Constant(value='Adapt a Python dict to the hstore syntax.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wrapped')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Store())], value=Name(id='wrapped', ctx=Load()))], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Store())], value=Name(id='conn', ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='conn', ctx=Load()), attr='info', ctx=Load()), attr='server_version', ctx=Load()), ops=[Lt()], comparators=[Constant(value=90000)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='getquoted', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_getquoted_8', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_getquoted_8', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Use the operators available in PG pre-9.0.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Load())), body=[Return(value=Constant(value=b"''::hstore"))], orelse=[]), Assign(targets=[Name(id='adapt', ctx=Store())], value=Attribute(value=Name(id='_ext', ctx=Load()), attr='adapt', ctx=Load())), Assign(targets=[Name(id='rv', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='adapt', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='adapt', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='v', ctx=Store())], value=Constant(value=b'NULL'))]), Expr(value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=b'('), op=Add(), right=Name(id='k', ctx=Load())), op=Add(), right=Constant(value=b' => ')), op=Add(), right=Name(id='v', ctx=Load())), op=Add(), right=Constant(value=b')'))], keywords=[]))], orelse=[]), Return(value=BinOp(left=BinOp(left=Constant(value=b'('), op=Add(), right=Call(func=Attribute(value=Constant(value=b'||'), attr='join', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=b')')))], decorator_list=[]), FunctionDef(name='_getquoted_9', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Use the hstore(text[], text[]) function.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Load())), body=[Return(value=Constant(value=b"''::hstore"))], orelse=[]), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='adapt', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='adapt', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='wrapped', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=b'hstore('), op=Add(), right=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[])), op=Add(), right=Constant(value=b', ')), op=Add(), right=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[])), op=Add(), right=Constant(value=b')')))], decorator_list=[]), Assign(targets=[Name(id='getquoted', ctx=Store())], value=Name(id='_getquoted_9', ctx=Load())), Assign(targets=[Name(id='_re_hstore', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n        # hstore key:\n        # a string of normal or escaped chars\n        "((?: [^"\\\\] | \\\\. )*)"\n        \\s*=>\\s* # hstore value\n        (?:\n            NULL # the value can be null - not catched\n            # or a quoted string like the key\n            | "((?: [^"\\\\] | \\\\. )*)"\n        )\n        (?:\\s*,\\s*|$) # pairs separated by comma or end of string.\n    '), Attribute(value=Name(id='_re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s'), arg(arg='cur'), arg(arg='_bsdec')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\\\(.)')], keywords=[])]), body=[Expr(value=Constant(value='Parse an hstore representation in a Python string.\n\n        The hstore is represented as something like::\n\n            "a"=>"1", "b"=>"2"\n\n        with backslash-escaped strings.\n        ')), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='start', ctx=Store())], value=Constant(value=0)), For(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_hstore', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Name(id='start', ctx=Load())])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='InterfaceError', ctx=Load()), args=[JoinedStr(values=[Constant(value='error parsing hstore pair at char '), FormattedValue(value=Name(id='start', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Name(id='_bsdec', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\1'), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='_bsdec', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\1'), Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='rv', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='start', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='InterfaceError', ctx=Load()), args=[JoinedStr(values=[Constant(value='error parsing hstore: unparsed data after char '), FormattedValue(value=Name(id='start', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='parse_unicode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s'), arg(arg='cur')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse an hstore returning unicode keys and values.')), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='encodings', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='cur', ctx=Load()), attr='connection', ctx=Load()), attr='encoding', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='cur', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_oids', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the lists of OID of the hstore and hstore[] types.\n        ')), Assign(targets=[Tuple(elts=[Name(id='conn', ctx=Store()), Name(id='curs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_solve_conn_curs', ctx=Load()), args=[Name(id='conn_or_curs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='conn_status', ctx=Store())], value=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), Assign(targets=[Name(id='typarray', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='conn', ctx=Load()), attr='info', ctx=Load()), attr='server_version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=80300)]), Constant(value='typarray')]), Constant(value='NULL')])), Assign(targets=[Tuple(elts=[Name(id='rv0', ctx=Store()), Name(id='rv1', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[JoinedStr(values=[Constant(value='SELECT t.oid, '), FormattedValue(value=Name(id='typarray', ctx=Load()), conversion=-1), Constant(value="\nFROM pg_type t JOIN pg_namespace ns\n    ON typnamespace = ns.oid\nWHERE typname = 'hstore';\n")])], keywords=[])), For(target=Name(id='oids', ctx=Store()), iter=Name(id='curs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rv0', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='oids', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rv1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='oids', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='conn_status', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='_ext', ctx=Load()), attr='STATUS_IN_TRANSACTION', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='conn', ctx=Load()), attr='autocommit', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='rollback', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='rv0', ctx=Load())], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='rv1', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='register_hstore', args=arguments(posonlyargs=[], args=[arg(arg='conn_or_curs'), arg(arg='globally'), arg(arg='unicode'), arg(arg='oid'), arg(arg='array_oid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Register adapter and typecaster for `!dict`\\-\\ |hstore| conversions.\n\n    :param conn_or_curs: a connection or cursor: the typecaster will be\n        registered only on this object unless *globally* is set to `!True`\n    :param globally: register the adapter globally, not only on *conn_or_curs*\n    :param unicode: if `!True`, keys and values returned from the database\n        will be `!unicode` instead of `!str`. The option is not available on\n        Python 3\n    :param oid: the OID of the |hstore| type if known. If not, it will be\n        queried on *conn_or_curs*.\n    :param array_oid: the OID of the |hstore| array type if known. If not, it\n        will be queried on *conn_or_curs*.\n\n    The connection or cursor passed to the function will be used to query the\n    database and look for the OID of the |hstore| type (which may be different\n    across databases). If querying is not desirable (e.g. with\n    :ref:`asynchronous connections <async-support>`) you may specify it in the\n    *oid* parameter, which can be found using a query such as :sql:`SELECT\n    'hstore'::regtype::oid`. Analogously you can obtain a value for *array_oid*\n    using a query such as :sql:`SELECT 'hstore[]'::regtype::oid`.\n\n    Note that, when passing a dictionary from Python to the database, both\n    strings and unicode keys and values are supported. Dictionaries returned\n    from the database have keys/values according to the *unicode* parameter.\n\n    The |hstore| contrib module must be already installed in the database\n    (executing the ``hstore.sql`` script in your ``contrib`` directory).\n    Raise `~psycopg2.ProgrammingError` if the type is not found.\n    ")), If(test=Compare(left=Name(id='oid', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='oid', ctx=Store())], value=Call(func=Attribute(value=Name(id='HstoreAdapter', ctx=Load()), attr='get_oids', ctx=Load()), args=[Name(id='conn_or_curs', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='oid', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Subscript(value=Name(id='oid', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[Constant(value="hstore type not found in the database. please install it from your 'contrib/hstore.sql' file")], keywords=[]))], orelse=[Assign(targets=[Name(id='array_oid', ctx=Store())], value=Subscript(value=Name(id='oid', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='oid', ctx=Store())], value=Subscript(value=Name(id='oid', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='oid', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='oid', ctx=Store())], value=Tuple(elts=[Name(id='oid', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='array_oid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='array_oid', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='array_oid', ctx=Store())], value=Tuple(elts=[Name(id='array_oid', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='array_oid', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='array_oid', ctx=Load()), ifs=[Name(id='x', ctx=Load())], is_async=0)])], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='HSTORE', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_type', ctx=Load()), args=[Name(id='oid', ctx=Load()), Constant(value='HSTORE'), Attribute(value=Name(id='HstoreAdapter', ctx=Load()), attr='parse', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Name(id='HSTORE', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='globally', ctx=Load())), Name(id='conn_or_curs', ctx=Load())]), Constant(value=None)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Name(id='dict', ctx=Load()), Name(id='HstoreAdapter', ctx=Load())], keywords=[])), If(test=Name(id='array_oid', ctx=Load()), body=[Assign(targets=[Name(id='HSTOREARRAY', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_array_type', ctx=Load()), args=[Name(id='array_oid', ctx=Load()), Constant(value='HSTOREARRAY'), Name(id='HSTORE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Name(id='HSTOREARRAY', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='globally', ctx=Load())), Name(id='conn_or_curs', ctx=Load())]), Constant(value=None)])], keywords=[]))], orelse=[])], decorator_list=[]), ClassDef(name='CompositeCaster', bases=[], keywords=[], body=[Expr(value=Constant(value='Helps conversion of a PostgreSQL composite type into a Python object.\n\n    The class is usually created by the `register_composite()` function.\n    You may want to create and register manually instances of the class if\n    querying the database at registration time is not desirable (such as when\n    using an :ref:`asynchronous connections <async-support>`).\n\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='oid'), arg(arg='attrs'), arg(arg='array_oid'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Store())], value=Name(id='schema', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='oid', ctx=Store())], value=Name(id='oid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='array_oid', ctx=Store())], value=Name(id='array_oid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attnames', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='atttypes', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_type', ctx=Load()), args=[Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='attnames', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='typecaster', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid', ctx=Load())], ctx=Load()), Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load())], keywords=[])), If(test=Name(id='array_oid', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='new_array_type', ctx=Load()), args=[Tuple(elts=[Name(id='array_oid', ctx=Load())], ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='ARRAY')]), Attribute(value=Name(id='self', ctx=Load()), attr='typecaster', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Store())], value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s'), arg(arg='curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tokenize', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='atttypes', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='DataError', ctx=Load()), args=[BinOp(left=Constant(value='expecting %d components for the type %s, %d found instead'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='atttypes', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='values', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='oid', ctx=Load()), Name(id='token', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='oid', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='atttypes', ctx=Load()), Name(id='tokens', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='values')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a new Python object representing the data being casted.\n\n        *values* is the list of attributes, already casted into their Python\n        representation.\n\n        You can subclass this method to :ref:`customize the composite cast\n        <custom-composite>`.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ctor', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='_re_tokenize', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n  \\(? ([,)])                        # an empty token, representing NULL\n| \\(? " ((?: [^"] | "")*) " [,)]    # or a quoted string\n| \\(? ([^",)]+) [,)]                # or an unquoted string\n    '), Attribute(value=Name(id='_re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_re_undouble', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(["\\\\])\\1')], keywords=[])), FunctionDef(name='tokenize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_tokenize', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='InterfaceError', ctx=Load()), args=[JoinedStr(values=[Constant(value="can't parse type: "), FormattedValue(value=Name(id='s', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_undouble', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\1'), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=3)], keywords=[])], keywords=[]))])])], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_create_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='attnames')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re_clean', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='_'), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='attnames', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ctor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), attr='_make', ctx=Load()))], decorator_list=[]), FunctionDef(name='_from_db', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a `CompositeCaster` instance for the type *name*.\n\n        Raise `ProgrammingError` if the type is not found.\n        ')), Assign(targets=[Tuple(elts=[Name(id='conn', ctx=Store()), Name(id='curs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_solve_conn_curs', ctx=Load()), args=[Name(id='conn_or_curs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='conn_status', ctx=Store())], value=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='tname', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Name(id='tname', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='public'))]), Assign(targets=[Name(id='typarray', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='conn', ctx=Load()), attr='info', ctx=Load()), attr='server_version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=80300)]), Constant(value='typarray')]), Constant(value='NULL')])), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[BinOp(left=Constant(value='SELECT t.oid, %s, attname, atttypid\nFROM pg_type t\nJOIN pg_namespace ns ON typnamespace = ns.oid\nJOIN pg_attribute a ON attrelid = typrelid\nWHERE typname = %%s AND nspname = %%s\n    AND attnum > 0 AND NOT attisdropped\nORDER BY attnum;\n'), op=Mod(), right=Name(id='typarray', ctx=Load())), Tuple(elts=[Name(id='tname', ctx=Load()), Name(id='schema', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='recs', ctx=Store())], value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='fetchall', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='recs', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='savepoint', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='_ext', ctx=Load()), attr='STATUS_IN_TRANSACTION', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='SAVEPOINT register_type')], keywords=[])), Assign(targets=[Name(id='savepoint', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[BinOp(left=Constant(value='SELECT t.oid, %s, attname, atttypid, typname, nspname\nFROM pg_type t\nJOIN pg_namespace ns ON typnamespace = ns.oid\nJOIN pg_attribute a ON attrelid = typrelid\nWHERE t.oid = %%s::regtype\n    AND attnum > 0 AND NOT attisdropped\nORDER BY attnum;\n'), op=Mod(), right=Name(id='typarray', ctx=Load())), Tuple(elts=[Name(id='name', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='recs', ctx=Store())], value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='fetchall', ctx=Load()), args=[], keywords=[])), If(test=Name(id='recs', ctx=Load()), body=[Assign(targets=[Name(id='tname', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='recs', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=4), ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='recs', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=5), ctx=Load()))], orelse=[])], finalbody=[If(test=Name(id='savepoint', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='ROLLBACK TO SAVEPOINT register_type')], keywords=[]))], orelse=[])])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='conn_status', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='_ext', ctx=Load()), attr='STATUS_IN_TRANSACTION', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='conn', ctx=Load()), attr='autocommit', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='rollback', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='recs', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='ProgrammingError', ctx=Load()), args=[JoinedStr(values=[Constant(value="PostgreSQL type '"), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value="' not found")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='type_oid', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='recs', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='array_oid', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='recs', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='type_attrs', ctx=Store())], value=ListComp(elt=Tuple(elts=[Subscript(value=Name(id='r', ctx=Load()), slice=Constant(value=2), ctx=Load()), Subscript(value=Name(id='r', ctx=Load()), slice=Constant(value=3), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='recs', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='self', ctx=Load()), args=[Name(id='tname', ctx=Load()), Name(id='type_oid', ctx=Load()), Name(id='type_attrs', ctx=Load())], keywords=[keyword(arg='array_oid', value=Name(id='array_oid', ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='register_composite', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='conn_or_curs'), arg(arg='globally'), arg(arg='factory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Register a typecaster to convert a composite type into a tuple.\n\n    :param name: the name of a PostgreSQL composite type, e.g. created using\n        the |CREATE TYPE|_ command\n    :param conn_or_curs: a connection or cursor used to find the type oid and\n        components; the typecaster is registered in a scope limited to this\n        object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n        *conn_or_curs*, otherwise register it globally\n    :param factory: if specified it should be a `CompositeCaster` subclass: use\n        it to :ref:`customize how to cast composite types <custom-composite>`\n    :return: the registered `CompositeCaster` or *factory* instance\n        responsible for the conversion\n    ')), If(test=Compare(left=Name(id='factory', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='factory', ctx=Store())], value=Name(id='CompositeCaster', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='caster', ctx=Store())], value=Call(func=Attribute(value=Name(id='factory', ctx=Load()), attr='_from_db', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='caster', ctx=Load()), attr='typecaster', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='globally', ctx=Load())), Name(id='conn_or_curs', ctx=Load())]), Constant(value=None)])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='caster', ctx=Load()), attr='array_typecaster', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='_ext', ctx=Load()), attr='register_type', ctx=Load()), args=[Attribute(value=Name(id='caster', ctx=Load()), attr='array_typecaster', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='globally', ctx=Load())), Name(id='conn_or_curs', ctx=Load())]), Constant(value=None)])], keywords=[]))], orelse=[]), Return(value=Name(id='caster', ctx=Load()))], decorator_list=[]), FunctionDef(name='_paginate', args=arguments(posonlyargs=[], args=[arg(arg='seq'), arg(arg='page_size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Consume an iterable and return it in chunks.\n\n    Every chunk is at most `page_size`. Never return an empty chunk.\n    ')), Assign(targets=[Name(id='page', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='it', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='seq', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Try(body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='page_size', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='page', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Name(id='it', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='page', ctx=Load()))), Assign(targets=[Name(id='page', ctx=Store())], value=List(elts=[], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[If(test=Name(id='page', ctx=Load()), body=[Expr(value=Yield(value=Name(id='page', ctx=Load())))], orelse=[]), Return()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='execute_batch', args=arguments(posonlyargs=[], args=[arg(arg='cur'), arg(arg='sql'), arg(arg='argslist'), arg(arg='page_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=100)]), body=[Expr(value=Constant(value='Execute groups of statements in fewer server roundtrips.\n\n    Execute *sql* several times, against all parameters set (sequences or\n    mappings) found in *argslist*.\n\n    The function is semantically similar to\n\n    .. parsed-literal::\n\n        *cur*\\.\\ `~cursor.executemany`\\ (\\ *sql*\\ , *argslist*\\ )\n\n    but has a different implementation: Psycopg will join the statements into\n    fewer multi-statement commands, each one containing at most *page_size*\n    statements, resulting in a reduced number of server roundtrips.\n\n    After the execution of the function the `cursor.rowcount` property will\n    **not** contain a total result.\n\n    ')), For(target=Name(id='page', ctx=Store()), iter=Call(func=Name(id='_paginate', ctx=Load()), args=[Name(id='argslist', ctx=Load())], keywords=[keyword(arg='page_size', value=Name(id='page_size', ctx=Load()))]), body=[Assign(targets=[Name(id='sqls', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='mogrify', ctx=Load()), args=[Name(id='sql', ctx=Load()), Name(id='args', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='args', ctx=Store()), iter=Name(id='page', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='execute', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=b';'), attr='join', ctx=Load()), args=[Name(id='sqls', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='execute_values', args=arguments(posonlyargs=[], args=[arg(arg='cur'), arg(arg='sql'), arg(arg='argslist'), arg(arg='template'), arg(arg='page_size'), arg(arg='fetch')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=100), Constant(value=False)]), body=[Expr(value=Constant(value='Execute a statement using :sql:`VALUES` with a sequence of parameters.\n\n    :param cur: the cursor to use to execute the query.\n\n    :param sql: the query to execute. It must contain a single ``%s``\n        placeholder, which will be replaced by a `VALUES list`__.\n        Example: ``"INSERT INTO mytable (id, f1, f2) VALUES %s"``.\n\n    :param argslist: sequence of sequences or dictionaries with the arguments\n        to send to the query. The type and content must be consistent with\n        *template*.\n\n    :param template: the snippet to merge to every item in *argslist* to\n        compose the query.\n\n        - If the *argslist* items are sequences it should contain positional\n          placeholders (e.g. ``"(%s, %s, %s)"``, or ``"(%s, %s, 42)``" if there\n          are constants value...).\n\n        - If the *argslist* items are mappings it should contain named\n          placeholders (e.g. ``"(%(id)s, %(f1)s, 42)"``).\n\n        If not specified, assume the arguments are sequence and use a simple\n        positional template (i.e.  ``(%s, %s, ...)``), with the number of\n        placeholders sniffed by the first element in *argslist*.\n\n    :param page_size: maximum number of *argslist* items to include in every\n        statement. If there are more items the function will execute more than\n        one statement.\n\n    :param fetch: if `!True` return the query results into a list (like in a\n        `~cursor.fetchall()`).  Useful for queries with :sql:`RETURNING`\n        clause.\n\n    .. __: https://www.postgresql.org/docs/current/static/queries-values.html\n\n    After the execution of the function the `cursor.rowcount` property will\n    **not** contain a total result.\n\n    While :sql:`INSERT` is an obvious candidate for this function it is\n    possible to use it with other statements, for example::\n\n        >>> cur.execute(\n        ... "create table test (id int primary key, v1 int, v2 int)")\n\n        >>> execute_values(cur,\n        ... "INSERT INTO test (id, v1, v2) VALUES %s",\n        ... [(1, 2, 3), (4, 5, 6), (7, 8, 9)])\n\n        >>> execute_values(cur,\n        ... """UPDATE test SET v1 = data.v1 FROM (VALUES %s) AS data (id, v1)\n        ... WHERE test.id = data.id""",\n        ... [(1, 20), (4, 50)])\n\n        >>> cur.execute("select * from test order by id")\n        >>> cur.fetchall()\n        [(1, 20, 3), (4, 50, 6), (7, 8, 9)])\n\n    ')), ImportFrom(module='psycopg2.sql', names=[alias(name='Composable')], level=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sql', ctx=Load()), Name(id='Composable', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=Call(func=Attribute(value=Name(id='sql', ctx=Load()), attr='as_string', ctx=Load()), args=[Name(id='cur', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sql', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=Call(func=Attribute(value=Name(id='sql', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='_ext', ctx=Load()), attr='encodings', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='cur', ctx=Load()), attr='connection', ctx=Load()), attr='encoding', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='pre', ctx=Store()), Name(id='post', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_sql', ctx=Load()), args=[Name(id='sql', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=IfExp(test=Name(id='fetch', ctx=Load()), body=List(elts=[], ctx=Load()), orelse=Constant(value=None))), For(target=Name(id='page', ctx=Store()), iter=Call(func=Name(id='_paginate', ctx=Load()), args=[Name(id='argslist', ctx=Load())], keywords=[keyword(arg='page_size', value=Name(id='page_size', ctx=Load()))]), body=[If(test=Compare(left=Name(id='template', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='template', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=b'('), op=Add(), right=Call(func=Attribute(value=Constant(value=b','), attr='join', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value=b'%s')], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='page', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], keywords=[])), op=Add(), right=Constant(value=b')')))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Subscript(value=Name(id='pre', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='args', ctx=Store()), iter=Name(id='page', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='mogrify', ctx=Load()), args=[Name(id='template', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=b',')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Store())], value=Name(id='post', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='execute', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='fetch', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='fetchall', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_split_sql', args=arguments(posonlyargs=[], args=[arg(arg='sql')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split *sql* on a single ``%s`` placeholder.\n\n    Split on the %s, perform %% replacement and return pre, post lists of\n    snippets.\n    ')), Assign(targets=[Name(id='curr', ctx=Store()), Name(id='pre', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='post', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b'(%.)'), Name(id='sql', ctx=Load())], keywords=[])), For(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='token', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=b'%')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='curr', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='token', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value=b's')]), body=[If(test=Compare(left=Name(id='curr', ctx=Load()), ops=[Is()], comparators=[Name(id='pre', ctx=Load())]), body=[Assign(targets=[Name(id='curr', ctx=Store())], value=Name(id='post', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="the query contains more than one '%s' placeholder")], keywords=[]))])], orelse=[If(test=Compare(left=Subscript(value=Name(id='token', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'%')]), body=[Expr(value=Call(func=Attribute(value=Name(id='curr', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=b'%')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="unsupported format character: '%s'"), op=Mod(), right=Call(func=Attribute(value=Subscript(value=Name(id='token', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii'), Constant(value='replace')], keywords=[]))], keywords=[]))])])], orelse=[]), If(test=Compare(left=Name(id='curr', ctx=Load()), ops=[Is()], comparators=[Name(id='pre', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="the query doesn't contain any '%s' placeholder")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='pre', ctx=Load()), Name(id='post', ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_re_clean', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='['), op=Add(), right=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='escape', ctx=Load()), args=[Constant(value=' !"#$%&\'()*+,-./:;<=>?@[\\]^`{|}~')], keywords=[])), op=Add(), right=Constant(value=']'))], keywords=[]))], type_ignores=[])