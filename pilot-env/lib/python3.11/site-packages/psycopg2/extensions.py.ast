Module(body=[Expr(value=Constant(value='psycopg extensions to the DBAPI-2.0\n\nThis module holds all the extensions to the DBAPI-2.0 provided by psycopg.\n\n- `connection` -- the new-type inheritable connection class\n- `cursor` -- the new-type inheritable cursor class\n- `lobject` -- the new-type inheritable large object class\n- `adapt()` -- exposes the PEP-246_ compatible adapting mechanism used\n  by psycopg to adapt Python types to PostgreSQL ones\n\n.. _PEP-246: https://www.python.org/dev/peps/pep-0246/\n')), Import(names=[alias(name='re', asname='_re')]), ImportFrom(module='psycopg2._psycopg', names=[alias(name='BINARYARRAY'), alias(name='BOOLEAN'), alias(name='BOOLEANARRAY'), alias(name='BYTES'), alias(name='BYTESARRAY'), alias(name='DATE'), alias(name='DATEARRAY'), alias(name='DATETIMEARRAY'), alias(name='DECIMAL'), alias(name='DECIMALARRAY'), alias(name='FLOAT'), alias(name='FLOATARRAY'), alias(name='INTEGER'), alias(name='INTEGERARRAY'), alias(name='INTERVAL'), alias(name='INTERVALARRAY'), alias(name='LONGINTEGER'), alias(name='LONGINTEGERARRAY'), alias(name='ROWIDARRAY'), alias(name='STRINGARRAY'), alias(name='TIME'), alias(name='TIMEARRAY'), alias(name='UNICODE'), alias(name='UNICODEARRAY'), alias(name='AsIs'), alias(name='Binary'), alias(name='Boolean'), alias(name='Float'), alias(name='Int'), alias(name='QuotedString')], level=0), ImportFrom(module='psycopg2._psycopg', names=[alias(name='PYDATE'), alias(name='PYDATETIME'), alias(name='PYDATETIMETZ'), alias(name='PYINTERVAL'), alias(name='PYTIME'), alias(name='PYDATEARRAY'), alias(name='PYDATETIMEARRAY'), alias(name='PYDATETIMETZARRAY'), alias(name='PYINTERVALARRAY'), alias(name='PYTIMEARRAY'), alias(name='DateFromPy'), alias(name='TimeFromPy'), alias(name='TimestampFromPy'), alias(name='IntervalFromPy')], level=0), ImportFrom(module='psycopg2._psycopg', names=[alias(name='adapt'), alias(name='adapters'), alias(name='encodings'), alias(name='connection'), alias(name='cursor'), alias(name='lobject'), alias(name='Xid'), alias(name='libpq_version'), alias(name='parse_dsn'), alias(name='quote_ident'), alias(name='string_types'), alias(name='binary_types'), alias(name='new_type'), alias(name='new_array_type'), alias(name='register_type'), alias(name='ISQLQuote'), alias(name='Notify'), alias(name='Diagnostics'), alias(name='Column'), alias(name='ConnectionInfo'), alias(name='QueryCanceledError'), alias(name='TransactionRollbackError'), alias(name='set_wait_callback'), alias(name='get_wait_callback'), alias(name='encrypt_password')], level=0), Expr(value=Constant(value='Isolation level values.')), Assign(targets=[Name(id='ISOLATION_LEVEL_AUTOCOMMIT', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='ISOLATION_LEVEL_READ_UNCOMMITTED', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='ISOLATION_LEVEL_READ_COMMITTED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='ISOLATION_LEVEL_REPEATABLE_READ', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='ISOLATION_LEVEL_SERIALIZABLE', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='ISOLATION_LEVEL_DEFAULT', ctx=Store())], value=Constant(value=None)), Expr(value=Constant(value='psycopg connection status values.')), Assign(targets=[Name(id='STATUS_SETUP', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='STATUS_READY', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='STATUS_BEGIN', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='STATUS_SYNC', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='STATUS_ASYNC', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='STATUS_PREPARED', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='STATUS_IN_TRANSACTION', ctx=Store())], value=Name(id='STATUS_BEGIN', ctx=Load())), Expr(value=Constant(value='psycopg asynchronous connection polling values')), Assign(targets=[Name(id='POLL_OK', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='POLL_READ', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='POLL_WRITE', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='POLL_ERROR', ctx=Store())], value=Constant(value=3)), Expr(value=Constant(value='Backend transaction status values.')), Assign(targets=[Name(id='TRANSACTION_STATUS_IDLE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='TRANSACTION_STATUS_ACTIVE', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='TRANSACTION_STATUS_INTRANS', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='TRANSACTION_STATUS_INERROR', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='TRANSACTION_STATUS_UNKNOWN', ctx=Store())], value=Constant(value=4)), FunctionDef(name='register_adapter', args=arguments(posonlyargs=[], args=[arg(arg='typ'), arg(arg='callable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Register 'callable' as an ISQLQuote adapter for type 'typ'.")), Assign(targets=[Subscript(value=Name(id='adapters', ctx=Load()), slice=Tuple(elts=[Name(id='typ', ctx=Load()), Name(id='ISQLQuote', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='callable', ctx=Load()))], decorator_list=[]), ClassDef(name='SQL_IN', bases=[], keywords=[], body=[Expr(value=Constant(value='Adapt any iterable to an SQL quotable object.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='seq')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_seq', ctx=Store())], value=Name(id='seq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Store())], value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pobjs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='adapt', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_seq', ctx=Load()), ifs=[], is_async=0)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='obj', ctx=Store()), iter=Name(id='pobjs', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='prepare')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='qobjs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='o', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='pobjs', ctx=Load()), ifs=[], is_async=0)])), Return(value=BinOp(left=BinOp(left=Constant(value=b'('), op=Add(), right=Call(func=Attribute(value=Constant(value=b', '), attr='join', ctx=Load()), args=[Name(id='qobjs', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=b')')))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NoneAdapter', bases=[], keywords=[], body=[Expr(value=Constant(value='Adapt None to NULL.\n\n    This adapter is not used normally as a fast path in mogrify uses NULL,\n    but it makes easier to adapt composite types.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_null')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=b'NULL')]), body=[Return(value=Name(id='_null', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='make_dsn', args=arguments(posonlyargs=[], args=[arg(arg='dsn')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Convert a set of keywords into a connection strings.')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dsn', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='kwargs', ctx=Load()))]), body=[Return(value=Constant(value=''))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='kwargs', ctx=Load())), body=[Expr(value=Call(func=Name(id='parse_dsn', ctx=Load()), args=[Name(id='dsn', ctx=Load())], keywords=[])), Return(value=Name(id='dsn', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='database'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[If(test=Compare(left=Constant(value='dbname'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value="you can't specify both 'database' and 'dbname' arguments")], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='dbname'), ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='database')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='kwargs', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), If(test=Compare(left=Name(id='dsn', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Name(id='parse_dsn', ctx=Load()), args=[Name(id='dsn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tmp', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Name(id='tmp', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dsn', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value='{}={}'), attr='format', ctx=Load()), args=[Name(id='k', ctx=Load()), Call(func=Name(id='_param_escape', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Name(id='parse_dsn', ctx=Load()), args=[Name(id='dsn', ctx=Load())], keywords=[])), Return(value=Name(id='dsn', ctx=Load()))], decorator_list=[]), FunctionDef(name='_param_escape', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='re_escape'), arg(arg='re_space')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value="([\\\\'])")], keywords=[]), Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\s')], keywords=[])]), body=[Expr(value=Constant(value='\n    Apply the escaping rule required by PQconnectdb\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Return(value=Constant(value="''"))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='re_escape', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\\\\\1'), Name(id='s', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='re_space', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value="'"), op=Add(), right=Name(id='s', ctx=Load())), op=Add(), right=Constant(value="'")))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), ImportFrom(module='psycopg2._json', names=[alias(name='register_default_json'), alias(name='register_default_jsonb')], level=0), Try(body=[Assign(targets=[Tuple(elts=[Name(id='JSON', ctx=Store()), Name(id='JSONARRAY', ctx=Store())], ctx=Store())], value=Call(func=Name(id='register_default_json', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='JSONB', ctx=Store()), Name(id='JSONBARRAY', ctx=Store())], ctx=Store())], value=Call(func=Name(id='register_default_jsonb', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Delete(targets=[Name(id='register_default_json', ctx=Del()), Name(id='register_default_jsonb', ctx=Del())]), ImportFrom(module='psycopg2._range', names=[alias(name='Range')], level=0), Delete(targets=[Name(id='Range', ctx=Del())]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encodings', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='')], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='encodings', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[]), Delete(targets=[Name(id='k', ctx=Del()), Name(id='v', ctx=Del())])], type_ignores=[])