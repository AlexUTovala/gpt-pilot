Module(body=[Expr(value=Constant(value='Implementation of the ipaddres-based network types adaptation\n')), ImportFrom(module='psycopg2.extensions', names=[alias(name='new_type'), alias(name='new_array_type'), alias(name='register_type'), alias(name='register_adapter'), alias(name='QuotedString')], level=0), Assign(targets=[Name(id='ipaddress', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='_casters', ctx=Store())], value=Constant(value=None)), FunctionDef(name='register_ipaddress', args=arguments(posonlyargs=[], args=[arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Register conversion support between `ipaddress` objects and `network types`__.\n\n    :param conn_or_curs: the scope where to register the type casters.\n        If `!None` register them globally.\n\n    After the function is called, PostgreSQL :sql:`inet` values will be\n    converted into `~ipaddress.IPv4Interface` or `~ipaddress.IPv6Interface`\n    objects, :sql:`cidr` values into into `~ipaddress.IPv4Network` or\n    `~ipaddress.IPv6Network`.\n\n    .. __: https://www.postgresql.org/docs/current/static/datatype-net-types.html\n    ')), Global(names=['ipaddress']), Import(names=[alias(name='ipaddress')]), Global(names=['_casters']), If(test=Compare(left=Name(id='_casters', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_casters', ctx=Store())], value=Call(func=Name(id='_make_casters', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='c', ctx=Store()), iter=Name(id='_casters', ctx=Load()), body=[Expr(value=Call(func=Name(id='register_type', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='t', ctx=Store()), iter=List(elts=[Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv4Interface', ctx=Load()), Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv6Interface', ctx=Load()), Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv4Network', ctx=Load()), Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv6Network', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Name(id='register_adapter', ctx=Load()), args=[Name(id='t', ctx=Load()), Name(id='adapt_ipaddress', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_make_casters', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inet', ctx=Store())], value=Call(func=Name(id='new_type', ctx=Load()), args=[Tuple(elts=[Constant(value=869)], ctx=Load()), Constant(value='INET'), Name(id='cast_interface', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ainet', ctx=Store())], value=Call(func=Name(id='new_array_type', ctx=Load()), args=[Tuple(elts=[Constant(value=1041)], ctx=Load()), Constant(value='INET[]'), Name(id='inet', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cidr', ctx=Store())], value=Call(func=Name(id='new_type', ctx=Load()), args=[Tuple(elts=[Constant(value=650)], ctx=Load()), Constant(value='CIDR'), Name(id='cast_network', ctx=Load())], keywords=[])), Assign(targets=[Name(id='acidr', ctx=Store())], value=Call(func=Name(id='new_array_type', ctx=Load()), args=[Tuple(elts=[Constant(value=651)], ctx=Load()), Constant(value='CIDR[]'), Name(id='cidr', ctx=Load())], keywords=[])), Return(value=List(elts=[Name(id='inet', ctx=Load()), Name(id='ainet', ctx=Load()), Name(id='cidr', ctx=Load()), Name(id='acidr', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='cast_interface', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='cur')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_interface', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='cast_network', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='cur')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_network', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='adapt_ipaddress', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='QuotedString', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])