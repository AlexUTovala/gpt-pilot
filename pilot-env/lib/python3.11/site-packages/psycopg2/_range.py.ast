Module(body=[Expr(value=Constant(value='Implementation of the Range type and adaptation\n\n')), Import(names=[alias(name='re')]), ImportFrom(module='psycopg2._psycopg', names=[alias(name='ProgrammingError'), alias(name='InterfaceError')], level=0), ImportFrom(module='psycopg2.extensions', names=[alias(name='ISQLQuote'), alias(name='adapt'), alias(name='register_adapter')], level=0), ImportFrom(module='psycopg2.extensions', names=[alias(name='new_type'), alias(name='new_array_type'), alias(name='register_type')], level=0), ClassDef(name='Range', bases=[], keywords=[], body=[Expr(value=Constant(value='Python representation for a PostgreSQL |range|_ type.\n\n    :param lower: lower bound for the range. `!None` means unbound\n    :param upper: upper bound for the range. `!None` means unbound\n    :param bounds: one of the literal strings ``()``, ``[)``, ``(]``, ``[]``,\n        representing whether the lower or upper bounds are included\n    :param empty: if `!True`, the range is empty\n\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_lower'), Constant(value='_upper'), Constant(value='_bounds')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lower'), arg(arg='upper'), arg(arg='bounds'), arg(arg='empty')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='[)'), Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='empty', ctx=Load())), body=[If(test=Compare(left=Name(id='bounds', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='[)'), Constant(value='(]'), Constant(value='()'), Constant(value='[]')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='bound flags not valid: '), FormattedValue(value=Name(id='bounds', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Store())], value=Name(id='lower', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Store())], value=Name(id='upper', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Name(id='bounds', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Store())], value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(empty=True)')]))], orelse=[Return(value=Call(func=Attribute(value=Constant(value='{}({!r}, {!r}, {!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value='empty'))], orelse=[]), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load())], keywords=[]), Constant(value=', '), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load())], keywords=[]), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='lower', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The lower bound of the range. `!None` if empty or unbound.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='upper', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The upper bound of the range. `!None` if empty or unbound.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='isempty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`!True` if the range is empty.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='lower_inf', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="`!True` if the range doesn't have a lower bound.")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='upper_inf', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="`!True` if the range doesn't have an upper bound.")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='lower_inc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`!True` if the lower bound is included in the range.')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='upper_inc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`!True` if the upper bound is included in the range.')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=']')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=']')]), body=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Range', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_lower', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_upper', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_bounds', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_lower', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_upper', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bounds', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Range', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), For(target=Name(id='attr', ctx=Store()), iter=Tuple(elts=[Constant(value='_lower'), Constant(value='_upper'), Constant(value='_bounds')], ctx=Load()), body=[Assign(targets=[Name(id='self_value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='other_value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='self_value', ctx=Load()), ops=[Eq()], comparators=[Name(id='other_value', ctx=Load())]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='self_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='other_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Compare(left=Name(id='self_value', ctx=Load()), ops=[Lt()], comparators=[Name(id='other_value', ctx=Load())]))])])])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='__le__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__lt__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Range', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='__lt__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='NotImplemented', ctx=Load()))])], decorator_list=[]), FunctionDef(name='__ge__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__gt__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='slot', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='slot', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='slot', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='slot', ctx=Load())], keywords=[])], is_async=0)]))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='slot', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='slot', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='register_range', args=arguments(posonlyargs=[], args=[arg(arg='pgrange'), arg(arg='pyrange'), arg(arg='conn_or_curs'), arg(arg='globally')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Create and register an adapter and the typecasters to convert between\n    a PostgreSQL |range|_ type and a PostgreSQL `Range` subclass.\n\n    :param pgrange: the name of the PostgreSQL |range| type. Can be\n        schema-qualified\n    :param pyrange: a `Range` strict subclass, or just a name to give to a new\n        class\n    :param conn_or_curs: a connection or cursor used to find the oid of the\n        range and its subtype; the typecaster is registered in a scope limited\n        to this object, unless *globally* is set to `!True`\n    :param globally: if `!False` (default) register the typecaster only on\n        *conn_or_curs*, otherwise register it globally\n    :return: `RangeCaster` instance responsible for the conversion\n\n    If a string is passed to *pyrange*, a new `Range` subclass is created\n    with such name and will be available as the `~RangeCaster.range` attribute\n    of the returned `RangeCaster` object.\n\n    The function queries the database on *conn_or_curs* to inspect the\n    *pgrange* type and raises `~psycopg2.ProgrammingError` if the type is not\n    found.  If querying the database is not advisable, use directly the\n    `RangeCaster` class and register the adapter and typecasters using the\n    provided functions.\n\n    ')), Assign(targets=[Name(id='caster', ctx=Store())], value=Call(func=Attribute(value=Name(id='RangeCaster', ctx=Load()), attr='_from_db', ctx=Load()), args=[Name(id='pgrange', ctx=Load()), Name(id='pyrange', ctx=Load()), Name(id='conn_or_curs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='caster', ctx=Load()), attr='_register', ctx=Load()), args=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='globally', ctx=Load())), Name(id='conn_or_curs', ctx=Load())]), Constant(value=None)])], keywords=[])), Return(value=Name(id='caster', ctx=Load()))], decorator_list=[]), ClassDef(name='RangeAdapter', bases=[], keywords=[], body=[Expr(value=Constant(value='`ISQLQuote` adapter for `Range` subclasses.\n\n    This is an abstract class: concrete classes must set a `name` class\n    attribute or override `getquoted()`.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='adapted')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adapted', ctx=Store())], value=Name(id='adapted', ctx=Load()))], decorator_list=[]), FunctionDef(name='__conform__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proto')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_proto', ctx=Load()), ops=[Is()], comparators=[Name(id='ISQLQuote', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Store())], value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='RangeAdapter must be subclassed overriding its name or the getquoted() method')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='r', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='adapted', ctx=Load())), If(test=Attribute(value=Name(id='r', ctx=Load()), attr='isempty', ctx=Load()), body=[Return(value=BinOp(left=Constant(value=b"'empty'::"), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[])))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='r', ctx=Load()), attr='lower', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='adapt', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='lower', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='a', ctx=Load()), Constant(value='prepare')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='lower', ctx=Store())], value=Constant(value=b'NULL'))]), If(test=Compare(left=Attribute(value=Name(id='r', ctx=Load()), attr='upper', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='adapt', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='upper', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='a', ctx=Load()), Constant(value='prepare')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='prepare', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='getquoted', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='upper', ctx=Store())], value=Constant(value=b'NULL'))]), Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]), op=Add(), right=Constant(value=b'(')), op=Add(), right=Name(id='lower', ctx=Load())), op=Add(), right=Constant(value=b', ')), op=Add(), right=Name(id='upper', ctx=Load())), op=Add(), right=Constant(value=b", '")), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='r', ctx=Load()), attr='_bounds', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[])), op=Add(), right=Constant(value=b"')")))], decorator_list=[])], decorator_list=[]), ClassDef(name='RangeCaster', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper class to convert between `Range` and PostgreSQL range types.\n\n    Objects of this class are usually created by `register_range()`. Manual\n    creation could be useful if querying the database is not advisable: in\n    this case the oids must be provided.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pgrange'), arg(arg='pyrange'), arg(arg='oid'), arg(arg='subtype_oid'), arg(arg='array_oid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subtype_oid', ctx=Store())], value=Name(id='subtype_oid', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_ranges', ctx=Load()), args=[Name(id='pgrange', ctx=Load()), Name(id='pyrange', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='typecaster', ctx=Store())], value=Call(func=Name(id='new_type', ctx=Load()), args=[Tuple(elts=[Name(id='oid', ctx=Load())], ctx=Load()), Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='array_oid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Store())], value=Call(func=Name(id='new_array_type', ctx=Load()), args=[Tuple(elts=[Name(id='array_oid', ctx=Load())], ctx=Load()), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='ARRAY')), Attribute(value=Name(id='self', ctx=Load()), attr='typecaster', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Store())], value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='_create_ranges', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pgrange'), arg(arg='pyrange')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create Range and RangeAdapter classes if needed.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pgrange', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='pgrange', ctx=Load()), Tuple(elts=[Name(id='RangeAdapter', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Load()), attr='name', ctx=Store())], value=Name(id='pgrange', ctx=Load()))], orelse=[Try(body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='pgrange', ctx=Load()), Name(id='RangeAdapter', ctx=Load())], keywords=[]), Compare(left=Name(id='pgrange', ctx=Load()), ops=[IsNot()], comparators=[Name(id='RangeAdapter', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Store())], value=Name(id='pgrange', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='pgrange must be a string or a RangeAdapter strict subclass')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Store())], value=Constant(value=None)), Try(body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pyrange', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='pyrange', ctx=Load()), Tuple(elts=[Name(id='Range', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='pyrange', ctx=Load()), Name(id='Range', ctx=Load())], keywords=[]), Compare(left=Name(id='pyrange', ctx=Load()), ops=[IsNot()], comparators=[Name(id='Range', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Store())], value=Name(id='pyrange', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='pyrange must be a type or a Range strict subclass')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_from_db', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='pyrange'), arg(arg='conn_or_curs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a `RangeCaster` instance for the type *pgrange*.\n\n        Raise `ProgrammingError` if the type is not found.\n        ')), ImportFrom(module='psycopg2.extensions', names=[alias(name='STATUS_IN_TRANSACTION')], level=0), ImportFrom(module='psycopg2.extras', names=[alias(name='_solve_conn_curs')], level=0), Assign(targets=[Tuple(elts=[Name(id='conn', ctx=Store()), Name(id='curs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_solve_conn_curs', ctx=Load()), args=[Name(id='conn_or_curs', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='conn', ctx=Load()), attr='info', ctx=Load()), attr='server_version', ctx=Load()), ops=[Lt()], comparators=[Constant(value=90200)]), body=[Raise(exc=Call(func=Name(id='ProgrammingError', ctx=Load()), args=[BinOp(left=Constant(value='range types not available in version %s'), op=Mod(), right=Attribute(value=Attribute(value=Name(id='conn', ctx=Load()), attr='info', ctx=Load()), attr='server_version', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='conn_status', ctx=Store())], value=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='tname', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Name(id='tname', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='public'))]), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='select rngtypid, rngsubtype, typarray\nfrom pg_range r\njoin pg_type t on t.oid = rngtypid\njoin pg_namespace ns on ns.oid = typnamespace\nwhere typname = %s and ns.nspname = %s;\n'), Tuple(elts=[Name(id='tname', ctx=Load()), Name(id='schema', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='rec', ctx=Store())], value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='rec', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='savepoint', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Name(id='STATUS_IN_TRANSACTION', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='SAVEPOINT register_type')], keywords=[])), Assign(targets=[Name(id='savepoint', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='SELECT rngtypid, rngsubtype, typarray, typname, nspname\nfrom pg_range r\njoin pg_type t on t.oid = rngtypid\njoin pg_namespace ns on ns.oid = typnamespace\nWHERE t.oid = %s::regtype\n'), Tuple(elts=[Name(id='name', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ProgrammingError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='rec', ctx=Store())], value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])), If(test=Name(id='rec', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='tname', ctx=Store()), Name(id='schema', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='rec', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load()))], orelse=[])], finalbody=[If(test=Name(id='savepoint', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='ROLLBACK TO SAVEPOINT register_type')], keywords=[]))], orelse=[])])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='conn_status', ctx=Load()), ops=[NotEq()], comparators=[Name(id='STATUS_IN_TRANSACTION', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='conn', ctx=Load()), attr='autocommit', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='rollback', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='rec', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ProgrammingError', ctx=Load()), args=[JoinedStr(values=[Constant(value="PostgreSQL range '"), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value="' not found")])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='type', ctx=Store()), Name(id='subtype', ctx=Store()), Name(id='array', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='rec', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load())), Return(value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='pyrange', ctx=Load())], keywords=[keyword(arg='oid', value=Name(id='type', ctx=Load())), keyword(arg='subtype_oid', value=Name(id='subtype', ctx=Load())), keyword(arg='array_oid', value=Name(id='array', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), Assign(targets=[Name(id='_re_range', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n        ( \\(|\\[ )                   # lower bound flag\n        (?:                         # lower bound:\n          " ( (?: [^"] | "")* ) "   #   - a quoted string\n          | ( [^",]+ )              #   - or an unquoted string\n        )?                          #   - or empty (not catched)\n        ,\n        (?:                         # upper bound:\n          " ( (?: [^"] | "")* ) "   #   - a quoted string\n          | ( [^"\\)\\]]+ )           #   - or an unquoted string\n        )?                          #   - or empty (not catched)\n        ( \\)|\\] )                   # upper bound flag\n        '), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_re_undouble', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(["\\\\])\\1')], keywords=[])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s'), arg(arg='cur')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Eq()], comparators=[Constant(value='empty')]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Load()), args=[], keywords=[keyword(arg='empty', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_range', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='InterfaceError', ctx=Load()), args=[JoinedStr(values=[Constant(value="failed to parse range: '"), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=3)], keywords=[])), If(test=Compare(left=Name(id='lower', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])), If(test=Compare(left=Name(id='lower', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_undouble', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\1'), Name(id='lower', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=5)], keywords=[])), If(test=Compare(left=Name(id='upper', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=4)], keywords=[])), If(test=Compare(left=Name(id='upper', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_undouble', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\1'), Name(id='upper', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='cur', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='cast', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='subtype_oid', ctx=Load()), Name(id='lower', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Name(id='cur', ctx=Load()), attr='cast', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='subtype_oid', ctx=Load()), Name(id='upper', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='bounds', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=6)], keywords=[]))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Load()), args=[Name(id='lower', ctx=Load()), Name(id='upper', ctx=Load()), Name(id='bounds', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_register', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scope')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='register_type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='typecaster', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='register_type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='array_typecaster', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='register_adapter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='range', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='adapter', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='NumericRange', bases=[Name(id='Range', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A `Range` suitable to pass Python numeric types to a PostgreSQL range.\n\n    PostgreSQL types :sql:`int4range`, :sql:`int8range`, :sql:`numrange` are\n    casted into `!NumericRange` instances.\n    ')), Pass()], decorator_list=[]), ClassDef(name='DateRange', bases=[Name(id='Range', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Represents :sql:`daterange` values.')), Pass()], decorator_list=[]), ClassDef(name='DateTimeRange', bases=[Name(id='Range', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Represents :sql:`tsrange` values.')), Pass()], decorator_list=[]), ClassDef(name='DateTimeTZRange', bases=[Name(id='Range', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Represents :sql:`tstzrange` values.')), Pass()], decorator_list=[]), ClassDef(name='NumberRangeAdapter', bases=[Name(id='RangeAdapter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Adapt a range if the subtype doesn't need quotes.")), FunctionDef(name='getquoted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='adapted', ctx=Load())), If(test=Attribute(value=Name(id='r', ctx=Load()), attr='isempty', ctx=Load()), body=[Return(value=Constant(value=b"'empty'"))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='r', ctx=Load()), attr='lower_inf', ctx=Load())), body=[Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='adapt', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='lower', ctx=Load())], keywords=[]), attr='getquoted', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[Assign(targets=[Name(id='lower', ctx=Store())], value=Constant(value=''))]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='r', ctx=Load()), attr='upper_inf', ctx=Load())), body=[Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='adapt', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='upper', ctx=Load())], keywords=[]), attr='getquoted', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[Assign(targets=[Name(id='upper', ctx=Store())], value=Constant(value=''))]), Return(value=Call(func=Attribute(value=JoinedStr(values=[Constant(value="'"), FormattedValue(value=Subscript(value=Attribute(value=Name(id='r', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1), FormattedValue(value=Name(id='lower', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Name(id='upper', ctx=Load()), conversion=-1), FormattedValue(value=Subscript(value=Attribute(value=Name(id='r', ctx=Load()), attr='_bounds', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1), Constant(value="'")]), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Name(id='register_adapter', ctx=Load()), args=[Name(id='NumericRange', ctx=Load()), Name(id='NumberRangeAdapter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='int4range_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Name(id='NumberRangeAdapter', ctx=Load()), Name(id='NumericRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3904)), keyword(arg='subtype_oid', value=Constant(value=23)), keyword(arg='array_oid', value=Constant(value=3905))])), Expr(value=Call(func=Attribute(value=Name(id='int4range_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='int8range_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Name(id='NumberRangeAdapter', ctx=Load()), Name(id='NumericRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3926)), keyword(arg='subtype_oid', value=Constant(value=20)), keyword(arg='array_oid', value=Constant(value=3927))])), Expr(value=Call(func=Attribute(value=Name(id='int8range_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='numrange_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Name(id='NumberRangeAdapter', ctx=Load()), Name(id='NumericRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3906)), keyword(arg='subtype_oid', value=Constant(value=1700)), keyword(arg='array_oid', value=Constant(value=3907))])), Expr(value=Call(func=Attribute(value=Name(id='numrange_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='daterange_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Constant(value='daterange'), Name(id='DateRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3912)), keyword(arg='subtype_oid', value=Constant(value=1082)), keyword(arg='array_oid', value=Constant(value=3913))])), Expr(value=Call(func=Attribute(value=Name(id='daterange_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tsrange_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Constant(value='tsrange'), Name(id='DateTimeRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3908)), keyword(arg='subtype_oid', value=Constant(value=1114)), keyword(arg='array_oid', value=Constant(value=3909))])), Expr(value=Call(func=Attribute(value=Name(id='tsrange_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tstzrange_caster', ctx=Store())], value=Call(func=Name(id='RangeCaster', ctx=Load()), args=[Constant(value='tstzrange'), Name(id='DateTimeTZRange', ctx=Load())], keywords=[keyword(arg='oid', value=Constant(value=3910)), keyword(arg='subtype_oid', value=Constant(value=1184)), keyword(arg='array_oid', value=Constant(value=3911))])), Expr(value=Call(func=Attribute(value=Name(id='tstzrange_caster', ctx=Load()), attr='_register', ctx=Load()), args=[], keywords=[]))], type_ignores=[])