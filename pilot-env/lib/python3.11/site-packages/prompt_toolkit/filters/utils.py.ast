Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='base', names=[alias(name='Always'), alias(name='Filter'), alias(name='FilterOrBool'), alias(name='Never')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='to_filter'), Constant(value='is_true')], ctx=Load())), Assign(targets=[Name(id='_always', ctx=Store())], value=Call(func=Name(id='Always', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_never', ctx=Store())], value=Call(func=Name(id='Never', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='_bool_to_filter', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='Filter', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value=True), Constant(value=False)], values=[Name(id='_always', ctx=Load()), Name(id='_never', ctx=Load())]), simple=1), FunctionDef(name='to_filter', args=arguments(posonlyargs=[], args=[arg(arg='bool_or_filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Accept both booleans and Filters as input and\n    turn it into a Filter.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='bool_or_filter', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Name(id='_bool_to_filter', ctx=Load()), slice=Name(id='bool_or_filter', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='bool_or_filter', ctx=Load()), Name(id='Filter', ctx=Load())], keywords=[]), body=[Return(value=Name(id='bool_or_filter', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='Expecting a bool or a Filter instance. Got %r'), op=Mod(), right=Name(id='bool_or_filter', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='Filter', ctx=Load())), FunctionDef(name='is_true', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Test whether `value` is True. In case of a Filter, call it.\n\n    :param value: Boolean or `Filter` instance.\n    ')), Return(value=Call(func=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])