Module(body=[Expr(value=Constant(value='\nMouse events.\n\n\nHow it works\n------------\n\nThe renderer has a 2 dimensional grid of mouse event handlers.\n(`prompt_toolkit.layout.MouseHandlers`.) When the layout is rendered, the\n`Window` class will make sure that this grid will also be filled with\ncallbacks. For vt100 terminals, mouse events are received through stdin, just\nlike any other key press. There is a handler among the key bindings that\ncatches these events and forwards them to such a mouse event handler. It passes\nthrough the `Window` class where the coordinates are translated from absolute\ncoordinates to coordinates relative to the user control, and there\n`UIControl.mouse_handler` is called.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='data_structures', names=[alias(name='Point')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MouseEventType'), Constant(value='MouseButton'), Constant(value='MouseModifier'), Constant(value='MouseEvent')], ctx=Load())), ClassDef(name='MouseEventType', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='MOUSE_UP', ctx=Store())], value=Constant(value='MOUSE_UP')), Assign(targets=[Name(id='MOUSE_DOWN', ctx=Store())], value=Constant(value='MOUSE_DOWN')), Assign(targets=[Name(id='SCROLL_UP', ctx=Store())], value=Constant(value='SCROLL_UP')), Assign(targets=[Name(id='SCROLL_DOWN', ctx=Store())], value=Constant(value='SCROLL_DOWN')), Assign(targets=[Name(id='MOUSE_MOVE', ctx=Store())], value=Constant(value='MOUSE_MOVE'))], decorator_list=[]), ClassDef(name='MouseButton', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='LEFT', ctx=Store())], value=Constant(value='LEFT')), Assign(targets=[Name(id='MIDDLE', ctx=Store())], value=Constant(value='MIDDLE')), Assign(targets=[Name(id='RIGHT', ctx=Store())], value=Constant(value='RIGHT')), Assign(targets=[Name(id='NONE', ctx=Store())], value=Constant(value='NONE')), Assign(targets=[Name(id='UNKNOWN', ctx=Store())], value=Constant(value='UNKNOWN'))], decorator_list=[]), ClassDef(name='MouseModifier', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='SHIFT', ctx=Store())], value=Constant(value='SHIFT')), Assign(targets=[Name(id='ALT', ctx=Store())], value=Constant(value='ALT')), Assign(targets=[Name(id='CONTROL', ctx=Store())], value=Constant(value='CONTROL'))], decorator_list=[]), ClassDef(name='MouseEvent', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Mouse event, sent to `UIControl.mouse_handler`.\n\n    :param position: `Point` instance.\n    :param event_type: `MouseEventType`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='position', annotation=Name(id='Point', ctx=Load())), arg(arg='event_type', annotation=Name(id='MouseEventType', ctx=Load())), arg(arg='button', annotation=Name(id='MouseButton', ctx=Load())), arg(arg='modifiers', annotation=Subscript(value=Name(id='frozenset', ctx=Load()), slice=Name(id='MouseModifier', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Name(id='position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='event_type', ctx=Store())], value=Name(id='event_type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='button', ctx=Store())], value=Name(id='button', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='modifiers', ctx=Store())], value=Name(id='modifiers', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='MouseEvent({!r},{!r},{!r},{!r})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='event_type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='button', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='modifiers', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])