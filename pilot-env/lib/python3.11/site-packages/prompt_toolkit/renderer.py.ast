Module(body=[Expr(value=Constant(value='\nRenders the command line on the console.\n(Redraws parts of the input line that were changed.)\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='asyncio', names=[alias(name='FIRST_COMPLETED'), alias(name='Future'), alias(name='ensure_future'), alias(name='sleep'), alias(name='wait')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Hashable')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='CursorShape')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Point'), alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.layout.mouse_handlers', names=[alias(name='MouseHandlers')], level=0), ImportFrom(module='prompt_toolkit.layout.screen', names=[alias(name='Char'), alias(name='Screen'), alias(name='WritePosition')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='ColorDepth'), alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Attrs'), alias(name='BaseStyle'), alias(name='DummyStyleTransformation'), alias(name='StyleTransformation')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.layout.layout', names=[alias(name='Layout')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Renderer'), Constant(value='print_formatted_text')], ctx=Load())), FunctionDef(name='_output_screen_diff', args=arguments(posonlyargs=[], args=[arg(arg='app', annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='output', annotation=Name(id='Output', ctx=Load())), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='current_pos', annotation=Name(id='Point', ctx=Load())), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load())), arg(arg='previous_screen', annotation=BinOp(left=Name(id='Screen', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='last_style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='is_done', annotation=Name(id='bool', ctx=Load())), arg(arg='full_screen', annotation=Name(id='bool', ctx=Load())), arg(arg='attrs_for_style_string', annotation=Name(id='_StyleStringToAttrsCache', ctx=Load())), arg(arg='style_string_has_style', annotation=Name(id='_StyleStringHasStyleCache', ctx=Load())), arg(arg='size', annotation=Name(id='Size', ctx=Load())), arg(arg='previous_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Render the diff between this screen and the previous screen.\n\n    This takes two `Screen` instances. The one that represents the output like\n    it was during the last rendering and one that represents the current\n    output raster. Looking at these two `Screen` instances, this function will\n    render the difference by calling the appropriate methods of the `Output`\n    object that only paint the changes to the terminal.\n\n    This is some performance-critical code which is heavily optimized.\n    Don't change things without profiling first.\n\n    :param current_pos: Current cursor position.\n    :param last_style: The style string, used for drawing the last drawn\n        character.  (Color/attributes.)\n    :param attrs_for_style_string: :class:`._StyleStringToAttrsCache` instance.\n    :param width: The width of the terminal.\n    :param previous_width: The width of the terminal during the last rendering.\n    ")), Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='size', ctx=Load()), attr='columns', ctx=Load()), Attribute(value=Name(id='size', ctx=Load()), attr='rows', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='write', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='write', ctx=Load())), Assign(targets=[Name(id='write_raw', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='write_raw', ctx=Load())), Assign(targets=[Name(id='_output_set_attributes', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='set_attributes', ctx=Load())), Assign(targets=[Name(id='_output_reset_attributes', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='reset_attributes', ctx=Load())), Assign(targets=[Name(id='_output_cursor_forward', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_forward', ctx=Load())), Assign(targets=[Name(id='_output_cursor_up', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_up', ctx=Load())), Assign(targets=[Name(id='_output_cursor_backward', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_backward', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='hide_cursor', ctx=Load()), args=[], keywords=[])), FunctionDef(name='reset_attributes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrapper around Output.reset_attributes.')), Nonlocal(names=['last_style']), Expr(value=Call(func=Name(id='_output_reset_attributes', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='last_style', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor', args=arguments(posonlyargs=[], args=[arg(arg='new', annotation=Name(id='Point', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor to this `new` point. Returns the given Point.')), Assign(targets=[Tuple(elts=[Name(id='current_x', ctx=Store()), Name(id='current_y', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='current_pos', ctx=Load()), attr='x', ctx=Load()), Attribute(value=Name(id='current_pos', ctx=Load()), attr='y', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='new', ctx=Load()), attr='y', ctx=Load()), ops=[Gt()], comparators=[Name(id='current_y', ctx=Load())]), body=[Expr(value=Call(func=Name(id='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='write', ctx=Load()), args=[BinOp(left=Constant(value='\r\n'), op=Mult(), right=BinOp(left=Attribute(value=Name(id='new', ctx=Load()), attr='y', ctx=Load()), op=Sub(), right=Name(id='current_y', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='current_x', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='_output_cursor_forward', ctx=Load()), args=[Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load())], keywords=[])), Return(value=Name(id='new', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='new', ctx=Load()), attr='y', ctx=Load()), ops=[Lt()], comparators=[Name(id='current_y', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_output_cursor_up', ctx=Load()), args=[BinOp(left=Name(id='current_y', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='new', ctx=Load()), attr='y', ctx=Load()))], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='current_x', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Constant(value='\r')], keywords=[])), Expr(value=Call(func=Name(id='_output_cursor_forward', ctx=Load()), args=[Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load()), ops=[Lt()], comparators=[Name(id='current_x', ctx=Load())]), Compare(left=Name(id='current_x', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1))])]), body=[Expr(value=Call(func=Name(id='_output_cursor_backward', ctx=Load()), args=[BinOp(left=Name(id='current_x', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load()))], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load()), ops=[Gt()], comparators=[Name(id='current_x', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_output_cursor_forward', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='new', ctx=Load()), attr='x', ctx=Load()), op=Sub(), right=Name(id='current_x', ctx=Load()))], keywords=[]))], orelse=[])])]), Return(value=Name(id='new', ctx=Load()))], decorator_list=[], returns=Name(id='Point', ctx=Load())), FunctionDef(name='output_char', args=arguments(posonlyargs=[], args=[arg(arg='char', annotation=Name(id='Char', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write the output of this character.\n        ')), Nonlocal(names=['last_style']), If(test=Compare(left=Name(id='last_style', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='char', ctx=Load()), attr='style', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Attribute(value=Name(id='char', ctx=Load()), attr='char', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='new_attrs', ctx=Store())], value=Subscript(value=Name(id='attrs_for_style_string', ctx=Load()), slice=Attribute(value=Name(id='char', ctx=Load()), attr='style', ctx=Load()), ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='last_style', ctx=Load())), Compare(left=Name(id='new_attrs', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='attrs_for_style_string', ctx=Load()), slice=Name(id='last_style', ctx=Load()), ctx=Load())])]), body=[Expr(value=Call(func=Name(id='_output_set_attributes', ctx=Load()), args=[Name(id='new_attrs', ctx=Load()), Name(id='color_depth', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Attribute(value=Name(id='char', ctx=Load()), attr='char', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_style', ctx=Store())], value=Attribute(value=Name(id='char', ctx=Load()), attr='style', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_max_column_index', args=arguments(posonlyargs=[], args=[arg(arg='row', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Char', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return max used column index, ignoring whitespace (without style) at\n        the end of the line. This is important for people that copy/paste\n        terminal output.\n\n        There are two reasons we are sometimes seeing whitespace at the end:\n        - `BufferControl` adds a trailing space to each line, because it's a\n          possible cursor position, so that the line wrapping won't change if\n          the cursor position moves around.\n        - The `Window` adds a style class to the current line for highlighting\n          (cursor-line).\n        ")), Assign(targets=[Name(id='numbers', ctx=Store())], value=GeneratorExp(elt=Name(id='index', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='cell', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='cell', ctx=Load()), attr='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=' ')]), Subscript(value=Name(id='style_string_has_style', ctx=Load()), slice=Attribute(value=Name(id='cell', ctx=Load()), attr='style', ctx=Load()), ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='numbers', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=0))]))], decorator_list=[], returns=Name(id='int', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='previous_screen', ctx=Load())), body=[Expr(value=Call(func=Name(id='reset_attributes', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='previous_screen', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='full_screen', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='disable_autowrap', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='is_done', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='previous_screen', ctx=Load())), Compare(left=Name(id='previous_width', ctx=Load()), ops=[NotEq()], comparators=[Name(id='width', ctx=Load())])]), body=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))])], keywords=[])), Expr(value=Call(func=Name(id='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_down', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='previous_screen', ctx=Store())], value=Call(func=Name(id='Screen', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='current_height', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='screen', ctx=Load()), attr='height', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])), Assign(targets=[Name(id='row_count', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='screen', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='previous_screen', ctx=Load()), attr='height', ctx=Load())], keywords=[]), Name(id='height', ctx=Load())], keywords=[])), For(target=Name(id='y', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='row_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_row', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='previous_row', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='previous_screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='zero_width_escapes_row', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='screen', ctx=Load()), attr='zero_width_escapes', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_max_line_len', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1)), Call(func=Name(id='get_max_column_index', ctx=Load()), args=[Name(id='new_row', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='previous_max_line_len', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1)), Call(func=Name(id='get_max_column_index', ctx=Load()), args=[Name(id='previous_row', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='c', ctx=Load()), ops=[LtE()], comparators=[Name(id='new_max_line_len', ctx=Load())]), body=[Assign(targets=[Name(id='new_char', ctx=Store())], value=Subscript(value=Name(id='new_row', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='old_char', ctx=Store())], value=Subscript(value=Name(id='previous_row', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='char_width', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='new_char', ctx=Load()), attr='width', ctx=Load()), Constant(value=1)])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='new_char', ctx=Load()), attr='char', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='old_char', ctx=Load()), attr='char', ctx=Load())]), Compare(left=Attribute(value=Name(id='new_char', ctx=Load()), attr='style', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='old_char', ctx=Load()), attr='style', ctx=Load())])]), body=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='c', ctx=Load())), keyword(arg='y', value=Name(id='y', ctx=Load()))])], keywords=[])), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Name(id='zero_width_escapes_row', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write_raw', ctx=Load()), args=[Subscript(value=Name(id='zero_width_escapes_row', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='output_char', ctx=Load()), args=[Name(id='new_char', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=BinOp(left=Attribute(value=Name(id='current_pos', ctx=Load()), attr='x', ctx=Load()), op=Add(), right=Name(id='char_width', ctx=Load()))), keyword(arg='y', value=Attribute(value=Name(id='current_pos', ctx=Load()), attr='y', ctx=Load()))]))], orelse=[]), AugAssign(target=Name(id='c', ctx=Store()), op=Add(), value=Name(id='char_width', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='previous_screen', ctx=Load()), Compare(left=Name(id='new_max_line_len', ctx=Load()), ops=[Lt()], comparators=[Name(id='previous_max_line_len', ctx=Load())])]), body=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=BinOp(left=Name(id='new_max_line_len', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='y', value=Name(id='y', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Name(id='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_end_of_line', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='current_height', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='previous_screen', ctx=Load()), attr='height', ctx=Load())]), body=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=BinOp(left=Name(id='current_height', ctx=Load()), op=Sub(), right=Constant(value=1)))])], keywords=[]))], orelse=[]), If(test=Name(id='is_done', ctx=Load()), body=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Name(id='current_height', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_down', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='current_pos', ctx=Store())], value=Call(func=Name(id='move_cursor', ctx=Load()), args=[Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='get_cursor_position', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_window', ctx=Load())], keywords=[])], keywords=[]))]), If(test=BoolOp(op=Or(), values=[Name(id='is_done', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='full_screen', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='enable_autowrap', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='reset_attributes', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='screen', ctx=Load()), attr='show_cursor', ctx=Load()), Name(id='is_done', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='show_cursor', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='current_pos', ctx=Load()), Name(id='last_style', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Point', ctx=Load()), BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), ClassDef(name='HeightIsUnknownError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Information unavailable. Did not yet receive the CPR response.'))], decorator_list=[]), ClassDef(name='_StyleStringToAttrsCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Attrs', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A cache structure that maps style strings to :class:`.Attr`.\n    (This is an important speed up.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_attrs_for_style_str', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='Attrs', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='style_transformation', annotation=Name(id='StyleTransformation', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_attrs_for_style_str', ctx=Store())], value=Name(id='get_attrs_for_style_str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_attrs_for_style_str', ctx=Load()), args=[Name(id='style_str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Load()), attr='transform_attrs', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='style_str', ctx=Load()), ctx=Store())], value=Name(id='attrs', ctx=Load())), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load()))], decorator_list=[]), ClassDef(name='_StyleStringHasStyleCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Cache for remember which style strings don't render the default output\n    style (default fg/bg, no underline and no reverse and no blink). That way\n    we know that we should render these cells, even when they're empty (when\n    they contain a space).\n\n    Note: we don't consider bold/italic/hidden because they don't change the\n    output if there's no text in the cell.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_string_to_attrs', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Attrs', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_string_to_attrs', ctx=Store())], value=Name(id='style_string_to_attrs', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='style_string_to_attrs', ctx=Load()), slice=Name(id='style_str', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_default', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load()), Attribute(value=Name(id='attrs', ctx=Load()), attr='bgcolor', ctx=Load()), Attribute(value=Name(id='attrs', ctx=Load()), attr='underline', ctx=Load()), Attribute(value=Name(id='attrs', ctx=Load()), attr='strike', ctx=Load()), Attribute(value=Name(id='attrs', ctx=Load()), attr='blink', ctx=Load()), Attribute(value=Name(id='attrs', ctx=Load()), attr='reverse', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='style_str', ctx=Load()), ctx=Store())], value=Name(id='is_default', ctx=Load())), Return(value=Name(id='is_default', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='CPR_Support', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Enum: whether or not CPR is supported.')), Assign(targets=[Name(id='SUPPORTED', ctx=Store())], value=Constant(value='SUPPORTED')), Assign(targets=[Name(id='NOT_SUPPORTED', ctx=Store())], value=Constant(value='NOT_SUPPORTED')), Assign(targets=[Name(id='UNKNOWN', ctx=Store())], value=Constant(value='UNKNOWN'))], decorator_list=[]), ClassDef(name='Renderer', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Typical usage:\n\n    ::\n\n        output = Vt100_Output.from_pty(sys.stdout)\n        r = Renderer(style, output)\n        r.render(app, layout=...)\n    ')), Assign(targets=[Name(id='CPR_TIMEOUT', ctx=Store())], value=Constant(value=2)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Name(id='BaseStyle', ctx=Load())), arg(arg='output', annotation=Name(id='Output', ctx=Load())), arg(arg='full_screen', annotation=Name(id='bool', ctx=Load())), arg(arg='mouse_support', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='cpr_not_supported_callback', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Store())], value=Name(id='output', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Store())], value=Name(id='full_screen', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='mouse_support', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cpr_not_supported_callback', ctx=Store())], value=Name(id='cpr_not_supported_callback', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bracketed_paste_enabled', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_key_mode_reset', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Store()), annotation=Subscript(value=Name(id='deque', ctx=Load()), slice=Subscript(value=Name(id='Future', ctx=Load()), slice=Constant(value=None), ctx=Load()), ctx=Load()), value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Store())], value=Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='UNKNOWN', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='output', ctx=Load()), attr='responds_to_cpr', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Store())], value=Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='NOT_SUPPORTED', ctx=Load()))], orelse=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Store()), annotation=BinOp(left=Name(id='_StyleStringToAttrsCache', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_style_string_has_style', ctx=Store()), annotation=BinOp(left=Name(id='_StyleStringHasStyleCache', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_style_hash', ctx=Store()), annotation=BinOp(left=Name(id='Hashable', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_transformation_hash', ctx=Store()), annotation=BinOp(left=Name(id='Hashable', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_color_depth', ctx=Store()), annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[keyword(arg='_scroll', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_scroll', annotation=Name(id='bool', ctx=Load())), arg(arg='leave_alternate_screen', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Store())], value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Store()), annotation=BinOp(left=Name(id='Screen', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_size', ctx=Store()), annotation=BinOp(left=Name(id='Size', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_style', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_cursor_shape', ctx=Store()), annotation=BinOp(left=Name(id='CursorShape', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_handlers', ctx=Store())], value=Call(func=Name(id='MouseHandlers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Store())], value=Constant(value=0)), If(test=Name(id='_scroll', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='scroll_buffer_to_prompt', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Load()), Name(id='leave_alternate_screen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='quit_alternate_screen', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='disable_mouse_support', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_bracketed_paste_enabled', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='disable_bracketed_paste', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bracketed_paste_enabled', ctx=Store())], value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='reset_cursor_shape', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='last_rendered_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The `Screen` class that was generated during the last rendering.\n        This can be `None`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='Screen', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='height_is_known', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        True when the height from the cursor until the bottom of the terminal\n        is known. (It's often nicer to draw bottom toolbars only if the height\n        is known, in order to avoid flickering when the CPR response arrives.)\n        ")), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=True))], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_rows_below_cursor_position', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='rows_above_layout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the number of rows visible in the terminal above the layout.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Load()), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='total_rows', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_size', ctx=Load()), args=[], keywords=[]), attr='rows', ctx=Load())), Assign(targets=[Name(id='last_screen_height', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()), attr='height', ctx=Load()), orelse=Constant(value=0))), Return(value=BinOp(left=Name(id='total_rows', ctx=Load()), op=Sub(), right=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Load()), Name(id='last_screen_height', ctx=Load())], keywords=[])))], orelse=[Raise(exc=Call(func=Name(id='HeightIsUnknownError', ctx=Load()), args=[Constant(value='Rows above layout is unknown.')], keywords=[]))])])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='request_absolute_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get current cursor position.\n\n        We do this to calculate the minimum available height that we can\n        consume for rendering the prompt. This is the available space below te\n        cursor.\n\n        For vt100: Do CPR request. (answer will arrive later.)\n        For win32: Do API call. (Answer comes immediately.)\n        ')), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Load()), attr='y', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_size', ctx=Load()), args=[], keywords=[]), attr='rows', ctx=Load())), Return()], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_rows_below_cursor_position', ctx=Load()), args=[], keywords=[])), Return()], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='NOT_SUPPORTED', ctx=Load())]), body=[Return()], orelse=[]), FunctionDef(name='do_cpr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Future', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='ask_for_cpr', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='SUPPORTED', ctx=Load())]), body=[Expr(value=Call(func=Name(id='do_cpr', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='waiting_for_cpr', ctx=Load()), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='do_cpr', ctx=Load()), args=[], keywords=[])), AsyncFunctionDef(name='timer', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='CPR_TIMEOUT', ctx=Load())], keywords=[]))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='UNKNOWN', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Store())], value=Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='NOT_SUPPORTED', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_not_supported_callback', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_not_supported_callback', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='timer', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='report_absolute_cursor_row', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        To be called when we know the absolute cursor position.\n        (As an answer of a "Cursor Position Request" response.)\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Store())], value=Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='SUPPORTED', ctx=Load())), Assign(targets=[Name(id='total_rows', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_size', ctx=Load()), args=[], keywords=[]), attr='rows', ctx=Load())), Assign(targets=[Name(id='rows_below_cursor', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='total_rows', ctx=Load()), op=Sub(), right=Name(id='row', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Store())], value=Name(id='rows_below_cursor', ctx=Load())), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Load()), attr='popleft', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='set_result', ctx=Load()), args=[Constant(value=None)], keywords=[]))], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='waiting_for_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Waiting for CPR flag. True when we send the request, but didn't got a\n        response.\n        ")), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), AsyncFunctionDef(name='wait_for_cpr_responses', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Wait for a CPR response.\n        ')), Assign(targets=[Name(id='cpr_futures', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='cpr_futures', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_support', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CPR_Support', ctx=Load()), attr='NOT_SUPPORTED', ctx=Load())])]), body=[Return(value=Constant(value=None))], orelse=[]), AsyncFunctionDef(name='wait_for_responses', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='response_f', ctx=Store()), iter=Name(id='cpr_futures', ctx=Load()), body=[Expr(value=Await(value=Name(id='response_f', ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='wait_for_timeout', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))), For(target=Name(id='response_f', ctx=Store()), iter=Name(id='cpr_futures', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='response_f', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_waiting_for_cpr_futures', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='tasks', ctx=Store())], value=Set(elts=[Call(func=Name(id='ensure_future', ctx=Load()), args=[Call(func=Name(id='wait_for_responses', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='ensure_future', ctx=Load()), args=[Call(func=Name(id='wait_for_timeout', ctx=Load()), args=[], keywords=[])], keywords=[])])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='pending', ctx=Store())], ctx=Store())], value=Await(value=Call(func=Name(id='wait', ctx=Load()), args=[Name(id='tasks', ctx=Load())], keywords=[keyword(arg='return_when', value=Name(id='FIRST_COMPLETED', ctx=Load()))]))), For(target=Name(id='task', ctx=Store()), iter=Name(id='pending', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app', annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='layout', annotation=Name(id='Layout', ctx=Load())), arg(arg='is_done', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Render the current interface to the output.\n\n        :param is_done: When True, put the cursor at the end of the interface. We\n                won't print any changes to this part.\n        ")), Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='enter_alternate_screen', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_bracketed_paste_enabled', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='enable_bracketed_paste', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bracketed_paste_enabled', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_key_mode_reset', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='reset_cursor_key_mode', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_key_mode_reset', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='needs_mouse_support', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='needs_mouse_support', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='enable_mouse_support', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Store())], value=Constant(value=True))], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='needs_mouse_support', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='disable_mouse_support', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_support_enabled', ctx=Store())], value=Constant(value=False))], orelse=[])]), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='get_size', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='screen', ctx=Store())], value=Call(func=Name(id='Screen', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='screen', ctx=Load()), attr='show_cursor', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='mouse_handlers', ctx=Store())], value=Call(func=Name(id='MouseHandlers', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load()), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Attribute(value=Name(id='size', ctx=Load()), attr='rows', ctx=Load()))], orelse=[If(test=Name(id='is_done', ctx=Load()), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='container', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Attribute(value=Name(id='size', ctx=Load()), attr='columns', ctx=Load()), Attribute(value=Name(id='size', ctx=Load()), attr='rows', ctx=Load())], keywords=[]), attr='preferred', ctx=Load()))], orelse=[Assign(targets=[Name(id='last_height', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()), attr='height', ctx=Load()), orelse=Constant(value=0))), Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_available_height', ctx=Load()), Name(id='last_height', ctx=Load()), Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='container', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Attribute(value=Name(id='size', ctx=Load()), attr='columns', ctx=Load()), Attribute(value=Name(id='size', ctx=Load()), attr='rows', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='height', ctx=Load()), Attribute(value=Name(id='size', ctx=Load()), attr='rows', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_size', ctx=Load()), ops=[NotEq()], comparators=[Name(id='size', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_style_hash', ctx=Load())]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='style_transformation', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_transformation_hash', ctx=Load())]), Compare(left=Attribute(value=Name(id='app', ctx=Load()), attr='color_depth', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_color_depth', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_style_string_has_style', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Store())], value=Call(func=Name(id='_StyleStringToAttrsCache', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='get_attrs_for_style_str', ctx=Load()), Attribute(value=Name(id='app', ctx=Load()), attr='style_transformation', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_style_string_has_style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_style_string_has_style', ctx=Store())], value=Call(func=Name(id='_StyleStringHasStyleCache', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_style_hash', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_transformation_hash', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='style_transformation', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_color_depth', ctx=Store())], value=Attribute(value=Name(id='app', ctx=Load()), attr='color_depth', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='container', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Call(func=Name(id='WritePosition', ctx=Load()), args=[], keywords=[keyword(arg='xpos', value=Constant(value=0)), keyword(arg='ypos', value=Constant(value=0)), keyword(arg='width', value=Attribute(value=Name(id='size', ctx=Load()), attr='columns', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))])], keywords=[keyword(arg='parent_style', value=Constant(value='')), keyword(arg='erase_bg', value=Constant(value=False)), keyword(arg='z_index', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='draw_all_floats', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='app', ctx=Load()), attr='exit_style', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='append_style_to_content', ctx=Load()), args=[Attribute(value=Name(id='app', ctx=Load()), attr='exit_style', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_last_style', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_output_screen_diff', ctx=Load()), args=[Name(id='app', ctx=Load()), Name(id='output', ctx=Load()), Name(id='screen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Load()), Attribute(value=Name(id='app', ctx=Load()), attr='color_depth', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_last_style', ctx=Load()), Name(id='is_done', ctx=Load())], keywords=[keyword(arg='full_screen', value=Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load())), keyword(arg='attrs_for_style_string', value=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs_for_style', ctx=Load())), keyword(arg='style_string_has_style', value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_string_has_style', ctx=Load())), keyword(arg='size', value=Name(id='size', ctx=Load())), keyword(arg='previous_width', value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_last_size', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_size', ctx=Load()), attr='columns', ctx=Load()), orelse=Constant(value=0)))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_screen', ctx=Store())], value=Name(id='screen', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_size', ctx=Store())], value=Name(id='size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_handlers', ctx=Store())], value=Name(id='mouse_handlers', ctx=Load())), Assign(targets=[Name(id='new_cursor_shape', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='cursor', ctx=Load()), attr='get_cursor_shape', ctx=Load()), args=[Name(id='app', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_cursor_shape', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_cursor_shape', ctx=Load()), ops=[NotEq()], comparators=[Name(id='new_cursor_shape', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='set_cursor_shape', ctx=Load()), args=[Name(id='new_cursor_shape', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_cursor_shape', ctx=Store())], value=Name(id='new_cursor_shape', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='layout', ctx=Load()), attr='visible_windows', ctx=Store())], value=Attribute(value=Name(id='screen', ctx=Load()), attr='visible_windows', ctx=Load())), If(test=Name(id='is_done', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='leave_alternate_screen', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Hide all output and put the cursor back at the first line. This is for\n        instance used for running a system command (while hiding the CLI) and\n        later resuming the same CLI.)\n\n        :param leave_alternate_screen: When True, and when inside an alternate\n            screen buffer, quit the alternate screen.\n        ')), Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_backward', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Load()), attr='x', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_up', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_pos', ctx=Load()), attr='y', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_down', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='enable_autowrap', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[keyword(arg='leave_alternate_screen', value=Name(id='leave_alternate_screen', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Clear screen and go to 0,0\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_screen', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_goto', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request_absolute_cursor_position', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='print_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='output', annotation=Name(id='Output', ctx=Load())), arg(arg='formatted_text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='BaseStyle', ctx=Load())), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Print a list of (style_str, text) tuples in the given style to the output.\n    ')), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='formatted_text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style_transformation', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='style_transformation', ctx=Load()), Call(func=Name(id='DummyStyleTransformation', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='color_depth', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='color_depth', ctx=Load()), Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='get_default_color_depth', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='enable_autowrap', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='last_attrs', ctx=Store()), annotation=BinOp(left=Name(id='Attrs', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), Assign(targets=[Name(id='attrs_for_style_string', ctx=Store())], value=Call(func=Name(id='_StyleStringToAttrsCache', ctx=Load()), args=[Attribute(value=Name(id='style', ctx=Load()), attr='get_attrs_for_style_str', ctx=Load()), Name(id='style_transformation', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='style_str', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='fragments', ctx=Load()), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Subscript(value=Name(id='attrs_for_style_string', ctx=Load()), slice=Name(id='style_str', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[NotEq()], comparators=[Name(id='last_attrs', ctx=Load())]), body=[If(test=Name(id='attrs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='set_attributes', ctx=Load()), args=[Name(id='attrs', ctx=Load()), Name(id='color_depth', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='reset_attributes', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='last_attrs', ctx=Store())], value=Name(id='attrs', ctx=Load())), If(test=Compare(left=Constant(value='[ZeroWidthEscape]'), ops=[In()], comparators=[Name(id='style_str', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='write_raw', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\r\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='reset_attributes', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])