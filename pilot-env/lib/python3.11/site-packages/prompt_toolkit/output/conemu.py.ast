Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='TextIO')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='base', names=[alias(name='Output')], level=1), ImportFrom(module='color_depth', names=[alias(name='ColorDepth')], level=1), ImportFrom(module='vt100', names=[alias(name='Vt100_Output')], level=1), ImportFrom(module='win32', names=[alias(name='Win32Output')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='ConEmuOutput')], ctx=Load())), ClassDef(name='ConEmuOutput', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    ConEmu (Windows) output abstraction.\n\n    ConEmu is a Windows console application, but it also supports ANSI escape\n    sequences. This output class is actually a proxy to both `Win32Output` and\n    `Vt100_Output`. It uses `Win32Output` for console sizing and scrolling, but\n    all cursor movements and scrolling happens through the `Vt100_Output`.\n\n    This way, we can have 256 colors in ConEmu and Cmder. Rendering will be\n    even a little faster as well.\n\n    http://conemu.github.io/\n    http://gooseberrycreative.com/cmder/\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdout', annotation=Name(id='TextIO', ctx=Load())), arg(arg='default_color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='win32_output', ctx=Store())], value=Call(func=Name(id='Win32Output', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[keyword(arg='default_color_depth', value=Name(id='default_color_depth', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vt100_output', ctx=Store())], value=Call(func=Name(id='Vt100_Output', ctx=Load()), args=[Name(id='stdout', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Size', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], keywords=[keyword(arg='default_color_depth', value=Name(id='default_color_depth', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='responds_to_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='get_size'), Constant(value='get_rows_below_cursor_position'), Constant(value='enable_mouse_support'), Constant(value='disable_mouse_support'), Constant(value='scroll_buffer_to_prompt'), Constant(value='get_win32_screen_buffer_info'), Constant(value='enable_bracketed_paste'), Constant(value='disable_bracketed_paste')], ctx=Load())]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='win32_output', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vt100_output', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Any', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='Output', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='ConEmuOutput', ctx=Load())], keywords=[]))], type_ignores=[])