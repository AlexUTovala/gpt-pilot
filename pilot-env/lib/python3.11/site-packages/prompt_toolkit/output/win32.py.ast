Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])), Import(names=[alias(name='os')]), ImportFrom(module='ctypes', names=[alias(name='ArgumentError'), alias(name='byref'), alias(name='c_char'), alias(name='c_long'), alias(name='c_uint'), alias(name='c_ulong'), alias(name='pointer')], level=0), ImportFrom(module='ctypes.wintypes', names=[alias(name='DWORD'), alias(name='HANDLE')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='TextIO'), alias(name='TypeVar')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='CursorShape')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='ANSI_COLOR_NAMES'), alias(name='Attrs')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), ImportFrom(module='prompt_toolkit.win32_types', names=[alias(name='CONSOLE_SCREEN_BUFFER_INFO'), alias(name='COORD'), alias(name='SMALL_RECT'), alias(name='STD_INPUT_HANDLE'), alias(name='STD_OUTPUT_HANDLE')], level=0), ImportFrom(module='utils', names=[alias(name='SPHINX_AUTODOC_RUNNING')], level=2), ImportFrom(module='base', names=[alias(name='Output')], level=1), ImportFrom(module='color_depth', names=[alias(name='ColorDepth')], level=1), If(test=UnaryOp(op=Not(), operand=Name(id='SPHINX_AUTODOC_RUNNING', ctx=Load())), body=[ImportFrom(module='ctypes', names=[alias(name='windll')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Win32Output')], ctx=Load())), FunctionDef(name='_coord_byval', args=arguments(posonlyargs=[], args=[arg(arg='coord', annotation=Name(id='COORD', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Turns a COORD object into a c_long.\n    This will cause it to be passed by value instead of by reference. (That is what I think at least.)\n\n    When running ``ptipython`` is run (only with IPython), we often got the following error::\n\n         Error in \'SetConsoleCursorPosition\'.\n         ArgumentError("argument 2: <class \'TypeError\'>: wrong type",)\n     argument 2: <class \'TypeError\'>: wrong type\n\n    It was solved by turning ``COORD`` parameters into a ``c_long`` like this.\n\n    More info: http://msdn.microsoft.com/en-us/library/windows/desktop/ms686025(v=vs.85).aspx\n    ')), Return(value=Call(func=Name(id='c_long', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='coord', ctx=Load()), attr='Y', ctx=Load()), op=Mult(), right=Constant(value=65536)), op=BitOr(), right=BinOp(left=Attribute(value=Name(id='coord', ctx=Load()), attr='X', ctx=Load()), op=BitAnd(), right=Constant(value=65535)))], keywords=[]))], decorator_list=[], returns=Name(id='c_long', ctx=Load())), Assign(targets=[Name(id='_DEBUG_RENDER_OUTPUT', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='_DEBUG_RENDER_OUTPUT_FILENAME', ctx=Store())], value=Constant(value='prompt-toolkit-windows-output.log')), ClassDef(name='NoConsoleScreenBufferError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Raised when the application is not running inside a Windows Console, but\n    the user tries to instantiate Win32Output.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xterm', ctx=Store())], value=Compare(left=Constant(value='xterm'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[])])), If(test=Name(id='xterm', ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Found %s, while expecting a Windows console. Maybe try to run this program using "winpty" or run it in cmd.exe instead. Or otherwise, in case of Cygwin, use the Python executable that is compiled for Cygwin.'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='TERM'), ctx=Load())))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='No Windows console found. Are you running cmd.exe?'))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), ClassDef(name='Win32Output', bases=[Name(id='Output', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    I/O abstraction for rendering to Windows consoles.\n    (cmd.exe and similar.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdout', annotation=Name(id='TextIO', ctx=Load())), arg(arg='use_complete_width', annotation=Name(id='bool', ctx=Load())), arg(arg='default_color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_complete_width', ctx=Store())], value=Name(id='use_complete_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Store())], value=Name(id='default_color_depth', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Store()), annotation=Name(id='TextIO', ctx=Load()), value=Name(id='stdout', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), args=[Name(id='STD_OUTPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_hidden', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_lookup_table', ctx=Store())], value=Call(func=Name(id='ColorLookupTable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_attrs', ctx=Store())], value=IfExp(test=Name(id='info', ctx=Load()), body=Attribute(value=Name(id='info', ctx=Load()), attr='wAttributes', ctx=Load()), orelse=Constant(value=15))), If(test=Name(id='_DEBUG_RENDER_OUTPUT', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='_DEBUG_RENDER_OUTPUT_FILENAME', ctx=Load()), Constant(value='ab')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return file descriptor.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return encoding used for stdout.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='encoding', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_hidden', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_raw', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For win32, there is no difference between write and write_raw.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_complete_width', ctx=Load()), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='dwSize', ctx=Load()), attr='X', ctx=Load()))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load()), attr='Right', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load()), attr='Left', ctx=Load())))]), Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load()), attr='Bottom', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load()), attr='Top', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='maxwidth', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='dwSize', ctx=Load()), attr='X', ctx=Load()), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='maxwidth', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Size', ctx=Load()), args=[], keywords=[keyword(arg='rows', value=Name(id='height', ctx=Load())), keyword(arg='columns', value=Name(id='width', ctx=Load()))]))], decorator_list=[], returns=Name(id='Size', ctx=Load())), FunctionDef(name='_winapi', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='object', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n        Flush and call win API function.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), If(test=Name(id='_DEBUG_RENDER_OUTPUT', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=BinOp(left=Constant(value='%r'), op=Mod(), right=Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), op=Add(), right=Constant(value=b'\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=b'     '), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%r'), op=Mod(), right=Name(id='i', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), op=Add(), right=Constant(value=b'\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=b'     '), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%r'), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), op=Add(), right=Constant(value=b'\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='a', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ArgumentError', ctx=Load()), name='e', body=[If(test=Name(id='_DEBUG_RENDER_OUTPUT', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=JoinedStr(values=[Constant(value='    Error in '), FormattedValue(value=Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load()), conversion=114), Constant(value=' '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=114), Constant(value=' '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1), Constant(value='\n')]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='_T', ctx=Load())), FunctionDef(name='get_win32_screen_buffer_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return Screen buffer info.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sbinfo', ctx=Store())], value=Call(func=Name(id='CONSOLE_SCREEN_BUFFER_INFO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleScreenBufferInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='sbinfo', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='success', ctx=Load()), body=[Return(value=Name(id='sbinfo', ctx=Load()))], orelse=[Raise(exc=Name(id='NoConsoleScreenBufferError', ctx=Load()))])], decorator_list=[], returns=Name(id='CONSOLE_SCREEN_BUFFER_INFO', ctx=Load())), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set terminal title.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTitleW', ctx=Load()), Name(id='title', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTitleW', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='COORD', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='sbinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='length', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwSize', ctx=Load()), attr='X', ctx=Load()), op=Mult(), right=Attribute(value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwSize', ctx=Load()), attr='Y', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_goto', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Constant(value=0)), keyword(arg='column', value=Constant(value=0))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_erase', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='length', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sbinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='size', ctx=Store())], value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwSize', ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwCursorPosition', ctx=Load())), Assign(targets=[Name(id='length', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='size', ctx=Load()), attr='X', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='size', ctx=Load()), attr='X', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='size', ctx=Load()), attr='X', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='size', ctx=Load()), attr='Y', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwCursorPosition', ctx=Load()), attr='Y', ctx=Load()))))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_erase', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='length', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='')), Assign(targets=[Name(id='sbinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='start', ctx=Store())], value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwCursorPosition', ctx=Load())), Assign(targets=[Name(id='length', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwSize', ctx=Load()), attr='X', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='sbinfo', ctx=Load()), attr='dwCursorPosition', ctx=Load()), attr='X', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_erase', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='length', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_erase', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start', annotation=Name(id='COORD', ctx=Load())), arg(arg='length', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='chars_written', ctx=Store())], value=Call(func=Name(id='c_ulong', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='FillConsoleOutputCharacterA', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Call(func=Name(id='c_char', ctx=Load()), args=[Constant(value=b' ')], keywords=[]), Call(func=Name(id='DWORD', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[]), Call(func=Name(id='_coord_byval', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='chars_written', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='sbinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='FillConsoleOutputAttribute', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Attribute(value=Name(id='sbinfo', ctx=Load()), attr='wAttributes', ctx=Load()), Name(id='length', ctx=Load()), Call(func=Name(id='_coord_byval', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='chars_written', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset the console foreground/background color.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTextAttribute', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='default_attrs', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_hidden', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load())), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='fgcolor', ctx=Store()), Name(id='bgcolor', ctx=Store()), Name(id='bold', ctx=Store()), Name(id='underline', ctx=Store()), Name(id='strike', ctx=Store()), Name(id='italic', ctx=Store()), Name(id='blink', ctx=Store()), Name(id='reverse', ctx=Store()), Name(id='hidden', ctx=Store())], ctx=Store())], value=Name(id='attrs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_hidden', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='hidden', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='win_attrs', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='default_attrs', ctx=Load()), simple=1), If(test=Compare(left=Name(id='color_depth', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load())]), body=[If(test=Name(id='fgcolor', ctx=Load()), body=[Assign(targets=[Name(id='win_attrs', ctx=Store())], value=BinOp(left=Name(id='win_attrs', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Constant(value=15)))), AugAssign(target=Name(id='win_attrs', ctx=Store()), op=BitOr(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='color_lookup_table', ctx=Load()), attr='lookup_fg_color', ctx=Load()), args=[Name(id='fgcolor', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='bgcolor', ctx=Load()), body=[Assign(targets=[Name(id='win_attrs', ctx=Store())], value=BinOp(left=Name(id='win_attrs', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Constant(value=240)))), AugAssign(target=Name(id='win_attrs', ctx=Store()), op=BitOr(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='color_lookup_table', ctx=Load()), attr='lookup_bg_color', ctx=Load()), args=[Name(id='bgcolor', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='reverse', ctx=Load()), body=[Assign(targets=[Name(id='win_attrs', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='win_attrs', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Constant(value=255))), op=BitOr(), right=BinOp(left=BinOp(left=Name(id='win_attrs', ctx=Load()), op=BitAnd(), right=Constant(value=15)), op=LShift(), right=Constant(value=4))), op=BitOr(), right=BinOp(left=BinOp(left=Name(id='win_attrs', ctx=Load()), op=BitAnd(), right=Constant(value=240)), op=RShift(), right=Constant(value=4))))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTextAttribute', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Name(id='win_attrs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_goto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='COORD', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Name(id='column', ctx=Load())), keyword(arg='Y', value=Name(id='row', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleCursorPosition', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Call(func=Name(id='_coord_byval', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sr', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[]), attr='dwCursorPosition', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='COORD', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Attribute(value=Name(id='sr', ctx=Load()), attr='X', ctx=Load())), keyword(arg='Y', value=BinOp(left=Attribute(value=Name(id='sr', ctx=Load()), attr='Y', ctx=Load()), op=Sub(), right=Name(id='amount', ctx=Load())))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleCursorPosition', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Call(func=Name(id='_coord_byval', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_up', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='amount', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sr', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[]), attr='dwCursorPosition', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='COORD', ctx=Load()), args=[], keywords=[keyword(arg='X', value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='sr', ctx=Load()), attr='X', ctx=Load()), op=Add(), right=Name(id='amount', ctx=Load()))], keywords=[])), keyword(arg='Y', value=Attribute(value=Name(id='sr', ctx=Load()), attr='Y', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleCursorPosition', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Call(func=Name(id='_coord_byval', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_forward', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='amount', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write to output stream and flush.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), If(test=Name(id='_DEBUG_RENDER_OUTPUT', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=BinOp(left=Constant(value='%r'), op=Mod(), right=Name(id='data', ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), op=Add(), right=Constant(value=b'\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOG', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='b', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Assign(targets=[Name(id='written', ctx=Store())], value=Call(func=Name(id='DWORD', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='retval', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='WriteConsoleW', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Name(id='b', ctx=Load()), Constant(value=1), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='written', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[])), Assert(test=Compare(left=Name(id='retval', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_rows_below_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load()), attr='Bottom', ctx=Load()), op=Sub(), right=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='dwCursorPosition', ctx=Load()), attr='Y', ctx=Load())), op=Add(), right=Constant(value=1)))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='scroll_buffer_to_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        To be called before drawing the prompt. This should scroll the console\n        to left, with the cursor at the bottom (if possible).\n        ')), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_win32_screen_buffer_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sr', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='srWindow', ctx=Load())), Assign(targets=[Name(id='cursor_pos', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='dwCursorPosition', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='SMALL_RECT', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='Left', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='Right', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='sr', ctx=Load()), attr='Right', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='sr', ctx=Load()), attr='Left', ctx=Load()))), Assign(targets=[Name(id='win_height', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='sr', ctx=Load()), attr='Bottom', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='sr', ctx=Load()), attr='Top', ctx=Load()))), If(test=Compare(left=Constant(value=0), ops=[Lt(), Lt()], comparators=[BinOp(left=Attribute(value=Name(id='sr', ctx=Load()), attr='Bottom', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='cursor_pos', ctx=Load()), attr='Y', ctx=Load())), BinOp(left=Name(id='win_height', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='Bottom', ctx=Store())], value=Attribute(value=Name(id='sr', ctx=Load()), attr='Bottom', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='Bottom', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='win_height', ctx=Load()), Attribute(value=Name(id='cursor_pos', ctx=Load()), attr='Y', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='Top', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='Bottom', ctx=Load()), op=Sub(), right=Name(id='win_height', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleWindowInfo', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load()), Constant(value=True), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enter_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Go to alternate screen buffer.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Load())), body=[Assign(targets=[Name(id='GENERIC_READ', ctx=Store())], value=Constant(value=2147483648)), Assign(targets=[Name(id='GENERIC_WRITE', ctx=Store())], value=Constant(value=1073741824)), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='CreateConsoleScreenBuffer', ctx=Load()), BinOp(left=Name(id='GENERIC_READ', ctx=Load()), op=BitOr(), right=Name(id='GENERIC_WRITE', ctx=Load())), Call(func=Name(id='DWORD', ctx=Load()), args=[Constant(value=0)], keywords=[]), Constant(value=None), Call(func=Name(id='DWORD', ctx=Load()), args=[Constant(value=1)], keywords=[]), Constant(value=None)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleActiveScreenBuffer', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Store())], value=Name(id='handle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='quit_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Make stdout again the active buffer.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Load()), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), Name(id='STD_OUTPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleActiveScreenBuffer', ctx=Load()), Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='CloseHandle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hconsole', ctx=Store())], value=Name(id='stdout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_alternate_screen', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ENABLE_MOUSE_INPUT', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='ENABLE_QUICK_EDIT_MODE', ctx=Store())], value=Constant(value=64)), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), args=[Name(id='STD_INPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='original_mode', ctx=Store())], value=Call(func=Name(id='DWORD', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleMode', ctx=Load()), Name(id='handle', ctx=Load()), Call(func=Name(id='pointer', ctx=Load()), args=[Name(id='original_mode', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleMode', ctx=Load()), Name(id='handle', ctx=Load()), BinOp(left=BinOp(left=Attribute(value=Name(id='original_mode', ctx=Load()), attr='value', ctx=Load()), op=BitOr(), right=Name(id='ENABLE_MOUSE_INPUT', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='ENABLE_QUICK_EDIT_MODE', ctx=Load())))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ENABLE_MOUSE_INPUT', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), args=[Name(id='STD_INPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='original_mode', ctx=Store())], value=Call(func=Name(id='DWORD', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleMode', ctx=Load()), Name(id='handle', ctx=Load()), Call(func=Name(id='pointer', ctx=Load()), args=[Name(id='original_mode', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_winapi', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleMode', ctx=Load()), Name(id='handle', ctx=Load()), BinOp(left=Attribute(value=Name(id='original_mode', ctx=Load()), attr='value', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='ENABLE_MOUSE_INPUT', ctx=Load())))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='hide_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor_shape', annotation=Name(id='CursorShape', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='win32_refresh_window', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Call win32 API to refresh the whole Window.\n\n        This is sometimes necessary when the application paints background\n        for completion menus. When the menu disappears, it leaves traces due\n        to a bug in the Windows Console. Sending a repaint request solves it.\n        ')), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleWindow', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='RDW_INVALIDATE', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='user32', ctx=Load()), attr='RedrawWindow', ctx=Load()), args=[Name(id='handle', ctx=Load()), Constant(value=None), Constant(value=None), Call(func=Name(id='c_uint', ctx=Load()), args=[Name(id='RDW_INVALIDATE', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='get_default_color_depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the default color depth for a windows terminal.\n\n        Contrary to the Vt100 implementation, this doesn't depend on a $TERM\n        variable.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_4_BIT', ctx=Load()))], decorator_list=[], returns=Name(id='ColorDepth', ctx=Load()))], decorator_list=[]), ClassDef(name='FOREGROUND_COLOR', bases=[], keywords=[], body=[Assign(targets=[Name(id='BLACK', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='BLUE', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='GREEN', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='CYAN', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='RED', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='MAGENTA', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='YELLOW', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='GRAY', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='INTENSITY', ctx=Store())], value=Constant(value=8))], decorator_list=[]), ClassDef(name='BACKGROUND_COLOR', bases=[], keywords=[], body=[Assign(targets=[Name(id='BLACK', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='BLUE', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='GREEN', ctx=Store())], value=Constant(value=32)), Assign(targets=[Name(id='CYAN', ctx=Store())], value=Constant(value=48)), Assign(targets=[Name(id='RED', ctx=Store())], value=Constant(value=64)), Assign(targets=[Name(id='MAGENTA', ctx=Store())], value=Constant(value=80)), Assign(targets=[Name(id='YELLOW', ctx=Store())], value=Constant(value=96)), Assign(targets=[Name(id='GRAY', ctx=Store())], value=Constant(value=112)), Assign(targets=[Name(id='INTENSITY', ctx=Store())], value=Constant(value=128))], decorator_list=[]), FunctionDef(name='_create_ansi_color_dict', args=arguments(posonlyargs=[], args=[arg(arg='color_cls', annotation=BinOp(left=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='FOREGROUND_COLOR', ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='BACKGROUND_COLOR', ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a table that maps the 16 named ansi colors to their Windows code.')), Return(value=Dict(keys=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansigray'), Constant(value='ansibrightblack'), Constant(value='ansiwhite'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan')], values=[Attribute(value=Name(id='color_cls', ctx=Load()), attr='BLACK', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='BLACK', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='GRAY', ctx=Load()), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='BLACK', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='GRAY', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), Attribute(value=Name(id='color_cls', ctx=Load()), attr='RED', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='GREEN', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='YELLOW', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='BLUE', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='MAGENTA', ctx=Load()), Attribute(value=Name(id='color_cls', ctx=Load()), attr='CYAN', ctx=Load()), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='RED', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='GREEN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='YELLOW', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='BLUE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='MAGENTA', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='color_cls', ctx=Load()), attr='CYAN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='color_cls', ctx=Load()), attr='INTENSITY', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='FG_ANSI_COLORS', ctx=Store())], value=Call(func=Name(id='_create_ansi_color_dict', ctx=Load()), args=[Name(id='FOREGROUND_COLOR', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BG_ANSI_COLORS', ctx=Store())], value=Call(func=Name(id='_create_ansi_color_dict', ctx=Load()), args=[Name(id='BACKGROUND_COLOR', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='FG_ANSI_COLORS', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='BG_ANSI_COLORS', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), ClassDef(name='ColorLookupTable', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Inspired by pygments/formatters/terminal256.py\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_win32_colors', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_color_table', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='best_match', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_build_color_table', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Build an RGB-to-256 color conversion table\n        ')), Assign(targets=[Name(id='FG', ctx=Store())], value=Name(id='FOREGROUND_COLOR', ctx=Load())), Assign(targets=[Name(id='BG', ctx=Store())], value=Name(id='BACKGROUND_COLOR', ctx=Load())), Return(value=List(elts=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Attribute(value=Name(id='FG', ctx=Load()), attr='BLACK', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='BLACK', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=170), Attribute(value=Name(id='FG', ctx=Load()), attr='BLUE', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='BLUE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=170), Constant(value=0), Attribute(value=Name(id='FG', ctx=Load()), attr='GREEN', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='GREEN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=170), Constant(value=170), Attribute(value=Name(id='FG', ctx=Load()), attr='CYAN', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='CYAN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=170), Constant(value=0), Constant(value=0), Attribute(value=Name(id='FG', ctx=Load()), attr='RED', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='RED', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=170), Constant(value=0), Constant(value=170), Attribute(value=Name(id='FG', ctx=Load()), attr='MAGENTA', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='MAGENTA', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=170), Constant(value=170), Constant(value=0), Attribute(value=Name(id='FG', ctx=Load()), attr='YELLOW', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='YELLOW', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=136), Constant(value=136), Constant(value=136), Attribute(value=Name(id='FG', ctx=Load()), attr='GRAY', ctx=Load()), Attribute(value=Name(id='BG', ctx=Load()), attr='GRAY', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=68), Constant(value=68), Constant(value=255), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='BLUE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='BLUE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=68), Constant(value=255), Constant(value=68), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='GREEN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='GREEN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=68), Constant(value=255), Constant(value=255), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='CYAN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='CYAN', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=68), Constant(value=68), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='RED', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='RED', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=68), Constant(value=255), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='MAGENTA', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='MAGENTA', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=68), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='YELLOW', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='YELLOW', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=68), Constant(value=68), Constant(value=68), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='BLACK', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='BLACK', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=255), BinOp(left=Attribute(value=Name(id='FG', ctx=Load()), attr='GRAY', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='FG', ctx=Load()), attr='INTENSITY', ctx=Load())), BinOp(left=Attribute(value=Name(id='BG', ctx=Load()), attr='GRAY', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='BG', ctx=Load()), attr='INTENSITY', ctx=Load()))], ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_closest_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='r', annotation=Name(id='int', ctx=Load())), arg(arg='g', annotation=Name(id='int', ctx=Load())), arg(arg='b', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='distance', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=257), op=Mult(), right=Constant(value=257)), op=Mult(), right=Constant(value=3))), Assign(targets=[Name(id='fg_match', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='bg_match', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='r_', ctx=Store()), Name(id='g_', ctx=Store()), Name(id='b_', ctx=Store()), Name(id='fg_', ctx=Store()), Name(id='bg_', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_win32_colors', ctx=Load()), body=[Assign(targets=[Name(id='rd', ctx=Store())], value=BinOp(left=Name(id='r', ctx=Load()), op=Sub(), right=Name(id='r_', ctx=Load()))), Assign(targets=[Name(id='gd', ctx=Store())], value=BinOp(left=Name(id='g', ctx=Load()), op=Sub(), right=Name(id='g_', ctx=Load()))), Assign(targets=[Name(id='bd', ctx=Store())], value=BinOp(left=Name(id='b', ctx=Load()), op=Sub(), right=Name(id='b_', ctx=Load()))), Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='rd', ctx=Load()), op=Mult(), right=Name(id='rd', ctx=Load())), op=Add(), right=BinOp(left=Name(id='gd', ctx=Load()), op=Mult(), right=Name(id='gd', ctx=Load()))), op=Add(), right=BinOp(left=Name(id='bd', ctx=Load()), op=Mult(), right=Name(id='bd', ctx=Load())))), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Lt()], comparators=[Name(id='distance', ctx=Load())]), body=[Assign(targets=[Name(id='fg_match', ctx=Store())], value=Name(id='fg_', ctx=Load())), Assign(targets=[Name(id='bg_match', ctx=Store())], value=Name(id='bg_', ctx=Load())), Assign(targets=[Name(id='distance', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='fg_match', ctx=Load()), Name(id='bg_match', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_color_indexes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='best_match', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='color', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='indexes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='rgb', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[]), Constant(value=16)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='rgb', ctx=Store())], value=Constant(value=0))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rgb', ctx=Load()), op=RShift(), right=Constant(value=16)), op=BitAnd(), right=Constant(value=255))), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rgb', ctx=Load()), op=RShift(), right=Constant(value=8)), op=BitAnd(), right=Constant(value=255))), Assign(targets=[Name(id='b', ctx=Store())], value=BinOp(left=Name(id='rgb', ctx=Load()), op=BitAnd(), right=Constant(value=255))), Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_closest_color', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='best_match', ctx=Load()), slice=Name(id='color', ctx=Load()), ctx=Store())], value=Name(id='indexes', ctx=Load()))], orelse=[]), Return(value=Name(id='indexes', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='lookup_fg_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fg_color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the color for use in the\n        `windll.kernel32.SetConsoleTextAttribute` API call.\n\n        :param fg_color: Foreground as text. E.g. 'ffffff' or 'red'\n        ")), If(test=Compare(left=Name(id='fg_color', ctx=Load()), ops=[In()], comparators=[Name(id='FG_ANSI_COLORS', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='FG_ANSI_COLORS', ctx=Load()), slice=Name(id='fg_color', ctx=Load()), ctx=Load()))], orelse=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_color_indexes', ctx=Load()), args=[Name(id='fg_color', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='lookup_bg_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bg_color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the color for use in the\n        `windll.kernel32.SetConsoleTextAttribute` API call.\n\n        :param bg_color: Background as text. E.g. 'ffffff' or 'red'\n        ")), If(test=Compare(left=Name(id='bg_color', ctx=Load()), ops=[In()], comparators=[Name(id='BG_ANSI_COLORS', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='BG_ANSI_COLORS', ctx=Load()), slice=Name(id='bg_color', ctx=Load()), ctx=Load()))], orelse=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_color_indexes', ctx=Load()), args=[Name(id='bg_color', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])