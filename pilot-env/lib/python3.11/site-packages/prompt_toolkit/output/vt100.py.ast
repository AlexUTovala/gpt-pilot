Module(body=[Expr(value=Constant(value="\nOutput for vt100 terminals.\n\nA lot of thanks, regarding outputting of colors, goes to the Pygments project:\n(We don't rely on Pygments anymore, because many things are very custom, and\neverything has been highly optimized.)\nhttp://pygments.org/\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Dict'), alias(name='Hashable'), alias(name='Iterable'), alias(name='Sequence'), alias(name='TextIO'), alias(name='Tuple')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='CursorShape')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='ANSI_COLOR_NAMES'), alias(name='Attrs')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='is_dumb_terminal')], level=0), ImportFrom(module='color_depth', names=[alias(name='ColorDepth')], level=1), ImportFrom(module='flush_stdout', names=[alias(name='flush_stdout')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Vt100_Output')], ctx=Load())), Assign(targets=[Name(id='FG_ANSI_COLORS', ctx=Store())], value=Dict(keys=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansigray'), Constant(value='ansibrightblack'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan'), Constant(value='ansiwhite')], values=[Constant(value=39), Constant(value=30), Constant(value=31), Constant(value=32), Constant(value=33), Constant(value=34), Constant(value=35), Constant(value=36), Constant(value=37), Constant(value=90), Constant(value=91), Constant(value=92), Constant(value=93), Constant(value=94), Constant(value=95), Constant(value=96), Constant(value=97)])), Assign(targets=[Name(id='BG_ANSI_COLORS', ctx=Store())], value=Dict(keys=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansigray'), Constant(value='ansibrightblack'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan'), Constant(value='ansiwhite')], values=[Constant(value=49), Constant(value=40), Constant(value=41), Constant(value=42), Constant(value=43), Constant(value=44), Constant(value=45), Constant(value=46), Constant(value=47), Constant(value=100), Constant(value=101), Constant(value=102), Constant(value=103), Constant(value=104), Constant(value=105), Constant(value=106), Constant(value=107)])), Assign(targets=[Name(id='ANSI_COLORS_TO_RGB', ctx=Store())], value=Dict(keys=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansigray'), Constant(value='ansibrightblack'), Constant(value='ansiwhite'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan')], values=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=229), Constant(value=229), Constant(value=229)], ctx=Load()), Tuple(elts=[Constant(value=127), Constant(value=127), Constant(value=127)], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=255)], ctx=Load()), Tuple(elts=[Constant(value=205), Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=205), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=205), Constant(value=205), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=205)], ctx=Load()), Tuple(elts=[Constant(value=205), Constant(value=0), Constant(value=205)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=205), Constant(value=205)], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=255), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=255)], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=255)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=255), Constant(value=255)], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='FG_ANSI_COLORS', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='BG_ANSI_COLORS', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLORS_TO_RGB', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), FunctionDef(name='_get_closest_ansi_color', args=arguments(posonlyargs=[], args=[arg(arg='r', annotation=Name(id='int', ctx=Load())), arg(arg='g', annotation=Name(id='int', ctx=Load())), arg(arg='b', annotation=Name(id='int', ctx=Load())), arg(arg='exclude', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value="\n    Find closest ANSI color. Return it by name.\n\n    :param r: Red (Between 0 and 255.)\n    :param g: Green (Between 0 and 255.)\n    :param b: Blue (Between 0 and 255.)\n    :param exclude: A tuple of color names to exclude. (E.g. ``('ansired', )``.)\n    ")), Assign(targets=[Name(id='exclude', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='exclude', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saturation', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='r', ctx=Load()), op=Sub(), right=Name(id='g', ctx=Load()))], keywords=[]), op=Add(), right=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='g', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load()))], keywords=[])), op=Add(), right=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='b', ctx=Load()), op=Sub(), right=Name(id='r', ctx=Load()))], keywords=[]))), If(test=Compare(left=Name(id='saturation', ctx=Load()), ops=[Gt()], comparators=[Constant(value=30)]), body=[Expr(value=Call(func=Attribute(value=Name(id='exclude', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='ansilightgray'), Constant(value='ansidarkgray'), Constant(value='ansiwhite'), Constant(value='ansiblack')], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='distance', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=257), op=Mult(), right=Constant(value=257)), op=Mult(), right=Constant(value=3))), Assign(targets=[Name(id='match', ctx=Store())], value=Constant(value='ansidefault')), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Tuple(elts=[Name(id='r2', ctx=Store()), Name(id='g2', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ANSI_COLORS_TO_RGB', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='ansidefault')]), Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='exclude', ctx=Load())])]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='r', ctx=Load()), op=Sub(), right=Name(id='r2', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='g', ctx=Load()), op=Sub(), right=Name(id='g2', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=BinOp(left=Name(id='b', ctx=Load()), op=Sub(), right=Name(id='b2', ctx=Load())), op=Pow(), right=Constant(value=2)))), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Lt()], comparators=[Name(id='distance', ctx=Load())]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='distance', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='match', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_ColorCodeAndName', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_16ColorCache', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Cache which maps (r, g, b) tuples to 16 ansi colors.\n\n    :param bg: Cache for background colors, instead of foreground.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bg', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bg', ctx=Store())], value=Name(id='bg', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Name(id='_ColorCodeAndName', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_code', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='exclude', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value="\n        Return a (ansi_code, ansi_name) tuple. (E.g. ``(44, 'ansiblue')``.) for\n        a given (r,g,b) value.\n        ")), AnnAssign(target=Name(id='key', ctx=Store()), annotation=Name(id='Hashable', ctx=Load()), value=Tuple(elts=[Name(id='value', ctx=Load()), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='exclude', ctx=Load())], keywords=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='cache', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cache', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='exclude', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='_ColorCodeAndName', ctx=Load())), FunctionDef(name='_get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='exclude', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='_get_closest_ansi_color', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='exclude', value=Name(id='exclude', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='bg', ctx=Load()), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Subscript(value=Name(id='BG_ANSI_COLORS', ctx=Load()), slice=Name(id='match', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='code', ctx=Store())], value=Subscript(value=Name(id='FG_ANSI_COLORS', ctx=Load()), slice=Name(id='match', ctx=Load()), ctx=Load()))]), Return(value=Tuple(elts=[Name(id='code', ctx=Load()), Name(id='match', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='_ColorCodeAndName', ctx=Load()))], decorator_list=[]), ClassDef(name='_256ColorCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Cache which maps (r, g, b) tuples to 256 colors.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='colors', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=205), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=205), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=205), Constant(value=205), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=238)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=205), Constant(value=0), Constant(value=205)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=205), Constant(value=205)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=229), Constant(value=229), Constant(value=229)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=127), Constant(value=127), Constant(value=127)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=255), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=0)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=92), Constant(value=92), Constant(value=255)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=255), Constant(value=0), Constant(value=255)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=0), Constant(value=255), Constant(value=255)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=255), Constant(value=255), Constant(value=255)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='valuerange', ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=95), Constant(value=135), Constant(value=175), Constant(value=215), Constant(value=255)], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=217)], keywords=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Subscript(value=Name(id='valuerange', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=FloorDiv(), right=Constant(value=36)), op=Mod(), right=Constant(value=6)), ctx=Load())), Assign(targets=[Name(id='g', ctx=Store())], value=Subscript(value=Name(id='valuerange', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=FloorDiv(), right=Constant(value=6)), op=Mod(), right=Constant(value=6)), ctx=Load())), Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Name(id='valuerange', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=6)), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Constant(value=22)], keywords=[]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=Constant(value=8), op=Add(), right=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Constant(value=10)))), Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='v', ctx=Load()), Name(id='v', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='colors', ctx=Store())], value=Name(id='colors', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='distance', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=257), op=Mult(), right=Constant(value=257)), op=Mult(), right=Constant(value=3))), Assign(targets=[Name(id='match', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='r2', ctx=Store()), Name(id='g2', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='colors', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Constant(value=16)]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='r', ctx=Load()), op=Sub(), right=Name(id='r2', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='g', ctx=Load()), op=Sub(), right=Name(id='g2', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=BinOp(left=Name(id='b', ctx=Load()), op=Sub(), right=Name(id='b2', ctx=Load())), op=Pow(), right=Constant(value=2)))), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Lt()], comparators=[Name(id='distance', ctx=Load())]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='distance', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Store())], value=Name(id='match', ctx=Load())), Return(value=Name(id='match', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_16_fg_colors', ctx=Store())], value=Call(func=Name(id='_16ColorCache', ctx=Load()), args=[], keywords=[keyword(arg='bg', value=Constant(value=False))])), Assign(targets=[Name(id='_16_bg_colors', ctx=Store())], value=Call(func=Name(id='_16ColorCache', ctx=Load()), args=[], keywords=[keyword(arg='bg', value=Constant(value=True))])), Assign(targets=[Name(id='_256_colors', ctx=Store())], value=Call(func=Name(id='_256ColorCache', ctx=Load()), args=[], keywords=[])), ClassDef(name='_EscapeCodeCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Attrs', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Cache for VT100 escape codes. It maps\n    (fgcolor, bgcolor, bold, underline, strike, reverse) tuples to VT100\n    escape sequences.\n\n    :param true_color: When True, use 24bit colors instead of 256 colors.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='fgcolor', ctx=Store()), Name(id='bgcolor', ctx=Store()), Name(id='bold', ctx=Store()), Name(id='underline', ctx=Store()), Name(id='strike', ctx=Store()), Name(id='italic', ctx=Store()), Name(id='blink', ctx=Store()), Name(id='reverse', ctx=Store()), Name(id='hidden', ctx=Store())], ctx=Store())], value=Name(id='attrs', ctx=Load())), AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_colors_to_code', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='fgcolor', ctx=Load()), Constant(value='')]), BoolOp(op=Or(), values=[Name(id='bgcolor', ctx=Load()), Constant(value='')])], keywords=[])], keywords=[])), If(test=Name(id='bold', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[]), If(test=Name(id='italic', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='3')], keywords=[]))], orelse=[]), If(test=Name(id='blink', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='5')], keywords=[]))], orelse=[]), If(test=Name(id='underline', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='4')], keywords=[]))], orelse=[]), If(test=Name(id='reverse', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='7')], keywords=[]))], orelse=[]), If(test=Name(id='hidden', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='8')], keywords=[]))], orelse=[]), If(test=Name(id='strike', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='9')], keywords=[]))], orelse=[]), If(test=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='\x1b[0;'), op=Add(), right=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='m')))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='\x1b[0m'))]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='attrs', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_color_name_to_rgb', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Turn 'ffffff', into (0xff, 0xff, 0xff).")), Try(body=[Assign(targets=[Name(id='rgb', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='color', ctx=Load()), Constant(value=16)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise()])], orelse=[Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rgb', ctx=Load()), op=RShift(), right=Constant(value=16)), op=BitAnd(), right=Constant(value=255))), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rgb', ctx=Load()), op=RShift(), right=Constant(value=8)), op=BitAnd(), right=Constant(value=255))), Assign(targets=[Name(id='b', ctx=Store())], value=BinOp(left=Name(id='rgb', ctx=Load()), op=BitAnd(), right=Constant(value=255))), Return(value=Tuple(elts=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load()))], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_colors_to_code', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fg_color', annotation=Name(id='str', ctx=Load())), arg(arg='bg_color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a tuple with the vt100 values  that represent this color.\n        ')), Assign(targets=[Name(id='fg_ansi', ctx=Store())], value=Constant(value='')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='color', annotation=Name(id='str', ctx=Load())), arg(arg='bg', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Nonlocal(names=['fg_ansi']), Assign(targets=[Name(id='table', ctx=Store())], value=IfExp(test=Name(id='bg', ctx=Load()), body=Name(id='BG_ANSI_COLORS', ctx=Load()), orelse=Name(id='FG_ANSI_COLORS', ctx=Load()))), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='color', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load())])]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='color', ctx=Load()), ops=[In()], comparators=[Name(id='table', ctx=Load())]), body=[Return(value=List(elts=[Subscript(value=Name(id='table', ctx=Load()), slice=Name(id='color', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='rgb', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_color_name_to_rgb', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_4_BIT', ctx=Load())]), body=[If(test=Name(id='bg', ctx=Load()), body=[If(test=Compare(left=Name(id='fg_color', ctx=Load()), ops=[NotEq()], comparators=[Name(id='bg_color', ctx=Load())]), body=[Assign(targets=[Name(id='exclude', ctx=Store())], value=List(elts=[Name(id='fg_ansi', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='exclude', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='_16_bg_colors', ctx=Load()), attr='get_code', ctx=Load()), args=[Name(id='rgb', ctx=Load())], keywords=[keyword(arg='exclude', value=Name(id='exclude', ctx=Load()))])), Return(value=List(elts=[Name(id='code', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='_16_fg_colors', ctx=Load()), attr='get_code', ctx=Load()), args=[Name(id='rgb', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fg_ansi', ctx=Store())], value=Name(id='name', ctx=Load())), Return(value=List(elts=[Name(id='code', ctx=Load())], ctx=Load()))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_24_BIT', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Name(id='rgb', ctx=Load())), Return(value=List(elts=[IfExp(test=Name(id='bg', ctx=Load()), body=Constant(value=48), orelse=Constant(value=38)), Constant(value=2), Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load()))], orelse=[Return(value=List(elts=[IfExp(test=Name(id='bg', ctx=Load()), body=Constant(value=48), orelse=Constant(value=38)), Constant(value=5), Subscript(value=Name(id='_256_colors', ctx=Load()), slice=Name(id='rgb', ctx=Load()), ctx=Load())], ctx=Load()))])])])])], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='get', ctx=Load()), args=[Name(id='fg_color', ctx=Load()), Constant(value=False)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='get', ctx=Load()), args=[Name(id='bg_color', ctx=Load()), Constant(value=True)], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_size', args=arguments(posonlyargs=[], args=[arg(arg='fileno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get the size of this pseudo terminal.\n\n    :param fileno: stdout.fileno()\n    :returns: A (rows, cols) tuple.\n    ')), Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[Name(id='fileno', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Attribute(value=Name(id='size', ctx=Load()), attr='lines', ctx=Load()), Attribute(value=Name(id='size', ctx=Load()), attr='columns', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Vt100_Output', bases=[Name(id='Output', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    :param get_size: A callable which returns the `Size` of the output terminal.\n    :param stdout: Any object with has a `write` and `flush` method + an \'encoding\' property.\n    :param term: The terminal environment variable. (xterm, xterm-256color, linux, ...)\n    :param enable_cpr: When `True` (the default), send "cursor position\n        request" escape sequences to the output in order to detect the cursor\n        position. That way, we can properly determine how much space there is\n        available for the UI (especially for drop down menus) to render. The\n        `Renderer` will still try to figure out whether the current terminal\n        does respond to CPR escapes. When `False`, never attempt to send CPR\n        requests.\n    ')), AnnAssign(target=Name(id='_fds_not_a_terminal', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdout', annotation=Name(id='TextIO', ctx=Load())), arg(arg='get_size', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='Size', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='term', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='default_color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_bell', annotation=Name(id='bool', ctx=Load())), arg(arg='enable_cpr', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True)]), body=[Assert(test=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='stdout', ctx=Load()), Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Tuple(elts=[Constant(value='write'), Constant(value='flush')], ctx=Load()), ifs=[], is_async=0)])], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Store()), annotation=Name(id='TextIO', ctx=Load()), value=Name(id='stdout', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Store())], value=Name(id='default_color_depth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_size', ctx=Store())], value=Name(id='get_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='term', ctx=Store())], value=Name(id='term', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_bell', ctx=Store())], value=Name(id='enable_bell', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Store())], value=Name(id='enable_cpr', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_escape_code_caches', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='ColorDepth', ctx=Load()), Name(id='_EscapeCodeCache', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load()), Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_4_BIT', ctx=Load()), Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_8_BIT', ctx=Load()), Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_24_BIT', ctx=Load())], values=[Call(func=Name(id='_EscapeCodeCache', ctx=Load()), args=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load())], keywords=[]), Call(func=Name(id='_EscapeCodeCache', ctx=Load()), args=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_4_BIT', ctx=Load())], keywords=[]), Call(func=Name(id='_EscapeCodeCache', ctx=Load()), args=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_8_BIT', ctx=Load())], keywords=[]), Call(func=Name(id='_EscapeCodeCache', ctx=Load()), args=[Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_24_BIT', ctx=Load())], keywords=[])]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_shape_changed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_pty', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='stdout', annotation=Name(id='TextIO', ctx=Load())), arg(arg='term', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='default_color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_bell', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create an Output class from a pseudo terminal.\n        (This will take the dimensions by reading the pseudo\n        terminal attributes.)\n        ')), AnnAssign(target=Name(id='fd', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), Try(body=[Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load()), body=[Assign(targets=[Name(id='fd', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])), BoolOp(op=Or(), values=[Compare(left=Name(id='fd', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='fd', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='_fds_not_a_terminal', ctx=Load())])])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Warning: Output is not a terminal (fd=%r).\n')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Name(id='fd', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='fd', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_fds_not_a_terminal', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), FunctionDef(name='get_size', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='rows', ctx=Store()), Name(id='columns', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())), Try(body=[Assign(targets=[Tuple(elts=[Name(id='rows', ctx=Store()), Name(id='columns', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_size', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='Size', ctx=Load()), args=[], keywords=[keyword(arg='rows', value=BoolOp(op=Or(), values=[Name(id='rows', ctx=Load()), Constant(value=24)])), keyword(arg='columns', value=BoolOp(op=Or(), values=[Name(id='columns', ctx=Load()), Constant(value=80)]))]))], decorator_list=[], returns=Name(id='Size', ctx=Load())), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='stdout', ctx=Load()), Name(id='get_size', ctx=Load())], keywords=[keyword(arg='term', value=Name(id='term', ctx=Load())), keyword(arg='default_color_depth', value=Name(id='default_color_depth', ctx=Load())), keyword(arg='enable_bell', value=Name(id='enable_bell', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Vt100_Output', ctx=Load())), FunctionDef(name='get_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_size', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Size', ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return file descriptor.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return encoding used for stdout.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='encoding', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='write_raw', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write raw data to output.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write text to output.\n        (Removes vt100 escape codes. -- used for safely writing text.)\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\x1b'), Constant(value='?')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set terminal title.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='term', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='linux'), Constant(value='eterm-color')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b]2;%s\x07'), op=Mod(), right=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='title', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\x1b'), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\x07'), Constant(value='')], keywords=[]))], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases the screen with the background colour and moves the cursor to\n        home.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[2J')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enter_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1049h\x1b[H')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='quit_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1049l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1000h')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1003h')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1015h')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1006h')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1000l')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1015l')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1006l')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1003l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases from the current cursor position to the end of the current line.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[K')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases the screen from the current line down to the bottom of the\n        screen.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[J')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[0m')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load())), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create new style and output.\n\n        :param attrs: `Attrs` instance.\n        ')), Assign(targets=[Name(id='escape_code_cache', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_escape_code_caches', ctx=Load()), slice=Name(id='color_depth', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Subscript(value=Name(id='escape_code_cache', ctx=Load()), slice=Name(id='attrs', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?7l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?7h')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?2004h')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?2004l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_cursor_key_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For vt100 only.\n        Put the terminal in cursor mode (instead of application mode).\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?1l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_goto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='\n        Move cursor position.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[%i;%iH'), op=Mod(), right=Tuple(elts=[Name(id='row', ctx=Load()), Name(id='column', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[A')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[%iA'), op=Mod(), right=Name(id='amount', ctx=Load()))], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[B')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[%iB'), op=Mod(), right=Name(id='amount', ctx=Load()))], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[C')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[%iC'), op=Mod(), right=Name(id='amount', ctx=Load()))], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='amount', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x08')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[%iD'), op=Mod(), right=Name(id='amount', ctx=Load()))], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='hide_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?25l')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[?12l\x1b[?25h')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor_shape', annotation=Name(id='CursorShape', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='cursor_shape', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CursorShape', ctx=Load()), attr='_NEVER_CHANGE', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_shape_changed', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Call(func=Attribute(value=Dict(keys=[Attribute(value=Name(id='CursorShape', ctx=Load()), attr='BLOCK', ctx=Load()), Attribute(value=Name(id='CursorShape', ctx=Load()), attr='BEAM', ctx=Load()), Attribute(value=Name(id='CursorShape', ctx=Load()), attr='UNDERLINE', ctx=Load()), Attribute(value=Name(id='CursorShape', ctx=Load()), attr='BLINKING_BLOCK', ctx=Load()), Attribute(value=Name(id='CursorShape', ctx=Load()), attr='BLINKING_BEAM', ctx=Load()), Attribute(value=Name(id='CursorShape', ctx=Load()), attr='BLINKING_UNDERLINE', ctx=Load())], values=[Constant(value='\x1b[2 q'), Constant(value='\x1b[6 q'), Constant(value='\x1b[4 q'), Constant(value='\x1b[1 q'), Constant(value='\x1b[5 q'), Constant(value='\x1b[3 q')]), attr='get', ctx=Load()), args=[Name(id='cursor_shape', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset cursor shape.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_shape_changed', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_shape_changed', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[0 q')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write to output stream and flush.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Name(id='flush_stdout', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ask_for_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Asks for a cursor position report (CPR).\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x1b[6n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='responds_to_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PROMPT_TOOLKIT_NO_CPR'), Constant(value='')], keywords=[]), ops=[Eq()], comparators=[Constant(value='1')]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Name(id='is_dumb_terminal', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='term', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='bell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sound bell.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enable_bell', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_raw', ctx=Load()), args=[Constant(value='\x07')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_default_color_depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the default color depth for a vt100 terminal, according to the\n        our term value.\n\n        We prefer 256 colors almost always, because this is what most terminals\n        support these days, and is a good default.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_color_depth', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='term', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='term', ctx=Load())), If(test=Compare(left=Name(id='term', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEFAULT', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='is_dumb_terminal', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='term', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='linux'), Constant(value='eterm-color')], ctx=Load())]), body=[Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_4_BIT', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEFAULT', ctx=Load()))], decorator_list=[], returns=Name(id='ColorDepth', ctx=Load()))], decorator_list=[])], type_ignores=[])