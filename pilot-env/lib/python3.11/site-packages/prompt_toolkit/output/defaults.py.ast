Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TextIO'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_bell_environment_variable'), alias(name='get_term_environment_variable'), alias(name='is_conemu_ansi')], level=0), ImportFrom(module='base', names=[alias(name='DummyOutput'), alias(name='Output')], level=1), ImportFrom(module='color_depth', names=[alias(name='ColorDepth')], level=1), ImportFrom(module='plain_text', names=[alias(name='PlainTextOutput')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='create_output')], ctx=Load())), FunctionDef(name='create_output', args=arguments(posonlyargs=[], args=[arg(arg='stdout', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='always_prefer_tty', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Return an :class:`~prompt_toolkit.output.Output` instance for the command\n    line.\n\n    :param stdout: The stdout object\n    :param always_prefer_tty: When set, look for `sys.stderr` if `sys.stdout`\n        is not a TTY. Useful if `sys.stdout` is redirected to a file, but we\n        still want user input and output on the terminal.\n\n        By default, this is `False`. If `sys.stdout` is not a terminal (maybe\n        it's redirected to a file), then a `PlainTextOutput` will be returned.\n        That way, tools like `print_formatted_text` will write plain text into\n        that file.\n    ")), Assign(targets=[Name(id='term_from_env', ctx=Store())], value=Call(func=Name(id='get_term_environment_variable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='bell_from_env', ctx=Store())], value=Call(func=Name(id='get_bell_environment_variable', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='color_depth_from_env', ctx=Store())], value=Call(func=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='from_env', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='stdout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), If(test=Name(id='always_prefer_tty', ctx=Load()), body=[For(target=Name(id='io', ctx=Store()), iter=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='io', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Name(id='io', ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='stdout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='DummyOutput', ctx=Load()), args=[], keywords=[]))], orelse=[]), ImportFrom(module='prompt_toolkit.patch_stdout', names=[alias(name='StdoutProxy')], level=0), While(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='stdout', ctx=Load()), Name(id='StdoutProxy', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Attribute(value=Name(id='stdout', ctx=Load()), attr='original_stdout', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='conemu', names=[alias(name='ConEmuOutput')], level=1), ImportFrom(module='win32', names=[alias(name='Win32Output')], level=1), ImportFrom(module='windows10', names=[alias(name='Windows10_Output'), alias(name='is_win_vt100_enabled')], level=1), If(test=Call(func=Name(id='is_win_vt100_enabled', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Output', ctx=Load()), Call(func=Name(id='Windows10_Output', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[keyword(arg='default_color_depth', value=Name(id='color_depth_from_env', ctx=Load()))])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='is_conemu_ansi', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Output', ctx=Load()), Call(func=Name(id='ConEmuOutput', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[keyword(arg='default_color_depth', value=Name(id='color_depth_from_env', ctx=Load()))])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Win32Output', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[keyword(arg='default_color_depth', value=Name(id='color_depth_from_env', ctx=Load()))]))])], orelse=[ImportFrom(module='vt100', names=[alias(name='Vt100_Output')], level=1), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Name(id='PlainTextOutput', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='Vt100_Output', ctx=Load()), attr='from_pty', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[keyword(arg='term', value=Name(id='term_from_env', ctx=Load())), keyword(arg='default_color_depth', value=Name(id='color_depth_from_env', ctx=Load())), keyword(arg='enable_bell', value=Name(id='bell_from_env', ctx=Load()))]))])], decorator_list=[], returns=Name(id='Output', ctx=Load()))], type_ignores=[])