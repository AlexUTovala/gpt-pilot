Module(body=[Expr(value=Constant(value='\nInterface for an output.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TextIO')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='CursorShape')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Attrs')], level=0), ImportFrom(module='color_depth', names=[alias(name='ColorDepth')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Output'), Constant(value='DummyOutput')], ctx=Load())), ClassDef(name='Output', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class defining the output interface for a\n    :class:`~prompt_toolkit.renderer.Renderer`.\n\n    Actual implementations are\n    :class:`~prompt_toolkit.output.vt100.Vt100_Output` and\n    :class:`~prompt_toolkit.output.win32.Win32Output`.\n    ')), AnnAssign(target=Name(id='stdout', ctx=Store()), annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the file descriptor to which we can write for the output.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the encoding for this output, e.g. 'utf-8'.\n        (This is used mainly to know which characters are supported by the\n        output the data, so that the UI can provide alternatives, when\n        required.)\n        "))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write text (Terminal escape sequences will be removed/escaped.)'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='write_raw', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write text.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set terminal title.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='clear_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear title again. (or restore previous title.)'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write to output stream and flush.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='erase_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases the screen with the background colour and moves the cursor to\n        home.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='enter_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Go to the alternate screen buffer. (For full screen applications).'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='quit_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Leave the alternate screen buffer.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='enable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable mouse.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='disable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disable mouse.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='erase_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases from the current cursor position to the end of the current line.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='erase_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erases the screen from the current line down to the bottom of the\n        screen.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='reset_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset color and styling attributes.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='set_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load())), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set new color and styling attributes.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='disable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disable auto line wrapping.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='enable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable auto line wrapping.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_goto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='Move cursor position.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor `amount` place up.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor `amount` place down.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor `amount` place forward.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor `amount` place backward.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='hide_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Hide cursor.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show cursor.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='set_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor_shape', annotation=Name(id='CursorShape', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set cursor shape to block, beam or underline.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='reset_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset cursor shape.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='ask_for_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Asks for a cursor position report (CPR).\n        (VT100 only.)\n        '))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='responds_to_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        `True` if the `Application` can expect to receive a CPR response after\n        calling `ask_for_cpr` (this will come back through the corresponding\n        `Input`).\n\n        This is used to determine the amount of available rows we have below\n        the cursor position. In the first place, we have this so that the drop\n        down autocompletion menus are sized according to the available space.\n\n        On Windows, we don't need this, there we have\n        `get_rows_below_cursor_position`.\n        ")), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the size of the output window.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Size', ctx=Load())), FunctionDef(name='bell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sound bell.'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For vt100 only.'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For vt100 only.'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_cursor_key_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For vt100 only.\n        Put the terminal in normal cursor mode (instead of application mode).\n\n        See: https://vt100.net/docs/vt100-ug/chapter3.html\n        '))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='scroll_buffer_to_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For Win32 only.'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_rows_below_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For Windows only.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_default_color_depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get default color depth for this output.\n\n        This value will be used if no color depth was explicitly passed to the\n        `Application`.\n\n        .. note::\n\n            If the `$PROMPT_TOOLKIT_COLOR_DEPTH` environment variable has been\n            set, then `outputs.defaults.create_output` will pass this value to\n            the implementation as the default_color_depth, which is returned\n            here. (This is not used when the output corresponds to a\n            prompt_toolkit SSH/Telnet session.)\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='ColorDepth', ctx=Load()))], decorator_list=[]), ClassDef(name='DummyOutput', bases=[Name(id='Output', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    For testing. An output class that doesn't render anything.\n    ")), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='There is no sensible default for fileno().')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='utf-8'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_raw', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enter_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='quit_alternate_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_mouse_support', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_attributes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load())), arg(arg='color_depth', annotation=Name(id='ColorDepth', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_autowrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_goto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='hide_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor_shape', annotation=Name(id='CursorShape', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset_cursor_shape', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ask_for_cpr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='bell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='enable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='disable_bracketed_paste', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='scroll_buffer_to_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Size', ctx=Load()), args=[], keywords=[keyword(arg='rows', value=Constant(value=40)), keyword(arg='columns', value=Constant(value=80))]))], decorator_list=[], returns=Name(id='Size', ctx=Load())), FunctionDef(name='get_rows_below_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=40))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_default_color_depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='ColorDepth', ctx=Load()), attr='DEPTH_1_BIT', ctx=Load()))], decorator_list=[], returns=Name(id='ColorDepth', ctx=Load()))], decorator_list=[])], type_ignores=[])