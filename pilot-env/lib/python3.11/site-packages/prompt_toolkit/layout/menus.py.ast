Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='math')]), ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Iterable'), alias(name='Sequence'), alias(name='TypeVar'), alias(name='cast')], level=0), ImportFrom(module='weakref', names=[alias(name='WeakKeyDictionary')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='CompletionState')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='Completion')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Point')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='FilterOrBool'), alias(name='has_completions'), alias(name='is_done'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='StyleAndTextTuples'), alias(name='fragment_list_width'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.layout.utils', names=[alias(name='explode_text_fragments')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseEvent'), alias(name='MouseEventType')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), ImportFrom(module='containers', names=[alias(name='ConditionalContainer'), alias(name='HSplit'), alias(name='ScrollOffsets'), alias(name='Window')], level=1), ImportFrom(module='controls', names=[alias(name='GetLinePrefixCallable'), alias(name='UIContent'), alias(name='UIControl')], level=1), ImportFrom(module='dimension', names=[alias(name='Dimension')], level=1), ImportFrom(module='margins', names=[alias(name='ScrollbarMargin')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindings'), alias(name='NotImplementedOrNone')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='CompletionsMenu'), Constant(value='MultiColumnCompletionsMenu')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), ClassDef(name='CompletionsMenuControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Helper for drawing the complete menu to the screen.\n\n    :param scroll_offset: Number (integer) representing the preferred amount of\n        completions to be displayed before and after the current one. When this\n        is a very high number, the current completion will be shown in the\n        middle most of the time.\n    ')), Assign(targets=[Name(id='MIN_WIDTH', ctx=Store())], value=Constant(value=7)), FunctionDef(name='has_focus', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Name(id='complete_state', ctx=Load()), body=[Assign(targets=[Name(id='menu_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_menu_width', ctx=Load()), args=[Constant(value=500), Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='menu_meta_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_menu_meta_width', ctx=Load()), args=[Constant(value=500), Name(id='complete_state', ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='menu_width', ctx=Load()), op=Add(), right=Name(id='menu_meta_width', ctx=Load())))], orelse=[Return(value=Constant(value=0))])], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Name(id='complete_state', ctx=Load()), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a UIContent object for this control.\n        ')), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Name(id='complete_state', ctx=Load()), body=[Assign(targets=[Name(id='completions', ctx=Store())], value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())), Assign(targets=[Name(id='index', ctx=Store())], value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load())), Assign(targets=[Name(id='menu_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_menu_width', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='menu_meta_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_menu_meta_width', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='menu_width', ctx=Load())), Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='show_meta', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_show_meta', ctx=Load()), args=[Name(id='complete_state', ctx=Load())], keywords=[])), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='completions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_current_completion', ctx=Store())], value=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='index', ctx=Load())])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_get_menu_item_fragments', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='is_current_completion', ctx=Load()), Name(id='menu_width', ctx=Load())], keywords=[keyword(arg='space_after', value=Constant(value=True))])), If(test=Name(id='show_meta', ctx=Load()), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_menu_item_meta_fragments', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='is_current_completion', ctx=Load()), Name(id='menu_meta_width', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='cursor_position', value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=BoolOp(op=Or(), values=[Name(id='index', ctx=Load()), Constant(value=0)]))])), keyword(arg='line_count', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]))]))], orelse=[]), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='_show_meta', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='complete_state', annotation=Name(id='CompletionState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return ``True`` if we need to show a column with meta information.\n        ')), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='display_meta_text', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_menu_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_width', annotation=Name(id='int', ctx=Load())), arg(arg='complete_state', annotation=Name(id='CompletionState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the width of the main column.\n        ')), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='max_width', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_WIDTH', ctx=Load()), BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='display_text', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value=2))], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_menu_meta_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_width', annotation=Name(id='int', ctx=Load())), arg(arg='complete_state', annotation=Name(id='CompletionState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the width of the meta column.\n        ')), FunctionDef(name='meta_width', args=arguments(posonlyargs=[], args=[arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='completion', ctx=Load()), attr='display_meta_text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_show_meta', ctx=Load()), args=[Name(id='complete_state', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='completions', ctx=Store())], value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=200)]), body=[Assign(targets=[Name(id='completions', ctx=Store())], value=Subscript(value=Name(id='completions', ctx=Load()), slice=Slice(upper=Constant(value=200)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='max_width', ctx=Load()), BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='meta_width', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value=2))], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_menu_item_meta_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completion', annotation=Name(id='Completion', ctx=Load())), arg(arg='is_current_completion', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='is_current_completion', ctx=Load()), body=[Assign(targets=[Name(id='style_str', ctx=Store())], value=Constant(value='class:completion-menu.meta.completion.current'))], orelse=[Assign(targets=[Name(id='style_str', ctx=Store())], value=Constant(value='class:completion-menu.meta.completion'))]), Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='tw', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_trim_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='completion', ctx=Load()), attr='display_meta', ctx=Load()), BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='padding', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='tw', ctx=Load())))), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='StyleAndTextTuples', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], ctx=Load())), op=Add(), right=Name(id='text', ctx=Load())), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Name(id='padding', ctx=Load())], ctx=Load())], ctx=Load()))], keywords=[keyword(arg='style', value=Name(id='style_str', ctx=Load()))]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle mouse events: clicking and scrolling.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='y', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='b', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_DOWN', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='complete_next', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Constant(value=3)), keyword(arg='disable_wrap_around', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_UP', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='complete_previous', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Constant(value=3)), keyword(arg='disable_wrap_around', value=Constant(value=True))]))], orelse=[])])]), Return(value=Constant(value=None))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_menu_item_fragments', args=arguments(posonlyargs=[], args=[arg(arg='completion', annotation=Name(id='Completion', ctx=Load())), arg(arg='is_current_completion', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='space_after', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Get the style/text tuples for a menu item, styled and trimmed to the given\n    width.\n    ')), If(test=Name(id='is_current_completion', ctx=Load()), body=[Assign(targets=[Name(id='style_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value='class:completion-menu.completion.current {} {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='completion', ctx=Load()), attr='style', ctx=Load()), Attribute(value=Name(id='completion', ctx=Load()), attr='selected_style', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='style_str', ctx=Store())], value=BinOp(left=Constant(value='class:completion-menu.completion '), op=Add(), right=Attribute(value=Name(id='completion', ctx=Load()), attr='style', ctx=Load())))]), Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='tw', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_trim_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='completion', ctx=Load()), attr='display', ctx=Load()), IfExp(test=Name(id='space_after', ctx=Load()), body=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2)), orelse=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1)))], keywords=[])), Assign(targets=[Name(id='padding', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='tw', ctx=Load())))), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='StyleAndTextTuples', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], ctx=Load())), op=Add(), right=Name(id='text', ctx=Load())), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Name(id='padding', ctx=Load())], ctx=Load())], ctx=Load()))], keywords=[keyword(arg='style', value=Name(id='style_str', ctx=Load()))]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_trim_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='formatted_text', annotation=Name(id='StyleAndTextTuples', ctx=Load())), arg(arg='max_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Trim the text to `max_width`, append dots when the text is too long.\n    Returns (text, width) tuple.\n    ')), Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Name(id='formatted_text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_width', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='remaining_width', ctx=Store())], value=BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Constant(value=3))), For(target=Name(id='style_and_ch', ctx=Store()), iter=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='formatted_text', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ch_width', ctx=Store())], value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Subscript(value=Name(id='style_and_ch', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ch_width', ctx=Load()), ops=[LtE()], comparators=[Name(id='remaining_width', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='style_and_ch', ctx=Load())], keywords=[])), AugAssign(target=Name(id='remaining_width', ctx=Store()), op=Sub(), value=Name(id='ch_width', ctx=Load()))], orelse=[Break()])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='...')], ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Name(id='remaining_width', ctx=Load()))], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='formatted_text', ctx=Load()), Name(id='width', ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='StyleAndTextTuples', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='CompletionsMenu', bases=[Name(id='ConditionalContainer', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_height', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='scroll_offset', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='extra_filter', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='display_arrows', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='z_index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=True), Constant(value=False), BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8))]), body=[Assign(targets=[Name(id='extra_filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='extra_filter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='display_arrows', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='display_arrows', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='CompletionsMenuControl', ctx=Load()), args=[], keywords=[])), keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=8))])), keyword(arg='height', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1)), keyword(arg='max', value=Name(id='max_height', ctx=Load()))])), keyword(arg='scroll_offsets', value=Call(func=Name(id='ScrollOffsets', ctx=Load()), args=[], keywords=[keyword(arg='top', value=Name(id='scroll_offset', ctx=Load())), keyword(arg='bottom', value=Name(id='scroll_offset', ctx=Load()))])), keyword(arg='right_margins', value=List(elts=[Call(func=Name(id='ScrollbarMargin', ctx=Load()), args=[], keywords=[keyword(arg='display_arrows', value=Name(id='display_arrows', ctx=Load()))])], ctx=Load())), keyword(arg='dont_extend_width', value=Constant(value=True)), keyword(arg='style', value=Constant(value='class:completion-menu')), keyword(arg='z_index', value=Name(id='z_index', ctx=Load()))])), keyword(arg='filter', value=BinOp(left=BinOp(left=Name(id='extra_filter', ctx=Load()), op=BitAnd(), right=Name(id='has_completions', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load()))))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='MultiColumnCompletionMenuControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Completion menu that displays all the completions in several columns.\n    When there are more completions than space for them to be displayed, an\n    arrow is shown on the left or right side.\n\n    `min_rows` indicates how many rows will be available in any possible case.\n    When this is larger than one, it will try to use less columns and more\n    rows until this value is reached.\n    Be careful passing in a too big value, if less than the given amount of\n    rows are available, more columns would have been required, but\n    `preferred_width` doesn't know about that and reports a too small value.\n    This results in less completions displayed and additional scrolling.\n    (It's a limitation of how the layout engine currently works: first the\n    widths are calculated, then the heights.)\n\n    :param suggested_max_column_width: The suggested max width of a column.\n        The column can still be bigger than this, but if there is place for two\n        columns of this width, we will display two columns. This to avoid that\n        if there is one very wide completion, that it doesn't significantly\n        reduce the amount of columns.\n    ")), Assign(targets=[Name(id='_required_margin', ctx=Store())], value=Constant(value=3)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='min_rows', annotation=Name(id='int', ctx=Load())), arg(arg='suggested_max_column_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=3), Constant(value=30)]), body=[Assert(test=Compare(left=Name(id='min_rows', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_rows', ctx=Store())], value=Name(id='min_rows', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suggested_max_column_width', ctx=Store())], value=Name(id='suggested_max_column_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_column_width_for_completion_state', ctx=Store()), annotation=Subscript(value=Name(id='WeakKeyDictionary', ctx=Load()), slice=Tuple(elts=[Name(id='CompletionState', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='WeakKeyDictionary', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_columns', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_columns', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_render_pos_to_completion', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='Completion', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_left_arrow', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_right_arrow', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_width', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='has_focus', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Preferred width: prefer to use at least min_rows, but otherwise as much\n        as possible horizontally.\n        ')), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Compare(left=Name(id='complete_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='column_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_width', ctx=Load()), args=[Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='column_width', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='min_rows', ctx=Load())], keywords=[]))], keywords=[]))], keywords=[])), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='result', ctx=Load()), ops=[Gt()], comparators=[Name(id='column_width', ctx=Load())]), Compare(left=Name(id='result', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='max_available_width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_required_margin', ctx=Load()))])]), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Sub(), value=Name(id='column_width', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Name(id='result', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_required_margin', ctx=Load())))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Preferred height: as much as needed in order to display all the completions.\n        ')), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Compare(left=Name(id='complete_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='column_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_width', ctx=Load()), args=[Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Name(id='column_count', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_required_margin', ctx=Load())), op=FloorDiv(), right=Name(id='column_width', ctx=Load()))], keywords=[])), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Name(id='column_count', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a UIContent object for this menu.\n        ')), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Compare(left=Name(id='complete_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='column_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_width', ctx=Load()), args=[Name(id='complete_state', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_pos_to_completion', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), FunctionDef(name='grouper', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='iterable', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), arg(arg='fillvalue', annotation=BinOp(left=Name(id='_T', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx")), Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])], ctx=Load()), op=Mult(), right=Name(id='n', ctx=Load()))), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Name(id='fillvalue', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=BinOp(left=Name(id='_T', ctx=Load()), op=BitOr(), right=Constant(value=None)), ctx=Load()), ctx=Load())), FunctionDef(name='is_current_completion', args=arguments(posonlyargs=[], args=[arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True when this completion is the currently selected one.')), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='complete_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='current_completion', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='HORIZONTAL_MARGIN_REQUIRED', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='column_width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='HORIZONTAL_MARGIN_REQUIRED', ctx=Load())), Name(id='column_width', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='column_width', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='suggested_max_column_width', ctx=Load())]), body=[AugAssign(target=Name(id='column_width', ctx=Store()), op=FloorDiv(), value=BinOp(left=Name(id='column_width', ctx=Load()), op=FloorDiv(), right=Attribute(value=Name(id='self', ctx=Load()), attr='suggested_max_column_width', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='visible_columns', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_required_margin', ctx=Load())), op=FloorDiv(), right=Name(id='column_width', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='columns_', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='grouper', ctx=Load()), args=[Name(id='height', ctx=Load()), Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rows_', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Name(id='columns_', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='selected_column', ctx=Store())], value=BinOp(left=BoolOp(op=Or(), values=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), Constant(value=0)]), op=FloorDiv(), right=Name(id='height', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='selected_column', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load()), BinOp(left=BinOp(left=Name(id='selected_column', ctx=Load()), op=Sub(), right=Name(id='visible_columns', ctx=Load())), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='render_left_arrow', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='render_right_arrow', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='rows_', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Sub(), right=Name(id='visible_columns', ctx=Load()))])), Assign(targets=[Name(id='fragments_for_line', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='row_index', ctx=Store()), Name(id='row', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='rows_', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='fragments', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='middle_row', ctx=Store())], value=Compare(left=Name(id='row_index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rows_', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))])), If(test=Name(id='render_left_arrow', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:scrollbar'), IfExp(test=Name(id='middle_row', ctx=Load()), body=Constant(value='<'), orelse=Constant(value=' '))], ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='render_right_arrow', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[])]), For(target=Tuple(elts=[Name(id='column_index', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='row', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load())), ctx=Load()), slice=Slice(upper=Name(id='visible_columns', ctx=Load())), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='fragments', ctx=Store()), op=Add(), value=Call(func=Name(id='_get_menu_item_fragments', ctx=Load()), args=[Name(id='c', ctx=Load()), Call(func=Name(id='is_current_completion', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), Name(id='column_width', ctx=Load())], keywords=[keyword(arg='space_after', value=Constant(value=False))])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='column_width', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_pos_to_completion', ctx=Load()), slice=Tuple(elts=[BinOp(left=BinOp(left=Name(id='column_index', ctx=Load()), op=Mult(), right=Name(id='column_width', ctx=Load())), op=Add(), right=Name(id='x', ctx=Load())), Name(id='row_index', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='c', ctx=Load()))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:completion'), BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='column_width', ctx=Load()))], ctx=Load())], keywords=[]))])], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='render_left_arrow', ctx=Load()), Name(id='render_right_arrow', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:completion'), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='render_right_arrow', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:scrollbar'), IfExp(test=Name(id='middle_row', ctx=Load()), body=Constant(value='>'), orelse=Constant(value=' '))], ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='render_left_arrow', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:completion'), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='fragments_for_line', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:completion-menu'))])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Store())], value=Name(id='height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_columns', ctx=Store())], value=Name(id='visible_columns', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_columns', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='columns_', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_left_arrow', ctx=Store())], value=Name(id='render_left_arrow', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_right_arrow', ctx=Store())], value=Name(id='render_right_arrow', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_width', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='column_width', ctx=Load()), op=Mult(), right=Name(id='visible_columns', ctx=Load())), op=Add(), right=Name(id='render_left_arrow', ctx=Load())), op=Add(), right=Name(id='render_right_arrow', ctx=Load())), op=Add(), right=Constant(value=1))), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='fragments_for_line', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='line_count', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rows_', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='_get_column_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completion_state', annotation=Name(id='CompletionState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the width of each column.\n        ')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='count', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_column_width_for_completion_state', ctx=Load()), slice=Name(id='completion_state', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='completion_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[])]), body=[Raise(exc=Name(id='KeyError', ctx=Load()))], orelse=[]), Return(value=Name(id='width', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='display_text', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='completion_state', ctx=Load()), attr='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_column_width_for_completion_state', ctx=Load()), slice=Name(id='completion_state', ctx=Load()), ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='completion_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), Name(id='result', ctx=Load())], ctx=Load())), Return(value=Name(id='result', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle scroll and click events.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load())), FunctionDef(name='scroll_left', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='complete_previous', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Load())), keyword(arg='disable_wrap_around', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='scroll_right', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='complete_next', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Load())), keyword(arg='disable_wrap_around', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_total_columns', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_columns', ctx=Load())), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='scroll', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_DOWN', ctx=Load())]), body=[Expr(value=Call(func=Name(id='scroll_right', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_UP', ctx=Load())]), body=[Expr(value=Call(func=Name(id='scroll_left', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='x', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='y', ctx=Load())), If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_render_left_arrow', ctx=Load()), body=[Expr(value=Call(func=Name(id='scroll_left', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_render_width', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_render_right_arrow', ctx=Load()), body=[Expr(value=Call(func=Name(id='scroll_right', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='completion', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_pos_to_completion', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load())], keywords=[])), If(test=Name(id='completion', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='apply_completion', ctx=Load()), args=[Name(id='completion', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[])])]), Return(value=Constant(value=None))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Expose key bindings that handle the left/right arrow keys when the menu\n        is displayed.\n        ')), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindings')], level=0), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Only handle key bindings if this menu is visible.')), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='complete_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Attribute(value=Name(id='window', ctx=Load()), attr='content', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())]), generators=[comprehension(target=Name(id='window', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='layout', ctx=Load()), attr='visible_windows', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='move', args=arguments(posonlyargs=[], args=[arg(arg='right', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Name(id='buff', ctx=Load()), attr='complete_state', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='complete_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='new_index', ctx=Store())], value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='complete_index', ctx=Load())), If(test=Name(id='right', ctx=Load()), body=[AugAssign(target=Name(id='new_index', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Load()))], orelse=[AugAssign(target=Name(id='new_index', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_rendered_rows', ctx=Load()))]), If(test=Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='new_index', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Name(id='new_index', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_left', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='move', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='left')], keywords=[keyword(arg='is_global', value=Constant(value=True)), keyword(arg='filter', value=Name(id='filter', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_right', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='move', ctx=Load()), args=[Constant(value=True)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='right')], keywords=[keyword(arg='is_global', value=Constant(value=True)), keyword(arg='filter', value=Name(id='filter', ctx=Load()))])], returns=Constant(value=None)), Return(value=Name(id='kb', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load()))], decorator_list=[]), ClassDef(name='MultiColumnCompletionsMenu', bases=[Name(id='HSplit', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Container that displays the completions in several columns.\n    When `show_meta` (a :class:`~prompt_toolkit.filters.Filter`) evaluates\n    to True, it shows the meta information at the bottom.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='min_rows', annotation=Name(id='int', ctx=Load())), arg(arg='suggested_max_column_width', annotation=Name(id='int', ctx=Load())), arg(arg='show_meta', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='extra_filter', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='z_index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=3), Constant(value=30), Constant(value=True), Constant(value=True), BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8))]), body=[Assign(targets=[Name(id='show_meta', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='show_meta', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extra_filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='extra_filter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='full_filter', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='extra_filter', ctx=Load()), op=BitAnd(), right=Name(id='has_completions', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))), FunctionDef(name='any_completion_has_meta', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='complete_state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='complete_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='display_meta', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='completions_window', ctx=Store())], value=Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='MultiColumnCompletionMenuControl', ctx=Load()), args=[], keywords=[keyword(arg='min_rows', value=Name(id='min_rows', ctx=Load())), keyword(arg='suggested_max_column_width', value=Name(id='suggested_max_column_width', ctx=Load()))])), keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=8))])), keyword(arg='height', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1))]))])), keyword(arg='filter', value=Name(id='full_filter', ctx=Load()))])), Assign(targets=[Name(id='meta_window', ctx=Store())], value=Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='_SelectedCompletionMetaControl', ctx=Load()), args=[], keywords=[]))])), keyword(arg='filter', value=BinOp(left=BinOp(left=Name(id='full_filter', ctx=Load()), op=BitAnd(), right=Name(id='show_meta', ctx=Load())), op=BitAnd(), right=Name(id='any_completion_has_meta', ctx=Load())))])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[List(elts=[Name(id='completions_window', ctx=Load()), Name(id='meta_window', ctx=Load())], ctx=Load())], keywords=[keyword(arg='z_index', value=Name(id='z_index', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_SelectedCompletionMetaControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Control that shows the meta information of the selected completion.\n    ')), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Report the width of the longest meta text as the preferred width of this control.\n\n        It could be that we use less width, but this way, we're sure that the\n        layout doesn't change when we select another completion (E.g. that\n        completions are suddenly shown in more or fewer columns.)\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load()), body=[Assign(targets=[Name(id='state', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=30)]), body=[Return(value=Name(id='max_available_width', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value=2), op=Add(), right=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='display_meta_text', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='state', ctx=Load()), attr='completions', ctx=Load()), slice=Slice(upper=Constant(value=100)), ctx=Load()), ifs=[], is_async=0)])], keywords=[])))], orelse=[Return(value=Constant(value=0))])], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_fragments', ctx=Load()), args=[], keywords=[])), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='fragments', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='line_count', value=IfExp(test=Name(id='fragments', ctx=Load()), body=Constant(value=1), orelse=Constant(value=0)))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='_get_text_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='class:completion-menu.multi-column-meta')), Assign(targets=[Name(id='state', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='state', ctx=Load()), Attribute(value=Name(id='state', ctx=Load()), attr='current_completion', ctx=Load()), Attribute(value=Attribute(value=Name(id='state', ctx=Load()), attr='current_completion', ctx=Load()), attr='display_meta_text', ctx=Load())]), body=[Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='StyleAndTextTuples', ctx=Load()), List(elts=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Attribute(value=Name(id='state', ctx=Load()), attr='current_completion', ctx=Load()), attr='display_meta', ctx=Load())), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], ctx=Load()))], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[])], type_ignores=[])