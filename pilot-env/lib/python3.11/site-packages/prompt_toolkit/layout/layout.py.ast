Module(body=[Expr(value=Constant(value='\nWrapper for the layout.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Generator'), alias(name='Iterable'), alias(name='Union')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer')], level=0), ImportFrom(module='containers', names=[alias(name='AnyContainer'), alias(name='ConditionalContainer'), alias(name='Container'), alias(name='Window'), alias(name='to_container')], level=1), ImportFrom(module='controls', names=[alias(name='BufferControl'), alias(name='SearchBufferControl'), alias(name='UIControl')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Layout'), Constant(value='InvalidLayoutError'), Constant(value='walk')], ctx=Load())), Assign(targets=[Name(id='FocusableElement', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Buffer', ctx=Load()), Name(id='UIControl', ctx=Load()), Name(id='AnyContainer', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Layout', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    The layout for a prompt_toolkit\n    :class:`~prompt_toolkit.application.Application`.\n    This also keeps track of which user control is focused.\n\n    :param container: The "root" container for the layout.\n    :param focused_element: element to be focused initially. (Can be anything\n        the `focus` function accepts.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='container', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='focused_element', annotation=BinOp(left=Name(id='FocusableElement', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Window', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='search_links', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='SearchBufferControl', ctx=Load()), Name(id='BufferControl', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_child_to_parent', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Container', ctx=Load()), Name(id='Container', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), If(test=Compare(left=Name(id='focused_element', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_windows', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='InvalidLayoutError', ctx=Load()), args=[Constant(value='Invalid layout. The layout does not contain any Window object.')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus', ctx=Load()), args=[Name(id='focused_element', ctx=Load())], keywords=[]))]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='visible_windows', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Window', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Layout('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()), conversion=114), Constant(value=', current_window='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='find_all_windows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find all the :class:`.UIControl` objects in this layout.\n        ')), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='walk', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='Window', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='find_all_controls', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='container', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_windows', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='container', ctx=Load()), attr='content', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='UIControl', ctx=Load()), ctx=Load())), FunctionDef(name='focus', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='FocusableElement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Focus the given UI element.\n\n        `value` can be either:\n\n        - a :class:`.UIControl`\n        - a :class:`.Buffer` instance or the name of a :class:`.Buffer`\n        - a :class:`.Window`\n        - Any container object. In this case we will focus the :class:`.Window`\n          from this container that was focused most recent, or the very first\n          focusable :class:`.Window` of the container.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[For(target=Name(id='control', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_controls', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='control', ctx=Load()), attr='buffer', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus', ctx=Load()), args=[Name(id='control', ctx=Load())], keywords=[])), Return()], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Couldn't find Buffer in the current layout: "), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value='.')])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Buffer', ctx=Load())], keywords=[]), body=[For(target=Name(id='control', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_controls', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='control', ctx=Load()), attr='buffer', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus', ctx=Load()), args=[Name(id='control', ctx=Load())], keywords=[])), Return()], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Couldn't find Buffer in the current layout: "), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value='.')])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='UIControl', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_controls', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid value. Container does not appear in the layout.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='is_focusable', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid value. UIControl is not focusable.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_windows', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid value. Window does not appear in the layout: '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='windows', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='skip_hidden', value=Constant(value=True))]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='c', ctx=Load()), attr='content', ctx=Load()), attr='is_focusable', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='windows', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='w', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='w', ctx=Load()), ops=[In()], comparators=[Name(id='windows', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Store())], value=Name(id='w', ctx=Load())), Return()], orelse=[])], orelse=[]), If(test=Name(id='windows', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Store())], value=Subscript(value=Name(id='windows', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return()], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid value. Container cannot be focused: '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)])], keywords=[]))])])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='has_focus', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='FocusableElement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check whether the given control has the focus.\n        :param value: :class:`.UIControl` or :class:`.Window` instance.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_buffer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_buffer', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Buffer', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_buffer', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='UIControl', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load()), ops=[Eq()], comparators=[Name(id='value', ctx=Load())]))], orelse=[For(target=Name(id='element', ctx=Store()), iter=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))])])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='current_control', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the :class:`.UIControl` to currently has the focus.\n        ')), Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='content', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='UIControl', ctx=Load())), FunctionDef(name='current_control', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='control', annotation=Name(id='UIControl', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set the :class:`.UIControl` to receive the focus.\n        ')), For(target=Name(id='window', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_windows', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='window', ctx=Load()), attr='content', ctx=Load()), ops=[Eq()], comparators=[Name(id='control', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Store())], value=Name(id='window', ctx=Load())), Return()], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Control not found in the user interface.')], keywords=[]))], decorator_list=[Attribute(value=Name(id='current_control', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='current_window', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the :class:`.Window` object that is currently focused.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Window', ctx=Load())), FunctionDef(name='current_window', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Window', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the :class:`.Window` object to be currently focused.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='current_window', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='is_searching', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if we are searching right now.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='search_links', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='search_target_buffer_control', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the :class:`.BufferControl` in which we are searching or `None`.\n        ')), Assign(targets=[Name(id='control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='control', ctx=Load()), Name(id='SearchBufferControl', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='search_links', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='control', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value=None))])], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='BufferControl', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_focusable_windows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return all the :class:`.Window` objects which are focusable (in the\n        'modal' area).\n        ")), For(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='walk_through_modal_area', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='w', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='content', ctx=Load()), attr='is_focusable', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Yield(value=Name(id='w', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Window', ctx=Load()), ctx=Load())), FunctionDef(name='get_visible_focusable_windows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of :class:`.Window` objects that are focusable.\n        ')), Assign(targets=[Name(id='visible_windows', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='visible_windows', ctx=Load())), Return(value=ListComp(elt=Name(id='w', ctx=Load()), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_focusable_windows', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='w', ctx=Load()), ops=[In()], comparators=[Name(id='visible_windows', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Window', ctx=Load()), ctx=Load())), FunctionDef(name='current_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The currently focused :class:`~.Buffer` or `None`.\n        ')), Assign(targets=[Name(id='ui_control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ui_control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='ui_control', ctx=Load()), attr='buffer', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='Buffer', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_buffer_by_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Look in the layout for a buffer with the given name.\n        Return `None` when nothing was found.\n        ')), For(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='walk', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='w', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='content', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='content', ctx=Load()), attr='buffer', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='buffer_name', ctx=Load())]), body=[Return(value=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='content', ctx=Load()), attr='buffer', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='Buffer', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='buffer_has_focus', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return `True` if the currently focused control is a\n        :class:`.BufferControl`. (For instance, used to determine whether the\n        default key bindings should be active or not.)\n        ')), Assign(targets=[Name(id='ui_control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_control', ctx=Load())), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ui_control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='previous_control', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the :class:`.UIControl` to previously had the focus.\n        ')), Try(body=[Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), attr='content', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='content', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='UIControl', ctx=Load())), FunctionDef(name='focus_last', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Give the focus to the last focused control.\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='focus_next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Focus the next visible/focusable Window.\n        ')), Assign(targets=[Name(id='windows', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_visible_focusable_windows', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='windows', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Try(body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='windows', ctx=Load()), attr='index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0))])], orelse=[Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='windows', ctx=Load())], keywords=[])))], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus', ctx=Load()), args=[Subscript(value=Name(id='windows', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='focus_previous', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Focus the previous visible/focusable Window.\n        ')), Assign(targets=[Name(id='windows', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_visible_focusable_windows', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='windows', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Try(body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='windows', ctx=Load()), attr='index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0))])], orelse=[Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='windows', ctx=Load())], keywords=[])))], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus', ctx=Load()), args=[Subscript(value=Name(id='windows', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='walk', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Walk through all the layout nodes (and their children) and yield them.\n        ')), Expr(value=YieldFrom(value=Call(func=Name(id='walk', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), FunctionDef(name='walk_through_modal_area', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Walk through all the containers which are in the current 'modal' part\n        of the layout.\n        ")), AnnAssign(target=Name(id='root', ctx=Store()), annotation=Name(id='Container', ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='current_window', ctx=Load()), simple=1), While(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='is_modal', ctx=Load()), args=[], keywords=[])), Compare(left=Name(id='root', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_child_to_parent', ctx=Load())])]), body=[Assign(targets=[Name(id='root', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_child_to_parent', ctx=Load()), slice=Name(id='root', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=YieldFrom(value=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), FunctionDef(name='update_parents_relations', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Update child->parent relationships mapping.\n        ')), Assign(targets=[Name(id='parents', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='walk', args=arguments(posonlyargs=[], args=[arg(arg='e', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='get_children', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='parents', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Store())], value=Name(id='e', ctx=Load())), Expr(value=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='walk', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_child_to_parent', ctx=Store())], value=Name(id='parents', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='search_links', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_parent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='container', annotation=Name(id='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the parent container for the given container, or ``None``, if it\n        wasn't found.\n        ")), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_child_to_parent', ctx=Load()), slice=Name(id='container', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=Name(id='Container', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), ClassDef(name='InvalidLayoutError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='walk', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='Container', ctx=Load())), arg(arg='skip_hidden', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Walk through layout, starting at this container.\n    ')), If(test=BoolOp(op=And(), values=[Name(id='skip_hidden', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='container', ctx=Load()), Name(id='ConditionalContainer', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]))]), body=[Return()], orelse=[]), Expr(value=Yield(value=Name(id='container', ctx=Load()))), For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='get_children', ctx=Load()), args=[], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[keyword(arg='skip_hidden', value=Name(id='skip_hidden', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], type_ignores=[])