Module(body=[Expr(value=Constant(value='\nUser interface Controls for the layout.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='time')]), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Hashable'), alias(name='Iterable'), alias(name='NamedTuple')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='SimpleCache')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Point')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='fragment_list_to_text'), alias(name='fragment_list_width'), alias(name='split_lines')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='Lexer'), alias(name='SimpleLexer')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseButton'), alias(name='MouseEvent'), alias(name='MouseEventType')], level=0), ImportFrom(module='prompt_toolkit.search', names=[alias(name='SearchState')], level=0), ImportFrom(module='prompt_toolkit.selection', names=[alias(name='SelectionType')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), ImportFrom(module='processors', names=[alias(name='DisplayMultipleCursors'), alias(name='HighlightIncrementalSearchProcessor'), alias(name='HighlightSearchProcessor'), alias(name='HighlightSelectionProcessor'), alias(name='Processor'), alias(name='TransformationInput'), alias(name='merge_processors')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindingsBase'), alias(name='NotImplementedOrNone')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='Event')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='BufferControl'), Constant(value='SearchBufferControl'), Constant(value='DummyControl'), Constant(value='FormattedTextControl'), Constant(value='UIControl'), Constant(value='UIContent')], ctx=Load())), Assign(targets=[Name(id='GetLinePrefixCallable', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='UIControl', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class for all user interface controls.\n    ')), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='is_focusable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Tell whether this user control is focusable.\n        ')), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate the content for this user control.\n\n        Returns a :class:`.UIContent` instance.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle mouse events.\n\n        When `NotImplemented` is returned, it means that the given event is not\n        handled by the `UIControl` itself. The `Window` or key bindings can\n        decide to handle this event as scrolling or changing focus.\n\n        :param mouse_event: `MouseEvent` instance.\n        ')), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), FunctionDef(name='move_cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Request to move the cursor down.\n        This happens when scrolling down and the cursor is completely at the\n        top.\n        '))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Request to move the cursor up.\n        '))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The key bindings that are specific for this user control.\n\n        Return a :class:`.KeyBindings` object if some key bindings are\n        specified, or `None` otherwise.\n        '))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_invalidate_events', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of `Event` objects. This can be a generator.\n        (The application collects all these events, in order to bind redraw\n        handlers to these events.)\n        ')), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='UIContent', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Content generated by a user control. This content consists of a list of\n    lines.\n\n    :param get_line: Callable that takes a line number and returns the current\n        line. This is a list of (style_str, text) tuples.\n    :param line_count: The number of lines.\n    :param cursor_position: a :class:`.Point` for the cursor position.\n    :param menu_position: a :class:`.Point` for the menu position.\n    :param show_cursor: Make the cursor visible.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_line', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='line_count', annotation=Name(id='int', ctx=Load())), arg(arg='cursor_position', annotation=BinOp(left=Name(id='Point', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='menu_position', annotation=BinOp(left=Name(id='Point', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='show_cursor', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load())), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_line', ctx=Store())], value=Name(id='get_line', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_count', ctx=Store())], value=Name(id='line_count', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cursor_position', ctx=Load()), Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='menu_position', ctx=Store())], value=Name(id='menu_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_cursor', ctx=Store())], value=Name(id='show_cursor', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_line_heights_cache', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make it iterable (iterate line by line).')), If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='line_count', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_line', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Name(id='IndexError', ctx=Load()))])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='get_height_for_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='slice_stop', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return the height that a given line would need if it is rendered in a\n        space with the given width (using line wrapping).\n\n        :param get_line_prefix: None or a `Window.get_line_prefix` callable\n            that returns the prefix to be inserted before this line.\n        :param slice_stop: Wrap only "line[:slice_stop]" and return that\n            partial result. This is needed for scrolling the window correctly\n            when line wrapping.\n        :returns: The computed height.\n        ')), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='render_counter', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='width', ctx=Load()), Name(id='slice_stop', ctx=Load())], ctx=Load())), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_heights_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8)))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_line', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(upper=Name(id='slice_stop', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='text_width', ctx=Store())], value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Name(id='get_line_prefix', ctx=Load()), body=[AugAssign(target=Name(id='text_width', ctx=Store()), op=Add(), value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='get_line_prefix', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Constant(value=0)], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='height', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='text_width', ctx=Load()), ops=[Gt()], comparators=[Name(id='width', ctx=Load())]), body=[AugAssign(target=Name(id='height', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='text_width', ctx=Store()), op=Sub(), value=Name(id='width', ctx=Load())), Assign(targets=[Name(id='fragments2', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='get_line_prefix', ctx=Load()), args=[Name(id='lineno', ctx=Load()), BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='prefix_width', ctx=Store())], value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Name(id='fragments2', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='prefix_width', ctx=Load()), ops=[GtE()], comparators=[Name(id='width', ctx=Load())]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8))), Break()], orelse=[]), AugAssign(target=Name(id='text_width', ctx=Store()), op=Add(), value=Name(id='prefix_width', ctx=Load()))], orelse=[])], orelse=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='quotient', ctx=Store()), Name(id='remainder', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='text_width', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8)))])], orelse=[If(test=Name(id='remainder', ctx=Load()), body=[AugAssign(target=Name(id='quotient', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), Name(id='quotient', ctx=Load())], keywords=[]))], finalbody=[])])]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_heights_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='height', ctx=Load())), Return(value=Name(id='height', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='FormattedTextControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Control that displays formatted text. This can be either plain text, an\n    :class:`~prompt_toolkit.formatted_text.HTML` object an\n    :class:`~prompt_toolkit.formatted_text.ANSI` object, a list of ``(style_str,\n    text)`` tuples or a callable that takes no argument and returns one of\n    those, depending on how you prefer to do the formatting. See\n    ``prompt_toolkit.layout.formatted_text`` for more information.\n\n    (It's mostly optimized for rather small widgets, like toolbars, menus, etc...)\n\n    When this UI control has the focus, the cursor will be shown in the upper\n    left corner of this control by default. There are two ways for specifying\n    the cursor position:\n\n    - Pass a `get_cursor_position` function which returns a `Point` instance\n      with the current cursor position.\n\n    - If the (formatted) text is passed as a list of ``(style, text)`` tuples\n      and there is one that looks like ``('[SetCursorPosition]', '')``, then\n      this will specify the cursor position.\n\n    Mouse support:\n\n        The list of fragments can also contain tuples of three items, looking like:\n        (style_str, text, handler). When mouse support is enabled and the user\n        clicks on this fragment, then the given handler is called. That handler\n        should accept two inputs: (Application, MouseEvent) and it should\n        either handle the event or return `NotImplemented` in case we want the\n        containing Window to handle this event.\n\n    :param focusable: `bool` or :class:`.Filter`: Tell whether this control is\n        focusable.\n\n    :param text: Text or formatted text to be displayed.\n    :param style: Style string applied to the content. (If you want to style\n        the whole :class:`~prompt_toolkit.layout.Window`, pass the style to the\n        :class:`~prompt_toolkit.layout.Window` instead.)\n    :param key_bindings: a :class:`.KeyBindings` object.\n    :param get_cursor_position: A callable that returns the cursor position as\n        a `Point` instance.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='focusable', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='show_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='get_cursor_position', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='Point', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=''), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='focusable', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='focusable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_cursor', ctx=Store())], value=Name(id='show_cursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Store())], value=Name(id='modal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_position', ctx=Store())], value=Name(id='get_cursor_position', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_content_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=18))]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fragment_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fragments', ctx=Store()), annotation=BinOp(left=Name(id='StyleAndTextTuples', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fragments', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_focusable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focusable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_formatted_text_cached', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get fragments, but only retrieve fragments once during one render run.\n        (This function is called several times during one rendering, because\n        we also need those for calculating the dimensions.)\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fragment_cache', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='render_counter', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the preferred width for this control.\n        That is the width of the longest line.\n        ')), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_formatted_text_cached', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='line_lengths', ctx=Store())], value=ListComp(elt=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='l', ctx=Store()), iter=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='line_lengths', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the preferred height for this control.\n        ')), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_content', ctx=Load()), args=[Name(id='width', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='wrap_lines', ctx=Load()), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Constant(value=0)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='content', ctx=Load()), attr='line_count', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='height', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='get_height_for_line', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='width', ctx=Load()), Name(id='get_line_prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[GtE()], comparators=[Name(id='max_available_height', ctx=Load())]), body=[Return(value=Name(id='max_available_height', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='height', ctx=Load()))], orelse=[Return(value=Attribute(value=Name(id='content', ctx=Load()), attr='line_count', ctx=Load()))])], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fragments_with_mouse_handlers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_formatted_text_cached', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fragment_lines_with_mouse_handlers', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='split_lines', ctx=Load()), args=[Name(id='fragments_with_mouse_handlers', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='fragment_lines', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='StyleAndTextTuples', ctx=Load()), ctx=Load()), value=ListComp(elt=ListComp(elt=Tuple(elts=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='line', ctx=Load()), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='fragment_lines_with_mouse_handlers', ctx=Load()), ifs=[], is_async=0)]), simple=1), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fragments', ctx=Store())], value=Name(id='fragments_with_mouse_handlers', ctx=Load())), FunctionDef(name='get_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='fragment', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='[SetCursorPosition]')]), body=[For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='fragment_lines', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='style_str', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='line', ctx=Load()), body=[If(test=Compare(left=Name(id='fragment', ctx=Load()), ops=[In()], comparators=[Name(id='style_str', ctx=Load())]), body=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Name(id='y', ctx=Load()))]))], orelse=[]), AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='Point', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_menu_position', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_cursor_position', ctx=Load()), args=[Constant(value='[SetMenuPosition]')], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='Point', ctx=Load()), op=BitOr(), right=Constant(value=None))), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Call(func=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_position', ctx=Load()), Name(id='get_cursor_position', ctx=Load())]), args=[], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='fragments_with_mouse_handlers', ctx=Load())], keywords=[]), Name(id='width', ctx=Load()), Name(id='cursor_position', ctx=Load())], ctx=Load())), FunctionDef(name='get_content', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='fragment_lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))), keyword(arg='line_count', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragment_lines', ctx=Load())], keywords=[])), keyword(arg='show_cursor', value=Attribute(value=Name(id='self', ctx=Load()), attr='show_cursor', ctx=Load())), keyword(arg='cursor_position', value=Name(id='cursor_position', ctx=Load())), keyword(arg='menu_position', value=Call(func=Name(id='get_menu_position', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_content_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='get_content', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle mouse events.\n\n        (When the fragment list contained mouse handlers and the user clicked on\n        on any of these, the matching handler is called. This handler can still\n        return `NotImplemented` in case we want the\n        :class:`~prompt_toolkit.layout.Window` to handle this particular\n        event.)\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_fragments', ctx=Load()), body=[Assign(targets=[Name(id='fragments_for_line', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='split_lines', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fragments', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='fragments', ctx=Store())], value=Subscript(value=Name(id='fragments_for_line', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='y', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Name(id='NotImplemented', ctx=Load()))])], orelse=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='x', ctx=Load())), Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=0)), For(target=Name(id='item', ctx=Store()), iter=Name(id='fragments', ctx=Load()), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Gt()], comparators=[Name(id='xpos', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='handler', ctx=Store())], value=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=2), ctx=Load())), Return(value=Call(func=Name(id='handler', ctx=Load()), args=[Name(id='mouse_event', ctx=Load())], keywords=[]))], orelse=[Break()])], orelse=[])], orelse=[])], finalbody=[])], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), FunctionDef(name='is_modal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), ClassDef(name='DummyControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A dummy control object that doesn't paint any content.\n\n    Useful for filling a :class:`~prompt_toolkit.layout.Window`. (The\n    `fragment` and `char` attributes of the `Window` class can be used to\n    define the filling.)\n    ")), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='line_count', value=BinOp(left=Constant(value=100), op=Pow(), right=Constant(value=100)))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='is_focusable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='_ProcessedLine', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='fragments', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), simple=1), AnnAssign(target=Name(id='source_to_display', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='display_to_source', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='BufferControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Control for visualising the content of a :class:`.Buffer`.\n\n    :param buffer: The :class:`.Buffer` object to be displayed.\n    :param input_processors: A list of\n        :class:`~prompt_toolkit.layout.processors.Processor` objects.\n    :param include_default_input_processors: When True, include the default\n        processors for highlighting of selection, search and displaying of\n        multiple cursors.\n    :param lexer: :class:`.Lexer` instance for syntax highlighting.\n    :param preview_search: `bool` or :class:`.Filter`: Show search while\n        typing. When this is `True`, probably you want to add a\n        ``HighlightIncrementalSearchProcessor`` as well. Otherwise only the\n        cursor position will move, but the text won't be highlighted.\n    :param focusable: `bool` or :class:`.Filter`: Tell whether this control is focusable.\n    :param focus_on_click: Focus this buffer when it's click, but not yet focused.\n    :param key_bindings: a :class:`.KeyBindings` object.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer', annotation=BinOp(left=Name(id='Buffer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_input_processors', annotation=Name(id='bool', ctx=Load())), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='preview_search', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='focusable', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='search_buffer_control', annotation=BinOp(left=BinOp(left=Constant(value=None), op=BitOr(), right=Name(id='SearchBufferControl', ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='SearchBufferControl', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='menu_position', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='focus_on_click', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Store())], value=Name(id='input_processors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_default_input_processors', ctx=Store())], value=Name(id='include_default_input_processors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_input_processors', ctx=Store())], value=List(elts=[Call(func=Name(id='HighlightSearchProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HighlightIncrementalSearchProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HighlightSelectionProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DisplayMultipleCursors', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preview_search', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='preview_search', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='focusable', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='focusable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='focus_on_click', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='focus_on_click', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='buffer', ctx=Load()), Call(func=Name(id='Buffer', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='menu_position', ctx=Store())], value=Name(id='menu_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='lexer', ctx=Load()), Call(func=Name(id='SimpleLexer', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_search_buffer_control', ctx=Store())], value=Name(id='search_buffer_control', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fragment_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=8))]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_click_timestamp', ctx=Store()), annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_get_processed_line', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='_ProcessedLine', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' buffer='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), conversion=114), Constant(value=' at '), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='search_buffer_control', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=BinOp(left=Name(id='SearchBufferControl', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_search_buffer_control', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_search_buffer_control', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_search_buffer_control', ctx=Load()))]), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='SearchBufferControl', ctx=Load())], keywords=[])])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='SearchBufferControl', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='search_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='search_buffer_control', ctx=Load())), If(test=Compare(left=Name(id='control', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='control', ctx=Load()), attr='buffer', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='Buffer', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='search_state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the `SearchState` for searching this `BufferControl`. This is\n        always associated with the search control. If one search bar is used\n        for searching multiple `BufferControls`, then they share the same\n        `SearchState`.\n        ')), Assign(targets=[Name(id='search_buffer_control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='search_buffer_control', ctx=Load())), If(test=Name(id='search_buffer_control', ctx=Load()), body=[Return(value=Attribute(value=Name(id='search_buffer_control', ctx=Load()), attr='searcher_search_state', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='SearchState', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='SearchState', ctx=Load())), FunctionDef(name='is_focusable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focusable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        This should return the preferred width.\n\n        Note: We don't specify a preferred width according to the content,\n              because it would be too expensive. Calculating the preferred\n              width can be done by calculating the longest line, but this would\n              require applying all the processors to each line. This is\n              unfeasible for a larger document, and doing it for small\n              documents only would result in inconsistent behaviour.\n        ")), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_content', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[keyword(arg='height', value=Constant(value=1))])), If(test=UnaryOp(op=Not(), operand=Name(id='wrap_lines', ctx=Load())), body=[Return(value=Attribute(value=Name(id='content', ctx=Load()), attr='line_count', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='content', ctx=Load()), attr='line_count', ctx=Load()), ops=[GtE()], comparators=[Name(id='max_available_height', ctx=Load())]), body=[Return(value=Name(id='max_available_height', ctx=Load()))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='content', ctx=Load()), attr='line_count', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='height', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='get_height_for_line', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='width', ctx=Load()), Name(id='get_line_prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[GtE()], comparators=[Name(id='max_available_height', ctx=Load())]), body=[Return(value=Name(id='max_available_height', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='height', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='_get_formatted_text_for_line_func', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a function that returns the fragments for a given line.\n        ')), FunctionDef(name='get_formatted_text_for_line', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Load()), attr='lex_document', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[])], ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fragment_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='get_formatted_text_for_line', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_create_get_processed_line_func', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a function that takes a line number of the current document and\n        returns a _ProcessedLine(processed_fragments, source_to_display, display_to_source)\n        tuple.\n        ')), Assign(targets=[Name(id='input_processors', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Load()), List(elts=[], ctx=Load())])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='include_default_input_processors', ctx=Load()), body=[Assign(targets=[Name(id='input_processors', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='default_input_processors', ctx=Load()), op=Add(), right=Name(id='input_processors', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='merged_processor', ctx=Store())], value=Call(func=Name(id='merge_processors', ctx=Load()), args=[Name(id='input_processors', ctx=Load())], keywords=[])), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='fragments', annotation=Name(id='StyleAndTextTuples', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Transform the fragments for a given line number.')), FunctionDef(name='source_to_display', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="X position from the buffer to the x position in the\n                processed fragment list. By default, we start from the 'identity'\n                operation.")), Return(value=Name(id='i', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='transformation', ctx=Store())], value=Call(func=Attribute(value=Name(id='merged_processor', ctx=Load()), attr='apply_transformation', ctx=Load()), args=[Call(func=Name(id='TransformationInput', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='document', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='source_to_display', ctx=Load()), Name(id='fragments', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='_ProcessedLine', ctx=Load()), args=[Attribute(value=Name(id='transformation', ctx=Load()), attr='fragments', ctx=Load()), Attribute(value=Name(id='transformation', ctx=Load()), attr='source_to_display', ctx=Load()), Attribute(value=Name(id='transformation', ctx=Load()), attr='display_to_source', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='_ProcessedLine', ctx=Load())), FunctionDef(name='create_func', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='get_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_formatted_text_for_line_func', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='cache', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='_ProcessedLine', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='get_processed_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='processed_line', ctx=Store())], value=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='i', ctx=Load()), Call(func=Name(id='get_line', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='processed_line', ctx=Load())), Return(value=Name(id='processed_line', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='_ProcessedLine', ctx=Load())), Return(value=Name(id='get_processed_line', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='_ProcessedLine', ctx=Load())], ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='create_func', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='_ProcessedLine', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load())), arg(arg='preview_search', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Create a UIContent.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='load_history_if_not_yet_loaded', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='search_control', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='search_buffer_control', ctx=Load())), Assign(targets=[Name(id='preview_now', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='preview_search', ctx=Load()), Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='preview_search', ctx=Load()), args=[], keywords=[]), Name(id='search_control', ctx=Load()), Attribute(value=Attribute(value=Name(id='search_control', ctx=Load()), attr='buffer', ctx=Load()), attr='text', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='search_target_buffer_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())])])], keywords=[])])), If(test=BoolOp(op=And(), values=[Name(id='preview_now', ctx=Load()), Compare(left=Name(id='search_control', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='ss', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='search_state', ctx=Load())), Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='document_for_search', ctx=Load()), args=[Call(func=Name(id='SearchState', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Attribute(value=Attribute(value=Name(id='search_control', ctx=Load()), attr='buffer', ctx=Load()), attr='text', ctx=Load())), keyword(arg='direction', value=Attribute(value=Name(id='ss', ctx=Load()), attr='direction', ctx=Load())), keyword(arg='ignore_case', value=Attribute(value=Name(id='ss', ctx=Load()), attr='ignore_case', ctx=Load()))])], keywords=[]))], orelse=[Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()))]), Assign(targets=[Name(id='get_processed_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_get_processed_line_func', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_get_processed_line', ctx=Store())], value=Name(id='get_processed_line', ctx=Load())), FunctionDef(name='translate_rowcol', args=arguments(posonlyargs=[], args=[arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='col', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the content column for this coordinate.')), Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Call(func=Attribute(value=Call(func=Name(id='get_processed_line', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), attr='source_to_display', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[])), keyword(arg='y', value=Name(id='row', ctx=Load()))]))], decorator_list=[], returns=Name(id='Point', ctx=Load())), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the fragments for a given line number.')), Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_processed_line', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), attr='fragments', ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=BinOp(left=Name(id='fragments', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Constant(value=' ')], ctx=Load())], ctx=Load()))), Return(value=Name(id='fragments', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='line_count', value=Attribute(value=Name(id='document', ctx=Load()), attr='line_count', ctx=Load())), keyword(arg='cursor_position', value=Call(func=Name(id='translate_rowcol', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_row', ctx=Load()), Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_col', ctx=Load())], keywords=[]))])), If(test=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())]), body=[Assign(targets=[Name(id='menu_position', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='menu_position', ctx=Load()), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='menu_position', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), If(test=Compare(left=Name(id='menu_position', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='menu_position', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='menu_row', ctx=Store()), Name(id='menu_col', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='menu_position', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='content', ctx=Load()), attr='menu_position', ctx=Store())], value=Call(func=Name(id='translate_rowcol', ctx=Load()), args=[Name(id='menu_row', ctx=Load()), Name(id='menu_col', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='buffer', ctx=Load()), attr='complete_state', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='menu_row', ctx=Store()), Name(id='menu_col', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='complete_state', ctx=Load()), attr='original_document', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='content', ctx=Load()), attr='menu_position', ctx=Store())], value=Call(func=Name(id='translate_rowcol', ctx=Load()), args=[Name(id='menu_row', ctx=Load()), Name(id='menu_col', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='content', ctx=Load()), attr='menu_position', ctx=Store())], value=Constant(value=None))])])], orelse=[]), Return(value=Name(id='content', ctx=Load()))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Mouse handler for this control.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())), Assign(targets=[Name(id='position', ctx=Store())], value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_last_get_processed_line', ctx=Load()), body=[Assign(targets=[Name(id='processed_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_last_get_processed_line', ctx=Load()), args=[Attribute(value=Name(id='position', ctx=Load()), attr='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='xpos', ctx=Store())], value=Call(func=Attribute(value=Name(id='processed_line', ctx=Load()), attr='display_to_source', ctx=Load()), args=[Attribute(value=Name(id='position', ctx=Load()), attr='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Attribute(value=Name(id='position', ctx=Load()), attr='y', ctx=Load()), Name(id='xpos', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_DOWN', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='exit_selection', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store())], value=Name(id='index', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_MOVE', ctx=Load())]), Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='button', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='MouseButton', ctx=Load()), attr='NONE', ctx=Load())])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='buffer', ctx=Load()), attr='selection_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Name(id='index', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='start_selection', ctx=Load()), args=[], keywords=[keyword(arg='selection_type', value=Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store())], value=Name(id='index', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Name(id='index', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[If(test=Compare(left=Attribute(value=Name(id='buffer', ctx=Load()), attr='selection_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='start_selection', ctx=Load()), args=[], keywords=[keyword(arg='selection_type', value=Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store())], value=Name(id='index', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='double_click', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_click_timestamp', ctx=Load()), Compare(left=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_last_click_timestamp', ctx=Load())), ops=[Lt()], comparators=[Constant(value=0.3)])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_click_timestamp', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), If(test=Name(id='double_click', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='find_boundaries_of_current_word', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Name(id='start', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='start_selection', ctx=Load()), args=[], keywords=[keyword(arg='selection_type', value=Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load()))])), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='start', ctx=Load())))], orelse=[])], orelse=[Return(value=Name(id='NotImplemented', ctx=Load()))])])])], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='focus_on_click', ctx=Load()), args=[], keywords=[]), Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[Return(value=Name(id='NotImplemented', ctx=Load()))])]), Return(value=Constant(value=None))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), FunctionDef(name='move_cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='b', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='b', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_down_position', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='b', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='b', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_up_position', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        When additional key bindings are given. Return these.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_invalidate_events', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the Window invalidate events.\n        ')), Expr(value=Yield(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='on_text_changed', ctx=Load()))), Expr(value=Yield(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='on_cursor_position_changed', ctx=Load()))), Expr(value=Yield(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='on_completions_changed', ctx=Load()))), Expr(value=Yield(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='on_suggestion_set', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='SearchBufferControl', bases=[Name(id='BufferControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    :class:`.BufferControl` which is used for searching another\n    :class:`.BufferControl`.\n\n    :param ignore_case: Search case insensitive.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer', annotation=BinOp(left=Name(id='Buffer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='focus_on_click', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='ignore_case', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='buffer', value=Name(id='buffer', ctx=Load())), keyword(arg='input_processors', value=Name(id='input_processors', ctx=Load())), keyword(arg='lexer', value=Name(id='lexer', ctx=Load())), keyword(arg='focus_on_click', value=Name(id='focus_on_click', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='searcher_search_state', ctx=Store())], value=Call(func=Name(id='SearchState', ctx=Load()), args=[], keywords=[keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load()))]))], decorator_list=[])], decorator_list=[])], type_ignores=[])