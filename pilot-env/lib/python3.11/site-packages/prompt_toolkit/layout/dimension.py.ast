Module(body=[Expr(value=Constant(value='\nLayout dimensions are used to give the minimum, maximum and preferred\ndimensions for containers and controls.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Union')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Dimension'), Constant(value='D'), Constant(value='sum_layout_dimensions'), Constant(value='max_layout_dimensions'), Constant(value='AnyDimension'), Constant(value='to_dimension'), Constant(value='is_dimension')], ctx=Load())), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='TypeGuard')], level=0)], orelse=[]), ClassDef(name='Dimension', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Specified dimension (width/height) of a user control or window.\n\n    The layout engine tries to honor the preferred size. If that is not\n    possible, because the terminal is larger or smaller, it tries to keep in\n    between min and max.\n\n    :param min: Minimum size.\n    :param max: Maximum size.\n    :param weight: For a VSplit/HSplit, the actual size will be determined\n                   by taking the proportion of weights from all the children.\n                   E.g. When there are two children, one with a weight of 1,\n                   and the other with a weight of 2, the second will always be\n                   twice as big as the first, if the min/max values allow it.\n    :param preferred: Preferred size.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='min', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='max', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='weight', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='preferred', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='weight', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Compare(left=Name(id='weight', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]))], orelse=[]), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='min', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='max', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='preferred', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='preferred', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_specified', ctx=Store())], value=Compare(left=Name(id='min', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_specified', ctx=Store())], value=Compare(left=Name(id='max', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_specified', ctx=Store())], value=Compare(left=Name(id='preferred', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight_specified', ctx=Store())], value=Compare(left=Name(id='weight', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Name(id='min', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='min', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='max', ctx=Store())], value=BinOp(left=Constant(value=1000), op=Pow(), right=Constant(value=10)))], orelse=[]), If(test=Compare(left=Name(id='preferred', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='preferred', ctx=Store())], value=Name(id='min', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='weight', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=Constant(value=1))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Store())], value=Name(id='min', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Store())], value=Name(id='max', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Store())], value=Name(id='preferred', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Store())], value=Name(id='weight', ctx=Load())), If(test=Compare(left=Name(id='max', ctx=Load()), ops=[Lt()], comparators=[Name(id='min', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid Dimension: max < min.')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='exact', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='amount', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a :class:`.Dimension` with an exact size. (min, max and\n        preferred set to ``amount``).\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='amount', ctx=Load())), keyword(arg='max', value=Name(id='amount', ctx=Load())), keyword(arg='preferred', value=Name(id='amount', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='zero', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Create a dimension that represents a zero size. (Used for 'invisible'\n        controls.)\n        ")), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='exact', ctx=Load()), args=[], keywords=[keyword(arg='amount', value=Constant(value=0))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='is_zero', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if this `Dimension` represents a zero size.')), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='min_specified', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='min=%r'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='max_specified', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='max=%r'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='preferred_specified', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='preferred=%r'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='preferred', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='weight_specified', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='weight=%r'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='weight', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value='Dimension(%s)'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='sum_layout_dimensions', args=arguments(posonlyargs=[], args=[arg(arg='dimensions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Dimension', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Sum a list of :class:`.Dimension` instances.\n    ')), Assign(targets=[Name(id='min', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='min', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='max', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='max', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='preferred', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='preferred', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min', ctx=Load())), keyword(arg='max', value=Name(id='max', ctx=Load())), keyword(arg='preferred', value=Name(id='preferred', ctx=Load()))]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='max_layout_dimensions', args=arguments(posonlyargs=[], args=[arg(arg='dimensions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Dimension', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Take the maximum of a list of :class:`.Dimension` instances.\n    Used when we have a HSplit/VSplit, and we want to get the best width/height.)\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='Dimension', ctx=Load()), attr='zero', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='is_zero', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Subscript(value=Name(id='dimensions', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Name(id='d', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='is_zero', ctx=Load()), args=[], keywords=[]))], is_async=0)])), If(test=Name(id='dimensions', ctx=Load()), body=[Assign(targets=[Name(id='min_', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='min', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='max_', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='max', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='max_', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='preferred', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='min_', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_', ctx=Load())]), body=[Assign(targets=[Name(id='max_', ctx=Store())], value=Name(id='min_', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='preferred', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='preferred', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='preferred', value=Name(id='preferred', ctx=Load()))]))], orelse=[Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), Assign(targets=[Name(id='AnyDimension', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='int', ctx=Load()), Name(id='Dimension', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_dimension', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='AnyDimension', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Turn the given object into a `Dimension` object.\n    ')), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='Dimension', ctx=Load()), attr='exact', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Dimension', ctx=Load())], keywords=[]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Call(func=Name(id='value', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Not an integer or Dimension object.')], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='is_dimension', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Test whether the given value could be a valid dimension.\n    (For usage in an assertion. It's not guaranteed in case of a callable.)\n    ")), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Dimension', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Subscript(value=Name(id='TypeGuard', ctx=Load()), slice=Name(id='AnyDimension', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='D', ctx=Store())], value=Name(id='Dimension', ctx=Load())), Assign(targets=[Name(id='LayoutDimension', ctx=Store())], value=Name(id='Dimension', ctx=Load()))], type_ignores=[])