Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='FastDictCache')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Point')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='containers', names=[alias(name='Window')], level=1)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Screen'), Constant(value='Char')], ctx=Load())), ClassDef(name='Char', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Represent a single character in a :class:`.Screen`.\n\n    This should be considered immutable.\n\n    :param char: A single character (can be a double-width character).\n    :param style: A style string. (Can contain classnames.)\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='char'), Constant(value='style'), Constant(value='width')], ctx=Load())), AnnAssign(target=Name(id='display_mappings', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='\x00'), Constant(value='\x01'), Constant(value='\x02'), Constant(value='\x03'), Constant(value='\x04'), Constant(value='\x05'), Constant(value='\x06'), Constant(value='\x07'), Constant(value='\x08'), Constant(value='\t'), Constant(value='\n'), Constant(value='\x0b'), Constant(value='\x0c'), Constant(value='\r'), Constant(value='\x0e'), Constant(value='\x0f'), Constant(value='\x10'), Constant(value='\x11'), Constant(value='\x12'), Constant(value='\x13'), Constant(value='\x14'), Constant(value='\x15'), Constant(value='\x16'), Constant(value='\x17'), Constant(value='\x18'), Constant(value='\x19'), Constant(value='\x1a'), Constant(value='\x1b'), Constant(value='\x1c'), Constant(value='\x1d'), Constant(value='\x1e'), Constant(value='\x1f'), Constant(value='\x7f'), Constant(value='\x80'), Constant(value='\x81'), Constant(value='\x82'), Constant(value='\x83'), Constant(value='\x84'), Constant(value='\x85'), Constant(value='\x86'), Constant(value='\x87'), Constant(value='\x88'), Constant(value='\x89'), Constant(value='\x8a'), Constant(value='\x8b'), Constant(value='\x8c'), Constant(value='\x8d'), Constant(value='\x8e'), Constant(value='\x8f'), Constant(value='\x90'), Constant(value='\x91'), Constant(value='\x92'), Constant(value='\x93'), Constant(value='\x94'), Constant(value='\x95'), Constant(value='\x96'), Constant(value='\x97'), Constant(value='\x98'), Constant(value='\x99'), Constant(value='\x9a'), Constant(value='\x9b'), Constant(value='\x9c'), Constant(value='\x9d'), Constant(value='\x9e'), Constant(value='\x9f'), Constant(value='\xa0')], values=[Constant(value='^@'), Constant(value='^A'), Constant(value='^B'), Constant(value='^C'), Constant(value='^D'), Constant(value='^E'), Constant(value='^F'), Constant(value='^G'), Constant(value='^H'), Constant(value='^I'), Constant(value='^J'), Constant(value='^K'), Constant(value='^L'), Constant(value='^M'), Constant(value='^N'), Constant(value='^O'), Constant(value='^P'), Constant(value='^Q'), Constant(value='^R'), Constant(value='^S'), Constant(value='^T'), Constant(value='^U'), Constant(value='^V'), Constant(value='^W'), Constant(value='^X'), Constant(value='^Y'), Constant(value='^Z'), Constant(value='^['), Constant(value='^\\'), Constant(value='^]'), Constant(value='^^'), Constant(value='^_'), Constant(value='^?'), Constant(value='<80>'), Constant(value='<81>'), Constant(value='<82>'), Constant(value='<83>'), Constant(value='<84>'), Constant(value='<85>'), Constant(value='<86>'), Constant(value='<87>'), Constant(value='<88>'), Constant(value='<89>'), Constant(value='<8a>'), Constant(value='<8b>'), Constant(value='<8c>'), Constant(value='<8d>'), Constant(value='<8e>'), Constant(value='<8f>'), Constant(value='<90>'), Constant(value='<91>'), Constant(value='<92>'), Constant(value='<93>'), Constant(value='<94>'), Constant(value='<95>'), Constant(value='<96>'), Constant(value='<97>'), Constant(value='<98>'), Constant(value='<99>'), Constant(value='<9a>'), Constant(value='<9b>'), Constant(value='<9c>'), Constant(value='<9d>'), Constant(value='<9e>'), Constant(value='<9f>'), Constant(value=' ')]), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='char', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' '), Constant(value='')]), body=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='display_mappings', ctx=Load())]), body=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\xa0')]), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value=' class:nbsp '))], orelse=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value=' class:control-character '))]), Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='display_mappings', ctx=Load()), slice=Name(id='char', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Store())], value=Name(id='char', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_equal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Char', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='char', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='style', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_not_equal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Char', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='char', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='style', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='TYPE_CHECKING', ctx=Load())), body=[Assign(targets=[Name(id='__eq__', ctx=Store())], value=Name(id='_equal', ctx=Load())), Assign(targets=[Name(id='__ne__', ctx=Store())], value=Name(id='_not_equal', ctx=Load()))], orelse=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='_CHAR_CACHE', ctx=Store()), annotation=Subscript(value=Name(id='FastDictCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='Char', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='FastDictCache', ctx=Load()), args=[Name(id='Char', ctx=Load())], keywords=[keyword(arg='size', value=BinOp(left=Constant(value=1000), op=Mult(), right=Constant(value=1000)))]), simple=1), Assign(targets=[Name(id='Transparent', ctx=Store())], value=Constant(value='[transparent]')), ClassDef(name='Screen', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Two dimensional buffer of :class:`.Char` instances.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default_char', annotation=BinOp(left=Name(id='Char', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='initial_width', annotation=Name(id='int', ctx=Load())), arg(arg='initial_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=0)]), body=[If(test=Compare(left=Name(id='default_char', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='default_char2', ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Constant(value=' '), Name(id='Transparent', ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='default_char2', ctx=Store())], value=Name(id='default_char', ctx=Load()))]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='data_buffer', ctx=Store()), annotation=Subscript(value=Name(id='defaultdict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='defaultdict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Char', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='defaultdict', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='default_char2', ctx=Load()))], keywords=[]))], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='zero_width_escapes', ctx=Store()), annotation=Subscript(value=Name(id='defaultdict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='defaultdict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='defaultdict', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=''))], keywords=[]))], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_positions', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Window', ctx=Load()), Name(id='Point', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_cursor', ctx=Store())], value=Constant(value=True)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='menu_positions', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Window', ctx=Load()), Name(id='Point', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='initial_width', ctx=Load()), Constant(value=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='initial_height', ctx=Load()), Constant(value=0)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='visible_windows_to_write_positions', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Window', ctx=Load()), Name(id='WritePosition', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float_functions', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='visible_windows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='visible_windows_to_write_positions', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Window', ctx=Load()), ctx=Load())), FunctionDef(name='set_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='Window', ctx=Load())), arg(arg='position', annotation=Name(id='Point', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set the cursor position for a given window.\n        ')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_positions', ctx=Load()), slice=Name(id='window', ctx=Load()), ctx=Store())], value=Name(id='position', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_menu_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='Window', ctx=Load())), arg(arg='position', annotation=Name(id='Point', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set the cursor position for a given window.\n        ')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='menu_positions', ctx=Load()), slice=Name(id='window', ctx=Load()), ctx=Store())], value=Name(id='position', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='Window', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the cursor position for a given window.\n        Returns a `Point`.\n        ')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_positions', ctx=Load()), slice=Name(id='window', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Point', ctx=Load())), FunctionDef(name='get_menu_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='Window', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the menu position for a given window.\n        (This falls back to the cursor position if no menu position was set.)\n        ')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='menu_positions', ctx=Load()), slice=Name(id='window', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_positions', ctx=Load()), slice=Name(id='window', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Point', ctx=Load())), FunctionDef(name='draw_with_z_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='z_index', annotation=Name(id='int', ctx=Load())), arg(arg='draw_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add a draw-function for a `Window` which has a >= 0 z_index.\n        This will be postponed until `draw_all_floats` is called.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float_functions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='z_index', ctx=Load()), Name(id='draw_func', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='draw_all_floats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Draw all float functions in order of z-index.\n        ')), While(test=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float_functions', ctx=Load()), body=[Assign(targets=[Name(id='functions', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float_functions', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load())))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float_functions', ctx=Store())], value=Subscript(value=Name(id='functions', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Expr(value=Call(func=Subscript(value=Subscript(value=Name(id='functions', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_style_to_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For all the characters in the screen.\n        Set the style string to the given `style_str`.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='data_buffer', ctx=Load())), Assign(targets=[Name(id='char_cache', ctx=Store())], value=Name(id='_CHAR_CACHE', ctx=Load())), Assign(targets=[Name(id='append_style', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Name(id='style_str', ctx=Load()))), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='row', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id='x', ctx=Store()), Name(id='char', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='char_cache', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='char', ctx=Load()), attr='char', ctx=Load()), BinOp(left=Attribute(value=Name(id='char', ctx=Load()), attr='style', ctx=Load()), op=Add(), right=Name(id='append_style', ctx=Load()))], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fill_area', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='after', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Fill the content of this area, using the given `style`.\n        The style is prepended before whatever was here before.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='xmin', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load())), Assign(targets=[Name(id='xmax', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()))), Assign(targets=[Name(id='char_cache', ctx=Store())], value=Name(id='_CHAR_CACHE', ctx=Load())), Assign(targets=[Name(id='data_buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='data_buffer', ctx=Load())), If(test=Name(id='after', ctx=Load()), body=[Assign(targets=[Name(id='append_style', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Name(id='style', ctx=Load()))), Assign(targets=[Name(id='prepend_style', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='append_style', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='prepend_style', ctx=Store())], value=BinOp(left=Name(id='style', ctx=Load()), op=Add(), right=Constant(value=' ')))]), For(target=Name(id='y', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='data_buffer', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='xmin', ctx=Load()), Name(id='xmax', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cell', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='char_cache', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='cell', ctx=Load()), attr='char', ctx=Load()), BinOp(left=BinOp(left=Name(id='prepend_style', ctx=Load()), op=Add(), right=Attribute(value=Name(id='cell', ctx=Load()), attr='style', ctx=Load())), op=Add(), right=Name(id='append_style', ctx=Load()))], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='WritePosition', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='xpos', annotation=Name(id='int', ctx=Load())), arg(arg='ypos', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='height', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), Assert(test=Compare(left=Name(id='width', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='xpos', ctx=Store())], value=Name(id='xpos', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ypos', ctx=Store())], value=Name(id='ypos', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(x={!r}, y={!r}, width={!r}, height={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='xpos', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ypos', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])