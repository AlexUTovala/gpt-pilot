Module(body=[Expr(value=Constant(value='\nProcessors are little transformation blocks that transform the fragments list\nfrom a buffer before the BufferControl will render it to the screen.\n\nThey can insert fragments before or after, or highlight fragments by replacing the\nfragment types.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Hashable'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='SimpleCache')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter'), alias(name='vi_insert_multiple_mode')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='fragment_list_len'), alias(name='fragment_list_to_text')], level=0), ImportFrom(module='prompt_toolkit.search', names=[alias(name='SearchDirection')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='to_int'), alias(name='to_str')], level=0), ImportFrom(module='utils', names=[alias(name='explode_text_fragments')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='controls', names=[alias(name='BufferControl'), alias(name='UIContent')], level=1)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Processor'), Constant(value='TransformationInput'), Constant(value='Transformation'), Constant(value='DummyProcessor'), Constant(value='HighlightSearchProcessor'), Constant(value='HighlightIncrementalSearchProcessor'), Constant(value='HighlightSelectionProcessor'), Constant(value='PasswordProcessor'), Constant(value='HighlightMatchingBracketProcessor'), Constant(value='DisplayMultipleCursors'), Constant(value='BeforeInput'), Constant(value='ShowArg'), Constant(value='AfterInput'), Constant(value='AppendAutoSuggestion'), Constant(value='ConditionalProcessor'), Constant(value='ShowLeadingWhiteSpaceProcessor'), Constant(value='ShowTrailingWhiteSpaceProcessor'), Constant(value='TabsProcessor'), Constant(value='ReverseSearchProcessor'), Constant(value='DynamicProcessor'), Constant(value='merge_processors')], ctx=Load())), ClassDef(name='Processor', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Manipulate the fragments for a given line in a\n    :class:`~prompt_toolkit.layout.controls.BufferControl`.\n    ')), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Apply transformation. Returns a :class:`.Transformation` instance.\n\n        :param transformation_input: :class:`.TransformationInput` object.\n        ')), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Attribute(value=Name(id='transformation_input', ctx=Load()), attr='fragments', ctx=Load())], keywords=[]))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='SourceToDisplay', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='DisplayToSource', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='TransformationInput', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    :param buffer_control: :class:`.BufferControl` instance.\n    :param lineno: The number of the line to which we apply the processor.\n    :param source_to_display: A function that returns the position in the\n        `fragments` for any position in the source string. (This takes\n        previous processors into account.)\n    :param fragments: List of fragments that we can transform. (Received from the\n        previous processor.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer_control', annotation=Name(id='BufferControl', ctx=Load())), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='source_to_display', annotation=Name(id='SourceToDisplay', ctx=Load())), arg(arg='fragments', annotation=Name(id='StyleAndTextTuples', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer_control', ctx=Store())], value=Name(id='buffer_control', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Name(id='document', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Store())], value=Name(id='lineno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_to_display', ctx=Store())], value=Name(id='source_to_display', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fragments', ctx=Store())], value=Name(id='fragments', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unpack', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer_control', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='source_to_display', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='fragments', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='BufferControl', ctx=Load()), Name(id='Document', ctx=Load()), Name(id='int', ctx=Load()), Name(id='SourceToDisplay', ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Transformation', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Transformation result, as returned by :meth:`.Processor.apply_transformation`.\n\n    Important: Always make sure that the length of `document.text` is equal to\n               the length of all the text in `fragments`!\n\n    :param fragments: The transformed fragments. To be displayed, or to pass to\n        the next processor.\n    :param source_to_display: Cursor position transformation from original\n        string to transformed string.\n    :param display_to_source: Cursor position transformed from source string to\n        original string.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fragments', annotation=Name(id='StyleAndTextTuples', ctx=Load())), arg(arg='source_to_display', annotation=BinOp(left=Name(id='SourceToDisplay', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='display_to_source', annotation=BinOp(left=Name(id='DisplayToSource', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fragments', ctx=Store())], value=Name(id='fragments', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_to_display', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='source_to_display', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='i', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='display_to_source', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='display_to_source', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='i', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DummyProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A `Processor` that doesn't do anything.\n    ")), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Attribute(value=Name(id='transformation_input', ctx=Load()), attr='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='HighlightSearchProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Processor that highlights search matches in the document.\n    Note that this doesn't support multiline search matches yet.\n\n    The style classes 'search' and 'search.current' will be applied to the\n    content.\n    ")), Assign(targets=[Name(id='_classname', ctx=Store())], value=Constant(value='search')), Assign(targets=[Name(id='_classname_current', ctx=Store())], value=Constant(value='search.current')), FunctionDef(name='_get_search_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer_control', annotation=Name(id='BufferControl', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The text we are searching for.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='buffer_control', ctx=Load()), attr='search_state', ctx=Load()), attr='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='buffer_control', ctx=Store()), Name(id='document', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='source_to_display', ctx=Store()), Name(id='fragments', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='transformation_input', ctx=Load()), attr='unpack', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='search_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_search_text', ctx=Load()), args=[Name(id='buffer_control', ctx=Load())], keywords=[])), Assign(targets=[Name(id='searchmatch_fragment', ctx=Store())], value=JoinedStr(values=[Constant(value=' class:'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classname', ctx=Load()), conversion=-1), Constant(value=' ')])), Assign(targets=[Name(id='searchmatch_current_fragment', ctx=Store())], value=JoinedStr(values=[Constant(value=' class:'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_classname_current', ctx=Load()), conversion=-1), Constant(value=' ')])), If(test=BoolOp(op=And(), values=[Name(id='search_text', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='is_done', ctx=Load()))]), body=[Assign(targets=[Name(id='line_text', ctx=Store())], value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='buffer_control', ctx=Load()), attr='search_state', ctx=Load()), attr='ignore_case', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()))], orelse=[Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='RegexFlag', ctx=Load()), args=[Constant(value=0)], keywords=[]))]), AnnAssign(target=Name(id='cursor_column', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Compare(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_row', ctx=Load()), ops=[Eq()], comparators=[Name(id='lineno', ctx=Load())]), body=[Assign(targets=[Name(id='cursor_column', ctx=Store())], value=Call(func=Name(id='source_to_display', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_col', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='cursor_column', ctx=Store())], value=Constant(value=None))]), For(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='search_text', ctx=Load())], keywords=[]), Name(id='line_text', ctx=Load())], keywords=[keyword(arg='flags', value=Name(id='flags', ctx=Load()))]), body=[If(test=Compare(left=Name(id='cursor_column', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='on_cursor', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), ops=[LtE(), Lt()], comparators=[Name(id='cursor_column', ctx=Load()), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])]))], orelse=[Assign(targets=[Name(id='on_cursor', ctx=Store())], value=Constant(value=False))]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='old_fragment', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Name(id='on_cursor', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[BinOp(left=Name(id='old_fragment', ctx=Load()), op=Add(), right=Name(id='searchmatch_current_fragment', ctx=Load())), Subscript(value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[BinOp(left=Name(id='old_fragment', ctx=Load()), op=Add(), right=Name(id='searchmatch_fragment', ctx=Load())), Subscript(value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))])], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='HighlightIncrementalSearchProcessor', bases=[Name(id='HighlightSearchProcessor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Highlight the search terms that are used for highlighting the incremental\n    search. The style class 'incsearch' will be applied to the content.\n\n    Important: this requires the `preview_search=True` flag to be set for the\n    `BufferControl`. Otherwise, the cursor position won't be set to the search\n    match while searching, and nothing happens.\n    ")), Assign(targets=[Name(id='_classname', ctx=Store())], value=Constant(value='incsearch')), Assign(targets=[Name(id='_classname_current', ctx=Store())], value=Constant(value='incsearch.current')), FunctionDef(name='_get_search_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer_control', annotation=Name(id='BufferControl', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The text we are searching for.\n        ')), Assign(targets=[Name(id='search_buffer', ctx=Store())], value=Attribute(value=Name(id='buffer_control', ctx=Load()), attr='search_buffer', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='search_buffer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='search_buffer', ctx=Load()), attr='text', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='search_buffer', ctx=Load()), attr='text', ctx=Load()))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='HighlightSelectionProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Processor that highlights the selection in the document.\n    ')), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='buffer_control', ctx=Store()), Name(id='document', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='source_to_display', ctx=Store()), Name(id='fragments', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='transformation_input', ctx=Load()), attr='unpack', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='selected_fragment', ctx=Store())], value=Constant(value=' class:selected ')), Assign(targets=[Name(id='selection_at_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='selection_range_at_line', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), If(test=Name(id='selection_at_line', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Name(id='selection_at_line', ctx=Load())), Assign(targets=[Name(id='from_', ctx=Store())], value=Call(func=Name(id='source_to_display', ctx=Load()), args=[Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to', ctx=Store())], value=Call(func=Name(id='source_to_display', ctx=Load()), args=[Name(id='to', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='from_', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='to', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='selected_fragment', ctx=Load()), Constant(value=' ')], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='from_', ctx=Load()), Name(id='to', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])]), body=[Assign(targets=[Tuple(elts=[Name(id='old_fragment', ctx=Store()), Name(id='old_text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[BinOp(left=Name(id='old_fragment', ctx=Load()), op=Add(), right=Name(id='selected_fragment', ctx=Load())), Name(id='old_text', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='selected_fragment', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='PasswordProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Processor that masks the input. (For passwords.)\n\n    :param char: (string) Character to be used. "*" by default.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='char', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='*')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Store())], value=Name(id='char', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='fragments', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='StyleAndTextTuples', ctx=Load()), ListComp(elt=Tuple(elts=[Name(id='style', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Starred(value=Name(id='handler', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='style', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='handler', ctx=Store()), ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), simple=1), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='HighlightMatchingBracketProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    When the cursor is on or right after a bracket, it highlights the matching\n    bracket.\n\n    :param max_cursor_distance: Only highlight matching brackets when the\n        cursor is within this distance. (From inside a `Processor`, we can't\n        know which lines will be visible on the screen. But we also don't want\n        to scan the whole document for matching brackets on each key press, so\n        we limit to this value.)\n    ")), Assign(targets=[Name(id='_closing_braces', ctx=Store())], value=Constant(value='])}>')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chars', annotation=Name(id='str', ctx=Load())), arg(arg='max_cursor_distance', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='[](){}<>'), Constant(value=1000)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Store())], value=Name(id='chars', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_cursor_distance', ctx=Store())], value=Name(id='max_cursor_distance', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_positions_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=8))]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_positions_to_highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of (row, col) tuples that need to be highlighted.\n        ')), AnnAssign(target=Name(id='pos', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='document', ctx=Load()), attr='current_char', ctx=Load()), Compare(left=Attribute(value=Name(id='document', ctx=Load()), attr='current_char', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Load())])]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find_matching_bracket_position', ctx=Load()), args=[], keywords=[keyword(arg='start_pos', value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_cursor_distance', ctx=Load()))), keyword(arg='end_pos', value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_cursor_distance', ctx=Load())))]))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='document', ctx=Load()), attr='char_before_cursor', ctx=Load()), Compare(left=Attribute(value=Name(id='document', ctx=Load()), attr='char_before_cursor', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_closing_braces', ctx=Load())]), Compare(left=Attribute(value=Name(id='document', ctx=Load()), attr='char_before_cursor', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Load())])]), body=[Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find_matching_bracket_position', ctx=Load()), args=[], keywords=[keyword(arg='start_pos', value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_cursor_distance', ctx=Load()))), keyword(arg='end_pos', value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_cursor_distance', ctx=Load())))]))], orelse=[Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=None))])]), If(test=Name(id='pos', ctx=Load()), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[])), Return(value=List(elts=[Tuple(elts=[Name(id='row', ctx=Load()), Name(id='col', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_row', ctx=Load()), Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_col', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[Return(value=List(elts=[], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='buffer_control', ctx=Store()), Name(id='document', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='source_to_display', ctx=Store()), Name(id='fragments', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='transformation_input', ctx=Load()), attr='unpack', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='is_done', ctx=Load()), body=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='render_counter', ctx=Load()), Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='positions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_positions_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_positions_to_highlight', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], keywords=[])), If(test=Name(id='positions', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store()), iter=Name(id='positions', ctx=Load()), body=[If(test=Compare(left=Name(id='row', ctx=Load()), ops=[Eq()], comparators=[Name(id='lineno', ctx=Load())]), body=[Assign(targets=[Name(id='col', ctx=Store())], value=Call(func=Name(id='source_to_display', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='style', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='col', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position_col', ctx=Load())]), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value=' class:matching-bracket.cursor '))], orelse=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value=' class:matching-bracket.other '))]), Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='style', ctx=Load()), Name(id='text', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='DisplayMultipleCursors', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    When we're in Vi block insert mode, display all the cursors.\n    ")), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='buffer_control', ctx=Store()), Name(id='document', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='source_to_display', ctx=Store()), Name(id='fragments', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='transformation_input', ctx=Load()), attr='unpack', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='buffer_control', ctx=Load()), attr='buffer', ctx=Load())), If(test=Call(func=Name(id='vi_insert_multiple_mode', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cursor_positions', ctx=Store())], value=Attribute(value=Name(id='buff', ctx=Load()), attr='multiple_cursor_positions', ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='start_pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='end_pos', ctx=Store())], value=BinOp(left=Name(id='start_pos', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='document', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='lineno', ctx=Load()), ctx=Load())], keywords=[]))), Assign(targets=[Name(id='fragment_suffix', ctx=Store())], value=Constant(value=' class:multiple-cursors')), For(target=Name(id='p', ctx=Store()), iter=Name(id='cursor_positions', ctx=Load()), body=[If(test=Compare(left=Name(id='start_pos', ctx=Load()), ops=[LtE(), LtE()], comparators=[Name(id='p', ctx=Load()), Name(id='end_pos', ctx=Load())]), body=[Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Name(id='source_to_display', ctx=Load()), args=[BinOp(left=Name(id='p', ctx=Load()), op=Sub(), right=Name(id='start_pos', ctx=Load()))], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='style', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='fragment_suffix', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))])], orelse=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Name(id='fragment_suffix', ctx=Load())), Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='style', ctx=Load()), Name(id='text', ctx=Load())], ctx=Load()))], finalbody=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='BeforeInput', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Insert text before the input.\n\n    :param text: This can be either plain text or formatted text\n        (or a callable that returns any of those).\n    :param style: style to be applied to this prompt/prefix.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='source_to_display', ctx=Store()), annotation=BinOp(left=Name(id='SourceToDisplay', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='display_to_source', ctx=Store()), annotation=BinOp(left=Name(id='DisplayToSource', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Compare(left=Attribute(value=Name(id='ti', ctx=Load()), attr='lineno', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='fragments_before', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=BinOp(left=Name(id='fragments_before', ctx=Load()), op=Add(), right=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()))), Assign(targets=[Name(id='shift_position', ctx=Store())], value=Call(func=Name(id='fragment_list_len', ctx=Load()), args=[Name(id='fragments_before', ctx=Load())], keywords=[])), Assign(targets=[Name(id='source_to_display', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='shift_position', ctx=Load())))), Assign(targets=[Name(id='display_to_source', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='shift_position', ctx=Load()))))], orelse=[Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())), Assign(targets=[Name(id='source_to_display', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='display_to_source', ctx=Store())], value=Constant(value=None))]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[keyword(arg='source_to_display', value=Name(id='source_to_display', ctx=Load())), keyword(arg='display_to_source', value=Name(id='display_to_source', ctx=Load()))]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='BeforeInput('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ShowArg', bases=[Name(id='BeforeInput', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Display the 'arg' in front of the input.\n\n    This was used by the `PromptSession`, but now it uses the\n    `Window.get_line_prefix` function instead.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_text_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='arg', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Load())), Return(value=List(elts=[Tuple(elts=[Constant(value='class:prompt.arg'), Constant(value='(arg: ')], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.arg.text'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.arg'), Constant(value=') ')], ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='ShowArg()'))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='AfterInput', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Insert text after the input.\n\n    :param text: This can be either plain text or formatted text\n        (or a callable that returns any of those).\n    :param style: style to be applied to this prompt/prefix.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='ti', ctx=Load()), attr='lineno', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Attribute(value=Name(id='ti', ctx=Load()), attr='document', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='fragments_after', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[], keywords=[keyword(arg='fragments', value=BinOp(left=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()), op=Add(), right=Name(id='fragments_after', ctx=Load())))]))], orelse=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[], keywords=[keyword(arg='fragments', value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()))]))])], decorator_list=[], returns=Name(id='Transformation', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=114), Constant(value=', style='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='AppendAutoSuggestion', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Append the auto suggestion to the input.\n    (The user can then press the right arrow the insert the suggestion.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='class:auto-suggestion')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='ti', ctx=Load()), attr='lineno', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Attribute(value=Name(id='ti', ctx=Load()), attr='document', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load()), attr='buffer', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='buffer', ctx=Load()), attr='suggestion', ctx=Load()), Attribute(value=Attribute(value=Name(id='ti', ctx=Load()), attr='document', ctx=Load()), attr='is_cursor_at_the_end', ctx=Load())]), body=[Assign(targets=[Name(id='suggestion', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='suggestion', ctx=Load()), attr='text', ctx=Load()))], orelse=[Assign(targets=[Name(id='suggestion', ctx=Store())], value=Constant(value=''))]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[], keywords=[keyword(arg='fragments', value=BinOp(left=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), Name(id='suggestion', ctx=Load())], ctx=Load())], ctx=Load())))]))], orelse=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[], keywords=[keyword(arg='fragments', value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()))]))])], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='ShowLeadingWhiteSpaceProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Make leading whitespace visible.\n\n    :param get_char: Callable that returns one character.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_char', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='class:leading-whitespace')]), body=[FunctionDef(name='default_get_char', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Constant(value='·'), attr='encode', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load()), attr='encoding', ctx=Load()), args=[], keywords=[]), Constant(value='replace')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'?')]), body=[Return(value=Constant(value='.'))], orelse=[Return(value=Constant(value='·'))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_char', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='get_char', ctx=Load()), Name(id='default_get_char', ctx=Load())]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='fragments', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value=' ')], keywords=[])]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_char', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[Break()])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='ShowTrailingWhiteSpaceProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Make trailing whitespace visible.\n\n    :param get_char: Callable that returns one character.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_char', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='class:training-whitespace')]), body=[FunctionDef(name='default_get_char', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Constant(value='·'), attr='encode', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load()), attr='encoding', ctx=Load()), args=[], keywords=[]), Constant(value='replace')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'?')]), body=[Return(value=Constant(value='.'))], orelse=[Return(value=Constant(value='·'))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_char', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='get_char', ctx=Load()), Name(id='default_get_char', ctx=Load())]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='fragments', ctx=Load()), Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='fragments', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=' ')], keywords=[])]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_char', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Assign(targets=[Subscript(value=Name(id='fragments', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[Break()])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='TabsProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Render tabs as spaces (instead of ^I) or make them visible (for instance,\n    by replacing them with dots.)\n\n    :param tabstop: Horizontal space taken by a tab. (`int` or callable that\n        returns an `int`).\n    :param char1: Character or callable that returns a character (text of\n        length one). This one is used for the first space taken by the tab.\n    :param char2: Like `char1`, but for the rest of the space.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tabstop', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='char1', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='char2', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=4), Constant(value='|'), Constant(value='┈'), Constant(value='class:tab')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char1', ctx=Store())], value=Name(id='char1', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char2', ctx=Store())], value=Name(id='char2', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tabstop', ctx=Store())], value=Name(id='tabstop', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tabstop', ctx=Store())], value=Call(func=Name(id='to_int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tabstop', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), Assign(targets=[Name(id='separator1', ctx=Store())], value=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='char1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='separator2', ctx=Store())], value=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='char2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='position_mappings', ctx=Store())], value=Dict(keys=[], values=[])), AnnAssign(target=Name(id='result_fragments', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='fragment_and_text', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='position_mappings', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='pos', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='fragment_and_text', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\t')]), body=[Assign(targets=[Name(id='count', ctx=Store())], value=BinOp(left=Name(id='tabstop', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='pos', ctx=Load()), op=Mod(), right=Name(id='tabstop', ctx=Load())))), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='count', ctx=Store())], value=Name(id='tabstop', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result_fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Name(id='separator1', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result_fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), BinOp(left=Name(id='separator2', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=1)))], ctx=Load())], keywords=[])), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Name(id='count', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result_fragments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fragment_and_text', ctx=Load())], keywords=[])), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='position_mappings', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='pos', ctx=Load())), Assign(targets=[Subscript(value=Name(id='position_mappings', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1))), FunctionDef(name='source_to_display', args=arguments(posonlyargs=[], args=[arg(arg='from_position', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Maps original cursor position to the new one.')), Return(value=Subscript(value=Name(id='position_mappings', ctx=Load()), slice=Name(id='from_position', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='display_to_source', args=arguments(posonlyargs=[], args=[arg(arg='display_pos', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Maps display cursor position to the original one.')), Assign(targets=[Name(id='position_mappings_reversed', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='position_mappings', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), While(test=Compare(left=Name(id='display_pos', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Try(body=[Return(value=Subscript(value=Name(id='position_mappings_reversed', ctx=Load()), slice=Name(id='display_pos', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[AugAssign(target=Name(id='display_pos', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load())), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='result_fragments', ctx=Load())], keywords=[keyword(arg='source_to_display', value=Name(id='source_to_display', ctx=Load())), keyword(arg='display_to_source', value=Name(id='display_to_source', ctx=Load()))]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='ReverseSearchProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Process to display the "(reverse-i-search)`...`:..." stuff around\n    the search buffer.\n\n    Note: This processor is meant to be applied to the BufferControl that\n    contains the search buffer, it\'s not meant for the original input.\n    ')), AnnAssign(target=Name(id='_excluded_input_processors', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Name(id='HighlightSearchProcessor', ctx=Load()), Name(id='HighlightSelectionProcessor', ctx=Load()), Name(id='BeforeInput', ctx=Load()), Name(id='AfterInput', ctx=Load())], ctx=Load()), simple=1), FunctionDef(name='_get_main_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer_control', annotation=Name(id='BufferControl', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl')], level=0), Assign(targets=[Name(id='prev_control', ctx=Store())], value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='search_target_buffer_control', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='prev_control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='prev_control', ctx=Load()), attr='search_buffer_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='buffer_control', ctx=Load())])]), body=[Return(value=Name(id='prev_control', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='BufferControl', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='main_control', annotation=Name(id='BufferControl', ctx=Load())), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl')], level=0), Assign(targets=[Name(id='excluded_processors', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_input_processors', ctx=Load())], keywords=[])), FunctionDef(name='filter_processor', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Name(id='Processor', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Filter processors from the main control that we want to disable\n            here. This returns either an accepted processor or None.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='_MergedProcessor', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='accepted_processors', ctx=Store())], value=ListComp(elt=Call(func=Name(id='filter_processor', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='item', ctx=Load()), attr='processors', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='merge_processors', ctx=Load()), args=[ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='accepted_processors', ctx=Load()), ifs=[Compare(left=Name(id='p', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='ConditionalProcessor', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='filter_processor', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='processor', ctx=Load())], keywords=[])), If(test=Name(id='p', ctx=Load()), body=[Return(value=Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[Name(id='p', ctx=Load()), Attribute(value=Name(id='item', ctx=Load()), attr='filter', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='excluded_processors', ctx=Load())], keywords=[])), body=[Return(value=Name(id='item', ctx=Load()))], orelse=[])])]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='Processor', ctx=Load()), op=BitOr(), right=Constant(value=None))), Assign(targets=[Name(id='filtered_processor', ctx=Store())], value=Call(func=Name(id='filter_processor', ctx=Load()), args=[Call(func=Name(id='merge_processors', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='main_control', ctx=Load()), attr='input_processors', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])], keywords=[])), Assign(targets=[Name(id='highlight_processor', ctx=Store())], value=Call(func=Name(id='HighlightIncrementalSearchProcessor', ctx=Load()), args=[], keywords=[])), If(test=Name(id='filtered_processor', ctx=Load()), body=[Assign(targets=[Name(id='new_processors', ctx=Store())], value=List(elts=[Name(id='filtered_processor', ctx=Load()), Name(id='highlight_processor', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='new_processors', ctx=Store())], value=List(elts=[Name(id='highlight_processor', ctx=Load())], ctx=Load()))]), ImportFrom(module='controls', names=[alias(name='SearchBufferControl')], level=1), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load()), Name(id='SearchBufferControl', ctx=Load())], keywords=[])), Assign(targets=[Name(id='buffer_control', ctx=Store())], value=Call(func=Name(id='BufferControl', ctx=Load()), args=[], keywords=[keyword(arg='buffer', value=Attribute(value=Name(id='main_control', ctx=Load()), attr='buffer', ctx=Load())), keyword(arg='input_processors', value=Name(id='new_processors', ctx=Load())), keyword(arg='include_default_input_processors', value=Constant(value=False)), keyword(arg='lexer', value=Attribute(value=Name(id='main_control', ctx=Load()), attr='lexer', ctx=Load())), keyword(arg='preview_search', value=Constant(value=True)), keyword(arg='search_buffer_control', value=Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='buffer_control', ctx=Load()), attr='create_content', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='ti', ctx=Load()), attr='height', ctx=Load())], keywords=[keyword(arg='preview_search', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='controls', names=[alias(name='SearchBufferControl')], level=1), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load()), Name(id='SearchBufferControl', ctx=Load())], keywords=[]), msg=Constant(value='`ReverseSearchProcessor` should be applied to a `SearchBufferControl` only.')), AnnAssign(target=Name(id='source_to_display', ctx=Store()), annotation=BinOp(left=Name(id='SourceToDisplay', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='display_to_source', ctx=Store()), annotation=BinOp(left=Name(id='DisplayToSource', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), Assign(targets=[Name(id='main_control', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_main_buffer', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='ti', ctx=Load()), attr='lineno', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Name(id='main_control', ctx=Load())]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Load()), args=[Name(id='main_control', ctx=Load()), Name(id='ti', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line_fragments', ctx=Store())], value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='get_line', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='main_control', ctx=Load()), attr='search_state', ctx=Load()), attr='direction', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SearchDirection', ctx=Load()), attr='FORWARD', ctx=Load())]), body=[Assign(targets=[Name(id='direction_text', ctx=Store())], value=Constant(value='i-search'))], orelse=[Assign(targets=[Name(id='direction_text', ctx=Store())], value=Constant(value='reverse-i-search'))]), AnnAssign(target=Name(id='fragments_before', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value='class:prompt.search'), Constant(value='(')], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.search'), Name(id='direction_text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.search'), Constant(value=')`')], ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='fragments', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='fragments_before', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Constant(value='class:prompt.search.text'), Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value=''), Constant(value="': ")], ctx=Load())], ctx=Load())), op=Add(), right=Name(id='line_fragments', ctx=Load()))), Assign(targets=[Name(id='shift_position', ctx=Store())], value=Call(func=Name(id='fragment_list_len', ctx=Load()), args=[Name(id='fragments_before', ctx=Load())], keywords=[])), Assign(targets=[Name(id='source_to_display', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='shift_position', ctx=Load())))), Assign(targets=[Name(id='display_to_source', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Name(id='shift_position', ctx=Load()))))], orelse=[Assign(targets=[Name(id='source_to_display', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='display_to_source', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load()))]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[keyword(arg='source_to_display', value=Name(id='source_to_display', ctx=Load())), keyword(arg='display_to_source', value=Name(id='display_to_source', ctx=Load()))]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), ClassDef(name='ConditionalProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Processor that applies another processor, according to a certain condition.\n    Example::\n\n        # Create a function that returns whether or not the processor should\n        # currently be applied.\n        def highlight_enabled():\n            return true_or_false\n\n        # Wrapped it in a `ConditionalProcessor` for usage in a `BufferControl`.\n        BufferControl(input_processors=[\n            ConditionalProcessor(HighlightSearchProcessor(),\n                                 Condition(highlight_enabled))])\n\n    :param processor: :class:`.Processor` instance.\n    :param filter: :class:`~prompt_toolkit.filters.Filter` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='processor', annotation=Name(id='Processor', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='processor', ctx=Store())], value=Name(id='processor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transformation_input', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='processor', ctx=Load()), attr='apply_transformation', ctx=Load()), args=[Name(id='transformation_input', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Attribute(value=Name(id='transformation_input', ctx=Load()), attr='fragments', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Transformation', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(processor={!r}, filter={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='processor', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='DynamicProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Processor class that dynamically returns any Processor.\n\n    :param get_processor: Callable that returns a :class:`.Processor` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_processor', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='Processor', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_processor', ctx=Store())], value=Name(id='get_processor', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='processor', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_processor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyProcessor', ctx=Load()), args=[], keywords=[])])), Return(value=Call(func=Attribute(value=Name(id='processor', ctx=Load()), attr='apply_transformation', ctx=Load()), args=[Name(id='ti', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_processors', args=arguments(posonlyargs=[], args=[arg(arg='processors', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Merge multiple `Processor` objects into one.\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='processors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='DummyProcessor', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='processors', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='processors', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='_MergedProcessor', ctx=Load()), args=[Name(id='processors', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Processor', ctx=Load())), ClassDef(name='_MergedProcessor', bases=[Name(id='Processor', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Processor that groups multiple other `Processor` objects, but exposes an\n    API as if it is one `Processor`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='processors', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='processors', ctx=Store())], value=Name(id='processors', ctx=Load()))], decorator_list=[]), FunctionDef(name='apply_transformation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ti', annotation=Name(id='TransformationInput', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='source_to_display_functions', ctx=Store())], value=List(elts=[Attribute(value=Name(id='ti', ctx=Load()), attr='source_to_display', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='display_to_source_functions', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='ti', ctx=Load()), attr='fragments', ctx=Load())), FunctionDef(name='source_to_display', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Translate x position from the buffer to the x position in the\n            processor fragments list.')), For(target=Name(id='f', ctx=Store()), iter=Name(id='source_to_display_functions', ctx=Load()), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='f', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='i', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='processors', ctx=Load()), body=[Assign(targets=[Name(id='transformation', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='apply_transformation', ctx=Load()), args=[Call(func=Name(id='TransformationInput', ctx=Load()), args=[Attribute(value=Name(id='ti', ctx=Load()), attr='buffer_control', ctx=Load()), Attribute(value=Name(id='ti', ctx=Load()), attr='document', ctx=Load()), Attribute(value=Name(id='ti', ctx=Load()), attr='lineno', ctx=Load()), Name(id='source_to_display', ctx=Load()), Name(id='fragments', ctx=Load()), Attribute(value=Name(id='ti', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='ti', ctx=Load()), attr='height', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='fragments', ctx=Store())], value=Attribute(value=Name(id='transformation', ctx=Load()), attr='fragments', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='display_to_source_functions', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='transformation', ctx=Load()), attr='display_to_source', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source_to_display_functions', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='transformation', ctx=Load()), attr='source_to_display', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='display_to_source', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='f', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='display_to_source_functions', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='f', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='i', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Delete(targets=[Subscript(value=Name(id='source_to_display_functions', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Del())]), Return(value=Call(func=Name(id='Transformation', ctx=Load()), args=[Name(id='fragments', ctx=Load()), Name(id='source_to_display', ctx=Load()), Name(id='display_to_source', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Transformation', ctx=Load()))], decorator_list=[])], type_ignores=[])