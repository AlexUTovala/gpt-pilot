Module(body=[Expr(value=Constant(value='\nMargin implementations for a :class:`~prompt_toolkit.layout.containers.Window`.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='StyleAndTextTuples'), alias(name='fragment_list_to_text'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), ImportFrom(module='controls', names=[alias(name='UIContent')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='containers', names=[alias(name='WindowRenderInfo')], level=1)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Margin'), Constant(value='NumberedMargin'), Constant(value='ScrollbarMargin'), Constant(value='ConditionalMargin'), Constant(value='PromptMargin')], ctx=Load())), ClassDef(name='Margin', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base interface for a margin.\n    ')), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_ui_content', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the width that this margin is going to consume.\n\n        :param get_ui_content: Callable that asks the user control to create\n            a :class:`.UIContent` instance. This can be used for instance to\n            obtain the number of lines.\n        ')), Return(value=Constant(value=0))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='create_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window_render_info', annotation=Name(id='WindowRenderInfo', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Creates a margin.\n        This should return a list of (style_str, text) tuples.\n\n        :param window_render_info:\n            :class:`~prompt_toolkit.layout.containers.WindowRenderInfo`\n            instance, generated after rendering and copying the visible part of\n            the :class:`~prompt_toolkit.layout.controls.UIControl` into the\n            :class:`~prompt_toolkit.layout.containers.Window`.\n        :param width: The width that's available for this margin. (As reported\n            by :meth:`.get_width`.)\n        :param height: The height that's available for this margin. (The height\n            of the :class:`~prompt_toolkit.layout.containers.Window`.)\n        ")), Return(value=List(elts=[], ctx=Load()))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[]), ClassDef(name='NumberedMargin', bases=[Name(id='Margin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Margin that displays the line numbers.\n\n    :param relative: Number relative to the cursor position. Similar to the Vi\n                     'relativenumber' option.\n    :param display_tildes: Display tildes after the end of the document, just\n        like Vi does.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='relative', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='display_tildes', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='relative', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='relative', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='display_tildes', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='display_tildes', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_ui_content', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='line_count', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_ui_content', ctx=Load()), args=[], keywords=[]), attr='line_count', ctx=Load())), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=3), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Constant(value='%s'), op=Mod(), right=Name(id='line_count', ctx=Load()))], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='create_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window_render_info', annotation=Name(id='WindowRenderInfo', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='relative', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='relative', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='class:line-number')), Assign(targets=[Name(id='style_current', ctx=Store())], value=Constant(value='class:line-number.current')), Assign(targets=[Name(id='current_lineno', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='window_render_info', ctx=Load()), attr='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='last_lineno', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='lineno', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='window_render_info', ctx=Load()), attr='displayed_lines', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[NotEq()], comparators=[Name(id='last_lineno', ctx=Load())]), body=[If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='lineno', ctx=Load()), ops=[Eq()], comparators=[Name(id='current_lineno', ctx=Load())]), body=[If(test=Name(id='relative', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style_current', ctx=Load()), BinOp(left=Constant(value='%i'), op=Mod(), right=BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1)))], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style_current', ctx=Load()), Call(func=Attribute(value=BinOp(left=Constant(value='%i '), op=Mod(), right=BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1))), attr='rjust', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))])], orelse=[If(test=Name(id='relative', ctx=Load()), body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='lineno', ctx=Load()), op=Sub(), right=Name(id='current_lineno', ctx=Load()))], keywords=[]), op=Sub(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Call(func=Attribute(value=BinOp(left=Constant(value='%i '), op=Mod(), right=BinOp(left=Name(id='lineno', ctx=Load()), op=Add(), right=Constant(value=1))), attr='rjust', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))])])], orelse=[]), Assign(targets=[Name(id='last_lineno', ctx=Store())], value=Name(id='lineno', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display_tildes', ctx=Load()), args=[], keywords=[]), body=[While(test=Compare(left=Name(id='y', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='window_render_info', ctx=Load()), attr='window_height', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:tilde'), Constant(value='~\n')], ctx=Load())], keywords=[])), AugAssign(target=Name(id='y', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[]), ClassDef(name='ConditionalMargin', bases=[Name(id='Margin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Wrapper around other :class:`.Margin` classes to show/hide them.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='margin', annotation=Name(id='Margin', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='margin', ctx=Store())], value=Name(id='margin', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_ui_content', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='margin', ctx=Load()), attr='get_width', ctx=Load()), args=[Name(id='get_ui_content', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value=0))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='create_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window_render_info', annotation=Name(id='WindowRenderInfo', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='width', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='margin', ctx=Load()), attr='create_margin', ctx=Load()), args=[Name(id='window_render_info', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]))], orelse=[Return(value=List(elts=[], ctx=Load()))])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[]), ClassDef(name='ScrollbarMargin', bases=[Name(id='Margin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Margin displaying a scrollbar.\n\n    :param display_arrows: Display scroll up/down arrows.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='display_arrows', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='up_arrow_symbol', annotation=Name(id='str', ctx=Load())), arg(arg='down_arrow_symbol', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value='^'), Constant(value='v')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='display_arrows', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='display_arrows', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='up_arrow_symbol', ctx=Store())], value=Name(id='up_arrow_symbol', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='down_arrow_symbol', ctx=Store())], value=Name(id='down_arrow_symbol', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_ui_content', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='create_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window_render_info', annotation=Name(id='WindowRenderInfo', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='content_height', ctx=Store())], value=Attribute(value=Name(id='window_render_info', ctx=Load()), attr='content_height', ctx=Load())), Assign(targets=[Name(id='window_height', ctx=Store())], value=Attribute(value=Name(id='window_render_info', ctx=Load()), attr='window_height', ctx=Load())), Assign(targets=[Name(id='display_arrows', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display_arrows', ctx=Load()), args=[], keywords=[])), If(test=Name(id='display_arrows', ctx=Load()), body=[AugAssign(target=Name(id='window_height', ctx=Store()), op=Sub(), value=Constant(value=2))], orelse=[]), Try(body=[Assign(targets=[Name(id='fraction_visible', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='window_render_info', ctx=Load()), attr='displayed_lines', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Name(id='content_height', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='fraction_above', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='window_render_info', ctx=Load()), attr='vertical_scroll', ctx=Load()), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Name(id='content_height', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='scrollbar_height', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='window_height', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='window_height', ctx=Load()), op=Mult(), right=Name(id='fraction_visible', ctx=Load()))], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='scrollbar_top', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='window_height', ctx=Load()), op=Mult(), right=Name(id='fraction_above', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[FunctionDef(name='is_scroll_button', args=arguments(posonlyargs=[], args=[arg(arg='row', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if we should display a button on this row.')), Return(value=Compare(left=Name(id='scrollbar_top', ctx=Load()), ops=[LtE(), LtE()], comparators=[Name(id='row', ctx=Load()), BinOp(left=Name(id='scrollbar_top', ctx=Load()), op=Add(), right=Name(id='scrollbar_height', ctx=Load()))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Name(id='display_arrows', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value='class:scrollbar.arrow'), Attribute(value=Name(id='self', ctx=Load()), attr='up_arrow_symbol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:scrollbar'), Constant(value='\n')], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scrollbar_background', ctx=Store())], value=Constant(value='class:scrollbar.background')), Assign(targets=[Name(id='scrollbar_background_start', ctx=Store())], value=Constant(value='class:scrollbar.background,scrollbar.start')), Assign(targets=[Name(id='scrollbar_button', ctx=Store())], value=Constant(value='class:scrollbar.button')), Assign(targets=[Name(id='scrollbar_button_end', ctx=Store())], value=Constant(value='class:scrollbar.button,scrollbar.end')), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='window_height', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='is_scroll_button', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_scroll_button', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='scrollbar_button_end', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='scrollbar_button', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))])], orelse=[If(test=Call(func=Name(id='is_scroll_button', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='scrollbar_background_start', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='scrollbar_background', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='display_arrows', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:scrollbar.arrow'), Attribute(value=Name(id='self', ctx=Load()), attr='down_arrow_symbol', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], finalbody=[])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[]), ClassDef(name='PromptMargin', bases=[Name(id='Margin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    [Deprecated]\n\n    Create margin that displays a prompt.\n    This can display one prompt at the first line, and a continuation prompt\n    (e.g, just dots) on all the following lines.\n\n    This `PromptMargin` implementation has been largely superseded in favor of\n    the `get_line_prefix` attribute of `Window`. The reason is that a margin is\n    always a fixed width, while `get_line_prefix` can return a variable width\n    prefix in front of every line, making it more powerful, especially for line\n    continuations.\n\n    :param get_prompt: Callable returns formatted text or a list of\n        `(style_str, type)` tuples to be shown as the prompt at the first line.\n    :param get_continuation: Callable that takes three inputs. The width (int),\n        line_number (int), and is_soft_wrap (bool). It should return formatted\n        text or a list of `(style_str, type)` tuples for the next lines of the\n        input.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_prompt', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='get_continuation', annotation=BinOp(left=Constant(value=None), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_prompt', ctx=Store())], value=Name(id='get_prompt', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_continuation', ctx=Store())], value=Name(id='get_continuation', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_ui_content', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Width to report to the `Window`.')), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_prompt', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='create_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window_render_info', annotation=Name(id='WindowRenderInfo', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='get_continuation', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='get_continuation', ctx=Load())), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_prompt', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), If(test=Name(id='get_continuation', ctx=Load()), body=[Assign(targets=[Name(id='last_y', ctx=Store())], value=Constant(value=None)), For(target=Name(id='y', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='window_render_info', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='get_continuation', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='y', ctx=Load()), Compare(left=Name(id='y', ctx=Load()), ops=[Eq()], comparators=[Name(id='last_y', ctx=Load())])], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='last_y', ctx=Store())], value=Name(id='y', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[])], type_ignores=[])