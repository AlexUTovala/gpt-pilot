Module(body=[Expr(value=Constant(value='\nContainer for the layout.\n(Containers can contain other containers or user interface controls.)\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Sequence'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='SimpleCache')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Point')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='emacs_insert_mode'), alias(name='to_filter'), alias(name='vi_insert_mode')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='fragment_list_to_text'), alias(name='fragment_list_width')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyBindingsBase')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseEvent'), alias(name='MouseEventType')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth'), alias(name='take_using_weights'), alias(name='to_int'), alias(name='to_str')], level=0), ImportFrom(module='controls', names=[alias(name='DummyControl'), alias(name='FormattedTextControl'), alias(name='GetLinePrefixCallable'), alias(name='UIContent'), alias(name='UIControl')], level=1), ImportFrom(module='dimension', names=[alias(name='AnyDimension'), alias(name='Dimension'), alias(name='max_layout_dimensions'), alias(name='sum_layout_dimensions'), alias(name='to_dimension')], level=1), ImportFrom(module='margins', names=[alias(name='Margin')], level=1), ImportFrom(module='mouse_handlers', names=[alias(name='MouseHandlers')], level=1), ImportFrom(module='screen', names=[alias(name='_CHAR_CACHE'), alias(name='Screen'), alias(name='WritePosition')], level=1), ImportFrom(module='utils', names=[alias(name='explode_text_fragments')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Protocol'), alias(name='TypeGuard')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='NotImplementedOrNone')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='AnyContainer'), Constant(value='Container'), Constant(value='HorizontalAlign'), Constant(value='VerticalAlign'), Constant(value='HSplit'), Constant(value='VSplit'), Constant(value='FloatContainer'), Constant(value='Float'), Constant(value='WindowAlign'), Constant(value='Window'), Constant(value='WindowRenderInfo'), Constant(value='ConditionalContainer'), Constant(value='ScrollOffsets'), Constant(value='ColorColumn'), Constant(value='to_container'), Constant(value='to_window'), Constant(value='is_container'), Constant(value='DynamicContainer')], ctx=Load())), ClassDef(name='Container', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class for user interface layout.\n    ')), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Reset the state of this container and all the children.\n        (E.g. reset scroll offsets, etc...)\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a :class:`~prompt_toolkit.layout.Dimension` that represents the\n        desired width for this container.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a :class:`~prompt_toolkit.layout.Dimension` that represents the\n        desired height for this container.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write the actual content to the screen.\n\n        :param screen: :class:`~prompt_toolkit.layout.screen.Screen`\n        :param mouse_handlers: :class:`~prompt_toolkit.layout.mouse_handlers.MouseHandlers`.\n        :param parent_style: Style string to pass to the :class:`.Window`\n            object. This will be applied to all content of the windows.\n            :class:`.VSplit` and :class:`.HSplit` can use it to pass their\n            style down to the windows that they contain.\n        :param z_index: Used for propagating z_index from parent to child.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='is_modal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        When this container is modal, key bindings from parent containers are\n        not taken into account if a user control in this container is focused.\n        ')), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns a :class:`.KeyBindings` object. These bindings become active when any\n        user control in this container has the focus, except if any containers\n        between this container and the focused user control is modal.\n        ')), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the list of child :class:`.Container` objects.\n        ')), Return(value=List(elts=[], ctx=Load()))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ClassDef(name='MagicContainer', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        Any object that implements ``__pt_container__`` represents a container.\n        ')), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='AnyContainer', ctx=Load()))], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='AnyContainer', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Container', ctx=Load()), Constant(value='MagicContainer')], ctx=Load()), ctx=Load())), FunctionDef(name='_window_too_small', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create a `Window` that displays the 'Window too small' text.")), Return(value=Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[], keywords=[keyword(arg='text', value=List(elts=[Tuple(elts=[Constant(value='class:window-too-small'), Constant(value=' Window too small... ')], ctx=Load())], ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='Window', ctx=Load())), ClassDef(name='VerticalAlign', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Alignment for `HSplit`.')), Assign(targets=[Name(id='TOP', ctx=Store())], value=Constant(value='TOP')), Assign(targets=[Name(id='CENTER', ctx=Store())], value=Constant(value='CENTER')), Assign(targets=[Name(id='BOTTOM', ctx=Store())], value=Constant(value='BOTTOM')), Assign(targets=[Name(id='JUSTIFY', ctx=Store())], value=Constant(value='JUSTIFY'))], decorator_list=[]), ClassDef(name='HorizontalAlign', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Alignment for `VSplit`.')), Assign(targets=[Name(id='LEFT', ctx=Store())], value=Constant(value='LEFT')), Assign(targets=[Name(id='CENTER', ctx=Store())], value=Constant(value='CENTER')), Assign(targets=[Name(id='RIGHT', ctx=Store())], value=Constant(value='RIGHT')), Assign(targets=[Name(id='JUSTIFY', ctx=Store())], value=Constant(value='JUSTIFY'))], decorator_list=[]), ClassDef(name='_Split', bases=[Name(id='Container', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The common parts of `VSplit` and `HSplit`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='AnyContainer', ctx=Load()), ctx=Load())), arg(arg='window_too_small', annotation=BinOp(left=Name(id='Container', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='padding', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_char', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='padding_style', annotation=Name(id='str', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Call(func=Attribute(value=Name(id='Dimension', ctx=Load()), attr='exact', ctx=Load()), args=[Constant(value=0)], keywords=[]), Constant(value=None), Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Store())], value=ListComp(elt=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='children', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_too_small', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='window_too_small', ctx=Load()), Call(func=Name(id='_window_too_small', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Store())], value=Name(id='padding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_char', ctx=Store())], value=Name(id='padding_char', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_style', ctx=Store())], value=Name(id='padding_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Store())], value=Name(id='z_index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Store())], value=Name(id='modal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_modal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='HSplit', bases=[Name(id='_Split', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Several layouts, one stacked above/under the other. ::\n\n        +--------------------+\n        |                    |\n        +--------------------+\n        |                    |\n        +--------------------+\n\n    By default, this doesn\'t display a horizontal line between the children,\n    but if this is something you need, then create a HSplit as follows::\n\n        HSplit(children=[ ... ], padding_char=\'-\',\n               padding=1, padding_style=\'#ffff00\')\n\n    :param children: List of child :class:`.Container` objects.\n    :param window_too_small: A :class:`.Container` object that is displayed if\n        there is not enough space for all the children. By default, this is a\n        "Window too small" message.\n    :param align: `VerticalAlign` value.\n    :param width: When given, use this width instead of looking at the children.\n    :param height: When given, use this height instead of looking at the children.\n    :param z_index: (int or None) When specified, this can be used to bring\n        element in front of floating elements.  `None` means: inherit from parent.\n    :param style: A style string.\n    :param modal: ``True`` or ``False``.\n    :param key_bindings: ``None`` or a :class:`.KeyBindings` object.\n\n    :param padding: (`Dimension` or int), size to be used for the padding.\n    :param padding_char: Character to be used for filling in the padding.\n    :param padding_style: Style to applied to the padding.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='AnyContainer', ctx=Load()), ctx=Load())), arg(arg='window_too_small', annotation=BinOp(left=Name(id='Container', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='align', annotation=Name(id='VerticalAlign', ctx=Load())), arg(arg='padding', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_char', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='padding_style', annotation=Name(id='str', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Attribute(value=Name(id='VerticalAlign', ctx=Load()), attr='JUSTIFY', ctx=Load()), Constant(value=0), Constant(value=None), Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='window_too_small', value=Name(id='window_too_small', ctx=Load())), keyword(arg='padding', value=Name(id='padding', ctx=Load())), keyword(arg='padding_char', value=Name(id='padding_char', ctx=Load())), keyword(arg='padding_style', value=Name(id='padding_style', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='z_index', value=Name(id='z_index', ctx=Load())), keyword(arg='modal', value=Name(id='modal', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store())], value=Name(id='align', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_children_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Container', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_remaining_space_window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Name(id='max_available_width', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='max_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='max_available_height', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sum_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_all_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        List of child objects, including padding.\n        ')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='VerticalAlign', ctx=Load()), attr='CENTER', ctx=Load()), Attribute(value=Name(id='VerticalAlign', ctx=Load()), attr='BOTTOM', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))])], keywords=[]))], orelse=[]), For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())), keyword(arg='char', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_char', ctx=Load())), keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_style', ctx=Load()))])], keywords=[]))], orelse=[]), If(test=Name(id='result', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='VerticalAlign', ctx=Load()), attr='CENTER', ctx=Load()), Attribute(value=Name(id='VerticalAlign', ctx=Load()), attr='TOP', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_children_cache', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load())], keywords=[]), Name(id='get', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Render the prompt to a `Screen` instance.\n\n        :param screen: The :class:`~prompt_toolkit.layout.screen.Screen` class\n            to which the output has to be written.\n        ')), Assign(targets=[Name(id='sizes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_divide_heights', ctx=Load()), args=[Name(id='write_position', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='parent_style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='z_index', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='z_index', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()))), If(test=Compare(left=Name(id='sizes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='window_too_small', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())), For(target=Tuple(elts=[Name(id='s', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sizes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Call(func=Name(id='WritePosition', ctx=Load()), args=[Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='width', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[])), AugAssign(target=Name(id='ypos', ctx=Store()), op=Add(), value=Name(id='s', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='remaining_height', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())), op=Sub(), right=Name(id='ypos', ctx=Load()))), If(test=Compare(left=Name(id='remaining_height', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_remaining_space_window', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Call(func=Name(id='WritePosition', ctx=Load()), args=[Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='width', ctx=Load()), Name(id='remaining_height', ctx=Load())], keywords=[]), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_divide_heights', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the heights for all rows.\n        Or None when there is not enough space.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())), Assign(targets=[Name(id='height', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())), Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='sum_dimensions', ctx=Store())], value=Call(func=Name(id='sum_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='min', ctx=Load()), ops=[Gt()], comparators=[Name(id='height', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='sizes', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='min', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='child_generator', ctx=Store())], value=Call(func=Name(id='take_using_weights', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), keyword(arg='weights', value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='weight', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)]))])), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='preferred_stop', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='height', ctx=Load()), Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='preferred', ctx=Load())], keywords=[])), Assign(targets=[Name(id='preferred_dimensions', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='preferred', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), While(test=Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='sizes', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='preferred_stop', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='preferred_dimensions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='is_done', ctx=Load())), body=[Assign(targets=[Name(id='max_stop', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='height', ctx=Load()), Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='max', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_dimensions', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='max', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), While(test=Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='sizes', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='max_stop', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='max_dimensions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='sizes', ctx=Load()))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), ClassDef(name='VSplit', bases=[Name(id='_Split', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Several layouts, one stacked left/right of the other. ::\n\n        +---------+----------+\n        |         |          |\n        |         |          |\n        +---------+----------+\n\n    By default, this doesn\'t display a vertical line between the children, but\n    if this is something you need, then create a HSplit as follows::\n\n        VSplit(children=[ ... ], padding_char=\'|\',\n               padding=1, padding_style=\'#ffff00\')\n\n    :param children: List of child :class:`.Container` objects.\n    :param window_too_small: A :class:`.Container` object that is displayed if\n        there is not enough space for all the children. By default, this is a\n        "Window too small" message.\n    :param align: `HorizontalAlign` value.\n    :param width: When given, use this width instead of looking at the children.\n    :param height: When given, use this height instead of looking at the children.\n    :param z_index: (int or None) When specified, this can be used to bring\n        element in front of floating elements.  `None` means: inherit from parent.\n    :param style: A style string.\n    :param modal: ``True`` or ``False``.\n    :param key_bindings: ``None`` or a :class:`.KeyBindings` object.\n\n    :param padding: (`Dimension` or int), size to be used for the padding.\n    :param padding_char: Character to be used for filling in the padding.\n    :param padding_style: Style to applied to the padding.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='AnyContainer', ctx=Load()), ctx=Load())), arg(arg='window_too_small', annotation=BinOp(left=Name(id='Container', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='align', annotation=Name(id='HorizontalAlign', ctx=Load())), arg(arg='padding', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_char', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='padding_style', annotation=Name(id='str', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Attribute(value=Name(id='HorizontalAlign', ctx=Load()), attr='JUSTIFY', ctx=Load()), Constant(value=0), Constant(value=None), Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='window_too_small', value=Name(id='window_too_small', ctx=Load())), keyword(arg='padding', value=Name(id='padding', ctx=Load())), keyword(arg='padding_char', value=Name(id='padding_char', ctx=Load())), keyword(arg='padding_style', value=Name(id='padding_style', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='z_index', value=Name(id='z_index', ctx=Load())), keyword(arg='modal', value=Name(id='modal', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store())], value=Name(id='align', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_children_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Container', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_remaining_space_window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Name(id='max_available_width', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sum_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sizes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_divide_widths', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='children', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load())), If(test=Compare(left=Name(id='sizes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='max_available_height', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='s', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sizes', ctx=Load()), Name(id='children', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='max_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_all_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        List of child objects, including padding.\n        ')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='HorizontalAlign', ctx=Load()), attr='CENTER', ctx=Load()), Attribute(value=Name(id='HorizontalAlign', ctx=Load()), attr='RIGHT', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))])], keywords=[]))], orelse=[]), For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())), keyword(arg='char', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_char', ctx=Load())), keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_style', ctx=Load()))])], keywords=[]))], orelse=[]), If(test=Name(id='result', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='HorizontalAlign', ctx=Load()), attr='CENTER', ctx=Load()), Attribute(value=Name(id='HorizontalAlign', ctx=Load()), attr='LEFT', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_children_cache', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load())], keywords=[]), Name(id='get', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load())), FunctionDef(name='_divide_widths', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the widths for all columns.\n        Or None when there is not enough space.\n        ')), Assign(targets=[Name(id='children', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='children', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='children', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='preferred_dimensions', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='preferred', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='sum_dimensions', ctx=Store())], value=Call(func=Name(id='sum_layout_dimensions', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='min', ctx=Load()), ops=[Gt()], comparators=[Name(id='width', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='sizes', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='min', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='child_generator', ctx=Store())], value=Call(func=Name(id='take_using_weights', ctx=Load()), args=[], keywords=[keyword(arg='items', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='dimensions', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), keyword(arg='weights', value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='weight', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)]))])), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='preferred_stop', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='preferred', ctx=Load())], keywords=[])), While(test=Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='sizes', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='preferred_stop', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='preferred_dimensions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='max_dimensions', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='d', ctx=Load()), attr='max', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='max_stop', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='sum_dimensions', ctx=Load()), attr='max', ctx=Load())], keywords=[])), While(test=Compare(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='sizes', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='max_stop', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='max_dimensions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='sizes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='child_generator', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='sizes', ctx=Load()))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Render the prompt to a `Screen` instance.\n\n        :param screen: The :class:`~prompt_toolkit.layout.screen.Screen` class\n            to which the output has to be written.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='children', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_all_children', ctx=Load())), Assign(targets=[Name(id='sizes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_divide_widths', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='parent_style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='z_index', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='z_index', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()))), If(test=Compare(left=Name(id='sizes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='window_too_small', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='heights', ctx=Store())], value=ListComp(elt=Attribute(value=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]), attr='preferred', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sizes', ctx=Load()), Name(id='children', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Name(id='heights', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load())), For(target=Tuple(elts=[Name(id='s', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sizes', ctx=Load()), Name(id='children', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Call(func=Name(id='WritePosition', ctx=Load()), args=[Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='s', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[])), AugAssign(target=Name(id='xpos', ctx=Store()), op=Add(), value=Name(id='s', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='remaining_width', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())), op=Sub(), right=Name(id='xpos', ctx=Load()))), If(test=Compare(left=Name(id='remaining_width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_remaining_space_window', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Call(func=Name(id='WritePosition', ctx=Load()), args=[Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='remaining_width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FloatContainer', bases=[Name(id='Container', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Container which can contain another container for the background, as well\n    as a list of floating containers on top of it.\n\n    Example Usage::\n\n        FloatContainer(content=Window(...),\n                       floats=[\n                           Float(xcursor=True,\n                                ycursor=True,\n                                content=CompletionsMenu(...))\n                       ])\n\n    :param z_index: (int or None) When specified, this can be used to bring\n        element in front of floating elements.  `None` means: inherit from parent.\n        This is the z_index for the whole `Float` container as a whole.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='floats', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Float', ctx=Load()), ctx=Load())), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=''), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='floats', ctx=Store())], value=Name(id='floats', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Store())], value=Name(id='modal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Store())], value=Name(id='z_index', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), For(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='floats', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='f', ctx=Load()), attr='content', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Name(id='max_available_width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the preferred height of the float container.\n        (We don't care about the height of the floats, they should always fit\n        into the dimensions provided by the container.)\n        ")), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='max_available_height', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='parent_style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='z_index', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='z_index', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='number', ctx=Store()), Name(id='fl', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='floats', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_z_index', ctx=Store())], value=BinOp(left=BoolOp(op=Or(), values=[Name(id='z_index', ctx=Load()), Constant(value=0)]), op=Add(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='z_index', ctx=Load()))), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='parent_style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='postpone', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='xcursor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='ycursor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])), If(test=Name(id='postpone', ctx=Load()), body=[Assign(targets=[Name(id='new_z_index', ctx=Store())], value=BinOp(left=Name(id='number', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=8)))), Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='draw_with_z_index', ctx=Load()), args=[], keywords=[keyword(arg='z_index', value=Name(id='new_z_index', ctx=Load())), keyword(arg='draw_func', value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float', ctx=Load()), Name(id='fl', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='new_z_index', ctx=Load())], keywords=[]))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_float', ctx=Load()), args=[Name(id='fl', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='new_z_index', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_draw_float', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fl', annotation=Name(id='Float', ctx=Load())), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Draw a single Float.')), Assign(targets=[Name(id='cpos', ctx=Store())], value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='get_menu_position', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='fl', ctx=Load()), attr='attach_to_window', ctx=Load()), Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_window', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=BinOp(left=Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()))), keyword(arg='y', value=BinOp(left=Attribute(value=Name(id='cpos', ctx=Load()), attr='y', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())))])), Assign(targets=[Name(id='fl_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='fl', ctx=Load()), attr='get_width', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fl_height', ctx=Store())], value=Call(func=Attribute(value=Name(id='fl', ctx=Load()), attr='get_height', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='width', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='height', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='xpos', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='ypos', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='fl_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=Name(id='fl_width', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='fl_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load())), op=Sub(), right=Name(id='fl_width', ctx=Load()))), Assign(targets=[Name(id='width', ctx=Store())], value=Name(id='fl_width', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='fl', ctx=Load()), attr='xcursor', ctx=Load()), body=[If(test=Compare(left=Name(id='fl_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='fl', ctx=Load()), attr='content', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=Name(id='fl_width', ctx=Load()))]), Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='x', ctx=Load())), If(test=Compare(left=BinOp(left=Name(id='xpos', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Name(id='fl_width', ctx=Load()), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='fl_width', ctx=Load())), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='width', ctx=Store())], value=Name(id='fl_width', ctx=Load()))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='fl', ctx=Load()), attr='content', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='left', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='right', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='xpos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load())), op=Div(), right=Constant(value=2))], keywords=[])], keywords=[]))])]), Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='width', ctx=Load()), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='xpos', ctx=Load()))], keywords=[]))])])])])]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='fl_height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load())), Assign(targets=[Name(id='height', ctx=Store())], value=Name(id='fl_height', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load())), Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='fl_height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='fl_height', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load()))), Assign(targets=[Name(id='height', ctx=Store())], value=Name(id='fl_height', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='fl', ctx=Load()), attr='ycursor', ctx=Load()), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='y', ctx=Load()), op=Add(), right=IfExp(test=Attribute(value=Name(id='fl', ctx=Load()), attr='allow_cover_cursor', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1)))), If(test=Compare(left=Name(id='fl_height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='fl', ctx=Load()), attr='content', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]), attr='preferred', ctx=Load()))], orelse=[Assign(targets=[Name(id='height', ctx=Store())], value=Name(id='fl_height', ctx=Load()))]), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='ypos', ctx=Load()))]), body=[If(test=Compare(left=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='ypos', ctx=Load())), op=Add(), right=Constant(value=1)), ops=[GtE()], comparators=[Name(id='ypos', ctx=Load())]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='ypos', ctx=Load())))], orelse=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='height', ctx=Load()), Attribute(value=Name(id='cursor_position', ctx=Load()), attr='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ypos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='y', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())))])], orelse=[])], orelse=[If(test=Name(id='fl_height', ctx=Load()), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='fl_height', ctx=Load())), op=Div(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='height', ctx=Store())], value=Name(id='fl_height', ctx=Load()))], orelse=[Assign(targets=[Name(id='height', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='fl', ctx=Load()), attr='content', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='fl', ctx=Load()), attr='top', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='fl', ctx=Load()), attr='bottom', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='ypos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())), op=Div(), right=Constant(value=2))], keywords=[])], keywords=[]))])]), Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='height', ctx=Load()), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Name(id='ypos', ctx=Load()))], keywords=[]))])])])])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='height', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Name(id='width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='wp', ctx=Store())], value=Call(func=Name(id='WritePosition', ctx=Load()), args=[], keywords=[keyword(arg='xpos', value=BinOp(left=Name(id='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()))), keyword(arg='ypos', value=BinOp(left=Name(id='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()))), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='fl', ctx=Load()), attr='hide_when_covering_content', ctx=Load())), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_area_is_empty', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='wp', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='fl', ctx=Load()), attr='content', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='wp', ctx=Load()), Name(id='style', ctx=Load())], keywords=[keyword(arg='erase_bg', value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='fl', ctx=Load()), attr='transparent', ctx=Load()), args=[], keywords=[]))), keyword(arg='z_index', value=Name(id='z_index', ctx=Load()))]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_area_is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return True when the area below the write position is still empty.\n        (For floats that should not hide content underneath.)\n        ')), Assign(targets=[Name(id='wp', ctx=Store())], value=Name(id='write_position', ctx=Load())), For(target=Name(id='y', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='wp', ctx=Load()), attr='ypos', ctx=Load()), BinOp(left=Attribute(value=Name(id='wp', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='wp', ctx=Load()), attr='height', ctx=Load()))], keywords=[]), body=[If(test=Compare(left=Name(id='y', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='screen', ctx=Load()), attr='data_buffer', ctx=Load())]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='wp', ctx=Load()), attr='xpos', ctx=Load()), BinOp(left=Attribute(value=Name(id='wp', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='wp', ctx=Load()), attr='width', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=' ')]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_modal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='modal', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='children', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='f', ctx=Load()), attr='content', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='floats', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='children', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Float', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Float for use in a :class:`.FloatContainer`.\n    Except for the `content` parameter, all other options are optional.\n\n    :param content: :class:`.Container` instance.\n\n    :param width: :class:`.Dimension` or callable which returns a :class:`.Dimension`.\n    :param height: :class:`.Dimension` or callable which returns a :class:`.Dimension`.\n\n    :param left: Distance to the left edge of the :class:`.FloatContainer`.\n    :param right: Distance to the right edge of the :class:`.FloatContainer`.\n    :param top: Distance to the top of the :class:`.FloatContainer`.\n    :param bottom: Distance to the bottom of the :class:`.FloatContainer`.\n\n    :param attach_to_window: Attach to the cursor from this window, instead of\n        the current window.\n    :param hide_when_covering_content: Hide the float when it covers content underneath.\n    :param allow_cover_cursor: When `False`, make sure to display the float\n        below the cursor. Not on top of the indicated position.\n    :param z_index: Z-index position. For a Float, this needs to be at least\n        one. It is relative to the z_index of the parent container.\n    :param transparent: :class:`.Filter` indicating whether this float needs to be\n        drawn transparently.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='top', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='right', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='bottom', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='left', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='width', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='height', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='xcursor', annotation=Name(id='bool', ctx=Load())), arg(arg='ycursor', annotation=Name(id='bool', ctx=Load())), arg(arg='attach_to_window', annotation=BinOp(left=Name(id='AnyContainer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='hide_when_covering_content', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_cover_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=Name(id='int', ctx=Load())), arg(arg='transparent', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=1), Constant(value=False)]), body=[Assert(test=Compare(left=Name(id='z_index', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Store())], value=Name(id='left', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Store())], value=Name(id='right', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Store())], value=Name(id='top', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Store())], value=Name(id='bottom', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='xcursor', ctx=Store())], value=Name(id='xcursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ycursor', ctx=Store())], value=Name(id='ycursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attach_to_window', ctx=Store())], value=IfExp(test=Name(id='attach_to_window', ctx=Load()), body=Call(func=Name(id='to_window', ctx=Load()), args=[Name(id='attach_to_window', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hide_when_covering_content', ctx=Store())], value=Name(id='hide_when_covering_content', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allow_cover_cursor', ctx=Store())], value=Name(id='allow_cover_cursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Store())], value=Name(id='z_index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transparent', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='transparent', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='Float(content=%r)'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='WindowRenderInfo', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Render information for the last render time of this control.\n    It stores mapping information between the input buffers (in case of a\n    :class:`~prompt_toolkit.layout.controls.BufferControl`) and the actual\n    render position on the output screen.\n\n    (Could be used for implementation of the Vi 'H' and 'L' key bindings as\n    well as implementing mouse support.)\n\n    :param ui_content: The original :class:`.UIContent` instance that contains\n        the whole input, without clipping. (ui_content)\n    :param horizontal_scroll: The horizontal scroll of the :class:`.Window` instance.\n    :param vertical_scroll: The vertical scroll of the :class:`.Window` instance.\n    :param window_width: The width of the window that displays the content,\n        without the margins.\n    :param window_height: The height of the window that displays the content.\n    :param configured_scroll_offsets: The scroll offsets as configured for the\n        :class:`Window` instance.\n    :param visible_line_to_row_col: Mapping that maps the row numbers on the\n        displayed screen (starting from zero for the first visible line) to\n        (row, col) tuples pointing to the row and column of the :class:`.UIContent`.\n    :param rowcol_to_yx: Mapping that maps (row, column) tuples representing\n        coordinates of the :class:`UIContent` to (y, x) absolute coordinates at\n        the rendered screen.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='window', annotation=Name(id='Window', ctx=Load())), arg(arg='ui_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='horizontal_scroll', annotation=Name(id='int', ctx=Load())), arg(arg='vertical_scroll', annotation=Name(id='int', ctx=Load())), arg(arg='window_width', annotation=Name(id='int', ctx=Load())), arg(arg='window_height', annotation=Name(id='int', ctx=Load())), arg(arg='configured_scroll_offsets', annotation=Name(id='ScrollOffsets', ctx=Load())), arg(arg='visible_line_to_row_col', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='rowcol_to_yx', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='x_offset', annotation=Name(id='int', ctx=Load())), arg(arg='y_offset', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Name(id='window', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Store())], value=Name(id='ui_content', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Name(id='vertical_scroll', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_width', ctx=Store())], value=Name(id='window_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window_height', ctx=Store())], value=Name(id='window_height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='configured_scroll_offsets', ctx=Store())], value=Name(id='configured_scroll_offsets', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='visible_line_to_row_col', ctx=Store())], value=Name(id='visible_line_to_row_col', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Name(id='wrap_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rowcol_to_yx', ctx=Store())], value=Name(id='rowcol_to_yx', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_x_offset', ctx=Store())], value=Name(id='x_offset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_y_offset', ctx=Store())], value=Name(id='y_offset', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='visible_line_to_input_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='visible_line', ctx=Load()), value=Subscript(value=Name(id='rowcol', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='visible_line', ctx=Store()), Name(id='rowcol', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='visible_line_to_row_col', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the cursor position coordinates, relative to the left/top corner\n        of the rendered screen.\n        ')), Assign(targets=[Name(id='cpos', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Load()), attr='cursor_position', ctx=Load())), Try(body=[Assign(targets=[Tuple(elts=[Name(id='y', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_rowcol_to_yx', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='cpos', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load())], ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))]))])], orelse=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_x_offset', ctx=Load()))), keyword(arg='y', value=BinOp(left=Name(id='y', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_y_offset', ctx=Load())))]))], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Point', ctx=Load())), FunctionDef(name='applied_scroll_offsets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return a :class:`.ScrollOffsets` instance that indicates the actual\n        offset. This can be less than or equal to what's configured. E.g, when\n        the cursor is completely at the top, the top offset will be zero rather\n        than what's configured.\n        ")), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='top', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='y', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_line_to_visible_line', ctx=Load()), slice=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='top', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configured_scroll_offsets', ctx=Load()), attr='top', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='ScrollOffsets', ctx=Load()), args=[], keywords=[keyword(arg='top', value=Name(id='top', ctx=Load())), keyword(arg='bottom', value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), op=Sub(), right=Constant(value=1)), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configured_scroll_offsets', ctx=Load()), attr='bottom', ctx=Load())], keywords=[])), keyword(arg='left', value=Constant(value=0)), keyword(arg='right', value=Constant(value=0))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ScrollOffsets', ctx=Load())), FunctionDef(name='displayed_lines', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        List of all the visible rows. (Line numbers of the input buffer.)\n        The last line may not be entirely visible.\n        ')), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Name(id='row', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='visible_line_to_row_col', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='input_line_to_visible_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the dictionary mapping the line numbers of the input buffer to\n        the lines of the screen. When a line spans several rows at the screen,\n        the first row appears in the dictionary.\n        ')), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='visible_line_to_input_line', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Load()), Name(id='k', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Name(id='k', ctx=Load()))])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='first_visible_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='after_scroll_offset', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the line number (0 based) of the input document that corresponds\n        with the first visible line.\n        ')), If(test=Name(id='after_scroll_offset', ctx=Load()), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='applied_scroll_offsets', ctx=Load()), attr='top', ctx=Load()), ctx=Load()))], orelse=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='last_visible_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='before_scroll_offset', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Like `first_visible_line`, but for the last visible line.\n        ')), If(test=Name(id='before_scroll_offset', ctx=Load()), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='applied_scroll_offsets', ctx=Load()), attr='bottom', ctx=Load())), ctx=Load()))], orelse=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='displayed_lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='center_visible_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='before_scroll_offset', annotation=Name(id='bool', ctx=Load())), arg(arg='after_scroll_offset', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Like `first_visible_line`, but for the center visible line.\n        ')), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='first_visible_line', ctx=Load()), args=[Name(id='after_scroll_offset', ctx=Load())], keywords=[]), op=Add(), right=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='last_visible_line', ctx=Load()), args=[Name(id='before_scroll_offset', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='first_visible_line', ctx=Load()), args=[Name(id='after_scroll_offset', ctx=Load())], keywords=[])), op=FloorDiv(), right=Constant(value=2))))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='content_height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The full height of the user control.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Load()), attr='line_count', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='full_height_visible', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when the full height is visible (There is no vertical scroll.)\n        ')), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='last_visible_line', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='content_height', ctx=Load())])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='top_visible', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when the top of the buffer is visible.\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='bottom_visible', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when the bottom of the buffer is visible.\n        ')), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='last_visible_line', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='content_height', ctx=Load()), op=Sub(), right=Constant(value=1))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='vertical_scroll_percentage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Vertical scroll as a percentage. (0 means: the top is visible,\n        100 means: the bottom is visible.)\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='bottom_visible', ctx=Load()), body=[Return(value=Constant(value=100))], orelse=[Return(value=BinOp(left=BinOp(left=Constant(value=100), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load())), op=FloorDiv(), right=Attribute(value=Name(id='self', ctx=Load()), attr='content_height', ctx=Load())))])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_height_for_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the height of the given line.\n        (The height that it would take, if this line became visible.)\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ui_content', ctx=Load()), attr='get_height_for_line', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='window_width', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()), attr='get_line_prefix', ctx=Load())], keywords=[]))], orelse=[Return(value=Constant(value=1))])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='ScrollOffsets', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Scroll offsets for the :class:`.Window` class.\n\n    Note that left/right offsets only make sense if line wrapping is disabled.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='top', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='bottom', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='left', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='right', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_top', ctx=Store())], value=Name(id='top', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bottom', ctx=Store())], value=Name(id='bottom', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Store())], value=Name(id='left', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Store())], value=Name(id='right', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='top', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='to_int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_top', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='bottom', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='to_int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_bottom', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='left', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='to_int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='right', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='to_int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='ScrollOffsets(top={!r}, bottom={!r}, left={!r}, right={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_top', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bottom', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ColorColumn', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Column for a :class:`.Window` to be colored.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='position', annotation=Name(id='int', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='class:color-column')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Name(id='position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='_in_insert_mode', ctx=Store())], value=BinOp(left=Name(id='vi_insert_mode', ctx=Load()), op=BitOr(), right=Name(id='emacs_insert_mode', ctx=Load()))), ClassDef(name='WindowAlign', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Alignment of the Window content.\n\n    Note that this is different from `HorizontalAlign` and `VerticalAlign`,\n    which are used for the alignment of the child containers in respectively\n    `VSplit` and `HSplit`.\n    ')), Assign(targets=[Name(id='LEFT', ctx=Store())], value=Constant(value='LEFT')), Assign(targets=[Name(id='RIGHT', ctx=Store())], value=Constant(value='RIGHT')), Assign(targets=[Name(id='CENTER', ctx=Store())], value=Constant(value='CENTER'))], decorator_list=[]), ClassDef(name='Window', bases=[Name(id='Container', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Container that holds a control.\n\n    :param content: :class:`.UIControl` instance.\n    :param width: :class:`.Dimension` instance or callable.\n    :param height: :class:`.Dimension` instance or callable.\n    :param z_index: When specified, this can be used to bring element in front\n        of floating elements.\n    :param dont_extend_width: When `True`, don\'t take up more width then the\n                              preferred width reported by the control.\n    :param dont_extend_height: When `True`, don\'t take up more width then the\n                               preferred height reported by the control.\n    :param ignore_content_width: A `bool` or :class:`.Filter` instance. Ignore\n        the :class:`.UIContent` width when calculating the dimensions.\n    :param ignore_content_height: A `bool` or :class:`.Filter` instance. Ignore\n        the :class:`.UIContent` height when calculating the dimensions.\n    :param left_margins: A list of :class:`.Margin` instance to be displayed on\n        the left. For instance: :class:`~prompt_toolkit.layout.NumberedMargin`\n        can be one of them in order to show line numbers.\n    :param right_margins: Like `left_margins`, but on the other side.\n    :param scroll_offsets: :class:`.ScrollOffsets` instance, representing the\n        preferred amount of lines/columns to be always visible before/after the\n        cursor. When both top and bottom are a very high number, the cursor\n        will be centered vertically most of the time.\n    :param allow_scroll_beyond_bottom: A `bool` or\n        :class:`.Filter` instance. When True, allow scrolling so far, that the\n        top part of the content is not visible anymore, while there is still\n        empty space available at the bottom of the window. In the Vi editor for\n        instance, this is possible. You will see tildes while the top part of\n        the body is hidden.\n    :param wrap_lines: A `bool` or :class:`.Filter` instance. When True, don\'t\n        scroll horizontally, but wrap lines instead.\n    :param get_vertical_scroll: Callable that takes this window\n        instance as input and returns a preferred vertical scroll.\n        (When this is `None`, the scroll is only determined by the last and\n        current cursor position.)\n    :param get_horizontal_scroll: Callable that takes this window\n        instance as input and returns a preferred vertical scroll.\n    :param always_hide_cursor: A `bool` or\n        :class:`.Filter` instance. When True, never display the cursor, even\n        when the user control specifies a cursor position.\n    :param cursorline: A `bool` or :class:`.Filter` instance. When True,\n        display a cursorline.\n    :param cursorcolumn: A `bool` or :class:`.Filter` instance. When True,\n        display a cursorcolumn.\n    :param colorcolumns: A list of :class:`.ColorColumn` instances that\n        describe the columns to be highlighted, or a callable that returns such\n        a list.\n    :param align: :class:`.WindowAlign` value or callable that returns an\n        :class:`.WindowAlign` value. alignment of content.\n    :param style: A style string. Style to be applied to all the cells in this\n        window. (This can be a callable that returns a string.)\n    :param char: (string) Character to be used for filling the background. This\n        can also be a callable that returns a character.\n    :param get_line_prefix: None or a callable that returns formatted text to\n        be inserted before a line. It takes a line number (int) and a\n        wrap_count and returns formatted text. This can be used for\n        implementation of line continuations, things like Vim "breakindent" and\n        so on.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=BinOp(left=Name(id='UIControl', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='dont_extend_width', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='dont_extend_height', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='ignore_content_width', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='ignore_content_height', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='left_margins', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Margin', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='right_margins', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Margin', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='scroll_offsets', annotation=BinOp(left=Name(id='ScrollOffsets', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='allow_scroll_beyond_bottom', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='get_vertical_scroll', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Window', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='get_horizontal_scroll', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Window', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='always_hide_cursor', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='cursorline', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='cursorcolumn', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='colorcolumns', annotation=BinOp(left=BinOp(left=Constant(value=None), op=BitOr(), right=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='ColorColumn', ctx=Load()), ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='ColorColumn', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='align', annotation=BinOp(left=Name(id='WindowAlign', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='WindowAlign', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='style', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='char', annotation=BinOp(left=BinOp(left=Constant(value=None), op=BitOr(), right=Name(id='str', ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='LEFT', ctx=Load()), Constant(value=''), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allow_scroll_beyond_bottom', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='allow_scroll_beyond_bottom', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='always_hide_cursor', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='always_hide_cursor', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='wrap_lines', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursorline', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='cursorline', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursorcolumn', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='cursorcolumn', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='content', ctx=Load()), Call(func=Name(id='DummyControl', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_width', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='dont_extend_width', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_height', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='dont_extend_height', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_content_width', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='ignore_content_width', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_content_height', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='ignore_content_height', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='left_margins', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='left_margins', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right_margins', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='right_margins', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scroll_offsets', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='scroll_offsets', ctx=Load()), Call(func=Name(id='ScrollOffsets', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_vertical_scroll', ctx=Store())], value=Name(id='get_vertical_scroll', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_horizontal_scroll', ctx=Store())], value=Name(id='get_horizontal_scroll', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='colorcolumns', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='colorcolumns', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store())], value=Name(id='align', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Store())], value=Name(id='char', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Store())], value=Name(id='get_line_prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Store())], value=Name(id='z_index', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_ui_content_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='UIContent', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=8))]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_margin_width_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Margin', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))]), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='Window(content=%r)'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='render_info', ctx=Store()), annotation=BinOp(left=Name(id='WindowRenderInfo', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_margin_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='margin', annotation=Name(id='Margin', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the width for this margin.\n        (Calculate only once per render time.)\n        ')), FunctionDef(name='get_ui_content', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ui_content', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=0)), keyword(arg='height', value=Constant(value=0))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='margin', ctx=Load()), attr='get_width', ctx=Load()), args=[Name(id='get_ui_content', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='margin', ctx=Load()), Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='render_counter', ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_margin_width_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='get_width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_total_margin_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Calculate and return the width of the margin (left + right).\n        ')), Return(value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_margin_width', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='left_margins', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_margin_width', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='right_margins', ctx=Load()), ifs=[], is_async=0)])], keywords=[])))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Calculate the preferred width for this window.\n        ')), FunctionDef(name='preferred_content_width', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Content width: is only calculated if no exact width for the\n            window was given.')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_content_width', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='total_margin_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_total_margin_width', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='preferred_width', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_width', ctx=Load()), args=[BinOp(left=Name(id='max_available_width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='preferred_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='preferred_width', ctx=Store()), op=Add(), value=Name(id='total_margin_width', ctx=Load()))], orelse=[]), Return(value=Name(id='preferred_width', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_dimensions', ctx=Load()), args=[], keywords=[keyword(arg='dimension', value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[])), keyword(arg='get_preferred', value=Name(id='preferred_content_width', ctx=Load())), keyword(arg='dont_extend', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_width', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Calculate the preferred height for this window.\n        ')), FunctionDef(name='preferred_content_height', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Content height: is only calculated if no exact height for the\n            window was given.')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_content_height', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='total_margin_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_total_margin_width', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wrap_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_height', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load())), Name(id='max_available_height', ctx=Load()), Name(id='wrap_lines', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load())], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_dimensions', ctx=Load()), args=[], keywords=[keyword(arg='dimension', value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())], keywords=[])), keyword(arg='get_preferred', value=Name(id='preferred_content_height', ctx=Load())), keyword(arg='dont_extend', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_height', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='_merge_dimensions', args=arguments(posonlyargs=[], args=[arg(arg='dimension', annotation=BinOp(left=Name(id='Dimension', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='get_preferred', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), arg(arg='dont_extend', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Take the Dimension from this `Window` class and the received preferred\n        size from the `UIControl` and return a `Dimension` to report to the\n        parent container.\n        ')), Assign(targets=[Name(id='dimension', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='dimension', ctx=Load()), Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[])])), AnnAssign(target=Name(id='preferred', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Attribute(value=Name(id='dimension', ctx=Load()), attr='preferred_specified', ctx=Load()), body=[Assign(targets=[Name(id='preferred', ctx=Store())], value=Attribute(value=Name(id='dimension', ctx=Load()), attr='preferred', ctx=Load()))], orelse=[Assign(targets=[Name(id='preferred', ctx=Store())], value=Call(func=Name(id='get_preferred', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Name(id='preferred', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='dimension', ctx=Load()), attr='max_specified', ctx=Load()), body=[Assign(targets=[Name(id='preferred', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='preferred', ctx=Load()), Attribute(value=Name(id='dimension', ctx=Load()), attr='max', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='dimension', ctx=Load()), attr='min_specified', ctx=Load()), body=[Assign(targets=[Name(id='preferred', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='preferred', ctx=Load()), Attribute(value=Name(id='dimension', ctx=Load()), attr='min', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), AnnAssign(target=Name(id='max_', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='min_', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=BoolOp(op=And(), values=[Name(id='dont_extend', ctx=Load()), Compare(left=Name(id='preferred', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='max_', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='dimension', ctx=Load()), attr='max', ctx=Load()), Name(id='preferred', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='max_', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='dimension', ctx=Load()), attr='max_specified', ctx=Load()), body=Attribute(value=Name(id='dimension', ctx=Load()), attr='max', ctx=Load()), orelse=Constant(value=None)))]), Assign(targets=[Name(id='min_', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='dimension', ctx=Load()), attr='min_specified', ctx=Load()), body=Attribute(value=Name(id='dimension', ctx=Load()), attr='min', ctx=Load()), orelse=Constant(value=None))), Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='min_', ctx=Load())), keyword(arg='max', value=Name(id='max_', ctx=Load())), keyword(arg='preferred', value=Name(id='preferred', ctx=Load())), keyword(arg='weight', value=Attribute(value=Name(id='dimension', ctx=Load()), attr='weight', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='_get_ui_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a `UIContent` instance.\n        ')), FunctionDef(name='get_content', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='create_content', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='render_counter', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ui_content_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='get_content', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='_get_digraph_char', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return `False`, or the Digraph symbol to be used.')), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='app', ctx=Load()), attr='quoted_insert', ctx=Load()), body=[Return(value=Constant(value='^'))], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='waiting_for_digraph', ctx=Load()), body=[If(test=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='digraph_symbol1', ctx=Load()), body=[Return(value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='digraph_symbol1', ctx=Load()))], orelse=[]), Return(value=Constant(value='?'))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write window to screen. This renders the user control, the margins and\n        copies everything over to the absolute position at the given screen.\n        ')), Assign(targets=[Name(id='write_position', ctx=Store())], value=Call(func=Name(id='WritePosition', ctx=Load()), args=[], keywords=[keyword(arg='xpos', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load())), keyword(arg='ypos', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), keyword(arg='width', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())), keyword(arg='height', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_width', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dont_extend_height', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]), attr='preferred', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='z_index', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='z_index', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='z_index', ctx=Load()))), Assign(targets=[Name(id='draw_func', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_write_to_screen_at_index', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='parent_style', ctx=Load()), Name(id='erase_bg', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='z_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='z_index', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Name(id='draw_func', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='screen', ctx=Load()), attr='draw_with_z_index', ctx=Load()), args=[], keywords=[keyword(arg='z_index', value=Name(id='z_index', ctx=Load())), keyword(arg='draw_func', value=Name(id='draw_func', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_write_to_screen_at_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='left_margin_widths', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_margin_width', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='left_margins', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='right_margin_widths', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_margin_width', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='right_margins', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='total_margin_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[BinOp(left=Name(id='left_margin_widths', ctx=Load()), op=Add(), right=Name(id='right_margin_widths', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='ui_content', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='create_content', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load())), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ui_content', ctx=Load()), Name(id='UIContent', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wrap_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scroll', ctx=Load()), args=[Name(id='ui_content', ctx=Load()), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load())), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fill_bg', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='erase_bg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='align', ctx=Store())], value=IfExp(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='visible_line_to_row_col', ctx=Store()), Name(id='rowcol_to_yx', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_body', ctx=Load()), args=[Name(id='ui_content', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='write_position', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[Name(id='left_margin_widths', ctx=Load())], keywords=[]), BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Load())], keywords=[keyword(arg='wrap_lines', value=Name(id='wrap_lines', ctx=Load())), keyword(arg='highlight_lines', value=Constant(value=True)), keyword(arg='vertical_scroll_2', value=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Load())), keyword(arg='always_hide_cursor', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='always_hide_cursor', ctx=Load()), args=[], keywords=[])), keyword(arg='has_focus', value=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())])), keyword(arg='align', value=Name(id='align', ctx=Load())), keyword(arg='get_line_prefix', value=Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load()))])), Assign(targets=[Name(id='x_offset', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='left_margin_widths', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='y_offset', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), Assign(targets=[Name(id='render_info', ctx=Store())], value=Call(func=Name(id='WindowRenderInfo', ctx=Load()), args=[], keywords=[keyword(arg='window', value=Name(id='self', ctx=Load())), keyword(arg='ui_content', value=Name(id='ui_content', ctx=Load())), keyword(arg='horizontal_scroll', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Load())), keyword(arg='vertical_scroll', value=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load())), keyword(arg='window_width', value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Name(id='total_margin_width', ctx=Load()))), keyword(arg='window_height', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())), keyword(arg='configured_scroll_offsets', value=Attribute(value=Name(id='self', ctx=Load()), attr='scroll_offsets', ctx=Load())), keyword(arg='visible_line_to_row_col', value=Name(id='visible_line_to_row_col', ctx=Load())), keyword(arg='rowcol_to_yx', value=Name(id='rowcol_to_yx', ctx=Load())), keyword(arg='x_offset', value=Name(id='x_offset', ctx=Load())), keyword(arg='y_offset', value=Name(id='y_offset', ctx=Load())), keyword(arg='wrap_lines', value=Name(id='wrap_lines', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='render_info', ctx=Store())], value=Name(id='render_info', ctx=Load())), FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Wrapper around the mouse_handler of the `UIControl` that turns\n            screen coordinates into line coordinates.\n            Returns `NotImplemented` if no UI invalidation should be done.\n            ')), If(test=Compare(left=Name(id='self', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='walk_through_modal_area', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='yx_to_rowcol', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='rowcol_to_yx', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='y', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='y', ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='x', ctx=Load())), Assign(targets=[Name(id='max_y', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='visible_line_to_row_col', ctx=Load())], keywords=[])), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='max_y', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='NotImplementedOrNone', ctx=Load()), simple=1), While(test=Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='yx_to_rowcol', ctx=Load()), slice=Tuple(elts=[Name(id='y', ctx=Load()), Name(id='x', ctx=Load())], ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[AugAssign(target=Name(id='x', ctx=Store()), op=Sub(), value=Constant(value=1))])], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='mouse_handler', ctx=Load()), args=[Call(func=Name(id='MouseEvent', ctx=Load()), args=[], keywords=[keyword(arg='position', value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='col', ctx=Load())), keyword(arg='y', value=Name(id='row', ctx=Load()))])), keyword(arg='event_type', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load())), keyword(arg='button', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='button', ctx=Load())), keyword(arg='modifiers', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='modifiers', ctx=Load()))])], keywords=[])), Break()], finalbody=[])], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='mouse_handler', ctx=Load()), args=[Call(func=Name(id='MouseEvent', ctx=Load()), args=[], keywords=[keyword(arg='position', value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))])), keyword(arg='event_type', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load())), keyword(arg='button', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='button', ctx=Load())), keyword(arg='modifiers', value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='modifiers', ctx=Load()))])], keywords=[]))]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Name(id='NotImplemented', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mouse_handler', ctx=Load()), args=[Name(id='mouse_event', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='mouse_handlers', ctx=Load()), attr='set_mouse_handler_for_range', ctx=Load()), args=[], keywords=[keyword(arg='x_min', value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='left_margin_widths', ctx=Load())], keywords=[]))), keyword(arg='x_max', value=BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load())), op=Sub(), right=Name(id='total_margin_width', ctx=Load()))), keyword(arg='y_min', value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), keyword(arg='y_max', value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()))), keyword(arg='handler', value=Name(id='mouse_handler', ctx=Load()))])), Assign(targets=[Name(id='move_x', ctx=Store())], value=Constant(value=0)), FunctionDef(name='render_margin', args=arguments(posonlyargs=[], args=[arg(arg='m', annotation=Name(id='Margin', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render margin. Return `Screen`.')), Assign(targets=[Name(id='fragments', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='create_margin', ctx=Load()), args=[Name(id='render_info', ctx=Load()), Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[]), attr='create_content', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), For(target=Tuple(elts=[Name(id='m', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='left_margins', ctx=Load()), Name(id='left_margin_widths', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='margin_content', ctx=Store())], value=Call(func=Name(id='render_margin', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_margin', ctx=Load()), args=[Name(id='margin_content', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='move_x', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), AugAssign(target=Name(id='move_x', ctx=Store()), op=Add(), value=Name(id='width', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='move_x', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='right_margin_widths', ctx=Load())], keywords=[]))), For(target=Tuple(elts=[Name(id='m', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='right_margins', ctx=Load()), Name(id='right_margin_widths', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='margin_content', ctx=Store())], value=Call(func=Name(id='render_margin', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_margin', ctx=Load()), args=[Name(id='margin_content', ctx=Load()), Name(id='screen', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='move_x', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), AugAssign(target=Name(id='move_x', ctx=Store()), op=Add(), value=Name(id='width', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_apply_style', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='parent_style', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='screen', ctx=Load()), attr='visible_windows_to_write_positions', ctx=Load()), slice=Name(id='self', ctx=Load()), ctx=Store())], value=Name(id='write_position', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_copy_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ui_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='move_x', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='vertical_scroll', annotation=Name(id='int', ctx=Load())), arg(arg='horizontal_scroll', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='highlight_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='vertical_scroll_2', annotation=Name(id='int', ctx=Load())), arg(arg='always_hide_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='has_focus', annotation=Name(id='bool', ctx=Load())), arg(arg='align', annotation=Name(id='WindowAlign', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=False), Constant(value=False), Constant(value=0), Constant(value=False), Constant(value=False), Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='LEFT', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Copy the UIContent into the output screen.\n        Return (visible_line_to_row_col, rowcol_to_yx) tuple.\n\n        :param get_line_prefix: None or a callable that takes a line number\n            (int) and a wrap_count (int) and returns formatted text.\n        ')), Assign(targets=[Name(id='xpos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Name(id='move_x', ctx=Load()))), Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), Assign(targets=[Name(id='line_count', ctx=Store())], value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='line_count', ctx=Load())), Assign(targets=[Name(id='new_buffer', ctx=Store())], value=Attribute(value=Name(id='new_screen', ctx=Load()), attr='data_buffer', ctx=Load())), Assign(targets=[Name(id='empty_char', ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Constant(value=''), Constant(value='')], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='visible_line_to_row_col', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='rowcol_to_yx', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='copy_line', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='StyleAndTextTuples', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load())), arg(arg='is_input', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n            Copy over a single line to the output screen. This can wrap over\n            multiple lines in the output. It will call the prefix (prompt)\n            function before every line.\n            ')), If(test=Name(id='is_input', ctx=Load()), body=[Assign(targets=[Name(id='current_rowcol_to_yx', ctx=Store())], value=Name(id='rowcol_to_yx', ctx=Load()))], orelse=[Assign(targets=[Name(id='current_rowcol_to_yx', ctx=Store())], value=Dict(keys=[], values=[]))]), If(test=BoolOp(op=And(), values=[Name(id='is_input', ctx=Load()), Name(id='get_line_prefix', ctx=Load())]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='get_line_prefix', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Constant(value=0)], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='copy_line', ctx=Load()), args=[Name(id='prompt', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[keyword(arg='is_input', value=Constant(value=False))]))], orelse=[]), Assign(targets=[Name(id='skipped', ctx=Store())], value=Constant(value=0)), If(test=BoolOp(op=And(), values=[Name(id='horizontal_scroll', ctx=Load()), Name(id='is_input', ctx=Load())]), body=[Assign(targets=[Name(id='h_scroll', ctx=Store())], value=Name(id='horizontal_scroll', ctx=Load())), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='h_scroll', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Name(id='line', ctx=Load())]), body=[AugAssign(target=Name(id='h_scroll', ctx=Store()), op=Sub(), value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), AugAssign(target=Name(id='skipped', ctx=Store()), op=Add(), value=Constant(value=1)), Delete(targets=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Del())])], orelse=[]), AugAssign(target=Name(id='x', ctx=Store()), op=Sub(), value=Name(id='h_scroll', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='CENTER', ctx=Load())]), body=[Assign(targets=[Name(id='line_width', ctx=Store())], value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='line_width', ctx=Load()), ops=[Lt()], comparators=[Name(id='width', ctx=Load())]), body=[AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='line_width', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))], orelse=[])], orelse=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='RIGHT', ctx=Load())]), body=[Assign(targets=[Name(id='line_width', ctx=Store())], value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='line_width', ctx=Load()), ops=[Lt()], comparators=[Name(id='width', ctx=Load())]), body=[AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='line_width', ctx=Load())))], orelse=[])], orelse=[])]), Assign(targets=[Name(id='col', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='wrap_count', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='style', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='line', ctx=Load()), body=[Assign(targets=[Name(id='new_buffer_row', ctx=Store())], value=Subscript(value=Name(id='new_buffer', ctx=Load()), slice=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='ypos', ctx=Load())), ctx=Load())), If(test=Compare(left=Constant(value='[ZeroWidthEscape]'), ops=[In()], comparators=[Name(id='style', ctx=Load())]), body=[AugAssign(target=Subscript(value=Subscript(value=Attribute(value=Name(id='new_screen', ctx=Load()), attr='zero_width_escapes', ctx=Load()), slice=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='ypos', ctx=Load())), ctx=Load()), slice=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), ctx=Store()), op=Add(), value=Name(id='text', ctx=Load())), Continue()], orelse=[]), For(target=Name(id='c', ctx=Store()), iter=Name(id='text', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Name(id='c', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='char_width', ctx=Store())], value=Attribute(value=Name(id='char', ctx=Load()), attr='width', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='wrap_lines', ctx=Load()), Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='char_width', ctx=Load())), ops=[Gt()], comparators=[Name(id='width', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='visible_line_to_row_col', ctx=Load()), slice=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Store())], value=Tuple(elts=[Name(id='lineno', ctx=Load()), BinOp(left=Subscript(value=Subscript(value=Name(id='visible_line_to_row_col', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Name(id='x', ctx=Load()))], ctx=Load())), AugAssign(target=Name(id='y', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='wrap_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=0)), If(test=BoolOp(op=And(), values=[Name(id='is_input', ctx=Load()), Name(id='get_line_prefix', ctx=Load())]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='get_line_prefix', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='wrap_count', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='copy_line', ctx=Load()), args=[Name(id='prompt', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[keyword(arg='is_input', value=Constant(value=False))]))], orelse=[]), Assign(targets=[Name(id='new_buffer_row', ctx=Store())], value=Subscript(value=Name(id='new_buffer', ctx=Load()), slice=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='ypos', ctx=Load())), ctx=Load())), If(test=Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Name(id='width', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='new_buffer_row', ctx=Load()), slice=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), ctx=Store())], value=Name(id='char', ctx=Load())), If(test=Compare(left=Name(id='char_width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='char_width', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='new_buffer_row', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), op=Add(), right=Name(id='i', ctx=Load())), ctx=Store())], value=Name(id='empty_char', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='char_width', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='pw', ctx=Store()), iter=List(elts=[Constant(value=2), Constant(value=1)], ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Sub(), right=Name(id='pw', ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Subscript(value=Name(id='new_buffer_row', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), op=Sub(), right=Name(id='pw', ctx=Load())), ctx=Load()), attr='width', ctx=Load()), ops=[Eq()], comparators=[Name(id='pw', ctx=Load())])]), body=[Assign(targets=[Name(id='prev_char', ctx=Store())], value=Subscript(value=Name(id='new_buffer_row', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), op=Sub(), right=Name(id='pw', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='char2', ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[BinOp(left=Attribute(value=Name(id='prev_char', ctx=Load()), attr='char', ctx=Load()), op=Add(), right=Name(id='c', ctx=Load())), Attribute(value=Name(id='prev_char', ctx=Load()), attr='style', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='new_buffer_row', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load())), op=Sub(), right=Name(id='pw', ctx=Load())), ctx=Store())], value=Name(id='char2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])]), Assign(targets=[Subscript(value=Name(id='current_rowcol_to_yx', ctx=Load()), slice=Tuple(elts=[Name(id='lineno', ctx=Load()), BinOp(left=Name(id='col', ctx=Load()), op=Add(), right=Name(id='skipped', ctx=Load()))], ctx=Load()), ctx=Store())], value=Tuple(elts=[BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='ypos', ctx=Load())), BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='xpos', ctx=Load()))], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='col', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=Name(id='char_width', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='y', ctx=Store())], value=UnaryOp(op=USub(), operand=Name(id='vertical_scroll_2', ctx=Load()))), Assign(targets=[Name(id='lineno', ctx=Store())], value=Name(id='vertical_scroll', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='y', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())]), Compare(left=Name(id='lineno', ctx=Load()), ops=[Lt()], comparators=[Name(id='line_count', ctx=Load())])]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='ui_content', ctx=Load()), attr='get_line', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='visible_line_to_row_col', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='lineno', ctx=Load()), Name(id='horizontal_scroll', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=0)), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store())], value=Call(func=Name(id='copy_line', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[keyword(arg='is_input', value=Constant(value=True))])), AugAssign(target=Name(id='lineno', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='y', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='y', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Expr(value=Call(func=Name(id='copy', ctx=Load()), args=[], keywords=[])), FunctionDef(name='cursor_pos_to_screen_pos', args=arguments(posonlyargs=[], args=[arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='col', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Translate row/col from UIContent to real Screen coordinates.')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='y', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='rowcol_to_yx', ctx=Load()), slice=Tuple(elts=[Name(id='row', ctx=Load()), Name(id='col', ctx=Load())], ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))]))])], orelse=[Return(value=Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Name(id='x', ctx=Load())), keyword(arg='y', value=Name(id='y', ctx=Load()))]))], finalbody=[])], decorator_list=[], returns=Name(id='Point', ctx=Load())), If(test=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), body=[Assign(targets=[Name(id='screen_cursor_position', ctx=Store())], value=Call(func=Name(id='cursor_pos_to_screen_pos', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='x', ctx=Load())], keywords=[])), If(test=Name(id='has_focus', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='set_cursor_position', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='screen_cursor_position', ctx=Load())], keywords=[])), If(test=Name(id='always_hide_cursor', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='new_screen', ctx=Load()), attr='show_cursor', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id='new_screen', ctx=Load()), attr='show_cursor', ctx=Store())], value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='show_cursor', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_highlight_digraph', ctx=Load()), args=[Name(id='new_screen', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='highlight_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_highlight_cursorlines', ctx=Load()), args=[Name(id='new_screen', ctx=Load()), Name(id='screen_cursor_position', ctx=Load()), Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='has_focus', ctx=Load()), Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_show_key_processor_key_buffer', ctx=Load()), args=[Name(id='new_screen', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='ui_content', ctx=Load()), attr='menu_position', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='set_menu_position', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Name(id='cursor_pos_to_screen_pos', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='menu_position', ctx=Load()), attr='y', ctx=Load()), Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='menu_position', ctx=Load()), attr='x', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='new_screen', ctx=Load()), attr='height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='new_screen', ctx=Load()), attr='height', ctx=Load()), BinOp(left=Name(id='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load()))], keywords=[])), Return(value=Tuple(elts=[Name(id='visible_line_to_row_col', ctx=Load()), Name(id='rowcol_to_yx', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_fill_bg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Erase/fill the background.\n        (Useful for floats and when a `char` has been given.)\n        ')), AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='char', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='char', ctx=Load()))]), If(test=BoolOp(op=Or(), values=[Name(id='erase_bg', ctx=Load()), Name(id='char', ctx=Load())]), body=[Assign(targets=[Name(id='wp', ctx=Store())], value=Name(id='write_position', ctx=Load())), Assign(targets=[Name(id='char_obj', ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[BoolOp(op=Or(), values=[Name(id='char', ctx=Load()), Constant(value=' ')]), Constant(value='')], ctx=Load()), ctx=Load())), For(target=Name(id='y', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='wp', ctx=Load()), attr='ypos', ctx=Load()), BinOp(left=Attribute(value=Name(id='wp', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='wp', ctx=Load()), attr='height', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Name(id='y', ctx=Load()), ctx=Load())), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='wp', ctx=Load()), attr='xpos', ctx=Load()), BinOp(left=Attribute(value=Name(id='wp', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='wp', ctx=Load()), attr='width', ctx=Load()))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Store())], value=Name(id='char_obj', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_apply_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='parent_style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='fill_area', ctx=Load()), args=[Name(id='write_position', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='after', value=Constant(value=False))])), Assign(targets=[Name(id='wp', ctx=Store())], value=Call(func=Name(id='WritePosition', ctx=Load()), args=[Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), BinOp(left=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())), op=Sub(), right=Constant(value=1)), Attribute(value=Name(id='write_position', ctx=Load()), attr='width', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='fill_area', ctx=Load()), args=[Name(id='wp', ctx=Load()), Constant(value='class:last-line')], keywords=[keyword(arg='after', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_highlight_digraph', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        When we are in Vi digraph mode, put a question mark underneath the\n        cursor.\n        ')), Assign(targets=[Name(id='digraph_char', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digraph_char', ctx=Load()), args=[], keywords=[])), If(test=Name(id='digraph_char', ctx=Load()), body=[Assign(targets=[Name(id='cpos', ctx=Store())], value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='get_cursor_position', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='new_screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='y', ctx=Load()), ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Name(id='digraph_char', ctx=Load()), Constant(value='class:digraph')], ctx=Load()), ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_show_key_processor_key_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        When the user is typing a key binding that consists of several keys,\n        display the last pressed key if the user is in insert mode and the key\n        is meaningful to be displayed.\n        E.g. Some people want to bind 'jj' to escape in Vi insert mode. But the\n             first 'j' needs to be displayed in order to get some feedback.\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='key_buffer', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='key_buffer', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='key_buffer', ctx=Load()), Call(func=Name(id='_in_insert_mode', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='app', ctx=Load()), attr='is_done', ctx=Load()))]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='key_buffer', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='data', ctx=Load())), If(test=Compare(left=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='cpos', ctx=Store())], value=Call(func=Attribute(value=Name(id='new_screen', ctx=Load()), attr='get_cursor_position', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='new_screen', ctx=Load()), attr='data_buffer', ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='y', ctx=Load()), ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Name(id='data', ctx=Load()), Constant(value='class:partial-key-binding')], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_highlight_cursorlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='cpos', annotation=Name(id='Point', ctx=Load())), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Highlight cursor row/column.\n        ')), Assign(targets=[Name(id='cursor_line_style', ctx=Store())], value=Constant(value=' class:cursor-line ')), Assign(targets=[Name(id='cursor_column_style', ctx=Store())], value=Constant(value=' class:cursor-column ')), Assign(targets=[Name(id='data_buffer', ctx=Store())], value=Attribute(value=Name(id='new_screen', ctx=Load()), attr='data_buffer', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursorline', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='data_buffer', ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='y', ctx=Load()), ctx=Load())), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load()), BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='original_char', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='original_char', ctx=Load()), attr='char', ctx=Load()), BinOp(left=Attribute(value=Name(id='original_char', ctx=Load()), attr='style', ctx=Load()), op=Add(), right=Name(id='cursor_line_style', ctx=Load()))], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursorcolumn', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='y2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='y', ctx=Load()), BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='height', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='data_buffer', ctx=Load()), slice=Name(id='y2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='original_char', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=Attribute(value=Name(id='cpos', ctx=Load()), attr='x', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='original_char', ctx=Load()), attr='char', ctx=Load()), BinOp(left=Attribute(value=Name(id='original_char', ctx=Load()), attr='style', ctx=Load()), op=Add(), right=Name(id='cursor_column_style', ctx=Load()))], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='colorcolumns', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='colorcolumns', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='colorcolumns', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='colorcolumns', ctx=Store())], value=Call(func=Name(id='colorcolumns', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='cc', ctx=Store()), iter=Name(id='colorcolumns', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cc', ctx=Load()), Name(id='ColorColumn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='column', ctx=Store())], value=Attribute(value=Name(id='cc', ctx=Load()), attr='position', ctx=Load())), If(test=Compare(left=Name(id='column', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))]), body=[Assign(targets=[Name(id='color_column_style', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Attribute(value=Name(id='cc', ctx=Load()), attr='style', ctx=Load()))), For(target=Name(id='y2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='y', ctx=Load()), BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='height', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='data_buffer', ctx=Load()), slice=Name(id='y2', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='original_char', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=BinOp(left=Name(id='column', ctx=Load()), op=Add(), right=Name(id='x', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Name(id='row', ctx=Load()), slice=BinOp(left=Name(id='column', ctx=Load()), op=Add(), right=Name(id='x', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='_CHAR_CACHE', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='original_char', ctx=Load()), attr='char', ctx=Load()), BinOp(left=Attribute(value=Name(id='original_char', ctx=Load()), attr='style', ctx=Load()), op=Add(), right=Name(id='color_column_style', ctx=Load()))], ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_copy_margin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='margin_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='new_screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='move_x', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Copy characters from the margin screen to the real screen.\n        ')), Assign(targets=[Name(id='xpos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='write_position', ctx=Load()), attr='xpos', ctx=Load()), op=Add(), right=Name(id='move_x', ctx=Load()))), Assign(targets=[Name(id='ypos', ctx=Store())], value=Attribute(value=Name(id='write_position', ctx=Load()), attr='ypos', ctx=Load())), Assign(targets=[Name(id='margin_write_position', ctx=Store())], value=Call(func=Name(id='WritePosition', ctx=Load()), args=[Name(id='xpos', ctx=Load()), Name(id='ypos', ctx=Load()), Name(id='width', ctx=Load()), Attribute(value=Name(id='write_position', ctx=Load()), attr='height', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_body', ctx=Load()), args=[Name(id='margin_content', ctx=Load()), Name(id='new_screen', ctx=Load()), Name(id='margin_write_position', ctx=Load()), Constant(value=0), Name(id='width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_scroll', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ui_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Scroll body. Ensure that the cursor is visible.\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='func', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_scroll_when_linewrapping', ctx=Load()))], orelse=[Assign(targets=[Name(id='func', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_scroll_without_linewrapping', ctx=Load()))]), Expr(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='ui_content', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_scroll_when_linewrapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ui_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Scroll to make sure the cursor position is visible and that we maintain\n        the requested scroll offset.\n\n        Set `self.horizontal_scroll/vertical_scroll`.\n        ')), Assign(targets=[Name(id='scroll_offsets_bottom', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scroll_offsets', ctx=Load()), attr='bottom', ctx=Load())), Assign(targets=[Name(id='scroll_offsets_top', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scroll_offsets', ctx=Load()), attr='top', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Store())], value=Constant(value=0)), FunctionDef(name='get_line_height', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='ui_content', ctx=Load()), attr='get_height_for_line', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), If(test=Compare(left=Name(id='width', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Constant(value=0)), Return()], orelse=[]), Assign(targets=[Name(id='line_height', ctx=Store())], value=Call(func=Name(id='get_line_height', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='line_height', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Name(id='scroll_offsets_top', ctx=Load()))]), body=[Assign(targets=[Name(id='text_before_height', ctx=Store())], value=Call(func=Attribute(value=Name(id='ui_content', ctx=Load()), attr='get_height_for_line', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), Name(id='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load())], keywords=[keyword(arg='slice_stop', value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='x', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='text_before_height', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='line_height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='text_before_height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Load())], keywords=[])), Return()], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Constant(value=0))]), FunctionDef(name='get_min_vertical_scroll', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='used_height', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), For(target=Name(id='lineno', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='used_height', ctx=Store()), op=Add(), value=Call(func=Name(id='get_line_height', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='used_height', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Name(id='scroll_offsets_bottom', ctx=Load()))]), body=[Return(value=Name(id='prev_lineno', ctx=Load()))], orelse=[Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=Name(id='lineno', ctx=Load()))])], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_max_vertical_scroll', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), Assign(targets=[Name(id='used_height', ctx=Store())], value=Constant(value=0)), For(target=Name(id='lineno', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='used_height', ctx=Store()), op=Add(), value=Call(func=Name(id='get_line_height', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='used_height', ctx=Load()), ops=[Gt()], comparators=[Name(id='scroll_offsets_top', ctx=Load())]), body=[Return(value=Name(id='prev_lineno', ctx=Load()))], orelse=[Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=Name(id='lineno', ctx=Load()))])], orelse=[]), Return(value=Name(id='prev_lineno', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_topmost_visible', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Calculate the upper most line that can be visible, while the bottom\n            is still visible. We should not allow scroll more than this if\n            `allow_scroll_beyond_bottom` is false.\n            ')), Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='ui_content', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='used_height', ctx=Store())], value=Constant(value=0)), For(target=Name(id='lineno', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='ui_content', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='used_height', ctx=Store()), op=Add(), value=Call(func=Name(id='get_line_height', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='used_height', ctx=Load()), ops=[Gt()], comparators=[Name(id='height', ctx=Load())]), body=[Return(value=Name(id='prev_lineno', ctx=Load()))], orelse=[Assign(targets=[Name(id='prev_lineno', ctx=Store())], value=Name(id='lineno', ctx=Load()))])], orelse=[]), Return(value=Name(id='prev_lineno', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='topmost_visible', ctx=Store())], value=Call(func=Name(id='get_topmost_visible', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[Name(id='topmost_visible', ctx=Load()), Call(func=Name(id='get_min_vertical_scroll', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), Call(func=Name(id='get_max_vertical_scroll', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='allow_scroll_beyond_bottom', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), Name(id='topmost_visible', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_scroll_without_linewrapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ui_content', annotation=Name(id='UIContent', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Scroll to make sure the cursor position is visible and that we maintain\n        the requested scroll offset.\n\n        Set `self.horizontal_scroll/vertical_scroll`.\n        ')), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Constant(value=0))])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Attribute(value=Name(id='ui_content', ctx=Load()), attr='line_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Store())], value=Constant(value=0)), Return()], orelse=[Assign(targets=[Name(id='current_line_text', ctx=Store())], value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ui_content', ctx=Load()), attr='get_line', ctx=Load()), args=[Attribute(value=Name(id='cursor_position', ctx=Load()), attr='y', ctx=Load())], keywords=[])], keywords=[]))]), FunctionDef(name='do_scroll', args=arguments(posonlyargs=[], args=[arg(arg='current_scroll', annotation=Name(id='int', ctx=Load())), arg(arg='scroll_offset_start', annotation=Name(id='int', ctx=Load())), arg(arg='scroll_offset_end', annotation=Name(id='int', ctx=Load())), arg(arg='cursor_pos', annotation=Name(id='int', ctx=Load())), arg(arg='window_size', annotation=Name(id='int', ctx=Load())), arg(arg='content_size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scrolling algorithm. Used for both horizontal and vertical scrolling.')), Assign(targets=[Name(id='scroll_offset_start', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='scroll_offset_start', ctx=Load()), BinOp(left=Name(id='window_size', ctx=Load()), op=Div(), right=Constant(value=2)), Name(id='cursor_pos', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='scroll_offset_end', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='scroll_offset_end', ctx=Load()), BinOp(left=Name(id='window_size', ctx=Load()), op=Div(), right=Constant(value=2)), BinOp(left=BinOp(left=Name(id='content_size', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='cursor_pos', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='current_scroll', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='current_scroll', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='allow_scroll_beyond_bottom', ctx=Load()), args=[], keywords=[])), Compare(left=Name(id='current_scroll', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='content_size', ctx=Load()), op=Sub(), right=Name(id='window_size', ctx=Load()))])]), body=[Assign(targets=[Name(id='current_scroll', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='content_size', ctx=Load()), op=Sub(), right=Name(id='window_size', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='current_scroll', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Name(id='cursor_pos', ctx=Load()), op=Sub(), right=Name(id='scroll_offset_start', ctx=Load()))]), body=[Assign(targets=[Name(id='current_scroll', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='cursor_pos', ctx=Load()), op=Sub(), right=Name(id='scroll_offset_start', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='current_scroll', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=BinOp(left=BinOp(left=Name(id='cursor_pos', ctx=Load()), op=Add(), right=Constant(value=1)), op=Sub(), right=Name(id='window_size', ctx=Load())), op=Add(), right=Name(id='scroll_offset_end', ctx=Load()))]), body=[Assign(targets=[Name(id='current_scroll', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cursor_pos', ctx=Load()), op=Add(), right=Constant(value=1)), op=Sub(), right=Name(id='window_size', ctx=Load())), op=Add(), right=Name(id='scroll_offset_end', ctx=Load())))], orelse=[]), Return(value=Name(id='current_scroll', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='get_vertical_scroll', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_vertical_scroll', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='get_horizontal_scroll', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_horizontal_scroll', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='offsets', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='scroll_offsets', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store())], value=Call(func=Name(id='do_scroll', ctx=Load()), args=[], keywords=[keyword(arg='current_scroll', value=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load())), keyword(arg='scroll_offset_start', value=Attribute(value=Name(id='offsets', ctx=Load()), attr='top', ctx=Load())), keyword(arg='scroll_offset_end', value=Attribute(value=Name(id='offsets', ctx=Load()), attr='bottom', ctx=Load())), keyword(arg='cursor_pos', value=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load())), keyword(arg='window_size', value=Name(id='height', ctx=Load())), keyword(arg='content_size', value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='line_count', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load()), body=[Assign(targets=[Name(id='current_line_prefix_width', ctx=Store())], value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_line_prefix', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), Constant(value=0)], keywords=[])], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='current_line_prefix_width', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Store())], value=Call(func=Name(id='do_scroll', ctx=Load()), args=[], keywords=[keyword(arg='current_scroll', value=Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Load())), keyword(arg='scroll_offset_start', value=Attribute(value=Name(id='offsets', ctx=Load()), attr='left', ctx=Load())), keyword(arg='scroll_offset_end', value=Attribute(value=Name(id='offsets', ctx=Load()), attr='right', ctx=Load())), keyword(arg='cursor_pos', value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Subscript(value=Name(id='current_line_text', ctx=Load()), slice=Slice(upper=Attribute(value=Attribute(value=Name(id='ui_content', ctx=Load()), attr='cursor_position', ctx=Load()), attr='x', ctx=Load())), ctx=Load())], keywords=[])), keyword(arg='window_size', value=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='current_line_prefix_width', ctx=Load()))), keyword(arg='content_size', value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='current_line_text', ctx=Load())], keywords=[]), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='horizontal_scroll', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))], keywords=[]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Mouse handler. Called when the UI control doesn't handle this\n        particular event.\n\n        Return `NotImplemented` if nothing was done as a consequence of this\n        key binding (no UI invalidate required in that case).\n        ")), If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_DOWN', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scroll_down', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_UP', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_scroll_up', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=None))], orelse=[])]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Name(id='NotImplementedOrNone', ctx=Load())), FunctionDef(name='_scroll_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scroll window down.')), Assign(targets=[Name(id='info', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='render_info', ctx=Load())), If(test=Compare(left=Name(id='info', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='content_height', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='info', ctx=Load()), attr='window_height', ctx=Load()))]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='configured_scroll_offsets', ctx=Load()), attr='top', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='move_cursor_down', ctx=Load()), args=[], keywords=[]))], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_scroll_up', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scroll window up.')), Assign(targets=[Name(id='info', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='render_info', ctx=Load())), If(test=Compare(left=Name(id='info', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='info', ctx=Load()), attr='vertical_scroll', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='cursor_position', ctx=Load()), attr='y', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='window_height', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Sub(), right=Attribute(value=Attribute(value=Name(id='info', ctx=Load()), attr='configured_scroll_offsets', ctx=Load()), attr='bottom', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='move_cursor_up', ctx=Load()), args=[], keywords=[]))], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_scroll', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='get_key_bindings', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ConditionalContainer', bases=[Name(id='Container', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Wrapper around any other container that can change the visibility. The\n    received `filter` determines whether the given container should be\n    displayed or not.\n\n    :param content: :class:`.Container` instance.\n    :param filter: :class:`.Filter` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Store())], value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ConditionalContainer('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), conversion=114), Constant(value=', filter='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_width', ctx=Load()), args=[Name(id='max_available_width', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='Dimension', ctx=Load()), attr='zero', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='max_available_height', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='Dimension', ctx=Load()), attr='zero', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='parent_style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DynamicContainer', bases=[Name(id='Container', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Container class that dynamically returns any Container.\n\n    :param get_container: Callable that returns a :class:`.Container` instance\n        or any widget with a ``__pt_container__`` method.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_container', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='AnyContainer', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_container', ctx=Store())], value=Name(id='get_container', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_container', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the current container object.\n\n        We call `to_container`, because `get_container` can also return a\n        widget with a ``__pt_container__`` method.\n        ')), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_container', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='to_container', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_container', ctx=Load()), args=[], keywords=[]), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='preferred_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_available_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_container', ctx=Load()), args=[], keywords=[]), attr='preferred_width', ctx=Load()), args=[Name(id='max_available_width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='preferred_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='max_available_height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_container', ctx=Load()), args=[], keywords=[]), attr='preferred_height', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='max_available_height', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='write_to_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='screen', annotation=Name(id='Screen', ctx=Load())), arg(arg='mouse_handlers', annotation=Name(id='MouseHandlers', ctx=Load())), arg(arg='write_position', annotation=Name(id='WritePosition', ctx=Load())), arg(arg='parent_style', annotation=Name(id='str', ctx=Load())), arg(arg='erase_bg', annotation=Name(id='bool', ctx=Load())), arg(arg='z_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_container', ctx=Load()), args=[], keywords=[]), attr='write_to_screen', ctx=Load()), args=[Name(id='screen', ctx=Load()), Name(id='mouse_handlers', ctx=Load()), Name(id='write_position', ctx=Load()), Name(id='parent_style', ctx=Load()), Name(id='erase_bg', ctx=Load()), Name(id='z_index', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_modal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_container', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Container', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='to_container', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='AnyContainer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Make sure that the given object is a :class:`.Container`.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='container', ctx=Load()), Name(id='Container', ctx=Load())], keywords=[]), body=[Return(value=Name(id='container', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='container', ctx=Load()), Constant(value='__pt_container__')], keywords=[]), body=[Return(value=Call(func=Name(id='to_container', ctx=Load()), args=[Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='__pt_container__', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Not a container object: '), FormattedValue(value=Name(id='container', ctx=Load()), conversion=114)])], keywords=[]))])])], decorator_list=[], returns=Name(id='Container', ctx=Load())), FunctionDef(name='to_window', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='AnyContainer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Make sure that the given argument is a :class:`.Window`.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='container', ctx=Load()), Name(id='Window', ctx=Load())], keywords=[]), body=[Return(value=Name(id='container', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='container', ctx=Load()), Constant(value='__pt_container__')], keywords=[]), body=[Return(value=Call(func=Name(id='to_window', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='MagicContainer'), Name(id='container', ctx=Load())], keywords=[]), attr='__pt_container__', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Not a Window object: '), FormattedValue(value=Name(id='container', ctx=Load()), conversion=114), Constant(value='.')])], keywords=[]))])])], decorator_list=[], returns=Name(id='Window', ctx=Load())), FunctionDef(name='is_container', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Checks whether the given value is a container object\n    (for use in assert statements).\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Container', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__pt_container__')], keywords=[]), body=[Return(value=Call(func=Name(id='is_container', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='MagicContainer'), Name(id='value', ctx=Load())], keywords=[]), attr='__pt_container__', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Subscript(value=Name(id='TypeGuard', ctx=Load()), slice=Name(id='AnyContainer', ctx=Load()), ctx=Load()))], type_ignores=[])