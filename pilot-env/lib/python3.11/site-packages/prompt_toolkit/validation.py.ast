Module(body=[Expr(value=Constant(value='\nInput validation for a `Buffer`.\n(Validators will be called before accepting input.)\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='run_in_executor_with_context')], level=0), ImportFrom(module='document', names=[alias(name='Document')], level=1), ImportFrom(module='filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='ConditionalValidator'), Constant(value='ValidationError'), Constant(value='Validator'), Constant(value='ThreadedValidator'), Constant(value='DummyValidator'), Constant(value='DynamicValidator')], ctx=Load())), ClassDef(name='ValidationError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Error raised by :meth:`.Validator.validate`.\n\n    :param cursor_position: The cursor position where the error occurred.\n    :param message: Text.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor_position', annotation=Name(id='int', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Name(id='cursor_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(cursor_position={!r}, message={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Validator', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Abstract base class for an input validator.\n\n    A validator is typically created in one of the following two ways:\n\n    - Either by overriding this class and implementing the `validate` method.\n    - Or by passing a callable to `Validator.from_callable`.\n\n    If the validation takes some time and needs to happen in a background\n    thread, this can be wrapped in a :class:`.ThreadedValidator`.\n    ')), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Validate the input.\n        If invalid, this should raise a :class:`.ValidationError`.\n\n        :param document: :class:`~prompt_toolkit.document.Document` instance.\n        ')), Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), AsyncFunctionDef(name='validate_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a `Future` which is set when the validation is ready.\n        This function can be overloaded in order to provide an asynchronous\n        implementation.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValidationError', ctx=Load()), body=[Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_callable', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='validate_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='error_message', annotation=Name(id='str', ctx=Load())), arg(arg='move_cursor_to_end', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='Invalid input'), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Create a validator from a simple validate callable. E.g.:\n\n        .. code:: python\n\n            def is_valid(text):\n                return text in ['hello', 'world']\n            Validator.from_callable(is_valid, error_message='Invalid input')\n\n        :param validate_func: Callable that takes the input string, and returns\n            `True` if the input is valid input.\n        :param error_message: Message to be displayed if the input is invalid.\n        :param move_cursor_to_end: Move the cursor to the end of the input, if\n            the input is invalid.\n        ")), Return(value=Call(func=Name(id='_ValidatorFromCallable', ctx=Load()), args=[Name(id='validate_func', ctx=Load()), Name(id='error_message', ctx=Load()), Name(id='move_cursor_to_end', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Validator', ctx=Load()))], decorator_list=[]), ClassDef(name='_ValidatorFromCallable', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Validate input from a simple callable.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='error_message', annotation=Name(id='str', ctx=Load())), arg(arg='move_cursor_to_end', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Store())], value=Name(id='func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='error_message', ctx=Store())], value=Name(id='error_message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='move_cursor_to_end', ctx=Store())], value=Name(id='move_cursor_to_end', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Validator.from_callable('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[])), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='move_cursor_to_end', ctx=Load()), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0))]), Raise(exc=Call(func=Name(id='ValidationError', ctx=Load()), args=[], keywords=[keyword(arg='cursor_position', value=Name(id='index', ctx=Load())), keyword(arg='message', value=Attribute(value=Name(id='self', ctx=Load()), attr='error_message', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ThreadedValidator', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Wrapper that runs input validation in a thread.\n    (Use this to prevent the user interface from becoming unresponsive if the\n    input validation takes too much time.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='validator', annotation=Name(id='Validator', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='validate_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Run the `validate` function in a thread.\n        ')), FunctionDef(name='run_validation_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Await(value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='run_validation_thread', ctx=Load())], keywords=[])))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DummyValidator', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Validator class that accepts any input.\n    ')), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ConditionalValidator', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Validator that can be switched on/off according to\n    a filter. (This wraps around another validator.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='validator', annotation=Name(id='Validator', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DynamicValidator', bases=[Name(id='Validator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Validator class that can dynamically returns any Validator.\n\n    :param get_validator: Callable that returns a :class:`.Validator` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_validator', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_validator', ctx=Store())], value=Name(id='get_validator', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_validator', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyValidator', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='validate_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_validator', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyValidator', ctx=Load()), args=[], keywords=[])])), Expr(value=Await(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate_async', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[])))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])