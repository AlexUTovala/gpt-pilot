Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='xml.dom.minidom', asname='minidom')]), ImportFrom(module='string', names=[alias(name='Formatter')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='base', names=[alias(name='FormattedText'), alias(name='StyleAndTextTuples')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='HTML')], ctx=Load())), ClassDef(name='HTML', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    HTML formatted text.\n    Take something HTML-like, for use as a formatted string.\n\n    ::\n\n        # Turn something into red.\n        HTML(\'<style fg="ansired" bg="#00ff44">...</style>\')\n\n        # Italic, bold, underline and strike.\n        HTML(\'<i>...</i>\')\n        HTML(\'<b>...</b>\')\n        HTML(\'<u>...</u>\')\n        HTML(\'<s>...</s>\')\n\n    All HTML elements become available as a "class" in the style sheet.\n    E.g. ``<username>...</username>`` can be styled, by setting a style for\n    ``username``.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Attribute(value=Name(id='minidom', ctx=Load()), attr='parseString', ctx=Load()), args=[JoinedStr(values=[Constant(value='<html-root>'), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value='</html-root>')])], keywords=[])), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='name_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='fg_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='bg_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='get_current_style', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build style string for current node.')), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='name_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='class:'), op=Add(), right=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='name_stack', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Name(id='fg_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='fg:'), op=Add(), right=Subscript(value=Name(id='fg_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[]))], orelse=[]), If(test=Name(id='bg_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='bg:'), op=Add(), right=Subscript(value=Name(id='bg_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='process_node', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Process node recursively.')), For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='childNodes', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='child', ctx=Load()), attr='nodeType', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='child', ctx=Load()), attr='TEXT_NODE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='get_current_style', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='child', ctx=Load()), attr='data', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='add_to_name_stack', ctx=Store())], value=Compare(left=Attribute(value=Name(id='child', ctx=Load()), attr='nodeName', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='#document'), Constant(value='html-root'), Constant(value='style')], ctx=Load())])), Assign(targets=[Name(id='fg', ctx=Store()), Name(id='bg', ctx=Store())], value=Constant(value='')), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='child', ctx=Load()), attr='attributes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='fg')]), body=[Assign(targets=[Name(id='fg', ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='bg')]), body=[Assign(targets=[Name(id='bg', ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='color')]), body=[Assign(targets=[Name(id='fg', ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value=' '), ops=[In()], comparators=[Name(id='fg', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='"fg" attribute contains a space.')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=' '), ops=[In()], comparators=[Name(id='bg', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='"bg" attribute contains a space.')], keywords=[]))], orelse=[]), If(test=Name(id='add_to_name_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='name_stack', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='child', ctx=Load()), attr='nodeName', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='fg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fg_stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fg', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='bg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='bg_stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='bg', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='process_node', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])), If(test=Name(id='add_to_name_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='name_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='fg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fg_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='bg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='bg_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='process_node', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatted_text', ctx=Store())], value=Call(func=Name(id='FormattedText', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='HTML('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__pt_formatted_text__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='formatted_text', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='object', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n        Like `str.format`, but make sure that the arguments are properly\n        escaped.\n        ')), Return(value=Call(func=Name(id='HTML', ctx=Load()), args=[Call(func=Attribute(value=Name(id='FORMATTER', ctx=Load()), attr='vformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='HTML', ctx=Load())), FunctionDef(name='__mod__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        HTML('<b>%s</b>') % value\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Tuple(elts=[Name(id='value', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='html_escape', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='value', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='HTML', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), op=Mod(), right=Name(id='value', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='HTML', ctx=Load()))], decorator_list=[]), ClassDef(name='HTMLFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[FunctionDef(name='format_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='object', ctx=Load())), arg(arg='format_spec', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='html_escape', ctx=Load()), args=[Call(func=Name(id='format', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='format_spec', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='html_escape', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='&'), Constant(value='&amp;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='<'), Constant(value='&lt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), Constant(value='&gt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='"'), Constant(value='&quot;')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='FORMATTER', ctx=Store())], value=Call(func=Name(id='HTMLFormatter', ctx=Load()), args=[], keywords=[]))], type_ignores=[])