Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Iterable'), alias(name='List'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseEvent')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Protocol')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='NotImplementedOrNone')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='OneStyleAndTextTuple'), Constant(value='StyleAndTextTuples'), Constant(value='MagicFormattedText'), Constant(value='AnyFormattedText'), Constant(value='to_formatted_text'), Constant(value='is_formatted_text'), Constant(value='Template'), Constant(value='merge_formatted_text'), Constant(value='FormattedText')], ctx=Load())), Assign(targets=[Name(id='OneStyleAndTextTuple', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='MouseEvent', ctx=Load())], ctx=Load()), Constant(value='NotImplementedOrNone')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='StyleAndTextTuples', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='OneStyleAndTextTuple', ctx=Load()), ctx=Load())), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='TypeGuard')], level=0), ClassDef(name='MagicFormattedText', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        Any object that implements ``__pt_formatted_text__`` represents formatted\n        text.\n        ')), FunctionDef(name='__pt_formatted_text__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='AnyFormattedText', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='MagicFormattedText'), Name(id='StyleAndTextTuples', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='to_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='auto_convert', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Convert the given value (which can be formatted text) into a list of text\n    fragments. (Which is the canonical form of formatted text.) The outcome is\n    always a `FormattedText` instance, which is a list of (style, text) tuples.\n\n    It can take a plain text string, an `HTML` or `ANSI` object, anything that\n    implements `__pt_formatted_text__` or a callable that takes no arguments and\n    returns one of those.\n\n    :param style: An additional style string which is applied to all text\n        fragments.\n    :param auto_convert: If `True`, also accept other types, and convert them\n        to a string first.\n    ')), AnnAssign(target=Name(id='result', ctx=Store()), annotation=BinOp(left=Name(id='FormattedText', ctx=Load()), op=BitOr(), right=Name(id='StyleAndTextTuples', ctx=Load())), simple=1), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value=''), Name(id='value', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__pt_formatted_text__')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='MagicFormattedText'), Name(id='value', ctx=Load())], keywords=[]), attr='__pt_formatted_text__', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Call(func=Name(id='value', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[If(test=Name(id='auto_convert', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value=''), JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], ctx=Load())], ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No formatted text. Expecting a unicode object, HTML, ANSI or a FormattedText instance. Got '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)])], keywords=[]))])])])])])]), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='StyleAndTextTuples', ctx=Load()), ListComp(elt=Tuple(elts=[BinOp(left=BinOp(left=Name(id='style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='item_style', ctx=Load())), Starred(value=Name(id='rest', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='item_style', ctx=Store()), Starred(value=Name(id='rest', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='result', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='FormattedText', ctx=Load())], keywords=[]), body=[Return(value=Name(id='result', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='FormattedText', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='FormattedText', ctx=Load())), FunctionDef(name='is_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Check whether the input is valid formatted text (for use in assert\n    statements).\n    In case of a callable, it doesn't check the return type.\n    ")), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__pt_formatted_text__')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Subscript(value=Name(id='TypeGuard', ctx=Load()), slice=Name(id='AnyFormattedText', ctx=Load()), ctx=Load())), ClassDef(name='FormattedText', bases=[Name(id='StyleAndTextTuples', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A list of ``(style, text)`` tuples.\n\n    (In some situations, this can also be ``(style, text, mouse_handler)``\n    tuples.)\n    ')), FunctionDef(name='__pt_formatted_text__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='FormattedText(%s)'), op=Mod(), right=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__repr__', ctx=Load()), args=[], keywords=[])))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Template', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Template for string interpolation with formatted text.\n\n    Example::\n\n        Template(' ... {} ... ').format(HTML(...))\n\n    :param text: Plain text.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Constant(value='{0}'), ops=[NotIn()], comparators=[Name(id='text', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='values', annotation=Name(id='AnyFormattedText', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='get_result', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='{}')], keywords=[])), Assert(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FormattedText', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='part', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='parts', ctx=Load()), Name(id='values', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Name(id='part', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), Return(value=Name(id='get_result', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_formatted_text', args=arguments(posonlyargs=[], args=[arg(arg='items', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='AnyFormattedText', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Merge (Concatenate) several pieces of formatted text together.\n    ')), FunctionDef(name='_merge_formatted_text', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='FormattedText', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), Return(value=Name(id='_merge_formatted_text', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load()))], type_ignores=[])