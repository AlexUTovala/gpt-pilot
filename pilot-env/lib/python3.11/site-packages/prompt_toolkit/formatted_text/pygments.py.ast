Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='prompt_toolkit.styles.pygments', names=[alias(name='pygments_token_to_classname')], level=0), ImportFrom(module='base', names=[alias(name='StyleAndTextTuples')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pygments.token', names=[alias(name='Token')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='PygmentsTokens')], ctx=Load())), ClassDef(name='PygmentsTokens', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Turn a pygments token list into a list of prompt_toolkit text fragments\n    (``(style_str, text)`` tuples).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token_list', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Token', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='token_list', ctx=Store())], value=Name(id='token_list', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_formatted_text__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='token', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='token_list', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='class:'), op=Add(), right=Call(func=Name(id='pygments_token_to_classname', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Name(id='text', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load()))], decorator_list=[])], type_ignores=[])