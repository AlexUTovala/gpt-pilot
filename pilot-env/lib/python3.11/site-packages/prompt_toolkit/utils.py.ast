Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='ContextManager'), alias(name='Dict'), alias(name='Generator'), alias(name='Generic'), alias(name='TypeVar'), alias(name='Union')], level=0), ImportFrom(module='wcwidth', names=[alias(name='wcwidth')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Event'), Constant(value='DummyContext'), Constant(value='get_cwidth'), Constant(value='suspend_to_background_supported'), Constant(value='is_conemu_ansi'), Constant(value='is_windows'), Constant(value='in_main_thread'), Constant(value='get_bell_environment_variable'), Constant(value='get_term_environment_variable'), Constant(value='take_using_weights'), Constant(value='to_str'), Constant(value='to_int'), Constant(value='AnyFloat'), Constant(value='to_float'), Constant(value='is_dumb_terminal')], ctx=Load())), Assign(targets=[Name(id='SPHINX_AUTODOC_RUNNING', ctx=Store())], value=Compare(left=Constant(value='sphinx.ext.autodoc'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())])), Assign(targets=[Name(id='_Sender', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_Sender')], keywords=[keyword(arg='covariant', value=Constant(value=True))])), ClassDef(name='Event', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_Sender', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Simple event to which event handlers can be attached. For instance::\n\n        class Cls:\n            def __init__(self):\n                # Define event. The first parameter is the sender.\n                self.event = Event(self)\n\n        obj = Cls()\n\n        def handler(sender):\n            pass\n\n        # Add event handler by using the += operator.\n        obj.event += handler\n\n        # Fire event.\n        obj.event()\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sender', annotation=Name(id='_Sender', ctx=Load())), arg(arg='handler', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sender', ctx=Store())], value=Name(id='sender', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_handlers', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), If(test=Compare(left=Name(id='handler', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='self', ctx=Store()), op=Add(), value=Name(id='handler', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fire event.')), For(target=Name(id='handler', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_handlers', ctx=Load()), body=[Expr(value=Call(func=Name(id='handler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sender', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fire', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Alias for just calling the event.')), Expr(value=Call(func=Name(id='self', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add another handler to this callback.\n        (Handler should be a callable that takes exactly one parameter: the\n        sender object.)\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_handlers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='remove_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remove a handler from this callback.\n        ')), If(test=Compare(left=Name(id='handler', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_handlers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_handlers', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__iadd__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        `event += handler` notation for adding a handler.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_handler', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='_Sender', ctx=Load()), ctx=Load())), FunctionDef(name='__isub__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_Sender', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        `event -= handler` notation for removing a handler.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove_handler', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='_Sender', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DummyContext', bases=[Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    (contextlib.nested is not available on Py3)\n    ')), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_CharSizesCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Cache for wcwidth sizes.\n    ')), Assign(targets=[Name(id='LONG_STRING_MIN_LEN', ctx=Store())], value=Constant(value=64)), Assign(targets=[Name(id='MAX_LONG_STRINGS', ctx=Store())], value=Constant(value=16)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_long_strings', ctx=Store()), annotation=Subscript(value=Name(id='deque', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='wcwidth', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='c', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='string', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='LONG_STRING_MIN_LEN', ctx=Load())]), body=[Assign(targets=[Name(id='long_strings', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_long_strings', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='long_strings', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='long_strings', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MAX_LONG_STRINGS', ctx=Load())]), body=[Assign(targets=[Name(id='key_to_remove', ctx=Store())], value=Call(func=Attribute(value=Name(id='long_strings', ctx=Load()), attr='popleft', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='key_to_remove', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key_to_remove', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_CHAR_SIZES_CACHE', ctx=Store())], value=Call(func=Name(id='_CharSizesCache', ctx=Load()), args=[], keywords=[])), FunctionDef(name='get_cwidth', args=arguments(posonlyargs=[], args=[arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return width of a string. Wrapper around ``wcwidth``.\n    ')), Return(value=Subscript(value=Name(id='_CHAR_SIZES_CACHE', ctx=Load()), slice=Name(id='string', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='suspend_to_background_supported', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Returns `True` when the Python implementation supports\n    suspend-to-background. This is typically `False' on Windows systems.\n    ")), Return(value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='SIGTSTP')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_windows', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    True when we are using Windows.\n    ')), Return(value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_windows_vt100_supported', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    True when we are using Windows, but VT100 escape sequences are supported.\n    ')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='prompt_toolkit.output.windows10', names=[alias(name='is_win_vt100_enabled')], level=0), Return(value=Call(func=Name(id='is_win_vt100_enabled', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_conemu_ansi', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    True when the ConEmu Windows console is used.\n    ')), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ConEmuANSI'), Constant(value='OFF')], keywords=[]), ops=[Eq()], comparators=[Constant(value='ON')])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='in_main_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    True when the current thread is the main thread.\n    ')), Return(value=Compare(left=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='current_thread', ctx=Load()), args=[], keywords=[]), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='_MainThread')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_bell_environment_variable', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    True if env variable is set to true (true, TRUE, True, 1).\n    ')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PROMPT_TOOLKIT_BELL'), Constant(value='true')], keywords=[])), Return(value=Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='1'), Constant(value='true')], ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_term_environment_variable', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the $TERM environment variable.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), FunctionDef(name='take_using_weights', args=arguments(posonlyargs=[], args=[arg(arg='items', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), arg(arg='weights', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Generator that keeps yielding items from the items list, in proportion to\n    their weight. For instance::\n\n        # Getting the first 70 items from this generator should have yielded 10\n        # times A, 20 times B and 40 times C, all distributed equally..\n        take_using_weights(['A', 'B', 'C'], [5, 10, 20])\n\n    :param items: List of items to take from.\n    :param weights: Integers representing the weight. (Numbers have to be\n                    integers, not floats.)\n    ")), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='weights', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='items2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='weights2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='item', ctx=Store()), Name(id='w', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='items', ctx=Load()), Name(id='weights', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='w', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='items2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='weights2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='items', ctx=Store())], value=Name(id='items2', ctx=Load())), Assign(targets=[Name(id='weights', ctx=Store())], value=Name(id='weights2', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='items', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Did't got any items with a positive weight.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='already_taken', ctx=Store())], value=ListComp(elt=Constant(value=0), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='item_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_weight', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='weights', ctx=Load())], keywords=[])), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='adding', ctx=Store())], value=Constant(value=True)), While(test=Name(id='adding', ctx=Load()), body=[Assign(targets=[Name(id='adding', ctx=Store())], value=Constant(value=False)), For(target=Tuple(elts=[Name(id='item_i', ctx=Store()), Name(id='item', ctx=Store()), Name(id='weight', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='item_count', ctx=Load())], keywords=[]), Name(id='items', ctx=Load()), Name(id='weights', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='already_taken', ctx=Load()), slice=Name(id='item_i', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Name(id='weight', ctx=Load())), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Name(id='max_weight', ctx=Load())], keywords=[]))]), body=[Expr(value=Yield(value=Name(id='item', ctx=Load()))), AugAssign(target=Subscript(value=Name(id='already_taken', ctx=Load()), slice=Name(id='item_i', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='adding', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[])], orelse=[]), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='_T', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='to_str', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Turn callable or string into string.')), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='to_str', ctx=Load()), args=[Call(func=Name(id='value', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='to_int', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Name(id='int', ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Turn callable or int into int.')), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='to_int', ctx=Load()), args=[Call(func=Name(id='value', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='AnyFloat', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_float', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='AnyFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Turn callable or float into float.')), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='to_float', ctx=Load()), args=[Call(func=Name(id='value', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='float', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='is_dumb_terminal', args=arguments(posonlyargs=[], args=[arg(arg='term', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    True if this terminal type is considered "dumb".\n\n    If so, we should fall back to the simplest possible form of line editing,\n    without cursor positioning and color support.\n    ')), If(test=Compare(left=Name(id='term', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='is_dumb_terminal', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[])], keywords=[]))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[List(elts=[Constant(value='dumb'), Constant(value='unknown')], ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])