Module(body=[Expr(value=Constant(value="\nParser for parsing a regular expression.\nTake a string representing a regular expression and return the root node of its\nparse tree.\n\nusage::\n\n    root_node = parse_regex('(hello|world)')\n\nRemarks:\n- The regex parser processes multiline, it ignores all whitespace and supports\n  multiple named groups with the same name and #-style comments.\n\nLimitations:\n- Lookahead is not supported.\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Repeat'), Constant(value='Variable'), Constant(value='Regex'), Constant(value='Lookahead'), Constant(value='tokenize_regex'), Constant(value='parse_regex')], ctx=Load())), ClassDef(name='Node', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Base class for all the grammar nodes.\n    (You don't initialize this one.)\n    ")), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='NodeSequence', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load()), Name(id='other_node', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='NodeSequence', ctx=Load())), FunctionDef(name='__or__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='AnyNode', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load()), Name(id='other_node', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='AnyNode', ctx=Load()))], decorator_list=[]), ClassDef(name='AnyNode', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Union operation (OR operation) between several grammars. You don\'t\n    initialize this yourself, but it\'s a result of a "Grammar1 | Grammar2"\n    operation.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Store())], value=Name(id='children', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__or__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='AnyNode', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), op=Add(), right=List(elts=[Name(id='other_node', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='AnyNode', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='NodeSequence', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Concatenation operation of several grammars. You don\'t initialize this\n    yourself, but it\'s a result of a "Grammar1 + Grammar2" operation.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Store())], value=Name(id='children', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other_node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='NodeSequence', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), op=Add(), right=List(elts=[Name(id='other_node', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='NodeSequence', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Regex', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Regular expression.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='regex', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='regex', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='regex', ctx=Store())], value=Name(id='regex', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(/'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='regex', ctx=Load()), conversion=-1), Constant(value='/)')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Lookahead', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Lookahead expression.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='childnode', annotation=Name(id='Node', ctx=Load())), arg(arg='negative', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Store())], value=Name(id='childnode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='negative', ctx=Store())], value=Name(id='negative', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Variable', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Mark a variable in the regular grammar. This will be translated into a\n    named group. Each variable can have his own completer, validator, etc..\n\n    :param childnode: The grammar which is wrapped inside this variable.\n    :param varname: String.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='childnode', annotation=Name(id='Node', ctx=Load())), arg(arg='varname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Store())], value=Name(id='childnode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='varname', ctx=Store())], value=Name(id='varname', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(childnode={!r}, varname={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='varname', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Repeat', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='childnode', annotation=Name(id='Node', ctx=Load())), arg(arg='min_repeat', annotation=Name(id='int', ctx=Load())), arg(arg='max_repeat', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='greedy', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Store())], value=Name(id='childnode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_repeat', ctx=Store())], value=Name(id='min_repeat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_repeat', ctx=Store())], value=Name(id='max_repeat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='greedy', ctx=Store())], value=Name(id='greedy', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(childnode='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='childnode', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='tokenize_regex', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Takes a string, representing a regular expression as input, and tokenizes\n    it.\n\n    :param input: string, representing a regular expression.\n    :returns: List of tokens.\n    ')), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(\n        \\(\\?P\\<[a-zA-Z0-9_-]+\\>  | # Start of named group.\n        \\(\\?#[^)]*\\)             | # Comment\n        \\(\\?=                    | # Start of lookahead assertion\n        \\(\\?!                    | # Start of negative lookahead assertion\n        \\(\\?<=                   | # If preceded by.\n        \\(\\?<                    | # If not preceded by.\n        \\(?:                     | # Start of group. (non capturing.)\n        \\(                       | # Start of group.\n        \\(?[iLmsux]              | # Flags.\n        \\(?P=[a-zA-Z]+\\)         | # Back reference to named group\n        \\)                       | # End of group.\n        \\{[^{}]*\\}               | # Repetition\n        \\*\\? | \\+\\? | \\?\\?\\      | # Non greedy repetition.\n        \\* | \\+ | \\?             | # Repetition\n        \\#.*\\n                   | # Comment\n        \\\\. |\n\n        # Character group.\n        \\[\n            ( [^\\]\\\\]  |  \\\\.)*\n        \\]                  |\n\n        [^(){}]             |\n        .\n    )'), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Name(id='input', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='token', ctx=Store()), Name(id='input', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='input', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()), Subscript(value=Name(id='input', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='Could not tokenize input regex.')], keywords=[]))])], orelse=[]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='parse_regex', args=arguments(posonlyargs=[], args=[arg(arg='regex_tokens', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Takes a list of tokens from the tokenizer, and returns a parse tree.\n    ')), AnnAssign(target=Name(id='tokens', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=BinOp(left=List(elts=[Constant(value=')')], ctx=Load()), op=Add(), right=Subscript(value=Name(id='regex_tokens', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), simple=1), FunctionDef(name='wrap', args=arguments(posonlyargs=[], args=[arg(arg='lst', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Turn list into sequence when it contains several items.')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='lst', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='NodeSequence', ctx=Load()), args=[Name(id='lst', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Node', ctx=Load())), FunctionDef(name='_parse', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='or_list', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='wrapped_result', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='or_list', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Name(id='wrap', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='or_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='AnyNode', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='wrap', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='or_list', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])], decorator_list=[], returns=Name(id='Node', ctx=Load())), While(test=Name(id='tokens', ctx=Load()), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='(?P<')], keywords=[]), body=[Assign(targets=[Name(id='variable', ctx=Store())], value=Call(func=Name(id='Variable', ctx=Load()), args=[Call(func=Name(id='_parse', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='varname', value=Subscript(value=Name(id='t', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='variable', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='*'), Constant(value='*?')], ctx=Load())]), body=[Assign(targets=[Name(id='greedy', ctx=Store())], value=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='Repeat', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='greedy', value=Name(id='greedy', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='+'), Constant(value='+?')], ctx=Load())]), body=[Assign(targets=[Name(id='greedy', ctx=Store())], value=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='+')])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='Repeat', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='min_repeat', value=Constant(value=1)), keyword(arg='greedy', value=Name(id='greedy', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='?'), Constant(value='??')], ctx=Load())]), body=[If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[BinOp(left=Constant(value='Nothing to repeat.'), op=Add(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Assign(targets=[Name(id='greedy', ctx=Store())], value=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='?')])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='Repeat', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='min_repeat', value=Constant(value=0)), keyword(arg='max_repeat', value=Constant(value=1)), keyword(arg='greedy', value=Name(id='greedy', ctx=Load()))]))])], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='|')]), body=[Expr(value=Call(func=Attribute(value=Name(id='or_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='('), Constant(value='(?:')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_parse', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='(?!')]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Lookahead', ctx=Load()), args=[Call(func=Name(id='_parse', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='negative', value=Constant(value=True))])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value='(?=')]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Lookahead', ctx=Load()), args=[Call(func=Name(id='_parse', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='negative', value=Constant(value=False))])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], comparators=[Constant(value=')')]), body=[Return(value=Call(func=Name(id='wrapped_result', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), body=[Pass()], orelse=[If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='{')], keywords=[]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='t', ctx=Load()), conversion=-1), Constant(value='-style repetition not yet supported')])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='(?')], keywords=[]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[BinOp(left=Constant(value='%r not supported'), op=Mod(), right=Name(id='t', ctx=Load()))], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[Pass()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Regex', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[])], keywords=[]))])])])])])])])])])])])])])], orelse=[]), Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value="Expecting ')' token")], keywords=[]))], decorator_list=[], returns=Name(id='Node', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_parse', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='Unmatched parentheses.')], keywords=[]))], orelse=[Return(value=Name(id='result', ctx=Load()))])], decorator_list=[], returns=Name(id='Node', ctx=Load()))], type_ignores=[])