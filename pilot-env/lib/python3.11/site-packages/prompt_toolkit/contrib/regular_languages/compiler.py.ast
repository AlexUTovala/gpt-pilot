Module(body=[Expr(value=Constant(value='\nCompiler for a regular grammar.\n\nExample usage::\n\n    # Create and compile grammar.\n    p = compile(\'add \\s+ (?P<var1>[^\\s]+)  \\s+  (?P<var2>[^\\s]+)\')\n\n    # Match input string.\n    m = p.match(\'add 23 432\')\n\n    # Get variables.\n    m.variables().get(\'var1\')  # Returns "23"\n    m.variables().get(\'var2\')  # Returns "432"\n\n\nPartial matches are possible::\n\n    # Create and compile grammar.\n    p = compile(\'\'\'\n        # Operators with two arguments.\n        ((?P<operator1>[^\\s]+)  \\s+ (?P<var1>[^\\s]+)  \\s+  (?P<var2>[^\\s]+)) |\n\n        # Operators with only one arguments.\n        ((?P<operator2>[^\\s]+)  \\s+ (?P<var1>[^\\s]+))\n    \'\'\')\n\n    # Match partial input string.\n    m = p.match_prefix(\'add 23\')\n\n    # Get variables. (Notice that both operator1 and operator2 contain the\n    # value "add".) This is because our input is incomplete, and we don\'t know\n    # yet in which rule of the regex we we\'ll end up. It could also be that\n    # `operator1` and `operator2` have a different autocompleter and we want to\n    # call all possible autocompleters that would result in valid input.)\n    m.variables().get(\'var1\')  # Returns "23"\n    m.variables().get(\'operator1\')  # Returns "add"\n    m.variables().get(\'operator2\')  # Returns "add"\n\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='Iterator'), alias(name='Pattern')], level=0), ImportFrom(module='typing', names=[alias(name='Match', asname='RegexMatch')], level=0), ImportFrom(module='regex_parser', names=[alias(name='AnyNode'), alias(name='Lookahead'), alias(name='Node'), alias(name='NodeSequence'), alias(name='Regex'), alias(name='Repeat'), alias(name='Variable'), alias(name='parse_regex'), alias(name='tokenize_regex')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='compile')], ctx=Load())), Assign(targets=[Name(id='_INVALID_TRAILING_INPUT', ctx=Store())], value=Constant(value='invalid_trailing')), Assign(targets=[Name(id='EscapeFuncDict', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_CompiledGrammar', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Compiles a grammar. This will take the parse tree of a regular expression\n    and compile the grammar.\n\n    :param root_node: :class~`.regex_parser.Node` instance.\n    :param escape_funcs: `dict` mapping variable names to escape callables.\n    :param unescape_funcs: `dict` mapping variable names to unescape callables.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root_node', annotation=Name(id='Node', ctx=Load())), arg(arg='escape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='unescape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_node', ctx=Store())], value=Name(id='root_node', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='escape_funcs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='escape_funcs', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='unescape_funcs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='unescape_funcs', ctx=Load()), Dict(keys=[], values=[])])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Name(id='counter', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), FunctionDef(name='create_group_func', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Variable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='n%s'), op=Mod(), right=Subscript(value=Name(id='counter', ctx=Load()), slice=Constant(value=0), ctx=Load()))), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='node', ctx=Load()), attr='varname', ctx=Load())), AugAssign(target=Subscript(value=Name(id='counter', ctx=Load()), slice=Constant(value=0), ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_pattern', ctx=Store())], value=BinOp(left=Constant(value='^%s$'), op=Mod(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_transform', ctx=Load()), args=[Name(id='root_node', ctx=Load()), Name(id='create_group_func', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix_patterns', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_transform_prefix', ctx=Load()), args=[Name(id='root_node', ctx=Load()), Name(id='create_group_func', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_pattern', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='t', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix_patterns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix_with_trailing_input', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='(?:{})(?P<{}>.*?)$'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='$')], keywords=[]), Name(id='_INVALID_TRAILING_INPUT', ctx=Load())], keywords=[]), Name(id='flags', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix_patterns', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='escape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='varname', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Escape `value` to fit in the place of this variable into the grammar.\n        ')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='escape_funcs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='varname', ctx=Load())], keywords=[])), Return(value=IfExp(test=Name(id='f', ctx=Load()), body=Call(func=Name(id='f', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='unescape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='varname', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Unescape `value`.\n        ')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='unescape_funcs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='varname', ctx=Load())], keywords=[])), Return(value=IfExp(test=Name(id='f', ctx=Load()), body=Call(func=Name(id='f', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_transform', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='root_node', annotation=Name(id='Node', ctx=Load())), arg(arg='create_group_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Variable', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Turn a :class:`Node` object into a regular expression.\n\n        :param root_node: The :class:`Node` instance for which we generate the grammar.\n        :param create_group_func: A callable which takes a `Node` and returns the next\n            free name for this node.\n        ')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='AnyNode', ctx=Load())], keywords=[]), body=[Return(value=BinOp(left=Constant(value='(?:%s)'), op=Mod(), right=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])], keywords=[])))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='NodeSequence', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Regex', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='regex', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Lookahead', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='before', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='node', ctx=Load()), attr='negative', ctx=Load()), body=Constant(value='(?!'), orelse=Constant(value='(='))), Return(value=BinOp(left=BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=')')))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Variable', ctx=Load())], keywords=[]), body=[Return(value=JoinedStr(values=[Constant(value='(?P<'), FormattedValue(value=Call(func=Name(id='create_group_func', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), conversion=-1), Constant(value='>'), FormattedValue(value=Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Repeat', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='min_repeat', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='repeat_sign', ctx=Store())], value=Constant(value='*'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='min_repeat', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='repeat_sign', ctx=Store())], value=Constant(value='+'))], orelse=[])])], orelse=[Assign(targets=[Name(id='repeat_sign', ctx=Store())], value=BinOp(left=Constant(value='{%i,%s}'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='node', ctx=Load()), attr='min_repeat', ctx=Load()), IfExp(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=''), orelse=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load())], keywords=[]))], ctx=Load())))]), Return(value=Call(func=Attribute(value=Constant(value='(?:{}){}{}'), attr='format', ctx=Load()), args=[Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[]), Name(id='repeat_sign', ctx=Load()), IfExp(test=Attribute(value=Name(id='node', ctx=Load()), attr='greedy', ctx=Load()), body=Constant(value=''), orelse=Constant(value='?'))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Got '), FormattedValue(value=Name(id='node', ctx=Load()), conversion=114)])], keywords=[]))])])])])])])], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='root_node', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_transform_prefix', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='root_node', annotation=Name(id='Node', ctx=Load())), arg(arg='create_group_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Variable', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Yield all the regular expressions matching a prefix of the grammar\n        defined by the `Node` instance.\n\n        For each `Variable`, one regex pattern will be generated, with this\n        named group at the end. This is required because a regex engine will\n        terminate once a match is found. For autocompletion however, we need\n        the matches for all possible paths, so that we can provide completions\n        for each `Variable`.\n\n        - So, in the case of an `Any` (`A|B|C)', we generate a pattern for each\n          clause. This is one for `A`, one for `B` and one for `C`. Unless some\n          groups don't contain a `Variable`, then these can be merged together.\n        - In the case of a `NodeSequence` (`ABC`), we generate a pattern for\n          each prefix that ends with a variable, and one pattern for the whole\n          sequence. So, that's one for `A`, one for `AB` and one for `ABC`.\n\n        :param root_node: The :class:`Node` instance for which we generate the grammar.\n        :param create_group_func: A callable which takes a `Node` and returns the next\n            free name for this node.\n        ")), FunctionDef(name='contains_variable', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Regex', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Variable', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Tuple(elts=[Name(id='Lookahead', ctx=Load()), Name(id='Repeat', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='contains_variable', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Tuple(elts=[Name(id='NodeSequence', ctx=Load()), Name(id='AnyNode', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='contains_variable', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[])])])]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Name(id='Node', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='AnyNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='children_with_variable', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='children_without_variable', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), body=[If(test=Call(func=Name(id='contains_variable', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='children_with_variable', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='children_without_variable', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='c', ctx=Store()), iter=Name(id='children_with_variable', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])))], orelse=[]), If(test=Name(id='children_without_variable', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Name(id='r', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='children_without_variable', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='NodeSequence', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='complete', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_transform', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='create_group_func', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='prefixes', ctx=Store())], value=ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='transform', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='variable_nodes', ctx=Store())], value=ListComp(elt=Call(func=Name(id='contains_variable', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='variable_nodes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), body=[For(target=Name(id='c_str', ctx=Store()), iter=Subscript(value=Name(id='prefixes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), body=[Expr(value=Yield(value=BinOp(left=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Subscript(value=Name(id='complete', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())], keywords=[]), op=Add(), right=Name(id='c_str', ctx=Load()))))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[Name(id='variable_nodes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='(?:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='complete', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Subscript(value=Name(id='variable_nodes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=')')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='|(?:')], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='prefixes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='prefixes', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='))')], keywords=[]))])], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Regex', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=BinOp(left=Constant(value='(?:%s)?'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='regex', ctx=Load()))))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Lookahead', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='node', ctx=Load()), attr='negative', ctx=Load()), body=[Expr(value=Yield(value=BinOp(left=Constant(value='(?!%s)'), op=Mod(), right=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load()), Name(id='create_group_func', ctx=Load())], keywords=[]))))], orelse=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='Positive lookahead not yet supported.')], keywords=[]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Variable', ctx=Load())], keywords=[]), body=[For(target=Name(id='c_str', ctx=Store()), iter=Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=JoinedStr(values=[Constant(value='(?P<'), FormattedValue(value=Call(func=Name(id='create_group_func', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), conversion=-1), Constant(value='>'), FormattedValue(value=Name(id='c_str', ctx=Load()), conversion=-1), Constant(value=')')])))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='Repeat', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load()), Name(id='create_group_func', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[])))], orelse=[For(target=Name(id='c_str', ctx=Store()), iter=Call(func=Name(id='transform', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='childnode', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load()), body=[Assign(targets=[Name(id='repeat_sign', ctx=Store())], value=BinOp(left=Constant(value='{,%i}'), op=Mod(), right=BinOp(left=Attribute(value=Name(id='node', ctx=Load()), attr='max_repeat', ctx=Load()), op=Sub(), right=Constant(value=1))))], orelse=[Assign(targets=[Name(id='repeat_sign', ctx=Store())], value=Constant(value='*'))]), Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='(?:{}){}{}{}'), attr='format', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Name(id='repeat_sign', ctx=Load()), IfExp(test=Attribute(value=Name(id='node', ctx=Load()), attr='greedy', ctx=Load()), body=Constant(value=''), orelse=Constant(value='?')), Name(id='c_str', ctx=Load())], keywords=[])))], orelse=[])])], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='Got %r'), op=Mod(), right=Name(id='node', ctx=Load()))], keywords=[]))])])])])])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), For(target=Name(id='r', ctx=Store()), iter=Call(func=Name(id='transform', ctx=Load()), args=[Name(id='root_node', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=BinOp(left=Constant(value='^(?:%s)$'), op=Mod(), right=Name(id='r', ctx=Load()))))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Match the string with the grammar.\n        Returns a :class:`Match` instance or `None` when the input doesn't match the grammar.\n\n        :param string: The input string.\n        ")), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Return(value=Call(func=Name(id='Match', ctx=Load()), args=[Name(id='string', ctx=Load()), List(elts=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_re', ctx=Load()), Name(id='m', ctx=Load())], ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unescape_funcs', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='Match', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='match_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Do a partial match of the string with the grammar. The returned\n        :class:`Match` instance can contain multiple representations of the\n        match. This will never return `None`. If it doesn\'t match at all, the "trailing input"\n        part will capture all of the input.\n\n        :param string: The input string.\n        ')), For(target=Name(id='patterns', ctx=Store()), iter=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_re_prefix_with_trailing_input', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='r', ctx=Load()), Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='patterns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='matches2', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='r', ctx=Load()), Name(id='m', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='r', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store()), iter=Name(id='matches', ctx=Load()), ifs=[Name(id='m', ctx=Load())], is_async=0)])), If(test=Compare(left=Name(id='matches2', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Call(func=Name(id='Match', ctx=Load()), args=[Name(id='string', ctx=Load()), Name(id='matches2', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unescape_funcs', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='Match', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), ClassDef(name='Match', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    :param string: The input string.\n    :param re_matches: List of (compiled_re_pattern, re_match) tuples.\n    :param group_names_to_nodes: Dictionary mapping all the re group names to the matching Node instances.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load())), arg(arg='re_matches', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='RegexMatch', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='group_names_to_nodes', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='unescape_funcs', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Store())], value=Name(id='string', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_matches', ctx=Store())], value=Name(id='re_matches', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Store())], value=Name(id='group_names_to_nodes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unescape_funcs', ctx=Store())], value=Name(id='unescape_funcs', ctx=Load()))], decorator_list=[]), FunctionDef(name='_nodes_to_regs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of (varname, reg) tuples.\n        ')), FunctionDef(name='get_tuples', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='r', ctx=Store()), Name(id='re_match', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_re_matches', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='group_name', ctx=Store()), Name(id='group_index', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='r', ctx=Load()), attr='groupindex', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='group_name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='_INVALID_TRAILING_INPUT', ctx=Load())]), body=[Assign(targets=[Name(id='regs', ctx=Store())], value=Attribute(value=Name(id='re_match', ctx=Load()), attr='regs', ctx=Load())), Assign(targets=[Name(id='reg', ctx=Store())], value=Subscript(value=Name(id='regs', ctx=Load()), slice=Name(id='group_index', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_group_names_to_nodes', ctx=Load()), slice=Name(id='group_name', ctx=Load()), ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Name(id='node', ctx=Load()), Name(id='reg', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='get_tuples', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_nodes_to_values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns list of (Node, string_value) tuples.\n        ')), FunctionDef(name='is_none', args=arguments(posonlyargs=[], args=[arg(arg='sl', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='sl', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), Compare(left=Subscript(value=Name(id='sl', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='sl', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='sl', ctx=Load()), slice=Constant(value=0), ctx=Load()), upper=Subscript(value=Name(id='sl', ctx=Load()), slice=Constant(value=1), ctx=Load())), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=ListComp(elt=Tuple(elts=[Name(id='varname', ctx=Load()), Call(func=Name(id='get', ctx=Load()), args=[Name(id='slice', ctx=Load())], keywords=[]), Name(id='slice', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='varname', ctx=Store()), Name(id='slice', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes_to_regs', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Name(id='is_none', ctx=Load()), args=[Name(id='slice', ctx=Load())], keywords=[]))], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_unescape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='varname', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='unwrapper', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_unescape_funcs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='varname', ctx=Load())], keywords=[])), Return(value=IfExp(test=Name(id='unwrapper', ctx=Load()), body=Call(func=Name(id='unwrapper', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='variables', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns :class:`Variables` instance.\n        ')), Return(value=Call(func=Name(id='Variables', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unescape', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]), Name(id='sl', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store()), Name(id='sl', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes_to_values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Variables', ctx=Load())), FunctionDef(name='trailing_input', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the `MatchVariable` instance, representing trailing input, if there is any.\n        "Trailing input" is input at the end that does not match the grammar anymore, but\n        when this is removed from the end of the input, the input would be a valid string.\n        ')), AnnAssign(target=Name(id='slices', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='r', ctx=Store()), Name(id='re_match', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_re_matches', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='group_name', ctx=Store()), Name(id='group_index', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='r', ctx=Load()), attr='groupindex', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='group_name', ctx=Load()), ops=[Eq()], comparators=[Name(id='_INVALID_TRAILING_INPUT', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='slices', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='re_match', ctx=Load()), attr='regs', ctx=Load()), slice=Name(id='group_index', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Name(id='slices', ctx=Load()), body=[Assign(targets=[Name(id='slice', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='i', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='slices', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='i', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='slices', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='slice', ctx=Load()), slice=Constant(value=0), ctx=Load()), upper=Subscript(value=Name(id='slice', ctx=Load()), slice=Constant(value=1), ctx=Load())), ctx=Load())), Return(value=Call(func=Name(id='MatchVariable', ctx=Load()), args=[Constant(value='<trailing_input>'), Name(id='value', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='MatchVariable', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='end_nodes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Yields `MatchVariable` instances for all the nodes having their end\n        position at the end of the input string.\n        ')), For(target=Tuple(elts=[Name(id='varname', ctx=Store()), Name(id='reg', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes_to_regs', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='reg', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unescape', ctx=Load()), args=[Name(id='varname', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Subscript(value=Name(id='reg', ctx=Load()), slice=Constant(value=0), ctx=Load()), upper=Subscript(value=Name(id='reg', ctx=Load()), slice=Constant(value=1), ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='MatchVariable', ctx=Load()), args=[Name(id='varname', ctx=Load()), Name(id='value', ctx=Load()), Tuple(elts=[Subscript(value=Name(id='reg', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='reg', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='MatchVariable', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Variables', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tuples', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tuples', ctx=Store())], value=Name(id='tuples', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}({})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='v', ctx=Load()), conversion=114)]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_tuples', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='getall', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Return(value=IfExp(test=Name(id='items', ctx=Load()), body=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='default', ctx=Load())))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='getall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_tuples', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Name(id='key', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Yield `MatchVariable` instances.\n        ')), For(target=Tuple(elts=[Name(id='varname', ctx=Store()), Name(id='value', ctx=Store()), Name(id='slice', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_tuples', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='MatchVariable', ctx=Load()), args=[Name(id='varname', ctx=Load()), Name(id='value', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='MatchVariable', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='MatchVariable', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Represents a match of a variable in the grammar.\n\n    :param varname: (string) Name of the variable.\n    :param value: (string) Value of this variable.\n    :param slice: (start, stop) tuple, indicating the position of this variable\n                  in the input string.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='varname', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='str', ctx=Load())), arg(arg='slice', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='varname', ctx=Store())], value=Name(id='varname', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='slice', ctx=Store())], value=Name(id='slice', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='slice', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='slice', ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='varname', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='expression', annotation=Name(id='str', ctx=Load())), arg(arg='escape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='unescape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Compile grammar (given as regex string), returning a `CompiledGrammar`\n    instance.\n    ')), Return(value=Call(func=Name(id='_compile_from_parse_tree', ctx=Load()), args=[Call(func=Name(id='parse_regex', ctx=Load()), args=[Call(func=Name(id='tokenize_regex', ctx=Load()), args=[Name(id='expression', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='escape_funcs', value=Name(id='escape_funcs', ctx=Load())), keyword(arg='unescape_funcs', value=Name(id='unescape_funcs', ctx=Load()))]))], decorator_list=[], returns=Name(id='_CompiledGrammar', ctx=Load())), FunctionDef(name='_compile_from_parse_tree', args=arguments(posonlyargs=[], args=[arg(arg='root_node', annotation=Name(id='Node', ctx=Load())), arg(arg='escape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='unescape_funcs', annotation=BinOp(left=Name(id='EscapeFuncDict', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Compile grammar (given as parse tree), returning a `CompiledGrammar`\n    instance.\n    ')), Return(value=Call(func=Name(id='_CompiledGrammar', ctx=Load()), args=[Name(id='root_node', ctx=Load())], keywords=[keyword(arg='escape_funcs', value=Name(id='escape_funcs', ctx=Load())), keyword(arg='unescape_funcs', value=Name(id='unescape_funcs', ctx=Load()))]))], decorator_list=[], returns=Name(id='_CompiledGrammar', ctx=Load()))], type_ignores=[])