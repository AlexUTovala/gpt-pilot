Module(body=[Expr(value=Constant(value='\n`GrammarLexer` is compatible with other lexers and can be used to highlight\nthe input using a regular grammar with annotations.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.base', names=[alias(name='StyleAndTextTuples')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='split_lines')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='Lexer')], level=0), ImportFrom(module='compiler', names=[alias(name='_CompiledGrammar')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='GrammarLexer')], ctx=Load())), ClassDef(name='GrammarLexer', bases=[Name(id='Lexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Lexer which can be used for highlighting of fragments according to variables in the grammar.\n\n    (It does not actual lexing of the string, but it exposes an API, compatible\n    with the Pygments lexer class.)\n\n    :param compiled_grammar: Grammar as returned by the `compile()` function.\n    :param lexers: Dictionary mapping variable names of the regular grammar to\n                   the lexers that should be used for this part. (This can\n                   call other lexers recursively.) If you wish a part of the\n                   grammar to just get one fragment, use a\n                   `prompt_toolkit.lexers.SimpleLexer`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='compiled_grammar', annotation=Name(id='_CompiledGrammar', ctx=Load())), arg(arg='default_style', annotation=Name(id='str', ctx=Load())), arg(arg='lexers', annotation=BinOp(left=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Lexer', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compiled_grammar', ctx=Store())], value=Name(id='compiled_grammar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_style', ctx=Store())], value=Name(id='default_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexers', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='lexers', ctx=Load()), Dict(keys=[], values=[])]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_text_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiled_grammar', ctx=Load()), attr='match_prefix', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[AnnAssign(target=Name(id='characters', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=ListComp(elt=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='default_style', ctx=Load()), Name(id='c', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='text', ctx=Load()), ifs=[], is_async=0)]), simple=1), For(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='variables', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lexers', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='v', ctx=Load()), attr='varname', ctx=Load())], keywords=[])), If(test=Name(id='lexer', ctx=Load()), body=[Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='v', ctx=Load()), attr='start', ctx=Load()), upper=Attribute(value=Name(id='v', ctx=Load()), attr='stop', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='lexer_tokens_for_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='lex_document', ctx=Load()), args=[Name(id='document', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='text_fragments', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='lines', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='text_fragments', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='lexer_tokens_for_line', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='text_fragments', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='text_fragments', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='text_fragments', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Attribute(value=Name(id='v', ctx=Load()), attr='start', ctx=Load())), For(target=Tuple(elts=[Name(id='t', ctx=Store()), Name(id='s', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='text_fragments', ctx=Load()), body=[For(target=Name(id='c', ctx=Store()), iter=Name(id='s', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='characters', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='default_style', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='characters', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='t', ctx=Load()), Subscript(value=Subscript(value=Name(id='characters', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='trailing_input', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='trailing_input', ctx=Load()), args=[], keywords=[])), If(test=Name(id='trailing_input', ctx=Load()), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='trailing_input', ctx=Load()), attr='start', ctx=Load()), Attribute(value=Name(id='trailing_input', ctx=Load()), attr='stop', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='characters', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[Constant(value='class:trailing-input'), Subscript(value=Subscript(value=Name(id='characters', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='characters', ctx=Load()))], orelse=[Return(value=List(elts=[Tuple(elts=[Constant(value=''), Name(id='text', ctx=Load())], ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='lex_document', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='split_lines', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_fragments', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='lineno', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Name(id='get_line', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load())], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])