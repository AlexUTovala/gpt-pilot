Module(body=[Expr(value=Constant(value='\nUtility for running a prompt_toolkit application in an asyncssh server.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='asyncio')]), Import(names=[alias(name='traceback')]), ImportFrom(module='asyncio', names=[alias(name='get_running_loop')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Awaitable'), alias(name='Callable'), alias(name='TextIO'), alias(name='cast')], level=0), Import(names=[alias(name='asyncssh')]), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='AppSession'), alias(name='create_app_session')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.input', names=[alias(name='PipeInput'), alias(name='create_pipe_input')], level=0), ImportFrom(module='prompt_toolkit.output.vt100', names=[alias(name='Vt100_Output')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='PromptToolkitSSHSession'), Constant(value='PromptToolkitSSHServer')], ctx=Load())), ClassDef(name='PromptToolkitSSHSession', bases=[Attribute(value=Name(id='asyncssh', ctx=Load()), attr='SSHServerSession', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='interact', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='PromptToolkitSSHSession', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Awaitable', ctx=Load()), slice=Constant(value=None), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='enable_cpr', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interact', ctx=Store())], value=Name(id='interact', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Store())], value=Name(id='enable_cpr', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='interact_task', ctx=Store()), annotation=BinOp(left=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Store()), annotation=BinOp(left=Name(id='Any', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Store()), annotation=BinOp(left=Name(id='AppSession', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Store()), annotation=BinOp(left=Name(id='PipeInput', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store()), annotation=BinOp(left=Name(id='Vt100_Output', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), ClassDef(name='Stdout', bases=[], keywords=[], body=[FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\r\n')], keywords=[])], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='BrokenPipeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='isatty', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='_orig_chan', ctx=Load()), attr='get_encoding', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TextIO', ctx=Load()), Call(func=Name(id='Stdout', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Callable that returns the current `Size`, required by Vt100_Output.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Size', ctx=Load()), args=[], keywords=[keyword(arg='rows', value=Constant(value=20)), keyword(arg='columns', value=Constant(value=79))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store()), Name(id='pixwidth', ctx=Store()), Name(id='pixheight', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Size', ctx=Load()), args=[], keywords=[keyword(arg='rows', value=Name(id='height', ctx=Load())), keyword(arg='columns', value=Name(id='width', ctx=Load()))]))])], decorator_list=[], returns=Name(id='Size', ctx=Load())), FunctionDef(name='connection_made', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chan', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Store())], value=Name(id='chan', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='shell_requested', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='session_started', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interact_task', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[]), attr='create_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_interact', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='_interact', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='`_interact` called before `connection_made`.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), Constant(value='set_line_mode')], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='_editor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='set_line_mode', ctx=Load()), args=[Constant(value=False)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='term', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='get_terminal_type', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store())], value=Call(func=Name(id='Vt100_Output', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stdout', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_get_size', ctx=Load())], keywords=[keyword(arg='term', value=Name(id='term', ctx=Load())), keyword(arg='enable_cpr', value=Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='create_pipe_input', ctx=Load()), args=[], keywords=[]), optional_vars=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Name(id='create_app_session', ctx=Load()), args=[], keywords=[keyword(arg='input', value=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load())), keyword(arg='output', value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()))]), optional_vars=Name(id='session', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Store())], value=Name(id='session', ctx=Load())), Try(body=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='interact', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='print_exc', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_chan', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='terminal_size_changed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load())), arg(arg='pixwidth', annotation=Name(id='object', ctx=Load())), arg(arg='pixheight', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Load()), attr='app', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Load()), attr='app', ctx=Load()), attr='_on_resize', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='data_received', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='datatype', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load()), attr='send_text', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PromptToolkitSSHServer', bases=[Attribute(value=Name(id='asyncssh', ctx=Load()), attr='SSHServer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Run a prompt_toolkit application over an asyncssh server.\n\n    This takes one argument, an `interact` function, which is called for each\n    connection. This should be an asynchronous function that runs the\n    prompt_toolkit applications. This function runs in an `AppSession`, which\n    means that we can have multiple UI interactions concurrently.\n\n    Example usage:\n\n    .. code:: python\n\n        async def interact(ssh_session: PromptToolkitSSHSession) -> None:\n            await yes_no_dialog("my title", "my text").run_async()\n\n            prompt_session = PromptSession()\n            text = await prompt_session.prompt_async("Type something: ")\n            print_formatted_text(\'You said: \', text)\n\n        server = PromptToolkitSSHServer(interact=interact)\n        loop = get_running_loop()\n        loop.run_until_complete(\n            asyncssh.create_server(\n                lambda: MySSHServer(interact),\n                "",\n                port,\n                server_host_keys=["/etc/ssh/..."],\n            )\n        )\n        loop.run_forever()\n\n    :param enable_cpr: When `True`, the default, try to detect whether the SSH\n        client runs in a terminal that responds to "cursor position requests".\n        That way, we can properly determine how much space there is available\n        for the UI (especially for drop down menus) to render.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='interact', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='PromptToolkitSSHSession', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Awaitable', ctx=Load()), slice=Constant(value=None), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='enable_cpr', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interact', ctx=Store())], value=Name(id='interact', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Store())], value=Name(id='enable_cpr', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='begin_auth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='username', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='session_requested', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='PromptToolkitSSHSession', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='interact', ctx=Load())], keywords=[keyword(arg='enable_cpr', value=Attribute(value=Name(id='self', ctx=Load()), attr='enable_cpr', ctx=Load()))]))], decorator_list=[], returns=Name(id='PromptToolkitSSHSession', ctx=Load()))], decorator_list=[])], type_ignores=[])