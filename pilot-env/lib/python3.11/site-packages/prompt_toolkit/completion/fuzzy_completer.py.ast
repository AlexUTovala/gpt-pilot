Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Iterable'), alias(name='NamedTuple')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples')], level=0), ImportFrom(module='base', names=[alias(name='CompleteEvent'), alias(name='Completer'), alias(name='Completion')], level=1), ImportFrom(module='word_completer', names=[alias(name='WordCompleter')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='FuzzyCompleter'), Constant(value='FuzzyWordCompleter')], ctx=Load())), ClassDef(name='FuzzyCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Fuzzy completion.\n    This wraps any other completer and turns it into a fuzzy completer.\n\n    If the list of words is: ["leopard" , "gorilla", "dinosaur", "cat", "bee"]\n    Then trying to complete "oar" would yield "leopard" and "dinosaur", but not\n    the others, because they match the regular expression \'o.*a.*r\'.\n    Similar, in another application "djm" could expand to "django_migrations".\n\n    The results are sorted by relevance, which is defined as the start position\n    and the length of the match.\n\n    Notice that this is not really a tool to work around spelling mistakes,\n    like what would be possible with difflib. The purpose is rather to have a\n    quicker or more intuitive way to filter the given completions, especially\n    when many completions have a common prefix.\n\n    Fuzzy algorithm is based on this post:\n    https://blog.amjith.com/fuzzyfinder-in-10-lines-of-python\n\n    :param completer: A :class:`~.Completer` instance.\n    :param WORD: When True, use WORD characters.\n    :param pattern: Regex pattern which selects the characters before the\n        cursor that are considered for the fuzzy matching.\n    :param enable_fuzzy: (bool or `Filter`) Enabled the fuzzy behavior. For\n        easily turning fuzzyness on or off according to a certain condition.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completer', annotation=Name(id='Completer', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='pattern', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_fuzzy', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=True)]), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='pattern', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='^')], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Store())], value=Name(id='WORD', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_fuzzy', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='enable_fuzzy', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enable_fuzzy', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_fuzzy_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), FunctionDef(name='_get_pattern', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Load()), body=[Return(value=Constant(value='[^\\s]+'))], orelse=[]), Return(value=Constant(value='^[a-zA-Z0-9_]*'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_fuzzy_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='get_word_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='pattern', value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_pattern', ctx=Load()), args=[], keywords=[])], keywords=[]))])), Assign(targets=[Name(id='document2', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Subscript(value=Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))), ctx=Load())), keyword(arg='cursor_position', value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[])))])), Assign(targets=[Name(id='inner_completions', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document2', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='fuzzy_matches', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_FuzzyMatch', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Name(id='word_before_cursor', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='fuzzy_matches', ctx=Store())], value=ListComp(elt=Call(func=Name(id='_FuzzyMatch', ctx=Load()), args=[Constant(value=0), Constant(value=0), Name(id='compl', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='compl', ctx=Store()), iter=Name(id='inner_completions', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='pat', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.*?'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), Name(id='word_before_cursor', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='pat', ctx=Store())], value=JoinedStr(values=[Constant(value='(?=('), FormattedValue(value=Name(id='pat', ctx=Load()), conversion=-1), Constant(value='))')])), Assign(targets=[Name(id='regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pat', ctx=Load()), Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load())], keywords=[])), For(target=Name(id='compl', ctx=Store()), iter=Name(id='inner_completions', ctx=Load()), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Attribute(value=Name(id='compl', ctx=Load()), attr='text', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='matches', ctx=Load()), body=[Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='m')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[])], ctx=Load())))])), Expr(value=Call(func=Attribute(value=Name(id='fuzzy_matches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_FuzzyMatch', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='best', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='best', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), Name(id='compl', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), FunctionDef(name='sort_key', args=arguments(posonlyargs=[], args=[arg(arg='fuzzy_match', annotation=Name(id='_FuzzyMatch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sort by start position, then by the length of the match.')), Return(value=Tuple(elts=[Attribute(value=Name(id='fuzzy_match', ctx=Load()), attr='start_pos', ctx=Load()), Attribute(value=Name(id='fuzzy_match', ctx=Load()), attr='match_length', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='fuzzy_matches', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='fuzzy_matches', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='sort_key', ctx=Load()))]))]), For(target=Name(id='match', ctx=Store()), iter=Name(id='fuzzy_matches', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Completion', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Attribute(value=Attribute(value=Name(id='match', ctx=Load()), attr='completion', ctx=Load()), attr='text', ctx=Load())), keyword(arg='start_position', value=BinOp(left=Attribute(value=Attribute(value=Name(id='match', ctx=Load()), attr='completion', ctx=Load()), attr='start_position', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))), keyword(arg='display_meta', value=Attribute(value=Attribute(value=Name(id='match', ctx=Load()), attr='completion', ctx=Load()), attr='_display_meta', ctx=Load())), keyword(arg='display', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_display', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='word_before_cursor', ctx=Load())], keywords=[])), keyword(arg='style', value=Attribute(value=Attribute(value=Name(id='match', ctx=Load()), attr='completion', ctx=Load()), attr='style', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), FunctionDef(name='_get_display', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fuzzy_match', annotation=Name(id='_FuzzyMatch', ctx=Load())), arg(arg='word_before_cursor', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate formatted text for the display label.\n        ')), FunctionDef(name='get_display', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Name(id='fuzzy_match', ctx=Load())), Assign(targets=[Name(id='word', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='m', ctx=Load()), attr='completion', ctx=Load()), attr='text', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='m', ctx=Load()), attr='match_length', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Attribute(value=Attribute(value=Name(id='m', ctx=Load()), attr='completion', ctx=Load()), attr='display', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:fuzzymatch.outside'), Subscript(value=Name(id='word', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='m', ctx=Load()), attr='start_pos', ctx=Load())), ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='characters', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[])), For(target=Name(id='c', ctx=Store()), iter=Subscript(value=Name(id='word', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='m', ctx=Load()), attr='start_pos', ctx=Load()), upper=BinOp(left=Attribute(value=Name(id='m', ctx=Load()), attr='start_pos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m', ctx=Load()), attr='match_length', ctx=Load()))), ctx=Load()), body=[Assign(targets=[Name(id='classname', ctx=Store())], value=Constant(value='class:fuzzymatch.inside')), If(test=BoolOp(op=And(), values=[Name(id='characters', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Subscript(value=Name(id='characters', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[AugAssign(target=Name(id='classname', ctx=Store()), op=Add(), value=Constant(value='.character')), Delete(targets=[Subscript(value=Name(id='characters', ctx=Load()), slice=Constant(value=0), ctx=Del())])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='classname', ctx=Load()), Name(id='c', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='class:fuzzymatch.outside'), Subscript(value=Name(id='word', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='m', ctx=Load()), attr='start_pos', ctx=Load()), op=Add(), right=Attribute(value=Name(id='m', ctx=Load()), attr='match_length', ctx=Load()))), ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), Return(value=Call(func=Name(id='get_display', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load()))], decorator_list=[]), ClassDef(name='FuzzyWordCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Fuzzy completion on a list of words.\n\n    (This is basically a `WordCompleter` wrapped in a `FuzzyCompleter`.)\n\n    :param words: List of words or callable that returns a list of words.\n    :param meta_dict: Optional dict mapping words to their meta-information.\n    :param WORD: When True, use WORD characters.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='words', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='meta_dict', annotation=BinOp(left=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Store())], value=Name(id='words', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='meta_dict', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='meta_dict', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Store())], value=Name(id='WORD', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='word_completer', ctx=Store())], value=Call(func=Name(id='WordCompleter', ctx=Load()), args=[], keywords=[keyword(arg='words', value=Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Load())), keyword(arg='WORD', value=Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Load())), keyword(arg='meta_dict', value=Attribute(value=Name(id='self', ctx=Load()), attr='meta_dict', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fuzzy_completer', ctx=Store())], value=Call(func=Name(id='FuzzyCompleter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='word_completer', ctx=Load())], keywords=[keyword(arg='WORD', value=Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fuzzy_completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_FuzzyMatch', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='match_length', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='start_pos', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='completion', ctx=Store()), annotation=Name(id='Completion', ctx=Load()), simple=1)], decorator_list=[])], type_ignores=[])