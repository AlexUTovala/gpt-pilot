Module(body=[Expr(value=Constant(value='\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='AsyncGenerator'), alias(name='Callable'), alias(name='Iterable'), alias(name='Sequence')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='aclosing'), alias(name='generator_to_async_generator')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Completion'), Constant(value='Completer'), Constant(value='ThreadedCompleter'), Constant(value='DummyCompleter'), Constant(value='DynamicCompleter'), Constant(value='CompleteEvent'), Constant(value='ConditionalCompleter'), Constant(value='merge_completers'), Constant(value='get_common_complete_suffix')], ctx=Load())), ClassDef(name='Completion', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    :param text: The new string that will be inserted into the document.\n    :param start_position: Position relative to the cursor_position where the\n        new text will start. The text will be inserted between the\n        start_position and the original cursor position.\n    :param display: (optional string or formatted text) If the completion has\n        to be displayed differently in the completion menu.\n    :param display_meta: (Optional string or formatted text) Meta information\n        about the completion, e.g. the path or source where it's coming from.\n        This can also be a callable that returns a string.\n    :param style: Style string.\n    :param selected_style: Style string, used for a selected completion.\n        This can override the `style` parameter.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='start_position', annotation=Name(id='int', ctx=Load())), arg(arg='display', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='display_meta', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='selected_style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=''), Constant(value='')]), body=[ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='to_formatted_text')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Store())], value=Name(id='start_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_display_meta', ctx=Store())], value=Name(id='display_meta', ctx=Load())), If(test=Compare(left=Name(id='display', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='display', ctx=Store())], value=Name(id='text', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='display', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selected_style', ctx=Store())], value=Name(id='selected_style', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())])]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(text={!r}, start_position={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Constant(value='{}(text={!r}, start_position={!r}, display={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Completion', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='text', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='start_position', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='display', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_display_meta', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_display_meta', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_display_meta', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='display_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="The 'display' field as plain text.")), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='fragment_list_to_text')], level=0), Return(value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='display_meta', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return meta-text. (This is lazy when using a callable).')), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='to_formatted_text')], level=0), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_display_meta', ctx=Load()), Constant(value='')])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='display_meta_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="The 'meta' field as plain text.")), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='fragment_list_to_text')], level=0), Return(value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='display_meta', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='new_completion_from_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='position', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        (Only for internal use!)\n        Get a new completion by splitting this one. Used by `Application` when\n        it needs to have a list of new completions after inserting the common\n        prefix.\n        ')), Assert(test=Compare(left=BinOp(left=Name(id='position', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load())), ops=[GtE()], comparators=[Constant(value=0)])), Return(value=Call(func=Name(id='Completion', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='position', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_position', ctx=Load()))), ctx=Load())), keyword(arg='display', value=Attribute(value=Name(id='self', ctx=Load()), attr='display', ctx=Load())), keyword(arg='display_meta', value=Attribute(value=Name(id='self', ctx=Load()), attr='_display_meta', ctx=Load()))]))], decorator_list=[], returns=Name(id='Completion', ctx=Load()))], decorator_list=[]), ClassDef(name='CompleteEvent', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Event that called the completer.\n\n    :param text_inserted: When True, it means that completions are requested\n        because of a text insert. (`Buffer.complete_while_typing`.)\n    :param completion_requested: When True, it means that the user explicitly\n        pressed the `Tab` key in order to view the completions.\n\n    These two flags can be used for instance to implement a completer that\n    shows some completions when ``Tab`` has been pressed, but not\n    automatically when the user presses a space. (Because of\n    `complete_while_typing`.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text_inserted', annotation=Name(id='bool', ctx=Load())), arg(arg='completion_requested', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='text_inserted', ctx=Load()), Name(id='completion_requested', ctx=Load())]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text_inserted', ctx=Store())], value=Name(id='text_inserted', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completion_requested', ctx=Store())], value=Name(id='completion_requested', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(text_inserted={!r}, completion_requested={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='text_inserted', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='completion_requested', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Completer', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class for completer implementations.\n    ')), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This should be a generator that yields :class:`.Completion` instances.\n\n        If the generation of completions is something expensive (that takes a\n        lot of time), consider wrapping this `Completer` class in a\n        `ThreadedCompleter`. In that case, the completer algorithm runs in a\n        background thread and completions will be displayed as soon as they\n        arrive.\n\n        :param document: :class:`~prompt_toolkit.document.Document` instance.\n        :param complete_event: :class:`.CompleteEvent` instance.\n        ')), While(test=Constant(value=False), body=[Expr(value=Yield())], orelse=[])], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='get_completions_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Asynchronous generator for completions. (Probably, you won't have to\n        override this.)\n\n        Asynchronous generator of :class:`.Completion` objects.\n        ")), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Completion', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ThreadedCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Wrapper that runs the `get_completions` generator in a thread.\n\n    (Use this to prevent the user interface from becoming unresponsive if the\n    generation of completions takes too much time.)\n\n    The completions will be displayed as soon as they are produced. The user\n    can already select a completion, even if not all completions are displayed.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completer', annotation=Name(id='Completer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='get_completions_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Asynchronous generator of completions.\n        ')), AsyncWith(items=[withitem(context_expr=Call(func=Name(id='aclosing', ctx=Load()), args=[Call(func=Name(id='generator_to_async_generator', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))], keywords=[])], keywords=[]), optional_vars=Name(id='async_generator', ctx=Store()))], body=[AsyncFor(target=Name(id='completion', ctx=Store()), iter=Name(id='async_generator', ctx=Load()), body=[Expr(value=Yield(value=Name(id='completion', ctx=Load())))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Completion', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ThreadedCompleter('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='DummyCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A completer that doesn't return any completion.\n    ")), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='DummyCompleter()'))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='DynamicCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Completer class that can dynamically returns any Completer.\n\n    :param get_completer: Callable that returns a :class:`.Completer` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_completer', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_completer', ctx=Store())], value=Name(id='get_completer', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='completer', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_completer', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyCompleter', ctx=Load()), args=[], keywords=[])])), Return(value=Call(func=Attribute(value=Name(id='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='get_completions_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='completer', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_completer', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyCompleter', ctx=Load()), args=[], keywords=[])])), AsyncFor(target=Name(id='completion', ctx=Store()), iter=Call(func=Attribute(value=Name(id='completer', ctx=Load()), attr='get_completions_async', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='completion', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Completion', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='DynamicCompleter('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='get_completer', ctx=Load()), conversion=114), Constant(value=' -> '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_completer', ctx=Load()), args=[], keywords=[]), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ConditionalCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Wrapper around any other completer that will enable/disable the completions\n    depending on whether the received condition is satisfied.\n\n    :param completer: :class:`.Completer` instance.\n    :param filter: :class:`.Filter` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completer', annotation=Name(id='Completer', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ConditionalCompleter('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), conversion=114), Constant(value=', filter='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='get_completions_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[AsyncWith(items=[withitem(context_expr=Call(func=Name(id='aclosing', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions_async', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='async_generator', ctx=Store()))], body=[AsyncFor(target=Name(id='item', ctx=Store()), iter=Name(id='async_generator', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Completion', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_MergedCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Combine several completers into one.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completers', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Completer', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completers', ctx=Store())], value=Name(id='completers', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='completer', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='completers', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='get_completions_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='completer', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='completers', ctx=Load()), body=[AsyncWith(items=[withitem(context_expr=Call(func=Name(id='aclosing', ctx=Load()), args=[Call(func=Attribute(value=Name(id='completer', ctx=Load()), attr='get_completions_async', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='async_generator', ctx=Store()))], body=[AsyncFor(target=Name(id='item', ctx=Store()), iter=Name(id='async_generator', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Completion', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_completers', args=arguments(posonlyargs=[], args=[arg(arg='completers', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Completer', ctx=Load()), ctx=Load())), arg(arg='deduplicate', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Combine several completers into one.\n\n    :param deduplicate: If `True`, wrap the result in a `DeduplicateCompleter`\n        so that completions that would result in the same text will be\n        deduplicated.\n    ')), If(test=Name(id='deduplicate', ctx=Load()), body=[ImportFrom(module='deduplicate', names=[alias(name='DeduplicateCompleter')], level=1), Return(value=Call(func=Name(id='DeduplicateCompleter', ctx=Load()), args=[Call(func=Name(id='_MergedCompleter', ctx=Load()), args=[Name(id='completers', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_MergedCompleter', ctx=Load()), args=[Name(id='completers', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Completer', ctx=Load())), FunctionDef(name='get_common_complete_suffix', args=arguments(posonlyargs=[], args=[arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='completions', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the common prefix for all completions.\n    ')), FunctionDef(name='doesnt_change_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='completion', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Attribute(value=Name(id='completion', ctx=Load()), attr='start_position', ctx=Load()))), ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='completions2', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='completions', ctx=Load()), ifs=[Call(func=Name(id='doesnt_change_before_cursor', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions2', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=''))], orelse=[]), FunctionDef(name='get_suffix', args=arguments(posonlyargs=[], args=[arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='completion', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Attribute(value=Name(id='completion', ctx=Load()), attr='start_position', ctx=Load()))), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Call(func=Name(id='_commonprefix', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='get_suffix', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='completions2', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_commonprefix', args=arguments(posonlyargs=[], args=[arg(arg='strings', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='strings', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[Assign(targets=[Name(id='s1', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='s2', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='s1', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='s2', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Return(value=Subscript(value=Name(id='s1', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='s1', ctx=Load()))])], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])