Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Iterable'), alias(name='Mapping'), alias(name='Pattern')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='CompleteEvent'), alias(name='Completer'), alias(name='Completion')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='WordCompleter')], ctx=Load())), ClassDef(name='WordCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Simple autocompletion on a list of words.\n\n    :param words: List of words or callable that returns a list of words.\n    :param ignore_case: If True, case-insensitive completion.\n    :param meta_dict: Optional dict mapping words to their meta-text. (This\n        should map strings to strings or formatted text.)\n    :param WORD: When True, use WORD characters.\n    :param sentence: When True, don't complete by comparing the word before the\n        cursor, but by comparing all the text before the cursor. In this case,\n        the list of words is just a list of strings, where each string can\n        contain spaces. (Can not be used together with the WORD option.)\n    :param match_middle: When True, match not only the start, but also in the\n                         middle of the word.\n    :param pattern: Optional compiled regex for finding the word before\n        the cursor to complete. When given, use this regex pattern instead of\n        default one (see document._FIND_WORD_RE)\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='words', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load())), arg(arg='display_dict', annotation=BinOp(left=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='meta_dict', annotation=BinOp(left=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='sentence', annotation=Name(id='bool', ctx=Load())), arg(arg='match_middle', annotation=Name(id='bool', ctx=Load())), arg(arg='pattern', annotation=BinOp(left=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='WORD', ctx=Load()), Name(id='sentence', ctx=Load())]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Store())], value=Name(id='words', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Store())], value=Name(id='ignore_case', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='display_dict', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='display_dict', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='meta_dict', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='meta_dict', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Store())], value=Name(id='WORD', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sentence', ctx=Store())], value=Name(id='sentence', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match_middle', ctx=Store())], value=Name(id='match_middle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='words', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Name(id='words', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='sentence', ctx=Load()), body=[Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load()))], orelse=[Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='get_word_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='WORD', value=Attribute(value=Name(id='self', ctx=Load()), attr='WORD', ctx=Load())), keyword(arg='pattern', value=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load()))]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Load()), body=[Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='word_before_cursor', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), FunctionDef(name='word_matches', args=arguments(posonlyargs=[], args=[arg(arg='word', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True when the word before the cursor matches.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Load()), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='match_middle', ctx=Load()), body=[Return(value=Compare(left=Name(id='word_before_cursor', ctx=Load()), ops=[In()], comparators=[Name(id='word', ctx=Load())]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), For(target=Name(id='a', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[If(test=Call(func=Name(id='word_matches', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='display', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='display_dict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='a', ctx=Load())], keywords=[])), Assign(targets=[Name(id='display_meta', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='meta_dict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='a', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='Completion', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='a', ctx=Load())), keyword(arg='start_position', value=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))), keyword(arg='display', value=Name(id='display', ctx=Load())), keyword(arg='display_meta', value=Name(id='display_meta', ctx=Load()))])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])