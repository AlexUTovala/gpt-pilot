Module(body=[Expr(value=Constant(value="\nSimilar to `PyOS_InputHook` of the Python API, we can plug in an input hook in\nthe asyncio event loop.\n\nThe way this works is by using a custom 'selector' that runs the other event\nloop until the real selector is ready.\n\nIt's the responsibility of this event hook to return when there is input ready.\nThere are two ways to detect when input is ready:\n\nThe inputhook itself is a callable that receives an `InputHookContext`. This\ncallable should run the other event loop, and return when the main loop has\nstuff to do. There are two ways to detect when to return:\n\n- Call the `input_is_ready` method periodically. Quit when this returns `True`.\n\n- Add the `fileno` as a watch to the external eventloop. Quit when file descriptor\n  becomes readable. (But don't read from it.)\n\n  Note that this is not the same as checking for `sys.stdin.fileno()`. The\n  eventloop of prompt-toolkit allows thread-based executors, for example for\n  asynchronous autocompletion. When the completion for instance is ready, we\n  also want prompt-toolkit to gain control again in order to display that.\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='asyncio')]), Import(names=[alias(name='os')]), Import(names=[alias(name='select')]), Import(names=[alias(name='selectors')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), ImportFrom(module='asyncio', names=[alias(name='AbstractEventLoop'), alias(name='get_running_loop')], level=0), ImportFrom(module='selectors', names=[alias(name='BaseSelector'), alias(name='SelectorKey')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Mapping')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='new_eventloop_with_inputhook'), Constant(value='set_eventloop_with_inputhook'), Constant(value='InputHookSelector'), Constant(value='InputHookContext')], ctx=Load())), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_typeshed', names=[alias(name='FileDescriptorLike')], level=0), Assign(targets=[Name(id='_EventMask', ctx=Store())], value=Name(id='int', ctx=Load()))], orelse=[]), FunctionDef(name='new_eventloop_with_inputhook', args=arguments(posonlyargs=[], args=[arg(arg='inputhook', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='InputHookContext', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a new event loop with the given inputhook.\n    ')), Assign(targets=[Name(id='selector', ctx=Store())], value=Call(func=Name(id='InputHookSelector', ctx=Load()), args=[Call(func=Attribute(value=Name(id='selectors', ctx=Load()), attr='DefaultSelector', ctx=Load()), args=[], keywords=[]), Name(id='inputhook', ctx=Load())], keywords=[])), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='SelectorEventLoop', ctx=Load()), args=[Name(id='selector', ctx=Load())], keywords=[])), Return(value=Name(id='loop', ctx=Load()))], decorator_list=[], returns=Name(id='AbstractEventLoop', ctx=Load())), FunctionDef(name='set_eventloop_with_inputhook', args=arguments(posonlyargs=[], args=[arg(arg='inputhook', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='InputHookContext', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a new event loop with the given inputhook, and activate it.\n    ')), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='new_eventloop_with_inputhook', ctx=Load()), args=[Name(id='inputhook', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='set_event_loop', ctx=Load()), args=[Name(id='loop', ctx=Load())], keywords=[])), Return(value=Name(id='loop', ctx=Load()))], decorator_list=[], returns=Name(id='AbstractEventLoop', ctx=Load())), ClassDef(name='InputHookSelector', bases=[Name(id='BaseSelector', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Usage:\n\n        selector = selectors.SelectSelector()\n        loop = asyncio.SelectorEventLoop(InputHookSelector(selector, inputhook))\n        asyncio.set_event_loop(loop)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='selector', annotation=Name(id='BaseSelector', ctx=Load())), arg(arg='inputhook', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='InputHookContext', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Store())], value=Name(id='selector', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inputhook', ctx=Store())], value=Name(id='inputhook', ctx=Load())), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_w', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='pipe', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='register', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileobj', annotation=Name(id='FileDescriptorLike', ctx=Load())), arg(arg='events', annotation=Name(id='_EventMask', ctx=Load())), arg(arg='data', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='fileobj', ctx=Load()), Name(id='events', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load()))]))], decorator_list=[], returns=Name(id='SelectorKey', ctx=Load())), FunctionDef(name='unregister', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileobj', annotation=Name(id='FileDescriptorLike', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='unregister', ctx=Load()), args=[Name(id='fileobj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='SelectorKey', ctx=Load())), FunctionDef(name='modify', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileobj', annotation=Name(id='FileDescriptorLike', ctx=Load())), arg(arg='events', annotation=Name(id='_EventMask', ctx=Load())), arg(arg='data', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='modify', ctx=Load()), args=[Name(id='fileobj', ctx=Load()), Name(id='events', ctx=Load())], keywords=[keyword(arg='data', value=Constant(value=None))]))], decorator_list=[], returns=Name(id='SelectorKey', ctx=Load())), FunctionDef(name='select', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[]), Constant(value='_ready'), List(elts=[], ctx=Load())], keywords=[])], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='ready', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), FunctionDef(name='run_selector', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Nonlocal(names=['ready', 'result']), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_w', ctx=Load()), Constant(value=b'x')], keywords=[])), Assign(targets=[Name(id='ready', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='th', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='run_selector', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='th', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), FunctionDef(name='input_is_ready', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='ready', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='inputhook', ctx=Load()), args=[Call(func=Name(id='InputHookContext', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), Name(id='input_is_ready', ctx=Load())], keywords=[])], keywords=[])), Try(body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')]), body=[Expr(value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load())], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), Constant(value=1024)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='th', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='SelectorKey', ctx=Load()), Name(id='_EventMask', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Clean up resources.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_w', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_w', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_map', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selector', ctx=Load()), attr='get_map', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='FileDescriptorLike', ctx=Load()), Name(id='SelectorKey', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='InputHookContext', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Given as a parameter to the inputhook.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileno', annotation=Name(id='int', ctx=Load())), arg(arg='input_is_ready', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fileno', ctx=Store())], value=Name(id='fileno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_is_ready', ctx=Store())], value=Name(id='input_is_ready', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileno', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])