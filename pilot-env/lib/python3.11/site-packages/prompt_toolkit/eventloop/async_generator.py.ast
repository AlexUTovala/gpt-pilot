Module(body=[Expr(value=Constant(value='\nImplementation for async generators.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='asyncio', names=[alias(name='get_running_loop')], level=0), ImportFrom(module='contextlib', names=[alias(name='asynccontextmanager')], level=0), ImportFrom(module='queue', names=[alias(name='Empty'), alias(name='Full'), alias(name='Queue')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='AsyncGenerator'), alias(name='Callable'), alias(name='Iterable'), alias(name='TypeVar')], level=0), ImportFrom(module='utils', names=[alias(name='run_in_executor_with_context')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='aclosing'), Constant(value='generator_to_async_generator')], ctx=Load())), Assign(targets=[Name(id='_T_Generator', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T_Generator')], keywords=[keyword(arg='bound', value=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))])), AsyncFunctionDef(name='aclosing', args=arguments(posonlyargs=[], args=[arg(arg='thing', annotation=Name(id='_T_Generator', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Similar to `contextlib.aclosing`, in Python 3.10.')), Try(body=[Expr(value=Yield(value=Name(id='thing', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='thing', ctx=Load()), attr='aclose', ctx=Load()), args=[], keywords=[])))])], decorator_list=[Name(id='asynccontextmanager', ctx=Load())], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='_T_Generator', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='DEFAULT_BUFFER_SIZE', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=1000), simple=1), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), ClassDef(name='_Done', bases=[], keywords=[], body=[Pass()], decorator_list=[]), AsyncFunctionDef(name='generator_to_async_generator', args=arguments(posonlyargs=[], args=[arg(arg='get_iterable', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='buffer_size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_BUFFER_SIZE', ctx=Load())]), body=[Expr(value=Constant(value='\n    Turn a generator or iterable into an async generator.\n\n    This works by running the generator in a background thread.\n\n    :param get_iterable: Function that returns a generator or iterable when\n        called.\n    :param buffer_size: Size of the queue between the async consumer and the\n        synchronous generator that produces items.\n    ')), Assign(targets=[Name(id='quitting', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Name(id='q', ctx=Store()), annotation=Subscript(value=Name(id='Queue', ctx=Load()), slice=BinOp(left=Name(id='_T', ctx=Load()), op=BitOr(), right=Name(id='_Done', ctx=Load())), ctx=Load()), value=Call(func=Name(id='Queue', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='buffer_size', ctx=Load()))]), simple=1), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), FunctionDef(name='runner', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Consume the generator in background thread.\n        When items are received, they'll be pushed to the queue.\n        ")), Try(body=[For(target=Name(id='item', ctx=Store()), iter=Call(func=Name(id='get_iterable', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='quitting', ctx=Load()), body=[Return()], orelse=[]), While(test=Constant(value=True), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=1))]))], handlers=[ExceptHandler(type=Name(id='Full', ctx=Load()), body=[If(test=Name(id='quitting', ctx=Load()), body=[Return()], orelse=[]), Continue()])], orelse=[Break()], finalbody=[])], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[While(test=Constant(value=True), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='put', ctx=Load()), args=[Call(func=Name(id='_Done', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='timeout', value=Constant(value=1))]))], handlers=[ExceptHandler(type=Name(id='Full', ctx=Load()), body=[If(test=Name(id='quitting', ctx=Load()), body=[Return()], orelse=[]), Continue()])], orelse=[Break()], finalbody=[])], orelse=[])])], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='runner_f', ctx=Store())], value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[])), Try(body=[While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='get_nowait', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Empty', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_in_executor', ctx=Load()), args=[Constant(value=None), Attribute(value=Name(id='q', ctx=Load()), attr='get', ctx=Load())], keywords=[])))])], orelse=[], finalbody=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='_Done', ctx=Load())], keywords=[]), body=[Break()], orelse=[Expr(value=Yield(value=Name(id='item', ctx=Load())))])], orelse=[])], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='quitting', ctx=Store())], value=Constant(value=True)), Expr(value=Await(value=Name(id='runner_f', ctx=Load())))])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='_T', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])