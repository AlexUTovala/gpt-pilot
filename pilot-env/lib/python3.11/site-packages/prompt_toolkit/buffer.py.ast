Module(body=[Expr(value=Constant(value='\nData structures for the Buffer.\nIt holds the text, cursor position, history, etc...\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='asyncio')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='wraps')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Awaitable'), alias(name='Callable'), alias(name='Coroutine'), alias(name='Iterable'), alias(name='TypeVar'), alias(name='cast')], level=0), ImportFrom(module='application.current', names=[alias(name='get_app')], level=1), ImportFrom(module='application.run_in_terminal', names=[alias(name='run_in_terminal')], level=1), ImportFrom(module='auto_suggest', names=[alias(name='AutoSuggest'), alias(name='Suggestion')], level=1), ImportFrom(module='cache', names=[alias(name='FastDictCache')], level=1), ImportFrom(module='clipboard', names=[alias(name='ClipboardData')], level=1), ImportFrom(module='completion', names=[alias(name='CompleteEvent'), alias(name='Completer'), alias(name='Completion'), alias(name='DummyCompleter'), alias(name='get_common_complete_suffix')], level=1), ImportFrom(module='document', names=[alias(name='Document')], level=1), ImportFrom(module='eventloop', names=[alias(name='aclosing')], level=1), ImportFrom(module='filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=1), ImportFrom(module='history', names=[alias(name='History'), alias(name='InMemoryHistory')], level=1), ImportFrom(module='search', names=[alias(name='SearchDirection'), alias(name='SearchState')], level=1), ImportFrom(module='selection', names=[alias(name='PasteMode'), alias(name='SelectionState'), alias(name='SelectionType')], level=1), ImportFrom(module='utils', names=[alias(name='Event'), alias(name='to_str')], level=1), ImportFrom(module='validation', names=[alias(name='ValidationError'), alias(name='Validator')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='EditReadOnlyBuffer'), Constant(value='Buffer'), Constant(value='CompletionState'), Constant(value='indent'), Constant(value='unindent'), Constant(value='reshape_text')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='EditReadOnlyBuffer', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Attempt editing of read-only :class:`.Buffer`.'))], decorator_list=[]), ClassDef(name='ValidationState', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The validation state of a buffer. This is set after the validation.')), Assign(targets=[Name(id='VALID', ctx=Store())], value=Constant(value='VALID')), Assign(targets=[Name(id='INVALID', ctx=Store())], value=Constant(value='INVALID')), Assign(targets=[Name(id='UNKNOWN', ctx=Store())], value=Constant(value='UNKNOWN'))], decorator_list=[]), ClassDef(name='CompletionState', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Immutable class that contains a completion state.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='original_document', annotation=Name(id='Document', ctx=Load())), arg(arg='completions', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Store())], value=Name(id='original_document', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='completions', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Store())], value=Name(id='complete_index', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}({!r}, <{!r}> completions, index={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='go_to_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a new :class:`.CompletionState` object with the new index.\n\n        When `index` is `None` deselect the completion.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Load()), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='index', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Load())], keywords=[])])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Store())], value=Name(id='index', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='new_text_and_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return (new_text, new_cursor_position) for this completion.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='original_text_before_cursor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Load()), attr='text_before_cursor', ctx=Load())), Assign(targets=[Name(id='original_text_after_cursor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_document', ctx=Load()), attr='text_after_cursor', ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='start_position', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='before', ctx=Store())], value=Name(id='original_text_before_cursor', ctx=Load()))], orelse=[Assign(targets=[Name(id='before', ctx=Store())], value=Subscript(value=Name(id='original_text_before_cursor', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='c', ctx=Load()), attr='start_position', ctx=Load())), ctx=Load()))]), Assign(targets=[Name(id='new_text', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Attribute(value=Name(id='c', ctx=Load()), attr='text', ctx=Load())), op=Add(), right=Name(id='original_text_after_cursor', ctx=Load()))), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='before', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='text', ctx=Load())], keywords=[]))), Return(value=Tuple(elts=[Name(id='new_text', ctx=Load()), Name(id='new_cursor_position', ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='current_completion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the current completion, or return `None` when no completion is\n        selected.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='completions', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='complete_index', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='Completion', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), Assign(targets=[Name(id='_QUOTED_WORDS_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\s+|".*?"|\'.*?\')')], keywords=[])), ClassDef(name='YankNthArgState', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    For yank-last-arg/yank-nth-arg: Keep track of where we are in the history.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='history_position', annotation=Name(id='int', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='previous_inserted_word', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history_position', ctx=Store())], value=Name(id='history_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='previous_inserted_word', ctx=Store())], value=Name(id='previous_inserted_word', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='n', ctx=Store())], value=Name(id='n', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}(history_position={!r}, n={!r}, previous_inserted_word={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='history_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='previous_inserted_word', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='BufferEventHandler', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Buffer')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='BufferAcceptHandler', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Buffer')], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Buffer', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    The core data structure that holds the text and cursor position of the\n    current input line and implements all text manipulations on top of it. It\n    also implements the history, undo stack and the completion state.\n\n    :param completer: :class:`~prompt_toolkit.completion.Completer` instance.\n    :param history: :class:`~prompt_toolkit.history.History` instance.\n    :param tempfile_suffix: The tempfile suffix (extension) to be used for the\n        "open in editor" function. For a Python REPL, this would be ".py", so\n        that the editor knows the syntax highlighting to use. This can also be\n        a callable that returns a string.\n    :param tempfile: For more advanced tempfile situations where you need\n        control over the subdirectories and filename. For a Git Commit Message,\n        this would be ".git/COMMIT_EDITMSG", so that the editor knows the syntax\n        highlighting to use. This can also be a callable that returns a string.\n    :param name: Name for this buffer. E.g. DEFAULT_BUFFER. This is mostly\n        useful for key bindings where we sometimes prefer to refer to a buffer\n        by their name instead of by reference.\n    :param accept_handler: Called when the buffer input is accepted. (Usually\n        when the user presses `enter`.) The accept handler receives this\n        `Buffer` as input and should return True when the buffer text should be\n        kept instead of calling reset.\n\n        In case of a `PromptSession` for instance, we want to keep the text,\n        because we will exit the application, and only reset it during the next\n        run.\n\n    Events:\n\n    :param on_text_changed: When the buffer text changes. (Callable or None.)\n    :param on_text_insert: When new text is inserted. (Callable or None.)\n    :param on_cursor_position_changed: When the cursor moves. (Callable or None.)\n    :param on_completions_changed: When the completions were changed. (Callable or None.)\n    :param on_suggestion_set: When an auto-suggestion text has been set. (Callable or None.)\n\n    Filters:\n\n    :param complete_while_typing: :class:`~prompt_toolkit.filters.Filter`\n        or `bool`. Decide whether or not to do asynchronous autocompleting while\n        typing.\n    :param validate_while_typing: :class:`~prompt_toolkit.filters.Filter`\n        or `bool`. Decide whether or not to do asynchronous validation while\n        typing.\n    :param enable_history_search: :class:`~prompt_toolkit.filters.Filter` or\n        `bool` to indicate when up-arrow partial string matching is enabled. It\n        is advised to not enable this at the same time as\n        `complete_while_typing`, because when there is an autocompletion found,\n        the up arrows usually browse through the completions, rather than\n        through the history.\n    :param read_only: :class:`~prompt_toolkit.filters.Filter`. When True,\n        changes will not be allowed.\n    :param multiline: :class:`~prompt_toolkit.filters.Filter` or `bool`. When\n        not set, pressing `Enter` will call the `accept_handler`.  Otherwise,\n        pressing `Esc-Enter` is required.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='history', annotation=BinOp(left=Name(id='History', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile_suffix', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='tempfile', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='complete_while_typing', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='validate_while_typing', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='enable_history_search', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='document', annotation=BinOp(left=Name(id='Document', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='accept_handler', annotation=BinOp(left=Name(id='BufferAcceptHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='read_only', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='multiline', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='on_text_changed', annotation=BinOp(left=Name(id='BufferEventHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='on_text_insert', annotation=BinOp(left=Name(id='BufferEventHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='on_cursor_position_changed', annotation=BinOp(left=Name(id='BufferEventHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='on_completions_changed', annotation=BinOp(left=Name(id='BufferEventHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='on_suggestion_set', annotation=BinOp(left=Name(id='BufferEventHandler', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=''), Constant(value=''), Constant(value=''), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='enable_history_search', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='enable_history_search', ctx=Load())], keywords=[])), Assign(targets=[Name(id='complete_while_typing', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='complete_while_typing', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validate_while_typing', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='validate_while_typing', ctx=Load())], keywords=[])), Assign(targets=[Name(id='read_only', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='read_only', ctx=Load())], keywords=[])), Assign(targets=[Name(id='multiline', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='multiline', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='completer', ctx=Load()), Call(func=Name(id='DummyCompleter', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Store())], value=Name(id='auto_suggest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Store())], value=Name(id='tempfile_suffix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Store())], value=Name(id='tempfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='accept_handler', ctx=Store())], value=Name(id='accept_handler', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Store())], value=Name(id='complete_while_typing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_while_typing', ctx=Store())], value=Name(id='validate_while_typing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Store())], value=Name(id='enable_history_search', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Store())], value=Name(id='read_only', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Store())], value=Name(id='multiline', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text_width', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Store())], value=IfExp(test=Compare(left=Name(id='history', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='InMemoryHistory', ctx=Load()), args=[], keywords=[]), orelse=Name(id='history', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='on_text_changed', ctx=Store()), annotation=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='Buffer', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_text_changed', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='on_text_insert', ctx=Store()), annotation=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='Buffer', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_text_insert', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='on_cursor_position_changed', ctx=Store()), annotation=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='Buffer', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_cursor_position_changed', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='on_completions_changed', ctx=Store()), annotation=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='Buffer', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_completions_changed', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='on_suggestion_set', ctx=Store()), annotation=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='Buffer', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_suggestion_set', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_document_cache', ctx=Store()), annotation=Subscript(value=Name(id='FastDictCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), BinOp(left=Name(id='SelectionState', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), Name(id='Document', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='FastDictCache', ctx=Load()), args=[Name(id='Document', ctx=Load())], keywords=[keyword(arg='size', value=Constant(value=10))]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_async_suggester', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_auto_suggest_coroutine', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_async_completer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_completer_coroutine', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_async_validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_auto_validate_coroutine', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Store()), annotation=BinOp(left=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Future', ctx=Load()), slice=Constant(value=None), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[keyword(arg='document', value=Name(id='document', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=15)]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Constant(value=12)), ctx=Load()), op=Add(), right=Constant(value='...')))]), Return(value=JoinedStr(values=[Constant(value='<Buffer(name='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=', text='), FormattedValue(value=Name(id='text', ctx=Load()), conversion=114), Constant(value=') at '), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=BinOp(left=Name(id='Document', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='append_to_history', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n        :param append_to_history: Append current input to history first.\n        ')), If(test=Name(id='append_to_history', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append_to_history', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='document', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='document', ctx=Load()), Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Store())], value=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Store()), annotation=BinOp(left=Name(id='ValidationError', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store()), annotation=BinOp(left=Name(id='ValidationState', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='UNKNOWN', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Store()), annotation=BinOp(left=Name(id='SelectionState', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='multiple_cursor_positions', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store()), annotation=BinOp(left=Name(id='CompletionState', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Store()), annotation=BinOp(left=Name(id='YankNthArgState', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='document_before_paste', ctx=Store()), annotation=BinOp(left=Name(id='Document', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='suggestion', ctx=Store()), annotation=BinOp(left=Name(id='Suggestion', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_redo_stack', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Store()), annotation=Subscript(value=Name(id='deque', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], ctx=Load())], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__working_index', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_history_if_not_yet_loaded', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create task for populating the buffer history (if not yet done).\n\n        Note::\n\n            This needs to be called from within the event loop of the\n            application, because history loading is async, and we need to be\n            sure the right event loop is active. Therefor, we call this method\n            in the `BufferControl.create_content`.\n\n            There are situations where prompt_toolkit applications are created\n            in one thread, but will later run in a different thread (Ptpython\n            is one example. The REPL runs in a separate thread, in order to\n            prevent interfering with a potential different event loop in the\n            main thread. The REPL UI however is still created in the main\n            thread.) We could decide to not support creating prompt_toolkit\n            objects in one thread and running the application in a different\n            thread, but history loading is the only place where it matters, and\n            this solves it.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AsyncFunctionDef(name='load_history', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AsyncFor(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='__working_index', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='load_history', ctx=Load()), args=[], keywords=[])], keywords=[])), FunctionDef(name='load_history_done', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Future', ctx=Load()), slice=Constant(value=None), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n                Handle `load_history` result when either done, cancelled, or\n                when an exception was raised.\n                ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='result', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='asyncio', ctx=Load()), attr='CancelledError', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='GeneratorExit', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Loading history failed')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_load_history_task', ctx=Load()), attr='add_done_callback', ctx=Load()), args=[Name(id='load_history_done', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_set_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='set text at current working_index. Return whether it changed.')), Assign(targets=[Name(id='working_index', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load())), Assign(targets=[Name(id='working_lines', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())), Assign(targets=[Name(id='original_value', ctx=Store())], value=Subscript(value=Name(id='working_lines', ctx=Load()), slice=Name(id='working_index', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='working_lines', ctx=Load()), slice=Name(id='working_index', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='original_value', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotEq()], comparators=[Name(id='original_value', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_set_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set cursor position. Return whether it changed.')), Assign(targets=[Name(id='original_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='value', ctx=Load())], keywords=[])), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Load()), ops=[NotEq()], comparators=[Name(id='original_position', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Setting text. (When doing this, make sure that the cursor_position is\n        valid for this text. text/cursor_position should be consistent at any time,\n        otherwise set a Document instead.)\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='EditReadOnlyBuffer', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='changed', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_text', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Name(id='changed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_text_changed', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[Attribute(value=Name(id='text', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='__cursor_position', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Setting cursor position.\n        ')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='changed', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_cursor_position', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Name(id='changed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_position_changed', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Name(id='cursor_position', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='working_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='__working_index', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='working_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__working_index', ctx=Load()), ops=[NotEq()], comparators=[Name(id='value', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__working_index', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_text_changed', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Name(id='working_index', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_text_changed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store())], value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='UNKNOWN', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document_before_paste', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suggestion', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_text_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate_while_typing', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_validator', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_cursor_position_changed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document_before_paste', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_cursor_position_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='document', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return :class:`~prompt_toolkit.document.Document` instance from the\n        current text, cursor position and selection state.\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_document_cache', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Document', ctx=Load())), FunctionDef(name='document', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set :class:`~prompt_toolkit.document.Document` instance.\n\n        This will set both the text and cursor position at the same time, but\n        atomically. (Change events will be triggered only after both have been set.)\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_document', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='document', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='set_document', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Document', ctx=Load())), arg(arg='bypass_readonly', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Set :class:`~prompt_toolkit.document.Document` instance. Like the\n        ``document`` property, but accept an ``bypass_readonly`` argument.\n\n        :param bypass_readonly: When True, don't raise an\n                                :class:`.EditReadOnlyBuffer` exception, even\n                                when the buffer is read-only.\n\n        .. warning::\n\n            When this buffer is read-only and `bypass_readonly` was not passed,\n            the `EditReadOnlyBuffer` exception will be caught by the\n            `KeyProcessor` and is silently suppressed. This is important to\n            keep in mind when writing key bindings, because it won't do what\n            you expect, and there won't be a stack trace. Use try/finally\n            around this function if you need some cleanup code.\n        ")), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='bypass_readonly', ctx=Load())), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='EditReadOnlyBuffer', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='text_changed', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_text', ctx=Load()), args=[Attribute(value=Name(id='value', ctx=Load()), attr='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cursor_position_changed', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_cursor_position', ctx=Load()), args=[Attribute(value=Name(id='value', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[])), If(test=Name(id='text_changed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_text_changed', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Name(id='cursor_position_changed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_position_changed', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_returnable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when there is something handling accept.\n        ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='accept_handler', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='save_to_undo_stack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='clear_redo_stack', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Safe current state (input text and cursor position), so that we can\n        restore it by calling undo.\n        ')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), Compare(left=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Tuple(elts=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load())], keywords=[]))]), If(test=Name(id='clear_redo_stack', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_redo_stack', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line_index_iterator', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='transform_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Transforms the text on a range of lines.\n        When the iterator yield an index not in the range of lines that the\n        document contains, it skips them silently.\n\n        To uppercase some lines::\n\n            new_text = transform_lines(range(5,10), lambda text: text.upper())\n\n        :param line_index_iterator: Iterator of line numbers (int)\n        :param transform_callback: callable that takes the original text of a\n                                   line, and return the new text for this line.\n\n        :returns: The new text.\n        ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Name(id='index', ctx=Store()), iter=Name(id='line_index_iterator', ctx=Load()), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Call(func=Name(id='transform_callback', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='transform_current_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='transform_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Apply the given transformation function to the current line.\n\n        :param transform_callback: callable that takes a string and return a new string.\n        ')), Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), Assign(targets=[Name(id='a', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='b', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Name(id='a', ctx=Load())), ctx=Load()), op=Add(), right=Call(func=Name(id='transform_callback', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='a', ctx=Load()), upper=Name(id='b', ctx=Load())), ctx=Load())], keywords=[])), op=Add(), right=Subscript(value=Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='b', ctx=Load())), ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_region', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='from_', annotation=Name(id='int', ctx=Load())), arg(arg='to', annotation=Name(id='int', ctx=Load())), arg(arg='transform_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Transform a part of the input string.\n\n        :param from_: (int) start position.\n        :param to: (int) end position.\n        :param transform_callback: Callable which accepts a string and returns\n            the transformed string.\n        ')), Assert(test=Compare(left=Name(id='from_', ctx=Load()), ops=[Lt()], comparators=[Name(id='to', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[List(elts=[BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Name(id='from_', ctx=Load())), ctx=Load()), op=Add(), right=Call(func=Name(id='transform_callback', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='from_', ctx=Load()), upper=Name(id='to', ctx=Load())), ctx=Load())], keywords=[])), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='to', ctx=Load())), ctx=Load()))], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_left', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_left_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_right', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_right_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='(for multiline edit). Move cursor to the previous line.')), Assign(targets=[Name(id='original_column', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_col', ctx=Load())])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_up_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load())), keyword(arg='preferred_column', value=Name(id='original_column', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Store())], value=Name(id='original_column', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='(for multiline edit). Move cursor to the next line.')), Assign(targets=[Name(id='original_column', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_col', ctx=Load())])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_down_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load())), keyword(arg='preferred_column', value=Name(id='original_column', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preferred_column', ctx=Store())], value=Name(id='original_column', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='auto_up', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='go_to_start_of_line_if_history_changes', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value="\n        If we're not on the first line (of a multiline input) go a line up,\n        otherwise go back in history. (If nothing is selected.)\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='complete_previous', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_row', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_up', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], orelse=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='history_backward', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Name(id='go_to_start_of_line_if_history_changes', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='auto_down', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='go_to_start_of_line_if_history_changes', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value="\n        If we're not on the last line (of a multiline input) go a line down,\n        otherwise go forward in history. (If nothing is selected.)\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='complete_next', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_row', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_down', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))]))], orelse=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='history_forward', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Name(id='go_to_start_of_line_if_history_changes', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Delete specified number of characters before cursor and return the\n        deleted text.\n        ')), Assert(test=Compare(left=Name(id='count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='deleted', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), upper=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='new_text', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load()))), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), ctx=Load()))), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load()), Name(id='new_cursor_position', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='deleted', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Delete specified number of characters and Return the deleted text.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(upper=Name(id='count', ctx=Load())), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))), ctx=Load()))), Return(value=Name(id='deleted', ctx=Load()))], orelse=[Return(value=Constant(value=''))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='join_next_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='separator', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' ')]), body=[Expr(value=Constant(value='\n        Join the next line to the current one by deleting the line ending after\n        the current line.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='on_last_line', ctx=Load())), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load()), op=Add(), right=Name(id='separator', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value=' ')], keywords=[])))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='join_selected_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='separator', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' ')]), body=[Expr(value=Constant(value='\n        Join the selected lines.\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load()), attr='original_cursor_position', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='before', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Name(id='from_', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='from_', ctx=Load()), upper=Name(id='to', ctx=Load())), ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='after', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='to', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='l', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value=' ')], keywords=[]), op=Add(), right=Name(id='separator', ctx=Load())), generators=[comprehension(target=Name(id='l', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=BinOp(left=BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), op=Add(), right=Name(id='after', ctx=Load()))), keyword(arg='cursor_position', value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], keywords=[]), op=Sub(), right=Constant(value=1)))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='swap_characters_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Swap the last two characters before the cursor.\n        ')), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=2))), ctx=Load()), op=Add(), right=Name(id='b', ctx=Load())), op=Add(), right=Name(id='a', ctx=Load())), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load())), ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='go_to_history', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Go to this item in the history.\n        ')), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Store())], value=Name(id='index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='complete_next', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='disable_wrap_around', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Browse to the next completions.\n        (Does nothing if there are no completion.)\n        ')), AnnAssign(target=Name(id='index', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[Assign(targets=[Name(id='completions_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='completions_count', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=None)), If(test=Name(id='disable_wrap_around', ctx=Load()), body=[Return()], orelse=[])], orelse=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='completions_count', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), op=Add(), right=Name(id='count', ctx=Load()))], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='complete_previous', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='disable_wrap_around', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Browse to the previous completions.\n        (Does nothing if there are no completion.)\n        ')), AnnAssign(target=Name(id='index', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=None)), If(test=Name(id='disable_wrap_around', ctx=Load()), body=[Return()], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='completions', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load()))], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cancel_completion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cancel completion, go back to the original text.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_set_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start completions. (Generate list of completions and initialize.)\n\n        By default, no completion will be selected.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Call(func=Name(id='CompletionState', ctx=Load()), args=[], keywords=[keyword(arg='original_document', value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), keyword(arg='completions', value=Name(id='completions', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_completions_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()))], decorator_list=[], returns=Name(id='CompletionState', ctx=Load())), FunctionDef(name='start_history_lines_completion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start a completion based on all the other lines in the document and the\n        history.\n        ')), AnnAssign(target=Name(id='found_completions', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='completions', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='current_line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='current_line_before_cursor', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='string', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='l', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='l', ctx=Store())], value=Call(func=Attribute(value=Name(id='l', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='l', ctx=Load()), Call(func=Attribute(value=Name(id='l', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='current_line', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='l', ctx=Load()), ops=[NotIn()], comparators=[Name(id='found_completions', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='found_completions', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load())]), body=[Assign(targets=[Name(id='display_meta', ctx=Store())], value=BinOp(left=Constant(value='Current, line %s'), op=Mod(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Constant(value=1))))], orelse=[Assign(targets=[Name(id='display_meta', ctx=Store())], value=JoinedStr(values=[Constant(value='History '), FormattedValue(value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1), Constant(value=', line '), FormattedValue(value=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1)]))]), Expr(value=Call(func=Attribute(value=Name(id='completions', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Completion', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='l', ctx=Load())), keyword(arg='start_position', value=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='current_line', ctx=Load())], keywords=[]))), keyword(arg='display_meta', value=Name(id='display_meta', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_completions', ctx=Load()), args=[], keywords=[keyword(arg='completions', value=Subscript(value=Name(id='completions', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Constant(value=0)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='go_to_completion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Select a completion from the list of current completions.\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='go_to_index', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='new_text', ctx=Store()), Name(id='new_cursor_position', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='new_text_and_position', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load()), Name(id='new_cursor_position', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Name(id='state', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='apply_completion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Insert a given completion.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[UnaryOp(op=USub(), operand=Attribute(value=Name(id='completion', ctx=Load()), attr='start_position', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Attribute(value=Name(id='completion', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_set_history_search', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set `history_search_text`.\n        (The text before the cursor will be used for filtering the history.)\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Store())], value=Constant(value=None))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_history_matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        True when the current entry matches the history search.\n        (when we don't have history search, it's also True.)\n        ")), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='history_search_text', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='history_forward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Move forwards through the history.\n\n        :param count: Amount of items to move forward.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_history_search', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='found_something', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_history_matches', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Store())], value=Name(id='i', ctx=Load())), AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Name(id='found_something', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Break()], orelse=[])], orelse=[]), If(test=Name(id='found_something', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Constant(value=0)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='history_backward', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Move backwards through history.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_history_search', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='found_something', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_history_matches', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Store())], value=Name(id='i', ctx=Load())), AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Name(id='found_something', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Break()], orelse=[])], orelse=[]), If(test=Name(id='found_something', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='yank_nth_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='_yank_last_arg', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Pick nth word from previous history entry (depending on current\n        `yank_nth_arg_state`) and insert it at current position. Rotate through\n        history if called repeatedly. If no `n` has been given, take the first\n        argument. (The second word.)\n\n        :param n: (None or int), The index of the word from the previous line\n            to take.\n        ')), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='n', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='history_strings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='get_strings', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='history_strings', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Name(id='YankNthArgState', ctx=Load()), args=[], keywords=[keyword(arg='n', value=IfExp(test=Name(id='_yank_last_arg', ctx=Load()), body=UnaryOp(op=USub(), operand=Constant(value=1)), orelse=Constant(value=1)))]))], orelse=[Assign(targets=[Name(id='state', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Load()))]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='state', ctx=Load()), attr='n', ctx=Store())], value=Name(id='n', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='new_pos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='state', ctx=Load()), attr='history_position', ctx=Load()), op=Sub(), right=Constant(value=1))), If(test=Compare(left=UnaryOp(op=USub(), operand=Name(id='new_pos', ctx=Load())), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='history_strings', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='new_pos', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='history_strings', ctx=Load()), slice=Name(id='new_pos', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='words', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_QUOTED_WORDS_RE', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='words', ctx=Store())], value=ListComp(elt=Name(id='w', ctx=Load()), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Name(id='words', ctx=Load()), ifs=[Name(id='w', ctx=Load())], is_async=0)])), Try(body=[Assign(targets=[Name(id='word', ctx=Store())], value=Subscript(value=Name(id='words', ctx=Load()), slice=Attribute(value=Name(id='state', ctx=Load()), attr='n', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Constant(value=''))])], orelse=[], finalbody=[]), If(test=Attribute(value=Name(id='state', ctx=Load()), attr='previous_inserted_word', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='state', ctx=Load()), attr='previous_inserted_word', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='state', ctx=Load()), attr='previous_inserted_word', ctx=Store())], value=Name(id='word', ctx=Load())), Assign(targets=[Attribute(value=Name(id='state', ctx=Load()), attr='history_position', ctx=Store())], value=Name(id='new_pos', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg_state', ctx=Store())], value=Name(id='state', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='yank_last_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Like `yank_nth_arg`, but if no argument has been given, yank the last\n        word by default.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='yank_nth_arg', ctx=Load()), args=[], keywords=[keyword(arg='n', value=Name(id='n', ctx=Load())), keyword(arg='_yank_last_arg', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='start_selection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='selection_type', annotation=Name(id='SelectionType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load())]), body=[Expr(value=Constant(value='\n        Take the current cursor position as the start of this selection.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Store())], value=Call(func=Name(id='SelectionState', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Name(id='selection_type', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='copy_selection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_cut', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Copy selected text and return :class:`.ClipboardData` instance.\n\n        Notice that this doesn't store the copied data on the clipboard yet.\n        You can store it like this:\n\n        .. code:: python\n\n            data = buffer.copy_selection()\n            get_app().clipboard.set_data(data)\n        ")), Assign(targets=[Tuple(elts=[Name(id='new_document', ctx=Store()), Name(id='clipboard_data', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[])), If(test=Name(id='_cut', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Name(id='new_document', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='clipboard_data', ctx=Load()))], decorator_list=[], returns=Name(id='ClipboardData', ctx=Load())), FunctionDef(name='cut_selection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Delete selected text and return :class:`.ClipboardData` instance.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_selection', ctx=Load()), args=[], keywords=[keyword(arg='_cut', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='ClipboardData', ctx=Load())), FunctionDef(name='paste_clipboard_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='ClipboardData', ctx=Load())), arg(arg='paste_mode', annotation=Name(id='PasteMode', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='PasteMode', ctx=Load()), attr='EMACS', ctx=Load()), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Insert the data from the clipboard.\n        ')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='ClipboardData', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='paste_mode', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='PasteMode', ctx=Load()), attr='VI_BEFORE', ctx=Load()), Attribute(value=Name(id='PasteMode', ctx=Load()), attr='VI_AFTER', ctx=Load()), Attribute(value=Name(id='PasteMode', ctx=Load()), attr='EMACS', ctx=Load())], ctx=Load())])), Assign(targets=[Name(id='original_document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='paste_clipboard_data', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='paste_mode', value=Name(id='paste_mode', ctx=Load())), keyword(arg='count', value=Name(id='count', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document_before_paste', ctx=Store())], value=Name(id='original_document', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='newline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='copy_margin', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Insert a line ending at the current position.\n        ')), If(test=Name(id='copy_margin', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='leading_whitespace_in_current_line', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Constant(value='\n')], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='insert_line_above', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='copy_margin', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Insert a new line above the current one.\n        ')), If(test=Name(id='copy_margin', ctx=Load()), body=[Assign(targets=[Name(id='insert', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='leading_whitespace_in_current_line', ctx=Load()), op=Add(), right=Constant(value='\n')))], orelse=[Assign(targets=[Name(id='insert', ctx=Store())], value=Constant(value='\n'))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='insert', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Sub(), value=Constant(value=1))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='insert_line_below', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='copy_margin', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Insert a new line below the current one.\n        ')), If(test=Name(id='copy_margin', ctx=Load()), body=[Assign(targets=[Name(id='insert', ctx=Store())], value=BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='leading_whitespace_in_current_line', ctx=Load())))], orelse=[Assign(targets=[Name(id='insert', ctx=Store())], value=Constant(value='\n'))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='insert', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='insert_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='overwrite', annotation=Name(id='bool', ctx=Load())), arg(arg='move_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='fire_event', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=True), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Insert characters at cursor position.\n\n        :param fire_event: Fire `on_text_insert` event. This is mainly used to\n            trigger autocompletion while typing.\n        ')), Assign(targets=[Name(id='otext', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())), Assign(targets=[Name(id='ocpos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), If(test=Name(id='overwrite', ctx=Load()), body=[Assign(targets=[Name(id='overwritten_text', ctx=Store())], value=Subscript(value=Name(id='otext', ctx=Load()), slice=Slice(lower=Name(id='ocpos', ctx=Load()), upper=BinOp(left=Name(id='ocpos', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))), ctx=Load())), If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='overwritten_text', ctx=Load())]), body=[Assign(targets=[Name(id='overwritten_text', ctx=Store())], value=Subscript(value=Name(id='overwritten_text', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='overwritten_text', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n')], keywords=[])), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='otext', ctx=Load()), slice=Slice(upper=Name(id='ocpos', ctx=Load())), ctx=Load()), op=Add(), right=Name(id='data', ctx=Load())), op=Add(), right=Subscript(value=Name(id='otext', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='ocpos', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='overwritten_text', ctx=Load())], keywords=[]))), ctx=Load())))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='otext', ctx=Load()), slice=Slice(upper=Name(id='ocpos', ctx=Load())), ctx=Load()), op=Add(), right=Name(id='data', ctx=Load())), op=Add(), right=Subscript(value=Name(id='otext', ctx=Load()), slice=Slice(lower=Name(id='ocpos', ctx=Load())), ctx=Load())))]), If(test=Name(id='move_cursor', ctx=Load()), body=[Assign(targets=[Name(id='cpos', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='cpos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='cpos', ctx=Load())], keywords=[])), If(test=Name(id='fire_event', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_text_insert', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_completer', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_suggester', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='undo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='pos', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undo_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_redo_stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='cursor_position', value=Name(id='pos', ctx=Load()))])), Break()], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='redo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_redo_stack', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='save_to_undo_stack', ctx=Load()), args=[], keywords=[keyword(arg='clear_redo_stack', value=Constant(value=False))])), Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='pos', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_redo_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='cursor_position', value=Name(id='pos', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='set_cursor', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Returns `True` if valid.\n\n        :param set_cursor: Set the cursor position, if an error was found.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='ValidationState', ctx=Load()), attr='UNKNOWN', ctx=Load())]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ValidationState', ctx=Load()), attr='VALID', ctx=Load())]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValidationError', ctx=Load()), name='e', body=[If(test=Name(id='set_cursor', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='e', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store())], value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='INVALID', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Store())], value=Name(id='e', ctx=Load())), Return(value=Constant(value=False))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store())], value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='VALID', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Store())], value=Constant(value=None)), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), AsyncFunctionDef(name='_validate_async', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Asynchronous version of `validate()`.\n        This one doesn't set the cursor position.\n\n        We have both variants, because a synchronous version is required.\n        Handling the ENTER key needs to be completely synchronous, otherwise\n        stuff like type-ahead is going to give very weird results. (People\n        could type input while the ENTER key is still processed.)\n\n        An asynchronous version is required if we have `validate_while_typing`\n        enabled.\n        ")), While(test=Constant(value=True), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='ValidationState', ctx=Load()), attr='UNKNOWN', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='error', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), body=[Try(body=[Expr(value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), attr='validate_async', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())], keywords=[])))], handlers=[ExceptHandler(type=Name(id='ValidationError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='error', ctx=Store())], value=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), ops=[NotEq()], comparators=[Name(id='document', ctx=Load())]), body=[Continue()], orelse=[])], orelse=[]), If(test=Name(id='error', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store())], value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='INVALID', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_state', ctx=Store())], value=Attribute(value=Name(id='ValidationState', ctx=Load()), attr='VALID', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validation_error', ctx=Store())], value=Name(id='error', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='invalidate', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_to_history', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Append the current input to the history.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), body=[Assign(targets=[Name(id='history_strings', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='get_strings', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='history_strings', ctx=Load())], keywords=[])), Compare(left=Subscript(value=Name(id='history_strings', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='append_string', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_search', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='search_state', annotation=Name(id='SearchState', ctx=Load())), arg(arg='include_current_position', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Execute search. Return (working_index, cursor_position) tuple when this\n        search is applied. Returns `None` when this text cannot be found.\n        ')), Assert(test=Compare(left=Name(id='count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='search_state', ctx=Load()), attr='text', ctx=Load())), Assign(targets=[Name(id='direction', ctx=Store())], value=Attribute(value=Name(id='search_state', ctx=Load()), attr='direction', ctx=Load())), Assign(targets=[Name(id='ignore_case', ctx=Store())], value=Call(func=Attribute(value=Name(id='search_state', ctx=Load()), attr='ignore_case', ctx=Load()), args=[], keywords=[])), FunctionDef(name='search_once', args=arguments(posonlyargs=[], args=[arg(arg='working_index', annotation=Name(id='int', ctx=Load())), arg(arg='document', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Do search one time.\n            Return (working_index, document) or `None`\n            ')), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SearchDirection', ctx=Load()), attr='FORWARD', ctx=Load())]), body=[Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Name(id='include_current_position', ctx=Load())), keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load()))])), If(test=Compare(left=Name(id='new_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='working_index', ctx=Load()), Call(func=Name(id='Document', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Name(id='new_index', ctx=Load()))], keywords=[])], ctx=Load()))], orelse=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='working_index', ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Mod(), value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Constant(value=True)), keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load()))])), If(test=Compare(left=Name(id='new_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='i', ctx=Load()), Call(func=Name(id='Document', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), Name(id='new_index', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[])], orelse=[])])], orelse=[Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find_backwards', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load()))])), If(test=Compare(left=Name(id='new_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='working_index', ctx=Load()), Call(func=Name(id='Document', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), BinOp(left=Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Name(id='new_index', ctx=Load()))], keywords=[])], ctx=Load()))], orelse=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='working_index', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=2)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Mod(), value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='new_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='document', ctx=Load()), attr='find_backwards', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load()))])), If(test=Compare(left=Name(id='new_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='i', ctx=Load()), Call(func=Name(id='Document', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text', ctx=Load())], keywords=[]), op=Add(), right=Name(id='new_index', ctx=Load()))], keywords=[])], ctx=Load()))], orelse=[])], orelse=[])])]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Document', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), Assign(targets=[Name(id='working_index', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load())), Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='count', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='search_once', ctx=Load()), args=[Name(id='working_index', ctx=Load()), Name(id='document', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Tuple(elts=[Name(id='working_index', ctx=Store()), Name(id='document', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load()))])], orelse=[]), Return(value=Tuple(elts=[Name(id='working_index', ctx=Load()), Attribute(value=Name(id='document', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load()))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='document_for_search', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='search_state', annotation=Name(id='SearchState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a :class:`~prompt_toolkit.document.Document` instance that has\n        the text/cursor position for this search, if we would apply it. This\n        will be used in the\n        :class:`~prompt_toolkit.layout.BufferControl` to display feedback while\n        searching.\n        ')), Assign(targets=[Name(id='search_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='search_state', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Constant(value=True))])), If(test=Compare(left=Name(id='search_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='working_index', ctx=Store()), Name(id='cursor_position', ctx=Store())], ctx=Store())], value=Name(id='search_result', ctx=Load())), If(test=Compare(left=Name(id='working_index', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Load())]), body=[Assign(targets=[Name(id='selection', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Load()))], orelse=[Assign(targets=[Name(id='selection', ctx=Store())], value=Constant(value=None))]), Return(value=Call(func=Name(id='Document', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_working_lines', ctx=Load()), slice=Name(id='working_index', ctx=Load()), ctx=Load()), Name(id='cursor_position', ctx=Load())], keywords=[keyword(arg='selection', value=Name(id='selection', ctx=Load()))]))])], decorator_list=[], returns=Name(id='Document', ctx=Load())), FunctionDef(name='get_search_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='search_state', annotation=Name(id='SearchState', ctx=Load())), arg(arg='include_current_position', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=1)]), body=[Expr(value=Constant(value="\n        Get the cursor position for this search.\n        (This operation won't change the `working_index`. It's won't go through\n        the history. Vi text objects can't span multiple items.)\n        ")), Assign(targets=[Name(id='search_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='search_state', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Name(id='include_current_position', ctx=Load())), keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Compare(left=Name(id='search_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='working_index', ctx=Store()), Name(id='cursor_position', ctx=Store())], ctx=Store())], value=Name(id='search_result', ctx=Load())), Return(value=Name(id='cursor_position', ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='apply_search', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='search_state', annotation=Name(id='SearchState', ctx=Load())), arg(arg='include_current_position', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Apply search. If something is found, set `working_index` and\n        `cursor_position`.\n        ')), Assign(targets=[Name(id='search_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='search_state', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Name(id='include_current_position', ctx=Load())), keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Compare(left=Name(id='search_result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='working_index', ctx=Store()), Name(id='cursor_position', ctx=Store())], ctx=Store())], value=Name(id='search_result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='working_index', ctx=Store())], value=Name(id='working_index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Store())], value=Name(id='cursor_position', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='exit_selection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='selection_state', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_editor_simple_tempfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Simple (file) tempfile implementation.\n        Return (tempfile, cleanup_func).\n        ')), Assign(targets=[Name(id='suffix', ctx=Store())], value=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='descriptor', ctx=Store()), Name(id='filename', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkstemp', ctx=Load()), args=[Name(id='suffix', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='descriptor', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Name(id='descriptor', ctx=Load())], keywords=[])), FunctionDef(name='cleanup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Return(value=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='cleanup', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_editor_complex_tempfile', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='headtail', ctx=Store())], value=Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='headtail', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_editor_simple_tempfile', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='headtail', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='headtail', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='headtail', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='head', ctx=Store())], value=Subscript(value=Name(id='head', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dirpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[])), If(test=Name(id='head', ctx=Load()), body=[Assign(targets=[Name(id='dirpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='head', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='dirpath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='tail', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fh', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))]), FunctionDef(name='cleanup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='dirpath', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Return(value=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='cleanup', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='open_in_editor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='validate_and_handle', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Open code in editor.\n\n        This returns a future, and runs in a thread executor.\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='EditReadOnlyBuffer', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='cleanup_func', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_editor_complex_tempfile', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='cleanup_func', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_editor_simple_tempfile', ctx=Load()), args=[], keywords=[]))]), AsyncFunctionDef(name='run', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='success', ctx=Store())], value=Await(value=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_open_file_in_editor', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], keywords=[keyword(arg='in_executor', value=Constant(value=True))]))), If(test=Name(id='success', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='text', ctx=Load())), keyword(arg='cursor_position', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))]))]), If(test=Name(id='validate_and_handle', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate_and_handle', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='cleanup_func', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), Return(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='run', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='_open_file_in_editor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Call editor executable.\n\n        Return True when we received a zero return code.\n        ')), Assign(targets=[Name(id='visual', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='VISUAL')], keywords=[])), Assign(targets=[Name(id='editor', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='EDITOR')], keywords=[])), Assign(targets=[Name(id='editors', ctx=Store())], value=List(elts=[Name(id='visual', ctx=Load()), Name(id='editor', ctx=Load()), Constant(value='/usr/bin/editor'), Constant(value='/usr/bin/nano'), Constant(value='/usr/bin/pico'), Constant(value='/usr/bin/vi'), Constant(value='/usr/bin/emacs')], ctx=Load())), For(target=Name(id='e', ctx=Store()), iter=Name(id='editors', ctx=Load()), body=[If(test=Name(id='e', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='returncode', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='call', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='filename', ctx=Load())], ctx=Load()))], keywords=[])), Return(value=Compare(left=Name(id='returncode', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='start_completion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='select_first', annotation=Name(id='bool', ctx=Load())), arg(arg='select_last', annotation=Name(id='bool', ctx=Load())), arg(arg='insert_common_part', annotation=Name(id='bool', ctx=Load())), arg(arg='complete_event', annotation=BinOp(left=Name(id='CompleteEvent', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Start asynchronous autocompletion of this buffer.\n        (This will do nothing if a previous completion was still in progress.)\n        ')), Assert(test=Compare(left=BinOp(left=BinOp(left=Name(id='select_first', ctx=Load()), op=Add(), right=Name(id='select_last', ctx=Load())), op=Add(), right=Name(id='insert_common_part', ctx=Load())), ops=[LtE()], comparators=[Constant(value=1)])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='create_background_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_completer', ctx=Load()), args=[], keywords=[keyword(arg='select_first', value=Name(id='select_first', ctx=Load())), keyword(arg='select_last', value=Name(id='select_last', ctx=Load())), keyword(arg='insert_common_part', value=Name(id='insert_common_part', ctx=Load())), keyword(arg='complete_event', value=BoolOp(op=Or(), values=[Name(id='complete_event', ctx=Load()), Call(func=Name(id='CompleteEvent', ctx=Load()), args=[], keywords=[keyword(arg='completion_requested', value=Constant(value=True))])]))])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_create_completer_coroutine', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create function for asynchronous autocompletion.\n\n        (This consumes the asynchronous completer generator, which possibly\n        runs the completion algorithm in another thread.)\n        ')), FunctionDef(name='completion_does_nothing', args=arguments(posonlyargs=[], args=[arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='completion', annotation=Name(id='Completion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n            Return `True` if applying this completion doesn't have any effect.\n            (When it doesn't insert any new text.\n            ")), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load())), Assign(targets=[Name(id='replaced_text', ctx=Store())], value=Subscript(value=Name(id='text_before_cursor', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Name(id='completion', ctx=Load()), attr='start_position', ctx=Load()))), ctx=Load())), Return(value=Compare(left=Name(id='replaced_text', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='completion', ctx=Load()), attr='text', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), AsyncFunctionDef(name='async_completer', args=arguments(posonlyargs=[], args=[arg(arg='select_first', annotation=Name(id='bool', ctx=Load())), arg(arg='select_last', annotation=Name(id='bool', ctx=Load())), arg(arg='insert_common_part', annotation=Name(id='bool', ctx=Load())), arg(arg='complete_event', annotation=BinOp(left=Name(id='CompleteEvent', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), Assign(targets=[Name(id='complete_event', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='complete_event', ctx=Load()), Call(func=Name(id='CompleteEvent', ctx=Load()), args=[], keywords=[keyword(arg='text_inserted', value=Constant(value=True))])])), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='complete_state', ctx=Store())], value=Call(func=Name(id='CompletionState', ctx=Load()), args=[], keywords=[keyword(arg='original_document', value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Name(id='complete_state', ctx=Load())), FunctionDef(name='proceed', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Keep retrieving completions. Input text has not yet changed\n                while generating completions.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), ops=[Eq()], comparators=[Name(id='complete_state', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='refresh_needed', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[])), AsyncFunctionDef(name='refresh_while_loading', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Background loop to refresh the UI at most 3 times a second\n                while the completion are loading. Calling\n                `on_completions_changed.fire()` for every completion that we\n                receive is too expensive when there are many completions. (We\n                could tune `Application.max_render_postpone_time` and\n                `Application.min_redraw_interval`, but having this here is a\n                better approach.)\n                ')), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_completions_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='refresh_needed', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.3)], keywords=[]))), Expr(value=Await(value=Call(func=Attribute(value=Name(id='refresh_needed', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='refresh_task', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='ensure_future', ctx=Load()), args=[Call(func=Name(id='refresh_while_loading', ctx=Load()), args=[], keywords=[])], keywords=[])), Try(body=[AsyncWith(items=[withitem(context_expr=Call(func=Name(id='aclosing', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions_async', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='async_generator', ctx=Store()))], body=[AsyncFor(target=Name(id='completion', ctx=Store()), iter=Name(id='async_generator', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='completion', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='refresh_needed', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='proceed', ctx=Load()), args=[], keywords=[])), body=[Break()], orelse=[])], orelse=[])])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='refresh_task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_completions_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='completions', ctx=Store())], value=Attribute(value=Name(id='complete_state', ctx=Load()), attr='completions', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='completion_does_nothing', ctx=Load()), args=[Name(id='document', ctx=Load()), Subscript(value=Name(id='completions', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='completions', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[]), If(test=Call(func=Name(id='proceed', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load())), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Load()), attr='complete_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='completions', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_completions_changed', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), If(test=Name(id='select_first', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[If(test=Name(id='select_last', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[If(test=Name(id='insert_common_part', ctx=Load()), body=[Assign(targets=[Name(id='common_part', ctx=Store())], value=Call(func=Name(id='get_common_complete_suffix', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='completions', ctx=Load())], keywords=[])), If(test=Name(id='common_part', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='common_part', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='completions', ctx=Load()), slice=Slice(), ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='new_completion_from_position', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='common_part', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='completions', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_completions', ctx=Load()), args=[], keywords=[keyword(arg='completions', value=Name(id='completions', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None))])], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='go_to_completion', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])])], orelse=[])])])], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load())]), body=[Return()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load())], keywords=[]), body=[Raise(exc=Name(id='_Retry', ctx=Load()))], orelse=[])])], decorator_list=[Name(id='_only_one_at_a_time', ctx=Load())], returns=Constant(value=None)), Return(value=Name(id='async_completer', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_create_auto_suggest_coroutine', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create function for asynchronous auto suggestion.\n        (This can be in another thread.)\n        ')), AsyncFunctionDef(name='async_suggestor', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='document', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load())), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='suggestion', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Load()))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='suggestion', ctx=Store())], value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Load()), attr='get_suggestion_async', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='document', ctx=Load())], keywords=[]))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Load()), ops=[Eq()], comparators=[Name(id='document', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suggestion', ctx=Store())], value=Name(id='suggestion', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_suggestion_set', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Name(id='_Retry', ctx=Load()))])], decorator_list=[Name(id='_only_one_at_a_time', ctx=Load())], returns=Constant(value=None)), Return(value=Name(id='async_suggestor', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_create_auto_validate_coroutine', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a function for asynchronous validation while typing.\n        (This can be in another thread.)\n        ')), AsyncFunctionDef(name='async_validator', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_async', ctx=Load()), args=[], keywords=[])))], decorator_list=[Name(id='_only_one_at_a_time', ctx=Load())], returns=Constant(value=None)), Return(value=Name(id='async_validator', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='validate_and_handle', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Validate buffer and handle the accept action.\n        ')), Assign(targets=[Name(id='valid', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(arg='set_cursor', value=Constant(value=True))])), If(test=Name(id='valid', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='accept_handler', ctx=Load()), body=[Assign(targets=[Name(id='keep_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='accept_handler', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='keep_text', ctx=Store())], value=Constant(value=False))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='append_to_history', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='keep_text', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[keyword(arg='bound', value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Awaitable', ctx=Load()), slice=Constant(value=None), ctx=Load())], ctx=Load()), ctx=Load()))])), FunctionDef(name='_only_one_at_a_time', args=arguments(posonlyargs=[], args=[arg(arg='coroutine', annotation=Name(id='_T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Decorator that only starts the coroutine only if the previous call has\n    finished. (Used to make sure that we have only one autocompleter, auto\n    suggestor and validator running at a time.)\n\n    When the coroutine raises `_Retry`, it is restarted.\n    ')), Assign(targets=[Name(id='running', ctx=Store())], value=Constant(value=False)), AsyncFunctionDef(name='new_coroutine', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='a', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Nonlocal(names=['running']), If(test=Name(id='running', ctx=Load()), body=[Return()], orelse=[]), Assign(targets=[Name(id='running', ctx=Store())], value=Constant(value=True)), Try(body=[While(test=Constant(value=True), body=[Try(body=[Expr(value=Await(value=Call(func=Name(id='coroutine', ctx=Load()), args=[Starred(value=Name(id='a', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])))], handlers=[ExceptHandler(type=Name(id='_Retry', ctx=Load()), body=[Continue()])], orelse=[Return(value=Constant(value=None))], finalbody=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='running', ctx=Store())], value=Constant(value=False))])], decorator_list=[Call(func=Name(id='wraps', ctx=Load()), args=[Name(id='coroutine', ctx=Load())], keywords=[])], returns=Name(id='Any', ctx=Load())), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='_T', ctx=Load()), Name(id='new_coroutine', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='_T', ctx=Load())), ClassDef(name='_Retry', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Retry in `_only_one_at_a_time`.'))], decorator_list=[]), FunctionDef(name='indent', args=arguments(posonlyargs=[], args=[arg(arg='buffer', annotation=Name(id='Buffer', ctx=Load())), arg(arg='from_row', annotation=Name(id='int', ctx=Load())), arg(arg='to_row', annotation=Name(id='int', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n    Indent text of a :class:`.Buffer` object.\n    ')), Assign(targets=[Name(id='current_row', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_row', ctx=Load())), Assign(targets=[Name(id='current_col', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_col', ctx=Load())), Assign(targets=[Name(id='line_range', ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[Name(id='from_row', ctx=Load()), Name(id='to_row', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indent_content', ctx=Store())], value=BinOp(left=Constant(value='    '), op=Mult(), right=Name(id='count', ctx=Load()))), Assign(targets=[Name(id='new_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='transform_lines', ctx=Load()), args=[Name(id='line_range', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='l')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Name(id='indent_content', ctx=Load()), op=Add(), right=Name(id='l', ctx=Load())))], keywords=[])), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load())], keywords=[]), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='current_row', ctx=Load()), Constant(value=0)], keywords=[])], keywords=[])), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=BinOp(left=Name(id='current_col', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indent_content', ctx=Load())], keywords=[])))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unindent', args=arguments(posonlyargs=[], args=[arg(arg='buffer', annotation=Name(id='Buffer', ctx=Load())), arg(arg='from_row', annotation=Name(id='int', ctx=Load())), arg(arg='to_row', annotation=Name(id='int', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n    Unindent text of a :class:`.Buffer` object.\n    ')), Assign(targets=[Name(id='current_row', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_row', ctx=Load())), Assign(targets=[Name(id='current_col', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_col', ctx=Load())), Assign(targets=[Name(id='line_range', ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[Name(id='from_row', ctx=Load()), Name(id='to_row', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indent_content', ctx=Store())], value=BinOp(left=Constant(value='    '), op=Mult(), right=Name(id='count', ctx=Load()))), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='remove', ctx=Store())], value=Name(id='indent_content', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='remove', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='remove', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='new_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='transform_lines', ctx=Load()), args=[Name(id='line_range', ctx=Load()), Name(id='transform', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='new_text', ctx=Load())], keywords=[]), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='current_row', ctx=Load()), Constant(value=0)], keywords=[])], keywords=[])), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=BinOp(left=Name(id='current_col', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indent_content', ctx=Load())], keywords=[])))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reshape_text', args=arguments(posonlyargs=[], args=[arg(arg='buffer', annotation=Name(id='Buffer', ctx=Load())), arg(arg='from_row', annotation=Name(id='int', ctx=Load())), arg(arg='to_row', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Reformat text, taking the width into account.\n    `to_row` is included.\n    (Vi 'gq' operator.)\n    ")), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='text', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[])), Assign(targets=[Name(id='lines_before', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(upper=Name(id='from_row', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='lines_after', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='to_row', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='lines_to_reformat', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Name(id='from_row', ctx=Load()), upper=BinOp(left=Name(id='to_row', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), If(test=Name(id='lines_to_reformat', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='^\\s*'), Subscript(value=Name(id='lines_to_reformat', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='length', ctx=Store())], value=IfExp(test=Name(id='match', ctx=Load()), body=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=0))), Assign(targets=[Name(id='indent', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='lines_to_reformat', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(upper=Name(id='length', ctx=Load())), ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='lines_to_reformat', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=BoolOp(op=Or(), values=[Attribute(value=Name(id='buffer', ctx=Load()), attr='text_width', ctx=Load()), Constant(value=80)]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indent', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='reshaped_text', ctx=Store())], value=List(elts=[Name(id='indent', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='current_width', ctx=Store())], value=Constant(value=0)), For(target=Name(id='w', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[If(test=Name(id='current_width', ctx=Load()), body=[If(test=Compare(left=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), op=Add(), right=Name(id='current_width', ctx=Load())), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Name(id='width', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='reshaped_text', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reshaped_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='indent', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_width', ctx=Store())], value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='reshaped_text', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[])), AugAssign(target=Name(id='current_width', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='reshaped_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[])), AugAssign(target=Name(id='current_width', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='reshaped_text', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\n')]), body=[Expr(value=Call(func=Attribute(value=Name(id='reshaped_text', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='lines_before', ctx=Load()), op=Add(), right=Name(id='reshaped_text', ctx=Load())), op=Add(), right=Name(id='lines_after', ctx=Load()))], keywords=[])), keyword(arg='cursor_position', value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[BinOp(left=Name(id='lines_before', ctx=Load()), op=Add(), right=Name(id='reshaped_text', ctx=Load()))], keywords=[])], keywords=[]))]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])