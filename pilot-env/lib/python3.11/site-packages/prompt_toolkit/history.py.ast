Module(body=[Expr(value=Constant(value="\nImplementations for the history of a `Buffer`.\n\nNOTE: There is no `DynamicHistory`:\n      This doesn't work well, because the `Buffer` needs to be able to attach\n      an event handler to the event when a history entry is loaded. This\n      loading can be done asynchronously and making the history swappable would\n      probably break this.\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='datetime')]), Import(names=[alias(name='os')]), Import(names=[alias(name='threading')]), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='asyncio', names=[alias(name='get_running_loop')], level=0), ImportFrom(module='typing', names=[alias(name='AsyncGenerator'), alias(name='Iterable'), alias(name='Sequence')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='History'), Constant(value='ThreadedHistory'), Constant(value='DummyHistory'), Constant(value='FileHistory'), Constant(value='InMemoryHistory')], ctx=Load())), ClassDef(name='History', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base ``History`` class.\n\n    This also includes abstract methods for loading/storing history.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaded', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Load the history and yield all the entries in reverse order (latest,\n        most recent history entry first).\n\n        This method can be called multiple times from the `Buffer` to\n        repopulate the history when prompting for a new input. So we are\n        responsible here for both caching, and making sure that strings that\n        were were appended to the history will be incorporated next time this\n        method is called.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_history_strings', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaded', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='get_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the strings from the history that are loaded so far.\n        (In order. Oldest item first.)\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='append_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add string to the history.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='string', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_string', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_history_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        This should be a generator that yields `str` instances.\n\n        It should yield the most recent items first, because they are the most\n        important. (The history can already be used, even when it's only\n        partially loaded.)\n        ")), While(test=Constant(value=False), body=[Expr(value=Yield())], orelse=[])], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='store_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Store the string in persistent storage.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ThreadedHistory', bases=[Name(id='History', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Wrapper around `History` implementations that run the `load()` generator in\n    a thread.\n\n    Use this to increase the start-up time of prompt_toolkit applications.\n    History entries are available as soon as they are loaded. We don't have to\n    wait for everything to be loaded.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='history', annotation=Name(id='History', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Store())], value=Name(id='history', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_load_thread', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Lock', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_string_load_events', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Like `History.load(), but call `self.load_history_strings()` in a\n        background thread.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_load_thread', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_load_thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='_in_load_thread', ctx=Load())), keyword(arg='daemon', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_load_thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='event', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_string_load_events', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[])), Assign(targets=[Name(id='items_yielded', ctx=Store())], value=Constant(value=0)), Try(body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='got_timeout', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_in_executor', ctx=Load()), args=[Constant(value=None), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Constant(value=0.5))]))], keywords=[]))), If(test=UnaryOp(op=Not(), operand=Name(id='got_timeout', ctx=Load())), body=[Continue()], orelse=[]), FunctionDef(name='in_executor', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='new_items', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), slice=Slice(lower=Name(id='items_yielded', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='done', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))]), Return(value=Tuple(elts=[Name(id='new_items', ctx=Load()), Name(id='done', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='new_items', ctx=Store()), Name(id='done', ctx=Store())], ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_in_executor', ctx=Load()), args=[Constant(value=None), Name(id='in_executor', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='items_yielded', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='new_items', ctx=Load())], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='new_items', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[]), If(test=Name(id='done', ctx=Load()), body=[Break()], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_string_load_events', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_in_load_thread', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='load_history_strings', ctx=Load()), args=[], keywords=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))]), For(target=Name(id='event', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_string_load_events', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loaded', ctx=Store())], value=Constant(value=True))]), For(target=Name(id='event', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_string_load_events', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loaded_strings', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='string', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='store_string', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_history_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='load_history_strings', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='store_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), attr='store_string', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ThreadedHistory('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='InMemoryHistory', bases=[Name(id='History', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    :class:`.History` class that keeps a list of all strings in memory.\n\n    In order to prepopulate the history, it's possible to call either\n    `append_string` for all items or pass a list of strings to `__init__` here.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='history_strings', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='history_strings', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='history_strings', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_history_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='store_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_storage', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DummyHistory', bases=[Name(id='History', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    :class:`.History` object that doesn't remember anything.\n    ")), FunctionDef(name='load_history_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='store_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='append_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FileHistory', bases=[Name(id='History', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    :class:`.History` class that stores all strings in a file.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_history_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='strings', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='lines', ctx=Load()), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line_bytes', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line_bytes', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[keyword(arg='errors', value=Constant(value='replace'))])), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='+')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='add', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[]), Expr(value=Call(func=Name(id='add', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='store_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Constant(value='ab')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='t', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='write', ctx=Load()), args=[BinOp(left=Constant(value='\n# %s\n'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[]))], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[BinOp(left=Constant(value='+%s\n'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])