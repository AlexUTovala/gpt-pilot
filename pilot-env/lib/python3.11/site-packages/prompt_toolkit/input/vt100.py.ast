Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')])), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='io')]), Import(names=[alias(name='termios')]), Import(names=[alias(name='tty')]), ImportFrom(module='asyncio', names=[alias(name='AbstractEventLoop'), alias(name='get_running_loop')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='ContextManager'), alias(name='Generator'), alias(name='TextIO')], level=0), ImportFrom(module='key_binding', names=[alias(name='KeyPress')], level=2), ImportFrom(module='base', names=[alias(name='Input')], level=1), ImportFrom(module='posix_utils', names=[alias(name='PosixStdinReader')], level=1), ImportFrom(module='vt100_parser', names=[alias(name='Vt100Parser')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Vt100Input'), Constant(value='raw_mode'), Constant(value='cooked_mode')], ctx=Load())), ClassDef(name='Vt100Input', bases=[Name(id='Input', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Vt100 input for Posix systems.\n    (This uses a posix file descriptor that can be registered in the event loop.)\n    ')), AnnAssign(target=Name(id='_fds_not_a_terminal', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdin', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load()), name='e', body=[If(test=Compare(left=Constant(value='idlelib.run'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load()), args=[Constant(value='Stdin is not a terminal. Running from Idle is not supported.')], keywords=[]), cause=Name(id='e', ctx=Load()))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load()), args=[Constant(value='Stdin is not a terminal.')], keywords=[]), cause=Name(id='e', ctx=Load()))])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='isatty', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdin', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='isatty', ctx=Load())), Compare(left=Name(id='fd', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='Vt100Input', ctx=Load()), attr='_fds_not_a_terminal', ctx=Load())])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Warning: Input is not a terminal (fd=%r).\n')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Name(id='fd', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='Vt100Input', ctx=Load()), attr='_fds_not_a_terminal', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stdin', ctx=Store())], value=Name(id='stdin', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fileno', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stdin_reader', ctx=Store())], value=Call(func=Name(id='PosixStdinReader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fileno', ctx=Load())], keywords=[keyword(arg='encoding', value=Attribute(value=Name(id='stdin', ctx=Load()), attr='encoding', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Store())], value=Call(func=Name(id='Vt100Parser', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='key_press')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key_press', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='attach', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_ready_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes this input active in the current\n        event loop.\n        ')), Return(value=Call(func=Name(id='_attached_input', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='input_ready_callback', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes sure that this input is not active\n        in the current event loop.\n        ')), Return(value=Call(func=Name(id='_detached_input', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read list of KeyPress.')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdin_reader', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='flush_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Flush pending keys and return them.\n        (Used for flushing the 'escape' key.)\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdin_reader', ctx=Load()), attr='closed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='raw_mode', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cooked_mode', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='fd-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileno', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='_current_callbacks', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='AbstractEventLoop', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='_attached_input', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=Name(id='Vt100Input', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Context manager that makes this input active in the current event loop.\n\n    :param input: :class:`~prompt_toolkit.input.Input` object.\n    :param callback: Called when the input is ready to read.\n    ')), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='previous', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_callbacks', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load())], keywords=[])), FunctionDef(name='callback_wrapper', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrapper around the callback that already removes the reader when\n        the input is closed. Otherwise, we keep continuously calling this\n        callback, until we leave the context manager (which can happen a bit\n        later). This fixes issues when piping /dev/null into a prompt_toolkit\n        application.')), If(test=Attribute(value=Name(id='input', ctx=Load()), attr='closed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='remove_reader', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='callback', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_reader', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='callback_wrapper', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Raise(exc=Name(id='EOFError', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Name(id='_current_callbacks', ctx=Load()), slice=Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='callback', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='remove_reader', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])), If(test=Name(id='previous', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_reader', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='previous', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_current_callbacks', ctx=Load()), slice=Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='previous', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='_current_callbacks', ctx=Load()), slice=Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()), ctx=Del())])])])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_detached_input', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=Name(id='Vt100Input', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='input', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='previous', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_callbacks', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load())], keywords=[])), If(test=Name(id='previous', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='remove_reader', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_current_callbacks', ctx=Load()), slice=Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[]), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[If(test=Name(id='previous', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_reader', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='previous', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_current_callbacks', ctx=Load()), slice=Tuple(elts=[Name(id='loop', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='previous', ctx=Load()))], orelse=[])])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='raw_mode', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    ::\n\n        with raw_mode(stdin):\n            ''' the pseudo-terminal stdin is now used in raw mode '''\n\n    We ignore errors when executing `tcgetattr` fails.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fileno', ctx=Store())], value=Name(id='fileno', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='attrs_before', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='list', ctx=Load()), slice=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Name(id='int', ctx=Load())), ctx=Load())), ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=0), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attrs_before', ctx=Store())], value=Call(func=Attribute(value=Name(id='termios', ctx=Load()), attr='tcgetattr', ctx=Load()), args=[Name(id='fileno', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='termios', ctx=Load()), attr='error', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attrs_before', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='newattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='termios', ctx=Load()), attr='tcgetattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='fileno', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='termios', ctx=Load()), attr='error', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Subscript(value=Name(id='newattr', ctx=Load()), slice=Attribute(value=Name(id='tty', ctx=Load()), attr='LFLAG', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_patch_lflag', ctx=Load()), args=[Subscript(value=Name(id='newattr', ctx=Load()), slice=Attribute(value=Name(id='tty', ctx=Load()), attr='LFLAG', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='newattr', ctx=Load()), slice=Attribute(value=Name(id='tty', ctx=Load()), attr='IFLAG', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_patch_iflag', ctx=Load()), args=[Subscript(value=Name(id='newattr', ctx=Load()), slice=Attribute(value=Name(id='tty', ctx=Load()), attr='IFLAG', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='newattr', ctx=Load()), slice=Attribute(value=Name(id='tty', ctx=Load()), attr='CC', ctx=Load()), ctx=Load()), slice=Attribute(value=Name(id='termios', ctx=Load()), attr='VMIN', ctx=Load()), ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='termios', ctx=Load()), attr='tcsetattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='fileno', ctx=Load()), Attribute(value=Name(id='termios', ctx=Load()), attr='TCSANOW', ctx=Load()), Name(id='newattr', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_patch_lflag', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='attrs', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='termios', ctx=Load()), attr='ECHO', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ICANON', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='IEXTEN', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ISIG', ctx=Load())))))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_patch_iflag', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='attrs', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='termios', ctx=Load()), attr='IXON', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='IXOFF', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ICRNL', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='INLCR', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='IGNCR', ctx=Load())))))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='attrs_before', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='termios', ctx=Load()), attr='tcsetattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='fileno', ctx=Load()), Attribute(value=Name(id='termios', ctx=Load()), attr='TCSANOW', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='attrs_before', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='termios', ctx=Load()), attr='error', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='cooked_mode', bases=[Name(id='raw_mode', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    The opposite of ``raw_mode``, used when we need cooked mode inside a\n    `raw_mode` block.  Used in `Application.run_in_terminal`.::\n\n        with cooked_mode(stdin):\n            ''' the pseudo-terminal stdin is now used in cooked mode. '''\n    ")), FunctionDef(name='_patch_lflag', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='attrs', ctx=Load()), op=BitOr(), right=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='termios', ctx=Load()), attr='ECHO', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ICANON', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='IEXTEN', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ISIG', ctx=Load()))))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_patch_iflag', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='attrs', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='termios', ctx=Load()), attr='ICRNL', ctx=Load())))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])