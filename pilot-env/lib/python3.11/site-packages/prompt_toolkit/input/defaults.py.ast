Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='io')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='ContextManager'), alias(name='TextIO')], level=0), ImportFrom(module='base', names=[alias(name='DummyInput'), alias(name='Input'), alias(name='PipeInput')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='create_input'), Constant(value='create_pipe_input')], ctx=Load())), FunctionDef(name='create_input', args=arguments(posonlyargs=[], args=[arg(arg='stdin', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='always_prefer_tty', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Create the appropriate `Input` object for the current os/environment.\n\n    :param always_prefer_tty: When set, if `sys.stdin` is connected to a Unix\n        `pipe`, check whether `sys.stdout` or `sys.stderr` are connected to a\n        pseudo terminal. If so, open the tty for reading instead of reading for\n        `sys.stdin`. (We can open `stdout` or `stderr` for reading, this is how\n        a `$PAGER` works.)\n    ')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='win32', names=[alias(name='Win32Input')], level=1), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='stdin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Call(func=Name(id='DummyInput', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Win32Input', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='stdin', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load())])], keywords=[]))], orelse=[ImportFrom(module='vt100', names=[alias(name='Vt100Input')], level=1), If(test=Compare(left=Name(id='stdin', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stdin', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load())), If(test=Name(id='always_prefer_tty', ctx=Load()), body=[For(target=Name(id='obj', ctx=Store()), iter=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='stdin', ctx=Store())], value=Name(id='obj', ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='io', ctx=Load()), attr='UnsupportedOperation', ctx=Load()), body=[Return(value=Call(func=Name(id='DummyInput', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='Vt100Input', ctx=Load()), args=[Name(id='stdin', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Input', ctx=Load())), FunctionDef(name='create_pipe_input', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Create an input pipe.\n    This is mostly useful for unit testing.\n\n    Usage::\n\n        with create_pipe_input() as input:\n            input.send_text('inputdata')\n\n    Breaking change: In prompt_toolkit 3.0.28 and earlier, this was returning\n    the `PipeInput` directly, rather than through a context manager.\n    ")), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='win32_pipe', names=[alias(name='Win32PipeInput')], level=1), Return(value=Call(func=Attribute(value=Name(id='Win32PipeInput', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[]))], orelse=[ImportFrom(module='posix_pipe', names=[alias(name='PosixPipeInput')], level=1), Return(value=Call(func=Attribute(value=Name(id='PosixPipeInput', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='PipeInput', ctx=Load()), ctx=Load()))], type_ignores=[])