Module(body=[Expr(value=Constant(value='\nParser for VT100 input stream.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Dict'), alias(name='Generator')], level=0), ImportFrom(module='key_binding.key_processor', names=[alias(name='KeyPress')], level=2), ImportFrom(module='keys', names=[alias(name='Keys')], level=2), ImportFrom(module='ansi_escape_sequences', names=[alias(name='ANSI_SEQUENCES')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Vt100Parser')], ctx=Load())), Assign(targets=[Name(id='_cpr_response_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Constant(value='\x1b[')], keywords=[])), op=Add(), right=Constant(value='\\d+;\\d+R\\Z'))], keywords=[])), Assign(targets=[Name(id='_mouse_event_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Constant(value='\x1b[')], keywords=[])), op=Add(), right=Constant(value='(<?[\\d;]+[mM]|M...)\\Z'))], keywords=[])), Assign(targets=[Name(id='_cpr_response_prefix_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Constant(value='\x1b[')], keywords=[])), op=Add(), right=Constant(value='[\\d;]*\\Z'))], keywords=[])), Assign(targets=[Name(id='_mouse_event_prefix_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Constant(value='\x1b[')], keywords=[])), op=Add(), right=Constant(value='(<?[\\d;]*|M.{0,2})\\Z'))], keywords=[])), ClassDef(name='_Flush', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper object to indicate flush operation to the parser.')), Pass()], decorator_list=[]), ClassDef(name='_IsPrefixOfLongerMatchCache', bases=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Dictionary that maps input sequences to a boolean indicating whether there is\n    any key that start with this characters.\n    ')), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='_cpr_response_prefix_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_mouse_event_prefix_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ANSI_SEQUENCES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Name(id='prefix', ctx=Load())])])], is_async=0)])], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_IS_PREFIX_OF_LONGER_MATCH_CACHE', ctx=Store())], value=Call(func=Name(id='_IsPrefixOfLongerMatchCache', ctx=Load()), args=[], keywords=[])), ClassDef(name='Vt100Parser', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Parser for VT100 input stream.\n    Data can be fed through the `feed` method and the given callback will be\n    called with KeyPress objects.\n\n    ::\n\n        def callback(key):\n            pass\n        i = Vt100Parser(callback)\n        i.feed('data\x01...')\n\n    :attr feed_key_callback: Function that will be called when a key is parsed.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='feed_key_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='KeyPress', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='feed_key_callback', ctx=Store())], value=Name(id='feed_key_callback', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_bracketed_paste', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_start_parser', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start_parser', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start the parser coroutine.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input_parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_input_parser_generator', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input_parser', ctx=Load()), attr='send', ctx=Load()), args=[Constant(value=None)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the key (or keys) that maps to this prefix.\n        ')), If(test=Call(func=Attribute(value=Name(id='_cpr_response_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='Keys', ctx=Load()), attr='CPRResponse', ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Name(id='_mouse_event_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='Keys', ctx=Load()), attr='Vt100MouseEvent', ctx=Load()))], orelse=[])]), Try(body=[Return(value=Subscript(value=Name(id='ANSI_SEQUENCES', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=BinOp(left=Constant(value=None), op=BitOr(), right=Name(id='Keys', ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Keys', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))), FunctionDef(name='_input_parser_generator', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Coroutine (state machine) for the input parser.\n        ')), Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='flush', ctx=Store())], value=Constant(value=False)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='flush', ctx=Store())], value=Constant(value=False)), If(test=Name(id='retry', ctx=Load()), body=[Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='c', ctx=Store())], value=Yield()), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='_Flush', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='flush', ctx=Store())], value=Constant(value=True))], orelse=[AugAssign(target=Name(id='prefix', ctx=Store()), op=Add(), value=Name(id='c', ctx=Load()))])]), If(test=Name(id='prefix', ctx=Load()), body=[Assign(targets=[Name(id='is_prefix_of_longer_match', ctx=Store())], value=Subscript(value=Name(id='_IS_PREFIX_OF_LONGER_MATCH_CACHE', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_match', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Name(id='flush', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='is_prefix_of_longer_match', ctx=Load()))]), Name(id='match', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value=''))], orelse=[If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Name(id='flush', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='is_prefix_of_longer_match', ctx=Load()))]), UnaryOp(op=Not(), operand=Name(id='match', ctx=Load()))]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=True)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_match', ctx=Load()), args=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Name(id='match', ctx=Load()), Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='found', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='prefix', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='_Flush', ctx=Load())), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_call_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Keys', ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Keys', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))), arg(arg='insert_text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Callback to handler.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Name(id='k', ctx=Load()), IfExp(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Name(id='insert_text', ctx=Load()), orelse=Constant(value=''))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='BracketedPaste', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_bracketed_paste', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Store())], value=Constant(value=''))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_key_callback', ctx=Load()), args=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='insert_text', ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Feed the input stream.\n\n        :param data: Input string (unicode).\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_in_bracketed_paste', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Store()), op=Add(), value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='end_mark', ctx=Store())], value=Constant(value='\x1b[201~')), If(test=Compare(left=Name(id='end_mark', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Load())]), body=[Assign(targets=[Name(id='end_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='end_mark', ctx=Load())], keywords=[])), Assign(targets=[Name(id='paste_content', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Load()), slice=Slice(upper=Name(id='end_index', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed_key_callback', ctx=Load()), args=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='BracketedPaste', ctx=Load()), Name(id='paste_content', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_in_bracketed_paste', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='end_index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='end_mark', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_paste_buffer', ctx=Store())], value=Constant(value='')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_in_bracketed_paste', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load())], keywords=[])), Break()], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input_parser', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))])], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Flush the buffer of the input stream.\n\n        This will allow us to handle the escape key (or maybe meta) sooner.\n        The input received by the escape key is actually the same as the first\n        characters of e.g. Arrow-Up, so without knowing what follows the escape\n        sequence, we don't know whether escape has been pressed, or whether\n        it's something else. This flush function should be called after a\n        timeout, and processes everything that's still in the buffer as-is, so\n        without assuming any characters will follow.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input_parser', ctx=Load()), attr='send', ctx=Load()), args=[Call(func=Name(id='_Flush', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='feed_and_flush', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Wrapper around ``feed`` and ``flush``.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])