Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='ctypes', names=[alias(name='windll')], level=0), ImportFrom(module='ctypes.wintypes', names=[alias(name='HANDLE')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='ContextManager'), alias(name='Iterator')], level=0), ImportFrom(module='prompt_toolkit.eventloop.win32', names=[alias(name='create_win32_event')], level=0), ImportFrom(module='key_binding', names=[alias(name='KeyPress')], level=2), ImportFrom(module='utils', names=[alias(name='DummyContext')], level=2), ImportFrom(module='base', names=[alias(name='PipeInput')], level=1), ImportFrom(module='vt100_parser', names=[alias(name='Vt100Parser')], level=1), ImportFrom(module='win32', names=[alias(name='_Win32InputBase'), alias(name='attach_win32_input'), alias(name='detach_win32_input')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Win32PipeInput')], ctx=Load())), ClassDef(name='Win32PipeInput', bases=[Name(id='_Win32InputBase', ctx=Load()), Name(id='PipeInput', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    This is an input pipe that works on Windows.\n    Text or bytes can be feed into the pipe, and key strokes can be read from\n    the pipe. This is useful if we want to send the input programmatically into\n    the application. Mostly useful for unit testing.\n\n    Notice that even though it's Windows, we use vt100 escape sequences over\n    the pipe.\n\n    Usage::\n\n        input = Win32PipeInput()\n        input.send_text('inputdata')\n    ")), Assign(targets=[Name(id='_id', ctx=Store())], value=Constant(value=0)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_event', annotation=Name(id='HANDLE', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_event', ctx=Store())], value=Call(func=Name(id='create_win32_event', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Store())], value=Call(func=Name(id='Vt100Parser', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_id', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_id', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_id', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='event', ctx=Store())], value=Call(func=Name(id='create_win32_event', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Call(func=Name(id='Win32PipeInput', ctx=Load()), args=[], keywords=[keyword(arg='_event', value=Name(id='event', ctx=Load()))])))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='CloseHandle', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load()), Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Win32PipeInput', ctx=Load()), ctx=Load())), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        The windows pipe doesn't depend on the file handle.\n        ")), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='handle', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The handle used for registering this pipe in the event loop.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_event', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='HANDLE', ctx=Load())), FunctionDef(name='attach', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_ready_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes this input active in the current\n        event loop.\n        ')), Return(value=Call(func=Name(id='attach_win32_input', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='input_ready_callback', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes sure that this input is not active\n        in the current event loop.\n        ')), Return(value=Call(func=Name(id='detach_win32_input', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read list of KeyPress.')), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='ResetEvent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_event', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='flush_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Flush pending keys and return them.\n        (Used for flushing the 'escape' key.)\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='send_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Send bytes to the input.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8'), Constant(value='ignore')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='send_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Send text to the input.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Attempt to write into a closed pipe.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='vt100_parser', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetEvent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_event', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='DummyContext', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='DummyContext', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close write-end of the pipe.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetEvent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_event', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This needs to be unique for every `PipeInput`.\n        ')), Return(value=JoinedStr(values=[Constant(value='pipe-input-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_id', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])