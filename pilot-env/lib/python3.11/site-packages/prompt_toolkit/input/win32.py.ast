Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='abc', names=[alias(name='abstractmethod')], level=0), ImportFrom(module='asyncio', names=[alias(name='get_running_loop')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='utils', names=[alias(name='SPHINX_AUTODOC_RUNNING')], level=2), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])), If(test=UnaryOp(op=Not(), operand=Name(id='SPHINX_AUTODOC_RUNNING', ctx=Load())), body=[Import(names=[alias(name='msvcrt')]), ImportFrom(module='ctypes', names=[alias(name='windll')], level=0)], orelse=[]), ImportFrom(module='ctypes', names=[alias(name='Array'), alias(name='pointer')], level=0), ImportFrom(module='ctypes.wintypes', names=[alias(name='DWORD'), alias(name='HANDLE')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='ContextManager'), alias(name='Iterable'), alias(name='Iterator'), alias(name='TextIO')], level=0), ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='run_in_executor_with_context')], level=0), ImportFrom(module='prompt_toolkit.eventloop.win32', names=[alias(name='create_win32_event'), alias(name='wait_for_handles')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPress')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseButton'), alias(name='MouseEventType')], level=0), ImportFrom(module='prompt_toolkit.win32_types', names=[alias(name='INPUT_RECORD'), alias(name='KEY_EVENT_RECORD'), alias(name='MOUSE_EVENT_RECORD'), alias(name='STD_INPUT_HANDLE'), alias(name='EventTypes')], level=0), ImportFrom(module='ansi_escape_sequences', names=[alias(name='REVERSE_ANSI_SEQUENCES')], level=1), ImportFrom(module='base', names=[alias(name='Input')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Win32Input'), Constant(value='ConsoleInputReader'), Constant(value='raw_mode'), Constant(value='cooked_mode'), Constant(value='attach_win32_input'), Constant(value='detach_win32_input')], ctx=Load())), Assign(targets=[Name(id='FROM_LEFT_1ST_BUTTON_PRESSED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='RIGHTMOST_BUTTON_PRESSED', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='MOUSE_MOVED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='MOUSE_WHEELED', ctx=Store())], value=Constant(value=4)), ClassDef(name='_Win32InputBase', bases=[Name(id='Input', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Base class for `Win32Input` and `Win32PipeInput`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='win32_handles', ctx=Store())], value=Call(func=Name(id='_Win32Handles', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handle', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='property', ctx=Load()), Name(id='abstractmethod', ctx=Load())], returns=Name(id='HANDLE', ctx=Load()))], decorator_list=[]), ClassDef(name='Win32Input', bases=[Name(id='_Win32InputBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    `Input` class that reads from the Windows console.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdin', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='console_input_reader', ctx=Store())], value=Call(func=Name(id='ConsoleInputReader', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='attach', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_ready_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes this input active in the current\n        event loop.\n        ')), Return(value=Call(func=Name(id='attach_win32_input', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='input_ready_callback', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes sure that this input is not active\n        in the current event loop.\n        ')), Return(value=Call(func=Name(id='detach_win32_input', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console_input_reader', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='raw_mode', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cooked_mode', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='win32-input'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console_input_reader', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handle', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console_input_reader', ctx=Load()), attr='handle', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='HANDLE', ctx=Load()))], decorator_list=[]), ClassDef(name='ConsoleInputReader', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    :param recognize_paste: When True, try to discover paste actions and turn\n        the event into a BracketedPaste.\n    ')), Assign(targets=[Name(id='mappings', ctx=Store())], value=Dict(keys=[Constant(value=b'\x1b'), Constant(value=b'\x00'), Constant(value=b'\x01'), Constant(value=b'\x02'), Constant(value=b'\x03'), Constant(value=b'\x04'), Constant(value=b'\x05'), Constant(value=b'\x06'), Constant(value=b'\x07'), Constant(value=b'\x08'), Constant(value=b'\t'), Constant(value=b'\n'), Constant(value=b'\x0b'), Constant(value=b'\x0c'), Constant(value=b'\r'), Constant(value=b'\x0e'), Constant(value=b'\x0f'), Constant(value=b'\x10'), Constant(value=b'\x11'), Constant(value=b'\x12'), Constant(value=b'\x13'), Constant(value=b'\x14'), Constant(value=b'\x15'), Constant(value=b'\x16'), Constant(value=b'\x17'), Constant(value=b'\x18'), Constant(value=b'\x19'), Constant(value=b'\x1a'), Constant(value=b'\x1c'), Constant(value=b'\x1d'), Constant(value=b'\x1e'), Constant(value=b'\x1f'), Constant(value=b'\x7f')], values=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Escape', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlSpace', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlA', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlB', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlC', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlD', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlE', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlF', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlG', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlH', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlI', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlJ', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlK', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlL', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlN', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlO', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlP', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlQ', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlR', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlS', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlT', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlU', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlV', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlW', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlX', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlY', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlZ', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlBackslash', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlSquareClose', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlCircumflex', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlUnderscore', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Backspace', ctx=Load())])), Assign(targets=[Name(id='keycodes', ctx=Store())], value=Dict(keys=[Constant(value=33), Constant(value=34), Constant(value=35), Constant(value=36), Constant(value=37), Constant(value=38), Constant(value=39), Constant(value=40), Constant(value=45), Constant(value=46), Constant(value=112), Constant(value=113), Constant(value=114), Constant(value=115), Constant(value=116), Constant(value=117), Constant(value=118), Constant(value=119), Constant(value=120), Constant(value=121), Constant(value=122), Constant(value=123)], values=[Attribute(value=Name(id='Keys', ctx=Load()), attr='PageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageDown', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='End', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Home', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Left', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Right', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Insert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Delete', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F1', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F2', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F3', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F4', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F5', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F6', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F7', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F8', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F9', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F10', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F11', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='F12', ctx=Load())])), Assign(targets=[Name(id='LEFT_ALT_PRESSED', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='RIGHT_ALT_PRESSED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='SHIFT_PRESSED', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='LEFT_CTRL_PRESSED', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='RIGHT_CTRL_PRESSED', ctx=Store())], value=Constant(value=4)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='recognize_paste', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fdcon', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recognize_paste', ctx=Store())], value=Name(id='recognize_paste', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Store()), annotation=Name(id='HANDLE', ctx=Load()), simple=0), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), args=[Name(id='STD_INPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fdcon', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), args=[Constant(value='CONIN$'), BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='O_RDWR', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_BINARY', ctx=Load()))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='get_osfhandle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fdcon', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close fdcon.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fdcon', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fdcon', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return a list of `KeyPress` instances. It won't return anything when\n        there was nothing to read.  (This function doesn't block.)\n\n        http://msdn.microsoft.com/en-us/library/windows/desktop/ms684961(v=vs.85).aspx\n        ")), Assign(targets=[Name(id='max_count', ctx=Store())], value=Constant(value=2048)), Assign(targets=[Name(id='read', ctx=Store())], value=Call(func=Name(id='DWORD', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='arrtype', ctx=Store())], value=BinOp(left=Name(id='INPUT_RECORD', ctx=Load()), op=Mult(), right=Name(id='max_count', ctx=Load()))), Assign(targets=[Name(id='input_records', ctx=Store())], value=Call(func=Name(id='arrtype', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='wait_for_handles', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load())], ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=0))])), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='ReadConsoleInputW', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), Call(func=Name(id='pointer', ctx=Load()), args=[Name(id='input_records', ctx=Load())], keywords=[]), Name(id='max_count', ctx=Load()), Call(func=Name(id='pointer', ctx=Load()), args=[Name(id='read', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='all_keys', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_keys', ctx=Load()), args=[Name(id='read', ctx=Load()), Name(id='input_records', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='all_keys', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_insert_key_data', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='all_keys', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='all_keys', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge_paired_surrogates', ctx=Load()), args=[Name(id='all_keys', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='recognize_paste', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_paste', ctx=Load()), args=[Name(id='all_keys', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='gen', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='all_keys', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='k', ctx=Store()), annotation=BinOp(left=Name(id='KeyPress', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), For(target=Name(id='k', ctx=Store()), iter=Name(id='gen', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='k', ctx=Load()), BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlJ', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load())])])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='k', ctx=Load()), attr='data', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='gen', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='data', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='BracketedPaste', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])], keywords=[])))], orelse=[]), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Name(id='k', ctx=Load())))], orelse=[])], orelse=[])], orelse=[Expr(value=YieldFrom(value=Name(id='all_keys', ctx=Load())))])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='_insert_key_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_press', annotation=Name(id='KeyPress', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Insert KeyPress data, for vt100 compatibility.\n        ')), If(test=Attribute(value=Name(id='key_press', ctx=Load()), attr='data', ctx=Load()), body=[Return(value=Name(id='key_press', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='key_press', ctx=Load()), attr='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='REVERSE_ANSI_SEQUENCES', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='key_press', ctx=Load()), attr='key', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Constant(value=''))]), Return(value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='key_press', ctx=Load()), attr='key', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='KeyPress', ctx=Load())), FunctionDef(name='_get_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='read', annotation=Name(id='DWORD', ctx=Load())), arg(arg='input_records', annotation=Subscript(value=Name(id='Array', ctx=Load()), slice=Name(id='INPUT_RECORD', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generator that yields `KeyPress` objects from the input records.\n        ')), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='read', ctx=Load()), attr='value', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ir', ctx=Store())], value=Subscript(value=Name(id='input_records', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='ir', ctx=Load()), attr='EventType', ctx=Load()), ops=[In()], comparators=[Name(id='EventTypes', ctx=Load())]), body=[Assign(targets=[Name(id='ev', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='ir', ctx=Load()), attr='Event', ctx=Load()), Subscript(value=Name(id='EventTypes', ctx=Load()), slice=Attribute(value=Name(id='ir', ctx=Load()), attr='EventType', ctx=Load()), ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ev', ctx=Load()), Name(id='KEY_EVENT_RECORD', ctx=Load())], keywords=[]), Attribute(value=Name(id='ev', ctx=Load()), attr='KeyDown', ctx=Load())]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_event_to_key_presses', ctx=Load()), args=[Name(id='ev', ctx=Load())], keywords=[])))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ev', ctx=Load()), Name(id='MOUSE_EVENT_RECORD', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_mouse', ctx=Load()), args=[Name(id='ev', ctx=Load())], keywords=[])))], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='_merge_paired_surrogates', args=arguments(posonlyargs=[], args=[arg(arg='key_presses', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Combines consecutive KeyPresses with high and low surrogates into\n        single characters\n        ')), Assign(targets=[Name(id='buffered_high_surrogate', ctx=Store())], value=Constant(value=None)), For(target=Name(id='key', ctx=Store()), iter=Name(id='key_presses', ctx=Load()), body=[Assign(targets=[Name(id='is_text', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='key', ctx=Load()), attr='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='is_high_surrogate', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='is_text', ctx=Load()), Compare(left=Constant(value='\ud800'), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='key', ctx=Load()), attr='key', ctx=Load()), Constant(value='\udbff')])])), Assign(targets=[Name(id='is_low_surrogate', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='is_text', ctx=Load()), Compare(left=Constant(value='\udc00'), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='key', ctx=Load()), attr='key', ctx=Load()), Constant(value='\udfff')])])), If(test=Name(id='buffered_high_surrogate', ctx=Load()), body=[If(test=Name(id='is_low_surrogate', ctx=Load()), body=[Assign(targets=[Name(id='fullchar', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=BinOp(left=Attribute(value=Name(id='buffered_high_surrogate', ctx=Load()), attr='key', ctx=Load()), op=Add(), right=Attribute(value=Name(id='key', ctx=Load()), attr='key', ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-16-le'), Constant(value='surrogatepass')], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-16-le')], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Name(id='fullchar', ctx=Load()), Name(id='fullchar', ctx=Load())], keywords=[]))], orelse=[Expr(value=Yield(value=Name(id='buffered_high_surrogate', ctx=Load())))]), Assign(targets=[Name(id='buffered_high_surrogate', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Name(id='is_high_surrogate', ctx=Load()), body=[Assign(targets=[Name(id='buffered_high_surrogate', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[Expr(value=Yield(value=Name(id='key', ctx=Load())))])], orelse=[]), If(test=Name(id='buffered_high_surrogate', ctx=Load()), body=[Expr(value=Yield(value=Name(id='buffered_high_surrogate', ctx=Load())))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='_is_paste', args=arguments(posonlyargs=[], args=[arg(arg='keys', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return `True` when we should consider this list of keys as a paste\n        event. Pasted text on windows will be turned into a\n        `Keys.BracketedPaste` event. (It's not 100% correct, but it is probably\n        the best possible way to detect pasting of text and handle that\n        correctly.)\n        ")), Assign(targets=[Name(id='text_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='newline_count', ctx=Store())], value=Constant(value=0)), For(target=Name(id='k', ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[])), body=[AugAssign(target=Name(id='text_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load())]), body=[AugAssign(target=Name(id='newline_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='newline_count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), Compare(left=Name(id='text_count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_event_to_key_presses', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ev', annotation=Name(id='KEY_EVENT_RECORD', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For this `KEY_EVENT_RECORD`, return a list of `KeyPress` instances.\n        ')), Assert(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ev', ctx=Load()), Name(id='KEY_EVENT_RECORD', ctx=Load())], keywords=[]), Attribute(value=Name(id='ev', ctx=Load()), attr='KeyDown', ctx=Load())])), AnnAssign(target=Name(id='result', ctx=Store()), annotation=BinOp(left=Name(id='KeyPress', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), Assign(targets=[Name(id='control_key_state', ctx=Store())], value=Attribute(value=Name(id='ev', ctx=Load()), attr='ControlKeyState', ctx=Load())), Assign(targets=[Name(id='u_char', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ev', ctx=Load()), attr='uChar', ctx=Load()), attr='UnicodeChar', ctx=Load())), Assign(targets=[Name(id='ascii_char', ctx=Store())], value=Call(func=Attribute(value=Name(id='u_char', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])), If(test=Compare(left=Name(id='u_char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\x00')]), body=[If(test=Compare(left=Attribute(value=Name(id='ev', ctx=Load()), attr='VirtualKeyCode', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='keycodes', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='keycodes', ctx=Load()), slice=Attribute(value=Name(id='ev', ctx=Load()), attr='VirtualKeyCode', ctx=Load()), ctx=Load()), Constant(value='')], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='ascii_char', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='mappings', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='mappings', ctx=Load()), slice=Name(id='ascii_char', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlJ', ctx=Load())]), body=[Assign(targets=[Name(id='u_char', ctx=Store())], value=Constant(value='\n'))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='mappings', ctx=Load()), slice=Name(id='ascii_char', ctx=Load()), ctx=Load()), Name(id='u_char', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Name(id='u_char', ctx=Load()), Name(id='u_char', ctx=Load())], keywords=[]))])]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='LEFT_CTRL_PRESSED', ctx=Load())), BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='RIGHT_CTRL_PRESSED', ctx=Load()))]), BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='SHIFT_PRESSED', ctx=Load())), Name(id='result', ctx=Load())]), body=[AnnAssign(target=Name(id='mapping', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Left', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Right', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Home', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='End', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Insert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageDown', ctx=Load())], values=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftLeft', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftRight', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftDown', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftHome', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftEnd', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftInsert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftPageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftPageDown', ctx=Load())]), simple=1), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='LEFT_CTRL_PRESSED', ctx=Load())), BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='RIGHT_CTRL_PRESSED', ctx=Load()))]), Name(id='result', ctx=Load())]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Left', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Right', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Home', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='End', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Insert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Delete', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageDown', ctx=Load())], values=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlLeft', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlRight', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlDown', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlHome', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlEnd', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlInsert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlDelete', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlPageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlPageDown', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='SHIFT_PRESSED', ctx=Load())), Name(id='result', ctx=Load())]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Tab', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Left', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Right', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Up', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Down', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Home', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='End', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Insert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='Delete', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='PageDown', ctx=Load())], values=[Attribute(value=Name(id='Keys', ctx=Load()), attr='BackTab', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftLeft', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftRight', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftDown', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftHome', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftEnd', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftInsert', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftDelete', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftPageUp', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftPageDown', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='LEFT_CTRL_PRESSED', ctx=Load())), BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='RIGHT_CTRL_PRESSED', ctx=Load()))]), Name(id='result', ctx=Load()), Compare(left=Attribute(value=Name(id='result', ctx=Load()), attr='data', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlSpace', ctx=Load()), Constant(value=' ')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='LEFT_CTRL_PRESSED', ctx=Load())), BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='RIGHT_CTRL_PRESSED', ctx=Load()))]), Name(id='result', ctx=Load()), Compare(left=Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlJ', ctx=Load())])]), body=[Return(value=List(elts=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Escape', ctx=Load()), Constant(value='')], keywords=[]), Name(id='result', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='result', ctx=Load()), body=[Assign(targets=[Name(id='meta_pressed', ctx=Store())], value=BinOp(left=Name(id='control_key_state', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='LEFT_ALT_PRESSED', ctx=Load()))), If(test=Name(id='meta_pressed', ctx=Load()), body=[Return(value=List(elts=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Escape', ctx=Load()), Constant(value='')], keywords=[]), Name(id='result', ctx=Load())], ctx=Load()))], orelse=[Return(value=List(elts=[Name(id='result', ctx=Load())], ctx=Load()))])], orelse=[Return(value=List(elts=[], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='_handle_mouse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ev', annotation=Name(id='MOUSE_EVENT_RECORD', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle mouse events. Return a list of KeyPress instances.\n        ')), Assign(targets=[Name(id='event_flags', ctx=Store())], value=Attribute(value=Name(id='ev', ctx=Load()), attr='EventFlags', ctx=Load())), Assign(targets=[Name(id='button_state', ctx=Store())], value=Attribute(value=Name(id='ev', ctx=Load()), attr='ButtonState', ctx=Load())), AnnAssign(target=Name(id='event_type', ctx=Store()), annotation=BinOp(left=Name(id='MouseEventType', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='button', ctx=Store()), annotation=Name(id='MouseButton', ctx=Load()), value=Attribute(value=Name(id='MouseButton', ctx=Load()), attr='NONE', ctx=Load()), simple=1), If(test=BinOp(left=Name(id='event_flags', ctx=Load()), op=BitAnd(), right=Name(id='MOUSE_WHEELED', ctx=Load())), body=[If(test=Compare(left=Name(id='button_state', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='event_type', ctx=Store())], value=Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_UP', ctx=Load()))], orelse=[Assign(targets=[Name(id='event_type', ctx=Store())], value=Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='SCROLL_DOWN', ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='button_state', ctx=Load()), ops=[Eq()], comparators=[Name(id='FROM_LEFT_1ST_BUTTON_PRESSED', ctx=Load())]), body=[Assign(targets=[Name(id='button', ctx=Store())], value=Attribute(value=Name(id='MouseButton', ctx=Load()), attr='LEFT', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='button_state', ctx=Load()), ops=[Eq()], comparators=[Name(id='RIGHTMOST_BUTTON_PRESSED', ctx=Load())]), body=[Assign(targets=[Name(id='button', ctx=Store())], value=Attribute(value=Name(id='MouseButton', ctx=Load()), attr='RIGHT', ctx=Load()))], orelse=[])])]), If(test=BinOp(left=Name(id='event_flags', ctx=Load()), op=BitAnd(), right=Name(id='MOUSE_MOVED', ctx=Load())), body=[Assign(targets=[Name(id='event_type', ctx=Store())], value=Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_MOVE', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='event_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='button_state', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='event_type', ctx=Store())], value=Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_DOWN', ctx=Load()))], orelse=[Assign(targets=[Name(id='event_type', ctx=Store())], value=Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='button', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='event_type', ctx=Load()), attr='value', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ev', ctx=Load()), attr='MousePosition', ctx=Load()), attr='X', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ev', ctx=Load()), attr='MousePosition', ctx=Load()), attr='Y', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Return(value=List(elts=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='WindowsMouseEvent', ctx=Load()), Name(id='data', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_Win32Handles', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Utility to keep track of which handles are connectod to which callbacks.\n\n    `add_win32_handle` starts a tiny event loop in another thread which waits\n    for the Win32 handle to become ready. When this happens, the callback will\n    be called in the current asyncio event loop using `call_soon_threadsafe`.\n\n    `remove_win32_handle` will stop this tiny event loop.\n\n    NOTE: We use this technique, so that we don't have to use the\n          `ProactorEventLoop` on Windows and we can wait for things like stdin\n          in a `SelectorEventLoop`. This is important, because our inputhook\n          mechanism (used by IPython), only works with the `SelectorEventLoop`.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_callbacks', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_events', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='HANDLE', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_win32_handle', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handle', annotation=Name(id='HANDLE', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add a Win32 handle to the event loop.\n        ')), Assign(targets=[Name(id='handle_value', ctx=Store())], value=Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load())), If(test=Compare(left=Name(id='handle_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid handle.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_callbacks', ctx=Load()), slice=Name(id='handle_value', ctx=Load()), ctx=Store())], value=Name(id='callback', ctx=Load())), Assign(targets=[Name(id='remove_event', ctx=Store())], value=Call(func=Name(id='create_win32_event', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_events', ctx=Load()), slice=Name(id='handle_value', ctx=Load()), ctx=Store())], value=Name(id='remove_event', ctx=Load())), FunctionDef(name='ready', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='callback', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='wait', ctx=Load())], keywords=[keyword(arg='loop', value=Name(id='loop', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='wait', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='wait_for_handles', ctx=Load()), args=[List(elts=[Name(id='remove_event', ctx=Load()), Name(id='handle', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Name(id='remove_event', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='CloseHandle', ctx=Load()), args=[Name(id='remove_event', ctx=Load())], keywords=[])), Return()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Name(id='ready', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='wait', ctx=Load())], keywords=[keyword(arg='loop', value=Name(id='loop', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='remove_win32_handle', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handle', annotation=Name(id='HANDLE', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remove a Win32 handle from the event loop.\n        Return either the registered handler or `None`.\n        ')), If(test=Compare(left=Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='event', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_events', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetEvent', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], finalbody=[]), Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_callbacks', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), FunctionDef(name='attach_win32_input', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=Name(id='_Win32InputBase', ctx=Load())), arg(arg='callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Context manager that makes this input active in the current event loop.\n\n    :param input: :class:`~prompt_toolkit.input.Input` object.\n    :param input_ready_callback: Called when the input is ready to read.\n    ')), Assign(targets=[Name(id='win32_handles', ctx=Store())], value=Attribute(value=Name(id='input', ctx=Load()), attr='win32_handles', ctx=Load())), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='input', ctx=Load()), attr='handle', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid handle.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='previous_callback', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='remove_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='add_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='callback', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='remove_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), If(test=Name(id='previous_callback', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='add_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='previous_callback', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach_win32_input', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=Name(id='_Win32InputBase', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='win32_handles', ctx=Store())], value=Attribute(value=Name(id='input', ctx=Load()), attr='win32_handles', ctx=Load())), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='input', ctx=Load()), attr='handle', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='handle', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Invalid handle.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='previous_callback', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='remove_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[If(test=Name(id='previous_callback', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='win32_handles', ctx=Load()), attr='add_win32_handle', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='previous_callback', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), ClassDef(name='raw_mode', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    ::\n\n        with raw_mode(stdin):\n            ''' the windows terminal is now in 'raw' mode. '''\n\n    The ``fileno`` attribute is ignored. This is to be compatible with the\n    `raw_input` method of `.vt100_input`.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileno', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Store())], value=Call(func=Name(id='HANDLE', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load()), args=[Name(id='STD_INPUT_HANDLE', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original_mode', ctx=Store())], value=Call(func=Name(id='DWORD', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleMode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), Call(func=Name(id='pointer', ctx=Load()), args=[Name(id='original_mode', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='original_mode', ctx=Store())], value=Name(id='original_mode', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_patch', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_patch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ENABLE_ECHO_INPUT', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='ENABLE_LINE_INPUT', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='ENABLE_PROCESSED_INPUT', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleMode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_mode', ctx=Load()), attr='value', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=BinOp(left=BinOp(left=Name(id='ENABLE_ECHO_INPUT', ctx=Load()), op=BitOr(), right=Name(id='ENABLE_LINE_INPUT', ctx=Load())), op=BitOr(), right=Name(id='ENABLE_PROCESSED_INPUT', ctx=Load()))))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleMode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='original_mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='cooked_mode', bases=[Name(id='raw_mode', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    ::\n\n        with cooked_mode(stdin):\n            ''' The pseudo-terminal stdin is now used in cooked mode. '''\n    ")), FunctionDef(name='_patch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ENABLE_ECHO_INPUT', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='ENABLE_LINE_INPUT', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='ENABLE_PROCESSED_INPUT', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleMode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='original_mode', ctx=Load()), attr='value', ctx=Load()), op=BitOr(), right=BinOp(left=BinOp(left=Name(id='ENABLE_ECHO_INPUT', ctx=Load()), op=BitOr(), right=Name(id='ENABLE_LINE_INPUT', ctx=Load())), op=BitOr(), right=Name(id='ENABLE_PROCESSED_INPUT', ctx=Load())))], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])