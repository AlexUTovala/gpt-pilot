Module(body=[Expr(value=Constant(value='\nAbstraction of CLI Input.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod'), alias(name='abstractproperty')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='ContextManager'), alias(name='Generator')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyPress')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Input'), Constant(value='PipeInput'), Constant(value='DummyInput')], ctx=Load())), ClassDef(name='Input', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Abstraction for any input.\n\n    An instance of this class can be given to the constructor of a\n    :class:`~prompt_toolkit.application.Application` and will also be\n    passed to the :class:`~prompt_toolkit.eventloop.base.EventLoop`.\n    ')), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fileno for putting this in an event loop.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Identifier for storing type ahead key presses.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of Key objects which are read/parsed from the input.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='flush_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Flush the underlying parser. and return the pending keys.\n        (Used for vt100 input.)\n        ')), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The event loop can call this when the input has to be flushed.')), Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Should be true when the input stream is closed.')), Return(value=Constant(value=False))], decorator_list=[Name(id='abstractproperty', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Context manager that turns the input into raw mode.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Context manager that turns the input into cooked mode.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='attach', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_ready_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes this input active in the current\n        event loop.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a context manager that makes sure that this input is not active\n        in the current event loop.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close input.')), Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PipeInput', bases=[Name(id='Input', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Abstraction for pipe input.\n    ')), FunctionDef(name='send_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Feed byte string into the pipe'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='send_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Feed a text string into the pipe'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DummyInput', bases=[Name(id='Input', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Input for use in a `DummyApplication`\n\n    If used in an actual application, it will make the application render\n    itself once and exit immediately, due to an `EOFError`.\n    ')), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='dummy-%s'), op=Mod(), right=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_dummy_context_manager', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_dummy_context_manager', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='attach', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_ready_callback', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='input_ready_callback', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='_dummy_context_manager', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='detach', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_dummy_context_manager', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load()))], decorator_list=[]), FunctionDef(name='_dummy_context_manager', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield())], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])