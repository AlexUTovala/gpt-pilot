Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='sys')]), Assert(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')])), Import(names=[alias(name='os')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='ContextManager'), alias(name='Iterator'), alias(name='TextIO'), alias(name='cast')], level=0), ImportFrom(module='utils', names=[alias(name='DummyContext')], level=2), ImportFrom(module='base', names=[alias(name='PipeInput')], level=1), ImportFrom(module='vt100', names=[alias(name='Vt100Input')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='PosixPipeInput')], ctx=Load())), ClassDef(name='_Pipe', bases=[], keywords=[], body=[Expr(value=Constant(value="Wrapper around os.pipe, that ensures we don't double close any end.")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='read_fd', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='write_fd', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='pipe', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_read_closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_write_closed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close_read', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close read-end if not yet closed.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_read_closed', ctx=Load()), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='read_fd', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_read_closed', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close_write', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close write-end if not yet closed.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_write_closed', ctx=Load()), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='write_fd', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_write_closed', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close both read and write ends.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close_read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close_write', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PosixPipeInput', bases=[Name(id='Vt100Input', ctx=Load()), Name(id='PipeInput', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Input that is send through a pipe.\n    This is useful if we want to send the input programmatically into the\n    application. Mostly useful for unit testing.\n\n    Usage::\n\n        with PosixPipeInput.create() as input:\n            input.send_text('inputdata')\n    ")), Assign(targets=[Name(id='_id', ctx=Store())], value=Constant(value=0)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_pipe', annotation=Name(id='_Pipe', ctx=Load())), arg(arg='_text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pipe', ctx=Store())], value=Name(id='_pipe', ctx=Load())), ClassDef(name='Stdin', bases=[], keywords=[], body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='utf-8')), FunctionDef(name='isatty', args=arguments(posonlyargs=[], args=[arg(arg='stdin')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='stdin')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pipe', ctx=Load()), attr='read_fd', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TextIO', ctx=Load()), Call(func=Name(id='Stdin', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_text', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_id', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_id', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_id', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Name(id='pipe', ctx=Store())], value=Call(func=Name(id='_Pipe', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Call(func=Name(id='PosixPipeInput', ctx=Load()), args=[], keywords=[keyword(arg='_pipe', value=Name(id='pipe', ctx=Load())), keyword(arg='_text', value=Name(id='text', ctx=Load()))])))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='pipe', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load()), Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='PosixPipeInput', ctx=Load()), ctx=Load())), FunctionDef(name='send_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pipe', ctx=Load()), attr='write_fd', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='send_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Send text to the input.')), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pipe', ctx=Load()), attr='write_fd', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='raw_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='DummyContext', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='cooked_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='DummyContext', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close pipe fds.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pipe', ctx=Load()), attr='close_write', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='typeahead_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This needs to be unique for every `PipeInput`.\n        ')), Return(value=JoinedStr(values=[Constant(value='pipe-input-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_id', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])