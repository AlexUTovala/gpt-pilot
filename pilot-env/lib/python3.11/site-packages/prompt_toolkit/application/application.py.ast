Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='asyncio')]), Import(names=[alias(name='contextvars')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='time')]), ImportFrom(module='asyncio', names=[alias(name='AbstractEventLoop'), alias(name='Future'), alias(name='Task'), alias(name='ensure_future'), alias(name='get_running_loop'), alias(name='sleep')], level=0), ImportFrom(module='contextlib', names=[alias(name='ExitStack'), alias(name='contextmanager')], level=0), ImportFrom(module='subprocess', names=[alias(name='Popen')], level=0), ImportFrom(module='traceback', names=[alias(name='format_tb')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Coroutine'), alias(name='Generator'), alias(name='Generic'), alias(name='Hashable'), alias(name='Iterable'), alias(name='Iterator'), alias(name='TypeVar'), alias(name='cast'), alias(name='overload')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='SimpleCache')], level=0), ImportFrom(module='prompt_toolkit.clipboard', names=[alias(name='Clipboard'), alias(name='InMemoryClipboard')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='AnyCursorShapeConfig'), alias(name='to_cursor_shape_config')], level=0), ImportFrom(module='prompt_toolkit.data_structures', names=[alias(name='Size')], level=0), ImportFrom(module='prompt_toolkit.enums', names=[alias(name='EditingMode')], level=0), ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='get_traceback_from_context'), alias(name='run_in_executor_with_context')], level=0), ImportFrom(module='prompt_toolkit.eventloop.utils', names=[alias(name='call_soon_threadsafe')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='Filter'), alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText')], level=0), ImportFrom(module='prompt_toolkit.input.base', names=[alias(name='Input')], level=0), ImportFrom(module='prompt_toolkit.input.typeahead', names=[alias(name='get_typeahead'), alias(name='store_typeahead')], level=0), ImportFrom(module='prompt_toolkit.key_binding.bindings.page_navigation', names=[alias(name='load_page_navigation_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.defaults', names=[alias(name='load_key_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.emacs_state', names=[alias(name='EmacsState')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='Binding'), alias(name='ConditionalKeyBindings'), alias(name='GlobalOnlyKeyBindings'), alias(name='KeyBindings'), alias(name='KeyBindingsBase'), alias(name='KeysTuple'), alias(name='merge_key_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent'), alias(name='KeyProcessor')], level=0), ImportFrom(module='prompt_toolkit.key_binding.vi_state', names=[alias(name='ViState')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.layout.containers', names=[alias(name='Container'), alias(name='Window')], level=0), ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl'), alias(name='UIControl')], level=0), ImportFrom(module='prompt_toolkit.layout.dummy', names=[alias(name='create_dummy_layout')], level=0), ImportFrom(module='prompt_toolkit.layout.layout', names=[alias(name='Layout'), alias(name='walk')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='ColorDepth'), alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.renderer', names=[alias(name='Renderer'), alias(name='print_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.search', names=[alias(name='SearchState')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='BaseStyle'), alias(name='DummyStyle'), alias(name='DummyStyleTransformation'), alias(name='DynamicStyle'), alias(name='StyleTransformation'), alias(name='default_pygments_style'), alias(name='default_ui_style'), alias(name='merge_styles')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='Event'), alias(name='in_main_thread')], level=0), ImportFrom(module='current', names=[alias(name='get_app_session'), alias(name='set_app')], level=1), ImportFrom(module='run_in_terminal', names=[alias(name='in_terminal'), alias(name='run_in_terminal')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Application')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), Assign(targets=[Name(id='_AppResult', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_AppResult')], keywords=[])), Assign(targets=[Name(id='ApplicationEventHandler', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Application[_AppResult]')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_SIGWINCH', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='SIGWINCH'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='_SIGTSTP', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='SIGTSTP'), Constant(value=None)], keywords=[])), ClassDef(name='Application', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    The main Application class!\n    This glues everything together.\n\n    :param layout: A :class:`~prompt_toolkit.layout.Layout` instance.\n    :param key_bindings:\n        :class:`~prompt_toolkit.key_binding.KeyBindingsBase` instance for\n        the key bindings.\n    :param clipboard: :class:`~prompt_toolkit.clipboard.Clipboard` to use.\n    :param full_screen: When True, run the application on the alternate screen buffer.\n    :param color_depth: Any :class:`~.ColorDepth` value, a callable that\n        returns a :class:`~.ColorDepth` or `None` for default.\n    :param erase_when_done: (bool) Clear the application output when it finishes.\n    :param reverse_vi_search_direction: Normally, in Vi mode, a '/' searches\n        forward and a '?' searches backward. In Readline mode, this is usually\n        reversed.\n    :param min_redraw_interval: Number of seconds to wait between redraws. Use\n        this for applications where `invalidate` is called a lot. This could cause\n        a lot of terminal output, which some terminals are not able to process.\n\n        `None` means that every `invalidate` will be scheduled right away\n        (which is usually fine).\n\n        When one `invalidate` is called, but a scheduled redraw of a previous\n        `invalidate` call has not been executed yet, nothing will happen in any\n        case.\n\n    :param max_render_postpone_time: When there is high CPU (a lot of other\n        scheduled calls), postpone the rendering max x seconds.  '0' means:\n        don't postpone. '.5' means: try to draw at least twice a second.\n\n    :param refresh_interval: Automatically invalidate the UI every so many\n        seconds. When `None` (the default), only invalidate when `invalidate`\n        has been called.\n\n    :param terminal_size_polling_interval: Poll the terminal size every so many\n        seconds. Useful if the applications runs in a thread other then then\n        main thread where SIGWINCH can't be handled, or on Windows.\n\n    Filters:\n\n    :param mouse_support: (:class:`~prompt_toolkit.filters.Filter` or\n        boolean). When True, enable mouse support.\n    :param paste_mode: :class:`~prompt_toolkit.filters.Filter` or boolean.\n    :param editing_mode: :class:`~prompt_toolkit.enums.EditingMode`.\n\n    :param enable_page_navigation_bindings: When `True`, enable the page\n        navigation key bindings. These include both Emacs and Vi bindings like\n        page-up, page-down and so on to scroll through pages. Mostly useful for\n        creating an editor or other full screen applications. Probably, you\n        don't want this for the implementation of a REPL. By default, this is\n        enabled if `full_screen` is set.\n\n    Callbacks (all of these should accept an\n    :class:`~prompt_toolkit.application.Application` object as input.)\n\n    :param on_reset: Called during reset.\n    :param on_invalidate: Called when the UI has been invalidated.\n    :param before_render: Called right before rendering.\n    :param after_render: Called right after rendering.\n\n    I/O:\n    (Note that the preferred way to change the input/output is by creating an\n    `AppSession` with the required input/output objects. If you need multiple\n    applications running at the same time, you have to create a separate\n    `AppSession` using a `with create_app_session():` block.\n\n    :param input: :class:`~prompt_toolkit.input.Input` instance.\n    :param output: :class:`~prompt_toolkit.output.Output` instance. (Probably\n                   Vt100_Output or Win32Output.)\n\n    Usage:\n\n        app = Application(...)\n        app.run()\n\n        # Or\n        await app.run_async()\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='layout', annotation=BinOp(left=Name(id='Layout', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='clipboard', annotation=BinOp(left=Name(id='Clipboard', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='full_screen', annotation=Name(id='bool', ctx=Load())), arg(arg='color_depth', annotation=BinOp(left=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='mouse_support', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='enable_page_navigation_bindings', annotation=BinOp(left=Constant(value=None), op=BitOr(), right=Name(id='FilterOrBool', ctx=Load()))), arg(arg='paste_mode', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='editing_mode', annotation=Name(id='EditingMode', ctx=Load())), arg(arg='erase_when_done', annotation=Name(id='bool', ctx=Load())), arg(arg='reverse_vi_search_direction', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='min_redraw_interval', annotation=BinOp(left=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Name(id='int', ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='max_render_postpone_time', annotation=BinOp(left=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Name(id='int', ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='refresh_interval', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='terminal_size_polling_interval', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cursor', annotation=Name(id='AnyCursorShapeConfig', ctx=Load())), arg(arg='on_reset', annotation=BinOp(left=Subscript(value=Name(id='ApplicationEventHandler', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='on_invalidate', annotation=BinOp(left=Subscript(value=Name(id='ApplicationEventHandler', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='before_render', annotation=BinOp(left=Subscript(value=Name(id='ApplicationEventHandler', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='after_render', annotation=BinOp(left=Subscript(value=Name(id='ApplicationEventHandler', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input', annotation=BinOp(left=Name(id='Input', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False), Attribute(value=Name(id='EditingMode', ctx=Load()), attr='EMACS', ctx=Load()), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=0.01), Constant(value=None), Constant(value=0.5), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='enable_page_navigation_bindings', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='enable_page_navigation_bindings', ctx=Store())], value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paste_mode', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='paste_mode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mouse_support', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='mouse_support', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reverse_vi_search_direction', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='reverse_vi_search_direction', ctx=Load())], keywords=[])), Assign(targets=[Name(id='enable_page_navigation_bindings', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='enable_page_navigation_bindings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='include_default_pygments_style', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='include_default_pygments_style', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='layout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Name(id='create_dummy_layout', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='style_transformation', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='style_transformation', ctx=Store())], value=Call(func=Name(id='DummyStyleTransformation', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_bindings', ctx=Store())], value=Call(func=Name(id='load_key_bindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_page_navigation_bindings', ctx=Store())], value=Call(func=Name(id='load_page_navigation_bindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Store())], value=Name(id='layout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clipboard', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='clipboard', ctx=Load()), Call(func=Name(id='InMemoryClipboard', ctx=Load()), args=[], keywords=[])])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='full_screen', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='full_screen', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Store())], value=Name(id='mouse_support', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='paste_mode', ctx=Store())], value=Name(id='paste_mode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editing_mode', ctx=Store())], value=Name(id='editing_mode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='erase_when_done', ctx=Store())], value=Name(id='erase_when_done', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reverse_vi_search_direction', ctx=Store())], value=Name(id='reverse_vi_search_direction', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_page_navigation_bindings', ctx=Store())], value=Name(id='enable_page_navigation_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_redraw_interval', ctx=Store())], value=Name(id='min_redraw_interval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_render_postpone_time', ctx=Store())], value=Name(id='max_render_postpone_time', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Name(id='refresh_interval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='terminal_size_polling_interval', ctx=Store())], value=Name(id='terminal_size_polling_interval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Store())], value=Call(func=Name(id='to_cursor_shape_config', ctx=Load()), args=[Name(id='cursor', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='on_invalidate', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_invalidate', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='on_reset', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='on_reset', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='before_render', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='before_render', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='after_render', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='after_render', ctx=Load())], keywords=[])), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='output', ctx=Load()), Attribute(value=Name(id='session', ctx=Load()), attr='output', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='input', ctx=Load()), Attribute(value=Name(id='session', ctx=Load()), attr='input', ctx=Load())])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='pre_run_callables', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Future', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Store()), annotation=BinOp(left=Name(id='AbstractEventLoop', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_loop_thread', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='contextvars', ctx=Load()), attr='Context', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quoted_insert', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vi_state', ctx=Store())], value=Call(func=Name(id='ViState', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='emacs_state', ctx=Store())], value=Call(func=Name(id='EmacsState', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ttimeoutlen', ctx=Store())], value=Constant(value=0.5)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeoutlen', ctx=Store())], value=Constant(value=1.0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_merged_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_merged_style', ctx=Load()), args=[Name(id='include_default_pygments_style', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Store())], value=Call(func=Name(id='Renderer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_merged_style', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())], keywords=[keyword(arg='full_screen', value=Name(id='full_screen', ctx=Load())), keyword(arg='mouse_support', value=Name(id='mouse_support', ctx=Load())), keyword(arg='cpr_not_supported_callback', value=Attribute(value=Name(id='self', ctx=Load()), attr='cpr_not_supported_callback', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='render_counter', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_redraw_time', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Store())], value=Call(func=Name(id='KeyProcessor', ctx=Load()), args=[Call(func=Name(id='_CombinedRegistry', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_running_in_terminal', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_running_in_terminal_f', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Future', ctx=Load()), slice=Constant(value=None), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_create_merged_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include_default_pygments_style', annotation=Name(id='Filter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a `Style` object that merges the default UI style, the default\n        pygments style, and the custom user style.\n        ')), Assign(targets=[Name(id='dummy_style', ctx=Store())], value=Call(func=Name(id='DummyStyle', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pygments_style', ctx=Store())], value=Call(func=Name(id='default_pygments_style', ctx=Load()), args=[], keywords=[])), FunctionDef(name='conditional_pygments_style', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='include_default_pygments_style', ctx=Load()), args=[], keywords=[]), body=[Return(value=Name(id='pygments_style', ctx=Load()))], orelse=[Return(value=Name(id='dummy_style', ctx=Load()))])], decorator_list=[Name(id='DynamicStyle', ctx=Load())], returns=Name(id='BaseStyle', ctx=Load())), Return(value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Call(func=Name(id='default_ui_style', ctx=Load()), args=[], keywords=[]), Name(id='conditional_pygments_style', ctx=Load()), Call(func=Name(id='DynamicStyle', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseStyle', ctx=Load())), FunctionDef(name='color_depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The active :class:`.ColorDepth`.\n\n        The current value is determined as follows:\n\n        - If a color depth was given explicitly to this application, use that\n          value.\n        - Otherwise, fall back to the color depth that is reported by the\n          :class:`.Output` implementation. If the :class:`.Output` class was\n          created using `output.defaults.create_output`, then this value is\n          coming from the $PROMPT_TOOLKIT_COLOR_DEPTH environment variable.\n        ')), Assign(targets=[Name(id='depth', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_color_depth', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='depth', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='depth', ctx=Store())], value=Call(func=Name(id='depth', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='depth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='depth', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_default_color_depth', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='depth', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ColorDepth', ctx=Load())), FunctionDef(name='current_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        The currently focused :class:`~.Buffer`.\n\n        (This returns a dummy :class:`.Buffer` when none of the actual buffers\n        has the focus. In this case, it's really not practical to check for\n        `None` values or catch exceptions every time.)\n        ")), Return(value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load()), attr='current_buffer', ctx=Load()), Call(func=Name(id='Buffer', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='dummy-buffer'))])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Buffer', ctx=Load())), FunctionDef(name='current_search_state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the current :class:`.SearchState`. (The one for the focused\n        :class:`.BufferControl`.)\n        ')), Assign(targets=[Name(id='ui_control', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load()), attr='current_control', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ui_control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='ui_control', ctx=Load()), attr='search_state', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='SearchState', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='SearchState', ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Reset everything, for reading the next input.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exit_style', ctx=Store())], value=Constant(value='')), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Subscript(value=Name(id='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='vi_state', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='emacs_state', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_reset', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='layout', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='current_control', ctx=Load()), attr='is_focusable', ctx=Load()), args=[], keywords=[])), body=[For(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='layout', ctx=Load()), attr='find_all_windows', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='content', ctx=Load()), attr='is_focusable', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='layout', ctx=Load()), attr='current_window', ctx=Store())], value=Name(id='w', ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='invalidate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Thread safe way of sending a repaint trigger to the input event loop.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Load())), body=[Return()], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])]), body=[Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Load()), body=[Return()], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Store())], value=Constant(value=True))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='on_invalidate', ctx=Load()), attr='fire', ctx=Load())], keywords=[])), FunctionDef(name='redraw', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='schedule_redraw', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='call_soon_threadsafe', ctx=Load()), args=[Name(id='redraw', ctx=Load())], keywords=[keyword(arg='max_postpone_time', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_render_postpone_time', ctx=Load())), keyword(arg='loop', value=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='min_redraw_interval', ctx=Load()), body=[Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_last_redraw_time', ctx=Load()))), If(test=Compare(left=Name(id='diff', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='min_redraw_interval', ctx=Load())]), body=[AsyncFunctionDef(name='redraw_in_future', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[BinOp(left=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='float', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_redraw_interval', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='diff', ctx=Load()))], keywords=[]))), Expr(value=Call(func=Name(id='schedule_redraw', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='redraw_in_future', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='schedule_redraw', ctx=Load()), args=[], keywords=[]))])], orelse=[Expr(value=Call(func=Name(id='schedule_redraw', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='invalidated', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True when a redraw operation has been scheduled.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_redraw', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='render_as_done', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Render the command line again. (Not thread safe!) (From other threads,\n        or if unsure, use :meth:`.Application.invalidate`.)\n\n        :param render_as_done: make sure to put the cursor after the UI.\n        ')), FunctionDef(name='run_in_context', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_running_in_terminal', ctx=Load()))]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='min_redraw_interval', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_redraw_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]))], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='render_counter', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='before_render', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), If(test=Name(id='render_as_done', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='erase_when_done', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())], keywords=[keyword(arg='is_done', value=Name(id='render_as_done', ctx=Load()))]))])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load()), attr='update_parents_relations', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='after_render', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_invalidate_events', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), attr='run', ctx=Load()), args=[Name(id='run_in_context', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start_auto_refresh_task', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start a while/true loop in the background for automatic invalidation of\n        the UI.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)])]), body=[AsyncFunctionDef(name='auto_refresh', args=arguments(posonlyargs=[], args=[arg(arg='refresh_interval', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Constant(value=True), body=[Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='refresh_interval', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='invalidate', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='auto_refresh', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_update_invalidate_events', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Make sure to attach 'invalidate' handlers to all invalidate events in\n        the UI.\n        ")), For(target=Name(id='ev', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Load()), body=[AugAssign(target=Name(id='ev', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_handler', ctx=Load()))], orelse=[]), FunctionDef(name='gather_events', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load()), attr='find_all_controls', ctx=Load()), args=[], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get_invalidate_events', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Event', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='gather_events', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='ev', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Load()), body=[AugAssign(target=Name(id='ev', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_handler', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_invalidate_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sender', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handler for invalidate events coming from UIControls.\n\n        (This handles the difference in signature between event handler and\n        `self.invalidate`. It also needs to be a method -not a nested\n        function-, so that we can remove it again .)\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='invalidate', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_on_resize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        When the window size changes, we erase the current output and request\n        again the cursor position. When the CPR answer arrives, the output is\n        drawn again.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[keyword(arg='leave_alternate_screen', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_request_absolute_cursor_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_pre_run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Called during `run`.\n\n        `self.future` should be set to the new future at the point where this\n        is called in order to avoid data races. `pre_run` can be used to set a\n        `threading.Event` to synchronize with UI termination code, running in\n        another thread that would call `Application.exit`. (See the progress\n        bar code for an example.)\n        ')), If(test=Name(id='pre_run', ctx=Load()), body=[Expr(value=Call(func=Name(id='pre_run', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pre_run_callables', ctx=Load()), body=[Expr(value=Call(func=Name(id='c', ctx=Load()), args=[], keywords=[]))], orelse=[]), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='pre_run_callables', ctx=Load()), slice=Slice(), ctx=Del())])], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='run_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='set_exception_handler', annotation=Name(id='bool', ctx=Load())), arg(arg='handle_sigint', annotation=Name(id='bool', ctx=Load())), arg(arg='slow_callback_duration', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=0.5)]), body=[Expr(value=Constant(value='\n        Run the prompt_toolkit :class:`~prompt_toolkit.application.Application`\n        until :meth:`~prompt_toolkit.application.Application.exit` has been\n        called. Return the value that was passed to\n        :meth:`~prompt_toolkit.application.Application.exit`.\n\n        This is the main entry point for a prompt_toolkit\n        :class:`~prompt_toolkit.application.Application` and usually the only\n        place where the event loop is actually running.\n\n        :param pre_run: Optional callable, which is called right after the\n            "reset" of the application.\n        :param set_exception_handler: When set, in case of an exception, go out\n            of the alternate screen and hide the application, display the\n            exception, and wait for the user to press ENTER.\n        :param handle_sigint: Handle SIGINT signal if possible. This will call\n            the `<sigint>` key binding when a SIGINT is received. (This only\n            works in the main thread.)\n        :param slow_callback_duration: Display warnings if code scheduled in\n            the asyncio event loop takes more time than this. The asyncio\n            default of `0.1` is sometimes not sufficient on a slow system,\n            because exceptionally, the drawing of the app, which happens in the\n            event loop, can take a bit longer from time to time.\n        ')), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Load())), msg=Constant(value='Application is already running.')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='in_main_thread', ctx=Load()), args=[], keywords=[])), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')])]), body=[Assign(targets=[Name(id='handle_sigint', ctx=Store())], value=Constant(value=False))], orelse=[]), AsyncFunctionDef(name='_run_async', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Future', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='contextvars', ctx=Load()), attr='copy_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store())], value=Name(id='context', ctx=Load())), AnnAssign(target=Name(id='flush_task', ctx=Store()), annotation=BinOp(left=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pre_run', ctx=Load()), args=[Name(id='pre_run', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed_multiple', ctx=Load()), args=[Call(func=Name(id='get_typeahead', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='process_keys', ctx=Load()), args=[], keywords=[])), FunctionDef(name='read_from_input', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Nonlocal(names=['flush_task']), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='waiting_for_cpr', ctx=Load()))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='read_keys', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed_multiple', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='process_keys', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='closed', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='set_exception', ctx=Load()), args=[Name(id='EOFError', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Name(id='flush_task', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='flush_task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='flush_task', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='auto_flush_input', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='read_from_input_in_context', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), attr='run', ctx=Load()), args=[Name(id='read_from_input', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='auto_flush_input', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ttimeoutlen', ctx=Load())], keywords=[]))), Expr(value=Call(func=Name(id='flush_input', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush_input', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_done', ctx=Load())), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='flush_keys', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed_multiple', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='process_keys', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='closed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='set_exception', ctx=Load()), args=[Name(id='EOFError', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='raw_mode', ctx=Load()), args=[], keywords=[])), withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='attach', ctx=Load()), args=[Name(id='read_from_input_in_context', ctx=Load())], keywords=[])), withitem(context_expr=Call(func=Name(id='attach_winch_signal_handler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_on_resize', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_request_absolute_cursor_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_start_auto_refresh_task', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_poll_output_size', ctx=Load()), args=[], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Await(value=Name(id='f', ctx=Load())))], handlers=[], orelse=[], finalbody=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[keyword(arg='render_as_done', value=Constant(value=True))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Store())], value=Constant(value=False)), For(target=Name(id='ev', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Load()), body=[AugAssign(target=Name(id='ev', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_handler', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidate_events', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='responds_to_cpr', ctx=Load()), body=[Expr(value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='wait_for_cpr_responses', ctx=Load()), args=[], keywords=[])))], orelse=[]), Assign(targets=[Name(id='previous_run_in_terminal_f', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_running_in_terminal_f', ctx=Load())), If(test=Name(id='previous_run_in_terminal_f', ctx=Load()), body=[Expr(value=Await(value=Name(id='previous_run_in_terminal_f', ctx=Load())))], orelse=[]), Expr(value=Call(func=Name(id='store_typeahead', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='empty_queue', ctx=Load()), args=[], keywords=[])], keywords=[]))])]), Return(value=Name(id='result', ctx=Load()))])], decorator_list=[], returns=Name(id='_AppResult', ctx=Load())), FunctionDef(name='set_loop', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Store())], value=Name(id='loop', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loop_thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='current_thread', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='loop', ctx=Load())))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loop_thread', ctx=Store())], value=Constant(value=None))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='AbstractEventLoop', ctx=Load()), ctx=Load())), FunctionDef(name='set_is_running', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Store())], value=Constant(value=True)), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Store())], value=Constant(value=False))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='set_handle_sigint', args=arguments(posonlyargs=[], args=[arg(arg='loop', annotation=Name(id='AbstractEventLoop', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='handle_sigint', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_signal_handler', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGINT', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='send_sigint', ctx=Load())], keywords=[]))], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='remove_signal_handler', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGINT', ctx=Load())], keywords=[]))])], orelse=[Expr(value=Yield())])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='set_exception_handler_ctx', args=arguments(posonlyargs=[], args=[arg(arg='loop', annotation=Name(id='AbstractEventLoop', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='set_exception_handler', ctx=Load()), body=[Assign(targets=[Name(id='previous_exc_handler', ctx=Store())], value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='get_exception_handler', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='set_exception_handler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle_exception', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='set_exception_handler', ctx=Load()), args=[Name(id='previous_exc_handler', ctx=Load())], keywords=[]))])], orelse=[Expr(value=Yield())])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='set_callback_duration', args=arguments(posonlyargs=[], args=[arg(arg='loop', annotation=Name(id='AbstractEventLoop', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original_slow_callback_duration', ctx=Store())], value=Attribute(value=Name(id='loop', ctx=Load()), attr='slow_callback_duration', ctx=Load())), Assign(targets=[Attribute(value=Name(id='loop', ctx=Load()), attr='slow_callback_duration', ctx=Store())], value=Name(id='slow_callback_duration', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='loop', ctx=Load()), attr='slow_callback_duration', ctx=Store())], value=Name(id='original_slow_callback_duration', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='create_future', args=arguments(posonlyargs=[], args=[arg(arg='loop', annotation=Name(id='AbstractEventLoop', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='create_future', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Store())], value=Name(id='f', ctx=Load())), Try(body=[Expr(value=Yield(value=Name(id='f', ctx=Load())))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Store())], value=Constant(value=None))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Future', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()), ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='ExitStack', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stack', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_is_running', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_invalidated', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_loop', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_handle_sigint', ctx=Load()), args=[Name(id='loop', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_exception_handler_ctx', ctx=Load()), args=[Name(id='loop', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_callback_duration', ctx=Load()), args=[Name(id='loop', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='set_app', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_enable_breakpointhook', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='create_future', ctx=Load()), args=[Name(id='loop', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Return(value=Await(value=Call(func=Name(id='_run_async', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])))], handlers=[], orelse=[], finalbody=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cancel_and_wait_for_background_tasks', ctx=Load()), args=[], keywords=[])))])]), Assert(test=Constant(value=False), msg=Constant(value='unreachable'))], decorator_list=[], returns=Name(id='_AppResult', ctx=Load())), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='set_exception_handler', annotation=Name(id='bool', ctx=Load())), arg(arg='handle_sigint', annotation=Name(id='bool', ctx=Load())), arg(arg='in_thread', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n        A blocking \'run\' call that waits until the UI is finished.\n\n        This will start the current asyncio event loop. If no loop is set for\n        the current thread, then it will create a new loop. If a new loop was\n        created, this won\'t close the new loop (if `in_thread=False`).\n\n        :param pre_run: Optional callable, which is called right after the\n            "reset" of the application.\n        :param set_exception_handler: When set, in case of an exception, go out\n            of the alternate screen and hide the application, display the\n            exception, and wait for the user to press ENTER.\n        :param in_thread: When true, run the application in a background\n            thread, and block the current thread until the application\n            terminates. This is useful if we need to be sure the application\n            won\'t use the current event loop (asyncio does not support nested\n            event loops). A new event loop will be created in this background\n            thread, and that loop will also be closed when the background\n            thread terminates. When this is used, it\'s especially important to\n            make sure that all asyncio background tasks are managed through\n            `get_appp().create_background_task()`, so that unfinished tasks are\n            properly cancelled before the event loop is closed. This is used\n            for instance in ptpython.\n        :param handle_sigint: Handle SIGINT signal. Call the key binding for\n            `Keys.SIGINT`. (This only works in the main thread.)\n        ')), If(test=Name(id='in_thread', ctx=Load()), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='_AppResult', ctx=Load()), simple=1), AnnAssign(target=Name(id='exception', ctx=Store()), annotation=BinOp(left=Name(id='BaseException', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), FunctionDef(name='run_in_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Nonlocal(names=['result', 'exception']), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='pre_run', value=Name(id='pre_run', ctx=Load())), keyword(arg='set_exception_handler', value=Name(id='set_exception_handler', ctx=Load())), keyword(arg='handle_sigint', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='e', body=[Assign(targets=[Name(id='exception', ctx=Store())], value=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='run_in_thread', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='exception', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Name(id='exception', ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='coro', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_async', ctx=Load()), args=[], keywords=[keyword(arg='pre_run', value=Name(id='pre_run', ctx=Load())), keyword(arg='set_exception_handler', value=Name(id='set_exception_handler', ctx=Load())), keyword(arg='handle_sigint', value=Name(id='handle_sigint', ctx=Load()))])), Try(body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()), args=[], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_running_loop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='new_event_loop', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])])], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='coro', ctx=Load())], keywords=[]))])], orelse=[Return(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Name(id='coro', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[], returns=Name(id='_AppResult', ctx=Load())), FunctionDef(name='_handle_exception', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='loop', annotation=Name(id='AbstractEventLoop', ctx=Load())), arg(arg='context', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handler for event loop exceptions.\n        This will print the exception, using run_in_terminal.\n        ')), Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Name(id='get_traceback_from_context', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[])), Assign(targets=[Name(id='formatted_tb', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='format_tb', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[])], keywords=[])), AsyncFunctionDef(name='in_term', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AsyncWith(items=[withitem(context_expr=Call(func=Name(id='in_terminal', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\nUnhandled exception in event loop:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='formatted_tb', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Exception {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='exception')], keywords=[])], keywords=[])], keywords=[])), Expr(value=Await(value=Call(func=Name(id='_do_wait_for_enter', ctx=Load()), args=[Constant(value='Press ENTER to continue...')], keywords=[])))])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='ensure_future', ctx=Load()), args=[Call(func=Name(id='in_term', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_enable_breakpointhook', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Install our custom breakpointhook for the duration of this context\n        manager. (We will only install the hook if no other custom hook was\n        set.)\n        ')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='breakpointhook', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='__breakpointhook__', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='breakpointhook', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_breakpointhook', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='breakpointhook', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='__breakpointhook__', ctx=Load()))])], orelse=[Expr(value=Yield())])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_breakpointhook', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='object', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value="\n        Breakpointhook which uses PDB, but ensures that the application is\n        hidden and input echoing is restored during each debugger dispatch.\n\n        This can be called from any thread. In any case, the application's\n        event loop will be blocked while the PDB input is displayed. The event\n        will continue after leaving the debugger.\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Name(id='self', ctx=Load())), Import(names=[alias(name='pdb')]), ImportFrom(module='types', names=[alias(name='FrameType')], level=0), Assign(targets=[Name(id='TraceDispatch', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='FrameType', ctx=Load()), Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='hide_app_from_eventloop_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Stop application if `__breakpointhook__` is called from within\n            the App's event loop.")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='renderer', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='cooked_mode', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Yield())])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='hide_app_from_other_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Stop application if `__breakpointhook__` is called from a\n            thread other than the App's event loop.")), Assign(targets=[Name(id='ready', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='done', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[])), AsyncFunctionDef(name='in_loop', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='renderer', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='cooked_mode', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='ready', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='done', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='in_loop', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ready', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='done', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='CustomPdb', bases=[Attribute(value=Name(id='pdb', ctx=Load()), attr='Pdb', ctx=Load())], keywords=[], body=[FunctionDef(name='trace_dispatch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='frame', annotation=Name(id='FrameType', ctx=Load())), arg(arg='event', annotation=Name(id='str', ctx=Load())), arg(arg='arg', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='app', ctx=Load()), attr='_loop_thread', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='trace_dispatch', ctx=Load()), args=[Name(id='frame', ctx=Load()), Name(id='event', ctx=Load()), Name(id='arg', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='app', ctx=Load()), attr='_loop_thread', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='current_thread', ctx=Load()), args=[], keywords=[])]), body=[With(items=[withitem(context_expr=Call(func=Name(id='hide_app_from_eventloop_thread', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='trace_dispatch', ctx=Load()), args=[Name(id='frame', ctx=Load()), Name(id='event', ctx=Load()), Name(id='arg', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='hide_app_from_other_thread', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='trace_dispatch', ctx=Load()), args=[Name(id='frame', ctx=Load()), Name(id='event', ctx=Load()), Name(id='arg', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='TraceDispatch', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='frame', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[], keywords=[]), attr='f_back', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='CustomPdb', ctx=Load()), args=[], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stdout__', ctx=Load()))]), attr='set_trace', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create_background_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='coroutine', annotation=Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Start a background task (coroutine) for the running application. When\n        the `Application` terminates, unfinished background tasks will be\n        cancelled.\n\n        Given that we still support Python versions before 3.11, we can't use\n        task groups (and exception groups), because of that, these background\n        tasks are not allowed to raise exceptions. If they do, we'll call the\n        default exception handler from the event loop.\n\n        If at some point, we have Python 3.11 as the minimum supported Python\n        version, then we can use a `TaskGroup` (with the lifetime of\n        `Application.run_async()`, and run run the background tasks in there.\n\n        This is not threadsafe.\n        ")), Assign(targets=[Name(id='loop', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='loop', ctx=Load()), Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])])), AnnAssign(target=Name(id='task', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()), value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='create_task', ctx=Load()), args=[Name(id='coroutine', ctx=Load())], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='task', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='add_done_callback', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_on_background_task_done', ctx=Load())], keywords=[])), Return(value=Name(id='task', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load())), FunctionDef(name='_on_background_task_done', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Subscript(value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Called when a background task completes. Remove it from\n        `_background_tasks`, and handle exceptions if any.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Load()), attr='discard', ctx=Load()), args=[Name(id='task', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='cancelled', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='exception', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='exc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[]), attr='call_exception_handler', ctx=Load()), args=[Dict(keys=[Constant(value='message'), Constant(value='exception'), Constant(value='task')], values=[JoinedStr(values=[Constant(value='prompt_toolkit.Application background task '), FormattedValue(value=Name(id='task', ctx=Load()), conversion=114), Constant(value=' raised an unexpected exception.')]), Name(id='exc', ctx=Load()), Name(id='task', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='cancel_and_wait_for_background_tasks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cancel all background tasks, and wait for the cancellation to complete.\n        If any of the background tasks raised an exception, this will also\n        propagate the exception.\n\n        (If we had nurseries like Trio, this would be the `__aexit__` of a\n        nursery.)\n        ')), For(target=Name(id='task', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='wait', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_background_tasks', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=None)), keyword(arg='return_when', value=Attribute(value=Name(id='asyncio', ctx=Load()), attr='ALL_COMPLETED', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='_poll_output_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Coroutine for polling the terminal dimensions.\n\n        Useful for situations where `attach_winch_signal_handler` is not sufficient:\n        - If we are not running in the main thread.\n        - On Windows.\n        ')), AnnAssign(target=Name(id='size', ctx=Store()), annotation=BinOp(left=Name(id='Size', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), Assign(targets=[Name(id='interval', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='terminal_size_polling_interval', ctx=Load())), If(test=Compare(left=Name(id='interval', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), While(test=Constant(value=True), body=[Expr(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='new_size', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='get_size', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='new_size', ctx=Load()), ops=[NotEq()], comparators=[Name(id='size', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_on_resize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='size', ctx=Store())], value=Name(id='new_size', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cpr_not_supported_callback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Called when we don't receive the cursor position response in time.\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='responds_to_cpr', ctx=Load())), body=[Return()], orelse=[]), FunctionDef(name='in_terminal', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value="WARNING: your terminal doesn't support cursor position requests (CPR).\r\n")], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Name(id='in_terminal', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exit without arguments.'))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='result', annotation=Name(id='_AppResult', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None, Constant(value='')], defaults=[]), body=[Expr(value=Constant(value='Exit with `_AppResult`.'))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='exception', annotation=BinOp(left=Name(id='BaseException', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()))), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None, Constant(value='')], defaults=[]), body=[Expr(value=Constant(value='Exit with exception.'))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='exit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result', annotation=BinOp(left=Name(id='_AppResult', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='exception', annotation=BinOp(left=BinOp(left=Name(id='BaseException', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='')]), body=[Expr(value=Constant(value="\n        Exit application.\n\n        .. note::\n\n            If `Application.exit` is called before `Application.run()` is\n            called, then the `Application` won't exit (because the\n            `Application.future` doesn't correspond to the current run). Use a\n            `pre_run` hook and an event to synchronize the closing if there's a\n            chance this can happen.\n\n        :param result: Set this result for the application.\n        :param exception: Set this exception as the result for an application. For\n            a prompt, this is often `EOFError` or `KeyboardInterrupt`.\n        :param style: Apply this style on the whole content when quitting,\n            often this is 'class:exiting' for a prompt. (Used when\n            `erase_when_done` is not set.)\n        ")), Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='exception', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='Application is not running. Application.exit() failed.')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='Return value already set. Application.exit() failed.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exit_style', ctx=Store())], value=Name(id='style', ctx=Load())), If(test=Compare(left=Name(id='exception', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), attr='set_exception', ctx=Load()), args=[Name(id='exception', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), attr='set_result', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='_AppResult', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_request_absolute_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Send CPR request.\n        ')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='input_queue', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_done', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='request_absolute_cursor_position', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AsyncFunctionDef(name='run_system_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command', annotation=Name(id='str', ctx=Load())), arg(arg='wait_for_enter', annotation=Name(id='bool', ctx=Load())), arg(arg='display_before_text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='wait_text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=''), Constant(value='Press ENTER to continue...')]), body=[Expr(value=Constant(value='\n        Run system command (While hiding the prompt. When finished, all the\n        output will scroll above the prompt.)\n\n        :param command: Shell command to be executed.\n        :param wait_for_enter: FWait for the user to press enter, when the\n            command is finished.\n        :param display_before_text: If given, text to be displayed before the\n            command executes.\n        :return: A `Future` object.\n        ')), AsyncWith(items=[withitem(context_expr=Call(func=Name(id='in_terminal', ctx=Load()), args=[], keywords=[]))], body=[Try(body=[Assign(targets=[Name(id='input_fd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='input_fd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='output_fd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='output_fd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), FunctionDef(name='run_command', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_text', ctx=Load()), args=[Name(id='display_before_text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='Popen', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[keyword(arg='shell', value=Constant(value=True)), keyword(arg='stdin', value=Name(id='input_fd', ctx=Load())), keyword(arg='stdout', value=Name(id='output_fd', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Await(value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='run_command', ctx=Load())], keywords=[]))), If(test=Name(id='wait_for_enter', ctx=Load()), body=[Expr(value=Await(value=Call(func=Name(id='_do_wait_for_enter', ctx=Load()), args=[Name(id='wait_text', ctx=Load())], keywords=[])))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='suspend_to_background', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suspend_group', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        (Not thread safe -- to be called from inside the key bindings.)\n        Suspend process.\n\n        :param suspend_group: When true, suspend the whole process group.\n            (This is the default, and probably what you want.)\n        ')), If(test=Compare(left=Name(id='_SIGTSTP', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[FunctionDef(name='run', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='signal', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='int', ctx=Load()), Name(id='_SIGTSTP', ctx=Load())], keywords=[])), If(test=Name(id='suspend_group', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='kill', ctx=Load()), args=[Constant(value=0), Name(id='signal', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='kill', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), Name(id='signal', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Name(id='run', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Print a list of (style_str, text) tuples to the output.\n        (When the UI is running, this method has to be called through\n        `run_in_terminal`, otherwise it will destroy the UI.)\n\n        :param text: List of ``(style_str, text)`` tuples.\n        :param style: Style class to use. Defaults to the active style in the CLI.\n        ')), Expr(value=Call(func=Name(id='print_formatted_text', ctx=Load()), args=[], keywords=[keyword(arg='output', value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())), keyword(arg='formatted_text', value=Name(id='text', ctx=Load())), keyword(arg='style', value=BoolOp(op=Or(), values=[Name(id='style', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_merged_style', ctx=Load())])), keyword(arg='color_depth', value=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load())), keyword(arg='style_transformation', value=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_running', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`True` when the application is currently active/running.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_is_running', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='future', ctx=Load()), attr='done', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_used_style_strings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of used style strings. This is helpful for debugging, and\n        for writing a new `Style`.\n        ')), Assign(targets=[Name(id='attrs_for_style', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderer', ctx=Load()), attr='_attrs_for_style', ctx=Load())), If(test=Name(id='attrs_for_style', ctx=Load()), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\s+'), Constant(value=' '), Name(id='style_str', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='style_str', ctx=Store()), iter=Call(func=Attribute(value=Name(id='attrs_for_style', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_CombinedRegistry', bases=[Name(id='KeyBindingsBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The `KeyBindings` of key bindings for a `Application`.\n    This merges the global key bindings with the one of the current user\n    control.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app', annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='_AppResult', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Store())], value=Name(id='app', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Window', ctx=Load()), Subscript(value=Name(id='frozenset', ctx=Load()), slice=Name(id='UIControl', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Name(id='KeyBindingsBase', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Not needed - this object is not going to be wrapped in another\n        KeyBindings object.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Hashable', ctx=Load())), FunctionDef(name='bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Not needed - this object is not going to be wrapped in another\n        KeyBindings object.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load())), FunctionDef(name='_create_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='current_window', annotation=Name(id='Window', ctx=Load())), arg(arg='other_controls', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='UIControl', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a `KeyBindings` object that merges the `KeyBindings` from the\n        `UIControl` with all the parent controls and the global key bindings.\n        ')), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='collected_containers', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='container', ctx=Store()), annotation=Name(id='Container', ctx=Load()), value=Name(id='current_window', ctx=Load()), simple=1), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='collected_containers', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='get_key_bindings', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='kb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='kb', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='container', ctx=Load()), attr='is_modal', ctx=Load()), args=[], keywords=[]), body=[Break()], orelse=[]), Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='get_parent', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[Assign(targets=[Name(id='container', ctx=Store())], value=Name(id='parent', ctx=Load()))])], orelse=[]), For(target=Name(id='c', ctx=Store()), iter=Call(func=Name(id='walk', ctx=Load()), args=[Name(id='container', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[NotIn()], comparators=[Name(id='collected_containers', ctx=Load())]), body=[Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get_key_bindings', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='kb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='GlobalOnlyKeyBindings', ctx=Load()), args=[Name(id='kb', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='key_bindings', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='key_bindings', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='ConditionalKeyBindings', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='_page_navigation_bindings', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='enable_page_navigation_bindings', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='_default_bindings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Subscript(value=Name(id='key_bindings', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Call(func=Name(id='merge_key_bindings', ctx=Load()), args=[Name(id='key_bindings', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='KeyBindingsBase', ctx=Load())), FunctionDef(name='_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='current_window', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_window', ctx=Load())), Assign(targets=[Name(id='other_controls', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='find_all_controls', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='current_window', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='other_controls', ctx=Load())], keywords=[])], ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_key_bindings', ctx=Load()), args=[Name(id='current_window', ctx=Load()), Name(id='other_controls', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='KeyBindingsBase', ctx=Load())), FunctionDef(name='get_bindings_for_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='keys', annotation=Name(id='KeysTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_key_bindings', ctx=Load()), attr='get_bindings_for_keys', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load())), FunctionDef(name='get_bindings_starting_with_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='keys', annotation=Name(id='KeysTuple', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_key_bindings', ctx=Load()), attr='get_bindings_starting_with_keys', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load()))], decorator_list=[]), AsyncFunctionDef(name='_do_wait_for_enter', args=arguments(posonlyargs=[], args=[arg(arg='wait_text', annotation=Name(id='AnyFormattedText', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Create a sub application to wait for the enter key press.\n    This has two advantages over using 'input'/'raw_input':\n    - This will share the same input/output I/O.\n    - This doesn't block the event loop.\n    ")), ImportFrom(module='prompt_toolkit.shortcuts', names=[alias(name='PromptSession')], level=0), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_ok', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='enter')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_ignore', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disallow typing.')), Pass()], decorator_list=[Call(func=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])], returns=Constant(value=None)), AnnAssign(target=Name(id='session', ctx=Store()), annotation=Subscript(value=Name(id='PromptSession', ctx=Load()), slice=Constant(value=None), ctx=Load()), value=Call(func=Name(id='PromptSession', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='wait_text', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load()))]), simple=1), Try(body=[Expr(value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Load()), attr='run_async', ctx=Load()), args=[], keywords=[])))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='attach_winch_signal_handler', args=arguments(posonlyargs=[], args=[arg(arg='handler', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Attach the given callback as a WINCH signal handler within the context\n    manager. Restore the original signal handler when done.\n\n    The `Application.run` method will register SIGWINCH, so that it will\n    properly repaint when the terminal window resizes. However, using\n    `run_in_terminal`, we can temporarily send an application to the\n    background, and run an other app in between, which will then overwrite the\n    SIGWINCH. This is why it's important to restore the handler when the app\n    terminates.\n    ")), Assign(targets=[Name(id='sigwinch', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='SIGWINCH'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='sigwinch', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='in_main_thread', ctx=Load()), args=[], keywords=[]))]), body=[Expr(value=Yield()), Return()], orelse=[]), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='previous_winch_handler', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='loop', ctx=Load()), Constant(value='_signal_handlers'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Name(id='sigwinch', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_signal_handler', ctx=Load()), args=[Name(id='sigwinch', ctx=Load()), Name(id='handler', ctx=Load())], keywords=[])), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='remove_signal_handler', ctx=Load()), args=[Name(id='sigwinch', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='previous_winch_handler', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='add_signal_handler', ctx=Load()), args=[Name(id='sigwinch', ctx=Load()), Attribute(value=Name(id='previous_winch_handler', ctx=Load()), attr='_callback', ctx=Load()), Starred(value=Attribute(value=Name(id='previous_winch_handler', ctx=Load()), attr='_args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])