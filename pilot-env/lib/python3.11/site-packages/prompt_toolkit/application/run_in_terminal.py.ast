Module(body=[Expr(value=Constant(value='\nTools for running functions on the terminal above the current application or prompt.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='asyncio', names=[alias(name='Future'), alias(name='ensure_future')], level=0), ImportFrom(module='contextlib', names=[alias(name='asynccontextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='AsyncGenerator'), alias(name='Awaitable'), alias(name='Callable'), alias(name='TypeVar')], level=0), ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='run_in_executor_with_context')], level=0), ImportFrom(module='current', names=[alias(name='get_app_or_none')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='run_in_terminal'), Constant(value='in_terminal')], ctx=Load())), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), FunctionDef(name='run_in_terminal', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='render_cli_done', annotation=Name(id='bool', ctx=Load())), arg(arg='in_executor', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Run function on the terminal above the current application or prompt.\n\n    What this does is first hiding the prompt, then running this callable\n    (which can safely output to the terminal), and then again rendering the\n    prompt which causes the output of this function to scroll above the\n    prompt.\n\n    ``func`` is supposed to be a synchronous function. If you need an\n    asynchronous version of this function, use the ``in_terminal`` context\n    manager directly.\n\n    :param func: The callable to execute.\n    :param render_cli_done: When True, render the interface in the\n            'Done' state first, then execute the function. If False,\n            erase the interface first.\n    :param in_executor: When True, run in executor. (Use this for long\n        blocking functions, when you don't want to block the event loop.)\n\n    :returns: A `Future`.\n    ")), AsyncFunctionDef(name='run', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AsyncWith(items=[withitem(context_expr=Call(func=Name(id='in_terminal', ctx=Load()), args=[], keywords=[keyword(arg='render_cli_done', value=Name(id='render_cli_done', ctx=Load()))]))], body=[If(test=Name(id='in_executor', ctx=Load()), body=[Return(value=Await(value=Call(func=Name(id='run_in_executor_with_context', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])))], orelse=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Name(id='_T', ctx=Load())), Return(value=Call(func=Name(id='ensure_future', ctx=Load()), args=[Call(func=Name(id='run', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Awaitable', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='in_terminal', args=arguments(posonlyargs=[], args=[arg(arg='render_cli_done', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Asynchronous context manager that suspends the current application and runs\n    the body in the terminal.\n\n    .. code::\n\n        async def f():\n            async with in_terminal():\n                call_some_function()\n                await call_some_async_function()\n    ')), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app_or_none', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='app', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='app', ctx=Load()), attr='_is_running', ctx=Load()))]), body=[Expr(value=Yield()), Return()], orelse=[]), Assign(targets=[Name(id='previous_run_in_terminal_f', ctx=Store())], value=Attribute(value=Name(id='app', ctx=Load()), attr='_running_in_terminal_f', ctx=Load())), AnnAssign(target=Name(id='new_run_in_terminal_f', ctx=Store()), annotation=Subscript(value=Name(id='Future', ctx=Load()), slice=Constant(value=None), ctx=Load()), value=Call(func=Name(id='Future', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='app', ctx=Load()), attr='_running_in_terminal_f', ctx=Store())], value=Name(id='new_run_in_terminal_f', ctx=Load())), If(test=Compare(left=Name(id='previous_run_in_terminal_f', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Await(value=Name(id='previous_run_in_terminal_f', ctx=Load())))], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='output', ctx=Load()), attr='responds_to_cpr', ctx=Load()), body=[Expr(value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='renderer', ctx=Load()), attr='wait_for_cpr_responses', ctx=Load()), args=[], keywords=[])))], orelse=[]), If(test=Name(id='render_cli_done', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[keyword(arg='render_as_done', value=Constant(value=True))]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='renderer', ctx=Load()), attr='erase', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='app', ctx=Load()), attr='_running_in_terminal', ctx=Store())], value=Constant(value=True)), Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='input', ctx=Load()), attr='cooked_mode', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Yield())])])], handlers=[], orelse=[], finalbody=[Try(body=[Assign(targets=[Attribute(value=Name(id='app', ctx=Load()), attr='_running_in_terminal', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='renderer', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='_request_absolute_cursor_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='_redraw', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='new_run_in_terminal_f', ctx=Load()), attr='set_result', ctx=Load()), args=[Constant(value=None)], keywords=[]))])])], decorator_list=[Name(id='asynccontextmanager', ctx=Load())], returns=Subscript(value=Name(id='AsyncGenerator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])