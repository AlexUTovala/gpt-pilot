Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='contextvars', names=[alias(name='ContextVar')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Generator')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.input.base', names=[alias(name='Input')], level=0), ImportFrom(module='prompt_toolkit.output.base', names=[alias(name='Output')], level=0), ImportFrom(module='application', names=[alias(name='Application')], level=1)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='AppSession'), Constant(value='get_app_session'), Constant(value='get_app'), Constant(value='get_app_or_none'), Constant(value='set_app'), Constant(value='create_app_session'), Constant(value='create_app_session_from_tty')], ctx=Load())), ClassDef(name='AppSession', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    An AppSession is an interactive session, usually connected to one terminal.\n    Within one such session, interaction with many applications can happen, one\n    after the other.\n\n    The input/output device is not supposed to change during one session.\n\n    Warning: Always use the `create_app_session` function to create an\n    instance, so that it gets activated correctly.\n\n    :param input: Use this as a default input for all applications\n        running in this session, unless an input is passed to the `Application`\n        explicitly.\n    :param output: Use this as a default output.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input', annotation=BinOp(left=Name(id='Input', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Store())], value=Name(id='input', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store())], value=Name(id='output', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='AppSession(app='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='input', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='prompt_toolkit.input.defaults', names=[alias(name='create_input')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Store())], value=Call(func=Name(id='create_input', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Input', ctx=Load())), FunctionDef(name='output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='prompt_toolkit.output.defaults', names=[alias(name='create_output')], level=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store())], value=Call(func=Name(id='create_output', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Output', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='_current_app_session', ctx=Store()), annotation=Subscript(value=Name(id='ContextVar', ctx=Load()), slice=Name(id='AppSession', ctx=Load()), ctx=Load()), value=Call(func=Name(id='ContextVar', ctx=Load()), args=[Constant(value='_current_app_session')], keywords=[keyword(arg='default', value=Call(func=Name(id='AppSession', ctx=Load()), args=[], keywords=[]))]), simple=1), FunctionDef(name='get_app_session', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='AppSession', ctx=Load())), FunctionDef(name='get_app', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Get the current active (running) Application.\n    An :class:`.Application` is active during the\n    :meth:`.Application.run_async` call.\n\n    We assume that there can only be one :class:`.Application` active at the\n    same time. There is only one terminal window, with only one stdin and\n    stdout. This makes the code significantly easier than passing around the\n    :class:`.Application` everywhere.\n\n    If no :class:`.Application` is running, then return by default a\n    :class:`.DummyApplication`. For practical reasons, we prefer to not raise\n    an exception. This way, we don't have to check all over the place whether\n    an actual `Application` was returned.\n\n    (For applications like pymux where we can have more than one `Application`,\n    we'll use a work-around to handle that.)\n    ")), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Load()))], orelse=[]), ImportFrom(module='dummy', names=[alias(name='DummyApplication')], level=1), Return(value=Call(func=Name(id='DummyApplication', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_app_or_none', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get the current active (running) Application, or return `None` if no\n    application is running.\n    ')), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Load()))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set_app', args=arguments(posonlyargs=[], args=[arg(arg='app', annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Context manager that sets the given :class:`.Application` active in an\n    `AppSession`.\n\n    This should only be called by the `Application` itself.\n    The application will automatically be active while its running. If you want\n    the application to be active in other threads/coroutines, where that's not\n    the case, use `contextvars.copy_context()`, or use `Application.context` to\n    run it in the appropriate context.\n    ")), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='previous_app', ctx=Store())], value=Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Load())), Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Store())], value=Name(id='app', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='app', ctx=Store())], value=Name(id='previous_app', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='create_app_session', args=arguments(posonlyargs=[], args=[arg(arg='input', annotation=BinOp(left=Name(id='Input', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Create a separate AppSession.\n\n    This is useful if there can be multiple individual `AppSession`s going on.\n    Like in the case of an Telnet/SSH server.\n    ')), If(test=Compare(left=Name(id='input', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='input', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='input', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Name(id='AppSession', ctx=Load()), args=[], keywords=[keyword(arg='input', value=Name(id='input', ctx=Load())), keyword(arg='output', value=Name(id='output', ctx=Load()))])), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='session', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='_current_app_session', ctx=Load()), attr='reset', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='AppSession', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='create_app_session_from_tty', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Create `AppSession` that always prefers the TTY input/output.\n\n    Even if `sys.stdin` and `sys.stdout` are connected to input/output pipes,\n    this will still use the terminal for interaction (because `sys.stderr` is\n    still connected to the terminal).\n\n    Usage::\n\n        from prompt_toolkit.shortcuts import prompt\n\n        with create_app_session_from_tty():\n            prompt('>')\n    ")), ImportFrom(module='prompt_toolkit.input.defaults', names=[alias(name='create_input')], level=0), ImportFrom(module='prompt_toolkit.output.defaults', names=[alias(name='create_output')], level=0), Assign(targets=[Name(id='input', ctx=Store())], value=Call(func=Name(id='create_input', ctx=Load()), args=[], keywords=[keyword(arg='always_prefer_tty', value=Constant(value=True))])), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='create_output', ctx=Load()), args=[], keywords=[keyword(arg='always_prefer_tty', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='create_app_session', ctx=Load()), args=[], keywords=[keyword(arg='input', value=Name(id='input', ctx=Load())), keyword(arg='output', value=Name(id='output', ctx=Load()))]), optional_vars=Name(id='app_session', ctx=Store()))], body=[Expr(value=Yield(value=Name(id='app_session', ctx=Load())))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='AppSession', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])