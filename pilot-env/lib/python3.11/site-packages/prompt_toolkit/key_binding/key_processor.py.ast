Module(body=[Expr(value=Constant(value='\nAn :class:`~.KeyProcessor` receives callbacks for the keystrokes parsed from\nthe input in the :class:`~prompt_toolkit.inputstream.InputStream` instance.\n\nThe `KeyProcessor` will according to the implemented keybindings call the\ncorrect callbacks when new key presses are feed through `feed`.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='weakref')]), ImportFrom(module='asyncio', names=[alias(name='Task'), alias(name='sleep')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Generator')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.enums', names=[alias(name='EditingMode')], level=0), ImportFrom(module='prompt_toolkit.filters.app', names=[alias(name='vi_navigation_mode')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='Event')], level=0), ImportFrom(module='key_bindings', names=[alias(name='Binding'), alias(name='KeyBindingsBase')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='KeyProcessor'), Constant(value='KeyPress'), Constant(value='KeyPressEvent')], ctx=Load())), ClassDef(name='KeyPress', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    :param key: A `Keys` instance or text (one character).\n    :param data: The received string on stdin. (Often vt100 escape codes.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=BinOp(left=Name(id='Keys', ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load()))), arg(arg='data', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])])), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='Keys', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Name(id='key', ctx=Load()), attr='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Name(id='key', ctx=Load()))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Name(id='data', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(key='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load()), conversion=114), Constant(value=', data='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='KeyPress', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='key', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='data', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Expr(value=Constant(value='\nHelper object to indicate flush operation in the KeyProcessor.\nNOTE: the implementation is very similar to the VT100 parser.\n')), Assign(targets=[Name(id='_Flush', ctx=Store())], value=Call(func=Name(id='KeyPress', ctx=Load()), args=[Constant(value='?')], keywords=[keyword(arg='data', value=Constant(value='_Flush'))])), ClassDef(name='KeyProcessor', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Statemachine that receives :class:`KeyPress` instances and according to the\n    key bindings in the given :class:`KeyBindings`, calls the matching handlers.\n\n    ::\n\n        p = KeyProcessor(key_bindings)\n\n        # Send keys into the processor.\n        p.feed(KeyPress(Keys.ControlX, '\x18'))\n        p.feed(KeyPress(Keys.ControlC, '\x03')\n\n        # Process all the keys in the queue.\n        p.process_keys()\n\n        # Now the ControlX-ControlC callback will be called if this sequence is\n        # registered in the key bindings.\n\n    :param key_bindings: `KeyBindingsBase` instance.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_bindings', annotation=Name(id='KeyBindingsBase', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='before_key_press', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='after_key_press', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_wait_task', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Task', ctx=Load()), slice=Constant(value=None), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_previous_key_sequence', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_previous_handler', ctx=Store()), annotation=BinOp(left=Name(id='Binding', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Store()), annotation=Subscript(value=Name(id='deque', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()), value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='key_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='arg', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_process_coroutine', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_process_coroutine', ctx=Load()), attr='send', ctx=Load()), args=[Constant(value=None)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_presses', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For a list of :class:`KeyPress` instances. Give the matching handlers\n        that would handle this.\n        ')), Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='key_presses', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=ListComp(elt=Name(id='b', ctx=Load()), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bindings', ctx=Load()), attr='get_bindings_for_keys', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load())), FunctionDef(name='_is_prefix_of_longer_match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_presses', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For a list of :class:`KeyPress` instances. Return True if there is any\n        handler that is bound to a suffix of this keys.\n        ')), Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='key_presses', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='filters', ctx=Store())], value=SetComp(elt=Attribute(value=Name(id='b', ctx=Load()), attr='filter', ctx=Load()), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bindings', ctx=Load()), attr='get_bindings_starting_with_keys', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='f', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='filters', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_process', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Coroutine implementing the key match algorithm. Key strokes are sent\n        into this generator, and it calls the appropriate handlers.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='key_buffer', ctx=Load())), Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=False)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='flush', ctx=Store())], value=Constant(value=False)), If(test=Name(id='retry', ctx=Load()), body=[Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='key', ctx=Store())], value=Yield()), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Is()], comparators=[Name(id='_Flush', ctx=Load())]), body=[Assign(targets=[Name(id='flush', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))])]), If(test=Name(id='buffer', ctx=Load()), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_matches', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[])), If(test=Name(id='flush', ctx=Load()), body=[Assign(targets=[Name(id='is_prefix_of_longer_match', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='is_prefix_of_longer_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_prefix_of_longer_match', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='eager_matches', ctx=Store())], value=ListComp(elt=Name(id='m', ctx=Load()), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='matches', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='eager', ctx=Load()), args=[], keywords=[])], is_async=0)])), If(test=Name(id='eager_matches', ctx=Load()), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Name(id='eager_matches', ctx=Load())), Assign(targets=[Name(id='is_prefix_of_longer_match', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_prefix_of_longer_match', ctx=Load())), Name(id='matches', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Subscript(value=Name(id='matches', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='key_sequence', value=Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(), ctx=Load()))])), Delete(targets=[Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_prefix_of_longer_match', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='matches', ctx=Load()))]), body=[Assign(targets=[Name(id='retry', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_matches', ctx=Load()), args=[Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())], keywords=[])), If(test=Name(id='matches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_handler', ctx=Load()), args=[Subscript(value=Name(id='matches', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='key_sequence', value=Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()))])), Delete(targets=[Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Del())]), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='found', ctx=Load())), body=[Delete(targets=[Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Del())])], orelse=[])], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='KeyPress', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_press', annotation=Name(id='KeyPress', ctx=Load())), arg(arg='first', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Add a new :class:`KeyPress` to the input queue.\n        (Don't forget to call `process_keys` in order to process the queue.)\n\n        :param first: If true, insert before everything else.\n        ")), If(test=Name(id='first', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='key_press', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key_press', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='feed_multiple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_presses', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), arg(arg='first', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        :param first: If true, insert before everything else.\n        ')), If(test=Name(id='first', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='extendleft', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='key_presses', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='key_presses', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='process_keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Process all the keys in the `input_queue`.\n        (To be called after `feed`.)\n\n        Note: because of the `feed`/`process_keys` separation, it is\n              possible to call `feed` from inside a key binding.\n              This function keeps looping until the queue is empty.\n        ')), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), FunctionDef(name='not_empty', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='app', ctx=Load()), attr='is_done', ctx=Load()), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='CPRResponse', ctx=Load())])], is_async=0)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_next', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='app', ctx=Load()), attr='is_done', ctx=Load()), body=[Assign(targets=[Name(id='cpr', ctx=Store())], value=Subscript(value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='CPRResponse', ctx=Load())])], is_async=0)]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='cpr', ctx=Load())], keywords=[])), Return(value=Name(id='cpr', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='popleft', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='KeyPress', ctx=Load())), Assign(targets=[Name(id='is_flush', ctx=Store())], value=Constant(value=False)), While(test=Call(func=Name(id='not_empty', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='key_press', ctx=Store())], value=Call(func=Name(id='get_next', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='is_flush', ctx=Store())], value=Compare(left=Name(id='key_press', ctx=Load()), ops=[Is()], comparators=[Name(id='_Flush', ctx=Load())])), Assign(targets=[Name(id='is_cpr', ctx=Store())], value=Compare(left=Attribute(value=Name(id='key_press', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='CPRResponse', ctx=Load())])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_flush', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='is_cpr', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='before_key_press', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_process_coroutine', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='key_press', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='empty_queue', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_flush', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='is_cpr', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='after_key_press', ctx=Load()), attr='fire', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='is_flush', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_start_timeout', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='empty_queue', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Empty the input queue. Return the unprocessed input.\n        ')), Assign(targets=[Name(id='key_presses', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='input_queue', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='key_presses', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='key_presses', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='k', ctx=Load()), attr='key', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='CPRResponse', ctx=Load())])], is_async=0)])), Return(value=Name(id='key_presses', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), FunctionDef(name='_call_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handler', annotation=Name(id='Binding', ctx=Load())), arg(arg='key_sequence', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='was_recording_emacs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='is_recording', ctx=Load())), Assign(targets=[Name(id='was_recording_vi', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='recording_register', ctx=Load())], keywords=[])), Assign(targets=[Name(id='was_temporary_navigation_mode', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='temporary_navigation_mode', ctx=Load())), Assign(targets=[Name(id='arg', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='arg', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='arg', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='event', ctx=Store())], value=Call(func=Name(id='KeyPressEvent', ctx=Load()), args=[Call(func=Attribute(value=Name(id='weakref', ctx=Load()), attr='ref', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[keyword(arg='arg', value=Name(id='arg', ctx=Load())), keyword(arg='key_sequence', value=Name(id='key_sequence', ctx=Load())), keyword(arg='previous_key_sequence', value=Attribute(value=Name(id='self', ctx=Load()), attr='_previous_key_sequence', ctx=Load())), keyword(arg='is_repeat', value=Compare(left=Name(id='handler', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_handler', ctx=Load())]))])), If(test=Call(func=Attribute(value=Name(id='handler', ctx=Load()), attr='save_before', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='save_to_undo_stack', ctx=Load()), args=[], keywords=[]))], orelse=[]), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='EditReadOnlyBuffer')], level=0), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='handler', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_vi_cursor_position', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='EditReadOnlyBuffer', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='output', ctx=Load()), attr='bell', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='was_temporary_navigation_mode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_leave_vi_temp_navigation_mode', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_key_sequence', ctx=Store())], value=Name(id='key_sequence', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_handler', ctx=Store())], value=Name(id='handler', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='handler', ctx=Load()), attr='record_in_macro', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='is_recording', ctx=Load()), Name(id='was_recording_emacs', ctx=Load())]), body=[Assign(targets=[Name(id='recording', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='current_recording', ctx=Load())), If(test=Compare(left=Name(id='recording', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='recording', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='key_sequence', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='recording_register', ctx=Load()), Name(id='was_recording_vi', ctx=Load())]), body=[For(target=Name(id='k', ctx=Store()), iter=Name(id='key_sequence', ctx=Load()), body=[AugAssign(target=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='current_recording', ctx=Store()), op=Add(), value=Attribute(value=Name(id='k', ctx=Load()), attr='data', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_fix_vi_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event', annotation=Name(id='KeyPressEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        After every command, make sure that if we are in Vi navigation mode, we\n        never put the cursor after the last character of a line. (Unless it's\n        an empty line.)\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load())), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='preferred_column', ctx=Store())], value=Attribute(value=Name(id='buff', ctx=Load()), attr='preferred_column', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='vi_navigation_mode', ctx=Load()), args=[], keywords=[]), Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='is_cursor_at_the_end_of_line', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='current_line', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='preferred_column', ctx=Store())], value=Name(id='preferred_column', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_leave_vi_temp_navigation_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event', annotation=Name(id='KeyPressEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        If we're in Vi temporary navigation (normal) mode, return to\n        insert/replace mode after executing one action.\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='app', ctx=Load()), attr='editing_mode', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EditingMode', ctx=Load()), attr='VI', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='operator_func', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='vi_state', ctx=Load()), attr='temporary_navigation_mode', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start_timeout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Start auto flush timeout. Similar to Vim's `timeoutlen` option.\n\n        Start a background coroutine with a timer. When this timeout expires\n        and no key was pressed in the meantime, we flush all data in the queue\n        and call the appropriate key binding handlers.\n        ")), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='timeout', ctx=Store())], value=Attribute(value=Name(id='app', ctx=Load()), attr='timeoutlen', ctx=Load())), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), AsyncFunctionDef(name='wait', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wait for timeout.')), Expr(value=Await(value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='key_buffer', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='flush_keys', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='flush_keys', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Flush keys.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='_Flush', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_keys', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_wait_task', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_wait_task', ctx=Load()), attr='cancel', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_flush_wait_task', ctx=Store())], value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='create_background_task', ctx=Load()), args=[Call(func=Name(id='wait', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='send_sigint', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Send SIGINT. Immediately call the SIGINT key handler.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='feed', ctx=Load()), args=[Call(func=Name(id='KeyPress', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Attribute(value=Name(id='Keys', ctx=Load()), attr='SIGINT', ctx=Load()))])], keywords=[keyword(arg='first', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_keys', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='KeyPressEvent', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Key press event, delivered to key bindings.\n\n    :param key_processor_ref: Weak reference to the `KeyProcessor`.\n    :param arg: Repetition argument.\n    :param key_sequence: List of `KeyPress` instances.\n    :param previouskey_sequence: Previous list of `KeyPress` instances.\n    :param is_repeat: True when the previous event was delivered to the same handler.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_processor_ref', annotation=Subscript(value=Attribute(value=Name(id='weakref', ctx=Load()), attr='ReferenceType', ctx=Load()), slice=Name(id='KeyProcessor', ctx=Load()), ctx=Load())), arg(arg='arg', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_sequence', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), arg(arg='previous_key_sequence', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='KeyPress', ctx=Load()), ctx=Load())), arg(arg='is_repeat', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key_processor_ref', ctx=Store())], value=Name(id='key_processor_ref', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_sequence', ctx=Store())], value=Name(id='key_sequence', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='previous_key_sequence', ctx=Store())], value=Name(id='previous_key_sequence', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_repeat', ctx=Store())], value=Name(id='is_repeat', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_arg', ctx=Store())], value=Name(id='arg', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='KeyPressEvent(arg={!r}, key_sequence={!r}, is_repeat={!r})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='arg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='key_sequence', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='is_repeat', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_sequence', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='data', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='key_processor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='processor', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_key_processor_ref', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='processor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='KeyProcessor was lost. This should not happen.')], keywords=[]))], orelse=[]), Return(value=Name(id='processor', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='KeyProcessor', ctx=Load())), FunctionDef(name='app', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The current `Application` object.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_app', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='current_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The current buffer.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='current_buffer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Buffer', ctx=Load())), FunctionDef(name='arg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Repetition argument.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_arg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_arg', ctx=Load()), Constant(value=1)])], keywords=[])), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1000000)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=1))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='arg_present', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True if repetition argument was explicitly provided.\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_arg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='append_to_arg_count', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add digit to the input argument.\n\n        :param data: the typed digit as string\n        ')), Assert(test=Compare(left=Name(id='data', ctx=Load()), ops=[In()], comparators=[Constant(value='-0123456789')])), Assign(targets=[Name(id='current', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_arg', ctx=Load())), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='current', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='current', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')])])), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='data', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='current', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='data', ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='current', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1)]))])]), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Store())], value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cli', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For backward-compatibility.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])