Module(body=[Expr(value=Constant(value='\nKey bindings which are also known by GNU Readline by the given names.\n\nSee: http://www.delorie.com/gnu/docs/readline/rlman_13.html\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='TypeVar'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.enums', names=[alias(name='EditingMode')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='Binding'), alias(name='key_binding')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPress'), alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl')], level=0), ImportFrom(module='prompt_toolkit.search', names=[alias(name='SearchDirection')], level=0), ImportFrom(module='prompt_toolkit.selection', names=[alias(name='PasteMode')], level=0), ImportFrom(module='completion', names=[alias(name='display_completions_like_readline'), alias(name='generate_completions')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='get_by_name')], ctx=Load())), Assign(targets=[Name(id='_Handler', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='KeyPressEvent', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_HandlerOrBinding', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='_Handler', ctx=Load()), Name(id='Binding', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[keyword(arg='bound', value=Name(id='_HandlerOrBinding', ctx=Load()))])), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), AnnAssign(target=Name(id='_readline_commands', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Binding', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='register', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Store handler in the `_readline_commands` dictionary.\n    ')), FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='handler', annotation=Name(id='_T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`handler` is a callable or Binding.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='handler', ctx=Load()), Name(id='Binding', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_readline_commands', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='handler', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='_readline_commands', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Name(id='key_binding', ctx=Load()), args=[], keywords=[]), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='_Handler', ctx=Load()), Name(id='handler', ctx=Load())], keywords=[])], keywords=[]))]), Return(value=Name(id='handler', ctx=Load()))], decorator_list=[], returns=Name(id='_T', ctx=Load())), Return(value=Name(id='decorator', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_T', ctx=Load())], ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_by_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the handler for the (Readline) command with the given name.\n    ')), Try(body=[Return(value=Subscript(value=Name(id='_readline_commands', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown Readline command: %r'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Binding', ctx=Load())), FunctionDef(name='beginning_of_buffer', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the start of the buffer.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store())], value=Constant(value=0))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='beginning-of-buffer')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='end_of_buffer', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the end of the buffer.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='buff', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='end-of-buffer')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='beginning_of_line', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the start of the current line.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[keyword(arg='after_whitespace', value=Constant(value=False))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='beginning-of-line')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the end of the line.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='end-of-line')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='forward_char', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move forward a character.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_right_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='forward-char')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='backward_char', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move back a character.')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_left_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='backward-char')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='forward_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move forward to the end of the next word. Words are composed of letters and\n    digits.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), If(test=Name(id='pos', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Name(id='pos', ctx=Load()))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='forward-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='backward_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move back to the start of the current or previous word. Words are composed\n    of letters and digits.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_previous_word_beginning', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), If(test=Name(id='pos', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Name(id='pos', ctx=Load()))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='backward-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='clear_screen', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Clear the screen and redraw everything at the top of the screen.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='renderer', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='clear-screen')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='redraw_current_line', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Refresh the current line.\n    (Readline defines this command, but prompt-toolkit doesn't have it.)\n    ")), Pass()], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='redraw-current-line')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='accept_line', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Accept the line regardless of where the cursor is.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='validate_and_handle', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='accept-line')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='previous_history', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move `back` through the history list, fetching the previous command.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='history_backward', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='previous-history')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='next_history', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move `forward` through the history list, fetching the next command.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='history_forward', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='next-history')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='beginning_of_history', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the first line in the history.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='go_to_history', ctx=Load()), args=[Constant(value=0)], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='beginning-of-history')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='end_of_history', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move to the end of the input history, i.e., the line currently being entered.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='history_forward', ctx=Load()), args=[], keywords=[keyword(arg='count', value=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=100)))])), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='go_to_history', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='buff', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='end-of-history')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='reverse_search_history', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Search backward starting at the current line and moving `up` through\n    the history as necessary. This is an incremental search.\n    ')), Assign(targets=[Name(id='control', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_control', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='control', ctx=Load()), Name(id='BufferControl', ctx=Load())], keywords=[]), Attribute(value=Name(id='control', ctx=Load()), attr='search_buffer_control', ctx=Load())]), body=[Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='current_search_state', ctx=Load()), attr='direction', ctx=Store())], value=Attribute(value=Name(id='SearchDirection', ctx=Load()), attr='BACKWARD', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_control', ctx=Store())], value=Attribute(value=Name(id='control', ctx=Load()), attr='search_buffer_control', ctx=Load()))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='reverse-search-history')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='end_of_file', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Exit.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='end-of-file')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='delete_char', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Delete character before the cursor.\n    ')), Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Name(id='deleted', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='output', ctx=Load()), attr='bell', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='delete-char')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='backward_delete_char', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Delete the character behind the cursor.\n    ')), If(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())))]))], orelse=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))]), If(test=UnaryOp(op=Not(), operand=Name(id='deleted', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='output', ctx=Load()), attr='bell', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='backward-delete-char')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='self_insert', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Insert yourself.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='insert_text', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='self-insert')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='transpose_chars', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Emulate Emacs transpose-char behavior: at the beginning of the buffer,\n    do nothing.  At the end of a line or buffer, swap the characters before\n    the cursor.  Otherwise, move the cursor right, and then swap the\n    characters before the cursor.\n    ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Attribute(value=Name(id='b', ctx=Load()), attr='cursor_position', ctx=Load())), If(test=Compare(left=Name(id='p', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='p', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='text', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Attribute(value=Name(id='b', ctx=Load()), attr='text', ctx=Load()), slice=Name(id='p', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='swap_characters_before_cursor', ctx=Load()), args=[], keywords=[]))], orelse=[AugAssign(target=Attribute(value=Name(id='b', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='b', ctx=Load()), attr='document', ctx=Load()), attr='get_cursor_right_position', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='swap_characters_before_cursor', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='transpose-chars')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='uppercase_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Uppercase the current (or following) word.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(upper=Name(id='pos', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='insert_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='overwrite', value=Constant(value=True))]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='uppercase-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='downcase_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Lowercase the current (or following) word.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(upper=Name(id='pos', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='insert_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='overwrite', value=Constant(value=True))]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='downcase-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='capitalize_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Capitalize the current (or following) word.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(upper=Name(id='pos', ctx=Load())), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='insert_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='overwrite', value=Constant(value=True))]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='capitalize-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='quoted_insert', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Add the next character typed to the line verbatim. This is how to insert\n    key sequences like C-q, for example.\n    ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='quoted_insert', ctx=Store())], value=Constant(value=True))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='quoted-insert')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='kill_line', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Kill the text from the cursor to the end of the line.\n\n    If we are at the end of the line, this should remove the newline.\n    (That way, it is possible to delete multiple lines by executing this\n    command multiple times.)\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[])))]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='current_char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[]))]))])]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_text', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='kill-line')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='kill_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Kill from point to the end of the current word, or if between words, to the\n    end of the next word. Word boundaries are the same as forward-word.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), If(test=Name(id='pos', ctx=Load()), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='pos', ctx=Load()))])), If(test=Attribute(value=Name(id='event', ctx=Load()), attr='is_repeat', ctx=Load()), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='get_data', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load()), op=Add(), right=Name(id='deleted', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_text', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='kill-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='unix_word_rubout', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n    Kill the word behind point, using whitespace as a word boundary.\n    Usually bound to ControlW.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_start_of_previous_word', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())), keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))])), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Load())))], orelse=[]), If(test=Name(id='pos', ctx=Load()), body=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='pos', ctx=Load())))])), If(test=Attribute(value=Name(id='event', ctx=Load()), attr='is_repeat', ctx=Load()), body=[AugAssign(target=Name(id='deleted', ctx=Store()), op=Add(), value=Attribute(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='get_data', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_text', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='output', ctx=Load()), attr='bell', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='unix-word-rubout')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='backward_kill_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Kills the word before point, using "not a letter nor a digit" as a word boundary.\n    Usually bound to M-Del or M-Backspace.\n    ')), Expr(value=Call(func=Name(id='unix_word_rubout', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[keyword(arg='WORD', value=Constant(value=False))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='backward-kill-word')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='delete_horizontal_space', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Delete all spaces and tabs around point.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load())), Assign(targets=[Name(id='text_after_cursor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text_after_cursor', ctx=Load())), Assign(targets=[Name(id='delete_before', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='text_before_cursor', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\t ')], keywords=[])], keywords=[]))), Assign(targets=[Name(id='delete_after', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text_after_cursor', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='text_after_cursor', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='\t ')], keywords=[])], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='delete_before', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='delete_after', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='delete-horizontal-space')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='unix_line_discard', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Kill backward from the cursor to the beginning of the current line.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position_col', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Constant(value=1))]))], orelse=[Assign(targets=[Name(id='deleted', ctx=Store())], value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='delete_before_cursor', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[])))])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_text', ctx=Load()), args=[Name(id='deleted', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='unix-line-discard')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='yank', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Paste before cursor.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='paste_clipboard_data', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='get_data', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())), keyword(arg='paste_mode', value=Attribute(value=Name(id='PasteMode', ctx=Load()), attr='EMACS', ctx=Load()))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='yank')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='yank_nth_arg', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Insert the first argument of the previous command. With an argument, insert\n    the nth word from the previous command (start counting at 0).\n    ')), Assign(targets=[Name(id='n', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='event', ctx=Load()), attr='arg_present', ctx=Load()), body=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()), orelse=Constant(value=None))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='yank_nth_arg', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='yank-nth-arg')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='yank_last_arg', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Like `yank_nth_arg`, but if no argument has been given, yank the last word\n    of each line.\n    ')), Assign(targets=[Name(id='n', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='event', ctx=Load()), attr='arg_present', ctx=Load()), body=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()), orelse=Constant(value=None))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='yank_last_arg', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='yank-last-arg')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='yank_pop', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Rotate the kill ring, and yank the new top. Only works following yank or\n    yank-pop.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='doc_before_paste', ctx=Store())], value=Attribute(value=Name(id='buff', ctx=Load()), attr='document_before_paste', ctx=Load())), Assign(targets=[Name(id='clipboard', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load())), If(test=Compare(left=Name(id='doc_before_paste', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Store())], value=Name(id='doc_before_paste', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='clipboard', ctx=Load()), attr='rotate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='paste_clipboard_data', ctx=Load()), args=[Call(func=Attribute(value=Name(id='clipboard', ctx=Load()), attr='get_data', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='paste_mode', value=Attribute(value=Name(id='PasteMode', ctx=Load()), attr='EMACS', ctx=Load()))]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='yank-pop')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='complete', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Attempt to perform completion.\n    ')), Expr(value=Call(func=Name(id='display_completions_like_readline', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='complete')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='menu_complete', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Generate completions, or go to the next completion. (This is the default\n    way of completing input in prompt_toolkit.)\n    ')), Expr(value=Call(func=Name(id='generate_completions', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='menu-complete')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='menu_complete_backward', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Move backward through the list of possible completions.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='complete_previous', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='menu-complete-backward')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='start_kbd_macro', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Begin saving the characters typed into the current keyboard macro.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='start_macro', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='start-kbd-macro')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='end_kbd_macro', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Stop saving the characters typed into the current keyboard macro and save\n    the definition.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='end_macro', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='end-kbd-macro')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='call_last_kbd_macro', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Re-execute the last keyboard macro defined, by making the characters in the\n    macro appear as if typed at the keyboard.\n\n    Notice that we pass `record_in_macro=False`. This ensures that the 'c-x e'\n    key sequence doesn't appear in the recording itself. This function inserts\n    the body of the called macro back into the KeyProcessor, so these keys will\n    be added later on to the macro of their handlers have `record_in_macro=True`.\n    ")), Assign(targets=[Name(id='macro', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='macro', ctx=Load())), If(test=Name(id='macro', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed_multiple', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[keyword(arg='first', value=Constant(value=True))]))], orelse=[])], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='call-last-kbd-macro')], keywords=[]), Call(func=Name(id='key_binding', ctx=Load()), args=[], keywords=[keyword(arg='record_in_macro', value=Constant(value=False))])], returns=Constant(value=None)), FunctionDef(name='print_last_kbd_macro', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Print the last keyboard macro.\n    ')), FunctionDef(name='print_macro', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='macro', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='emacs_state', ctx=Load()), attr='macro', ctx=Load())), If(test=Name(id='macro', ctx=Load()), body=[For(target=Name(id='k', ctx=Store()), iter=Name(id='macro', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), ImportFrom(module='prompt_toolkit.application.run_in_terminal', names=[alias(name='run_in_terminal')], level=0), Expr(value=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Name(id='print_macro', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='print-last-kbd-macro')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='undo', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Incremental undo.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='undo', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='undo')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='insert_comment', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Without numeric argument, comment all lines.\n    With numeric argument, uncomment all lines.\n    In any case accept the input.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[FunctionDef(name='change', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), body=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), orelse=Name(id='line', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))], orelse=[FunctionDef(name='change', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='#'), op=Add(), right=Name(id='line', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='change', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='text', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), keyword(arg='cursor_position', value=Constant(value=0))])), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='validate_and_handle', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='insert-comment')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='vi_editing_mode', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Switch to Vi editing mode.\n    ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='editing_mode', ctx=Store())], value=Attribute(value=Name(id='EditingMode', ctx=Load()), attr='VI', ctx=Load()))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='vi-editing-mode')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='emacs_editing_mode', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Switch to Emacs editing mode.\n    ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='editing_mode', ctx=Store())], value=Attribute(value=Name(id='EditingMode', ctx=Load()), attr='EMACS', ctx=Load()))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='emacs-editing-mode')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='prefix_meta', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Metafy the next character typed. This is for keyboards without a meta key.\n\n    Sometimes people also want to bind other keys to Meta, e.g. 'jj'::\n\n        key_bindings.add_key_binding('j', 'j', filter=ViInsertMode())(prefix_meta)\n    ")), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed', ctx=Load()), args=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Escape', ctx=Load())], keywords=[])], keywords=[keyword(arg='first', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='prefix-meta')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='operate_and_get_next', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Accept the current line for execution and fetch the next line relative to\n    the current line from the history for editing.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='new_index', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='buff', ctx=Load()), attr='working_index', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='validate_and_handle', ctx=Load()), args=[], keywords=[])), FunctionDef(name='set_working_index', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='new_index', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='buff', ctx=Load()), attr='_working_lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='buff', ctx=Load()), attr='working_index', ctx=Store())], value=Name(id='new_index', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='pre_run_callables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='set_working_index', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='operate-and-get-next')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='edit_and_execute', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Invoke an editor on the current command line, and accept the result.\n    ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='open_in_editor', ctx=Load()), args=[], keywords=[keyword(arg='validate_and_handle', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='register', ctx=Load()), args=[Constant(value='edit-and-execute-command')], keywords=[])], returns=Constant(value=None))], type_ignores=[])