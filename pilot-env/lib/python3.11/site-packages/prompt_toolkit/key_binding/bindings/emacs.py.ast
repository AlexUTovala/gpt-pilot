Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer'), alias(name='indent'), alias(name='unindent')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='CompleteEvent')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='emacs_insert_mode'), alias(name='emacs_mode'), alias(name='has_arg'), alias(name='has_selection'), alias(name='in_paste_mode'), alias(name='is_multiline'), alias(name='is_read_only'), alias(name='shift_selection_mode'), alias(name='vi_search_direction_reversed')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='Binding')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.selection', names=[alias(name='SelectionType')], level=0), ImportFrom(module='key_bindings', names=[alias(name='ConditionalKeyBindings'), alias(name='KeyBindings'), alias(name='KeyBindingsBase')], level=2), ImportFrom(module='named_commands', names=[alias(name='get_by_name')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='load_emacs_bindings'), Constant(value='load_emacs_search_bindings'), Constant(value='load_emacs_shift_selection_bindings')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), FunctionDef(name='load_emacs_bindings', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Some e-macs extensions.\n    ')), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load())), Assign(targets=[Name(id='insert_mode', ctx=Store())], value=Name(id='emacs_insert_mode', ctx=Load())), FunctionDef(name='_esc', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        By default, ignore escape key.\n\n        (If we don't put this here, and Esc is followed by a key which sequence\n        is not handled, we'll insert an Escape character in the input stream.\n        Something we don't want and happens to easily in emacs mode.\n        Further, people can always use ControlQ to do a quoted insert.)\n        ")), Pass()], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape')], keywords=[])], returns=Constant(value=None)), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-a')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='beginning-of-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-b')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-delete')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='kill-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-e')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='end-of-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-f')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='forward-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-left')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-right')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='forward-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='r'), Constant(value='y')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-y')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='b')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='c')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='capitalize-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='d')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='kill-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='f')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='forward-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='l')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='downcase-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='u')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='uppercase-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='y')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank-pop')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='backspace')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-kill-word')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='\\')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='delete-horizontal-space')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-home')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='beginning-of-buffer')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-end')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='end-of-buffer')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-_')], keywords=[keyword(arg='save_before', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=False))), keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='undo')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='c-u')], keywords=[keyword(arg='save_before', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=False))), keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='undo')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='<')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='beginning-of-history')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='>')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='end-of-history')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='.')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank-last-arg')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='_')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank-last-arg')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='c-y')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank-nth-arg')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='#')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='insert-comment')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-o')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='operate-and-get-next')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-q')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='quoted-insert')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='(')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='start-kbd-macro')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value=')')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='end-kbd-macro')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='e')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='call-last-kbd-macro')], keywords=[])], keywords=[])), FunctionDef(name='_next', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Next line.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_down', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-n')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_prev', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Previous line.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_up', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-p')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='handle_digit', args=arguments(posonlyargs=[], args=[arg(arg='c', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle input of arguments.\n        The first number needs to be preceded by escape.\n        ')), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='append_to_arg_count', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[keyword(arg='filter', value=Name(id='has_arg', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Name(id='c', ctx=Load())], keywords=[])], returns=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), For(target=Name(id='c', ctx=Store()), iter=Constant(value='0123456789'), body=[Expr(value=Call(func=Name(id='handle_digit', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='_meta_dash', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='')), If(test=Compare(left=Attribute(value=Name(id='event', ctx=Load()), attr='_arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='event', ctx=Load()), attr='append_to_arg_count', ctx=Load()), args=[Constant(value='-')], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='-')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_arg', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_dash', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        When '-' is typed again, after exactly '-' has been given as an\n        argument, ignore this.\n        ")), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Store())], value=Constant(value='-'))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='-')], keywords=[keyword(arg='filter', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='key_processor', ctx=Load()), attr='arg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]))], keywords=[]))])], returns=Constant(value=None)), FunctionDef(name='is_returnable', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='is_returnable', ctx=Load()))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='enter')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='insert_mode', ctx=Load()), op=BitAnd(), right=Name(id='is_returnable', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='accept-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='enter')], keywords=[keyword(arg='filter', value=BinOp(left=BinOp(left=Name(id='insert_mode', ctx=Load()), op=BitAnd(), right=Name(id='is_returnable', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_multiline', ctx=Load()))))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='accept-line')], keywords=[])], keywords=[])), FunctionDef(name='character_search', args=arguments(posonlyargs=[], args=[arg(arg='buff', annotation=Name(id='Buffer', ctx=Load())), arg(arg='char', annotation=Name(id='str', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find_backwards', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[keyword(arg='in_current_line', value=Constant(value=True)), keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load())))]))], orelse=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[keyword(arg='in_current_line', value=Constant(value=True)), keyword(arg='count', value=Name(id='count', ctx=Load()))]))]), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Name(id='match', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_goto_char', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When Ctl-] + a character is pressed. go to that character.')), Expr(value=Call(func=Name(id='character_search', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load()), Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-]'), Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_goto_char_backwards', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like Ctl-], but backwards.')), Expr(value=Call(func=Name(id='character_search', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load()), UnaryOp(op=USub(), operand=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='c-]'), Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_prev_sentence', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Previous sentence.'))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='a')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_end_of_sentence', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move to end of sentence.'))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='e')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_swap_characters', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Swap the last two words before the cursor.\n        '))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='t')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_insert_all_completions', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        `meta-*`: Insert all possible completions of the preceding text.\n        ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='complete_event', ctx=Store())], value=Call(func=Name(id='CompleteEvent', ctx=Load()), args=[], keywords=[keyword(arg='text_inserted', value=Constant(value=False)), keyword(arg='completion_requested', value=Constant(value=True))])), Assign(targets=[Name(id='completions', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='completer', ctx=Load()), attr='get_completions', ctx=Load()), args=[Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), Name(id='complete_event', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='text_to_insert', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='text', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='completions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='text_to_insert', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='*')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_toggle_start_end', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Move cursor back and forth between the start and end of the current\n        line.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='is_cursor_at_the_end_of_line', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[keyword(arg='after_whitespace', value=Constant(value=False))]))], orelse=[AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_line_position', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='c-x')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_start_selection', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start of the selection (if the current buffer is not empty).\n        ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Attribute(value=Name(id='buff', ctx=Load()), attr='text', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='start_selection', ctx=Load()), args=[], keywords=[keyword(arg='selection_type', value=Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load()))]))], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-@')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_cancel', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Control + G: Cancel completion menu and validation state.\n        ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='complete_state', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='validation_error', ctx=Store())], value=Constant(value=None))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-g')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_cancel_selection', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cancel selection.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='exit_selection', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-g')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_cut', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cut selected text.\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_data', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-w')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x'), Constant(value='r'), Constant(value='k')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_copy', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Copy selected text.\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='copy_selection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_data', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='w')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_start_of_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cursor to start of previous word.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='find_previous_word_beginning', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]), Constant(value=0)]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='left')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_start_next_word', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cursor to start of next word.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='find_next_word_beginning', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]), Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='get_end_of_document_position', ctx=Load()), args=[], keywords=[])]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='right')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_complete', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        M-/: Complete.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Attribute(value=Name(id='b', ctx=Load()), attr='complete_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='complete_next', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='start_completion', ctx=Load()), args=[], keywords=[keyword(arg='select_first', value=Constant(value=True))]))])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='/')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_indent', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Indent selected text.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), AugAssign(target=Attribute(value=Name(id='buffer', ctx=Load()), attr='cursor_position', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='get_start_of_line_position', ctx=Load()), args=[], keywords=[keyword(arg='after_whitespace', value=Constant(value=True))])), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='selection_range', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='to', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='to', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='indent', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='from_', ctx=Load()), BinOp(left=Name(id='to', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-c'), Constant(value='>')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_unindent', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Unindent selected text.\n        ')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='selection_range', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='to', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='buffer', ctx=Load()), attr='document', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='to', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='unindent', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='from_', ctx=Load()), BinOp(left=Name(id='to', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-c'), Constant(value='<')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), Return(value=Call(func=Name(id='ConditionalKeyBindings', ctx=Load()), args=[Name(id='key_bindings', ctx=Load()), Name(id='emacs_mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='KeyBindingsBase', ctx=Load())), FunctionDef(name='load_emacs_search_bindings', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load())), ImportFrom(names=[alias(name='search')], level=1), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-r')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_reverse_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_forward_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-c')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='abort_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-g')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='abort_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-r')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='reverse_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='forward_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='up')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='reverse_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='down')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='forward_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='enter')], keywords=[]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='accept_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape')], keywords=[keyword(arg='eager', value=Constant(value=True))]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='accept_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='?')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='is_read_only', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='vi_search_direction_reversed', ctx=Load()))))]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_reverse_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='/')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='is_read_only', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='vi_search_direction_reversed', ctx=Load()))))]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_forward_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='?')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='is_read_only', ctx=Load()), op=BitAnd(), right=Name(id='vi_search_direction_reversed', ctx=Load())))]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_forward_incremental_search', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='/')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='is_read_only', ctx=Load()), op=BitAnd(), right=Name(id='vi_search_direction_reversed', ctx=Load())))]), args=[Attribute(value=Name(id='search', ctx=Load()), attr='start_reverse_incremental_search', ctx=Load())], keywords=[])), FunctionDef(name='_jump_next', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Jump to next match.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='apply_search', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='current_search_state', ctx=Load())], keywords=[keyword(arg='include_current_position', value=Constant(value=False)), keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='n')], keywords=[keyword(arg='filter', value=Name(id='is_read_only', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_jump_prev', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Jump to previous match.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='apply_search', ctx=Load()), args=[UnaryOp(op=Invert(), operand=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='current_search_state', ctx=Load()))], keywords=[keyword(arg='include_current_position', value=Constant(value=False)), keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='N')], keywords=[keyword(arg='filter', value=Name(id='is_read_only', ctx=Load()))])], returns=Constant(value=None)), Return(value=Call(func=Name(id='ConditionalKeyBindings', ctx=Load()), args=[Name(id='key_bindings', ctx=Load()), Name(id='emacs_mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='KeyBindingsBase', ctx=Load())), FunctionDef(name='load_emacs_shift_selection_bindings', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Bindings to select text with shift + cursor movements\n    ')), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load())), FunctionDef(name='unshift_move', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Used for the shift selection mode. When called with\n        a shift + movement key press event, moves the cursor\n        as if shift is not pressed.\n        ')), Assign(targets=[Name(id='key', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='event', ctx=Load()), attr='key_sequence', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='key', ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftUp', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_up', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), Return()], orelse=[]), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftDown', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_down', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))])), Return()], orelse=[]), AnnAssign(target=Name(id='key_to_command', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[BinOp(left=Name(id='Keys', ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load())), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftLeft', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftRight', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftHome', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ShiftEnd', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftLeft', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftRight', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftHome', ctx=Load()), Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlShiftEnd', ctx=Load())], values=[Constant(value='backward-char'), Constant(value='forward-char'), Constant(value='beginning-of-line'), Constant(value='end-of-line'), Constant(value='backward-word'), Constant(value='forward-word'), Constant(value='beginning-of-buffer'), Constant(value='end-of-buffer')]), simple=1), Try(body=[Assign(targets=[Name(id='binding', ctx=Store())], value=Call(func=Name(id='get_by_name', ctx=Load()), args=[Subscript(value=Name(id='key_to_command', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='binding', ctx=Load()), Name(id='Binding', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='binding', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[])], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start_selection', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start selection with shift + movement.\n        ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Attribute(value=Name(id='buff', ctx=Load()), attr='text', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='start_selection', ctx=Load()), args=[], keywords=[keyword(arg='selection_type', value=Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='buff', ctx=Load()), attr='selection_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='selection_state', ctx=Load()), attr='enter_shift_mode', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='original_position', ctx=Store())], value=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Load())), Expr(value=Call(func=Name(id='unshift_move', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Eq()], comparators=[Name(id='original_position', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='exit_selection', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-left')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-right')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-up')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-down')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-home')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-end')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-left')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-right')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-home')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-end')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_extend_selection', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Extend the selection\n        ')), Expr(value=Call(func=Name(id='unshift_move', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[])), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='buff', ctx=Load()), attr='selection_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='buff', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='selection_state', ctx=Load()), attr='original_cursor_position', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='exit_selection', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-left')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-right')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-up')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-down')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-home')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-end')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-left')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-right')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-home')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-end')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_replace_selection', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Replace selection by what is typed\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='self-insert')], keywords=[]), attr='call', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_newline', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A newline replaces the selection\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='newline', ctx=Load()), args=[], keywords=[keyword(arg='copy_margin', value=UnaryOp(op=Not(), operand=Call(func=Name(id='in_paste_mode', ctx=Load()), args=[], keywords=[])))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='enter')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='shift_selection_mode', ctx=Load()), op=BitAnd(), right=Name(id='is_multiline', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_delete', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Delete selection.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='backspace')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_yank', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        In shift selection mode, yanking (pasting) replace the selection.\n        ')), Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), If(test=Attribute(value=Name(id='buff', ctx=Load()), attr='selection_state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='yank')], keywords=[]), attr='call', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-y')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_cancel', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Cancel selection.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='exit_selection', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='key_press', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='event', ctx=Load()), attr='key_sequence', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='key_press', ctx=Load())], keywords=[keyword(arg='first', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='left')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='right')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='up')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='down')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='home')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='end')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-left')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-right')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-home')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-end')], keywords=[keyword(arg='filter', value=Name(id='shift_selection_mode', ctx=Load()))])], returns=Constant(value=None)), Return(value=Call(func=Name(id='ConditionalKeyBindings', ctx=Load()), args=[Name(id='key_bindings', ctx=Load()), Name(id='emacs_mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='KeyBindingsBase', ctx=Load()))], type_ignores=[])