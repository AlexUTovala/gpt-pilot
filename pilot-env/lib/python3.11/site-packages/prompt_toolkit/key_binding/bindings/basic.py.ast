Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='emacs_insert_mode'), alias(name='has_selection'), alias(name='in_paste_mode'), alias(name='is_multiline'), alias(name='vi_insert_mode')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPress'), alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='key_bindings', names=[alias(name='KeyBindings')], level=2), ImportFrom(module='named_commands', names=[alias(name='get_by_name')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='load_basic_bindings')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), FunctionDef(name='if_no_repeat', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Callable that returns True when the previous event was delivered to\n    another handler.')), Return(value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='event', ctx=Load()), attr='is_repeat', ctx=Load())))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='load_basic_bindings', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='insert_mode', ctx=Store())], value=BinOp(left=Name(id='vi_insert_mode', ctx=Load()), op=BitOr(), right=Name(id='emacs_insert_mode', ctx=Load()))), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load())), FunctionDef(name='_ignore', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        First, for any of these keys, Don't do anything by default. Also don't\n        catch them in the 'Any' handler which will insert them as data.\n\n        If people want to insert these characters as a literal, they can always\n        do by doing a quoted insert. (ControlQ in emacs mode, ControlV in Vi\n        mode.)\n        ")), Pass()], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-a')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-b')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-c')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-d')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-e')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-f')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-g')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-h')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-i')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-j')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-k')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-l')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-m')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-n')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-o')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-p')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-q')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-r')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-t')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-u')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-v')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-w')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-x')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-y')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-z')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f1')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f2')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f3')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f4')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f5')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f6')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f7')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f8')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f9')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f10')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f11')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f12')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f13')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f14')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f15')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f16')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f17')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f18')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f19')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f20')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f21')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f22')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f23')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='f24')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-@')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-\\')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-]')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-^')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-_')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='backspace')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='up')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='down')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='right')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='left')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-up')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-down')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-right')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-left')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='home')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='end')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-home')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-end')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='delete')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-delete')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-delete')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='pageup')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='pagedown')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-tab')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='tab')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-left')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-right')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-home')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-s-end')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-left')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-right')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-up')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-down')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-home')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-end')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='insert')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-insert')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-insert')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='<sigint>')], keywords=[]), Call(func=Name(id='handle', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Ignore', ctx=Load())], keywords=[])], returns=Constant(value=None)), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='home')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='beginning-of-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='end')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='end-of-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='left')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='right')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='forward-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-up')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='previous-history')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-down')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='next-history')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-l')], keywords=[]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='clear-screen')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-k')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='kill-line')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-u')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='unix-line-discard')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='backspace')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load())), keyword(arg='save_before', value=Name(id='if_no_repeat', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='backward-delete-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='delete')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load())), keyword(arg='save_before', value=Name(id='if_no_repeat', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='delete-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-delete')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load())), keyword(arg='save_before', value=Name(id='if_no_repeat', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='delete-char')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load())), keyword(arg='save_before', value=Name(id='if_no_repeat', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='self-insert')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-t')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='transpose-chars')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-i')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='menu-complete')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='s-tab')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='menu-complete-backward')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-w')], keywords=[keyword(arg='filter', value=Name(id='insert_mode', ctx=Load()))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='unix-word-rubout')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='pageup')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='previous-history')], keywords=[])], keywords=[])), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='pagedown')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_selection', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='next-history')], keywords=[])], keywords=[])), FunctionDef(name='has_text_before_cursor', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='current_buffer', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Expr(value=Call(func=Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-d')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='has_text_before_cursor', ctx=Load()), op=BitAnd(), right=Name(id='insert_mode', ctx=Load())))]), args=[Call(func=Name(id='get_by_name', ctx=Load()), args=[Constant(value='delete-char')], keywords=[])], keywords=[])), FunctionDef(name='_newline', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Newline (in case of multiline input.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='newline', ctx=Load()), args=[], keywords=[keyword(arg='copy_margin', value=UnaryOp(op=Not(), operand=Call(func=Name(id='in_paste_mode', ctx=Load()), args=[], keywords=[])))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='enter')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='insert_mode', ctx=Load()), op=BitAnd(), right=Name(id='is_multiline', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_newline2', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        By default, handle \\n as if it were a \\r (enter).\n        (It appears that some terminals send \\n instead of \\r when pressing\n        enter. - at least the Linux subsystem for Windows.)\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='key_processor', ctx=Load()), attr='feed', ctx=Load()), args=[Call(func=Name(id='KeyPress', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='ControlM', ctx=Load()), Constant(value='\r')], keywords=[])], keywords=[keyword(arg='first', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-j')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_go_up', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_up', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='up')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_go_down', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='auto_down', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Attribute(value=Name(id='event', ctx=Load()), attr='arg', ctx=Load()))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='down')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_cut', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='cut_selection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='clipboard', ctx=Load()), attr='set_data', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='delete')], keywords=[keyword(arg='filter', value=Name(id='has_selection', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_insert_ctrl_z', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        By default, control-Z should literally insert Ctrl-Z.\n        (Ansi Ctrl-Z, code 26 in MSDOS means End-Of-File.\n        In a Python REPL for instance, it's possible to type\n        Control-Z followed by enter to quit.)\n\n        When the system bindings are loaded and suspend-to-background is\n        supported, that will override this binding.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='insert_text', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-z')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_paste', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Pasting from clipboard.\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r\n'), Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r'), Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='insert_text', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='BracketedPaste', ctx=Load())], keywords=[])], returns=Constant(value=None)), FunctionDef(name='in_quoted_insert', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='quoted_insert', ctx=Load()))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_insert_text', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Handle quoted insert.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load()), attr='insert_text', ctx=Load()), args=[Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load())], keywords=[keyword(arg='overwrite', value=Constant(value=False))])), Assign(targets=[Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='quoted_insert', ctx=Store())], value=Constant(value=False))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[keyword(arg='filter', value=Name(id='in_quoted_insert', ctx=Load())), keyword(arg='eager', value=Constant(value=True))])], returns=Constant(value=None)), Return(value=Name(id='key_bindings', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load()))], type_ignores=[])