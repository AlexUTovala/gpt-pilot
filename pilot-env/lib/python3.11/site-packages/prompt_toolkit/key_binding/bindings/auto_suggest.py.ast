Module(body=[Expr(value=Constant(value='\nKey bindings for auto suggestion (for fish-style auto suggestion).\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='emacs_mode')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='load_auto_suggest_bindings')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), FunctionDef(name='load_auto_suggest_bindings', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Key bindings for accepting auto suggestion text.\n\n    (This has to come after the Vi bindings, because they also have an\n    implementation for the "right arrow", but we really want the suggestion\n    binding when a suggestion is available.)\n    ')), Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='key_bindings', ctx=Load()), attr='add', ctx=Load())), FunctionDef(name='suggestion_available', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='suggestion', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='suggestion', ctx=Load()), attr='text', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), Attribute(value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='document', ctx=Load()), attr='is_cursor_at_the_end', ctx=Load())]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_accept', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Accept suggestion.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='suggestion', ctx=Store())], value=Attribute(value=Name(id='b', ctx=Load()), attr='suggestion', ctx=Load())), If(test=Name(id='suggestion', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='insert_text', ctx=Load()), args=[Attribute(value=Name(id='suggestion', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-f')], keywords=[keyword(arg='filter', value=Name(id='suggestion_available', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-e')], keywords=[keyword(arg='filter', value=Name(id='suggestion_available', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='right')], keywords=[keyword(arg='filter', value=Name(id='suggestion_available', ctx=Load()))])], returns=Constant(value=None)), FunctionDef(name='_fill', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fill partial suggestion.\n        ')), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='event', ctx=Load()), attr='current_buffer', ctx=Load())), Assign(targets=[Name(id='suggestion', ctx=Store())], value=Attribute(value=Name(id='b', ctx=Load()), attr='suggestion', ctx=Load())), If(test=Name(id='suggestion', ctx=Load()), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='([^\\s/]+(?:\\s+|/))'), Attribute(value=Name(id='suggestion', ctx=Load()), attr='text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='insert_text', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='t', ctx=Load()), ifs=[Name(id='x', ctx=Load())], is_async=0)])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='escape'), Constant(value='f')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='suggestion_available', ctx=Load()), op=BitAnd(), right=Name(id='emacs_mode', ctx=Load())))])], returns=Constant(value=None)), Return(value=Name(id='key_bindings', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load()))], type_ignores=[])