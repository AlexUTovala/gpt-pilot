Module(body=[Expr(value=Constant(value='\nCollection of style transformations.\n\nThink of it as a kind of color post processing after the rendering is done.\nThis could be used for instance to change the contrast/saturation; swap light\nand dark colors or even change certain colors for other colors.\n\nWhen the UI is rendered, these transformations can be applied right after the\nstyle strings are turned into `Attrs` objects that represent the actual\nformatting.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='colorsys', names=[alias(name='hls_to_rgb'), alias(name='rgb_to_hls')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Hashable'), alias(name='Sequence')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='memoized')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='FilterOrBool'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='AnyFloat'), alias(name='to_float'), alias(name='to_str')], level=0), ImportFrom(module='base', names=[alias(name='ANSI_COLOR_NAMES'), alias(name='Attrs')], level=1), ImportFrom(module='style', names=[alias(name='parse_color')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='StyleTransformation'), Constant(value='SwapLightAndDarkStyleTransformation'), Constant(value='ReverseStyleTransformation'), Constant(value='SetDefaultColorStyleTransformation'), Constant(value='AdjustBrightnessStyleTransformation'), Constant(value='DummyStyleTransformation'), Constant(value='ConditionalStyleTransformation'), Constant(value='DynamicStyleTransformation'), Constant(value='merge_style_transformations')], ctx=Load())), ClassDef(name='StyleTransformation', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class for any style transformation.\n    ')), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Take an `Attrs` object and return a new `Attrs` object.\n\n        Remember that the color formats can be either "ansi..." or a 6 digit\n        lowercase hexadecimal color (without \'#\' prefix).\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        When this changes, the cache should be invalidated.\n        ')), Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1)]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='SwapLightAndDarkStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Turn dark colors into light colors and the other way around.\n\n    This is meant to make color schemes that work on a dark background usable\n    on a light background (and the other way around).\n\n    Notice that this doesn\'t swap foreground and background like "reverse"\n    does. It turns light green into dark green and the other way around.\n    Foreground and background colors are considered individually.\n\n    Also notice that when <reverse> is used somewhere and no colors are given\n    in particular (like what is the default for the bottom toolbar), then this\n    doesn\'t change anything. This is what makes sense, because when the\n    \'default\' color is chosen, it\'s what works best for the terminal, and\n    reverse works good with that.\n    ')), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the `Attrs` used when opposite luminosity should be used.\n        ')), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='get_opposite_color', ctx=Load()), args=[Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Call(func=Name(id='get_opposite_color', ctx=Load()), args=[Attribute(value=Name(id='attrs', ctx=Load()), attr='bgcolor', ctx=Load())], keywords=[]))])), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load()))], decorator_list=[]), ClassDef(name='ReverseStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Swap the 'reverse' attribute.\n\n    (This is still experimental.)\n    ")), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='attrs', ctx=Load()), attr='reverse', ctx=Load())))]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load()))], decorator_list=[]), ClassDef(name='SetDefaultColorStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Set default foreground/background color for output that doesn't specify\n    anything. This is useful for overriding the terminal default colors.\n\n    :param fg: Color string or callable that returns a color string for the\n        foreground.\n    :param bg: Like `fg`, but for the background.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fg', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='bg', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fg', ctx=Store())], value=Name(id='fg', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bg', ctx=Store())], value=Name(id='bg', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='attrs', ctx=Load()), attr='bgcolor', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=''), Constant(value='default')], ctx=Load())]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Call(func=Name(id='parse_color', ctx=Load()), args=[Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bg', ctx=Load())], keywords=[])], keywords=[]))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=''), Constant(value='default')], ctx=Load())]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='parse_color', ctx=Load()), args=[Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='fg', ctx=Load())], keywords=[])], keywords=[]))]))], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Constant(value='set-default-color'), Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='fg', ctx=Load())], keywords=[]), Call(func=Name(id='to_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bg', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='AdjustBrightnessStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Adjust the brightness to improve the rendering on either dark or light\n    backgrounds.\n\n    For dark backgrounds, it's best to increase `min_brightness`. For light\n    backgrounds it's best to decrease `max_brightness`. Usually, only one\n    setting is adjusted.\n\n    This will only change the brightness for text that has a foreground color\n    defined, but no background color. It works best for 256 or true color\n    output.\n\n    .. note:: Notice that there is no universal way to detect whether the\n              application is running in a light or dark terminal. As a\n              developer of an command line application, you'll have to make\n              this configurable for the user.\n\n    :param min_brightness: Float between 0.0 and 1.0 or a callable that returns\n        a float.\n    :param max_brightness: Float between 0.0 and 1.0 or a callable that returns\n        a float.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='min_brightness', annotation=Name(id='AnyFloat', ctx=Load())), arg(arg='max_brightness', annotation=Name(id='AnyFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.0), Constant(value=1.0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_brightness', ctx=Store())], value=Name(id='min_brightness', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_brightness', ctx=Store())], value=Name(id='max_brightness', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='min_brightness', ctx=Store())], value=Call(func=Name(id='to_float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='min_brightness', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_brightness', ctx=Store())], value=Call(func=Name(id='to_float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='max_brightness', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='min_brightness', ctx=Load()), Constant(value=1)])), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='max_brightness', ctx=Load()), Constant(value=1)])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='min_brightness', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0.0)]), Compare(left=Name(id='max_brightness', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1.0)])]), body=[Return(value=Name(id='attrs', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='no_background', ctx=Store())], value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='attrs', ctx=Load()), attr='bgcolor', ctx=Load())), Compare(left=Attribute(value=Name(id='attrs', ctx=Load()), attr='bgcolor', ctx=Load()), ops=[Eq()], comparators=[Constant(value='default')])])), Assign(targets=[Name(id='has_fgcolor', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load()), Compare(left=Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='ansidefault')])])), If(test=BoolOp(op=And(), values=[Name(id='has_fgcolor', ctx=Load()), Name(id='no_background', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_color_to_rgb', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='attrs', ctx=Load()), attr='color', ctx=Load()), Constant(value='')])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hue', ctx=Store()), Name(id='brightness', ctx=Store()), Name(id='saturation', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_hls', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='brightness', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_interpolate_brightness', ctx=Load()), args=[Name(id='brightness', ctx=Load()), Name(id='min_brightness', ctx=Load()), Name(id='max_brightness', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Call(func=Name(id='hls_to_rgb', ctx=Load()), args=[Name(id='hue', ctx=Load()), Name(id='brightness', ctx=Load()), Name(id='saturation', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_color', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='r', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='g', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='b', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')]))])), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Name(id='new_color', ctx=Load()))]))], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='_color_to_rgb', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse `style.Attrs` color into RGB tuple.\n        ')), Try(body=[ImportFrom(module='prompt_toolkit.output.vt100', names=[alias(name='ANSI_COLORS_TO_RGB')], level=0), Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='ANSI_COLORS_TO_RGB', ctx=Load()), slice=Name(id='color', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[BinOp(left=Name(id='r', ctx=Load()), op=Div(), right=Constant(value=255.0)), BinOp(left=Name(id='g', ctx=Load()), op=Div(), right=Constant(value=255.0)), BinOp(left=Name(id='b', ctx=Load()), op=Div(), right=Constant(value=255.0))], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0)), BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0)), BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_interpolate_brightness', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='float', ctx=Load())), arg(arg='min_brightness', annotation=Name(id='float', ctx=Load())), arg(arg='max_brightness', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Map the brightness to the (min_brightness..max_brightness) range.\n        ')), Return(value=BinOp(left=Name(id='min_brightness', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='max_brightness', ctx=Load()), op=Sub(), right=Name(id='min_brightness', ctx=Load())), op=Mult(), right=Name(id='value', ctx=Load()))))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Constant(value='adjust-brightness'), Call(func=Name(id='to_float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='min_brightness', ctx=Load())], keywords=[]), Call(func=Name(id='to_float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='max_brightness', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='DummyStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Don't transform anything at all.\n    ")), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='dummy-style-transformation'))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='DynamicStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    StyleTransformation class that can dynamically returns any\n    `StyleTransformation`.\n\n    :param get_style_transformation: Callable that returns a\n        :class:`.StyleTransformation` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_style_transformation', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_style_transformation', ctx=Store())], value=Name(id='get_style_transformation', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style_transformation', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style_transformation', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyStyleTransformation', ctx=Load()), args=[], keywords=[])])), Return(value=Call(func=Attribute(value=Name(id='style_transformation', ctx=Load()), attr='transform_attrs', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style_transformation', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style_transformation', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DummyStyleTransformation', ctx=Load()), args=[], keywords=[])])), Return(value=Call(func=Attribute(value=Name(id='style_transformation', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='ConditionalStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Apply the style transformation depending on a condition.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_transformation', annotation=Name(id='StyleTransformation', ctx=Load())), arg(arg='filter', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Store())], value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='filter', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Load()), attr='transform_attrs', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='_MergedStyleTransformation', bases=[Name(id='StyleTransformation', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_transformations', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='StyleTransformation', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformations', ctx=Store())], value=Name(id='style_transformations', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='transformation', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformations', ctx=Load()), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='transformation', ctx=Load()), attr='transform_attrs', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformations', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_style_transformations', args=arguments(posonlyargs=[], args=[arg(arg='style_transformations', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='StyleTransformation', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Merge multiple transformations together.\n    ')), Return(value=Call(func=Name(id='_MergedStyleTransformation', ctx=Load()), args=[Name(id='style_transformations', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='StyleTransformation', ctx=Load())), Assign(targets=[Name(id='OPPOSITE_ANSI_COLOR_NAMES', ctx=Store())], value=Dict(keys=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansigray'), Constant(value='ansiwhite'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan'), Constant(value='ansibrightblack')], values=[Constant(value='ansidefault'), Constant(value='ansiwhite'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan'), Constant(value='ansibrightblack'), Constant(value='ansiblack'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansigray')])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OPPOSITE_ANSI_COLOR_NAMES', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OPPOSITE_ANSI_COLOR_NAMES', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])])), FunctionDef(name='get_opposite_color', args=arguments(posonlyargs=[], args=[arg(arg='colorname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Take a color name in either 'ansi...' format or 6 digit RGB, return the\n    color of opposite luminosity (same hue/saturation).\n\n    This is used for turning color schemes that work on a light background\n    usable on a dark background.\n    ")), If(test=Compare(left=Name(id='colorname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='colorname', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=''), Constant(value='default')], ctx=Load())]), body=[Return(value=Name(id='colorname', ctx=Load()))], orelse=[]), Try(body=[Return(value=Subscript(value=Name(id='OPPOSITE_ANSI_COLOR_NAMES', ctx=Load()), slice=Name(id='colorname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='colorname', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0))), Assign(targets=[Name(id='g', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='colorname', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0))), Assign(targets=[Name(id='b', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='colorname', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load()), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0))), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='l', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_hls', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='g', ctx=Load()), Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Name(id='l', ctx=Store())], value=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='l', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='r', ctx=Store()), Name(id='g', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store())], value=Call(func=Name(id='hls_to_rgb', ctx=Load()), args=[Name(id='h', ctx=Load()), Name(id='l', ctx=Load()), Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='r', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[])), Assign(targets=[Name(id='g', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='g', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='b', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='r', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Name(id='g', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Name(id='b', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')]))]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Name(id='memoized', ctx=Load()), args=[], keywords=[])], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], type_ignores=[])