Module(body=[Expr(value=Constant(value='\nAdaptor for building prompt_toolkit styles, starting from a Pygments style.\n\nUsage::\n\n    from pygments.styles.tango import TangoStyle\n    style = style_from_pygments_cls(pygments_style_cls=TangoStyle)\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='style', names=[alias(name='Style')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pygments.style', names=[alias(name='Style', asname='PygmentsStyle')], level=0), ImportFrom(module='pygments.token', names=[alias(name='Token')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='style_from_pygments_cls'), Constant(value='style_from_pygments_dict'), Constant(value='pygments_token_to_classname')], ctx=Load())), FunctionDef(name='style_from_pygments_cls', args=arguments(posonlyargs=[], args=[arg(arg='pygments_style_cls', annotation=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='PygmentsStyle', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Shortcut to create a :class:`.Style` instance from a Pygments style class\n    and a style dictionary.\n\n    Example::\n\n        from prompt_toolkit.styles.from_pygments import style_from_pygments_cls\n        from pygments.styles import get_style_by_name\n        style = style_from_pygments_cls(get_style_by_name('monokai'))\n\n    :param pygments_style_cls: Pygments style class to start from.\n    ")), ImportFrom(module='pygments.style', names=[alias(name='Style', asname='PygmentsStyle')], level=0), Assert(test=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='pygments_style_cls', ctx=Load()), Name(id='PygmentsStyle', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='style_from_pygments_dict', ctx=Load()), args=[Attribute(value=Name(id='pygments_style_cls', ctx=Load()), attr='styles', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='style_from_pygments_dict', args=arguments(posonlyargs=[], args=[arg(arg='pygments_dict', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='Token', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a :class:`.Style` instance from a Pygments style dictionary.\n    (One that maps Token objects to style strings.)\n    ')), Assign(targets=[Name(id='pygments_style', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='token', ctx=Store()), Name(id='style', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='pygments_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pygments_style', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='pygments_token_to_classname', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), Name(id='style', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Style', ctx=Load()), args=[Name(id='pygments_style', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='pygments_token_to_classname', args=arguments(posonlyargs=[], args=[arg(arg='token', annotation=Name(id='Token', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Turn e.g. `Token.Name.Exception` into `'pygments.name.exception'`.\n\n    (Our Pygments lexer will also turn the tokens that pygments produces in a\n    prompt_toolkit list of fragments that match these styling rules.)\n    ")), Assign(targets=[Name(id='parts', ctx=Store())], value=BinOp(left=Tuple(elts=[Constant(value='pygments')], ctx=Load()), op=Add(), right=Name(id='token', ctx=Load()))), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])