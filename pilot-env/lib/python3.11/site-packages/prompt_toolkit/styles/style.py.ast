Module(body=[Expr(value=Constant(value='\nTool for creating styles from a dictionary.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='itertools')]), Import(names=[alias(name='re')]), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='Hashable'), alias(name='TypeVar')], level=0), ImportFrom(module='prompt_toolkit.cache', names=[alias(name='SimpleCache')], level=0), ImportFrom(module='base', names=[alias(name='ANSI_COLOR_NAMES'), alias(name='ANSI_COLOR_NAMES_ALIASES'), alias(name='DEFAULT_ATTRS'), alias(name='Attrs'), alias(name='BaseStyle')], level=1), ImportFrom(module='named_colors', names=[alias(name='NAMED_COLORS')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Style'), Constant(value='parse_color'), Constant(value='Priority'), Constant(value='merge_styles')], ctx=Load())), Assign(targets=[Name(id='_named_colors_lowercase', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='#')], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='NAMED_COLORS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), FunctionDef(name='parse_color', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse/validate color format.\n\n    Like in Pygments, but also support the ANSI color names.\n    (These will map to the colors of the 16 color palette.)\n    ')), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[In()], comparators=[Name(id='ANSI_COLOR_NAMES', ctx=Load())]), body=[Return(value=Name(id='text', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[In()], comparators=[Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load()), slice=Name(id='text', ctx=Load()), ctx=Load()))], orelse=[]), Try(body=[Return(value=Subscript(value=Name(id='_named_colors_lowercase', ctx=Load()), slice=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='col', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='col', ctx=Load()), ops=[In()], comparators=[Name(id='ANSI_COLOR_NAMES', ctx=Load())]), body=[Return(value=Name(id='col', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='col', ctx=Load()), ops=[In()], comparators=[Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=6)]), body=[Return(value=Name(id='col', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Mult(), right=Constant(value=2)), op=Add(), right=BinOp(left=Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Mult(), right=Constant(value=2))), op=Add(), right=BinOp(left=Subscript(value=Name(id='col', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Mult(), right=Constant(value=2))))], orelse=[])])])])], orelse=[If(test=Compare(left=Name(id='text', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=''), Constant(value='default')], ctx=Load())]), body=[Return(value=Name(id='text', ctx=Load()))], orelse=[])]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Wrong color format %r'), op=Mod(), right=Name(id='text', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_EMPTY_ATTRS', ctx=Store())], value=Call(func=Name(id='Attrs', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value=None)), keyword(arg='bgcolor', value=Constant(value=None)), keyword(arg='bold', value=Constant(value=None)), keyword(arg='underline', value=Constant(value=None)), keyword(arg='strike', value=Constant(value=None)), keyword(arg='italic', value=Constant(value=None)), keyword(arg='blink', value=Constant(value=None)), keyword(arg='reverse', value=Constant(value=None)), keyword(arg='hidden', value=Constant(value=None))])), FunctionDef(name='_expand_classname', args=arguments(posonlyargs=[], args=[arg(arg='classname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Split a single class name at the `.` operator, and build a list of classes.\n\n    E.g. 'a.b.c' becomes ['a', 'a.b', 'a.b.c']\n    ")), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='classname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_style_str', args=arguments(posonlyargs=[], args=[arg(arg='style_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Take a style string, e.g.  'bg:red #88ff00 class:title'\n    and return a `Attrs` instance.\n    ")), If(test=Compare(left=Constant(value='noinherit'), ops=[In()], comparators=[Name(id='style_str', ctx=Load())]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Name(id='DEFAULT_ATTRS', ctx=Load()))], orelse=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Name(id='_EMPTY_ATTRS', ctx=Load()))]), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='style_str', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='noinherit')]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='bold')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nobold')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='italic')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='italic', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='noitalic')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='italic', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='underline')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='underline', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nounderline')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='underline', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='strike')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='strike', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nostrike')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='strike', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='blink')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='blink', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='noblink')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='blink', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='reverse')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='noreverse')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='hidden')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='hidden', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nohidden')]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='hidden', value=Constant(value=False))]))], orelse=[If(test=Compare(left=Name(id='part', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='roman'), Constant(value='sans'), Constant(value='mono')], ctx=Load())]), body=[Pass()], orelse=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='border:')], keywords=[]), body=[Pass()], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='[')], keywords=[]), Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=']')], keywords=[])]), body=[Pass()], orelse=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='bg:')], keywords=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Call(func=Name(id='parse_color', ctx=Load()), args=[Subscript(value=Name(id='part', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())], keywords=[]))]))], orelse=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='fg:')], keywords=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='parse_color', ctx=Load()), args=[Subscript(value=Name(id='part', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())], keywords=[]))]))], orelse=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='parse_color', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]))]))])])])])])])])])])])])])])])])])])])])])], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), Assign(targets=[Name(id='CLASS_NAMES_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[a-z0-9.\\s_-]*$')], keywords=[])), ClassDef(name='Priority', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The priority of the rules, when a style is created from a dictionary.\n\n    In a `Style`, rules that are defined later will always override previous\n    defined rules, however in a dictionary, the key order was arbitrary before\n    Python 3.6. This means that the style could change at random between rules.\n\n    We have two options:\n\n    - `DICT_KEY_ORDER`: This means, iterate through the dictionary, and take\n       the key/value pairs in order as they come. This is a good option if you\n       have Python >3.6. Rules at the end will override rules at the beginning.\n    - `MOST_PRECISE`: keys that are defined with most precision will get higher\n      priority. (More precise means: more elements.)\n    ')), Assign(targets=[Name(id='DICT_KEY_ORDER', ctx=Store())], value=Constant(value='KEY_ORDER')), Assign(targets=[Name(id='MOST_PRECISE', ctx=Store())], value=Constant(value='MOST_PRECISE'))], decorator_list=[]), Assign(targets=[Name(id='default_priority', ctx=Store())], value=Attribute(value=Name(id='Priority', ctx=Load()), attr='DICT_KEY_ORDER', ctx=Load())), ClassDef(name='Style', bases=[Name(id='BaseStyle', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Create a ``Style`` instance from a list of style rules.\n\n    The `style_rules` is supposed to be a list of ('classnames', 'style') tuples.\n    The classnames are a whitespace separated string of class names and the\n    style string is just like a Pygments style definition, but with a few\n    additions: it supports 'reverse' and 'blink'.\n\n    Later rules always override previous rules.\n\n    Usage::\n\n        Style([\n            ('title', '#ff0000 bold underline'),\n            ('something-else', 'reverse'),\n            ('class1 class2', 'reverse'),\n        ])\n\n    The ``from_dict`` classmethod is similar, but takes a dictionary as input.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_rules', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='class_names_and_attrs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='class_names', ctx=Store()), Name(id='style_str', ctx=Store())], ctx=Store()), iter=Name(id='style_rules', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Name(id='CLASS_NAMES_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='class_names', ctx=Load())], keywords=[]), msg=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='class_names', ctx=Load())], keywords=[])), Assign(targets=[Name(id='class_names_set', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='class_names', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='_parse_style_str', ctx=Load()), args=[Name(id='style_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='class_names_and_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='class_names_set', ctx=Load()), Name(id='attrs', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_style_rules', ctx=Store())], value=Name(id='style_rules', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='class_names_and_attrs', ctx=Store())], value=Name(id='class_names_and_attrs', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='style_rules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_rules', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='from_dict', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='style_dict', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='priority', annotation=Name(id='Priority', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_priority', ctx=Load())]), body=[Expr(value=Constant(value='\n        :param style_dict: Style dictionary.\n        :param priority: `Priority` value.\n        ')), If(test=Compare(left=Name(id='priority', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Priority', ctx=Load()), attr='MOST_PRECISE', ctx=Load())]), body=[FunctionDef(name='key', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='style_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='style_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Style', ctx=Load())), FunctionDef(name='get_attrs_for_style_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_ATTRS', ctx=Load())]), body=[Expr(value=Constant(value='\n        Get `Attrs` for the given style string.\n        ')), Assign(targets=[Name(id='list_of_attrs', ctx=Store())], value=List(elts=[Name(id='default', ctx=Load())], ctx=Load())), AnnAssign(target=Name(id='class_names', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Tuple(elts=[Name(id='names', ctx=Store()), Name(id='attr', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='class_names_and_attrs', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='names', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='list_of_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='style_str', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='class:')], keywords=[]), body=[Assign(targets=[Name(id='new_class_names', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='part', ctx=Load()), slice=Slice(lower=Constant(value=6)), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_class_names', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='_expand_classname', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='new_name', ctx=Store()), iter=Name(id='new_class_names', ctx=Load()), body=[Assign(targets=[Name(id='combos', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='combos', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Name(id='new_name', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='count', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='class_names', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), body=[For(target=Name(id='c2', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='combinations', ctx=Load()), args=[Name(id='class_names', ctx=Load()), Name(id='count', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='combos', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='frozenset', ctx=Load()), args=[BinOp(left=Name(id='c2', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='new_name', ctx=Load())], ctx=Load()))], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='names', ctx=Store()), Name(id='attr', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='class_names_and_attrs', ctx=Load()), body=[If(test=Compare(left=Name(id='names', ctx=Load()), ops=[In()], comparators=[Name(id='combos', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='list_of_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='class_names', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='new_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='inline_attrs', ctx=Store())], value=Call(func=Name(id='_parse_style_str', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='list_of_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='inline_attrs', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='_merge_attrs', ctx=Load()), args=[Name(id='list_of_attrs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='id', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='class_names_and_attrs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), FunctionDef(name='_merge_attrs', args=arguments(posonlyargs=[], args=[arg(arg='list_of_attrs', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Attrs', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Take a list of :class:`.Attrs` instances and merge them into one.\n    Every `Attr` in the list can override the styling of the previous one. So,\n    the last one has highest priority.\n    ')), FunctionDef(name='_or', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='values', annotation=Name(id='_T', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Take first not-None value, starting at the end.')), For(target=Name(id='v', ctx=Store()), iter=Subscript(value=Name(id='values', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='v', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Name(id='ValueError', ctx=Load()))], decorator_list=[], returns=Name(id='_T', ctx=Load())), Return(value=Call(func=Name(id='Attrs', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=''), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='color', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='bgcolor', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=''), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='bgcolor', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='bold', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='bold', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='underline', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='underline', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='strike', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='strike', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='italic', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='italic', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='blink', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='blink', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='reverse', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='reverse', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), keyword(arg='hidden', value=Call(func=Name(id='_or', ctx=Load()), args=[Constant(value=False), Starred(value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='hidden', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='list_of_attrs', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='merge_styles', args=arguments(posonlyargs=[], args=[arg(arg='styles', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='BaseStyle', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Merge multiple `Style` objects.\n    ')), Assign(targets=[Name(id='styles', ctx=Store())], value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='styles', ctx=Load()), ifs=[Compare(left=Name(id='s', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Return(value=Call(func=Name(id='_MergedStyle', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='_MergedStyle', ctx=Load())), ClassDef(name='_MergedStyle', bases=[Name(id='BaseStyle', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Merge multiple `Style` objects into one.\n    This is supposed to ensure consistency: if any of the given styles changes,\n    then this style will be updated.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='styles', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='BaseStyle', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=Name(id='styles', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_style', ctx=Store()), annotation=Subscript(value=Name(id='SimpleCache', ctx=Load()), slice=Tuple(elts=[Name(id='Hashable', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='SimpleCache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_merged_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The `Style` object that has the other styles merged together.')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style_rules', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Style', ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]), Name(id='get', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Style', ctx=Load())), FunctionDef(name='style_rules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style_rules', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='style_rules', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='style_rules', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='style_rules', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_attrs_for_style_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_ATTRS', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_merged_style', ctx=Load()), attr='get_attrs_for_style_str', ctx=Load()), args=[Name(id='style_str', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[])], type_ignores=[])