Module(body=[Expr(value=Constant(value='\nThe base classes for the styling.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod'), alias(name='abstractproperty')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Hashable'), alias(name='NamedTuple')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Attrs'), Constant(value='DEFAULT_ATTRS'), Constant(value='ANSI_COLOR_NAMES'), Constant(value='ANSI_COLOR_NAMES_ALIASES'), Constant(value='BaseStyle'), Constant(value='DummyStyle'), Constant(value='DynamicStyle')], ctx=Load())), ClassDef(name='Attrs', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='color', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='bgcolor', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='bold', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='underline', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='strike', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='italic', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='blink', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='reverse', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='hidden', ctx=Store()), annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1)], decorator_list=[]), Expr(value=Constant(value="\n:param color: Hexadecimal string. E.g. '000000' or Ansi color name: e.g. 'ansiblue'\n:param bgcolor: Hexadecimal string. E.g. 'ffffff' or Ansi color name: e.g. 'ansired'\n:param bold: Boolean\n:param underline: Boolean\n:param strike: Boolean\n:param italic: Boolean\n:param blink: Boolean\n:param reverse: Boolean\n:param hidden: Boolean\n")), Assign(targets=[Name(id='DEFAULT_ATTRS', ctx=Store())], value=Call(func=Name(id='Attrs', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='')), keyword(arg='bgcolor', value=Constant(value='')), keyword(arg='bold', value=Constant(value=False)), keyword(arg='underline', value=Constant(value=False)), keyword(arg='strike', value=Constant(value=False)), keyword(arg='italic', value=Constant(value=False)), keyword(arg='blink', value=Constant(value=False)), keyword(arg='reverse', value=Constant(value=False)), keyword(arg='hidden', value=Constant(value=False))])), Assign(targets=[Name(id='ANSI_COLOR_NAMES', ctx=Store())], value=List(elts=[Constant(value='ansidefault'), Constant(value='ansiblack'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiyellow'), Constant(value='ansiblue'), Constant(value='ansimagenta'), Constant(value='ansicyan'), Constant(value='ansigray'), Constant(value='ansibrightblack'), Constant(value='ansibrightred'), Constant(value='ansibrightgreen'), Constant(value='ansibrightyellow'), Constant(value='ansibrightblue'), Constant(value='ansibrightmagenta'), Constant(value='ansibrightcyan'), Constant(value='ansiwhite')], ctx=Load())), AnnAssign(target=Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='ansidarkgray'), Constant(value='ansiteal'), Constant(value='ansiturquoise'), Constant(value='ansibrown'), Constant(value='ansipurple'), Constant(value='ansifuchsia'), Constant(value='ansilightgray'), Constant(value='ansidarkred'), Constant(value='ansidarkgreen'), Constant(value='ansidarkblue')], values=[Constant(value='ansibrightblack'), Constant(value='ansicyan'), Constant(value='ansibrightcyan'), Constant(value='ansiyellow'), Constant(value='ansimagenta'), Constant(value='ansibrightmagenta'), Constant(value='ansigray'), Constant(value='ansired'), Constant(value='ansigreen'), Constant(value='ansiblue')]), simple=1), Assert(test=Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='issubset', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ANSI_COLOR_NAMES_ALIASES', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='ANSI_COLOR_NAMES', ctx=Load())], keywords=[])))), ClassDef(name='BaseStyle', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Abstract base class for prompt_toolkit styles.\n    ')), FunctionDef(name='get_attrs_for_style_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_ATTRS', ctx=Load())]), body=[Expr(value=Constant(value='\n        Return :class:`.Attrs` for the given style string.\n\n        :param style_str: The style string. This can contain inline styling as\n            well as classnames (e.g. "class:title").\n        :param default: `Attrs` to be used if no styling was defined.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='style_rules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The list of style rules, used to create this style.\n        (Required for `DynamicStyle` and `_MergedStyle` to work.)\n        ')), Return(value=List(elts=[], ctx=Load()))], decorator_list=[Name(id='abstractproperty', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Invalidation hash for the style. When this changes over time, the\n        renderer knows that something in the style changed, and that everything\n        has to be redrawn.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Hashable', ctx=Load()))], decorator_list=[]), ClassDef(name='DummyStyle', bases=[Name(id='BaseStyle', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A style that doesn't style anything.\n    ")), FunctionDef(name='get_attrs_for_style_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_ATTRS', ctx=Load())]), body=[Return(value=Name(id='default', ctx=Load()))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[], returns=Name(id='Hashable', ctx=Load())), FunctionDef(name='style_rules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DynamicStyle', bases=[Name(id='BaseStyle', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Style class that can dynamically returns an other Style.\n\n    :param get_style: Callable that returns a :class:`.Style` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='get_style', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Store())], value=Name(id='get_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dummy', ctx=Store())], value=Call(func=Name(id='DummyStyle', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_attrs_for_style_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_str', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='Attrs', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_ATTRS', ctx=Load())]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_dummy', ctx=Load())])), Return(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='get_attrs_for_style_str', ctx=Load()), args=[Name(id='style_str', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Attrs', ctx=Load())), FunctionDef(name='invalidation_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_dummy', ctx=Load())]), attr='invalidation_hash', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Hashable', ctx=Load())), FunctionDef(name='style_rules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_dummy', ctx=Load())]), attr='style_rules', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])