Module(body=[Expr(value=Constant(value='\nCollection of reusable components for building full screen applications.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='has_completions'), alias(name='has_focus')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText')], level=0), ImportFrom(module='prompt_toolkit.key_binding.bindings.focus', names=[alias(name='focus_next'), alias(name='focus_previous')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.layout.containers', names=[alias(name='AnyContainer'), alias(name='DynamicContainer'), alias(name='HSplit'), alias(name='VSplit')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='AnyDimension')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='Dimension', asname='D')], level=0), ImportFrom(module='base', names=[alias(name='Box'), alias(name='Button'), alias(name='Frame'), alias(name='Shadow')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Dialog')], ctx=Load())), ClassDef(name='Dialog', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Simple dialog window. This is the base for input dialogs, message dialogs\n    and confirmation dialogs.\n\n    Changing the title and body of the dialog is possible at runtime by\n    assigning to the `body` and `title` attributes of this class.\n\n    :param body: Child container object.\n    :param title: Text to be displayed in the heading of the dialog.\n    :param buttons: A list of `Button` widgets, displayed at the bottom.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='title', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='buttons', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Button', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='with_background', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Store())], value=Name(id='body', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Name(id='buttons', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='buttons', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='buttons_kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='buttons', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='first_selected', ctx=Store())], value=Call(func=Name(id='has_focus', ctx=Load()), args=[Subscript(value=Name(id='buttons', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_selected', ctx=Store())], value=Call(func=Name(id='has_focus', ctx=Load()), args=[Subscript(value=Name(id='buttons', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='buttons_kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='left')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='first_selected', ctx=Load())))]), args=[Name(id='focus_previous', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='buttons_kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='right')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='last_selected', ctx=Load())))]), args=[Name(id='focus_next', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='frame_body', ctx=Store()), annotation=Name(id='AnyContainer', ctx=Load()), simple=1), If(test=Name(id='buttons', ctx=Load()), body=[Assign(targets=[Name(id='frame_body', ctx=Store())], value=Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='Box', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Call(func=Name(id='DynamicContainer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Load()))], keywords=[])), keyword(arg='padding', value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=1)), keyword(arg='max', value=Constant(value=1))])), keyword(arg='padding_bottom', value=Constant(value=0))]), Call(func=Name(id='Box', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Call(func=Name(id='VSplit', ctx=Load()), args=[Name(id='buttons', ctx=Load())], keywords=[keyword(arg='padding', value=Constant(value=1)), keyword(arg='key_bindings', value=Name(id='buttons_kb', ctx=Load()))])), keyword(arg='height', value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1)), keyword(arg='max', value=Constant(value=3)), keyword(arg='preferred', value=Constant(value=3))]))])], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='frame_body', ctx=Store())], value=Name(id='body', ctx=Load()))]), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='tab')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_completions', ctx=Load())))]), args=[Name(id='focus_next', ctx=Load())], keywords=[])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='s-tab')], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_completions', ctx=Load())))]), args=[Name(id='focus_previous', ctx=Load())], keywords=[])), Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Name(id='Shadow', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Call(func=Name(id='Frame', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()))), keyword(arg='body', value=Name(id='frame_body', ctx=Load())), keyword(arg='style', value=Constant(value='class:dialog.body')), keyword(arg='width', value=IfExp(test=Compare(left=Name(id='with_background', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Name(id='width', ctx=Load()))), keyword(arg='key_bindings', value=Name(id='kb', ctx=Load())), keyword(arg='modal', value=Name(id='modal', ctx=Load()))]))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store()), annotation=BinOp(left=Name(id='Box', ctx=Load()), op=BitOr(), right=Name(id='Shadow', ctx=Load())), simple=0), If(test=Name(id='with_background', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='Box', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Name(id='frame', ctx=Load())), keyword(arg='style', value=Constant(value='class:dialog')), keyword(arg='width', value=Name(id='width', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Name(id='frame', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()))], decorator_list=[], returns=Name(id='AnyContainer', ctx=Load()))], decorator_list=[])], type_ignores=[])