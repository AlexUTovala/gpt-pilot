Module(body=[Expr(value=Constant(value='\nCollection of reusable components for building full screen applications.\n\nAll of these widgets implement the ``__pt_container__`` method, which makes\nthem usable in any situation where we are expecting a `prompt_toolkit`\ncontainer object.\n\n.. warning::\n\n    At this point, the API for these widgets is considered unstable, and can\n    potentially change between minor releases (we try not too, but no\n    guarantees are made yet). The public API in\n    `prompt_toolkit.shortcuts.dialogs` on the other hand is considered stable.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Generic'), alias(name='Sequence'), alias(name='TypeVar')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.auto_suggest', names=[alias(name='AutoSuggest'), alias(name='DynamicAutoSuggest')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer'), alias(name='BufferAcceptHandler')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='Completer'), alias(name='DynamicCompleter')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='FilterOrBool'), alias(name='has_focus'), alias(name='is_done'), alias(name='is_true'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='Template'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='fragment_list_to_text')], level=0), ImportFrom(module='prompt_toolkit.history', names=[alias(name='History')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.layout.containers', names=[alias(name='AnyContainer'), alias(name='ConditionalContainer'), alias(name='Container'), alias(name='DynamicContainer'), alias(name='Float'), alias(name='FloatContainer'), alias(name='HSplit'), alias(name='VSplit'), alias(name='Window'), alias(name='WindowAlign')], level=0), ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl'), alias(name='FormattedTextControl'), alias(name='GetLinePrefixCallable')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='AnyDimension'), alias(name='to_dimension')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='Dimension', asname='D')], level=0), ImportFrom(module='prompt_toolkit.layout.margins', names=[alias(name='ConditionalMargin'), alias(name='NumberedMargin'), alias(name='ScrollbarMargin')], level=0), ImportFrom(module='prompt_toolkit.layout.processors', names=[alias(name='AppendAutoSuggestion'), alias(name='BeforeInput'), alias(name='ConditionalProcessor'), alias(name='PasswordProcessor'), alias(name='Processor')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='DynamicLexer'), alias(name='Lexer')], level=0), ImportFrom(module='prompt_toolkit.mouse_events', names=[alias(name='MouseEvent'), alias(name='MouseEventType')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), ImportFrom(module='prompt_toolkit.validation', names=[alias(name='DynamicValidator'), alias(name='Validator')], level=0), ImportFrom(module='toolbars', names=[alias(name='SearchToolbar')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TextArea'), Constant(value='Label'), Constant(value='Button'), Constant(value='Frame'), Constant(value='Shadow'), Constant(value='Box'), Constant(value='VerticalLine'), Constant(value='HorizontalLine'), Constant(value='RadioList'), Constant(value='CheckboxList'), Constant(value='Checkbox'), Constant(value='ProgressBar')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), ClassDef(name='Border', bases=[], keywords=[], body=[Expr(value=Constant(value='Box drawing characters. (Thin)')), Assign(targets=[Name(id='HORIZONTAL', ctx=Store())], value=Constant(value='─')), Assign(targets=[Name(id='VERTICAL', ctx=Store())], value=Constant(value='│')), Assign(targets=[Name(id='TOP_LEFT', ctx=Store())], value=Constant(value='┌')), Assign(targets=[Name(id='TOP_RIGHT', ctx=Store())], value=Constant(value='┐')), Assign(targets=[Name(id='BOTTOM_LEFT', ctx=Store())], value=Constant(value='└')), Assign(targets=[Name(id='BOTTOM_RIGHT', ctx=Store())], value=Constant(value='┘'))], decorator_list=[]), ClassDef(name='TextArea', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A simple input field.\n\n    This is a higher level abstraction on top of several other classes with\n    sane defaults.\n\n    This widget does have the most common options, but it does not intend to\n    cover every single use case. For more configurations options, you can\n    always build a text area manually, using a\n    :class:`~prompt_toolkit.buffer.Buffer`,\n    :class:`~prompt_toolkit.layout.BufferControl` and\n    :class:`~prompt_toolkit.layout.Window`.\n\n    Buffer attributes:\n\n    :param text: The initial text.\n    :param multiline: If True, allow multiline input.\n    :param completer: :class:`~prompt_toolkit.completion.Completer` instance\n        for auto completion.\n    :param complete_while_typing: Boolean.\n    :param accept_handler: Called when `Enter` is pressed (This should be a\n        callable that takes a buffer as input).\n    :param history: :class:`~prompt_toolkit.history.History` instance.\n    :param auto_suggest: :class:`~prompt_toolkit.auto_suggest.AutoSuggest`\n        instance for input suggestions.\n\n    BufferControl attributes:\n\n    :param password: When `True`, display using asterisks.\n    :param focusable: When `True`, allow this widget to receive the focus.\n    :param focus_on_click: When `True`, focus after mouse click.\n    :param input_processors: `None` or a list of\n        :class:`~prompt_toolkit.layout.Processor` objects.\n    :param validator: `None` or a :class:`~prompt_toolkit.validation.Validator`\n        object.\n\n    Window attributes:\n\n    :param lexer: :class:`~prompt_toolkit.lexers.Lexer` instance for syntax\n        highlighting.\n    :param wrap_lines: When `True`, don\'t scroll horizontally, but wrap lines.\n    :param width: Window width. (:class:`~prompt_toolkit.layout.Dimension` object.)\n    :param height: Window height. (:class:`~prompt_toolkit.layout.Dimension` object.)\n    :param scrollbar: When `True`, display a scroll bar.\n    :param style: A style string.\n    :param dont_extend_width: When `True`, don\'t take up more width then the\n                              preferred width reported by the control.\n    :param dont_extend_height: When `True`, don\'t take up more width then the\n                               preferred height reported by the control.\n    :param get_line_prefix: None or a callable that returns formatted text to\n        be inserted before a line. It takes a line number (int) and a\n        wrap_count and returns formatted text. This can be used for\n        implementation of line continuations, things like Vim "breakindent" and\n        so on.\n\n    Other attributes:\n\n    :param search_field: An optional `SearchToolbar` object.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='multiline', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='password', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_while_typing', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='accept_handler', annotation=BinOp(left=Name(id='BufferAcceptHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='history', annotation=BinOp(left=Name(id='History', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='focusable', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='focus_on_click', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='read_only', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='dont_extend_height', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='dont_extend_width', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='line_numbers', annotation=Name(id='bool', ctx=Load())), arg(arg='get_line_prefix', annotation=BinOp(left=Name(id='GetLinePrefixCallable', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='scrollbar', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='search_field', annotation=BinOp(left=Name(id='SearchToolbar', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='preview_search', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='prompt', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=True), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=''), Constant(value=None), Constant(value=True), Constant(value=''), Constant(value=None), Constant(value='')]), body=[If(test=Compare(left=Name(id='search_field', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='search_control', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='search_field', ctx=Load()), Name(id='SearchToolbar', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='search_control', ctx=Store())], value=Attribute(value=Name(id='search_field', ctx=Load()), attr='control', ctx=Load()))], orelse=[])]), If(test=Compare(left=Name(id='input_processors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='input_processors', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Store())], value=Name(id='complete_while_typing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Store())], value=Name(id='lexer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Store())], value=Name(id='auto_suggest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Store())], value=Name(id='read_only', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Name(id='wrap_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Store())], value=Call(func=Name(id='Buffer', ctx=Load()), args=[], keywords=[keyword(arg='document', value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='text', ctx=Load()), Constant(value=0)], keywords=[])), keyword(arg='multiline', value=Name(id='multiline', ctx=Load())), keyword(arg='read_only', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='read_only', ctx=Load())], keywords=[]))], keywords=[])), keyword(arg='completer', value=Call(func=Name(id='DynamicCompleter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()))], keywords=[])), keyword(arg='complete_while_typing', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Load())], keywords=[]))], keywords=[])), keyword(arg='validator', value=Call(func=Name(id='DynamicValidator', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()))], keywords=[])), keyword(arg='auto_suggest', value=Call(func=Name(id='DynamicAutoSuggest', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Load()))], keywords=[])), keyword(arg='accept_handler', value=Name(id='accept_handler', ctx=Load())), keyword(arg='history', value=Name(id='history', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Store())], value=Call(func=Name(id='BufferControl', ctx=Load()), args=[], keywords=[keyword(arg='buffer', value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())), keyword(arg='lexer', value=Call(func=Name(id='DynamicLexer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Load()))], keywords=[])), keyword(arg='input_processors', value=BinOp(left=List(elts=[Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[Call(func=Name(id='AppendAutoSuggestion', ctx=Load()), args=[], keywords=[]), BinOp(left=Call(func=Name(id='has_focus', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load())], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))], keywords=[]), Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[], keywords=[keyword(arg='processor', value=Call(func=Name(id='PasswordProcessor', ctx=Load()), args=[], keywords=[])), keyword(arg='filter', value=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='password', ctx=Load())], keywords=[]))]), Call(func=Name(id='BeforeInput', ctx=Load()), args=[Name(id='prompt', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:text-area.prompt'))])], ctx=Load()), op=Add(), right=Name(id='input_processors', ctx=Load()))), keyword(arg='search_buffer_control', value=Name(id='search_control', ctx=Load())), keyword(arg='preview_search', value=Name(id='preview_search', ctx=Load())), keyword(arg='focusable', value=Name(id='focusable', ctx=Load())), keyword(arg='focus_on_click', value=Name(id='focus_on_click', ctx=Load()))])), If(test=Name(id='multiline', ctx=Load()), body=[If(test=Name(id='scrollbar', ctx=Load()), body=[Assign(targets=[Name(id='right_margins', ctx=Store())], value=List(elts=[Call(func=Name(id='ScrollbarMargin', ctx=Load()), args=[], keywords=[keyword(arg='display_arrows', value=Constant(value=True))])], ctx=Load()))], orelse=[Assign(targets=[Name(id='right_margins', ctx=Store())], value=List(elts=[], ctx=Load()))]), If(test=Name(id='line_numbers', ctx=Load()), body=[Assign(targets=[Name(id='left_margins', ctx=Store())], value=List(elts=[Call(func=Name(id='NumberedMargin', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[Assign(targets=[Name(id='left_margins', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Attribute(value=Name(id='D', ctx=Load()), attr='exact', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='left_margins', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='right_margins', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value='class:text-area '), op=Add(), right=Name(id='style', ctx=Load()))), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='dont_extend_height', value=Name(id='dont_extend_height', ctx=Load())), keyword(arg='dont_extend_width', value=Name(id='dont_extend_width', ctx=Load())), keyword(arg='content', value=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='wrap_lines', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Load())], keywords=[]))], keywords=[])), keyword(arg='left_margins', value=Name(id='left_margins', ctx=Load())), keyword(arg='right_margins', value=Name(id='right_margins', ctx=Load())), keyword(arg='get_line_prefix', value=Name(id='get_line_prefix', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The `Buffer` text.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='text', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='document', ctx=Store())], value=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[Attribute(value=Name(id='text', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='document', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The `Buffer` document (text + cursor position).\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='document', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Document', ctx=Load())), FunctionDef(name='document', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Document', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='set_document', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='bypass_readonly', value=Constant(value=True))]))], decorator_list=[Attribute(value=Name(id='document', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='accept_handler', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The accept handler. Called when the user accepts the input.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='accept_handler', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='BufferAcceptHandler', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='accept_handler', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='BufferAcceptHandler', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='buffer', ctx=Load()), attr='accept_handler', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='accept_handler', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='Label', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Widget that displays the given text. It is not editable or focusable.\n\n    :param text: Text to display. Can be multiline. All value types accepted by\n        :class:`prompt_toolkit.layout.FormattedTextControl` are allowed,\n        including a callable.\n    :param style: A style string.\n    :param width: When given, use this width, rather than calculating it from\n        the text size.\n    :param dont_extend_width: When `True`, don't take up more width than\n                              preferred, i.e. the length of the longest line of\n                              the text, or value of `width` parameter, if\n                              given. `True` by default\n    :param dont_extend_height: When `True`, don't take up more width than the\n                               preferred height, i.e. the number of lines of\n                               the text. `False` by default.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='dont_extend_height', annotation=Name(id='bool', ctx=Load())), arg(arg='dont_extend_width', annotation=Name(id='bool', ctx=Load())), arg(arg='align', annotation=BinOp(left=Name(id='WindowAlign', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='WindowAlign', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='wrap_lines', annotation=Name(id='FilterOrBool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=True), Constant(value=False), Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='LEFT', ctx=Load()), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='text_fragments', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Name(id='text_fragments', ctx=Load())], keywords=[])), If(test=Name(id='text', ctx=Load()), body=[Assign(targets=[Name(id='longest_line', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))]), Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Name(id='longest_line', ctx=Load()))]))], orelse=[Return(value=Name(id='width', ctx=Load()))])], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatted_text_control', ctx=Store())], value=Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Attribute(value=Name(id='self', ctx=Load()), attr='formatted_text_control', ctx=Load())), keyword(arg='width', value=Name(id='get_width', ctx=Load())), keyword(arg='height', value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1))])), keyword(arg='style', value=BinOp(left=Constant(value='class:label '), op=Add(), right=Name(id='style', ctx=Load()))), keyword(arg='dont_extend_height', value=Name(id='dont_extend_height', ctx=Load())), keyword(arg='dont_extend_width', value=Name(id='dont_extend_width', ctx=Load())), keyword(arg='align', value=Name(id='align', ctx=Load())), keyword(arg='wrap_lines', value=Name(id='wrap_lines', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='Button', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Clickable button.\n\n    :param text: The caption for the button.\n    :param handler: `None` or callable. Called when the button is clicked. No\n        parameters are passed to this callable. Use for instance Python's\n        `functools.partial` to pass parameters to this callable if needed.\n    :param width: Width of the button.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='handler', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='left_symbol', annotation=Name(id='str', ctx=Load())), arg(arg='right_symbol', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=12), Constant(value='<'), Constant(value='>')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='left_symbol', ctx=Store())], value=Name(id='left_symbol', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right_symbol', ctx=Store())], value=Name(id='right_symbol', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Store())], value=Name(id='handler', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Store())], value=Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_fragments', ctx=Load())], keywords=[keyword(arg='key_bindings', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_key_bindings', ctx=Load()), args=[], keywords=[])), keyword(arg='focusable', value=Constant(value=True))])), FunctionDef(name='get_style', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='has_focus', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Return(value=Constant(value='class:button.focused'))], orelse=[Return(value=Constant(value='class:button'))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load())], keywords=[keyword(arg='align', value=Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='CENTER', ctx=Load())), keyword(arg='height', value=Constant(value=1)), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='style', value=Name(id='get_style', ctx=Load())), keyword(arg='dont_extend_width', value=Constant(value=False)), keyword(arg='dont_extend_height', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_text_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='left_symbol', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='right_symbol', ctx=Load())], keywords=[])))), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=JoinedStr(values=[Constant(value='{:^'), FormattedValue(value=Name(id='width', ctx=Load()), conversion=-1), Constant(value='}')]), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])), FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Return(value=List(elts=[Tuple(elts=[Constant(value='class:button.arrow'), Attribute(value=Name(id='self', ctx=Load()), attr='left_symbol', ctx=Load()), Name(id='handler', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[SetCursorPosition]'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='class:button.text'), Name(id='text', ctx=Load()), Name(id='handler', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:button.arrow'), Attribute(value=Name(id='self', ctx=Load()), attr='right_symbol', ctx=Load()), Name(id='handler', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Key bindings for the Button.')), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handler', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='enter')], keywords=[])], returns=Constant(value=None)), Return(value=Name(id='kb', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load())), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='Frame', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Draw a border around any container, optionally with a title text.\n\n    Changing the title and body of the frame is possible at runtime by\n    assigning to the `body` and `title` attributes of this class.\n\n    :param body: Another container object.\n    :param title: Text to be displayed in the top of the frame (can be formatted text).\n    :param style: Style string to be applied to this widget.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='title', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindings', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='modal', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Store())], value=Name(id='body', ctx=Load())), Assign(targets=[Name(id='fill', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Name(id='Window', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:frame.border'))])), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value='class:frame '), op=Add(), right=Name(id='style', ctx=Load()))), Assign(targets=[Name(id='top_row_with_title', ctx=Store())], value=Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='TOP_LEFT', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='HORIZONTAL', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Constant(value='|'))]), Call(func=Name(id='Label', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Name(id='Template', ctx=Load()), args=[Constant(value=' {} ')], keywords=[]), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[]))], keywords=[keyword(arg='style', value=Constant(value='class:frame.label')), keyword(arg='dont_extend_width', value=Constant(value=True))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Constant(value='|'))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='HORIZONTAL', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='TOP_RIGHT', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='height', value=Constant(value=1))])), Assign(targets=[Name(id='top_row_without_title', ctx=Store())], value=Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='TOP_LEFT', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='HORIZONTAL', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='TOP_RIGHT', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='height', value=Constant(value=1))])), FunctionDef(name='has_title', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Name(id='top_row_with_title', ctx=Load())), keyword(arg='filter', value=Name(id='has_title', ctx=Load()))]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Name(id='top_row_without_title', ctx=Load())), keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='has_title', ctx=Load())))]), Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='VERTICAL', ctx=Load()))]), Call(func=Name(id='DynamicContainer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Load()))], keywords=[]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='VERTICAL', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='padding', value=Constant(value=0))]), Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='BOTTOM_LEFT', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='HORIZONTAL', ctx=Load()))]), Call(func=Name(id='fill', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=1)), keyword(arg='height', value=Constant(value=1)), keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='BOTTOM_RIGHT', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='height', value=Constant(value=1))])], ctx=Load())], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load())), keyword(arg='modal', value=Name(id='modal', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='Shadow', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Draw a shadow underneath/behind this container.\n    (This applies `class:shadow` the the cells under the shadow. The Style\n    should define the colors for the shadow.)\n\n    :param body: Another container object.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body', annotation=Name(id='AnyContainer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='FloatContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Name(id='body', ctx=Load())), keyword(arg='floats', value=List(elts=[Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='bottom', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='height', value=Constant(value=1)), keyword(arg='left', value=Constant(value=1)), keyword(arg='right', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='transparent', value=Constant(value=True)), keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='class:shadow'))]))]), Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='bottom', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='top', value=Constant(value=1)), keyword(arg='width', value=Constant(value=1)), keyword(arg='right', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='transparent', value=Constant(value=True)), keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='class:shadow'))]))])], ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='Box', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Add padding around a container.\n\n    This also makes sure that the parent can provide more space than required by\n    the child. This is very useful when wrapping a small element with a fixed\n    size into a ``VSplit`` or ``HSplit`` object. The ``HSplit`` and ``VSplit``\n    try to make sure to adapt respectively the width and height, possibly\n    shrinking other elements. Wrapping something in a ``Box`` makes it flexible.\n\n    :param body: Another container object.\n    :param padding: The margin to be used around the body. This can be\n        overridden by `padding_left`, padding_right`, `padding_top` and\n        `padding_bottom`.\n    :param style: A style string.\n    :param char: Character to be used for filling the space around the body.\n        (This is supposed to be a character with a terminal width of 1.)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='padding', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_left', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_right', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_top', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='padding_bottom', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='height', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load())), arg(arg='char', annotation=BinOp(left=BinOp(left=Constant(value=None), op=BitOr(), right=Name(id='str', ctx=Load())), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='modal', annotation=Name(id='bool', ctx=Load())), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindings', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=''), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[If(test=Compare(left=Name(id='padding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='padding', ctx=Store())], value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Constant(value=0))]))], orelse=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='AnyDimension', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='padding', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='to_dimension', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='D', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_left', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='padding_left', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_right', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='padding_right', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_top', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='padding_top', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding_bottom', ctx=Store())], value=Call(func=Name(id='get', ctx=Load()), args=[Name(id='padding_bottom', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Store())], value=Name(id='body', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_top', ctx=Load())), keyword(arg='char', value=Name(id='char', ctx=Load()))]), Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_left', ctx=Load())), keyword(arg='char', value=Name(id='char', ctx=Load()))]), Name(id='body', ctx=Load()), Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_right', ctx=Load())), keyword(arg='char', value=Name(id='char', ctx=Load()))])], ctx=Load())], keywords=[]), Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding_bottom', ctx=Load())), keyword(arg='char', value=Name(id='char', ctx=Load()))])], ctx=Load())], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='modal', value=Name(id='modal', ctx=Load())), keyword(arg='key_bindings', value=Constant(value=None))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), ClassDef(name='_DialogList', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Common code for `RadioList` and `CheckboxList`.\n    ')), AnnAssign(target=Name(id='open_character', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='close_character', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='container_style', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='default_style', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='selected_style', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='checked_style', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='multiple_selection', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='show_scrollbar', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='values', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='_T', ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default_values', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='default_values', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='default_values', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Store())], value=Name(id='values', ctx=Load())), AnnAssign(target=Name(id='keys', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='value', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), value=ListComp(elt=Name(id='value', ctx=Load()), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='default_values', ctx=Load()), ifs=[Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Name(id='keys', ctx=Load())])], is_async=0)]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='current_value', ctx=Store()), annotation=Name(id='_T', ctx=Load()), value=IfExp(test=BoolOp(op=And(), values=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='default_values', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='default_values', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Name(id='keys', ctx=Load())])]), body=Subscript(value=Name(id='default_values', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Subscript(value=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), simple=0), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='keys', ctx=Load()), attr='index', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_up', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='up')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_down', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='down')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_pageup', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_window', ctx=Load())), If(test=Attribute(value=Name(id='w', ctx=Load()), attr='render_info', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='render_info', ctx=Load()), attr='displayed_lines', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='pageup')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_pagedown', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='current_window', ctx=Load())), If(test=Attribute(value=Name(id='w', ctx=Load()), attr='render_info', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='render_info', ctx=Load()), attr='displayed_lines', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='pagedown')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_click', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_enter', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='enter')], keywords=[]), Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=' ')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_find', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load())], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=BinOp(left=Subscript(value=Name(id='values', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), op=Add(), right=Name(id='values', ctx=Load())), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='data', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Return()], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Store())], value=Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_fragments', ctx=Load())], keywords=[keyword(arg='key_bindings', value=Name(id='kb', ctx=Load())), keyword(arg='focusable', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load())), keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='container_style', ctx=Load())), keyword(arg='right_margins', value=List(elts=[Call(func=Name(id='ConditionalMargin', ctx=Load()), args=[], keywords=[keyword(arg='margin', value=Call(func=Name(id='ScrollbarMargin', ctx=Load()), args=[], keywords=[keyword(arg='display_arrows', value=Constant(value=True))])), keyword(arg='filter', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='show_scrollbar', ctx=Load()))], keywords=[]))])], ctx=Load())), keyword(arg='dont_extend_height', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_handle_enter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='multiple_selection', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_value', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_text_fragments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='mouse_handler', args=arguments(posonlyargs=[], args=[arg(arg='mouse_event', annotation=Name(id='MouseEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Set `_selected_index` and `current_value` according to the y\n            position of the mouse click event.\n            ')), If(test=Compare(left=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='event_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MouseEventType', ctx=Load()), attr='MOUSE_UP', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='mouse_event', ctx=Load()), attr='position', ctx=Load()), attr='y', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_enter', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='multiple_selection', ctx=Load()), body=[Assign(targets=[Name(id='checked', ctx=Store())], value=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load())]))], orelse=[Assign(targets=[Name(id='checked', ctx=Store())], value=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='current_value', ctx=Load())]))]), Assign(targets=[Name(id='selected', ctx=Store())], value=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_selected_index', ctx=Load())])), Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='')), If(test=Name(id='checked', ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='checked_style', ctx=Load())))], orelse=[]), If(test=Name(id='selected', ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='selected_style', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='open_character', ctx=Load())], ctx=Load())], keywords=[])), If(test=Name(id='selected', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='[SetCursorPosition]'), Constant(value='')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='checked', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Constant(value='*')], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='style', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='close_character', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='default_style', ctx=Load()), Constant(value=' ')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='default_style', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Tuple(elts=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='mouse_handler', ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='RadioList', bases=[Subscript(value=Name(id='_DialogList', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    List of radio buttons. Only one can be checked at the same time.\n\n    :param values: List of (value, label) tuples.\n    ')), Assign(targets=[Name(id='open_character', ctx=Store())], value=Constant(value='(')), Assign(targets=[Name(id='close_character', ctx=Store())], value=Constant(value=')')), Assign(targets=[Name(id='container_style', ctx=Store())], value=Constant(value='class:radio-list')), Assign(targets=[Name(id='default_style', ctx=Store())], value=Constant(value='class:radio')), Assign(targets=[Name(id='selected_style', ctx=Store())], value=Constant(value='class:radio-selected')), Assign(targets=[Name(id='checked_style', ctx=Store())], value=Constant(value='class:radio-checked')), Assign(targets=[Name(id='multiple_selection', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='values', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='_T', ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='default', annotation=BinOp(left=Name(id='_T', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='default_values', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='default_values', ctx=Store())], value=List(elts=[Name(id='default', ctx=Load())], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[keyword(arg='default_values', value=Name(id='default_values', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='CheckboxList', bases=[Subscript(value=Name(id='_DialogList', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    List of checkbox buttons. Several can be checked at the same time.\n\n    :param values: List of (value, label) tuples.\n    ')), Assign(targets=[Name(id='open_character', ctx=Store())], value=Constant(value='[')), Assign(targets=[Name(id='close_character', ctx=Store())], value=Constant(value=']')), Assign(targets=[Name(id='container_style', ctx=Store())], value=Constant(value='class:checkbox-list')), Assign(targets=[Name(id='default_style', ctx=Store())], value=Constant(value='class:checkbox')), Assign(targets=[Name(id='selected_style', ctx=Store())], value=Constant(value='class:checkbox-selected')), Assign(targets=[Name(id='checked_style', ctx=Store())], value=Constant(value='class:checkbox-checked')), Assign(targets=[Name(id='multiple_selection', ctx=Store())], value=Constant(value=True))], decorator_list=[]), ClassDef(name='Checkbox', bases=[Subscript(value=Name(id='CheckboxList', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Backward compatibility util: creates a 1-sized CheckboxList\n\n    :param text: the text\n    ')), Assign(targets=[Name(id='show_scrollbar', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='checked', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=False)]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='value'), Name(id='text', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='values', value=Name(id='values', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='checked', ctx=Store())], value=Name(id='checked', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='checked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Constant(value='value'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='checked', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='value', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Store())], value=List(elts=[Constant(value='value')], ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_values', ctx=Store())], value=List(elts=[], ctx=Load()))])], decorator_list=[Attribute(value=Name(id='checked', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='VerticalLine', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A simple vertical line with a width of 1.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='VERTICAL', ctx=Load())), keyword(arg='style', value=Constant(value='class:line,vertical-line')), keyword(arg='width', value=Constant(value=1))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='HorizontalLine', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A simple horizontal line with a height of 1.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='char', value=Attribute(value=Name(id='Border', ctx=Load()), attr='HORIZONTAL', ctx=Load())), keyword(arg='style', value=Constant(value='class:line,horizontal-line')), keyword(arg='height', value=Constant(value=1))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='window', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[]), ClassDef(name='ProgressBar', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_percentage', ctx=Store())], value=Constant(value=60)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='label', ctx=Store())], value=Call(func=Name(id='Label', ctx=Load()), args=[Constant(value='60%')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Store())], value=Call(func=Name(id='FloatContainer', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Constant(value=1))])), keyword(arg='floats', value=List(elts=[Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Attribute(value=Name(id='self', ctx=Load()), attr='label', ctx=Load())), keyword(arg='top', value=Constant(value=0)), keyword(arg='bottom', value=Constant(value=0))]), Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='left', value=Constant(value=0)), keyword(arg='top', value=Constant(value=0)), keyword(arg='right', value=Constant(value=0)), keyword(arg='bottom', value=Constant(value=0)), keyword(arg='content', value=Call(func=Name(id='VSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='class:progress-bar.used')), keyword(arg='width', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='weight', value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_percentage', ctx=Load())], keywords=[]))])))]), Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Constant(value='class:progress-bar')), keyword(arg='width', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='weight', value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Constant(value=100), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_percentage', ctx=Load()))], keywords=[]))])))])], ctx=Load())], keywords=[]))])], ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='percentage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_percentage', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='percentage', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_percentage', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='label', ctx=Load()), attr='text', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value='%')]))], decorator_list=[Attribute(value=Name(id='percentage', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='__pt_container__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='container', ctx=Load()))], decorator_list=[], returns=Name(id='Container', ctx=Load()))], decorator_list=[])], type_ignores=[])