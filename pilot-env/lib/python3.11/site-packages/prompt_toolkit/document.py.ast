Module(body=[Expr(value=Constant(value='\nThe `Document` that implements all the text operations/querying.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='bisect')]), Import(names=[alias(name='re')]), Import(names=[alias(name='string')]), Import(names=[alias(name='weakref')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='NoReturn'), alias(name='Pattern'), alias(name='cast')], level=0), ImportFrom(module='clipboard', names=[alias(name='ClipboardData')], level=1), ImportFrom(module='filters', names=[alias(name='vi_mode')], level=1), ImportFrom(module='selection', names=[alias(name='PasteMode'), alias(name='SelectionState'), alias(name='SelectionType')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Document')], ctx=Load())), Assign(targets=[Name(id='_FIND_WORD_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([a-zA-Z0-9_]+|[^a-zA-Z0-9_\\s]+)')], keywords=[])), Assign(targets=[Name(id='_FIND_CURRENT_WORD_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([a-zA-Z0-9_]+|[^a-zA-Z0-9_\\s]+)')], keywords=[])), Assign(targets=[Name(id='_FIND_CURRENT_WORD_INCLUDE_TRAILING_WHITESPACE_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(([a-zA-Z0-9_]+|[^a-zA-Z0-9_\\s]+)\\s*)')], keywords=[])), Assign(targets=[Name(id='_FIND_BIG_WORD_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([^\\s]+)')], keywords=[])), Assign(targets=[Name(id='_FIND_CURRENT_BIG_WORD_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([^\\s]+)')], keywords=[])), Assign(targets=[Name(id='_FIND_CURRENT_BIG_WORD_INCLUDE_TRAILING_WHITESPACE_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([^\\s]+\\s*)')], keywords=[])), AnnAssign(target=Name(id='_text_to_document_cache', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_DocumentCache', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='_DocumentCache')], ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='weakref', ctx=Load()), attr='WeakValueDictionary', ctx=Load()), args=[], keywords=[])], keywords=[]), simple=1), ClassDef(name='_ImmutableLineList', bases=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Some protection for our 'lines' list, which is assumed to be immutable in the cache.\n    (Useful for detecting obvious bugs.)\n    ")), FunctionDef(name='_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='object', ctx=Load())), defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Attempt to modify an immutable list.')], keywords=[]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), Assign(targets=[Name(id='__setitem__', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='clear', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='extend', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='insert', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='pop', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='remove', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='reverse', ctx=Store())], value=Name(id='_error', ctx=Load())), Assign(targets=[Name(id='sort', ctx=Store())], value=Name(id='_error', ctx=Load()))], decorator_list=[]), ClassDef(name='_DocumentCache', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Store()), annotation=BinOp(left=Name(id='_ImmutableLineList', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='line_indexes', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='Document', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    This is a immutable class around the text and cursor position, and contains\n    methods for querying this data, e.g. to give the text before the cursor.\n\n    This class is usually instantiated by a :class:`~prompt_toolkit.buffer.Buffer`\n    object, and accessed as the `document` property of that class.\n\n    :param text: string\n    :param cursor_position: int\n    :param selection: :class:`.SelectionState`\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_text'), Constant(value='_cursor_position'), Constant(value='_selection'), Constant(value='_cache')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='cursor_position', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='selection', annotation=BinOp(left=Name(id='SelectionState', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=None)]), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='cursor_position', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='cursor_position', ctx=Load()), ops=[LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])])]), msg=Call(func=Name(id='AssertionError', ctx=Load()), args=[JoinedStr(values=[Constant(value='cursor_position='), FormattedValue(value=Name(id='cursor_position', ctx=Load()), conversion=114), Constant(value=', len_text='), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), conversion=114)])], keywords=[])), If(test=Compare(left=Name(id='cursor_position', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_position', ctx=Store())], value=Name(id='cursor_position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_selection', ctx=Store())], value=Name(id='selection', ctx=Load())), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Store())], value=Subscript(value=Name(id='_text_to_document_cache', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Store())], value=Call(func=Name(id='_DocumentCache', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='_text_to_document_cache', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Document', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='text', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='cursor_position', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='selection', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The document text.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The document cursor position.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cursor_position', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='selection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':class:`.SelectionState` object.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_selection', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='SelectionState', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='current_char', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return character under cursor or an empty string.')), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_char_relative_to_cursor', ctx=Load()), args=[Constant(value=0)], keywords=[]), Constant(value='')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='char_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return character before the cursor or an empty string.')), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_char_relative_to_cursor', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), Constant(value='')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='text_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='text_after_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='current_line_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Text from the start of the line until the cursor.')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Return(value=Name(id='text', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='current_line_after_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Text from the cursor until the end of the line.')), Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Return(value=Name(id='text', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='lines', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Array of all the lines.\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='lines', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='lines', ctx=Store())], value=Call(func=Name(id='_ImmutableLineList', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='lines', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_line_start_indexes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Array pointing to the start indexes of all the lines.\n        ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='line_indexes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='line_lengths', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='indexes', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), For(target=Name(id='line_length', ctx=Store()), iter=Name(id='line_lengths', ctx=Load()), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=BinOp(left=Name(id='line_length', ctx=Load()), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='indexes', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='indexes', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='line_indexes', ctx=Store())], value=Name(id='indexes', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='line_indexes', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='lines_from_current', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Array of the lines starting from the current line, until the last line.\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load())), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='line_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of lines in this document. If the document ends\n        with a trailing \\n, that counts as the beginning of a new line.')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='current_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the text on the line where the cursor is. (when the input\n        consists of just one line, it equals `text`.')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_before_cursor', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_after_cursor', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='leading_whitespace_in_current_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The leading whitespace in the left margin of the current line.')), Assign(targets=[Name(id='current_line', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load())), Assign(targets=[Name(id='length', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='current_line', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='current_line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))), Return(value=Subscript(value=Name(id='current_line', ctx=Load()), slice=Slice(upper=Name(id='length', ctx=Load())), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_char_relative_to_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='\n        Return character relative to cursor position, or empty string\n        ')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Name(id='offset', ctx=Load())), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='on_first_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when we are at the first line.\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='on_last_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        True when we are at the last line.\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='line_count', ctx=Load()), op=Sub(), right=Constant(value=1))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='cursor_position_row', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Current row. (0-based.)\n        ')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_line_start_index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[])), Return(value=Name(id='row', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='cursor_position_col', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Current column. (0-based.)\n        ')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='line_start_index', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_line_start_index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[])), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Name(id='line_start_index', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_find_line_start_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For the index of a character at a certain line, calculate the index of\n        the first character on that line.\n\n        Return (row, index) tuple.\n        ')), Assign(targets=[Name(id='indexes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_start_indexes', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='bisect', ctx=Load()), attr='bisect_right', ctx=Load()), args=[Name(id='indexes', ctx=Load()), Name(id='index', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Subscript(value=Name(id='indexes', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='translate_index_to_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Given an index for the text, return the corresponding (row, col) tuple.\n        (0-based. Returns (0, 0) for index=0.)\n        ')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='row_index', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_line_start_index', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='col', ctx=Store())], value=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Name(id='row_index', ctx=Load()))), Return(value=Tuple(elts=[Name(id='row', ctx=Load()), Name(id='col', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='translate_row_col_to_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load())), arg(arg='col', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Given a (row, col) tuple, return the corresponding index.\n        (Row and col params are 0-based.)\n\n        Negative row/col values are turned into zero.\n        ')), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_start_indexes', ctx=Load()), slice=Name(id='row', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='row', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[If(test=Compare(left=Name(id='row', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_start_indexes', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_start_indexes', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))])])], orelse=[], finalbody=[]), AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[Name(id='col', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[Name(id='result', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='is_cursor_at_the_end', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True when the cursor is at the end of the text.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_cursor_at_the_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True when the cursor is at the end of this line.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_char', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='\n'), Constant(value='')], ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='has_match_at_current_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sub', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        `True` when this substring is found at the cursor position.\n        ')), Return(value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='sub', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='find', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sub', annotation=Name(id='str', ctx=Load())), arg(arg='in_current_line', annotation=Name(id='bool', ctx=Load())), arg(arg='include_current_position', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Find `text` after the cursor, return position relative to the cursor\n        position. Return `None` if nothing was found.\n\n        :param count: Find the n-th occurrence.\n        ')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ignore_case', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[])), If(test=Name(id='in_current_line', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_after_cursor', ctx=Load()))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='include_current_position', ctx=Load())), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='flags', ctx=Store())], value=IfExp(test=Name(id='ignore_case', ctx=Load()), body=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), orelse=Constant(value=0))), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='sub', ctx=Load())], keywords=[]), Name(id='text', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[If(test=Name(id='include_current_position', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Return(value=BinOp(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=0)], keywords=[]), op=Add(), right=Constant(value=1)))])], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_all', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sub', annotation=Name(id='str', ctx=Load())), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Find all occurrences of the substring. Return a list of absolute\n        positions in the document.\n        ')), Assign(targets=[Name(id='flags', ctx=Store())], value=IfExp(test=Name(id='ignore_case', ctx=Load()), body=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), orelse=Constant(value=0))), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='sub', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='find_backwards', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sub', annotation=Name(id='str', ctx=Load())), arg(arg='in_current_line', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Find `text` before the cursor, return position relative to the cursor\n        position. Return `None` if nothing was found.\n\n        :param count: Find the n-th occurrence.\n        ')), If(test=Name(id='in_current_line', ctx=Load()), body=[Assign(targets=[Name(id='before_cursor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[Assign(targets=[Name(id='before_cursor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))]), Assign(targets=[Name(id='flags', ctx=Store())], value=IfExp(test=Name(id='ignore_case', ctx=Load()), body=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), orelse=Constant(value=0))), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Subscript(value=Name(id='sub', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), Name(id='before_cursor', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Return(value=BinOp(left=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=0)], keywords=[])), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sub', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_word_before_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='pattern', annotation=BinOp(left=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Give the word before the cursor.\n        If we have whitespace before the cursor this returns an empty string.\n\n        :param pattern: (None or compiled regex). When given, use this regex\n            pattern.\n        ')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_word_before_cursor_complete', ctx=Load()), args=[], keywords=[keyword(arg='WORD', value=Name(id='WORD', ctx=Load())), keyword(arg='pattern', value=Name(id='pattern', ctx=Load()))]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_start_of_previous_word', ctx=Load()), args=[], keywords=[keyword(arg='WORD', value=Name(id='WORD', ctx=Load())), keyword(arg='pattern', value=Name(id='pattern', ctx=Load()))]), Constant(value=0)])), Return(value=Subscript(value=Name(id='text_before_cursor', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[]), op=Add(), right=Name(id='start', ctx=Load()))), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_is_word_before_cursor_complete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='pattern', annotation=BinOp(left=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[If(test=Name(id='pattern', ctx=Load()), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_start_of_previous_word', ctx=Load()), args=[], keywords=[keyword(arg='WORD', value=Name(id='WORD', ctx=Load())), keyword(arg='pattern', value=Name(id='pattern', ctx=Load()))]), ops=[Is()], comparators=[Constant(value=None)]))], orelse=[Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='find_start_of_previous_word', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='pattern', annotation=BinOp(left=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return an index relative to the cursor position pointing to the start\n        of the previous word. Return `None` if nothing was found.\n\n        :param pattern: (None or compiled regex). When given, use this regex\n            pattern.\n        ')), Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='WORD', ctx=Load()), Name(id='pattern', ctx=Load())]))), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=Name(id='pattern', ctx=Load()), body=[Assign(targets=[Name(id='regex', ctx=Store())], value=Name(id='pattern', ctx=Load()))], orelse=[If(test=Name(id='WORD', ctx=Load()), body=[Assign(targets=[Name(id='regex', ctx=Store())], value=Name(id='_FIND_BIG_WORD_RE', ctx=Load()))], orelse=[Assign(targets=[Name(id='regex', ctx=Store())], value=Name(id='_FIND_WORD_RE', ctx=Load()))])]), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[Constant(value=0)], keywords=[])))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_boundaries_of_current_word', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='WORD', annotation=Name(id='bool', ctx=Load())), arg(arg='include_leading_whitespace', annotation=Name(id='bool', ctx=Load())), arg(arg='include_trailing_whitespace', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Return the relative boundaries (startpos, endpos) of the current word under the\n        cursor. (This is at the current line, because line boundaries obviously\n        don't belong to any word.)\n        If not on a word, this returns (0,0)\n        ")), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='text_after_cursor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line_after_cursor', ctx=Load())), FunctionDef(name='get_regex', args=arguments(posonlyargs=[], args=[arg(arg='include_whitespace', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Dict(keys=[Tuple(elts=[Constant(value=False), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=True)], ctx=Load())], values=[Name(id='_FIND_CURRENT_WORD_RE', ctx=Load()), Name(id='_FIND_CURRENT_WORD_INCLUDE_TRAILING_WHITESPACE_RE', ctx=Load()), Name(id='_FIND_CURRENT_BIG_WORD_RE', ctx=Load()), Name(id='_FIND_CURRENT_BIG_WORD_INCLUDE_TRAILING_WHITESPACE_RE', ctx=Load())]), slice=Tuple(elts=[Name(id='WORD', ctx=Load()), Name(id='include_whitespace', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='match_before', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_regex', ctx=Load()), args=[Name(id='include_leading_whitespace', ctx=Load())], keywords=[]), attr='search', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match_after', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_regex', ctx=Load()), args=[Name(id='include_trailing_whitespace', ctx=Load())], keywords=[]), attr='search', ctx=Load()), args=[Name(id='text_after_cursor', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='WORD', ctx=Load())), Name(id='match_before', ctx=Load()), Name(id='match_after', ctx=Load())]), body=[Assign(targets=[Name(id='c1', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='c2', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='alphabet', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_letters', ctx=Load()), op=Add(), right=Constant(value='0123456789_'))), If(test=Compare(left=Compare(left=Name(id='c1', ctx=Load()), ops=[In()], comparators=[Name(id='alphabet', ctx=Load())]), ops=[NotEq()], comparators=[Compare(left=Name(id='c2', ctx=Load()), ops=[In()], comparators=[Name(id='alphabet', ctx=Load())])]), body=[Assign(targets=[Name(id='match_before', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[IfExp(test=Name(id='match_before', ctx=Load()), body=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='match_before', ctx=Load()), attr='end', ctx=Load()), args=[Constant(value=1)], keywords=[])), orelse=Constant(value=0)), IfExp(test=Name(id='match_after', ctx=Load()), body=Call(func=Attribute(value=Name(id='match_after', ctx=Load()), attr='end', ctx=Load()), args=[Constant(value=1)], keywords=[]), orelse=Constant(value=0))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_word_under_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the word, currently below the cursor.\n        This returns an empty string when the cursor is on a whitespace region.\n        ')), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_boundaries_of_current_word', ctx=Load()), args=[], keywords=[keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))])), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Name(id='start', ctx=Load())), upper=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Name(id='end', ctx=Load()))), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='find_next_word_beginning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return an index relative to the cursor position pointing to the start\n        of the next word. Return `None` if nothing was found.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_previous_word_beginning', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='regex', ctx=Store())], value=IfExp(test=Name(id='WORD', ctx=Load()), body=Name(id='_FIND_BIG_WORD_RE', ctx=Load()), orelse=Name(id='_FIND_WORD_RE', ctx=Load()))), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_next_word_ending', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include_current_position', annotation=Name(id='bool', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return an index relative to the cursor position pointing to the end\n        of the next word. Return `None` if nothing was found.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_previous_word_ending', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))]))], orelse=[]), If(test=Name(id='include_current_position', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load()))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))]), Assign(targets=[Name(id='regex', ctx=Store())], value=IfExp(test=Name(id='WORD', ctx=Load()), body=Name(id='_FIND_BIG_WORD_RE', ctx=Load()), orelse=Name(id='_FIND_WORD_RE', ctx=Load()))), Assign(targets=[Name(id='iterable', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[Constant(value=1)], keywords=[])), If(test=Name(id='include_current_position', ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='value', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_previous_word_beginning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return an index relative to the cursor position pointing to the start\n        of the previous word. Return `None` if nothing was found.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_next_word_beginning', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='regex', ctx=Store())], value=IfExp(test=Name(id='WORD', ctx=Load()), body=Name(id='_FIND_BIG_WORD_RE', ctx=Load()), orelse=Name(id='_FIND_WORD_RE', ctx=Load()))), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[Constant(value=1)], keywords=[])))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_previous_word_ending', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='WORD', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return an index relative to the cursor position pointing to the end\n        of the previous word. Return `None` if nothing was found.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_next_word_ending', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), keyword(arg='WORD', value=Name(id='WORD', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='text_before_cursor', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))), Assign(targets=[Name(id='regex', ctx=Store())], value=IfExp(test=Name(id='WORD', ctx=Load()), body=Name(id='_FIND_BIG_WORD_RE', ctx=Load()), orelse=Name(id='_FIND_WORD_RE', ctx=Load()))), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='text_before_cursor', ctx=Load())], keywords=[])), Try(body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='match', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iterator', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Eq()], comparators=[Name(id='count', ctx=Load())]), body=[Return(value=BinOp(left=UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[Constant(value=1)], keywords=[])), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_next_matching_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='match_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Look downwards for empty lines.\n        Return the line index, relative to the current line.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='match_func', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=Name(id='index', ctx=Load()))), AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Break()], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_previous_matching_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='match_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Look upwards for empty lines.\n        Return the line index, relative to the current line.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load())), ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='match_func', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='index', ctx=Load()))), AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Break()], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='get_cursor_left_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Relative position for cursor left.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_right_position', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load()), Name(id='count', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_cursor_right_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Relative position for cursor_right.\n        ')), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_left_position', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='count', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line_after_cursor', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_cursor_up_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='preferred_column', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return the relative cursor position (character index) where we would be if the\n        user pressed the arrow-up button.\n\n        :param preferred_column: When given, go to this column instead of\n                                 staying at the current column.\n        ')), Assert(test=Compare(left=Name(id='count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='column', ctx=Store())], value=IfExp(test=Compare(left=Name(id='preferred_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load()), orelse=Name(id='preferred_column', ctx=Load()))), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load()))], keywords=[]), Name(id='column', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_cursor_down_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='preferred_column', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return the relative cursor position (character index) where we would be if the\n        user pressed the arrow-down button.\n\n        :param preferred_column: When given, go to this column instead of\n                                 staying at the current column.\n        ')), Assert(test=Compare(left=Name(id='count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='column', ctx=Store())], value=IfExp(test=Compare(left=Name(id='preferred_column', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load()), orelse=Name(id='preferred_column', ctx=Load()))), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load()), op=Add(), right=Name(id='count', ctx=Load())), Name(id='column', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='find_enclosing_bracket_right', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left_ch', annotation=Name(id='str', ctx=Load())), arg(arg='right_ch', annotation=Name(id='str', ctx=Load())), arg(arg='end_pos', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Find the right bracket enclosing current position. Return the relative\n        position to the cursor position.\n\n        When `end_pos` is given, don't look past the position.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_char', ctx=Load()), ops=[Eq()], comparators=[Name(id='right_ch', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='end_pos', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='end_pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='end_pos', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]), Name(id='end_pos', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='stack', ctx=Store())], value=Constant(value=1)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='end_pos', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Name(id='left_ch', ctx=Load())]), body=[AugAssign(target=Name(id='stack', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Name(id='right_ch', ctx=Load())]), body=[AugAssign(target=Name(id='stack', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])]), If(test=Compare(left=Name(id='stack', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_enclosing_bracket_left', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left_ch', annotation=Name(id='str', ctx=Load())), arg(arg='right_ch', annotation=Name(id='str', ctx=Load())), arg(arg='start_pos', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Find the left bracket enclosing current position. Return the relative\n        position to the cursor position.\n\n        When `start_pos` is given, don't look past the position.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_char', ctx=Load()), ops=[Eq()], comparators=[Name(id='left_ch', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='start_pos', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='start_pos', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='start_pos', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='start_pos', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='stack', ctx=Store())], value=Constant(value=1)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Sub(), right=Constant(value=1)), BinOp(left=Name(id='start_pos', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Name(id='right_ch', ctx=Load())]), body=[AugAssign(target=Name(id='stack', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Name(id='left_ch', ctx=Load())]), body=[AugAssign(target=Name(id='stack', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])]), If(test=Compare(left=Name(id='stack', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='find_matching_bracket_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start_pos', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='end_pos', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n        Return relative cursor position of matching [, (, { or < bracket.\n\n        When `start_pos` or `end_pos` are given. Don't look past the positions.\n        ")), For(target=Name(id='pair', ctx=Store()), iter=Tuple(elts=[Constant(value='()'), Constant(value='[]'), Constant(value='{}'), Constant(value='<>')], ctx=Load()), body=[Assign(targets=[Name(id='A', ctx=Store())], value=Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='B', ctx=Store())], value=Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_char', ctx=Load()), ops=[Eq()], comparators=[Name(id='A', ctx=Load())]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_enclosing_bracket_right', ctx=Load()), args=[Name(id='A', ctx=Load()), Name(id='B', ctx=Load())], keywords=[keyword(arg='end_pos', value=Name(id='end_pos', ctx=Load()))]), Constant(value=0)]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_char', ctx=Load()), ops=[Eq()], comparators=[Name(id='B', ctx=Load())]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_enclosing_bracket_left', ctx=Load()), args=[Name(id='A', ctx=Load()), Name(id='B', ctx=Load())], keywords=[keyword(arg='start_pos', value=Name(id='start_pos', ctx=Load()))]), Constant(value=0)]))], orelse=[])])], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_start_of_document_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Relative position for the start of the document.')), Return(value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_end_of_document_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Relative position for the end of the document.')), Return(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_start_of_line_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='after_whitespace', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Relative position for the start of this line.')), If(test=Name(id='after_whitespace', ctx=Load()), body=[Assign(targets=[Name(id='current_line', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load())), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='current_line', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='current_line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load())))], orelse=[Return(value=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line_before_cursor', ctx=Load())], keywords=[])))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_end_of_line_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Relative position for the end of this line.')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line_after_cursor', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='last_non_blank_of_current_line_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Relative position for the last non blank character of this line.\n        ')), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load())), op=Sub(), right=Constant(value=1)))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_column_cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the relative cursor position for this column at the current\n        line. (It will stay between the boundaries of the line in case of a\n        larger number.)\n        ')), Assign(targets=[Name(id='line_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_column', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load())), Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[Name(id='line_length', ctx=Load()), Name(id='column', ctx=Load())], keywords=[])], keywords=[])), Return(value=BinOp(left=Name(id='column', ctx=Load()), op=Sub(), right=Name(id='current_column', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='selection_range', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return (from, to) tuple of the selection.\n        start and end position are included.\n\n        This doesn't take the selection type into account. Use\n        `selection_ranges` instead.\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='original_cursor_position', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())], ctx=Load()))]), Return(value=Tuple(elts=[Name(id='from_', ctx=Load()), Name(id='to', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='selection_ranges', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a list of `(from, to)` tuples for the selection or none if\n        nothing was selected. The upper boundary is not included.\n\n        This will yield several (from, to) tuples in case of a BLOCK selection.\n        This will return zero ranges, like (8,8) for empty lines in a block\n        selection.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='original_cursor_position', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='BLOCK', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='from_line', ctx=Store()), Name(id='from_column', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='to_line', ctx=Store()), Name(id='to_column', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='to', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='from_column', ctx=Store()), Name(id='to_column', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Name(id='from_column', ctx=Load()), Name(id='to_column', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load())), If(test=Call(func=Name(id='vi_mode', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='to_column', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), For(target=Name(id='l', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='from_line', ctx=Load()), BinOp(left=Name(id='to_line', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='line_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='l', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='from_column', ctx=Load()), ops=[LtE()], comparators=[Name(id='line_length', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='l', ctx=Load()), Name(id='from_column', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='l', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[Name(id='line_length', ctx=Load()), Name(id='to_column', ctx=Load())], keywords=[])], keywords=[])], ctx=Load())))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='LINES', ctx=Load())]), body=[Assign(targets=[Name(id='from_', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='from_', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n'), Name(id='to', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='to', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n'), Name(id='to', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='to', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))])], orelse=[]), If(test=Call(func=Name(id='vi_mode', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='to', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='from_', ctx=Load()), Name(id='to', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='selection_range_at_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        If the selection spans a portion of the given line, return a (from, to) tuple.\n\n        The returned upper boundary is not included in the selection, so\n        `(0, 0)` is an empty selection.  `(0, 1)`, is a one character selection.\n\n        Returns None if the selection doesn't cover this line at all.\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Name(id='row', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='row_start', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='row', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='row_end', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='row', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='original_cursor_position', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='intersection_start', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='row_start', ctx=Load()), Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='intersection_end', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='row_end', ctx=Load()), Name(id='to', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='intersection_start', ctx=Load()), ops=[LtE()], comparators=[Name(id='intersection_end', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='LINES', ctx=Load())]), body=[Assign(targets=[Name(id='intersection_start', ctx=Store())], value=Name(id='row_start', ctx=Load())), Assign(targets=[Name(id='intersection_end', ctx=Store())], value=Name(id='row_end', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='BLOCK', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='col1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='from_', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='col2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='to', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='col1', ctx=Store()), Name(id='col2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Name(id='col1', ctx=Load()), Name(id='col2', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='col1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='intersection_start', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='row', ctx=Load()), Name(id='col1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='intersection_end', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_row_col_to_index', ctx=Load()), args=[Name(id='row', ctx=Load()), Name(id='col2', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='from_column', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='intersection_start', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='to_column', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='translate_index_to_position', ctx=Load()), args=[Name(id='intersection_end', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='vi_mode', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='to_column', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Tuple(elts=[Name(id='from_column', ctx=Load()), Name(id='to_column', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='cut_selection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a (:class:`.Document`, :class:`.ClipboardData`) tuple, where the\n        document represents the new document when the selection is cut, and the\n        clipboard data, represents whatever has to be put on the clipboard.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), body=[Assign(targets=[Name(id='cut_parts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='remaining_parts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Assign(targets=[Name(id='last_to', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='from_', ctx=Store()), Name(id='to', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='selection_ranges', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='last_to', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=Name(id='from_', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='remaining_parts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='last_to', ctx=Load()), upper=Name(id='from_', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cut_parts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='from_', ctx=Load()), upper=Name(id='to', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_to', ctx=Store())], value=Name(id='to', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='remaining_parts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=Name(id='last_to', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cut_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='cut_parts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='remaining_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='remaining_parts', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='LINES', ctx=Load())]), Call(func=Attribute(value=Name(id='cut_text', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[])]), body=[Assign(targets=[Name(id='cut_text', ctx=Store())], value=Subscript(value=Name(id='cut_text', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='remaining_text', ctx=Load())), keyword(arg='cursor_position', value=Name(id='new_cursor_position', ctx=Load()))]), Call(func=Name(id='ClipboardData', ctx=Load()), args=[Name(id='cut_text', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()), attr='type', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='self', ctx=Load()), Call(func=Name(id='ClipboardData', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Document', ctx=Load()), Name(id='ClipboardData', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='paste_clipboard_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='ClipboardData', ctx=Load())), arg(arg='paste_mode', annotation=Name(id='PasteMode', ctx=Load())), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='PasteMode', ctx=Load()), attr='EMACS', ctx=Load()), Constant(value=1)]), body=[Expr(value=Constant(value='\n        Return a new :class:`.Document` instance which contains the result if\n        we would paste this data at the current cursor position.\n\n        :param paste_mode: Where to paste. (Before/after/emacs.)\n        :param count: When >1, Paste multiple times.\n        ')), Assign(targets=[Name(id='before', ctx=Store())], value=Compare(left=Name(id='paste_mode', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='PasteMode', ctx=Load()), attr='VI_BEFORE', ctx=Load())])), Assign(targets=[Name(id='after', ctx=Store())], value=Compare(left=Name(id='paste_mode', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='PasteMode', ctx=Load()), attr='VI_AFTER', ctx=Load())])), If(test=Compare(left=Attribute(value=Name(id='data', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='CHARACTERS', ctx=Load())]), body=[If(test=Name(id='after', ctx=Load()), body=[Assign(targets=[Name(id='new_text', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(upper=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), op=Add(), right=BinOp(left=Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load()), op=Mult(), right=Name(id='count', ctx=Load()))), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), slice=Slice(lower=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())))], orelse=[Assign(targets=[Name(id='new_text', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='text_before_cursor', ctx=Load()), op=Add(), right=BinOp(left=Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load()), op=Mult(), right=Name(id='count', ctx=Load()))), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load())))]), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='count', ctx=Load())))), If(test=Name(id='before', ctx=Load()), body=[AugAssign(target=Name(id='new_cursor_position', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='data', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='LINES', ctx=Load())]), body=[Assign(targets=[Name(id='l', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load())), If(test=Name(id='before', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=Name(id='l', ctx=Load())), ctx=Load()), op=Add(), right=BinOp(left=List(elts=[Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load())], ctx=Load()), op=Mult(), right=Name(id='count', ctx=Load()))), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=Name(id='l', ctx=Load())), ctx=Load()))), Assign(targets=[Name(id='new_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=Name(id='l', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Name(id='l', ctx=Load())))], orelse=[Assign(targets=[Name(id='lines', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='l', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), op=Add(), right=BinOp(left=List(elts=[Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load())], ctx=Load()), op=Mult(), right=Name(id='count', ctx=Load()))), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='l', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='l', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Name(id='l', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='new_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='data', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SelectionType', ctx=Load()), attr='BLOCK', ctx=Load())]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='start_line', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_row', ctx=Load())), Assign(targets=[Name(id='start_column', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position_col', ctx=Load()), op=Add(), right=IfExp(test=Name(id='before', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1)))), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='data', ctx=Load()), attr='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='start_line', ctx=Load()))), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), attr='ljust', ctx=Load()), args=[Name(id='start_column', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), slice=Slice(upper=Name(id='start_column', ctx=Load())), ctx=Load()), op=Add(), right=BinOp(left=Name(id='line', ctx=Load()), op=Mult(), right=Name(id='count', ctx=Load()))), op=Add(), right=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), slice=Slice(lower=Name(id='start_column', ctx=Load())), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='new_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_cursor_position', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=IfExp(test=Name(id='before', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1))))], orelse=[])])]), Return(value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='new_text', ctx=Load())), keyword(arg='cursor_position', value=Name(id='new_cursor_position', ctx=Load()))]))], decorator_list=[], returns=Name(id='Document', ctx=Load())), FunctionDef(name='empty_line_count_at_the_end', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return number of empty lines at the end of the document.\n        ')), Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=0)), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lines', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Break()])], orelse=[]), Return(value=Name(id='count', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='start_of_paragraph', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='before', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the start of the current paragraph. (Relative cursor position.)\n        ')), FunctionDef(name='match_func', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='text', ctx=Load())), Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='line_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_previous_matching_line', ctx=Load()), args=[], keywords=[keyword(arg='match_func', value=Name(id='match_func', ctx=Load())), keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Name(id='line_index', ctx=Load()), body=[Assign(targets=[Name(id='add', ctx=Store())], value=IfExp(test=Name(id='before', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1))), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_up_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=UnaryOp(op=USub(), operand=Name(id='line_index', ctx=Load())))]), op=Add(), right=Name(id='add', ctx=Load()))], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='end_of_paragraph', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load())), arg(arg='after', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the end of the current paragraph. (Relative cursor position.)\n        ')), FunctionDef(name='match_func', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='text', ctx=Load())), Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='line_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_next_matching_line', ctx=Load()), args=[], keywords=[keyword(arg='match_func', value=Name(id='match_func', ctx=Load())), keyword(arg='count', value=Name(id='count', ctx=Load()))])), If(test=Name(id='line_index', ctx=Load()), body=[Assign(targets=[Name(id='add', ctx=Store())], value=IfExp(test=Name(id='after', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1))), Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cursor_down_position', ctx=Load()), args=[], keywords=[keyword(arg='count', value=Name(id='line_index', ctx=Load()))]), op=Sub(), right=Name(id='add', ctx=Load()))], keywords=[]))], orelse=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text_after_cursor', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='insert_after', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a new document, with this text inserted after the buffer.\n        It keeps selection ranges and cursor position in sync.\n        ')), Return(value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), op=Add(), right=Name(id='text', ctx=Load()))), keyword(arg='cursor_position', value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), keyword(arg='selection', value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load()))]))], decorator_list=[], returns=Name(id='Document', ctx=Load())), FunctionDef(name='insert_before', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a new document, with this text inserted before the buffer.\n        It keeps selection ranges and cursor position in sync.\n        ')), Assign(targets=[Name(id='selection_state', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='selection', ctx=Load())), If(test=Name(id='selection_state', ctx=Load()), body=[Assign(targets=[Name(id='selection_state', ctx=Store())], value=Call(func=Name(id='SelectionState', ctx=Load()), args=[], keywords=[keyword(arg='original_cursor_position', value=BinOp(left=Attribute(value=Name(id='selection_state', ctx=Load()), attr='original_cursor_position', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))), keyword(arg='type', value=Attribute(value=Name(id='selection_state', ctx=Load()), attr='type', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Name(id='Document', ctx=Load()), args=[], keywords=[keyword(arg='text', value=BinOp(left=Name(id='text', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()))), keyword(arg='cursor_position', value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))), keyword(arg='selection', value=Name(id='selection_state', ctx=Load()))]))], decorator_list=[], returns=Name(id='Document', ctx=Load()))], decorator_list=[])], type_ignores=[])