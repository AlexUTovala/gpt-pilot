Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='asyncio.events', names=[alias(name='AbstractEventLoop')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='TextIO')], level=0), ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app_or_none'), alias(name='get_app_session')], level=0), ImportFrom(module='prompt_toolkit.application.run_in_terminal', names=[alias(name='run_in_terminal')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='FormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.input', names=[alias(name='DummyInput')], level=0), ImportFrom(module='prompt_toolkit.layout', names=[alias(name='Layout')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='ColorDepth'), alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.output.defaults', names=[alias(name='create_output')], level=0), ImportFrom(module='prompt_toolkit.renderer', names=[alias(name='print_formatted_text', asname='renderer_print_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='BaseStyle'), alias(name='StyleTransformation'), alias(name='default_pygments_style'), alias(name='default_ui_style'), alias(name='merge_styles')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.layout.containers', names=[alias(name='AnyContainer')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='print_formatted_text'), Constant(value='print_container'), Constant(value='clear'), Constant(value='set_title'), Constant(value='clear_title')], ctx=Load())), FunctionDef(name='print_formatted_text', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='values', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='file', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='flush', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=' '), Constant(value='\n'), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value="\n    ::\n\n        print_formatted_text(*values, sep=' ', end='\\n', file=None, flush=False, style=None, output=None)\n\n    Print text to stdout. This is supposed to be compatible with Python's print\n    function, but supports printing of formatted text. You can pass a\n    :class:`~prompt_toolkit.formatted_text.FormattedText`,\n    :class:`~prompt_toolkit.formatted_text.HTML` or\n    :class:`~prompt_toolkit.formatted_text.ANSI` object to print formatted\n    text.\n\n    * Print HTML as follows::\n\n        print_formatted_text(HTML('<i>Some italic text</i> <ansired>This is red!</ansired>'))\n\n        style = Style.from_dict({\n            'hello': '#ff0066',\n            'world': '#884444 italic',\n        })\n        print_formatted_text(HTML('<hello>Hello</hello> <world>world</world>!'), style=style)\n\n    * Print a list of (style_str, text) tuples in the given style to the\n      output.  E.g.::\n\n        style = Style.from_dict({\n            'hello': '#ff0066',\n            'world': '#884444 italic',\n        })\n        fragments = FormattedText([\n            ('class:hello', 'Hello'),\n            ('class:world', 'World'),\n        ])\n        print_formatted_text(fragments, style=style)\n\n    If you want to print a list of Pygments tokens, wrap it in\n    :class:`~prompt_toolkit.formatted_text.PygmentsTokens` to do the\n    conversion.\n\n    If a prompt_toolkit `Application` is currently running, this will always\n    print above the application or prompt (similar to `patch_stdout`). So,\n    `print_formatted_text` will erase the current application, print the text,\n    and render the application again.\n\n    :param values: Any kind of printable object, or formatted string.\n    :param sep: String inserted between values, default a space.\n    :param end: String appended after the last value, default a newline.\n    :param style: :class:`.Style` instance for the color scheme.\n    :param include_default_pygments_style: `bool`. Include the default Pygments\n        style when set to `True` (the default).\n    ")), Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='output', ctx=Load()), Name(id='file', ctx=Load())]))), If(test=Compare(left=Name(id='output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='file', ctx=Load()), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='create_output', ctx=Load()), args=[], keywords=[keyword(arg='stdout', value=Name(id='file', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load()))])], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='output', ctx=Load()), Name(id='Output', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_depth', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='color_depth', ctx=Load()), Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='get_default_color_depth', ctx=Load()), args=[], keywords=[])])), FunctionDef(name='to_text', args=arguments(posonlyargs=[], args=[arg(arg='val', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='FormattedText', ctx=Load())], keywords=[]))]), body=[Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='val', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[keyword(arg='auto_convert', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Assign(targets=[Name(id='fragments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_text', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='sep', ctx=Load()), Compare(left=Name(id='i', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_text', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fragments', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='to_text', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[])], keywords=[])), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='output', ctx=Load()), Name(id='Output', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='renderer_print_formatted_text', ctx=Load()), args=[Name(id='output', ctx=Load()), Name(id='fragments', ctx=Load()), Call(func=Name(id='_create_merged_style', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[keyword(arg='include_default_pygments_style', value=Name(id='include_default_pygments_style', ctx=Load()))])], keywords=[keyword(arg='color_depth', value=Name(id='color_depth', ctx=Load())), keyword(arg='style_transformation', value=Name(id='style_transformation', ctx=Load()))])), If(test=Name(id='flush', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='loop', ctx=Store()), annotation=BinOp(left=Name(id='AbstractEventLoop', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app_or_none', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='app', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Attribute(value=Name(id='app', ctx=Load()), attr='loop', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='loop', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Name(id='render', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='render', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_container', args=arguments(posonlyargs=[], args=[arg(arg='container', annotation=Name(id='AnyContainer', ctx=Load())), arg(arg='file', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value="\n    Print any layout to the output in a non-interactive way.\n\n    Example usage::\n\n        from prompt_toolkit.widgets import Frame, TextArea\n        print_container(\n            Frame(TextArea(text='Hello world!')))\n    ")), If(test=Name(id='file', ctx=Load()), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='create_output', ctx=Load()), args=[], keywords=[keyword(arg='stdout', value=Name(id='file', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load()))]), AnnAssign(target=Name(id='app', ctx=Store()), annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Constant(value=None), ctx=Load()), value=Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='layout', value=Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='container', value=Name(id='container', ctx=Load()))])), keyword(arg='output', value=Name(id='output', ctx=Load())), keyword(arg='input', value=Call(func=Name(id='DummyInput', ctx=Load()), args=[], keywords=[])), keyword(arg='style', value=Call(func=Name(id='_create_merged_style', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[keyword(arg='include_default_pygments_style', value=Name(id='include_default_pygments_style', ctx=Load()))]))]), simple=1), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='in_thread', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='EOFError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_create_merged_style', args=arguments(posonlyargs=[], args=[arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Merge user defined style with built-in style.\n    ')), Assign(targets=[Name(id='styles', ctx=Store())], value=List(elts=[Call(func=Name(id='default_ui_style', ctx=Load()), args=[], keywords=[])], ctx=Load())), If(test=Name(id='include_default_pygments_style', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='default_pygments_style', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='style', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='merge_styles', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseStyle', ctx=Load())), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Clear the screen.\n    ')), Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='erase_screen', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='cursor_goto', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Set the terminal title.\n    ')), Assign(targets=[Name(id='output', ctx=Store())], value=Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='set_title', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_title', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Erase the current title.\n    ')), Expr(value=Call(func=Name(id='set_title', ctx=Load()), args=[Constant(value='')], keywords=[]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])