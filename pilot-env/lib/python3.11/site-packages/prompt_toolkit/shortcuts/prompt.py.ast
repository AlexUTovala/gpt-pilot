Module(body=[Expr(value=Constant(value="\nLine editing functionality.\n---------------------------\n\nThis provides a UI for a line input, similar to GNU Readline, libedit and\nlinenoise.\n\nEither call the `prompt` function for every line input. Or create an instance\nof the :class:`.PromptSession` class and call the `prompt` method from that\nclass. In the second case, we'll have a 'session' that keeps all the state like\nthe history in between several calls.\n\nThere is a lot of overlap between the arguments taken by the `prompt` function\nand the `PromptSession` (like `completer`, `style`, etcetera). There we have\nthe freedom to decide which settings we want for the whole 'session', and which\nwe want for an individual `prompt`.\n\nExample::\n\n        # Simple `prompt` call.\n        result = prompt('Say something: ')\n\n        # Using a 'session'.\n        s = PromptSession()\n        result = s.prompt('Say something: ')\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='asyncio', names=[alias(name='get_running_loop')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Generic'), alias(name='Iterator'), alias(name='TypeVar'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app')], level=0), ImportFrom(module='prompt_toolkit.auto_suggest', names=[alias(name='AutoSuggest'), alias(name='DynamicAutoSuggest')], level=0), ImportFrom(module='prompt_toolkit.buffer', names=[alias(name='Buffer')], level=0), ImportFrom(module='prompt_toolkit.clipboard', names=[alias(name='Clipboard'), alias(name='DynamicClipboard'), alias(name='InMemoryClipboard')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='Completer'), alias(name='DynamicCompleter'), alias(name='ThreadedCompleter')], level=0), ImportFrom(module='prompt_toolkit.cursor_shapes', names=[alias(name='AnyCursorShapeConfig'), alias(name='CursorShapeConfig'), alias(name='DynamicCursorShapeConfig')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.enums', names=[alias(name='DEFAULT_BUFFER'), alias(name='SEARCH_BUFFER'), alias(name='EditingMode')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='FilterOrBool'), alias(name='has_arg'), alias(name='has_focus'), alias(name='is_done'), alias(name='is_true'), alias(name='renderer_height_is_known'), alias(name='to_filter')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='fragment_list_to_text'), alias(name='merge_formatted_text'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.history', names=[alias(name='History'), alias(name='InMemoryHistory')], level=0), ImportFrom(module='prompt_toolkit.input.base', names=[alias(name='Input')], level=0), ImportFrom(module='prompt_toolkit.key_binding.bindings.auto_suggest', names=[alias(name='load_auto_suggest_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.bindings.completion', names=[alias(name='display_completions_like_readline')], level=0), ImportFrom(module='prompt_toolkit.key_binding.bindings.open_in_editor', names=[alias(name='load_open_in_editor_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_bindings', names=[alias(name='ConditionalKeyBindings'), alias(name='DynamicKeyBindings'), alias(name='KeyBindings'), alias(name='KeyBindingsBase'), alias(name='merge_key_bindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.keys', names=[alias(name='Keys')], level=0), ImportFrom(module='prompt_toolkit.layout', names=[alias(name='Float'), alias(name='FloatContainer'), alias(name='HSplit'), alias(name='Window')], level=0), ImportFrom(module='prompt_toolkit.layout.containers', names=[alias(name='ConditionalContainer'), alias(name='WindowAlign')], level=0), ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='BufferControl'), alias(name='FormattedTextControl'), alias(name='SearchBufferControl')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='Dimension')], level=0), ImportFrom(module='prompt_toolkit.layout.layout', names=[alias(name='Layout')], level=0), ImportFrom(module='prompt_toolkit.layout.menus', names=[alias(name='CompletionsMenu'), alias(name='MultiColumnCompletionsMenu')], level=0), ImportFrom(module='prompt_toolkit.layout.processors', names=[alias(name='AfterInput'), alias(name='AppendAutoSuggestion'), alias(name='ConditionalProcessor'), alias(name='DisplayMultipleCursors'), alias(name='DynamicProcessor'), alias(name='HighlightIncrementalSearchProcessor'), alias(name='HighlightSelectionProcessor'), alias(name='PasswordProcessor'), alias(name='Processor'), alias(name='ReverseSearchProcessor'), alias(name='merge_processors')], level=0), ImportFrom(module='prompt_toolkit.layout.utils', names=[alias(name='explode_text_fragments')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='DynamicLexer'), alias(name='Lexer')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='ColorDepth'), alias(name='DummyOutput'), alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='BaseStyle'), alias(name='ConditionalStyleTransformation'), alias(name='DynamicStyle'), alias(name='DynamicStyleTransformation'), alias(name='StyleTransformation'), alias(name='SwapLightAndDarkStyleTransformation'), alias(name='merge_style_transformations')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth'), alias(name='is_dumb_terminal'), alias(name='suspend_to_background_supported'), alias(name='to_str')], level=0), ImportFrom(module='prompt_toolkit.validation', names=[alias(name='DynamicValidator'), alias(name='Validator')], level=0), ImportFrom(module='prompt_toolkit.widgets.toolbars', names=[alias(name='SearchToolbar'), alias(name='SystemToolbar'), alias(name='ValidationToolbar')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='prompt_toolkit.formatted_text.base', names=[alias(name='MagicFormattedText')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='PromptSession'), Constant(value='prompt'), Constant(value='confirm'), Constant(value='create_confirm_session'), Constant(value='CompleteStyle')], ctx=Load())), Assign(targets=[Name(id='_StyleAndTextTuplesCallable', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='StyleAndTextTuples', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), FunctionDef(name='_split_multiline_prompt', args=arguments(posonlyargs=[], args=[arg(arg='get_prompt_text', annotation=Name(id='_StyleAndTextTuplesCallable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Take a `get_prompt_text` function and return three new functions instead.\n    One that tells whether this prompt consists of multiple lines; one that\n    returns the fragments to be shown on the lines above the input; and another\n    one with the fragments to be shown at the first line of the input.\n    ')), FunctionDef(name='has_before_fragments', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='fragment', ctx=Store()), Name(id='char', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Call(func=Name(id='get_prompt_text', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='char', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='before', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='found_nl', ctx=Store())], value=Constant(value=False)), For(target=Tuple(elts=[Name(id='fragment', ctx=Store()), Name(id='char', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Call(func=Name(id='get_prompt_text', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), body=[If(test=Name(id='found_nl', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Tuple(elts=[Name(id='fragment', ctx=Load()), Name(id='char', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='found_nl', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='first_input_line', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='fragment', ctx=Store()), Name(id='char', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Call(func=Name(id='get_prompt_text', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Break()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Tuple(elts=[Name(id='fragment', ctx=Load()), Name(id='char', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Tuple(elts=[Name(id='has_before_fragments', ctx=Load()), Name(id='before', ctx=Load()), Name(id='first_input_line', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='_StyleAndTextTuplesCallable', ctx=Load()), Name(id='_StyleAndTextTuplesCallable', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_RPrompt', bases=[Name(id='Window', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The prompt that is displayed on the right side of the Window.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='text', ctx=Load()))])], keywords=[keyword(arg='align', value=Attribute(value=Name(id='WindowAlign', ctx=Load()), attr='RIGHT', ctx=Load())), keyword(arg='style', value=Constant(value='class:rprompt'))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='CompleteStyle', bases=[Name(id='str', ctx=Load()), Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    How to display autocompletions for the prompt.\n    ')), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Assign(targets=[Name(id='COLUMN', ctx=Store())], value=Constant(value='COLUMN')), Assign(targets=[Name(id='MULTI_COLUMN', ctx=Store())], value=Constant(value='MULTI_COLUMN')), Assign(targets=[Name(id='READLINE_LIKE', ctx=Store())], value=Constant(value='READLINE_LIKE'))], decorator_list=[]), Assign(targets=[Name(id='PromptContinuationText', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='MagicFormattedText'), Name(id='StyleAndTextTuples', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='AnyFormattedText', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), ClassDef(name='PromptSession', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    PromptSession for a prompt application, which can be used as a GNU Readline\n    replacement.\n\n    This is a wrapper around a lot of ``prompt_toolkit`` functionality and can\n    be a replacement for `raw_input`.\n\n    All parameters that expect "formatted text" can take either just plain text\n    (a unicode object), a list of ``(style_str, text)`` tuples or an HTML object.\n\n    Example usage::\n\n        s = PromptSession(message=\'>\')\n        text = s.prompt()\n\n    :param message: Plain text or formatted text to be shown before the prompt.\n        This can also be a callable that returns formatted text.\n    :param multiline: `bool` or :class:`~prompt_toolkit.filters.Filter`.\n        When True, prefer a layout that is more adapted for multiline input.\n        Text after newlines is automatically indented, and search/arg input is\n        shown below the input, instead of replacing the prompt.\n    :param wrap_lines: `bool` or :class:`~prompt_toolkit.filters.Filter`.\n        When True (the default), automatically wrap long lines instead of\n        scrolling horizontally.\n    :param is_password: Show asterisks instead of the actual typed characters.\n    :param editing_mode: ``EditingMode.VI`` or ``EditingMode.EMACS``.\n    :param vi_mode: `bool`, if True, Identical to ``editing_mode=EditingMode.VI``.\n    :param complete_while_typing: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Enable autocompletion while\n        typing.\n    :param validate_while_typing: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Enable input validation while\n        typing.\n    :param enable_history_search: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Enable up-arrow parting\n        string matching.\n    :param search_ignore_case:\n        :class:`~prompt_toolkit.filters.Filter`. Search case insensitive.\n    :param lexer: :class:`~prompt_toolkit.lexers.Lexer` to be used for the\n        syntax highlighting.\n    :param validator: :class:`~prompt_toolkit.validation.Validator` instance\n        for input validation.\n    :param completer: :class:`~prompt_toolkit.completion.Completer` instance\n        for input completion.\n    :param complete_in_thread: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Run the completer code in a\n        background thread in order to avoid blocking the user interface.\n        For ``CompleteStyle.READLINE_LIKE``, this setting has no effect. There\n        we always run the completions in the main thread.\n    :param reserve_space_for_menu: Space to be reserved for displaying the menu.\n        (0 means that no space needs to be reserved.)\n    :param auto_suggest: :class:`~prompt_toolkit.auto_suggest.AutoSuggest`\n        instance for input suggestions.\n    :param style: :class:`.Style` instance for the color scheme.\n    :param include_default_pygments_style: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Tell whether the default\n        styling for Pygments lexers has to be included. By default, this is\n        true, but it is recommended to be disabled if another Pygments style is\n        passed as the `style` argument, otherwise, two Pygments styles will be\n        merged.\n    :param style_transformation:\n        :class:`~prompt_toolkit.style.StyleTransformation` instance.\n    :param swap_light_and_dark_colors: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. When enabled, apply\n        :class:`~prompt_toolkit.style.SwapLightAndDarkStyleTransformation`.\n        This is useful for switching between dark and light terminal\n        backgrounds.\n    :param enable_system_prompt: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Pressing Meta+\'!\' will show\n        a system prompt.\n    :param enable_suspend: `bool` or :class:`~prompt_toolkit.filters.Filter`.\n        Enable Control-Z style suspension.\n    :param enable_open_in_editor: `bool` or\n        :class:`~prompt_toolkit.filters.Filter`. Pressing \'v\' in Vi mode or\n        C-X C-E in emacs mode will open an external editor.\n    :param history: :class:`~prompt_toolkit.history.History` instance.\n    :param clipboard: :class:`~prompt_toolkit.clipboard.Clipboard` instance.\n        (e.g. :class:`~prompt_toolkit.clipboard.InMemoryClipboard`)\n    :param rprompt: Text or formatted text to be displayed on the right side.\n        This can also be a callable that returns (formatted) text.\n    :param bottom_toolbar: Formatted text or callable which is supposed to\n        return formatted text.\n    :param prompt_continuation: Text that needs to be displayed for a multiline\n        prompt continuation. This can either be formatted text or a callable\n        that takes a `prompt_width`, `line_number` and `wrap_count` as input\n        and returns formatted text. When this is `None` (the default), then\n        `prompt_width` spaces will be used.\n    :param complete_style: ``CompleteStyle.COLUMN``,\n        ``CompleteStyle.MULTI_COLUMN`` or ``CompleteStyle.READLINE_LIKE``.\n    :param mouse_support: `bool` or :class:`~prompt_toolkit.filters.Filter`\n        to enable mouse support.\n    :param placeholder: Text to be displayed when no input has been given\n        yet. Unlike the `default` parameter, this won\'t be returned as part of\n        the output ever. This can be formatted text or a callable that returns\n        formatted text.\n    :param refresh_interval: (number; in seconds) When given, refresh the UI\n        every so many seconds.\n    :param input: `Input` object. (Note that the preferred way to change the\n        input/output is by creating an `AppSession`.)\n    :param output: `Output` object.\n    ')), Assign(targets=[Name(id='_fields', ctx=Store())], value=Tuple(elts=[Constant(value='message'), Constant(value='lexer'), Constant(value='completer'), Constant(value='complete_in_thread'), Constant(value='is_password'), Constant(value='editing_mode'), Constant(value='key_bindings'), Constant(value='is_password'), Constant(value='bottom_toolbar'), Constant(value='style'), Constant(value='style_transformation'), Constant(value='swap_light_and_dark_colors'), Constant(value='color_depth'), Constant(value='cursor'), Constant(value='include_default_pygments_style'), Constant(value='rprompt'), Constant(value='multiline'), Constant(value='prompt_continuation'), Constant(value='wrap_lines'), Constant(value='enable_history_search'), Constant(value='search_ignore_case'), Constant(value='complete_while_typing'), Constant(value='validate_while_typing'), Constant(value='complete_style'), Constant(value='mouse_support'), Constant(value='auto_suggest'), Constant(value='clipboard'), Constant(value='validator'), Constant(value='refresh_interval'), Constant(value='input_processors'), Constant(value='placeholder'), Constant(value='enable_system_prompt'), Constant(value='enable_suspend'), Constant(value='enable_open_in_editor'), Constant(value='reserve_space_for_menu'), Constant(value='tempfile_suffix'), Constant(value='tempfile')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='AnyFormattedText', ctx=Load()))], kwonlyargs=[arg(arg='multiline', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='wrap_lines', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='is_password', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='vi_mode', annotation=Name(id='bool', ctx=Load())), arg(arg='editing_mode', annotation=Name(id='EditingMode', ctx=Load())), arg(arg='complete_while_typing', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='validate_while_typing', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='enable_history_search', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='search_ignore_case', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_system_prompt', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='enable_suspend', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='enable_open_in_editor', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_in_thread', annotation=Name(id='bool', ctx=Load())), arg(arg='reserve_space_for_menu', annotation=Name(id='int', ctx=Load())), arg(arg='complete_style', annotation=Name(id='CompleteStyle', ctx=Load())), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='swap_light_and_dark_colors', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cursor', annotation=Name(id='AnyCursorShapeConfig', ctx=Load())), arg(arg='include_default_pygments_style', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='history', annotation=BinOp(left=Name(id='History', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='clipboard', annotation=BinOp(left=Name(id='Clipboard', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='prompt_continuation', annotation=BinOp(left=Name(id='PromptContinuationText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='rprompt', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='bottom_toolbar', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='mouse_support', annotation=Name(id='FilterOrBool', ctx=Load())), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='placeholder', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='erase_when_done', annotation=Name(id='bool', ctx=Load())), arg(arg='tempfile_suffix', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='refresh_interval', annotation=Name(id='float', ctx=Load())), arg(arg='input', annotation=BinOp(left=Name(id='Input', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Attribute(value=Name(id='EditingMode', ctx=Load()), attr='EMACS', ctx=Load()), Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=8), Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='COLUMN', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value='.txt'), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None)], defaults=[Constant(value='')]), body=[Assign(targets=[Name(id='history', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='history', ctx=Load()), Call(func=Name(id='InMemoryHistory', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='clipboard', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='clipboard', ctx=Load()), Call(func=Name(id='InMemoryClipboard', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='vi_mode', ctx=Load()), body=[Assign(targets=[Name(id='editing_mode', ctx=Store())], value=Attribute(value=Name(id='EditingMode', ctx=Load()), attr='VI', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Store())], value=Name(id='input', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store())], value=Name(id='output', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Store())], value=Name(id='lexer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_in_thread', ctx=Store())], value=Name(id='complete_in_thread', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_password', ctx=Store())], value=Name(id='is_password', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Store())], value=Name(id='bottom_toolbar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swap_light_and_dark_colors', ctx=Store())], value=Name(id='swap_light_and_dark_colors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Store())], value=Name(id='cursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_default_pygments_style', ctx=Store())], value=Name(id='include_default_pygments_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rprompt', ctx=Store())], value=Name(id='rprompt', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Store())], value=Name(id='multiline', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prompt_continuation', ctx=Store())], value=Name(id='prompt_continuation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Name(id='wrap_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Store())], value=Name(id='enable_history_search', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='search_ignore_case', ctx=Store())], value=Name(id='search_ignore_case', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Store())], value=Name(id='complete_while_typing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_while_typing', ctx=Store())], value=Name(id='validate_while_typing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Store())], value=Name(id='complete_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Store())], value=Name(id='mouse_support', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Store())], value=Name(id='auto_suggest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clipboard', ctx=Store())], value=Name(id='clipboard', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Name(id='refresh_interval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Store())], value=Name(id='input_processors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='placeholder', ctx=Store())], value=Name(id='placeholder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_system_prompt', ctx=Store())], value=Name(id='enable_system_prompt', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_suspend', ctx=Store())], value=Name(id='enable_suspend', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_open_in_editor', ctx=Store())], value=Name(id='enable_open_in_editor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reserve_space_for_menu', ctx=Store())], value=Name(id='reserve_space_for_menu', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Store())], value=Name(id='tempfile_suffix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Store())], value=Name(id='tempfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Store())], value=Name(id='history', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_default_buffer', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='search_buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_search_buffer', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_layout', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_application', ctx=Load()), args=[Name(id='editing_mode', ctx=Load()), Name(id='erase_when_done', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_dyncond', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attr_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Dynamically take this setting from this 'PromptSession' class.\n        `attr_name` represents an attribute name of this class. Its value\n        can either be a boolean or a `Filter`.\n\n        This returns something that can be used as either a `Filter`\n        or `Filter`.\n        ")), FunctionDef(name='dynamic', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='FilterOrBool', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr_name', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Call(func=Name(id='to_filter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), args=[], keywords=[]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Return(value=Name(id='dynamic', ctx=Load()))], decorator_list=[], returns=Name(id='Condition', ctx=Load())), FunctionDef(name='_create_default_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create and return the default input buffer.\n        ')), Assign(targets=[Name(id='dyncond', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_dyncond', ctx=Load())), FunctionDef(name='accept', args=arguments(posonlyargs=[], args=[arg(arg='buff', annotation=Name(id='Buffer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Accept the content of the default buffer. This is called when\n            the validation succeeds.')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Attribute(value=Attribute(value=Name(id='buff', ctx=Load()), attr='document', ctx=Load()), attr='text', ctx=Load()))])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Return(value=Call(func=Name(id='Buffer', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='DEFAULT_BUFFER', ctx=Load())), keyword(arg='complete_while_typing', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=And(), values=[Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='READLINE_LIKE', ctx=Load())]))]))], keywords=[])), keyword(arg='validate_while_typing', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='validate_while_typing')], keywords=[])), keyword(arg='enable_history_search', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='enable_history_search')], keywords=[])), keyword(arg='validator', value=Call(func=Name(id='DynamicValidator', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()))], keywords=[])), keyword(arg='completer', value=Call(func=Name(id='DynamicCompleter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_in_thread', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load())]), body=Call(func=Name(id='ThreadedCompleter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load())], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load())))], keywords=[])), keyword(arg='history', value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load())), keyword(arg='auto_suggest', value=Call(func=Name(id='DynamicAutoSuggest', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Load()))], keywords=[])), keyword(arg='accept_handler', value=Name(id='accept', ctx=Load())), keyword(arg='tempfile_suffix', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='to_str', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Load()), Constant(value='')])], keywords=[]))), keyword(arg='tempfile', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='to_str', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Load()), Constant(value='')])], keywords=[])))]))], decorator_list=[], returns=Name(id='Buffer', ctx=Load())), FunctionDef(name='_create_search_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Buffer', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='SEARCH_BUFFER', ctx=Load()))]))], decorator_list=[], returns=Name(id='Buffer', ctx=Load())), FunctionDef(name='_create_layout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create `Layout` for this prompt.\n        ')), Assign(targets=[Name(id='dyncond', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_dyncond', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='has_before_fragments', ctx=Store()), Name(id='get_prompt_text_1', ctx=Store()), Name(id='get_prompt_text_2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_multiline_prompt', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_prompt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='default_buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load())), Assign(targets=[Name(id='search_buffer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='search_buffer', ctx=Load())), FunctionDef(name='display_placeholder', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='placeholder', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='text', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='all_input_processors', ctx=Store())], value=List(elts=[Call(func=Name(id='HighlightIncrementalSearchProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='HighlightSelectionProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[Call(func=Name(id='AppendAutoSuggestion', ctx=Load()), args=[], keywords=[]), BinOp(left=Call(func=Name(id='has_focus', ctx=Load()), args=[Name(id='default_buffer', ctx=Load())], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))], keywords=[]), Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[Call(func=Name(id='PasswordProcessor', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='is_password')], keywords=[])], keywords=[]), Call(func=Name(id='DisplayMultipleCursors', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DynamicProcessor', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='merge_processors', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[]))], keywords=[]), Call(func=Name(id='ConditionalProcessor', ctx=Load()), args=[Call(func=Name(id='AfterInput', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='placeholder', ctx=Load()))], keywords=[])], keywords=[keyword(arg='filter', value=Name(id='display_placeholder', ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='bottom_toolbar', ctx=Store())], value=Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Load()))], keywords=[keyword(arg='style', value=Constant(value='class:bottom-toolbar.text'))])], keywords=[keyword(arg='style', value=Constant(value='class:bottom-toolbar')), keyword(arg='dont_extend_height', value=Constant(value=True)), keyword(arg='height', value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=1))]))])], keywords=[keyword(arg='filter', value=BinOp(left=BinOp(left=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load()))), op=BitAnd(), right=Name(id='renderer_height_is_known', ctx=Load())))])), Assign(targets=[Name(id='search_toolbar', ctx=Store())], value=Call(func=Name(id='SearchToolbar', ctx=Load()), args=[Name(id='search_buffer', ctx=Load())], keywords=[keyword(arg='ignore_case', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='search_ignore_case')], keywords=[]))])), Assign(targets=[Name(id='search_buffer_control', ctx=Store())], value=Call(func=Name(id='SearchBufferControl', ctx=Load()), args=[], keywords=[keyword(arg='buffer', value=Name(id='search_buffer', ctx=Load())), keyword(arg='input_processors', value=List(elts=[Call(func=Name(id='ReverseSearchProcessor', ctx=Load()), args=[], keywords=[])], ctx=Load())), keyword(arg='ignore_case', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='search_ignore_case')], keywords=[]))])), Assign(targets=[Name(id='system_toolbar', ctx=Store())], value=Call(func=Name(id='SystemToolbar', ctx=Load()), args=[], keywords=[keyword(arg='enable_global_bindings', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='enable_system_prompt')], keywords=[]))])), FunctionDef(name='get_search_buffer_control', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the UIControl to be focused when searching start.')), If(test=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='search_toolbar', ctx=Load()), attr='control', ctx=Load()))], orelse=[Return(value=Name(id='search_buffer_control', ctx=Load()))])], decorator_list=[], returns=Name(id='SearchBufferControl', ctx=Load())), Assign(targets=[Name(id='default_buffer_control', ctx=Store())], value=Call(func=Name(id='BufferControl', ctx=Load()), args=[], keywords=[keyword(arg='buffer', value=Name(id='default_buffer', ctx=Load())), keyword(arg='search_buffer_control', value=Name(id='get_search_buffer_control', ctx=Load())), keyword(arg='input_processors', value=Name(id='all_input_processors', ctx=Load())), keyword(arg='include_default_input_processors', value=Constant(value=False)), keyword(arg='lexer', value=Call(func=Name(id='DynamicLexer', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Load()))], keywords=[])), keyword(arg='preview_search', value=Constant(value=True))])), Assign(targets=[Name(id='default_buffer_window', ctx=Store())], value=Call(func=Name(id='Window', ctx=Load()), args=[Name(id='default_buffer_control', ctx=Load())], keywords=[keyword(arg='height', value=Attribute(value=Name(id='self', ctx=Load()), attr='_get_default_buffer_control_height', ctx=Load())), keyword(arg='get_line_prefix', value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_prefix', ctx=Load())], keywords=[keyword(arg='get_prompt_text_2', value=Name(id='get_prompt_text_2', ctx=Load()))])), keyword(arg='wrap_lines', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='wrap_lines')], keywords=[]))])), FunctionDef(name='multi_column_complete_style', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='MULTI_COLUMN', ctx=Load())]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='FloatContainer', ctx=Load()), args=[Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Name(id='get_prompt_text_1', ctx=Load())], keywords=[])], keywords=[keyword(arg='dont_extend_height', value=Constant(value=True))]), Call(func=Name(id='Condition', ctx=Load()), args=[Name(id='has_before_fragments', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Name(id='default_buffer_window', ctx=Load()), Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Load()), ops=[NotEq()], comparators=[Name(id='search_buffer_control', ctx=Load())]))], keywords=[])], keywords=[]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Name(id='search_buffer_control', ctx=Load())], keywords=[]), Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='layout', ctx=Load()), attr='current_control', ctx=Load()), ops=[Eq()], comparators=[Name(id='search_buffer_control', ctx=Load())]))], keywords=[])], keywords=[])], ctx=Load())], keywords=[]), List(elts=[Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='xcursor', value=Constant(value=True)), keyword(arg='ycursor', value=Constant(value=True)), keyword(arg='transparent', value=Constant(value=True)), keyword(arg='content', value=Call(func=Name(id='CompletionsMenu', ctx=Load()), args=[], keywords=[keyword(arg='max_height', value=Constant(value=16)), keyword(arg='scroll_offset', value=Constant(value=1)), keyword(arg='extra_filter', value=BinOp(left=Call(func=Name(id='has_focus', ctx=Load()), args=[Name(id='default_buffer', ctx=Load())], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='multi_column_complete_style', ctx=Load()))))]))]), Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='xcursor', value=Constant(value=True)), keyword(arg='ycursor', value=Constant(value=True)), keyword(arg='transparent', value=Constant(value=True)), keyword(arg='content', value=Call(func=Name(id='MultiColumnCompletionsMenu', ctx=Load()), args=[], keywords=[keyword(arg='show_meta', value=Constant(value=True)), keyword(arg='extra_filter', value=BinOp(left=Call(func=Name(id='has_focus', ctx=Load()), args=[Name(id='default_buffer', ctx=Load())], keywords=[]), op=BitAnd(), right=Name(id='multi_column_complete_style', ctx=Load())))]))]), Call(func=Name(id='Float', ctx=Load()), args=[], keywords=[keyword(arg='right', value=Constant(value=0)), keyword(arg='top', value=Constant(value=0)), keyword(arg='hide_when_covering_content', value=Constant(value=True)), keyword(arg='content', value=Call(func=Name(id='_RPrompt', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='rprompt', ctx=Load()))], keywords=[]))])], ctx=Load())], keywords=[]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='ValidationToolbar', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='filter', value=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Name(id='system_toolbar', ctx=Load()), BinOp(left=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='enable_system_prompt')], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))], keywords=[]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_arg_text', ctx=Load())], keywords=[])], keywords=[keyword(arg='height', value=Constant(value=1))]), BinOp(left=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='multiline')], keywords=[]), op=BitAnd(), right=Name(id='has_arg', ctx=Load()))], keywords=[]), Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Name(id='search_toolbar', ctx=Load()), BinOp(left=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='multiline')], keywords=[]), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())))], keywords=[]), Name(id='bottom_toolbar', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Layout', ctx=Load()), args=[Name(id='layout', ctx=Load()), Name(id='default_buffer_window', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Layout', ctx=Load())), FunctionDef(name='_create_application', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='editing_mode', annotation=Name(id='EditingMode', ctx=Load())), arg(arg='erase_when_done', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create the `Application` object.\n        ')), Assign(targets=[Name(id='dyncond', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_dyncond', ctx=Load())), Assign(targets=[Name(id='auto_suggest_bindings', ctx=Store())], value=Call(func=Name(id='load_auto_suggest_bindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='open_in_editor_bindings', ctx=Store())], value=Call(func=Name(id='load_open_in_editor_bindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prompt_bindings', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_prompt_bindings', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='application', ctx=Store()), annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='layout', value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())), keyword(arg='style', value=Call(func=Name(id='DynamicStyle', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()))], keywords=[])), keyword(arg='style_transformation', value=Call(func=Name(id='merge_style_transformations', ctx=Load()), args=[List(elts=[Call(func=Name(id='DynamicStyleTransformation', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Load()))], keywords=[]), Call(func=Name(id='ConditionalStyleTransformation', ctx=Load()), args=[Call(func=Name(id='SwapLightAndDarkStyleTransformation', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='swap_light_and_dark_colors')], keywords=[])], keywords=[])], ctx=Load())], keywords=[])), keyword(arg='include_default_pygments_style', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='include_default_pygments_style')], keywords=[])), keyword(arg='clipboard', value=Call(func=Name(id='DynamicClipboard', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='clipboard', ctx=Load()))], keywords=[])), keyword(arg='key_bindings', value=Call(func=Name(id='merge_key_bindings', ctx=Load()), args=[List(elts=[Call(func=Name(id='merge_key_bindings', ctx=Load()), args=[List(elts=[Name(id='auto_suggest_bindings', ctx=Load()), Call(func=Name(id='ConditionalKeyBindings', ctx=Load()), args=[Name(id='open_in_editor_bindings', ctx=Load()), BinOp(left=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='enable_open_in_editor')], keywords=[]), op=BitAnd(), right=Call(func=Name(id='has_focus', ctx=Load()), args=[Name(id='DEFAULT_BUFFER', ctx=Load())], keywords=[]))], keywords=[]), Name(id='prompt_bindings', ctx=Load())], ctx=Load())], keywords=[]), Call(func=Name(id='DynamicKeyBindings', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()))], keywords=[])], ctx=Load())], keywords=[])), keyword(arg='mouse_support', value=Call(func=Name(id='dyncond', ctx=Load()), args=[Constant(value='mouse_support')], keywords=[])), keyword(arg='editing_mode', value=Name(id='editing_mode', ctx=Load())), keyword(arg='erase_when_done', value=Name(id='erase_when_done', ctx=Load())), keyword(arg='reverse_vi_search_direction', value=Constant(value=True)), keyword(arg='color_depth', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load()))), keyword(arg='cursor', value=Call(func=Name(id='DynamicCursorShapeConfig', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()))], keywords=[])), keyword(arg='refresh_interval', value=Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load())), keyword(arg='input', value=Attribute(value=Name(id='self', ctx=Load()), attr='_input', ctx=Load())), keyword(arg='output', value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()))]), simple=1), Expr(value=Constant(value='\n        def on_render(app):\n            multiline = is_true(self.multiline)\n            current_control = app.layout.current_control\n\n            if multiline:\n                if current_control == search_buffer_control:\n                    app.layout.current_control = search_toolbar.control\n                    app.invalidate()\n            else:\n                if current_control == search_toolbar.control:\n                    app.layout.current_control = search_buffer_control\n                    app.invalidate()\n\n        app.on_render += on_render\n        ')), Return(value=Name(id='application', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), FunctionDef(name='_create_prompt_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create the KeyBindings for a prompt application.\n        ')), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load())), Assign(targets=[Name(id='default_focused', ctx=Store())], value=Call(func=Name(id='has_focus', ctx=Load()), args=[Name(id='DEFAULT_BUFFER', ctx=Load())], keywords=[])), FunctionDef(name='do_accept', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Load())], keywords=[])), Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='layout', ctx=Load()), attr='has_focus', ctx=Load()), args=[Name(id='DEFAULT_BUFFER', ctx=Load())], keywords=[])]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_accept_input', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Accept input when enter has been pressed.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='validate_and_handle', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='enter')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='do_accept', ctx=Load()), op=BitAnd(), right=Name(id='default_focused', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='readline_complete_style', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='READLINE_LIKE', ctx=Load())]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_complete_like_readline', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Display completions (like Readline).')), Expr(value=Call(func=Name(id='display_completions_like_readline', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='tab')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='readline_complete_style', ctx=Load()), op=BitAnd(), right=Name(id='default_focused', ctx=Load())))])], returns=Constant(value=None)), FunctionDef(name='_keyboard_interrupt', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Abort when Control-C has been pressed.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='KeyboardInterrupt', ctx=Load())), keyword(arg='style', value=Constant(value='class:aborting'))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-c')], keywords=[keyword(arg='filter', value=Name(id='default_focused', ctx=Load()))]), Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='<sigint>')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='ctrl_d_condition', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ctrl-D binding is only active when the default buffer is selected\n            and empty.')), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_BUFFER', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='current_buffer', ctx=Load()), attr='text', ctx=Load()))]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_eof', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exit when Control-D has been pressed.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='EOFError', ctx=Load())), keyword(arg='style', value=Constant(value='class:exiting'))]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-d')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='ctrl_d_condition', ctx=Load()), op=BitAnd(), right=Name(id='default_focused', ctx=Load())))])], returns=Constant(value=None)), Assign(targets=[Name(id='suspend_supported', ctx=Store())], value=Call(func=Name(id='Condition', ctx=Load()), args=[Name(id='suspend_to_background_supported', ctx=Load())], keywords=[])), FunctionDef(name='enable_suspend', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='to_filter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_suspend', ctx=Load())], keywords=[]), args=[], keywords=[]))], decorator_list=[Name(id='Condition', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_suspend', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Suspend process to background.\n            ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='suspend_to_background', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='handle', ctx=Load()), args=[Constant(value='c-z')], keywords=[keyword(arg='filter', value=BinOp(left=Name(id='suspend_supported', ctx=Load()), op=BitAnd(), right=Name(id='enable_suspend', ctx=Load())))])], returns=Constant(value=None)), Return(value=Name(id='kb', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load())), FunctionDef(name='prompt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[arg(arg='editing_mode', annotation=BinOp(left=Name(id='EditingMode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='refresh_interval', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='vi_mode', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_in_thread', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='is_password', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='bottom_toolbar', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cursor', annotation=BinOp(left=Name(id='AnyCursorShapeConfig', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='swap_light_and_dark_colors', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='rprompt', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multiline', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='prompt_continuation', annotation=BinOp(left=Name(id='PromptContinuationText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='wrap_lines', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_history_search', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='search_ignore_case', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validate_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_style', annotation=BinOp(left=Name(id='CompleteStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='clipboard', annotation=BinOp(left=Name(id='Clipboard', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='mouse_support', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='placeholder', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='reserve_space_for_menu', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_system_prompt', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_suspend', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_open_in_editor', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile_suffix', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='default', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Document', ctx=Load()))), arg(arg='accept_default', annotation=Name(id='bool', ctx=Load())), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='set_exception_handler', annotation=Name(id='bool', ctx=Load())), arg(arg='handle_sigint', annotation=Name(id='bool', ctx=Load())), arg(arg='in_thread', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=''), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=False)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Display the prompt.\n\n        The first set of arguments is a subset of the :class:`~.PromptSession`\n        class itself. For these, passing in ``None`` will keep the current\n        values that are active in the session. Passing in a value will set the\n        attribute for the session, which means that it applies to the current,\n        but also to the next prompts.\n\n        Note that in order to erase a ``Completer``, ``Validator`` or\n        ``AutoSuggest``, you can't use ``None``. Instead pass in a\n        ``DummyCompleter``, ``DummyValidator`` or ``DummyAutoSuggest`` instance\n        respectively. For a ``Lexer`` you can pass in an empty ``SimpleLexer``.\n\n        Additional arguments, specific for this prompt:\n\n        :param default: The default input text to be shown. (This can be edited\n            by the user).\n        :param accept_default: When `True`, automatically accept the default\n            value without allowing the user to edit the input.\n        :param pre_run: Callable, called at the start of `Application.run`.\n        :param in_thread: Run the prompt in a background thread; block the\n            current thread. This avoids interference with an event loop in the\n            current thread. Like `Application.run(in_thread=True)`.\n\n        This method will raise ``KeyboardInterrupt`` when control-c has been\n        pressed (for abort) and ``EOFError`` when control-d has been pressed\n        (for exit).\n        ")), If(test=Compare(left=Name(id='message', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='editing_mode', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editing_mode', ctx=Store())], value=Name(id='editing_mode', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='refresh_interval', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Name(id='refresh_interval', ctx=Load()))], orelse=[]), If(test=Name(id='vi_mode', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editing_mode', ctx=Store())], value=Attribute(value=Name(id='EditingMode', ctx=Load()), attr='VI', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='lexer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Store())], value=Name(id='lexer', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='completer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_in_thread', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_in_thread', ctx=Store())], value=Name(id='complete_in_thread', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='is_password', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_password', ctx=Store())], value=Name(id='is_password', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='key_bindings', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='bottom_toolbar', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Store())], value=Name(id='bottom_toolbar', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='color_depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='cursor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Store())], value=Name(id='cursor', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='include_default_pygments_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_default_pygments_style', ctx=Store())], value=Name(id='include_default_pygments_style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='style_transformation', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='swap_light_and_dark_colors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swap_light_and_dark_colors', ctx=Store())], value=Name(id='swap_light_and_dark_colors', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='rprompt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rprompt', ctx=Store())], value=Name(id='rprompt', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='multiline', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Store())], value=Name(id='multiline', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='prompt_continuation', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prompt_continuation', ctx=Store())], value=Name(id='prompt_continuation', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='wrap_lines', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Name(id='wrap_lines', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_history_search', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Store())], value=Name(id='enable_history_search', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='search_ignore_case', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='search_ignore_case', ctx=Store())], value=Name(id='search_ignore_case', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_while_typing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Store())], value=Name(id='complete_while_typing', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='validate_while_typing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_while_typing', ctx=Store())], value=Name(id='validate_while_typing', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Store())], value=Name(id='complete_style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='auto_suggest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Store())], value=Name(id='auto_suggest', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='validator', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='clipboard', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clipboard', ctx=Store())], value=Name(id='clipboard', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='mouse_support', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Store())], value=Name(id='mouse_support', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='input_processors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Store())], value=Name(id='input_processors', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='placeholder', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='placeholder', ctx=Store())], value=Name(id='placeholder', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='reserve_space_for_menu', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reserve_space_for_menu', ctx=Store())], value=Name(id='reserve_space_for_menu', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_system_prompt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_system_prompt', ctx=Store())], value=Name(id='enable_system_prompt', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_suspend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_suspend', ctx=Store())], value=Name(id='enable_suspend', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_open_in_editor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_open_in_editor', ctx=Store())], value=Name(id='enable_open_in_editor', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='tempfile_suffix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Store())], value=Name(id='tempfile_suffix', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='tempfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Store())], value=Name(id='tempfile', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_pre_run_callables', ctx=Load()), args=[Name(id='pre_run', ctx=Load()), Name(id='accept_default', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='reset', ctx=Load()), args=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default', ctx=Load()), Name(id='Document', ctx=Load())], keywords=[]), body=Name(id='default', ctx=Load()), orelse=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='is_dumb_terminal', ctx=Load()), args=[], keywords=[])]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_dumb_prompt', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]), optional_vars=Name(id='dump_app', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='dump_app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='in_thread', value=Name(id='in_thread', ctx=Load())), keyword(arg='handle_sigint', value=Name(id='handle_sigint', ctx=Load()))]))])], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='set_exception_handler', value=Name(id='set_exception_handler', ctx=Load())), keyword(arg='in_thread', value=Name(id='in_thread', ctx=Load())), keyword(arg='handle_sigint', value=Name(id='handle_sigint', ctx=Load()))]))], decorator_list=[], returns=Name(id='_T', ctx=Load())), FunctionDef(name='_dumb_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='AnyFormattedText', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value="\n        Create prompt `Application` for prompt function for dumb terminals.\n\n        Dumb terminals have minimum rendering capabilities. We can only print\n        text to the screen. We can't use colors, and we can't do cursor\n        movements. The Emacs inferior shell is an example of a dumb terminal.\n\n        We will show the prompt, and wait for the input. We still handle arrow\n        keys, and all custom key bindings, but we don't really render the\n        cursor movements. Instead we only print the typed character that's\n        right before the cursor.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='key_bindings', ctx=Store()), annotation=Name(id='KeyBindingsBase', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_prompt_bindings', ctx=Load()), args=[], keywords=[]), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()), body=[Assign(targets=[Name(id='key_bindings', ctx=Store())], value=Call(func=Name(id='merge_key_bindings', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load()), Name(id='key_bindings', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='application', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='input', value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load())), keyword(arg='output', value=Call(func=Name(id='DummyOutput', ctx=Load()), args=[], keywords=[])), keyword(arg='layout', value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load()))])], keywords=[])), FunctionDef(name='on_text_changed', args=arguments(posonlyargs=[], args=[arg(arg='_', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='write', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='document', ctx=Load()), attr='text_before_cursor', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='on_text_changed', ctx=Store()), op=Add(), value=Name(id='on_text_changed', ctx=Load())), Try(body=[Expr(value=Yield(value=Name(id='application', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\r\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='on_text_changed', ctx=Store()), op=Sub(), value=Name(id='on_text_changed', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Application', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), ctx=Load())), AsyncFunctionDef(name='prompt_async', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[arg(arg='editing_mode', annotation=BinOp(left=Name(id='EditingMode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='refresh_interval', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='vi_mode', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_in_thread', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='is_password', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='bottom_toolbar', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cursor', annotation=BinOp(left=Name(id='CursorShapeConfig', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='include_default_pygments_style', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='swap_light_and_dark_colors', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='rprompt', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multiline', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='prompt_continuation', annotation=BinOp(left=Name(id='PromptContinuationText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='wrap_lines', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_history_search', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='search_ignore_case', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validate_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_style', annotation=BinOp(left=Name(id='CompleteStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='clipboard', annotation=BinOp(left=Name(id='Clipboard', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='mouse_support', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='placeholder', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='reserve_space_for_menu', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_system_prompt', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_suspend', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_open_in_editor', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile_suffix', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='default', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='Document', ctx=Load()))), arg(arg='accept_default', annotation=Name(id='bool', ctx=Load())), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='set_exception_handler', annotation=Name(id='bool', ctx=Load())), arg(arg='handle_sigint', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=''), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True)], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='message', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='editing_mode', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editing_mode', ctx=Store())], value=Name(id='editing_mode', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='refresh_interval', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Name(id='refresh_interval', ctx=Load()))], orelse=[]), If(test=Name(id='vi_mode', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editing_mode', ctx=Store())], value=Attribute(value=Name(id='EditingMode', ctx=Load()), attr='VI', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='lexer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Store())], value=Name(id='lexer', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='completer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Store())], value=Name(id='completer', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_in_thread', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_in_thread', ctx=Store())], value=Name(id='complete_in_thread', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='is_password', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_password', ctx=Store())], value=Name(id='is_password', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='key_bindings', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='bottom_toolbar', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Store())], value=Name(id='bottom_toolbar', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='color_depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='cursor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Store())], value=Name(id='cursor', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='include_default_pygments_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_default_pygments_style', ctx=Store())], value=Name(id='include_default_pygments_style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='style_transformation', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_transformation', ctx=Store())], value=Name(id='style_transformation', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='swap_light_and_dark_colors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swap_light_and_dark_colors', ctx=Store())], value=Name(id='swap_light_and_dark_colors', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='rprompt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rprompt', ctx=Store())], value=Name(id='rprompt', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='multiline', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Store())], value=Name(id='multiline', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='prompt_continuation', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prompt_continuation', ctx=Store())], value=Name(id='prompt_continuation', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='wrap_lines', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap_lines', ctx=Store())], value=Name(id='wrap_lines', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_history_search', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_history_search', ctx=Store())], value=Name(id='enable_history_search', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='search_ignore_case', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='search_ignore_case', ctx=Store())], value=Name(id='search_ignore_case', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_while_typing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_while_typing', ctx=Store())], value=Name(id='complete_while_typing', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='validate_while_typing', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_while_typing', ctx=Store())], value=Name(id='validate_while_typing', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='complete_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Store())], value=Name(id='complete_style', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='auto_suggest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_suggest', ctx=Store())], value=Name(id='auto_suggest', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='validator', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='clipboard', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clipboard', ctx=Store())], value=Name(id='clipboard', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='mouse_support', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mouse_support', ctx=Store())], value=Name(id='mouse_support', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='input_processors', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input_processors', ctx=Store())], value=Name(id='input_processors', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='placeholder', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='placeholder', ctx=Store())], value=Name(id='placeholder', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='reserve_space_for_menu', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reserve_space_for_menu', ctx=Store())], value=Name(id='reserve_space_for_menu', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_system_prompt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_system_prompt', ctx=Store())], value=Name(id='enable_system_prompt', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_suspend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_suspend', ctx=Store())], value=Name(id='enable_suspend', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='enable_open_in_editor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_open_in_editor', ctx=Store())], value=Name(id='enable_open_in_editor', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='tempfile_suffix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile_suffix', ctx=Store())], value=Name(id='tempfile_suffix', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='tempfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempfile', ctx=Store())], value=Name(id='tempfile', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_pre_run_callables', ctx=Load()), args=[Name(id='pre_run', ctx=Load()), Name(id='accept_default', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='reset', ctx=Load()), args=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default', ctx=Load()), Name(id='Document', ctx=Load())], keywords=[]), body=Name(id='default', ctx=Load()), orelse=Call(func=Name(id='Document', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='refresh_interval', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='refresh_interval', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='is_dumb_terminal', ctx=Load()), args=[], keywords=[])]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_dumb_prompt', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]), optional_vars=Name(id='dump_app', ctx=Store()))], body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='dump_app', ctx=Load()), attr='run_async', ctx=Load()), args=[], keywords=[keyword(arg='handle_sigint', value=Name(id='handle_sigint', ctx=Load()))])))])], orelse=[]), Return(value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='run_async', ctx=Load()), args=[], keywords=[keyword(arg='set_exception_handler', value=Name(id='set_exception_handler', ctx=Load())), keyword(arg='handle_sigint', value=Name(id='handle_sigint', ctx=Load()))])))], decorator_list=[], returns=Name(id='_T', ctx=Load())), FunctionDef(name='_add_pre_run_callables', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='accept_default', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='pre_run2', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='pre_run', ctx=Load()), body=[Expr(value=Call(func=Name(id='pre_run', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='accept_default', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_running_loop', ctx=Load()), args=[], keywords=[]), attr='call_soon', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load()), attr='validate_and_handle', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='pre_run_callables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='pre_run2', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='editing_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='editing_mode', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='EditingMode', ctx=Load())), FunctionDef(name='editing_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='EditingMode', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='editing_mode', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='editing_mode', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_get_default_buffer_control_height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='completer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='READLINE_LIKE', ctx=Load())])]), body=[Assign(targets=[Name(id='space', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='reserve_space_for_menu', ctx=Load()))], orelse=[Assign(targets=[Name(id='space', ctx=Store())], value=Constant(value=0))]), If(test=BoolOp(op=And(), values=[Name(id='space', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='is_done', ctx=Load()))]), body=[Assign(targets=[Name(id='buff', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='default_buffer', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='buff', ctx=Load()), attr='complete_while_typing', ctx=Load()), args=[], keywords=[]), Compare(left=Attribute(value=Name(id='buff', ctx=Load()), attr='complete_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Name(id='space', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Dimension', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Dimension', ctx=Load())), FunctionDef(name='_get_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:prompt'))]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_get_continuation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='line_number', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Insert the prompt continuation.\n\n        :param width: The width that was used for the prompt. (more or less can\n            be used.)\n        :param line_number:\n        :param wrap_count: Amount of times that the line has been wrapped.\n        ')), Assign(targets=[Name(id='prompt_continuation', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='prompt_continuation', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='prompt_continuation', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='continuation', ctx=Store()), annotation=Name(id='AnyFormattedText', ctx=Load()), value=Call(func=Name(id='prompt_continuation', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='line_number', ctx=Load()), Name(id='wrap_count', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='continuation', ctx=Store())], value=Name(id='prompt_continuation', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='continuation', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='continuation', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='width', ctx=Load())))], orelse=[]), Return(value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='continuation', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:prompt-continuation'))]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_get_line_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line_number', annotation=Name(id='int', ctx=Load())), arg(arg='wrap_count', annotation=Name(id='int', ctx=Load())), arg(arg='get_prompt_text_2', annotation=Name(id='_StyleAndTextTuplesCallable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return whatever needs to be inserted before every line.\n        (the prompt, or a line continuation.)\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='line_number', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='wrap_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='is_true', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='multiline', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Attribute(value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[]), attr='key_processor', ctx=Load()), attr='arg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_inline_arg', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Name(id='get_prompt_text_2', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='prompt_width', ctx=Store())], value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Call(func=Name(id='fragment_list_to_text', ctx=Load()), args=[Call(func=Name(id='get_prompt_text_2', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_continuation', ctx=Load()), args=[Name(id='prompt_width', ctx=Load()), Name(id='line_number', ctx=Load()), Name(id='wrap_count', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_get_arg_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="'arg' toolbar, for in multiline mode.")), Assign(targets=[Name(id='arg', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Load())), If(test=Compare(left=Name(id='arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='arg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Constant(value='-1'))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Constant(value='class:arg-toolbar'), Constant(value='Repeat: ')], ctx=Load()), Tuple(elts=[Constant(value='class:arg-toolbar.text'), Name(id='arg', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='_inline_arg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="'arg' prefix, for in single line mode.")), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='arg', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='app', ctx=Load()), attr='key_processor', ctx=Load()), attr='arg', ctx=Load())), Return(value=List(elts=[Tuple(elts=[Constant(value='class:prompt.arg'), Constant(value='(arg: ')], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.arg.text'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='class:prompt.arg'), Constant(value=') ')], ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='input', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='input', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Input', ctx=Load())), FunctionDef(name='output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='output', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Output', ctx=Load()))], decorator_list=[]), FunctionDef(name='prompt', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[arg(arg='history', annotation=BinOp(left=Name(id='History', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='editing_mode', annotation=BinOp(left=Name(id='EditingMode', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='refresh_interval', annotation=BinOp(left=Name(id='float', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='vi_mode', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='lexer', annotation=BinOp(left=Name(id='Lexer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='completer', annotation=BinOp(left=Name(id='Completer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_in_thread', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='is_password', annotation=BinOp(left=Name(id='bool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindingsBase', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='bottom_toolbar', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cursor', annotation=Name(id='AnyCursorShapeConfig', ctx=Load())), arg(arg='include_default_pygments_style', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='style_transformation', annotation=BinOp(left=Name(id='StyleTransformation', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='swap_light_and_dark_colors', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='rprompt', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multiline', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='prompt_continuation', annotation=BinOp(left=Name(id='PromptContinuationText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='wrap_lines', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_history_search', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='search_ignore_case', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validate_while_typing', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='complete_style', annotation=BinOp(left=Name(id='CompleteStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='auto_suggest', annotation=BinOp(left=Name(id='AutoSuggest', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='validator', annotation=BinOp(left=Name(id='Validator', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='clipboard', annotation=BinOp(left=Name(id='Clipboard', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='mouse_support', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input_processors', annotation=BinOp(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Processor', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='placeholder', annotation=BinOp(left=Name(id='AnyFormattedText', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='reserve_space_for_menu', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_system_prompt', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_suspend', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='enable_open_in_editor', annotation=BinOp(left=Name(id='FilterOrBool', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile_suffix', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='tempfile', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), op=BitOr(), right=Constant(value=None))), arg(arg='in_thread', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Name(id='str', ctx=Load())), arg(arg='accept_default', annotation=Name(id='bool', ctx=Load())), arg(arg='pre_run', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=''), Constant(value=False), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    The global `prompt` function. This will create a new `PromptSession`\n    instance for every call.\n    ')), AnnAssign(target=Name(id='session', ctx=Store()), annotation=Subscript(value=Name(id='PromptSession', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='PromptSession', ctx=Load()), args=[], keywords=[keyword(arg='history', value=Name(id='history', ctx=Load()))]), simple=1), Return(value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='prompt', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[keyword(arg='editing_mode', value=Name(id='editing_mode', ctx=Load())), keyword(arg='refresh_interval', value=Name(id='refresh_interval', ctx=Load())), keyword(arg='vi_mode', value=Name(id='vi_mode', ctx=Load())), keyword(arg='lexer', value=Name(id='lexer', ctx=Load())), keyword(arg='completer', value=Name(id='completer', ctx=Load())), keyword(arg='complete_in_thread', value=Name(id='complete_in_thread', ctx=Load())), keyword(arg='is_password', value=Name(id='is_password', ctx=Load())), keyword(arg='key_bindings', value=Name(id='key_bindings', ctx=Load())), keyword(arg='bottom_toolbar', value=Name(id='bottom_toolbar', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='color_depth', value=Name(id='color_depth', ctx=Load())), keyword(arg='cursor', value=Name(id='cursor', ctx=Load())), keyword(arg='include_default_pygments_style', value=Name(id='include_default_pygments_style', ctx=Load())), keyword(arg='style_transformation', value=Name(id='style_transformation', ctx=Load())), keyword(arg='swap_light_and_dark_colors', value=Name(id='swap_light_and_dark_colors', ctx=Load())), keyword(arg='rprompt', value=Name(id='rprompt', ctx=Load())), keyword(arg='multiline', value=Name(id='multiline', ctx=Load())), keyword(arg='prompt_continuation', value=Name(id='prompt_continuation', ctx=Load())), keyword(arg='wrap_lines', value=Name(id='wrap_lines', ctx=Load())), keyword(arg='enable_history_search', value=Name(id='enable_history_search', ctx=Load())), keyword(arg='search_ignore_case', value=Name(id='search_ignore_case', ctx=Load())), keyword(arg='complete_while_typing', value=Name(id='complete_while_typing', ctx=Load())), keyword(arg='validate_while_typing', value=Name(id='validate_while_typing', ctx=Load())), keyword(arg='complete_style', value=Name(id='complete_style', ctx=Load())), keyword(arg='auto_suggest', value=Name(id='auto_suggest', ctx=Load())), keyword(arg='validator', value=Name(id='validator', ctx=Load())), keyword(arg='clipboard', value=Name(id='clipboard', ctx=Load())), keyword(arg='mouse_support', value=Name(id='mouse_support', ctx=Load())), keyword(arg='input_processors', value=Name(id='input_processors', ctx=Load())), keyword(arg='placeholder', value=Name(id='placeholder', ctx=Load())), keyword(arg='reserve_space_for_menu', value=Name(id='reserve_space_for_menu', ctx=Load())), keyword(arg='enable_system_prompt', value=Name(id='enable_system_prompt', ctx=Load())), keyword(arg='enable_suspend', value=Name(id='enable_suspend', ctx=Load())), keyword(arg='enable_open_in_editor', value=Name(id='enable_open_in_editor', ctx=Load())), keyword(arg='tempfile_suffix', value=Name(id='tempfile_suffix', ctx=Load())), keyword(arg='tempfile', value=Name(id='tempfile', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='accept_default', value=Name(id='accept_default', ctx=Load())), keyword(arg='pre_run', value=Name(id='pre_run', ctx=Load())), keyword(arg='in_thread', value=Name(id='in_thread', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='prompt', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='PromptSession', ctx=Load()), attr='prompt', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='create_confirm_session', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' (y/n) ')]), body=[Expr(value=Constant(value="\n    Create a `PromptSession` object for the 'confirm' function.\n    ")), Assign(targets=[Name(id='bindings', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='yes', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='default_buffer', ctx=Load()), attr='text', ctx=Store())], value=Constant(value='y')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Constant(value=True))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='y')], keywords=[]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='Y')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='no', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='default_buffer', ctx=Load()), attr='text', ctx=Store())], value=Constant(value='n')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load()), args=[], keywords=[keyword(arg='result', value=Constant(value=False))]))], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='n')], keywords=[]), Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='N')], keywords=[])], returns=Constant(value=None)), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disallow inserting other text.')), Pass()], decorator_list=[Call(func=Attribute(value=Name(id='bindings', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='Keys', ctx=Load()), attr='Any', ctx=Load())], keywords=[])], returns=Constant(value=None)), Assign(targets=[Name(id='complete_message', ctx=Store())], value=Call(func=Name(id='merge_formatted_text', ctx=Load()), args=[List(elts=[Name(id='message', ctx=Load()), Name(id='suffix', ctx=Load())], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='session', ctx=Store()), annotation=Subscript(value=Name(id='PromptSession', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Call(func=Name(id='PromptSession', ctx=Load()), args=[Name(id='complete_message', ctx=Load())], keywords=[keyword(arg='key_bindings', value=Name(id='bindings', ctx=Load()))]), simple=1), Return(value=Name(id='session', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='PromptSession', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), FunctionDef(name='confirm', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='Confirm?'), Constant(value=' (y/n) ')]), body=[Expr(value=Constant(value='\n    Display a confirmation prompt that returns True/False.\n    ')), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Name(id='create_confirm_session', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='prompt', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])