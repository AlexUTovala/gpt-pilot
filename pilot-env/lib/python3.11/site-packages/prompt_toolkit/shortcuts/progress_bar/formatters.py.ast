Module(body=[Expr(value=Constant(value='\nFormatter classes for the progress bar.\nEach progress bar consists of a list of these formatters.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='datetime')]), Import(names=[alias(name='time')]), ImportFrom(module='abc', names=[alias(name='ABCMeta'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='HTML'), alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.formatted_text.utils', names=[alias(name='fragment_list_width')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='AnyDimension'), alias(name='D')], level=0), ImportFrom(module='prompt_toolkit.layout.utils', names=[alias(name='explode_text_fragments')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='get_cwidth')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='base', names=[alias(name='ProgressBar'), alias(name='ProgressBarCounter')], level=1)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Formatter'), Constant(value='Text'), Constant(value='Label'), Constant(value='Percentage'), Constant(value='Bar'), Constant(value='Progress'), Constant(value='TimeElapsed'), Constant(value='TimeLeft'), Constant(value='IterationsPerSecond'), Constant(value='SpinningWheel'), Constant(value='Rainbow'), Constant(value='create_default_formatters')], ctx=Load())), ClassDef(name='Formatter', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='ABCMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base class for any formatter.\n    ')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='Text', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display plain text.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='Label', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Display the name of the current task.\n\n    :param width: If a `width` is given, use this width. Scroll the text if it\n        doesn't fit in this width.\n    :param suffix: String suffix to be added after the task name, e.g. ': '.\n        If no task name was given, no suffix will be added.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='AnyDimension', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Store())], value=Name(id='suffix', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_add_suffix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='label', annotation=Name(id='AnyFormattedText', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='class:label'))])), Return(value=BinOp(left=Name(id='label', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Constant(value=''), Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_suffix', ctx=Load()), args=[Attribute(value=Name(id='progress', ctx=Load()), attr='label', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cwidth', ctx=Store())], value=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cwidth', ctx=Load()), ops=[Gt()], comparators=[Name(id='width', ctx=Load())]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_scroll', ctx=Store())], value=BinOp(left=Name(id='cwidth', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))), Assign(targets=[Name(id='current_scroll', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=3)), op=Mod(), right=Name(id='max_scroll', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='label', ctx=Store())], value=Subscript(value=Name(id='label', ctx=Load()), slice=Slice(lower=Name(id='current_scroll', ctx=Load())), ctx=Load()))], orelse=[]), Return(value=Name(id='label', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='all_labels', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_suffix', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='label', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='counters', ctx=Load()), ifs=[], is_async=0)])), If(test=Name(id='all_labels', ctx=Load()), body=[Assign(targets=[Name(id='max_widths', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='fragment_list_width', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='l', ctx=Store()), iter=Name(id='all_labels', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Name(id='max_widths', ctx=Load())), keyword(arg='max', value=Name(id='max_widths', ctx=Load()))]))], orelse=[Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='Percentage', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the progress as a percentage.\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='<percentage>{percentage:>5}%</percentage>')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='percentage', value=Call(func=Name(id='round', ctx=Load()), args=[Attribute(value=Name(id='progress', ctx=Load()), attr='percentage', ctx=Load()), Constant(value=1)], keywords=[]))]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='D', ctx=Load()), attr='exact', ctx=Load()), args=[Constant(value=6)], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='Bar', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the progress bar itself.\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='<bar>{start}<bar-a>{bar_a}</bar-a><bar-b>{bar_b}</bar-b><bar-c>{bar_c}</bar-c>{end}</bar>')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='sym_a', annotation=Name(id='str', ctx=Load())), arg(arg='sym_b', annotation=Name(id='str', ctx=Load())), arg(arg='sym_c', annotation=Name(id='str', ctx=Load())), arg(arg='unknown', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='['), Constant(value=']'), Constant(value='='), Constant(value='>'), Constant(value=' '), Constant(value='#')]), body=[Assert(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sym_a', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='sym_a', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])])), Assert(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sym_c', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='get_cwidth', ctx=Load()), args=[Name(id='sym_c', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Store())], value=Name(id='start', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Store())], value=Name(id='end', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sym_a', ctx=Store())], value=Name(id='sym_a', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sym_b', ctx=Store())], value=Name(id='sym_b', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sym_c', ctx=Store())], value=Name(id='sym_c', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='unknown', ctx=Store())], value=Name(id='unknown', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='progress', ctx=Load()), attr='done', ctx=Load()), Attribute(value=Name(id='progress', ctx=Load()), attr='total', ctx=Load()), Attribute(value=Name(id='progress', ctx=Load()), attr='stopped', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='sym_a', ctx=Store()), Name(id='sym_b', ctx=Store()), Name(id='sym_c', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='sym_a', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='sym_b', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='sym_c', ctx=Load())], ctx=Load())), If(test=Attribute(value=Name(id='progress', ctx=Load()), attr='done', ctx=Load()), body=[Assign(targets=[Name(id='percent', ctx=Store())], value=Constant(value=1.0))], orelse=[Assign(targets=[Name(id='percent', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='progress', ctx=Load()), attr='percentage', ctx=Load()), op=Div(), right=Constant(value=100)))])], orelse=[Assign(targets=[Tuple(elts=[Name(id='sym_a', ctx=Store()), Name(id='sym_b', ctx=Store()), Name(id='sym_c', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='sym_c', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unknown', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='sym_c', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='percent', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=20)), op=Mod(), right=Constant(value=100)), op=Div(), right=Constant(value=100)))]), AugAssign(target=Name(id='width', ctx=Store()), op=Sub(), value=Call(func=Name(id='get_cwidth', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Load()), op=Add(), right=Name(id='sym_b', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='pb_a', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='percent', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='bar_a', ctx=Store())], value=BinOp(left=Name(id='sym_a', ctx=Load()), op=Mult(), right=Name(id='pb_a', ctx=Load()))), Assign(targets=[Name(id='bar_b', ctx=Store())], value=Name(id='sym_b', ctx=Load())), Assign(targets=[Name(id='bar_c', ctx=Store())], value=BinOp(left=Name(id='sym_c', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='pb_a', ctx=Load())))), Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='start', value=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Load())), keyword(arg='end', value=Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Load())), keyword(arg='bar_a', value=Name(id='bar_a', ctx=Load())), keyword(arg='bar_b', value=Name(id='bar_b', ctx=Load())), keyword(arg='bar_c', value=Name(id='bar_c', ctx=Load()))]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='min', value=Constant(value=9))]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='Progress', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the progress as text.  E.g. "8/20"\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='<current>{current:>3}</current>/<total>{total:>3}</total>')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='current', value=Attribute(value=Name(id='progress', ctx=Load()), attr='items_completed', ctx=Load())), keyword(arg='total', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='progress', ctx=Load()), attr='total', ctx=Load()), Constant(value='?')]))]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_lengths', ctx=Store())], value=ListComp(elt=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{:>3}'), attr='format', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='c', ctx=Load()), attr='total', ctx=Load()), Constant(value='?')])], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='counters', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='all_lengths', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=1)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='D', ctx=Load()), attr='exact', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='all_lengths', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=2)), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), FunctionDef(name='_format_timedelta', args=arguments(posonlyargs=[], args=[arg(arg='timedelta', annotation=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return hh:mm:ss, or mm:ss if the amount of hours is zero.\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=JoinedStr(values=[FormattedValue(value=Name(id='timedelta', ctx=Load()), conversion=-1)]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='0:')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='TimeElapsed', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the elapsed time.\n    ')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_format_timedelta', ctx=Load()), args=[Attribute(value=Name(id='progress', ctx=Load()), attr='time_elapsed', ctx=Load())], keywords=[]), attr='rjust', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Constant(value='<time-elapsed>{time_elapsed}</time-elapsed>')], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='time_elapsed', value=Name(id='text', ctx=Load()))]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_values', ctx=Store())], value=ListComp(elt=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='_format_timedelta', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='time_elapsed', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='counters', ctx=Load()), ifs=[], is_async=0)])), If(test=Name(id='all_values', ctx=Load()), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='all_values', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='TimeLeft', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the time left.\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='<time-left>{time_left}</time-left>')), Assign(targets=[Name(id='unknown', ctx=Store())], value=Constant(value='?:??:??')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='time_left', ctx=Store())], value=Attribute(value=Name(id='progress', ctx=Load()), attr='time_left', ctx=Load())), If(test=Compare(left=Name(id='time_left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='formatted_time_left', ctx=Store())], value=Call(func=Name(id='_format_timedelta', ctx=Load()), args=[Name(id='time_left', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='formatted_time_left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='unknown', ctx=Load()))]), Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='time_left', value=Call(func=Attribute(value=Name(id='formatted_time_left', ctx=Load()), attr='rjust', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_values', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='time_left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='_format_timedelta', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='time_left', ctx=Load())], keywords=[])], keywords=[]), orelse=Constant(value=7)), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='counters', ctx=Load()), ifs=[], is_async=0)])), If(test=Name(id='all_values', ctx=Load()), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='all_values', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='IterationsPerSecond', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display the iterations per second.\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='<iterations-per-second>{iterations_per_second:.2f}</iterations-per-second>')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='progress', ctx=Load()), attr='items_completed', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='progress', ctx=Load()), attr='time_elapsed', ctx=Load()), attr='total_seconds', ctx=Load()), args=[], keywords=[]))), Return(value=Call(func=Name(id='HTML', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='iterations_per_second', value=Name(id='value', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_values', ctx=Store())], value=ListComp(elt=Call(func=Name(id='len', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Attribute(value=Name(id='c', ctx=Load()), attr='items_completed', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Attribute(value=Name(id='c', ctx=Load()), attr='time_elapsed', ctx=Load()), attr='total_seconds', ctx=Load()), args=[], keywords=[])), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.2f')]))])], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='progress_bar', ctx=Load()), attr='counters', ctx=Load()), ifs=[], is_async=0)])), If(test=Name(id='all_values', ctx=Load()), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='all_values', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), ClassDef(name='SpinningWheel', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display a spinning wheel.\n    ')), Assign(targets=[Name(id='characters', ctx=Store())], value=Constant(value='/-\\|')), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=3))], keywords=[]), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load())], keywords=[]))), Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Constant(value='<spinning-wheel>{0}</spinning-wheel>')], keywords=[]), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='D', ctx=Load()), attr='exact', ctx=Load()), args=[Constant(value=1)], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), FunctionDef(name='_hue_to_rgb', args=arguments(posonlyargs=[], args=[arg(arg='hue', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Take hue between 0 and 1, return (r, g, b).\n    ')), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='hue', ctx=Load()), op=Mult(), right=Constant(value=6.0))], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='hue', ctx=Load()), op=Mult(), right=Constant(value=6.0)), op=Sub(), right=Name(id='i', ctx=Load()))), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Constant(value=255), op=Mult(), right=BinOp(left=Constant(value=1.0), op=Sub(), right=Name(id='f', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Constant(value=255), op=Mult(), right=BinOp(left=Constant(value=1.0), op=Sub(), right=BinOp(left=Constant(value=1.0), op=Sub(), right=Name(id='f', ctx=Load()))))], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Mod(), value=Constant(value=6)), Return(value=Subscript(value=List(elts=[Tuple(elts=[Constant(value=255), Name(id='t', ctx=Load()), Constant(value=0)], ctx=Load()), Tuple(elts=[Name(id='q', ctx=Load()), Constant(value=255), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=255), Name(id='t', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=0), Name(id='q', ctx=Load()), Constant(value=255)], ctx=Load()), Tuple(elts=[Name(id='t', ctx=Load()), Constant(value=0), Constant(value=255)], ctx=Load()), Tuple(elts=[Constant(value=255), Constant(value=0), Name(id='q', ctx=Load())], ctx=Load())], ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Rainbow', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For the fun. Add rainbow colors to any of the other formatters.\n    ')), Assign(targets=[Name(id='colors', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='#%.2x%.2x%.2x'), op=Mod(), right=Call(func=Name(id='_hue_to_rgb', ctx=Load()), args=[BinOp(left=Name(id='h', ctx=Load()), op=Div(), right=Constant(value=100.0))], keywords=[])), generators=[comprehension(target=Name(id='h', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Constant(value=100)], keywords=[]), ifs=[], is_async=0)])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='formatter', annotation=Name(id='Formatter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Store())], value=Name(id='formatter', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='progress', annotation=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='progress_bar', ctx=Load()), Name(id='progress', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='explode_text_fragments', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='result2', ctx=Store()), annotation=Name(id='StyleAndTextTuples', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='shift', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Constant(value=3))], keywords=[]), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='colors', ctx=Load())], keywords=[]))), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='style', ctx=Store()), Name(id='text', ctx=Store()), Starred(value=Name(id='_', ctx=Store()), ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result2', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[BinOp(left=BinOp(left=Name(id='style', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='colors', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='shift', ctx=Load())), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='colors', ctx=Load())], keywords=[])), ctx=Load())), Name(id='text', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result2', ctx=Load()))], decorator_list=[], returns=Name(id='AnyFormattedText', ctx=Load())), FunctionDef(name='get_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), attr='get_width', ctx=Load()), args=[Name(id='progress_bar', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_default_formatters', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the list of default formatters.\n    ')), Return(value=List(elts=[Call(func=Name(id='Label', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Name(id='Percentage', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Name(id='Bar', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Name(id='Progress', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='eta [')], keywords=[keyword(arg='style', value=Constant(value='class:time-left'))]), Call(func=Name(id='TimeLeft', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=']')], keywords=[keyword(arg='style', value=Constant(value='class:time-left'))]), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value=' ')], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='Formatter', ctx=Load()), ctx=Load()))], type_ignores=[])