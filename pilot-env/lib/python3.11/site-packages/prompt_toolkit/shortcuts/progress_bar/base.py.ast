Module(body=[Expr(value=Constant(value='\nProgress bar implementation on top of prompt_toolkit.\n\n::\n\n    with ProgressBar(...) as pb:\n        for item in pb(data):\n            ...\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='contextvars')]), Import(names=[alias(name='datetime')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='traceback')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Generic'), alias(name='Iterable'), alias(name='Iterator'), alias(name='Sequence'), alias(name='Sized'), alias(name='TextIO'), alias(name='TypeVar'), alias(name='cast')], level=0), ImportFrom(module='prompt_toolkit.application', names=[alias(name='Application')], level=0), ImportFrom(module='prompt_toolkit.application.current', names=[alias(name='get_app_session')], level=0), ImportFrom(module='prompt_toolkit.filters', names=[alias(name='Condition'), alias(name='is_done'), alias(name='renderer_height_is_known')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='AnyFormattedText'), alias(name='StyleAndTextTuples'), alias(name='to_formatted_text')], level=0), ImportFrom(module='prompt_toolkit.input', names=[alias(name='Input')], level=0), ImportFrom(module='prompt_toolkit.key_binding', names=[alias(name='KeyBindings')], level=0), ImportFrom(module='prompt_toolkit.key_binding.key_processor', names=[alias(name='KeyPressEvent')], level=0), ImportFrom(module='prompt_toolkit.layout', names=[alias(name='ConditionalContainer'), alias(name='FormattedTextControl'), alias(name='HSplit'), alias(name='Layout'), alias(name='VSplit'), alias(name='Window')], level=0), ImportFrom(module='prompt_toolkit.layout.controls', names=[alias(name='UIContent'), alias(name='UIControl')], level=0), ImportFrom(module='prompt_toolkit.layout.dimension', names=[alias(name='AnyDimension'), alias(name='D')], level=0), ImportFrom(module='prompt_toolkit.output', names=[alias(name='ColorDepth'), alias(name='Output')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='BaseStyle')], level=0), ImportFrom(module='prompt_toolkit.utils', names=[alias(name='in_main_thread')], level=0), ImportFrom(module='formatters', names=[alias(name='Formatter'), alias(name='create_default_formatters')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='ProgressBar')], ctx=Load())), Assign(targets=[Name(id='E', ctx=Store())], value=Name(id='KeyPressEvent', ctx=Load())), Assign(targets=[Name(id='_SIGWINCH', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='SIGWINCH'), Constant(value=None)], keywords=[])), FunctionDef(name='create_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='cancel_callback', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Key bindings handled by the progress bar.\n    (The main thread is not supposed to handle any key bindings.)\n    ')), Assign(targets=[Name(id='kb', ctx=Store())], value=Call(func=Name(id='KeyBindings', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_clear', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='event', ctx=Load()), attr='app', ctx=Load()), attr='renderer', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='c-l')], keywords=[])], returns=Constant(value=None)), If(test=Compare(left=Name(id='cancel_callback', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[FunctionDef(name='_interrupt', args=arguments(posonlyargs=[], args=[arg(arg='event', annotation=Name(id='E', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Kill the 'body' of the progress bar, but only if we run from the main thread.")), Assert(test=Compare(left=Name(id='cancel_callback', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Name(id='cancel_callback', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='kb', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='c-c')], keywords=[])], returns=Constant(value=None))], orelse=[]), Return(value=Name(id='kb', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load())), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), ClassDef(name='ProgressBar', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Progress bar context manager.\n\n    Usage ::\n\n        with ProgressBar(...) as pb:\n            for item in pb(data):\n                ...\n\n    :param title: Text to be displayed above the progress bars. This can be a\n        callable or formatted text as well.\n    :param formatters: List of :class:`.Formatter` instances.\n    :param bottom_toolbar: Text to be displayed in the bottom toolbar. This\n        can be a callable or formatted text.\n    :param style: :class:`prompt_toolkit.styles.BaseStyle` instance.\n    :param key_bindings: :class:`.KeyBindings` instance.\n    :param cancel_callback: Callback function that\'s called when control-c is\n        pressed by the user. This can be used for instance to start "proper"\n        cancellation if the wrapped code supports it.\n    :param file: The file object used for rendering, by default `sys.stderr` is used.\n\n    :param color_depth: `prompt_toolkit` `ColorDepth` instance.\n    :param output: :class:`~prompt_toolkit.output.Output` instance.\n    :param input: :class:`~prompt_toolkit.input.Input` instance.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='formatters', annotation=BinOp(left=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='Formatter', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='bottom_toolbar', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='style', annotation=BinOp(left=Name(id='BaseStyle', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='key_bindings', annotation=BinOp(left=Name(id='KeyBindings', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cancel_callback', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='file', annotation=BinOp(left=Name(id='TextIO', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='color_depth', annotation=BinOp(left=Name(id='ColorDepth', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='output', annotation=BinOp(left=Name(id='Output', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='input', annotation=BinOp(left=Name(id='Input', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatters', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='formatters', ctx=Load()), Call(func=Name(id='create_default_formatters', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Store())], value=Name(id='bottom_toolbar', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='counters', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='object', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Store())], value=Name(id='key_bindings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cancel_callback', ctx=Store())], value=Name(id='cancel_callback', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cancel_callback', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='in_main_thread', ctx=Load()), args=[], keywords=[])]), body=[FunctionDef(name='keyboard_interrupt_to_main_thread', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='kill', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='signal', ctx=Load()), attr='SIGINT', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cancel_callback', ctx=Store())], value=Name(id='keyboard_interrupt_to_main_thread', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Store())], value=Name(id='color_depth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='output', ctx=Load()), Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='output', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='input', ctx=Load()), Attribute(value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[]), attr='input', ctx=Load())])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_thread', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_sigwinch', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_app_started', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='title_toolbar', ctx=Store())], value=Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()))], keywords=[])], keywords=[keyword(arg='height', value=Constant(value=1)), keyword(arg='style', value=Constant(value='class:progressbar,title'))])], keywords=[keyword(arg='filter', value=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], keywords=[]))])), Assign(targets=[Name(id='bottom_toolbar', ctx=Store())], value=Call(func=Name(id='ConditionalContainer', ctx=Load()), args=[Call(func=Name(id='Window', ctx=Load()), args=[Call(func=Name(id='FormattedTextControl', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Load()))], keywords=[keyword(arg='style', value=Constant(value='class:bottom-toolbar.text'))])], keywords=[keyword(arg='style', value=Constant(value='class:bottom-toolbar')), keyword(arg='height', value=Constant(value=1))])], keywords=[keyword(arg='filter', value=BinOp(left=BinOp(left=UnaryOp(op=Invert(), operand=Name(id='is_done', ctx=Load())), op=BitAnd(), right=Name(id='renderer_height_is_known', ctx=Load())), op=BitAnd(), right=Call(func=Name(id='Condition', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bottom_toolbar', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], keywords=[])))])), FunctionDef(name='width_for_formatter', args=arguments(posonlyargs=[], args=[arg(arg='formatter', annotation=Name(id='Formatter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='get_width', ctx=Load()), args=[], keywords=[keyword(arg='progress_bar', value=Name(id='self', ctx=Load()))]))], decorator_list=[], returns=Name(id='AnyDimension', ctx=Load())), Assign(targets=[Name(id='progress_controls', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[keyword(arg='content', value=Call(func=Name(id='_ProgressControl', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='f', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cancel_callback', ctx=Load())], keywords=[])), keyword(arg='width', value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='width_for_formatter', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='formatters', ctx=Load()), ifs=[], is_async=0)])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Store()), annotation=Subscript(value=Name(id='Application', ctx=Load()), slice=Constant(value=None), ctx=Load()), value=Call(func=Name(id='Application', ctx=Load()), args=[], keywords=[keyword(arg='min_redraw_interval', value=Constant(value=0.05)), keyword(arg='layout', value=Call(func=Name(id='Layout', ctx=Load()), args=[Call(func=Name(id='HSplit', ctx=Load()), args=[List(elts=[Name(id='title_toolbar', ctx=Load()), Call(func=Name(id='VSplit', ctx=Load()), args=[Name(id='progress_controls', ctx=Load())], keywords=[keyword(arg='height', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='D', ctx=Load()), args=[], keywords=[keyword(arg='preferred', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='counters', ctx=Load())], keywords=[])), keyword(arg='max', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='counters', ctx=Load())], keywords=[]))])))]), Call(func=Name(id='Window', ctx=Load()), args=[], keywords=[]), Name(id='bottom_toolbar', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])), keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='key_bindings', value=Attribute(value=Name(id='self', ctx=Load()), attr='key_bindings', ctx=Load())), keyword(arg='refresh_interval', value=Constant(value=0.3)), keyword(arg='color_depth', value=Attribute(value=Name(id='self', ctx=Load()), attr='color_depth', ctx=Load())), keyword(arg='output', value=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load())), keyword(arg='input', value=Attribute(value=Name(id='self', ctx=Load()), attr='input', ctx=Load()))]), simple=0), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='pre_run', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_app_started', ctx=Load()), attr='set', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='print_exc', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='ctx', ctx=Store()), annotation=Attribute(value=Name(id='contextvars', ctx=Load()), attr='Context', ctx=Load()), value=Call(func=Attribute(value=Name(id='contextvars', ctx=Load()), attr='copy_context', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='ctx', ctx=Load()), attr='run', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Name(id='run', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Name(id='ProgressBar', ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='a', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_app_started', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='is_running', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='loop', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='exit', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_thread', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=BinOp(left=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='label', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='remove_when_done', annotation=Name(id='bool', ctx=Load())), arg(arg='total', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=''), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value="\n        Start a new counter.\n\n        :param label: Title text or description for this progress. (This can be\n            formatted text as well).\n        :param remove_when_done: When `True`, hide this progress bar.\n        :param total: Specify the maximum value if it can't be calculated by\n            calling ``len``.\n        ")), Assign(targets=[Name(id='counter', ctx=Store())], value=Call(func=Name(id='ProgressBarCounter', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='data', ctx=Load())], keywords=[keyword(arg='label', value=Name(id='label', ctx=Load())), keyword(arg='remove_when_done', value=Name(id='remove_when_done', ctx=Load())), keyword(arg='total', value=Name(id='total', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='counters', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='counter', ctx=Load())], keywords=[])), Return(value=Name(id='counter', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='ProgressBarCounter', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), FunctionDef(name='invalidate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load()), attr='invalidate', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_ProgressControl', bases=[Name(id='UIControl', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    User control for the progress bar.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='formatter', annotation=Name(id='Formatter', ctx=Load())), arg(arg='cancel_callback', annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Store())], value=Name(id='progress_bar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Store())], value=Name(id='formatter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key_bindings', ctx=Store())], value=Call(func=Name(id='create_key_bindings', ctx=Load()), args=[Name(id='cancel_callback', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='items', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='StyleAndTextTuples', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='pr', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Load()), attr='counters', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Load()), Name(id='pr', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='print_exc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Constant(value='ERROR'))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='to_formatted_text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='get_line', args=arguments(posonlyargs=[], args=[arg(arg='i', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='StyleAndTextTuples', ctx=Load())), Return(value=Call(func=Name(id='UIContent', ctx=Load()), args=[], keywords=[keyword(arg='get_line', value=Name(id='get_line', ctx=Load())), keyword(arg='line_count', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), keyword(arg='show_cursor', value=Constant(value=False))]))], decorator_list=[], returns=Name(id='UIContent', ctx=Load())), FunctionDef(name='is_focusable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_key_bindings', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_key_bindings', ctx=Load()))], decorator_list=[], returns=Name(id='KeyBindings', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_CounterItem', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_CounterItem')], keywords=[keyword(arg='covariant', value=Constant(value=True))])), ClassDef(name='ProgressBarCounter', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_CounterItem', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An individual counter (A progress bar can have multiple counters).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress_bar', annotation=Name(id='ProgressBar', ctx=Load())), arg(arg='data', annotation=BinOp(left=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_CounterItem', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='label', annotation=Name(id='AnyFormattedText', ctx=Load())), arg(arg='remove_when_done', annotation=Name(id='bool', ctx=Load())), arg(arg='total', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=''), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Store())], value=Name(id='progress_bar', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items_completed', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='label', ctx=Store())], value=Name(id='label', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='remove_when_done', ctx=Store())], value=Name(id='remove_when_done', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_done', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store()), annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=0), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Sized', ctx=Load()), Name(id='data', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=Name(id='total', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='item_completed', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stopped', ctx=Store())], value=Constant(value=True))])], orelse=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='No data defined to iterate over.')], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='_CounterItem', ctx=Load()), ctx=Load())), FunctionDef(name='item_completed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Start handling the next item.\n\n        (Can be called manually in case we don't have a collection to loop through.)\n        ")), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='items_completed', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Load()), attr='invalidate', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether a counter has been completed.\n\n        Done counter have been stopped (see stopped) and removed depending on\n        remove_when_done value.\n\n        Contrast this with stopped. A stopped counter may be terminated before\n        100% completion. A done counter has reached its 100% completion.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_done', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='done', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_done', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stopped', ctx=Store())], value=Name(id='value', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='remove_when_done', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress_bar', ctx=Load()), attr='counters', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Attribute(value=Name(id='done', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='stopped', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether a counter has been stopped.\n\n        Stopped counters no longer have increasing time_elapsed. This distinction is\n        also used to prevent the Bar formatter with unknown totals from continuing to run.\n\n        A stopped counter (but not done) can be used to signal that a given counter has\n        encountered an error but allows other counters to continue\n        (e.g. download X of Y failed). Given how only done counters are removed\n        (see remove_when_done) this can help aggregate failures from a large number of\n        successes.\n\n        Contrast this with done. A done counter has reached its 100% completion.\n        A stopped counter may be terminated before 100% completion.\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='stopped', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Store())], value=Constant(value=None))])], decorator_list=[Attribute(value=Name(id='stopped', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='percentage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='items_completed', ctx=Load()), op=Mult(), right=Constant(value=100)), op=Div(), right=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), Constant(value=1)], keywords=[])))])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='time_elapsed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return how much time has been elapsed since the start.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))], orelse=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))])], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load())), FunctionDef(name='time_left', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Timedelta representing the time left.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='percentage', ctx=Load()))]), body=[Return(value=Constant(value=None))], orelse=[If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stopped', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='time_elapsed', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=100), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='percentage', ctx=Load()))), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='percentage', ctx=Load())))])])], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[])], type_ignores=[])