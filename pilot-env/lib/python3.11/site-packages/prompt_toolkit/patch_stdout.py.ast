Module(body=[Expr(value=Constant(value="\npatch_stdout\n============\n\nThis implements a context manager that ensures that print statements within\nit won't destroy the user interface. The context manager will replace\n`sys.stdout` by something that draws the output above the current prompt,\nrather than overwriting the UI.\n\nUsage::\n\n    with patch_stdout(application):\n        ...\n        application.run()\n        ...\n\nMultiple applications can run in the body of the context manager, one after the\nother.\n")), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='asyncio')]), Import(names=[alias(name='queue')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='time')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='Generator'), alias(name='TextIO'), alias(name='cast')], level=0), ImportFrom(module='application', names=[alias(name='get_app_session'), alias(name='run_in_terminal')], level=1), ImportFrom(module='output', names=[alias(name='Output')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='patch_stdout'), Constant(value='StdoutProxy')], ctx=Load())), FunctionDef(name='patch_stdout', args=arguments(posonlyargs=[], args=[arg(arg='raw', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n    Replace `sys.stdout` by an :class:`_StdoutProxy` instance.\n\n    Writing to this proxy will make sure that the text appears above the\n    prompt, and that it doesn't destroy the output from the renderer.  If no\n    application is curring, the behaviour should be identical to writing to\n    `sys.stdout` directly.\n\n    Warning: If a new event loop is installed using `asyncio.set_event_loop()`,\n        then make sure that the context manager is applied after the event loop\n        is changed. Printing to stdout will be scheduled in the event loop\n        that's active when the context manager is created.\n\n    :param raw: (`bool`) When True, vt100 terminal escape sequences are not\n                removed/escaped.\n    ")), With(items=[withitem(context_expr=Call(func=Name(id='StdoutProxy', ctx=Load()), args=[], keywords=[keyword(arg='raw', value=Name(id='raw', ctx=Load()))]), optional_vars=Name(id='proxy', ctx=Store()))], body=[Assign(targets=[Name(id='original_stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Name(id='original_stderr', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TextIO', ctx=Load()), Name(id='proxy', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='TextIO', ctx=Load()), Name(id='proxy', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='original_stdout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Name(id='original_stderr', ctx=Load()))])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='_Done', bases=[], keywords=[], body=[Expr(value=Constant(value='Sentinel value for stopping the stdout proxy.'))], decorator_list=[]), ClassDef(name='StdoutProxy', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    File-like object, which prints everything written to it, output above the\n    current application/prompt. This class is compatible with other file\n    objects and can be used as a drop-in replacement for `sys.stdout` or can\n    for instance be passed to `logging.StreamHandler`.\n\n    The current application, above which we print, is determined by looking\n    what application currently runs in the `AppSession` that is active during\n    the creation of this instance.\n\n    This class can be used as a context manager.\n\n    In order to avoid having to repaint the prompt continuously for every\n    little write, a short delay of `sleep_between_writes` seconds will be added\n    between writes in order to bundle many smaller writes in a short timespan.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep_between_writes', annotation=Name(id='float', ctx=Load())), arg(arg='raw', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.2), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sleep_between_writes', ctx=Store())], value=Name(id='sleep_between_writes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Store())], value=Name(id='raw', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Store())], value=Call(func=Name(id='get_app_session', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Store()), annotation=Name(id='Output', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Load()), attr='output', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), slice=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Name(id='_Done', ctx=Load())), ctx=Load()), value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_flush_thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_start_write_thread', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Name(id='StdoutProxy', ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='object', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Stop `StdoutProxy` proxy.\n\n        This will terminate the write thread, make sure everything is flushed\n        and wait for the write thread to finish.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Load()), attr='put', ctx=Load()), args=[Call(func=Name(id='_Done', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_thread', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_start_write_thread', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='thread', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='_write_thread', ctx=Load())), keyword(arg='name', value=Constant(value='patch-stdout-flush-thread')), keyword(arg='daemon', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='thread', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load())), FunctionDef(name='_write_thread', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=False)), While(test=UnaryOp(op=Not(), operand=Name(id='done', ctx=Load())), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='_Done', ctx=Load())], keywords=[]), body=[Break()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='item', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Load()), attr='get_nowait', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='queue', ctx=Load()), attr='Empty', ctx=Load()), body=[Break()])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='_Done', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='done', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))])], finalbody=[])], orelse=[]), Assign(targets=[Name(id='app_loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_app_loop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_and_flush', ctx=Load()), args=[Name(id='app_loop', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='app_loop', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sleep_between_writes', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_app_loop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the event loop for the application currently running in our\n        `AppSession`.\n        ')), Assign(targets=[Name(id='app', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='app_session', ctx=Load()), attr='app', ctx=Load())), If(test=Compare(left=Name(id='app', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Attribute(value=Name(id='app', ctx=Load()), attr='loop', ctx=Load()))], decorator_list=[], returns=BinOp(left=Attribute(value=Name(id='asyncio', ctx=Load()), attr='AbstractEventLoop', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='_write_and_flush', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='loop', annotation=BinOp(left=Attribute(value=Name(id='asyncio', ctx=Load()), attr='AbstractEventLoop', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Write the given text to stdout and flush.\n        If an application is running, use `run_in_terminal`.\n        ')), FunctionDef(name='write_and_flush', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='write_raw', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_and_flush_in_loop', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='run_in_terminal', ctx=Load()), args=[Name(id='write_and_flush', ctx=Load())], keywords=[keyword(arg='in_executor', value=Constant(value=False))]))], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Name(id='loop', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='write_and_flush', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='call_soon_threadsafe', ctx=Load()), args=[Name(id='write_and_flush_in_loop', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Note: print()-statements cause to multiple write calls.\n              (write('line') and write('\n')). Of course we don't want to call\n              `run_in_terminal` for every individual call, because that's too\n              expensive, and as long as the newline hasn't been written, the\n              text itself is again overwritten by the rendering of the input\n              command line. Therefor, we have a little buffer which holds the\n              text until a newline is written to stdout.\n        ")), If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='before', ctx=Store()), Name(id='after', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='\n'), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='to_write', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), op=Add(), right=List(elts=[Name(id='before', ctx=Load()), Constant(value='\n')], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[Name(id='after', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='to_write', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_queue', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Flush buffered output.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_flush', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='original_stdout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='stdout', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='__stdout__', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='TextIO', ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='isatty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='stdout', ctx=Load())), If(test=Compare(left=Name(id='stdout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output', ctx=Load()), attr='encoding', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='strict'))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])