Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='exceptions', names=[alias(name='ParseError')], level=1), ImportFrom(module='typing', names=[alias(name='NamedTuple')], level=0), Assign(targets=[Name(id='COMMENTCHARS', ctx=Store())], value=Constant(value='#;')), ClassDef(name='_ParsedLine', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='lineno', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='section', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1), AnnAssign(target=Name(id='value', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), simple=1)], decorator_list=[]), FunctionDef(name='parse_lines', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='line_iter', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_ParsedLine', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='section', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='lineno', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='line_iter', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='data', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_parseline', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='line', ctx=Load()), Name(id='lineno', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_ParsedLine', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='section', ctx=Load()), Name(id='name', ctx=Load()), Name(id='data', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='lineno', ctx=Load()), Constant(value='empty section name')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='section', ctx=Store())], value=Name(id='name', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_ParsedLine', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='section', ctx=Load()), Constant(value=None), Constant(value=None)], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='lineno', ctx=Load()), Constant(value='unexpected value continuation')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='last', ctx=Load()), attr='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='lineno', ctx=Load()), Constant(value='unexpected value continuation')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='last', ctx=Load()), attr='value', ctx=Load()), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='last', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='value', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='last', ctx=Load()), attr='value', ctx=Load()), conversion=-1), Constant(value='\n'), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1)]))]))], orelse=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='last', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Name(id='data', ctx=Load()))]))]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_ParsedLine', ctx=Load()), ctx=Load())), FunctionDef(name='_parseline', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='line', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='iscommentline', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Assign(targets=[Name(id='realline', ctx=Store())], value=Name(id='line', ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Name(id='COMMENTCHARS', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value=']')]), body=[Return(value=Tuple(elts=[Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Call(func=Attribute(value=Name(id='realline', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[])), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[])), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='lineno', ctx=Load()), BinOp(left=Constant(value='unexpected line: %r'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Constant(value=None), Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], ctx=Load()))])])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), FunctionDef(name='iscommentline', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=1)), ctx=Load())), Return(value=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Name(id='COMMENTCHARS', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])