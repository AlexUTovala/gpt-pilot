Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='types', names=[alias(name='CodeType')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='exceptions', names=[alias(name='TemplateSyntaxError')], level=1), ImportFrom(module='utils', names=[alias(name='internal_code')], level=1), ImportFrom(module='utils', names=[alias(name='missing')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='runtime', names=[alias(name='Context')], level=1)], orelse=[]), FunctionDef(name='rewrite_traceback_stack', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Rewrite the current exception to replace any tracebacks from\n    within compiled template code with tracebacks that look like they\n    came from the template source.\n\n    This must be called within an ``except`` block.\n\n    :param source: For ``TemplateSyntaxError``, the original source if\n        known.\n    :return: The original exception with the rewritten traceback.\n    ')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='exc_value', ctx=Store()), Name(id='tb', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exc_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='BaseException', ctx=Load()), Name(id='exc_value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='TracebackType', ctx=Load()), Name(id='tb', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Name(id='TemplateSyntaxError', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='exc_value', ctx=Load()), attr='translated', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='translated', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='source', ctx=Store())], value=Name(id='source', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='exc_value', ctx=Load()), attr='with_traceback', ctx=Load()), args=[Constant(value=None)], keywords=[])), Assign(targets=[Name(id='tb', ctx=Store())], value=Call(func=Name(id='fake_traceback', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Constant(value=None), BoolOp(op=Or(), values=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='filename', ctx=Load()), Constant(value='<unknown>')]), Attribute(value=Name(id='exc_value', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='tb', ctx=Store())], value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_next', ctx=Load()))]), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='tb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_frame', ctx=Load()), attr='f_code', ctx=Load()), ops=[In()], comparators=[Name(id='internal_code', ctx=Load())]), body=[Assign(targets=[Name(id='tb', ctx=Store())], value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_next', ctx=Load())), Continue()], orelse=[]), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_frame', ctx=Load()), attr='f_globals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__jinja_template__')], keywords=[])), If(test=Compare(left=Name(id='template', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='get_corresponding_lineno', ctx=Load()), args=[Attribute(value=Name(id='tb', ctx=Load()), attr='tb_lineno', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fake_tb', ctx=Store())], value=Call(func=Name(id='fake_traceback', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Name(id='tb', ctx=Load()), Attribute(value=Name(id='template', ctx=Load()), attr='filename', ctx=Load()), Name(id='lineno', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fake_tb', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='tb', ctx=Store())], value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_next', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='tb_next', ctx=Store())], value=Constant(value=None)), For(target=Name(id='tb', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='tb', ctx=Load()), attr='tb_next', ctx=Store())], value=Name(id='tb_next', ctx=Load())), Assign(targets=[Name(id='tb_next', ctx=Store())], value=Name(id='tb', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='exc_value', ctx=Load()), attr='with_traceback', ctx=Load()), args=[Name(id='tb_next', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseException', ctx=Load())), FunctionDef(name='fake_traceback', args=arguments(posonlyargs=[], args=[arg(arg='exc_value', annotation=Name(id='BaseException', ctx=Load())), arg(arg='tb', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Produce a new traceback object that looks like it came from the\n    template source instead of the compiled code. The filename, line\n    number, and location name will point to the template, and the local\n    variables will be the current template context.\n\n    :param exc_value: The original exception to be re-raised to create\n        the new traceback.\n    :param tb: The original traceback to get the local variables and\n        code info from.\n    :param filename: The template filename.\n    :param lineno: The line number in the template source.\n    ')), If(test=Compare(left=Name(id='tb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='locals', ctx=Store())], value=Call(func=Name(id='get_template_locals', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_frame', ctx=Load()), attr='f_locals', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='locals', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__jinja_exception__'), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='locals', ctx=Store())], value=Dict(keys=[], values=[]))]), Assign(targets=[Name(id='globals', ctx=Store())], value=Dict(keys=[Constant(value='__name__'), Constant(value='__file__'), Constant(value='__jinja_exception__')], values=[Name(id='filename', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='exc_value', ctx=Load())])), AnnAssign(target=Name(id='code', ctx=Store()), annotation=Name(id='CodeType', ctx=Load()), value=Call(func=Name(id='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\n'), op=Mult(), right=BinOp(left=Name(id='lineno', ctx=Load()), op=Sub(), right=Constant(value=1))), op=Add(), right=Constant(value='raise __jinja_exception__')), Name(id='filename', ctx=Load()), Constant(value='exec')], keywords=[]), simple=1), Assign(targets=[Name(id='location', ctx=Store())], value=Constant(value='template')), If(test=Compare(left=Name(id='tb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='function', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_name', ctx=Load())), If(test=Compare(left=Name(id='function', ctx=Load()), ops=[Eq()], comparators=[Constant(value='root')]), body=[Assign(targets=[Name(id='location', ctx=Store())], value=Constant(value='top-level template code'))], orelse=[If(test=Call(func=Attribute(value=Name(id='function', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='block_')], keywords=[]), body=[Assign(targets=[Name(id='location', ctx=Store())], value=JoinedStr(values=[Constant(value='block '), FormattedValue(value=Subscript(value=Name(id='function', ctx=Load()), slice=Slice(lower=Constant(value=6)), ctx=Load()), conversion=114)]))], orelse=[])])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='replace', ctx=Load()), args=[], keywords=[keyword(arg='co_name', value=Name(id='location', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='CodeType', ctx=Load()), args=[Attribute(value=Name(id='code', ctx=Load()), attr='co_argcount', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_kwonlyargcount', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_nlocals', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_stacksize', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_flags', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_code', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_consts', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_names', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_varnames', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_filename', ctx=Load()), Name(id='location', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_firstlineno', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_lnotab', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_freevars', ctx=Load()), Attribute(value=Name(id='code', ctx=Load()), attr='co_cellvars', ctx=Load())], keywords=[]))]), Try(body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='globals', ctx=Load()), Name(id='locals', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Return(value=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]), slice=Constant(value=2), ctx=Load()), attr='tb_next', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='TracebackType', ctx=Load())), FunctionDef(name='get_template_locals', args=arguments(posonlyargs=[], args=[arg(arg='real_locals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Based on the runtime locals, get the context that would be\n    available at that point in the template.\n    ')), AnnAssign(target=Name(id='ctx', ctx=Store()), annotation=Constant(value='t.Optional[Context]'), value=Call(func=Attribute(value=Name(id='real_locals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='context')], keywords=[]), simple=1), If(test=Compare(left=Name(id='ctx', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='data', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='get_all', ctx=Load()), args=[], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[]))]), AnnAssign(target=Name(id='local_overrides', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='real_locals', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='l_')], keywords=[])), Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())])]), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='depth_str', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_'), Constant(value=2)], keywords=[])), Assign(targets=[Name(id='depth', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='depth_str', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='cur_depth', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='local_overrides', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='cur_depth', ctx=Load()), ops=[Lt()], comparators=[Name(id='depth', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='local_overrides', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='depth', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Tuple(elts=[Name(id='_', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='local_overrides', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])