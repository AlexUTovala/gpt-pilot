Module(body=[Expr(value=Constant(value='API and implementations for loading templates from different data\nsources.\n')), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='os')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing', asname='t')]), Import(names=[alias(name='weakref')]), Import(names=[alias(name='zipimport')]), ImportFrom(module='collections', names=[alias(name='abc')], level=0), ImportFrom(module='hashlib', names=[alias(name='sha1')], level=0), ImportFrom(module='importlib', names=[alias(name='import_module')], level=0), ImportFrom(module='types', names=[alias(name='ModuleType')], level=0), ImportFrom(module='exceptions', names=[alias(name='TemplateNotFound')], level=1), ImportFrom(module='utils', names=[alias(name='internalcode')], level=1), ImportFrom(module='utils', names=[alias(name='open_if_exists')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ImportFrom(module='environment', names=[alias(name='Template')], level=1)], orelse=[]), FunctionDef(name='split_template_path', args=arguments(posonlyargs=[], args=[arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Split a path into segments and perform a sanity check.  If it detects\n    '..' in the path it will raise a `TemplateNotFound` error.\n    ")), Assign(targets=[Name(id='pieces', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='piece', ctx=Store()), iter=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), ops=[In()], comparators=[Name(id='piece', ctx=Load())]), BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='altsep', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='altsep', ctx=Load()), ops=[In()], comparators=[Name(id='piece', ctx=Load())])]), Compare(left=Name(id='piece', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='pardir', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='piece', ctx=Load()), Compare(left=Name(id='piece', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='.')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='pieces', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=Name(id='pieces', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='BaseLoader', bases=[], keywords=[], body=[Expr(value=Constant(value="Baseclass for all loaders.  Subclass this and override `get_source` to\n    implement a custom loading mechanism.  The environment provides a\n    `get_template` method that calls the loader's `load` method to get the\n    :class:`Template` object.\n\n    A very basic example for a loader that looks up templates on the file\n    system could look like this::\n\n        from jinja2 import BaseLoader, TemplateNotFound\n        from os.path import join, exists, getmtime\n\n        class MyLoader(BaseLoader):\n\n            def __init__(self, path):\n                self.path = path\n\n            def get_source(self, environment, template):\n                path = join(self.path, template)\n                if not exists(path):\n                    raise TemplateNotFound(template)\n                mtime = getmtime(path)\n                with open(path) as f:\n                    source = f.read()\n                return source, path, lambda: mtime == getmtime(path)\n    ")), Assign(targets=[Name(id='has_source_access', ctx=Store())], value=Constant(value=True)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the template source, filename and reload helper for a template.\n        It's passed the environment and template name and has to return a\n        tuple in the form ``(source, filename, uptodate)`` or raise a\n        `TemplateNotFound` error if it can't locate the template.\n\n        The source part of the returned tuple must be the source of the\n        template as a string. The filename should be the name of the\n        file on the filesystem if it was loaded from there, otherwise\n        ``None``. The filename is used by Python for the tracebacks\n        if no loader extension is used.\n\n        The last item in the tuple is the `uptodate` function.  If auto\n        reloading is enabled it's always called to check if the template\n        changed.  No arguments are passed so the function must store the\n        old state somewhere (for example in a closure).  If it returns `False`\n        the template will be reloaded.\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='has_source_access', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' cannot provide access to the source')])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterates over all templates.  If the loader does not support that\n        it should raise a :exc:`TypeError` which is the default behavior.\n        ')), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='this loader cannot iterate over all templates')], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Loads a template.  This method looks up the template in the cache\n        or loads one by calling :meth:`get_source`.  Subclasses should not\n        override this method as loaders working on collections of other\n        loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)\n        will not call this method but `get_source` directly.\n        ')), Assign(targets=[Name(id='code', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='globals', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='globals', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='source', ctx=Store()), Name(id='filename', ctx=Store()), Name(id='uptodate', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_source', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bcc', ctx=Store())], value=Attribute(value=Name(id='environment', ctx=Load()), attr='bytecode_cache', ctx=Load())), If(test=Compare(left=Name(id='bcc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='bucket', ctx=Store())], value=Call(func=Attribute(value=Name(id='bcc', ctx=Load()), attr='get_bucket', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='bucket', ctx=Load()), attr='code', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='bcc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='bucket', ctx=Load()), attr='code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='bucket', ctx=Load()), attr='code', ctx=Store())], value=Name(id='code', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='bcc', ctx=Load()), attr='set_bucket', ctx=Load()), args=[Name(id='bucket', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='environment', ctx=Load()), attr='template_class', ctx=Load()), attr='from_code', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='code', ctx=Load()), Name(id='globals', ctx=Load()), Name(id='uptodate', ctx=Load())], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Constant(value='Template'))], decorator_list=[]), ClassDef(name='FileSystemLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Load templates from a directory in the file system.\n\n    The path can be relative or absolute. Relative paths are relative to\n    the current working directory.\n\n    .. code-block:: python\n\n        loader = FileSystemLoader("templates")\n\n    A list of paths can be given. The directories will be searched in\n    order, stopping at the first matching template.\n\n    .. code-block:: python\n\n        loader = FileSystemLoader(["/override/templates", "/default/templates"])\n\n    :param searchpath: A path, or list of paths, to the directory that\n        contains the templates.\n    :param encoding: Use this encoding to read the text from template\n        files.\n    :param followlinks: Follow symbolic links in the path.\n\n    .. versionchanged:: 2.8\n        Added the ``followlinks`` parameter.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='searchpath', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='encoding', annotation=Name(id='str', ctx=Load())), arg(arg='followlinks', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value=False)]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='searchpath', ctx=Load()), Attribute(value=Name(id='abc', ctx=Load()), attr='Iterable', ctx=Load())], keywords=[])), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='searchpath', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='searchpath', ctx=Store())], value=List(elts=[Name(id='searchpath', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='searchpath', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='searchpath', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Name(id='encoding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='followlinks', ctx=Store())], value=Name(id='followlinks', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pieces', ctx=Store())], value=Call(func=Name(id='split_template_path', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[])), For(target=Name(id='searchpath', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='searchpath', ctx=Load()), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='searchpath', ctx=Load()), Starred(value=Name(id='pieces', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open_if_exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='f', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='mtime', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='getmtime', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), FunctionDef(name='uptodate', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='getmtime', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='mtime', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Return(value=Tuple(elts=[Name(id='contents', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Name(id='uptodate', ctx=Load())], ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='searchpath', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='searchpath', ctx=Load()), body=[Assign(targets=[Name(id='walk_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='searchpath', ctx=Load())], keywords=[keyword(arg='followlinks', value=Attribute(value=Name(id='self', ctx=Load()), attr='followlinks', ctx=Load()))])), For(target=Tuple(elts=[Name(id='dirpath', ctx=Store()), Name(id='_', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Name(id='walk_dir', ctx=Load()), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='searchpath', ctx=Load())], keywords=[])), ctx=Load()), attr='strip', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='template', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='./')]), body=[Assign(targets=[Name(id='template', ctx=Store())], value=Subscript(value=Name(id='template', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='template', ctx=Load()), ops=[NotIn()], comparators=[Name(id='found', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='found', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='PackageLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Load templates from a directory in a Python package.\n\n    :param package_name: Import name of the package that contains the\n        template directory.\n    :param package_path: Directory within the imported package that\n        contains the templates.\n    :param encoding: Encoding of template files.\n\n    The following example looks up templates in the ``pages`` directory\n    within the ``project.ui`` package.\n\n    .. code-block:: python\n\n        loader = PackageLoader("project.ui", "pages")\n\n    Only packages installed as directories (standard pip behavior) or\n    zip/egg files (less common) are supported. The Python API for\n    introspecting data in packages is too limited to support other\n    installation methods the way this loader requires.\n\n    There is limited support for :pep:`420` namespace packages. The\n    template directory is assumed to only be in one namespace\n    contributor. Zip files contributing to a namespace are not\n    supported.\n\n    .. versionchanged:: 3.0\n        No longer uses ``setuptools`` as a dependency.\n\n    .. versionchanged:: 3.0\n        Limited PEP 420 namespace package support.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package_name', annotation=Name(id='str', ctx=Load())), arg(arg='package_path', annotation=Constant(value='str')), arg(arg='encoding', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='templates'), Constant(value='utf-8')]), body=[Assign(targets=[Name(id='package_path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='package_path', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='package_path', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Name(id='package_path', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Compare(left=Subscript(value=Name(id='package_path', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='curdir', ctx=Load()), op=Add(), right=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))]), body=[Assign(targets=[Name(id='package_path', ctx=Store())], value=Subscript(value=Name(id='package_path', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_path', ctx=Store())], value=Name(id='package_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_name', ctx=Store())], value=Name(id='package_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Name(id='encoding', ctx=Load())), Expr(value=Call(func=Name(id='import_module', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='find_spec', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='spec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='An import spec was not found for the package.')), Assign(targets=[Name(id='loader', ctx=Store())], value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load())), Assert(test=Compare(left=Name(id='loader', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='A loader was not found for the package.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_loader', ctx=Store())], value=Name(id='loader', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_archive', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='template_root', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='loader', ctx=Load()), Attribute(value=Name(id='zipimport', ctx=Load()), attr='zipimporter', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_archive', ctx=Store())], value=Attribute(value=Name(id='loader', ctx=Load()), attr='archive', ctx=Load())), Assign(targets=[Name(id='pkgdir', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='template_root', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='pkgdir', ctx=Load()), Name(id='package_path', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]))], orelse=[AnnAssign(target=Name(id='roots', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='roots', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='roots', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])]), For(target=Name(id='root', ctx=Store()), iter=Name(id='roots', ctx=Load()), body=[Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='package_path', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='template_root', ctx=Store())], value=Name(id='root', ctx=Load())), Break()], orelse=[])], orelse=[])]), If(test=Compare(left=Name(id='template_root', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='The '), FormattedValue(value=Name(id='package_name', ctx=Load()), conversion=114), Constant(value=' package was not installed in a way that PackageLoader understands.')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_template_root', ctx=Store())], value=Name(id='template_root', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_template_root', ctx=Load()), Starred(value=Call(func=Name(id='split_template_path', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='up_to_date', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), simple=1), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_archive', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='mtime', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='getmtime', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), FunctionDef(name='up_to_date', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='getmtime', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='mtime', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loader', ctx=Load()), attr='get_data', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='up_to_date', ctx=Store())], value=Constant(value=None))]), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='decode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]), Name(id='p', ctx=Load()), Name(id='up_to_date', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='results', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_archive', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='offset', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_template_root', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='dirpath', ctx=Store()), Name(id='_', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_template_root', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='dirpath', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='dirpath', ctx=Load()), slice=Slice(lower=Name(id='offset', ctx=Load())), ctx=Load()), attr='lstrip', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='filenames', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_loader', ctx=Load()), Constant(value='_files')], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='This zip import does not have the required metadata to list templates.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='prefix', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_template_root', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_archive', ctx=Load())], keywords=[])), ctx=Load()), attr='lstrip', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))), Assign(targets=[Name(id='offset', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_loader', ctx=Load()), attr='_files', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Name(id='offset', ctx=Load())), ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])], keywords=[]))], orelse=[])], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='results', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DictLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Loads a template from a Python dict mapping template names to\n    template source.  This loader is useful for unittesting:\n\n    >>> loader = DictLoader({'index.html': 'source here'})\n\n    Because auto reloading is rarely useful this is disabled per default.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mapping', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Store())], value=Name(id='mapping', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='template', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load())]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load()), slice=Name(id='template', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Name(id='source', ctx=Load()), Constant(value=None), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='source', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[])]))], ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='FunctionLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A loader that is passed a function which does the loading.  The\n    function receives the name of the template and has to return either\n    a string with the template source, a tuple in the form ``(source,\n    filename, uptodatefunc)`` or `None` if the template does not exist.\n\n    >>> def load_template(name):\n    ...     if name == 'index.html':\n    ...         return '...'\n    ...\n    >>> loader = FunctionLoader(load_template)\n\n    The `uptodatefunc` is a function that is called if autoreload is enabled\n    and has to return `True` if the template is still up to date.  For more\n    details have a look at :meth:`BaseLoader.get_source` which has the same\n    return value.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='load_func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='load_func', ctx=Store())], value=Name(id='load_func', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_func', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='rv', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Name(id='rv', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='PrefixLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A loader that is passed a dict of loaders where each loader is bound\n    to a prefix.  The prefix is delimited from the template by a slash per\n    default, which can be changed by setting the `delimiter` argument to\n    something else::\n\n        loader = PrefixLoader({\n            'app1':     PackageLoader('mypackage.app1'),\n            'app2':     PackageLoader('mypackage.app2')\n        })\n\n    By loading ``'app1/index.html'`` the file from the app1 package is loaded,\n    by loading ``'app2/index.html'`` the file from the second.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mapping', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='BaseLoader', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='delimiter', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='/')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Store())], value=Name(id='mapping', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='delimiter', ctx=Store())], value=Name(id='delimiter', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_loader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='delimiter', ctx=Load()), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='loader', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Name(id='loader', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='BaseLoader', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='loader', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_loader', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_source', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TemplateNotFound', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='loader', ctx=Store()), Name(id='local_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_loader', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='local_name', ctx=Load()), Name(id='globals', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TemplateNotFound', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Constant(value='Template')), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='loader', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='mapping', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='template', ctx=Store()), iter=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='list_templates', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='delimiter', ctx=Load())), op=Add(), right=Name(id='template', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ChoiceLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="This loader works like the `PrefixLoader` just that no prefix is\n    specified.  If a template could not be found by one loader the next one\n    is tried.\n\n    >>> loader = ChoiceLoader([\n    ...     FileSystemLoader('/path/to/user/templates'),\n    ...     FileSystemLoader('/path/to/system/templates')\n    ... ])\n\n    This is useful if you want to allow users to override builtin templates\n    from a different location.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='loaders', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='BaseLoader', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='loaders', ctx=Store())], value=Name(id='loaders', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_source', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='loader', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='loaders', ctx=Load()), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_source', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='template', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TemplateNotFound', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='template', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[For(target=Name(id='loader', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='loaders', ctx=Load()), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='name', ctx=Load()), Name(id='globals', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TemplateNotFound', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Constant(value='Template')), FunctionDef(name='list_templates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='loader', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='loaders', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='found', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='list_templates', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_TemplateModule', bases=[Name(id='ModuleType', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Like a normal module but with support for weak references'))], decorator_list=[]), ClassDef(name='ModuleLoader', bases=[Name(id='BaseLoader', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="This loader loads templates from precompiled templates.\n\n    Example usage:\n\n    >>> loader = ChoiceLoader([\n    ...     ModuleLoader('/path/to/compiled/templates'),\n    ...     FileSystemLoader('/path/to/templates')\n    ... ])\n\n    Templates can be precompiled with :meth:`Environment.compile_templates`.\n    ")), Assign(targets=[Name(id='has_source_access', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='package_name', ctx=Store())], value=JoinedStr(values=[Constant(value='_jinja2_module_templates_'), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='x')]))])), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='_TemplateModule', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='abc', ctx=Load()), attr='Iterable', ctx=Load())], keywords=[])), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=List(elts=[Name(id='path', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='mod', ctx=Load()), attr='__path__', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='path', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='package_name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='weakref', ctx=Load()), attr='proxy', ctx=Load()), args=[Name(id='mod', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='package_name', ctx=Load()), Constant(value=None)], keywords=[]))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='module', ctx=Store())], value=Name(id='mod', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_name', ctx=Store())], value=Name(id='package_name', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_template_key', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='tmpl_'), op=Add(), right=Call(func=Attribute(value=Call(func=Name(id='sha1', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_module_filename', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Attribute(value=Name(id='ModuleLoader', ctx=Load()), attr='get_template_key', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.py')))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_template_key', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='module', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_name', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='module', ctx=Load()), Name(id='module', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='mod', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Constant(value='root')], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TemplateNotFound', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='globals', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='globals', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='environment', ctx=Load()), attr='template_class', ctx=Load()), attr='from_module_dict', ctx=Load()), args=[Name(id='environment', ctx=Load()), Attribute(value=Name(id='mod', ctx=Load()), attr='__dict__', ctx=Load()), Name(id='globals', ctx=Load())], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Constant(value='Template'))], decorator_list=[])], type_ignores=[])