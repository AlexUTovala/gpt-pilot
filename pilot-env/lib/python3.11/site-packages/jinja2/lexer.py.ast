Module(body=[Expr(value=Constant(value="Implements a Jinja / Python combination lexer. The ``Lexer`` class\nis used to do some preprocessing. It filters out invalid operators like\nthe bitshift operators we don't allow in templates. It separates\ntemplate code and python code in expressions.\n")), Import(names=[alias(name='re')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='ast', names=[alias(name='literal_eval')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='sys', names=[alias(name='intern')], level=0), ImportFrom(module='_identifier', names=[alias(name='pattern', asname='name_re')], level=1), ImportFrom(module='exceptions', names=[alias(name='TemplateSyntaxError')], level=1), ImportFrom(module='utils', names=[alias(name='LRUCache')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='typing_extensions', asname='te')]), ImportFrom(module='environment', names=[alias(name='Environment')], level=1)], orelse=[]), AnnAssign(target=Name(id='_lexer_cache', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), Constant(value='Lexer')], ctx=Load()), ctx=Load()), value=Call(func=Name(id='LRUCache', ctx=Load()), args=[Constant(value=50)], keywords=[]), simple=1), Assign(targets=[Name(id='whitespace_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\s+')], keywords=[])), Assign(targets=[Name(id='newline_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\r\\n|\\r|\\n)')], keywords=[])), Assign(targets=[Name(id='string_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)")'), Attribute(value=Name(id='re', ctx=Load()), attr='S', ctx=Load())], keywords=[])), Assign(targets=[Name(id='integer_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n    (\n        0b(_?[0-1])+ # binary\n    |\n        0o(_?[0-7])+ # octal\n    |\n        0x(_?[\\da-f])+ # hex\n    |\n        [1-9](_?\\d)* # decimal\n    |\n        0(_?0)* # decimal zero\n    )\n    '), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='float_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value="\n    (?<!\\.)  # doesn't start with a .\n    (\\d+_)*\\d+  # digits, possibly _ separated\n    (\n        (\\.(\\d+_)*\\d+)?  # optional fractional part\n        e[+\\-]?(\\d+_)*\\d+  # exponent part\n    |\n        \\.(\\d+_)*\\d+  # required fractional part\n    )\n    "), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='TOKEN_ADD', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='add')], keywords=[])), Assign(targets=[Name(id='TOKEN_ASSIGN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='assign')], keywords=[])), Assign(targets=[Name(id='TOKEN_COLON', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='colon')], keywords=[])), Assign(targets=[Name(id='TOKEN_COMMA', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='comma')], keywords=[])), Assign(targets=[Name(id='TOKEN_DIV', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='div')], keywords=[])), Assign(targets=[Name(id='TOKEN_DOT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='dot')], keywords=[])), Assign(targets=[Name(id='TOKEN_EQ', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='eq')], keywords=[])), Assign(targets=[Name(id='TOKEN_FLOORDIV', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='floordiv')], keywords=[])), Assign(targets=[Name(id='TOKEN_GT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='gt')], keywords=[])), Assign(targets=[Name(id='TOKEN_GTEQ', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='gteq')], keywords=[])), Assign(targets=[Name(id='TOKEN_LBRACE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='lbrace')], keywords=[])), Assign(targets=[Name(id='TOKEN_LBRACKET', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='lbracket')], keywords=[])), Assign(targets=[Name(id='TOKEN_LPAREN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='lparen')], keywords=[])), Assign(targets=[Name(id='TOKEN_LT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='lt')], keywords=[])), Assign(targets=[Name(id='TOKEN_LTEQ', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='lteq')], keywords=[])), Assign(targets=[Name(id='TOKEN_MOD', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='mod')], keywords=[])), Assign(targets=[Name(id='TOKEN_MUL', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='mul')], keywords=[])), Assign(targets=[Name(id='TOKEN_NE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='ne')], keywords=[])), Assign(targets=[Name(id='TOKEN_PIPE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='pipe')], keywords=[])), Assign(targets=[Name(id='TOKEN_POW', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='pow')], keywords=[])), Assign(targets=[Name(id='TOKEN_RBRACE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='rbrace')], keywords=[])), Assign(targets=[Name(id='TOKEN_RBRACKET', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='rbracket')], keywords=[])), Assign(targets=[Name(id='TOKEN_RPAREN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='rparen')], keywords=[])), Assign(targets=[Name(id='TOKEN_SEMICOLON', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='semicolon')], keywords=[])), Assign(targets=[Name(id='TOKEN_SUB', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='sub')], keywords=[])), Assign(targets=[Name(id='TOKEN_TILDE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='tilde')], keywords=[])), Assign(targets=[Name(id='TOKEN_WHITESPACE', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='whitespace')], keywords=[])), Assign(targets=[Name(id='TOKEN_FLOAT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='float')], keywords=[])), Assign(targets=[Name(id='TOKEN_INTEGER', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='integer')], keywords=[])), Assign(targets=[Name(id='TOKEN_NAME', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='name')], keywords=[])), Assign(targets=[Name(id='TOKEN_STRING', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='string')], keywords=[])), Assign(targets=[Name(id='TOKEN_OPERATOR', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='operator')], keywords=[])), Assign(targets=[Name(id='TOKEN_BLOCK_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='block_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_BLOCK_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='block_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_VARIABLE_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='variable_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_VARIABLE_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='variable_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_RAW_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='raw_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_RAW_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='raw_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_COMMENT_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='comment_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_COMMENT_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='comment_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_COMMENT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='comment')], keywords=[])), Assign(targets=[Name(id='TOKEN_LINESTATEMENT_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='linestatement_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_LINESTATEMENT_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='linestatement_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_LINECOMMENT_BEGIN', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='linecomment_begin')], keywords=[])), Assign(targets=[Name(id='TOKEN_LINECOMMENT_END', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='linecomment_end')], keywords=[])), Assign(targets=[Name(id='TOKEN_LINECOMMENT', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='linecomment')], keywords=[])), Assign(targets=[Name(id='TOKEN_DATA', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='data')], keywords=[])), Assign(targets=[Name(id='TOKEN_INITIAL', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='initial')], keywords=[])), Assign(targets=[Name(id='TOKEN_EOF', ctx=Store())], value=Call(func=Name(id='intern', ctx=Load()), args=[Constant(value='eof')], keywords=[])), Assign(targets=[Name(id='operators', ctx=Store())], value=Dict(keys=[Constant(value='+'), Constant(value='-'), Constant(value='/'), Constant(value='//'), Constant(value='*'), Constant(value='%'), Constant(value='**'), Constant(value='~'), Constant(value='['), Constant(value=']'), Constant(value='('), Constant(value=')'), Constant(value='{'), Constant(value='}'), Constant(value='=='), Constant(value='!='), Constant(value='>'), Constant(value='>='), Constant(value='<'), Constant(value='<='), Constant(value='='), Constant(value='.'), Constant(value=':'), Constant(value='|'), Constant(value=','), Constant(value=';')], values=[Name(id='TOKEN_ADD', ctx=Load()), Name(id='TOKEN_SUB', ctx=Load()), Name(id='TOKEN_DIV', ctx=Load()), Name(id='TOKEN_FLOORDIV', ctx=Load()), Name(id='TOKEN_MUL', ctx=Load()), Name(id='TOKEN_MOD', ctx=Load()), Name(id='TOKEN_POW', ctx=Load()), Name(id='TOKEN_TILDE', ctx=Load()), Name(id='TOKEN_LBRACKET', ctx=Load()), Name(id='TOKEN_RBRACKET', ctx=Load()), Name(id='TOKEN_LPAREN', ctx=Load()), Name(id='TOKEN_RPAREN', ctx=Load()), Name(id='TOKEN_LBRACE', ctx=Load()), Name(id='TOKEN_RBRACE', ctx=Load()), Name(id='TOKEN_EQ', ctx=Load()), Name(id='TOKEN_NE', ctx=Load()), Name(id='TOKEN_GT', ctx=Load()), Name(id='TOKEN_GTEQ', ctx=Load()), Name(id='TOKEN_LT', ctx=Load()), Name(id='TOKEN_LTEQ', ctx=Load()), Name(id='TOKEN_ASSIGN', ctx=Load()), Name(id='TOKEN_DOT', ctx=Load()), Name(id='TOKEN_COLON', ctx=Load()), Name(id='TOKEN_PIPE', ctx=Load()), Name(id='TOKEN_COMMA', ctx=Load()), Name(id='TOKEN_SEMICOLON', ctx=Load())])), Assign(targets=[Name(id='reverse_operators', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='operators', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='operators', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='reverse_operators', ctx=Load())], keywords=[])]), msg=Constant(value='operators dropped')), Assign(targets=[Name(id='operator_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='('), FormattedValue(value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='operators', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]))))]), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=')')])], keywords=[])), Assign(targets=[Name(id='ignored_tokens', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Name(id='TOKEN_COMMENT_BEGIN', ctx=Load()), Name(id='TOKEN_COMMENT', ctx=Load()), Name(id='TOKEN_COMMENT_END', ctx=Load()), Name(id='TOKEN_WHITESPACE', ctx=Load()), Name(id='TOKEN_LINECOMMENT_BEGIN', ctx=Load()), Name(id='TOKEN_LINECOMMENT_END', ctx=Load()), Name(id='TOKEN_LINECOMMENT', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='ignore_if_empty', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Name(id='TOKEN_WHITESPACE', ctx=Load()), Name(id='TOKEN_DATA', ctx=Load()), Name(id='TOKEN_COMMENT', ctx=Load()), Name(id='TOKEN_LINECOMMENT', ctx=Load())], ctx=Load())], keywords=[])), FunctionDef(name='_describe_token_type', args=arguments(posonlyargs=[], args=[arg(arg='token_type', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='token_type', ctx=Load()), ops=[In()], comparators=[Name(id='reverse_operators', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='reverse_operators', ctx=Load()), slice=Name(id='token_type', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Dict(keys=[Name(id='TOKEN_COMMENT_BEGIN', ctx=Load()), Name(id='TOKEN_COMMENT_END', ctx=Load()), Name(id='TOKEN_COMMENT', ctx=Load()), Name(id='TOKEN_LINECOMMENT', ctx=Load()), Name(id='TOKEN_BLOCK_BEGIN', ctx=Load()), Name(id='TOKEN_BLOCK_END', ctx=Load()), Name(id='TOKEN_VARIABLE_BEGIN', ctx=Load()), Name(id='TOKEN_VARIABLE_END', ctx=Load()), Name(id='TOKEN_LINESTATEMENT_BEGIN', ctx=Load()), Name(id='TOKEN_LINESTATEMENT_END', ctx=Load()), Name(id='TOKEN_DATA', ctx=Load()), Name(id='TOKEN_EOF', ctx=Load())], values=[Constant(value='begin of comment'), Constant(value='end of comment'), Constant(value='comment'), Constant(value='comment'), Constant(value='begin of statement block'), Constant(value='end of statement block'), Constant(value='begin of print statement'), Constant(value='end of print statement'), Constant(value='begin of line statement'), Constant(value='end of line statement'), Constant(value='template data / text'), Constant(value='end of template')]), attr='get', ctx=Load()), args=[Name(id='token_type', ctx=Load()), Name(id='token_type', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='describe_token', args=arguments(posonlyargs=[], args=[arg(arg='token', annotation=Constant(value='Token'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a description of the token.')), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_NAME', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='_describe_token_type', ctx=Load()), args=[Attribute(value=Name(id='token', ctx=Load()), attr='type', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='describe_token_expr', args=arguments(posonlyargs=[], args=[arg(arg='expr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like `describe_token` but for token expressions.')), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='expr', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='type', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='expr', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_NAME', ctx=Load())]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='type', ctx=Store())], value=Name(id='expr', ctx=Load()))]), Return(value=Call(func=Name(id='_describe_token_type', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='count_newlines', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Count the number of newline characters in the string.  This is\n    useful for extensions that filter a stream.\n    ')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='newline_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='compile_rules', args=arguments(posonlyargs=[], args=[arg(arg='environment', annotation=Constant(value='Environment'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compiles all the rules from the environment into a list of rules.')), Assign(targets=[Name(id='e', ctx=Store())], value=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load())), Assign(targets=[Name(id='rules', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='comment_start_string', ctx=Load())], keywords=[]), Name(id='TOKEN_COMMENT_BEGIN', ctx=Load()), Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='comment_start_string', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='block_start_string', ctx=Load())], keywords=[]), Name(id='TOKEN_BLOCK_BEGIN', ctx=Load()), Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='block_start_string', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='variable_start_string', ctx=Load())], keywords=[]), Name(id='TOKEN_VARIABLE_BEGIN', ctx=Load()), Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='variable_start_string', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='environment', ctx=Load()), attr='line_statement_prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='rules', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='line_statement_prefix', ctx=Load())], keywords=[]), Name(id='TOKEN_LINESTATEMENT_BEGIN', ctx=Load()), BinOp(left=Constant(value='^[ \\t\\v]*'), op=Add(), right=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='line_statement_prefix', ctx=Load())], keywords=[]))], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='environment', ctx=Load()), attr='line_comment_prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='rules', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='line_comment_prefix', ctx=Load())], keywords=[]), Name(id='TOKEN_LINECOMMENT_BEGIN', ctx=Load()), BinOp(left=Constant(value='(?:^|(?<=\\S))[^\\S\\r\\n]*'), op=Add(), right=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='line_comment_prefix', ctx=Load())], keywords=[]))], ctx=Load())], keywords=[]))], orelse=[]), Return(value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='rules', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), ClassDef(name='Failure', bases=[], keywords=[], body=[Expr(value=Constant(value='Class that raises a `TemplateSyntaxError` if called.\n    Used by the `Lexer` to specify known errors.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='cls', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='TemplateSyntaxError', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='TemplateSyntaxError', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='error_class', ctx=Store())], value=Name(id='cls', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='error_class', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='te.NoReturn'))], decorator_list=[]), ClassDef(name='Token', bases=[Attribute(value=Name(id='t', ctx=Load()), attr='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='lineno', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='describe_token', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test a token against a token expression.  This can either be a\n        token type or ``'token_type:token_value'``.  This can only test\n        against string values and types.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Name(id='expr', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='expr', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='expr', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], ctx=Load())]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_any', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='iterable', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test against multiple token expressions.')), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='test', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='expr', ctx=Store()), iter=Name(id='iterable', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='TokenStreamIterator', bases=[], keywords=[], body=[Expr(value=Constant(value='The iterator for tokenstreams.  Iterate over the stream\n    until the eof token is reached.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream', annotation=Constant(value='TokenStream'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Name(id='stream', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='TokenStreamIterator')), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='type', ctx=Load()), ops=[Is()], comparators=[Name(id='TOKEN_EOF', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise(exc=Name(id='StopIteration', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Return(value=Name(id='token', ctx=Load()))], decorator_list=[], returns=Name(id='Token', ctx=Load()))], decorator_list=[]), ClassDef(name='TokenStream', bases=[], keywords=[], body=[Expr(value=Constant(value='A token stream is an iterable that yields :class:`Token`\\s.  The\n    parser however does not iterate over it but calls :meth:`next` to go\n    one token ahead.  The current active token is stored as :attr:`current`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='generator', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iter', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='generator', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_pushed', ctx=Store()), annotation=Constant(value='te.Deque[Token]'), value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Name(id='Token', ctx=Load()), args=[Constant(value=1), Name(id='TOKEN_INITIAL', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='TokenStreamIterator', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='TokenStreamIterator', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pushed', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[IsNot()], comparators=[Name(id='TOKEN_EOF', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='eos', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Are we at the end of the stream?')), Return(value=UnaryOp(op=Not(), operand=Name(id='self', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='push', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token', annotation=Name(id='Token', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Push a token back to the stream.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pushed', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='look', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Look at the next token.')), Assign(targets=[Name(id='old_token', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Name(id='old_token', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='Token', ctx=Load())), FunctionDef(name='skip', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Got n tokens ahead.')), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='next_if', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Perform the token test and return the token if it matched.\n        Otherwise the return value is `None`.\n        ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='test', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load())), FunctionDef(name='skip_if', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like :meth:`next_if` but only returns `True` or `False`.')), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='next_if', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Go one token ahead and return the old one.\n\n        Use the built-in :func:`next` instead of calling this directly.\n        ')), Assign(targets=[Name(id='rv', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_pushed', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pushed', ctx=Load()), attr='popleft', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[IsNot()], comparators=[Name(id='TOKEN_EOF', ctx=Load())]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iter', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Name(id='Token', ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close the stream.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Store())], value=Call(func=Name(id='Token', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='lineno', ctx=Load()), Name(id='TOKEN_EOF', ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iter', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Tuple(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='expect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expect a given token type and return it.  This accepts the same\n        argument as :meth:`jinja2.lexer.Token.test`.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='test', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='expr', ctx=Store())], value=Call(func=Name(id='describe_token_expr', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Is()], comparators=[Name(id='TOKEN_EOF', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unexpected end of template, expected '), FormattedValue(value=Name(id='expr', ctx=Load()), conversion=114), Constant(value='.')]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value='expected token '), FormattedValue(value=Name(id='expr', ctx=Load()), conversion=114), Constant(value=', got '), FormattedValue(value=Call(func=Name(id='describe_token', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load())], keywords=[]), conversion=114)]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Token', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_lexer', args=arguments(posonlyargs=[], args=[arg(arg='environment', annotation=Constant(value='Environment'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a lexer which is probably cached.')), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='environment', ctx=Load()), attr='block_start_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='block_end_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='variable_start_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='variable_end_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='comment_start_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='comment_end_string', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='line_statement_prefix', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='line_comment_prefix', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='trim_blocks', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='lstrip_blocks', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='newline_sequence', ctx=Load()), Attribute(value=Name(id='environment', ctx=Load()), attr='keep_trailing_newline', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Attribute(value=Name(id='_lexer_cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='lexer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store()), Name(id='lexer', ctx=Store())], value=Call(func=Name(id='Lexer', ctx=Load()), args=[Name(id='environment', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='lexer', ctx=Load()))], decorator_list=[], returns=Constant(value='Lexer')), ClassDef(name='OptionalLStrip', bases=[Name(id='tuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A special tuple for marking a point in the state that can have\n    lstrip applied.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='members'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='members', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_Rule', bases=[Attribute(value=Name(id='t', ctx=Load()), attr='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='pattern', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='tokens', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Name(id='Failure', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='command', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Lexer', bases=[], keywords=[], body=[Expr(value=Constant(value="Class that implements a lexer for a given environment. Automatically\n    created by the environment class, usually you don't have to do that.\n\n    Note that the lexer is not automatically bound to an environment.\n    Multiple environments can share the same lexer.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='e', ctx=Store())], value=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load())), FunctionDef(name='c', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='x', ctx=Load()), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='M', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='S', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='tag_rules', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='_Rule', ctx=Load()), ctx=Load()), value=List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='whitespace_re', ctx=Load()), Name(id='TOKEN_WHITESPACE', ctx=Load()), Constant(value=None)], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='float_re', ctx=Load()), Name(id='TOKEN_FLOAT', ctx=Load()), Constant(value=None)], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='integer_re', ctx=Load()), Name(id='TOKEN_INTEGER', ctx=Load()), Constant(value=None)], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='name_re', ctx=Load()), Name(id='TOKEN_NAME', ctx=Load()), Constant(value=None)], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='string_re', ctx=Load()), Name(id='TOKEN_STRING', ctx=Load()), Constant(value=None)], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Name(id='operator_re', ctx=Load()), Name(id='TOKEN_OPERATOR', ctx=Load()), Constant(value=None)], keywords=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='root_tag_rules', ctx=Store())], value=Call(func=Name(id='compile_rules', ctx=Load()), args=[Name(id='environment', ctx=Load())], keywords=[])), Assign(targets=[Name(id='block_start_re', ctx=Store())], value=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='block_start_string', ctx=Load())], keywords=[])), Assign(targets=[Name(id='block_end_re', ctx=Store())], value=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='block_end_string', ctx=Load())], keywords=[])), Assign(targets=[Name(id='comment_end_re', ctx=Store())], value=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='comment_end_string', ctx=Load())], keywords=[])), Assign(targets=[Name(id='variable_end_re', ctx=Store())], value=Call(func=Name(id='e', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='variable_end_string', ctx=Load())], keywords=[])), Assign(targets=[Name(id='block_suffix_re', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='environment', ctx=Load()), attr='trim_blocks', ctx=Load()), body=Constant(value='\\n?'), orelse=Constant(value=''))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lstrip_blocks', ctx=Store())], value=Attribute(value=Name(id='environment', ctx=Load()), attr='lstrip_blocks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='newline_sequence', ctx=Store())], value=Attribute(value=Name(id='environment', ctx=Load()), attr='newline_sequence', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keep_trailing_newline', ctx=Store())], value=Attribute(value=Name(id='environment', ctx=Load()), attr='keep_trailing_newline', ctx=Load())), Assign(targets=[Name(id='root_raw_re', ctx=Store())], value=JoinedStr(values=[Constant(value='(?P<raw_begin>'), FormattedValue(value=Name(id='block_start_re', ctx=Load()), conversion=-1), Constant(value='(\\-|\\+|)\\s*raw\\s*(?:\\-'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='\\s*|'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='))')])), Assign(targets=[Name(id='root_parts_re', ctx=Store())], value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[BinOp(left=List(elts=[Name(id='root_raw_re', ctx=Load())], ctx=Load()), op=Add(), right=ListComp(elt=JoinedStr(values=[Constant(value='(?P<'), FormattedValue(value=Name(id='n', ctx=Load()), conversion=-1), Constant(value='>'), FormattedValue(value=Name(id='r', ctx=Load()), conversion=-1), Constant(value='(\\-|\\+|))')]), generators=[comprehension(target=Tuple(elts=[Name(id='n', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), iter=Name(id='root_tag_rules', ctx=Load()), ifs=[], is_async=0)]))], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='_Rule', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='root'), Name(id='TOKEN_COMMENT_BEGIN', ctx=Load()), Name(id='TOKEN_BLOCK_BEGIN', ctx=Load()), Name(id='TOKEN_VARIABLE_BEGIN', ctx=Load()), Name(id='TOKEN_RAW_BEGIN', ctx=Load()), Name(id='TOKEN_LINESTATEMENT_BEGIN', ctx=Load()), Name(id='TOKEN_LINECOMMENT_BEGIN', ctx=Load())], values=[List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[JoinedStr(values=[Constant(value='(.*?)(?:'), FormattedValue(value=Name(id='root_parts_re', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[]), Call(func=Name(id='OptionalLStrip', ctx=Load()), args=[Name(id='TOKEN_DATA', ctx=Load()), Constant(value='#bygroup')], keywords=[]), Constant(value='#bygroup')], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[Constant(value='.+')], keywords=[]), Name(id='TOKEN_DATA', ctx=Load()), Constant(value=None)], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[JoinedStr(values=[Constant(value='(.*?)((?:\\+'), FormattedValue(value=Name(id='comment_end_re', ctx=Load()), conversion=-1), Constant(value='|\\-'), FormattedValue(value=Name(id='comment_end_re', ctx=Load()), conversion=-1), Constant(value='\\s*|'), FormattedValue(value=Name(id='comment_end_re', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='block_suffix_re', ctx=Load()), conversion=-1), Constant(value='))')])], keywords=[]), Tuple(elts=[Name(id='TOKEN_COMMENT', ctx=Load()), Name(id='TOKEN_COMMENT_END', ctx=Load())], ctx=Load()), Constant(value='#pop')], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[Constant(value='(.)')], keywords=[]), Tuple(elts=[Call(func=Name(id='Failure', ctx=Load()), args=[Constant(value='Missing end of comment tag')], keywords=[])], ctx=Load()), Constant(value=None)], keywords=[])], ctx=Load()), BinOp(left=List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[JoinedStr(values=[Constant(value='(?:\\+'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='|\\-'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='\\s*|'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='block_suffix_re', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[]), Name(id='TOKEN_BLOCK_END', ctx=Load()), Constant(value='#pop')], keywords=[])], ctx=Load()), op=Add(), right=Name(id='tag_rules', ctx=Load())), BinOp(left=List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[JoinedStr(values=[Constant(value='\\-'), FormattedValue(value=Name(id='variable_end_re', ctx=Load()), conversion=-1), Constant(value='\\s*|'), FormattedValue(value=Name(id='variable_end_re', ctx=Load()), conversion=-1)])], keywords=[]), Name(id='TOKEN_VARIABLE_END', ctx=Load()), Constant(value='#pop')], keywords=[])], ctx=Load()), op=Add(), right=Name(id='tag_rules', ctx=Load())), List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[JoinedStr(values=[Constant(value='(.*?)((?:'), FormattedValue(value=Name(id='block_start_re', ctx=Load()), conversion=-1), Constant(value='(\\-|\\+|))\\s*endraw\\s*(?:\\+'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='|\\-'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), Constant(value='\\s*|'), FormattedValue(value=Name(id='block_end_re', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='block_suffix_re', ctx=Load()), conversion=-1), Constant(value='))')])], keywords=[]), Call(func=Name(id='OptionalLStrip', ctx=Load()), args=[Name(id='TOKEN_DATA', ctx=Load()), Name(id='TOKEN_RAW_END', ctx=Load())], keywords=[]), Constant(value='#pop')], keywords=[]), Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[Constant(value='(.)')], keywords=[]), Tuple(elts=[Call(func=Name(id='Failure', ctx=Load()), args=[Constant(value='Missing end of raw directive')], keywords=[])], ctx=Load()), Constant(value=None)], keywords=[])], ctx=Load()), BinOp(left=List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[Constant(value='\\s*(\\n|$)')], keywords=[]), Name(id='TOKEN_LINESTATEMENT_END', ctx=Load()), Constant(value='#pop')], keywords=[])], ctx=Load()), op=Add(), right=Name(id='tag_rules', ctx=Load())), List(elts=[Call(func=Name(id='_Rule', ctx=Load()), args=[Call(func=Name(id='c', ctx=Load()), args=[Constant(value='(.*?)()(?=\\n|$)')], keywords=[]), Tuple(elts=[Name(id='TOKEN_LINECOMMENT', ctx=Load()), Name(id='TOKEN_LINECOMMENT_END', ctx=Load())], ctx=Load()), Constant(value='#pop')], keywords=[])], ctx=Load())]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_normalize_newlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace all newlines with the configured sequence in strings\n        and template data.\n        ')), Return(value=Call(func=Attribute(value=Name(id='newline_re', ctx=Load()), attr='sub', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='newline_sequence', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='tokenize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='state', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Calls tokeniter + tokenize and wraps it in a token stream.')), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tokeniter', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='state', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='TokenStream', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='TokenStream', ctx=Load())), FunctionDef(name='wrap', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='This is called with the stream as returned by `tokenize` and wraps\n        every token in a :class:`Token` and converts the value.\n        ')), For(target=Tuple(elts=[Name(id='lineno', ctx=Store()), Name(id='token', ctx=Store()), Name(id='value_str', ctx=Store())], ctx=Store()), iter=Name(id='stream', ctx=Load()), body=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[In()], comparators=[Name(id='ignored_tokens', ctx=Load())]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Name(id='value_str', ctx=Load()), simple=1), If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_LINESTATEMENT_BEGIN', ctx=Load())]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Name(id='TOKEN_BLOCK_BEGIN', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_LINESTATEMENT_END', ctx=Load())]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Name(id='TOKEN_BLOCK_END', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='TOKEN_RAW_BEGIN', ctx=Load()), Name(id='TOKEN_RAW_END', ctx=Load())], ctx=Load())]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_DATA', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_newlines', ctx=Load()), args=[Name(id='value_str', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Constant(value='keyword')]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Name(id='value_str', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_NAME', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='value_str', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='isidentifier', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[Constant(value='Invalid character in identifier'), Name(id='lineno', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_STRING', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_newlines', ctx=Load()), args=[Subscript(value=Name(id='value_str', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='ascii'), Constant(value='backslashreplace')], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='unicode-escape')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_INTEGER', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value_str', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[]), Constant(value=0)], keywords=[]))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_FLOAT', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='literal_eval', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value_str', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_OPERATOR', ctx=Load())]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Subscript(value=Name(id='operators', ctx=Load()), slice=Name(id='value_str', ctx=Load()), ctx=Load()))], orelse=[])])])])])])])])])]), Expr(value=Yield(value=Call(func=Name(id='Token', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='token', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load())), FunctionDef(name='tokeniter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='state', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='This method tokenizes the text and returns the tokens in a\n        generator. Use this method if you just want to tokenize a template.\n\n        .. versionchanged:: 3.0\n            Only ``\\n``, ``\\r\\n`` and ``\\r`` are treated as line\n            breaks.\n        ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='newline_re', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), slice=Slice(step=Constant(value=2)), ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='keep_trailing_newline', ctx=Load())), Compare(left=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]), body=[Delete(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='lineno', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Constant(value='root')], ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='state', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='root')])]), body=[Assert(test=Compare(left=Name(id='state', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='variable'), Constant(value='block')], ctx=Load())]), msg=Constant(value='invalid state')), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='state', ctx=Load()), op=Add(), right=Constant(value='_begin'))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Load()), slice=Subscript(value=Name(id='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='source_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='balancing_stack', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='newlines_stripped', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='line_starting', ctx=Store())], value=Constant(value=True)), While(test=Constant(value=True), body=[For(target=Tuple(elts=[Name(id='regex', ctx=Store()), Name(id='tokens', ctx=Store()), Name(id='new_state', ctx=Store())], ctx=Store()), iter=Name(id='statetokens', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='balancing_stack', ctx=Load()), Compare(left=Name(id='tokens', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='TOKEN_VARIABLE_END', ctx=Load()), Name(id='TOKEN_BLOCK_END', ctx=Load()), Name(id='TOKEN_LINESTATEMENT_END', ctx=Load())], ctx=Load())])]), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tokens', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='groups', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tokens', ctx=Load()), Name(id='OptionalLStrip', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='strip_sign', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='g', ctx=Load()), generators=[comprehension(target=Name(id='g', ctx=Store()), iter=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=2), step=Constant(value=2)), ctx=Load()), ifs=[Compare(left=Name(id='g', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])], keywords=[])), If(test=Compare(left=Name(id='strip_sign', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='stripped', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='newlines_stripped', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='stripped', ctx=Load())], keywords=[])), ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='groups', ctx=Store())], value=List(elts=[Name(id='stripped', ctx=Load()), Starred(value=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='strip_sign', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='+')]), Attribute(value=Name(id='self', ctx=Load()), attr='lstrip_blocks', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[]), attr='get', ctx=Load()), args=[Name(id='TOKEN_VARIABLE_BEGIN', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='l_pos', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='\n')], keywords=[]), op=Add(), right=Constant(value=1))), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='l_pos', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Name(id='line_starting', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='whitespace_re', ctx=Load()), attr='fullmatch', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='l_pos', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='groups', ctx=Store())], value=List(elts=[Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Name(id='l_pos', ctx=Load())), ctx=Load()), Starred(value=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])])], orelse=[]), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Name(id='Failure', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='token', ctx=Load()), args=[Name(id='lineno', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='token', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#bygroup')]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='lineno', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='lineno', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='regex', ctx=Load()), conversion=114), Constant(value=' wanted to resolve the token dynamically but no group matched')])], keywords=[]))])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())), If(test=BoolOp(op=Or(), values=[Name(id='data', ctx=Load()), Compare(left=Name(id='token', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore_if_empty', ctx=Load())])]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='lineno', ctx=Load()), Name(id='token', ctx=Load()), Name(id='data', ctx=Load())], ctx=Load())))], orelse=[]), AugAssign(target=Name(id='lineno', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n')], keywords=[]), op=Add(), right=Name(id='newlines_stripped', ctx=Load()))), Assign(targets=[Name(id='newlines_stripped', ctx=Store())], value=Constant(value=0))])])], orelse=[])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='tokens', ctx=Load()), ops=[Eq()], comparators=[Name(id='TOKEN_OPERATOR', ctx=Load())]), body=[If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{')]), body=[Expr(value=Call(func=Attribute(value=Name(id='balancing_stack', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='}')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Constant(value='(')]), body=[Expr(value=Call(func=Attribute(value=Name(id='balancing_stack', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=')')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Expr(value=Call(func=Attribute(value=Name(id='balancing_stack', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=']')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='data', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='}'), Constant(value=')'), Constant(value=']')], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='balancing_stack', ctx=Load())), body=[Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value="unexpected '"), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1), Constant(value="'")]), Name(id='lineno', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='expected_op', ctx=Store())], value=Call(func=Attribute(value=Name(id='balancing_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='expected_op', ctx=Load()), ops=[NotEq()], comparators=[Name(id='data', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value="unexpected '"), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1), Constant(value="', expected '"), FormattedValue(value=Name(id='expected_op', ctx=Load()), conversion=-1), Constant(value="'")]), Name(id='lineno', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])])])], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='data', ctx=Load()), Compare(left=Name(id='tokens', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore_if_empty', ctx=Load())])]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='lineno', ctx=Load()), Name(id='tokens', ctx=Load()), Name(id='data', ctx=Load())], ctx=Load())))], orelse=[]), AugAssign(target=Name(id='lineno', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n')], keywords=[]))]), Assign(targets=[Name(id='line_starting', ctx=Store())], value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')])), Assign(targets=[Name(id='pos2', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#pop')]), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#bygroup')]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='regex', ctx=Load()), conversion=114), Constant(value=' wanted to resolve the new state dynamically but no group matched')])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_state', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Load()), slice=Subscript(value=Name(id='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='pos2', ctx=Load()), ops=[Eq()], comparators=[Name(id='pos', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='regex', ctx=Load()), conversion=114), Constant(value=' yielded empty string without stack change')])], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='pos', ctx=Store())], value=Name(id='pos2', ctx=Load())), Break()], orelse=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[GtE()], comparators=[Name(id='source_length', ctx=Load())]), body=[Return()], orelse=[]), Raise(exc=Call(func=Name(id='TemplateSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unexpected char '), FormattedValue(value=Subscript(value=Name(id='source', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), conversion=114), Constant(value=' at '), FormattedValue(value=Name(id='pos', ctx=Load()), conversion=-1)]), Name(id='lineno', ctx=Load()), Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])