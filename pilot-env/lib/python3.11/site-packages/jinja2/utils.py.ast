Module(body=[Import(names=[alias(name='enum')]), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='collections', names=[alias(name='abc')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='random', names=[alias(name='choice')], level=0), ImportFrom(module='random', names=[alias(name='randrange')], level=0), ImportFrom(module='threading', names=[alias(name='Lock')], level=0), ImportFrom(module='types', names=[alias(name='CodeType')], level=0), ImportFrom(module='urllib.parse', names=[alias(name='quote_from_bytes')], level=0), Import(names=[alias(name='markupsafe')]), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='typing_extensions', asname='te')])], orelse=[]), Assign(targets=[Name(id='F', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='F')], keywords=[keyword(arg='bound', value=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))])), AnnAssign(target=Name(id='missing', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Constant(value='MissingType'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='__repr__')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='missing'))])], keywords=[]), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='internal_code', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableSet', ctx=Load()), slice=Name(id='CodeType', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='concat', ctx=Store())], value=Attribute(value=Constant(value=''), attr='join', ctx=Load())), FunctionDef(name='pass_context', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pass the :class:`~jinja2.runtime.Context` as the first argument\n    to the decorated function when called while rendering a template.\n\n    Can be used on functions, filters, and tests.\n\n    If only ``Context.eval_context`` is needed, use\n    :func:`pass_eval_context`. If only ``Context.environment`` is\n    needed, use :func:`pass_environment`.\n\n    .. versionadded:: 3.0.0\n        Replaces ``contextfunction`` and ``contextfilter``.\n    ')), Assign(targets=[Attribute(value=Name(id='f', ctx=Load()), attr='jinja_pass_arg', ctx=Store())], value=Attribute(value=Name(id='_PassArg', ctx=Load()), attr='context', ctx=Load())), Return(value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Name(id='F', ctx=Load())), FunctionDef(name='pass_eval_context', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pass the :class:`~jinja2.nodes.EvalContext` as the first argument\n    to the decorated function when called while rendering a template.\n    See :ref:`eval-context`.\n\n    Can be used on functions, filters, and tests.\n\n    If only ``EvalContext.environment`` is needed, use\n    :func:`pass_environment`.\n\n    .. versionadded:: 3.0.0\n        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.\n    ')), Assign(targets=[Attribute(value=Name(id='f', ctx=Load()), attr='jinja_pass_arg', ctx=Store())], value=Attribute(value=Name(id='_PassArg', ctx=Load()), attr='eval_context', ctx=Load())), Return(value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Name(id='F', ctx=Load())), FunctionDef(name='pass_environment', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pass the :class:`~jinja2.Environment` as the first argument to\n    the decorated function when called while rendering a template.\n\n    Can be used on functions, filters, and tests.\n\n    .. versionadded:: 3.0.0\n        Replaces ``environmentfunction`` and ``environmentfilter``.\n    ')), Assign(targets=[Attribute(value=Name(id='f', ctx=Load()), attr='jinja_pass_arg', ctx=Store())], value=Attribute(value=Name(id='_PassArg', ctx=Load()), attr='environment', ctx=Load())), Return(value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Name(id='F', ctx=Load())), ClassDef(name='_PassArg', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='Enum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='eval_context', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='environment', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), FunctionDef(name='from_obj', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='obj', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='jinja_pass_arg')], keywords=[]), body=[Return(value=Attribute(value=Name(id='obj', ctx=Load()), attr='jinja_pass_arg', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Constant(value='_PassArg'), ctx=Load()))], decorator_list=[]), FunctionDef(name='internalcode', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Marks the function as internally used')), Expr(value=Call(func=Attribute(value=Name(id='internal_code', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='__code__', ctx=Load())], keywords=[])), Return(value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Name(id='F', ctx=Load())), FunctionDef(name='is_undefined', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if the object passed is undefined.  This does nothing more than\n    performing an instance check against :class:`Undefined` but looks nicer.\n    This can be used for custom filters or tests that want to react to\n    undefined variables.  For example a custom default filter can look like\n    this::\n\n        def default(var, default=''):\n            if is_undefined(var):\n                return default\n            return var\n    ")), ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='Undefined', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='consume', args=arguments(posonlyargs=[], args=[arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Consumes an iterable without doing anything with it.')), For(target=Name(id='_', ctx=Store()), iter=Name(id='iterable', ctx=Load()), body=[Pass()], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_caches', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Jinja keeps internal caches for environments and lexers.  These are\n    used so that Jinja doesn't have to recreate environments and lexers all\n    the time.  Normally you don't have to care about that but if you are\n    measuring memory consumption you may want to clean the caches.\n    ")), ImportFrom(module='environment', names=[alias(name='get_spontaneous_environment')], level=1), ImportFrom(module='lexer', names=[alias(name='_lexer_cache')], level=1), Expr(value=Call(func=Attribute(value=Name(id='get_spontaneous_environment', ctx=Load()), attr='cache_clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_lexer_cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='import_string', args=arguments(posonlyargs=[], args=[arg(arg='import_name', annotation=Name(id='str', ctx=Load())), arg(arg='silent', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Imports an object based on a string.  This is useful if you want to\n    use import paths as endpoints or something similar.  An import path can\n    be specified either in dotted notation (``xml.sax.saxutils.escape``)\n    or with a colon as object delimiter (``xml.sax.saxutils:escape``).\n\n    If the `silent` is True the return value will be `None` if the import\n    fails.\n\n    :return: imported object\n    ')), Try(body=[If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='import_name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='module', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='import_name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='import_name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='module', ctx=Store()), Name(id='_', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='import_name', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='import_name', ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Name(id='obj', ctx=Load())], ctx=Load())], keywords=[]), Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='AttributeError', ctx=Load())], ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='silent', ctx=Load())), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='open_if_exists', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='rb')]), body=[Expr(value=Constant(value='Returns a file descriptor for the filename if that file exists,\n    otherwise ``None``.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='IO', ctx=Load()), ctx=Load())), FunctionDef(name='object_type_repr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the name of the object's type.  For some recognized\n    singletons the name of the object is returned instead. (For\n    example for `None` and `Ellipsis`).\n    ")), If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value='None'))], orelse=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Name(id='Ellipsis', ctx=Load())]), body=[Return(value=Constant(value='Ellipsis'))], orelse=[])]), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='builtins')]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' object')]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' object')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pformat', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format an object using :func:`pprint.pformat`.')), ImportFrom(module='pprint', names=[alias(name='pformat')], level=0), Return(value=Call(func=Name(id='pformat', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_http_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n    ^\n    (\n        (https?://|www\\.)  # scheme or www\n        (([\\w%-]+\\.)+)?  # subdomain\n        (\n            [a-z]{2,63}  # basic tld\n        |\n            xn--[\\w%]{2,59}  # idna tld\n        )\n    |\n        ([\\w%-]{2,63}\\.)+  # basic domain\n        (com|net|int|edu|gov|org|info|mil)  # basic tld\n    |\n        (https?://)  # scheme\n        (\n            (([\\d]{1,3})(\\.[\\d]{1,3}){3})  # IPv4\n        |\n            (\\[([\\da-f]{0,4}:){2}([\\da-f]{0,4}:?){1,6}])  # IPv6\n        )\n    )\n    (?::[\\d]{1,5})?  # port\n    (?:[/?#]\\S*)?  # path, query, and fragment\n    $\n    '), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='_email_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\S+@\\w[\\w.-]*\\.\\w+$')], keywords=[])), FunctionDef(name='urlize', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='trim_url_limit', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='rel', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='target', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='extra_schemes', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Convert URLs in text into clickable links.\n\n    This may not recognize links in some situations. Usually, a more\n    comprehensive formatter, such as a Markdown library, is a better\n    choice.\n\n    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email\n    addresses. Links with trailing punctuation (periods, commas, closing\n    parentheses) and leading punctuation (opening parentheses) are\n    recognized excluding the punctuation. Email addresses that include\n    header fields are not recognized (for example,\n    ``mailto:address@example.com?cc=copy@example.com``).\n\n    :param text: Original text containing URLs to link.\n    :param trim_url_limit: Shorten displayed URL values to this length.\n    :param target: Add the ``target`` attribute to links.\n    :param rel: Add the ``rel`` attribute to links.\n    :param extra_schemes: Recognize URLs that start with these schemes\n        in addition to the default behavior.\n\n    .. versionchanged:: 3.0\n        The ``extra_schemes`` parameter was added.\n\n    .. versionchanged:: 3.0\n        Generate ``https://`` links for URLs without a scheme.\n\n    .. versionchanged:: 3.0\n        The parsing rules were updated. Recognize email addresses with\n        or without the ``mailto:`` scheme. Validate IP addresses. Ignore\n        parentheses and brackets in more cases.\n    ')), If(test=Compare(left=Name(id='trim_url_limit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[FunctionDef(name='trim_url', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='trim_url_limit', ctx=Load())]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='x', ctx=Load()), slice=Slice(upper=Name(id='trim_url_limit', ctx=Load())), ctx=Load()), conversion=-1), Constant(value='...')]))], orelse=[]), Return(value=Name(id='x', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], orelse=[FunctionDef(name='trim_url', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))]), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='(\\s+)'), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='rel_attr', ctx=Store())], value=IfExp(test=Name(id='rel', ctx=Load()), body=JoinedStr(values=[Constant(value=' rel="'), FormattedValue(value=Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='rel', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"')]), orelse=Constant(value=''))), Assign(targets=[Name(id='target_attr', ctx=Store())], value=IfExp(test=Name(id='target', ctx=Load()), body=JoinedStr(values=[Constant(value=' target="'), FormattedValue(value=Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"')]), orelse=Constant(value=''))), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='word', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='middle', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=''), Name(id='word', ctx=Load()), Constant(value='')], ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^([(<]|&lt;)+'), Name(id='middle', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Name(id='head', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='middle', ctx=Store())], value=Subscript(value=Name(id='middle', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value=')'), Constant(value='>'), Constant(value='.'), Constant(value=','), Constant(value='\n'), Constant(value='&gt;')], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='([)>.,\\n]|&gt;)+$'), Name(id='middle', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Name(id='tail', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='middle', ctx=Store())], value=Subscript(value=Name(id='middle', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='start_char', ctx=Store()), Name(id='end_char', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Constant(value='('), Constant(value=')')], ctx=Load()), Tuple(elts=[Constant(value='<'), Constant(value='>')], ctx=Load()), Tuple(elts=[Constant(value='&lt;'), Constant(value='&gt;')], ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='start_count', ctx=Store())], value=Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='start_char', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='start_count', ctx=Load()), ops=[LtE()], comparators=[Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='end_char', ctx=Load())], keywords=[])]), body=[Continue()], orelse=[]), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='start_count', ctx=Load()), Call(func=Attribute(value=Name(id='tail', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='end_char', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='end_index', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='tail', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='end_char', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='end_char', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='middle', ctx=Store()), op=Add(), value=Subscript(value=Name(id='tail', ctx=Load()), slice=Slice(upper=Name(id='end_index', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='tail', ctx=Store())], value=Subscript(value=Name(id='tail', ctx=Load()), slice=Slice(lower=Name(id='end_index', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='_http_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='middle', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='https://')], keywords=[]), Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='http://')], keywords=[])]), body=[Assign(targets=[Name(id='middle', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='"'), FormattedValue(value=Name(id='rel_attr', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='target_attr', ctx=Load()), conversion=-1), Constant(value='>'), FormattedValue(value=Call(func=Name(id='trim_url', ctx=Load()), args=[Name(id='middle', ctx=Load())], keywords=[]), conversion=-1), Constant(value='</a>')]))], orelse=[Assign(targets=[Name(id='middle', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="https://'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='"'), FormattedValue(value=Name(id='rel_attr', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='target_attr', ctx=Load()), conversion=-1), Constant(value='>'), FormattedValue(value=Call(func=Name(id='trim_url', ctx=Load()), args=[Name(id='middle', ctx=Load())], keywords=[]), conversion=-1), Constant(value='</a>')]))])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='mailto:')], keywords=[]), Call(func=Attribute(value=Name(id='_email_re', ctx=Load()), attr='match', ctx=Load()), args=[Subscript(value=Name(id='middle', ctx=Load()), slice=Slice(lower=Constant(value=7)), ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='middle', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Subscript(value=Name(id='middle', ctx=Load()), slice=Slice(lower=Constant(value=7)), ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='@'), ops=[In()], comparators=[Name(id='middle', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='www.')], keywords=[])), Compare(left=Constant(value=':'), ops=[NotIn()], comparators=[Name(id='middle', ctx=Load())]), Call(func=Attribute(value=Name(id='_email_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='middle', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='middle', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="mailto:'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[If(test=Compare(left=Name(id='extra_schemes', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='scheme', ctx=Store()), iter=Name(id='extra_schemes', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='middle', ctx=Load()), ops=[NotEq()], comparators=[Name(id='scheme', ctx=Load())]), Call(func=Attribute(value=Name(id='middle', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='middle', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='"'), FormattedValue(value=Name(id='rel_attr', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='target_attr', ctx=Load()), conversion=-1), Constant(value='>'), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[])], orelse=[])], orelse=[])])])]), Assign(targets=[Subscript(value=Name(id='words', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='head', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='middle', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='tail', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='generate_lorem_ipsum', args=arguments(posonlyargs=[], args=[arg(arg='n', annotation=Name(id='int', ctx=Load())), arg(arg='html', annotation=Name(id='bool', ctx=Load())), arg(arg='min', annotation=Name(id='int', ctx=Load())), arg(arg='max', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5), Constant(value=True), Constant(value=20), Constant(value=100)]), body=[Expr(value=Constant(value='Generate some lorem ipsum for the template.')), ImportFrom(module='constants', names=[alias(name='LOREM_IPSUM_WORDS')], level=1), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='LOREM_IPSUM_WORDS', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='next_capitalized', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='last_comma', ctx=Store()), Name(id='last_fullstop', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='word', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='last', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='p', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='randrange', ctx=Load()), args=[Name(id='min', ctx=Load()), Name(id='max', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Name(id='choice', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='word', ctx=Load()), ops=[NotEq()], comparators=[Name(id='last', ctx=Load())]), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='word', ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Name(id='next_capitalized', ctx=Load()), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='capitalize', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='next_capitalized', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Call(func=Name(id='randrange', ctx=Load()), args=[Constant(value=3), Constant(value=8)], keywords=[])), ops=[Gt()], comparators=[Name(id='last_comma', ctx=Load())]), body=[Assign(targets=[Name(id='last_comma', ctx=Store())], value=Name(id='idx', ctx=Load())), AugAssign(target=Name(id='last_fullstop', ctx=Store()), op=Add(), value=Constant(value=2)), AugAssign(target=Name(id='word', ctx=Store()), op=Add(), value=Constant(value=','))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='idx', ctx=Load()), op=Sub(), right=Call(func=Name(id='randrange', ctx=Load()), args=[Constant(value=10), Constant(value=20)], keywords=[])), ops=[Gt()], comparators=[Name(id='last_fullstop', ctx=Load())]), body=[Assign(targets=[Name(id='last_comma', ctx=Store()), Name(id='last_fullstop', ctx=Store())], value=Name(id='idx', ctx=Load())), AugAssign(target=Name(id='word', ctx=Store()), op=Add(), value=Constant(value='.')), Assign(targets=[Name(id='next_capitalized', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='p_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='p_str', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Name(id='p_str', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='p_str', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Constant(value='.')))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p_str', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.')], keywords=[])), body=[AugAssign(target=Name(id='p_str', ctx=Store()), op=Add(), value=Constant(value='.'))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p_str', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='html', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Constant(value='\n\n'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='Markup', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='<p>'), FormattedValue(value=Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), conversion=-1), Constant(value='</p>')]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='result', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='url_quote', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='charset', annotation=Name(id='str', ctx=Load())), arg(arg='for_qs', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value=False)]), body=[Expr(value=Constant(value='Quote a string for use in a URL using the given charset.\n\n    :param obj: String or bytes to quote. Other types are converted to\n        string then encoded to bytes using the given charset.\n    :param charset: Encode text to bytes using this charset.\n    :param for_qs: Quote "/" and use "+" for spaces.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='charset', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='safe', ctx=Store())], value=IfExp(test=Name(id='for_qs', ctx=Load()), body=Constant(value=b''), orelse=Constant(value=b'/'))), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='quote_from_bytes', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='safe', ctx=Load())], keywords=[])), If(test=Name(id='for_qs', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%20'), Constant(value='+')], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='LRUCache', bases=[], keywords=[], body=[Expr(value=Constant(value='A simple LRU Cache implementation.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='capacity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='capacity', ctx=Store())], value=Name(id='capacity', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Store()), annotation=Constant(value='te.Deque[t.Any]'), value=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[]), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_postinit', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_postinit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_popleft', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), attr='popleft', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pop', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), attr='pop', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_remove', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), attr='remove', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wlock', ctx=Store())], value=Call(func=Name(id='Lock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_append', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), attr='append', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='capacity'), Constant(value='_mapping'), Constant(value='_queue')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='capacity', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load())]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='d', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_postinit', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getnewargs__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='capacity', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load())), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a shallow copy of the instance.')), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='capacity', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='rv', ctx=Load()), attr='_mapping', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='rv', ctx=Load()), attr='_queue', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load())], keywords=[])), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Constant(value='LRUCache')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='default', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return an item from the cache dict or `default`')), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='setdefault', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='default', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Set `default` if the key is not in the cache otherwise\n        leave unchanged. Return the value of this key.\n        ')), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='default', ctx=Load())), Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear the cache.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_wlock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if a key exists in this cache.')), Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current size of the cache.')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get an item from the cache. Moves the item up so that it has the\n        highest priority then.\n\n        Raise a `KeyError` if it does not exist.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_wlock', ctx=Load()))], body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Name(id='key', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sets the value for an item. Moves the item up so that it\n        has the highest priority then.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_wlock', ctx=Load()))], body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='capacity', ctx=Load())]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_popleft', ctx=Load()), args=[], keywords=[]), ctx=Del())])], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove an item from the cache dict.\n        Raise a `KeyError` if it does not exist.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_wlock', ctx=Load()))], body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of items.')), Assign(targets=[Name(id='result', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='key', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of all values.')), Return(value=ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of all keys ordered by most recent usage.')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), FunctionDef(name='__reversed__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over the keys in the cache dict, oldest items\n        coming first.\n        ')), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_queue', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='__copy__', ctx=Store())], value=Name(id='copy', ctx=Load()))], decorator_list=[Attribute(value=Attribute(value=Name(id='abc', ctx=Load()), attr='MutableMapping', ctx=Load()), attr='register', ctx=Load())]), FunctionDef(name='select_autoescape', args=arguments(posonlyargs=[], args=[arg(arg='enabled_extensions', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='disabled_extensions', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='default_for_string', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Constant(value='html'), Constant(value='htm'), Constant(value='xml')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value="Intelligently sets the initial value of autoescaping based on the\n    filename of the template.  This is the recommended way to configure\n    autoescaping if you do not want to write a custom function yourself.\n\n    If you want to enable it for all templates created from strings or\n    for all templates with `.html` and `.xml` extensions::\n\n        from jinja2 import Environment, select_autoescape\n        env = Environment(autoescape=select_autoescape(\n            enabled_extensions=('html', 'xml'),\n            default_for_string=True,\n        ))\n\n    Example configuration to turn it on at all times except if the template\n    ends with `.txt`::\n\n        from jinja2 import Environment, select_autoescape\n        env = Environment(autoescape=select_autoescape(\n            disabled_extensions=('txt',),\n            default_for_string=True,\n            default=True,\n        ))\n\n    The `enabled_extensions` is an iterable of all the extensions that\n    autoescaping should be enabled for.  Likewise `disabled_extensions` is\n    a list of all templates it should be disabled for.  If a template is\n    loaded from a string then the default from `default_for_string` is used.\n    If nothing matches then the initial value of autoescaping is set to the\n    value of `default`.\n\n    For security reasons this function operates case insensitive.\n\n    .. versionadded:: 2.9\n    ")), Assign(targets=[Name(id='enabled_patterns', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='.'), FormattedValue(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='.')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), conversion=-1)]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='enabled_extensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='disabled_patterns', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='.'), FormattedValue(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='.')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), conversion=-1)]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='disabled_extensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='autoescape', args=arguments(posonlyargs=[], args=[arg(arg='template_name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='template_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='default_for_string', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='template_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='template_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='template_name', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='enabled_patterns', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='template_name', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='disabled_patterns', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Name(id='default', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Return(value=Name(id='autoescape', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='htmlsafe_json_dumps', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='dumps', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Serialize an object to a string of JSON with :func:`json.dumps`,\n    then replace HTML-unsafe characters with Unicode escapes and mark\n    the result safe with :class:`~markupsafe.Markup`.\n\n    This is available in templates as the ``|tojson`` filter.\n\n    The following characters are escaped: ``<``, ``>``, ``&``, ``\'``.\n\n    The returned string is safe to render in HTML documents and\n    ``<script>`` tags. The exception is in HTML attributes that are\n    double quoted; either use single quotes or the ``|forceescape``\n    filter.\n\n    :param obj: The object to serialize to JSON.\n    :param dumps: The ``dumps`` function to use. Defaults to\n        ``env.policies["json.dumps_function"]``, which defaults to\n        :func:`json.dumps`.\n    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto\n        ``env.policies["json.dumps_kwargs"]``.\n\n    .. versionchanged:: 3.0\n        The ``dumper`` parameter is renamed to ``dumps``.\n\n    .. versionadded:: 2.9\n    ')), If(test=Compare(left=Name(id='dumps', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='dumps', ctx=Store())], value=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='Markup', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='dumps', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), attr='replace', ctx=Load()), args=[Constant(value='<'), Constant(value='\\u003c')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), Constant(value='\\u003e')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='&'), Constant(value='\\u0026')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value='\\u0027')], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='markupsafe', ctx=Load()), attr='Markup', ctx=Load())), ClassDef(name='Cycler', bases=[], keywords=[], body=[Expr(value=Constant(value='Cycle through values by yield them one at a time, then restarting\n    once the end is reached. Available as ``cycler`` in templates.\n\n    Similar to ``loop.cycle``, but can be used outside loops or across\n    multiple loops. For example, render a list of folders and files in a\n    list, alternating giving them "odd" and "even" classes.\n\n    .. code-block:: html+jinja\n\n        {% set row_class = cycler("odd", "even") %}\n        <ul class="browser">\n        {% for folder in folders %}\n          <li class="folder {{ row_class.next() }}">{{ folder }}\n        {% endfor %}\n        {% for file in files %}\n          <li class="file {{ row_class.next() }}">{{ file }}\n        {% endfor %}\n        </ul>\n\n    :param items: Each positional argument will be yielded in the order\n        given for each cycle.\n\n    .. versionadded:: 2.1\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='items', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='items', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='at least one item has to be provided')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Name(id='items', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Resets the current item to the first item.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='current', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current item. Equivalent to the item that will be\n        returned next time :meth:`next` is called.\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current item, then advance :attr:`current` to the\n        next item.\n        ')), Assign(targets=[Name(id='rv', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())], keywords=[]))), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), Assign(targets=[Name(id='__next__', ctx=Store())], value=Name(id='next', ctx=Load()))], decorator_list=[]), ClassDef(name='Joiner', bases=[], keywords=[], body=[Expr(value=Constant(value='A joining helper for templates.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=', ')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Store())], value=Name(id='sep', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='used', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='used', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='used', ctx=Store())], value=Constant(value=True)), Return(value=Constant(value=''))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Namespace', bases=[], keywords=[], body=[Expr(value=Constant(value='A namespace object that can hold arbitrary attributes.  It may be\n    initialized from a dictionary or with keyword arguments.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='self', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__attrs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getattribute__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='_Namespace__attrs'), Constant(value='__class__')])]), body=[Return(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Namespace '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])