Module(body=[Expr(value=Constant(value='The runtime functions and state used by compiled templates.')), Import(names=[alias(name='functools')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='collections', names=[alias(name='abc')], level=0), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='markupsafe', names=[alias(name='escape')], level=0), ImportFrom(module='markupsafe', names=[alias(name='Markup')], level=0), ImportFrom(module='markupsafe', names=[alias(name='soft_str')], level=0), ImportFrom(module='async_utils', names=[alias(name='auto_aiter')], level=1), ImportFrom(module='async_utils', names=[alias(name='auto_await')], level=1), ImportFrom(module='exceptions', names=[alias(name='TemplateNotFound')], level=1), ImportFrom(module='exceptions', names=[alias(name='TemplateRuntimeError')], level=1), ImportFrom(module='exceptions', names=[alias(name='UndefinedError')], level=1), ImportFrom(module='nodes', names=[alias(name='EvalContext')], level=1), ImportFrom(module='utils', names=[alias(name='_PassArg')], level=1), ImportFrom(module='utils', names=[alias(name='concat')], level=1), ImportFrom(module='utils', names=[alias(name='internalcode')], level=1), ImportFrom(module='utils', names=[alias(name='missing')], level=1), ImportFrom(module='utils', names=[alias(name='Namespace')], level=1), ImportFrom(module='utils', names=[alias(name='object_type_repr')], level=1), ImportFrom(module='utils', names=[alias(name='pass_eval_context')], level=1), Assign(targets=[Name(id='V', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='V')], keywords=[])), Assign(targets=[Name(id='F', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='F')], keywords=[keyword(arg='bound', value=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))])), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='typing_extensions', asname='te')]), ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ClassDef(name='LoopRenderFunc', bases=[Attribute(value=Name(id='te', ctx=Load()), attr='Protocol', ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reciter', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load())), arg(arg='loop_render_func', annotation=Constant(value='LoopRenderFunc')), arg(arg='depth', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='exported', ctx=Store())], value=List(elts=[Constant(value='LoopContext'), Constant(value='TemplateReference'), Constant(value='Macro'), Constant(value='Markup'), Constant(value='TemplateRuntimeError'), Constant(value='missing'), Constant(value='escape'), Constant(value='markup_join'), Constant(value='str_join'), Constant(value='identity'), Constant(value='TemplateNotFound'), Constant(value='Namespace'), Constant(value='Undefined'), Constant(value='internalcode')], ctx=Load())), Assign(targets=[Name(id='async_exported', ctx=Store())], value=List(elts=[Constant(value='AsyncLoopContext'), Constant(value='auto_aiter'), Constant(value='auto_await')], ctx=Load())), FunctionDef(name='identity', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='V', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns its argument. Useful for certain things in the\n    environment.\n    ')), Return(value=Name(id='x', ctx=Load()))], decorator_list=[], returns=Name(id='V', ctx=Load())), FunctionDef(name='markup_join', args=arguments(posonlyargs=[], args=[arg(arg='seq', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Concatenation that escapes if necessary and converts to string.')), Assign(targets=[Name(id='buf', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='iterator', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='soft_str', ctx=Load()), Name(id='seq', ctx=Load())], keywords=[])), For(target=Name(id='arg', ctx=Store()), iter=Name(id='iterator', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='arg', ctx=Load()), Constant(value='__html__')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='Markup', ctx=Load()), args=[Constant(value='')], keywords=[]), attr='join', ctx=Load()), args=[Call(func=Name(id='chain', ctx=Load()), args=[Name(id='buf', ctx=Load()), Name(id='iterator', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='concat', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='str_join', args=arguments(posonlyargs=[], args=[arg(arg='seq', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Simple args to string conversion and concatenation.')), Return(value=Call(func=Name(id='concat', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='seq', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='new_context', args=arguments(posonlyargs=[], args=[arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='template_name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='blocks', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Context')], ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='vars', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='shared', annotation=Name(id='bool', ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='locals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Internal helper for context creation.')), If(test=Compare(left=Name(id='vars', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='vars', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Name(id='shared', ctx=Load()), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Name(id='vars', ctx=Load()))], orelse=[Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='globals', ctx=Load()), Tuple(elts=[], ctx=Load())])], keywords=[keyword(value=Name(id='vars', ctx=Load()))]))]), If(test=Name(id='locals', ctx=Load()), body=[If(test=Name(id='shared', ctx=Load()), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='locals', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='parent', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='context_class', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='parent', ctx=Load()), Name(id='template_name', ctx=Load()), Name(id='blocks', ctx=Load())], keywords=[keyword(arg='globals', value=Name(id='globals', ctx=Load()))]))], decorator_list=[], returns=Constant(value='Context')), ClassDef(name='TemplateReference', bases=[], keywords=[], body=[Expr(value=Constant(value='The `self` in templates.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Constant(value='Context'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__context', ctx=Store())], value=Name(id='context', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='blocks', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__context', ctx=Load()), attr='blocks', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='BlockReference', ctx=Load()), args=[Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='__context', ctx=Load()), Name(id='blocks', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__context', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='_dict_method_all', args=arguments(posonlyargs=[], args=[arg(arg='dict_method', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='f_all', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Constant(value='Context'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dict_method', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_all', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='dict_method', ctx=Load())], keywords=[])], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='F', ctx=Load()), Name(id='f_all', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='F', ctx=Load())), ClassDef(name='Context', bases=[], keywords=[], body=[Expr(value=Constant(value="The template context holds the variables of a template.  It stores the\n    values passed to the template and also the names the template exports.\n    Creating instances is neither supported nor useful as it's created\n    automatically at various stages of the template evaluation and should not\n    be created by hand.\n\n    The context is immutable.  Modifications on :attr:`parent` **must not**\n    happen and modifications on :attr:`vars` are allowed from generated\n    template code only.  Template filters and global functions marked as\n    :func:`pass_context` get the active context passed as first argument\n    and are allowed to access the context read-only.\n\n    The template context supports read only dict operations (`get`,\n    `keys`, `values`, `items`, `iterkeys`, `itervalues`, `iteritems`,\n    `__getitem__`, `__contains__`).  Additionally there is a :meth:`resolve`\n    method that doesn't fail with a `KeyError` but returns an\n    :class:`Undefined` object for missing variables.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='parent', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='blocks', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Context')], ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='globals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='parent', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Store()), annotation=Constant(value='Environment'), value=Name(id='environment', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='eval_ctx', ctx=Store())], value=Call(func=Name(id='EvalContext', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='exported_vars', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='globals_keys', ctx=Store())], value=IfExp(test=Compare(left=Name(id='globals', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='set', ctx=Load()), args=[Name(id='globals', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='blocks', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=List(elts=[Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='blocks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='super', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='current', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Context')], ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render a parent block.')), Try(body=[Assign(targets=[Name(id='blocks', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='blocks', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='blocks', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='current', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), Expr(value=Subscript(value=Name(id='blocks', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='LookupError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='undefined', ctx=Load()), args=[JoinedStr(values=[Constant(value='there is no parent block called '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value='.')])], keywords=[keyword(arg='name', value=Constant(value='super'))]))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='BlockReference', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='self', ctx=Load()), Name(id='blocks', ctx=Load()), Name(id='index', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='BlockReference'), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Look up a variable by name, or return a default if the key is\n        not found.\n\n        :param key: The variable name to look up.\n        :param default: The value to return if the key is not found.\n        ')), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Look up a variable by name, or return an :class:`Undefined`\n        object if the key is not found.\n\n        If you need to add custom behavior, override\n        :meth:`resolve_or_missing`, not this method. The various lookup\n        functions use that method, not this one.\n\n        :param key: The variable name to look up.\n        ')), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_or_missing', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='undefined', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='key', ctx=Load()))]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='resolve_or_missing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Look up a variable by name, or return a ``missing`` sentinel\n        if the key is not found.\n\n        Override this method to add custom lookup behavior.\n        :meth:`resolve`, :meth:`get`, and :meth:`__getitem__` use this\n        method. Don't call this method directly.\n\n        :param key: The variable name to look up.\n        ")), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='missing', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='get_exported', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a new dict with the exported variables.')), Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='exported_vars', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_all', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the complete context as dict including the exported\n        variables.  For optimizations reasons this might not return an\n        actual copy so be careful with using it.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load())), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='call', args=arguments(posonlyargs=[], args=[arg(arg='__self'), arg(arg='__obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Call the callable with the arguments and keyword arguments\n        provided but inject the active context or environment as first\n        argument if the callable has :func:`pass_context` or\n        :func:`pass_environment`.\n        ')), If(test=Name(id='__debug__', ctx=Load()), body=[Assign(targets=[Name(id='__traceback_hide__', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='__obj', ctx=Load()), Constant(value='__call__')], keywords=[]), Compare(left=Call(func=Attribute(value=Name(id='_PassArg', ctx=Load()), attr='from_obj', ctx=Load()), args=[Attribute(value=Name(id='__obj', ctx=Load()), attr='__call__', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='__obj', ctx=Store())], value=Attribute(value=Name(id='__obj', ctx=Load()), attr='__call__', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pass_arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='_PassArg', ctx=Load()), attr='from_obj', ctx=Load()), args=[Name(id='__obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pass_arg', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='_PassArg', ctx=Load()), attr='context', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='_loop_vars')], keywords=[]), body=[Assign(targets=[Name(id='__self', ctx=Store())], value=Call(func=Attribute(value=Name(id='__self', ctx=Load()), attr='derived', ctx=Load()), args=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='_loop_vars'), ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='_block_vars')], keywords=[]), body=[Assign(targets=[Name(id='__self', ctx=Store())], value=Call(func=Attribute(value=Name(id='__self', ctx=Load()), attr='derived', ctx=Load()), args=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='_block_vars'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=Tuple(elts=[Name(id='__self', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='args', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='pass_arg', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='_PassArg', ctx=Load()), attr='eval_context', ctx=Load())]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=Tuple(elts=[Attribute(value=Name(id='__self', ctx=Load()), attr='eval_ctx', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='args', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='pass_arg', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='_PassArg', ctx=Load()), attr='environment', ctx=Load())]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=Tuple(elts=[Attribute(value=Name(id='__self', ctx=Load()), attr='environment', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='args', ctx=Load())))], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='_block_vars'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='_loop_vars'), Constant(value=None)], keywords=[])), Try(body=[Return(value=Call(func=Name(id='__obj', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='__self', ctx=Load()), attr='environment', ctx=Load()), attr='undefined', ctx=Load()), args=[Constant(value='value was undefined because a callable raised a StopIteration exception')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='derived', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='locals', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Internal helper function to create a derived context.  This is\n        used in situations where the system needs a new context in the same\n        template that is independent.\n        ')), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Name(id='new_context', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Dict(keys=[], values=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_all', ctx=Load()), args=[], keywords=[]), Constant(value=True), Constant(value=None), Name(id='locals', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='eval_ctx', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='eval_ctx', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='context', ctx=Load()), attr='blocks', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='blocks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='context', ctx=Load()))], decorator_list=[], returns=Constant(value='Context')), Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Name(id='_dict_method_all', ctx=Load()), args=[Attribute(value=Name(id='dict', ctx=Load()), attr='keys', ctx=Load())], keywords=[])), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='_dict_method_all', ctx=Load()), args=[Attribute(value=Name(id='dict', ctx=Load()), attr='values', ctx=Load())], keywords=[])), Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Name(id='_dict_method_all', ctx=Load()), args=[Attribute(value=Name(id='dict', ctx=Load()), attr='items', ctx=Load())], keywords=[])), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='vars', ctx=Load())]), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Look up a variable by name with ``[]`` syntax, or raise a\n        ``KeyError`` if the key is not found.\n        ')), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_or_missing', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='item', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='item', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_all', ctx=Load()), args=[], keywords=[]), conversion=114), Constant(value=' of '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Attribute(value=Attribute(value=Name(id='abc', ctx=Load()), attr='Mapping', ctx=Load()), attr='register', ctx=Load())]), ClassDef(name='BlockReference', bases=[], keywords=[], body=[Expr(value=Constant(value='One block on a template reference.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='context', annotation=Constant(value='Context')), arg(arg='stack', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Context')], ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='depth', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Store())], value=Name(id='context', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Store())], value=Name(id='stack', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_depth', ctx=Store())], value=Name(id='depth', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='super', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Super the block.')), If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_depth', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load()), attr='environment', ctx=Load()), attr='undefined', ctx=Load()), args=[JoinedStr(values=[Constant(value='there is no parent block called '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value='.')])], keywords=[keyword(arg='name', value=Constant(value='super'))]))], orelse=[]), Return(value=Call(func=Name(id='BlockReference', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_depth', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='BlockReference'), Constant(value='Undefined')], ctx=Load()), ctx=Load())), AsyncFunctionDef(name='_async_call', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='concat', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_depth', ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load())], keywords=[]), ifs=[], is_async=1)])], keywords=[])), If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load()), attr='environment', ctx=Load()), attr='is_async', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_call', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='concat', ctx=Load()), args=[Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_depth', ctx=Load()), ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load())], keywords=[])], keywords=[])), If(test=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='LoopContext', bases=[], keywords=[], body=[Expr(value=Constant(value='A wrapper iterable for dynamic ``for`` loops, with information\n    about the loop and iteration.\n    ')), Assign(targets=[Name(id='index0', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), AnnAssign(target=Name(id='_length', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='_after', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Name(id='missing', ctx=Load()), simple=1), AnnAssign(target=Name(id='_current', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Name(id='missing', ctx=Load()), simple=1), AnnAssign(target=Name(id='_before', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Name(id='missing', ctx=Load()), simple=1), AnnAssign(target=Name(id='_last_changed_value', ctx=Store()), annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), value=Name(id='missing', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load())), arg(arg='undefined', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Constant(value='Undefined'), ctx=Load())), arg(arg='recurse', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Constant(value='LoopRenderFunc'), ctx=Load())), arg(arg='depth0', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='\n        :param iterable: Iterable to wrap.\n        :param undefined: :class:`Undefined` class to use for next and\n            previous items.\n        :param recurse: The function to render the loop body when the\n            loop is marked recursive.\n        :param depth0: Incremented when looping recursively.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Store())], value=Name(id='iterable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_iterator', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined', ctx=Store())], value=Name(id='undefined', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_recurse', ctx=Store())], value=Name(id='recurse', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='depth0', ctx=Store())], value=Name(id='depth0', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_to_iterator', args=arguments(posonlyargs=[], args=[arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load())), FunctionDef(name='length', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Length of the iterable.\n\n        If the iterable is a generator or otherwise does not have a\n        size, it is eagerly evaluated to get a size.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Assign(targets=[Name(id='iterable', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_iterator', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load())), op=Add(), right=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())])))])], orelse=[], finalbody=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='depth', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='How many levels deep a recursive loop currently is, starting at 1.')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='depth0', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Current iteration of the loop, starting at 1.')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='revindex0', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of iterations from the end of the loop, ending at 0.\n\n        Requires calculating :attr:`length`.\n        ')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='revindex', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Number of iterations from the end of the loop, ending at 1.\n\n        Requires calculating :attr:`length`.\n        ')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='first', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this is the first iteration of the loop.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_peek_next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the next element in the iterable, or :data:`missing`\n        if the iterable is exhausted. Only peeks one item ahead, caching\n        the result in :attr:`_last` for use in subsequent checks. The\n        cache is reset when :meth:`__next__` is called.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load()), Name(id='missing', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='last', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this is the last iteration of the loop.\n\n        Causes the iterable to advance early. See\n        :func:`itertools.groupby` for issues this can cause.\n        The :func:`groupby` filter avoids that issue.\n        ')), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_peek_next', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='previtem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The item in the previous iteration. Undefined during the\n        first iteration.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='first', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined', ctx=Load()), args=[Constant(value='there is no previous item')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_before', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='nextitem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The item in the next iteration. Undefined during the last\n        iteration.\n\n        Causes the iterable to advance early. See\n        :func:`itertools.groupby` for issues this can cause.\n        The :func:`jinja-filters.groupby` filter avoids that issue.\n        ')), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_peek_next', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined', ctx=Load()), args=[Constant(value='there is no next item')], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='cycle', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='V', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a value from the given args, cycling through based on\n        the current :attr:`index0`.\n\n        :param args: One or more values to cycle through.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='no items for cycling given')], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='args', ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), ctx=Load()))], decorator_list=[], returns=Name(id='V', ctx=Load())), FunctionDef(name='changed', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return ``True`` if previously called with a different value\n        (including when called for the first time).\n\n        :param value: One or more values to compare to the last call.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_changed_value', ctx=Load()), ops=[NotEq()], comparators=[Name(id='value', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_changed_value', ctx=Store())], value=Name(id='value', ctx=Load())), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='LoopContext')), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Store())], value=Name(id='missing', ctx=Load()))], orelse=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load())], keywords=[]))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_before', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_current', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current', ctx=Store())], value=Name(id='rv', ctx=Load())), Return(value=Tuple(elts=[Name(id='rv', ctx=Load()), Name(id='self', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='LoopContext')], ctx=Load()), ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When iterating over nested data, render the body of the loop\n        recursively with the given inner iterable data.\n\n        The loop must have the ``recursive`` marker for this to work.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_recurse', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value="The loop must have the 'recursive' marker to be called recursively.")], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_recurse', ctx=Load()), args=[Name(id='iterable', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_recurse', ctx=Load())], keywords=[keyword(arg='depth', value=Attribute(value=Name(id='self', ctx=Load()), attr='depth', ctx=Load()))]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load()), conversion=-1), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='AsyncLoopContext', bases=[Name(id='LoopContext', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='_iterator', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='AsyncIterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='_to_iterator', args=arguments(posonlyargs=[], args=[arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='AsyncIterable', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='auto_aiter', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='AsyncIterator', ctx=Load()), slice=Name(id='V', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='length', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Assign(targets=[Name(id='iterable', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load()), ifs=[], is_async=1)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_iterator', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load())), op=Add(), right=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())])))])], orelse=[], finalbody=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), AsyncFunctionDef(name='revindex0', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Await(value=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), AsyncFunctionDef(name='revindex', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Await(value=Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), AsyncFunctionDef(name='_peek_next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Store())], value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load()), attr='__anext__', ctx=Load()), args=[], keywords=[])))], handlers=[ExceptHandler(type=Name(id='StopAsyncIteration', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Store())], value=Name(id='missing', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), AsyncFunctionDef(name='last', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_peek_next', ctx=Load()), args=[], keywords=[])), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), AsyncFunctionDef(name='nextitem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_peek_next', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined', ctx=Load()), args=[Constant(value='there is no next item')], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load())), FunctionDef(name='__aiter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='AsyncLoopContext')), AsyncFunctionDef(name='__anext__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load()), ops=[IsNot()], comparators=[Name(id='missing', ctx=Load())]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_after', ctx=Store())], value=Name(id='missing', ctx=Load()))], orelse=[Assign(targets=[Name(id='rv', ctx=Store())], value=Await(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_iterator', ctx=Load()), attr='__anext__', ctx=Load()), args=[], keywords=[])))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='index0', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_before', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_current', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current', ctx=Store())], value=Name(id='rv', ctx=Load())), Return(value=Tuple(elts=[Name(id='rv', ctx=Load()), Name(id='self', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value='AsyncLoopContext')], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Macro', bases=[], keywords=[], body=[Expr(value=Constant(value='Wraps a macro function.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='arguments', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='catch_kwargs', annotation=Name(id='bool', ctx=Load())), arg(arg='catch_varargs', annotation=Name(id='bool', ctx=Load())), arg(arg='caller', annotation=Name(id='bool', ctx=Load())), arg(arg='default_autoescape', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_environment', ctx=Store())], value=Name(id='environment', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_func', ctx=Store())], value=Name(id='func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_argument_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Store())], value=Name(id='arguments', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='catch_kwargs', ctx=Store())], value=Name(id='catch_kwargs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='catch_varargs', ctx=Store())], value=Name(id='catch_varargs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='caller', ctx=Store())], value=Name(id='caller', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='explicit_caller', ctx=Store())], value=Compare(left=Constant(value='caller'), ops=[In()], comparators=[Name(id='arguments', ctx=Load())])), If(test=Compare(left=Name(id='default_autoescape', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='environment', ctx=Load()), attr='autoescape', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='default_autoescape', ctx=Store())], value=Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='autoescape', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='default_autoescape', ctx=Store())], value=Attribute(value=Name(id='environment', ctx=Load()), attr='autoescape', ctx=Load()))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_autoescape', ctx=Store())], value=Name(id='default_autoescape', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='args', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='EvalContext', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='autoescape', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='autoescape', ctx=Load())), Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='autoescape', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_default_autoescape', ctx=Load()))]), Assign(targets=[Name(id='arguments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_argument_count', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='off', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='found_caller', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='off', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_argument_count', ctx=Load())]), body=[For(target=Name(id='name', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[])), ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='missing', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='caller')]), body=[Assign(targets=[Name(id='found_caller', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='found_caller', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='explicit_caller', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='caller', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='found_caller', ctx=Load()))]), body=[Assign(targets=[Name(id='caller', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='caller'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='caller', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='caller', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environment', ctx=Load()), attr='undefined', ctx=Load()), args=[Constant(value='No caller defined')], keywords=[keyword(arg='name', value=Constant(value='caller'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='caller', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='catch_kwargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='kwargs', ctx=Load()), body=[If(test=Compare(left=Constant(value='caller'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='macro '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' was invoked with two values for the special caller argument. This is most likely a bug.')])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='macro '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' takes no keyword argument '), FormattedValue(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])], keywords=[]), conversion=114)])], keywords=[]))], orelse=[])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='catch_varargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='_argument_count', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_argument_count', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='macro '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' takes not more than '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' argument(s)')])], keywords=[]))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invoke', ctx=Load()), args=[Name(id='arguments', ctx=Load()), Name(id='autoescape', ctx=Load())], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load()), Name(id='pass_eval_context', ctx=Load())], returns=Name(id='str', ctx=Load())), AsyncFunctionDef(name='_async_invoke', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arguments', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), arg(arg='autoescape', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_func', ctx=Load()), args=[Starred(value=Name(id='arguments', ctx=Load()), ctx=Load())], keywords=[]))), If(test=Name(id='autoescape', ctx=Load()), body=[Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_invoke', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arguments', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), arg(arg='autoescape', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environment', ctx=Load()), attr='is_async', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_async_invoke', ctx=Load()), args=[Name(id='arguments', ctx=Load()), Name(id='autoescape', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_func', ctx=Load()), args=[Starred(value=Name(id='arguments', ctx=Load()), ctx=Load())], keywords=[])), If(test=Name(id='autoescape', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value='anonymous'), orelse=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]))), Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Undefined', bases=[], keywords=[], body=[Expr(value=Constant(value="The default undefined type.  This undefined type can be printed and\n    iterated over, but every other access will raise an :exc:`UndefinedError`:\n\n    >>> foo = Undefined(name='foo')\n    >>> str(foo)\n    ''\n    >>> not foo\n    True\n    >>> foo + 42\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n    ")), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_undefined_hint'), Constant(value='_undefined_obj'), Constant(value='_undefined_name'), Constant(value='_undefined_exception')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hint', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='exc', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='TemplateRuntimeError', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='missing', ctx=Load()), Constant(value=None), Name(id='UndefinedError', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_hint', ctx=Store())], value=Name(id='hint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Store())], value=Name(id='obj', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_exception', ctx=Store())], value=Name(id='exc', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_undefined_message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build a message about the undefined value based on how it was\n        accessed.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_hint', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_hint', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()), conversion=114), Constant(value=' is undefined')]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Return(value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='object_type_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' has no element '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()), conversion=114)]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='object_type_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Load())], keywords=[]), conversion=114), Constant(value=' has no attribute '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()), conversion=114)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_fail_with_undefined_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Raise an :exc:`UndefinedError` when operations are performed\n        on the undefined value.\n        ')), Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_exception', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_message', ctx=Load())], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Constant(value='te.NoReturn')), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='__')]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fail_with_undefined_error', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='internalcode', ctx=Load())], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), Assign(targets=[Name(id='__add__', ctx=Store()), Name(id='__radd__', ctx=Store()), Name(id='__sub__', ctx=Store()), Name(id='__rsub__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__mul__', ctx=Store()), Name(id='__rmul__', ctx=Store()), Name(id='__div__', ctx=Store()), Name(id='__rdiv__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__truediv__', ctx=Store()), Name(id='__rtruediv__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__floordiv__', ctx=Store()), Name(id='__rfloordiv__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__mod__', ctx=Store()), Name(id='__rmod__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__pos__', ctx=Store()), Name(id='__neg__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__call__', ctx=Store()), Name(id='__getitem__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__lt__', ctx=Store()), Name(id='__le__', ctx=Store()), Name(id='__gt__', ctx=Store()), Name(id='__ge__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__int__', ctx=Store()), Name(id='__float__', ctx=Store()), Name(id='__complex__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__pow__', ctx=Store()), Name(id='__rpow__', ctx=Store())], value=Name(id='_fail_with_undefined_error', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='id', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Tuple(elts=[], ctx=Load())))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='__aiter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='_', ctx=Store()), iter=Tuple(elts=[], ctx=Load()), body=[Expr(value=Yield())], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='AsyncIterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='Undefined'))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_logging_undefined', args=arguments(posonlyargs=[], args=[arg(arg='logger', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Constant(value='logging.Logger'), ctx=Load())), arg(arg='base', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='Undefined', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='Undefined', ctx=Load())]), body=[Expr(value=Constant(value='Given a logger object this returns a new undefined class that will\n    log certain failures.  It will log iterations and printing.  If no\n    logger is given a default logger is created.\n\n    Example::\n\n        logger = logging.getLogger(__name__)\n        LoggingUndefined = make_logging_undefined(\n            logger=logger,\n            base=Undefined\n        )\n\n    .. versionadded:: 2.8\n\n    :param logger: the logger to use.  If not provided, a default logger\n                   is created.\n    :param base: the base class to add logging functionality to.  This\n                 defaults to :class:`Undefined`.\n    ')), If(test=Compare(left=Name(id='logger', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Import(names=[alias(name='logging')]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='addHandler', ctx=Load()), args=[Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='_log_message', args=arguments(posonlyargs=[], args=[arg(arg='undef', annotation=Name(id='Undefined', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Template variable warning: %s'), Attribute(value=Name(id='undef', ctx=Load()), attr='_undefined_message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='LoggingUndefined', bases=[Name(id='base', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='_fail_with_undefined_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_fail_with_undefined_error', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Template variable error: %s'), Name(id='e', ctx=Load())], keywords=[])), Raise(exc=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value='te.NoReturn')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_log_message', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__str__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_log_message', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__iter__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_log_message', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__bool__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Return(value=Name(id='LoggingUndefined', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='Undefined', ctx=Load()), ctx=Load())), ClassDef(name='ChainableUndefined', bases=[Name(id='Undefined', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An undefined that is chainable, where both ``__getattr__`` and\n    ``__getitem__`` return itself rather than raising an\n    :exc:`UndefinedError`.\n\n    >>> foo = ChainableUndefined(name='foo')\n    >>> str(foo.bar['baz'])\n    ''\n    >>> foo.bar['baz'] + 42\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n\n    .. versionadded:: 2.11.0\n    ")), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='__html__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='ChainableUndefined')), Assign(targets=[Name(id='__getitem__', ctx=Store())], value=Name(id='__getattr__', ctx=Load()))], decorator_list=[]), ClassDef(name='DebugUndefined', bases=[Name(id='Undefined', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An undefined that returns the debug info when printed.\n\n    >>> foo = DebugUndefined(name='foo')\n    >>> str(foo)\n    '{{ foo }}'\n    >>> not foo\n    True\n    >>> foo + 42\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n    ")), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_hint', ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='undefined value printed: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_hint', ctx=Load()), conversion=-1)]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Load()), ops=[Is()], comparators=[Name(id='missing', ctx=Load())]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='no such element: '), FormattedValue(value=Call(func=Name(id='object_type_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_obj', ctx=Load())], keywords=[]), conversion=-1), Constant(value='['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_undefined_name', ctx=Load()), conversion=114), Constant(value=']')]))])]), Return(value=JoinedStr(values=[Constant(value='{{ '), FormattedValue(value=Name(id='message', ctx=Load()), conversion=-1), Constant(value=' }}')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='StrictUndefined', bases=[Name(id='Undefined', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An undefined that barks on print and iteration as well as boolean\n    tests and all kinds of comparisons.  In other words: you can do nothing\n    with it except checking if it's defined using the `defined` test.\n\n    >>> foo = StrictUndefined(name='foo')\n    >>> str(foo)\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n    >>> not foo\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n    >>> foo + 42\n    Traceback (most recent call last):\n      ...\n    jinja2.exceptions.UndefinedError: 'foo' is undefined\n    ")), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), Assign(targets=[Name(id='__iter__', ctx=Store()), Name(id='__str__', ctx=Store()), Name(id='__len__', ctx=Store())], value=Attribute(value=Name(id='Undefined', ctx=Load()), attr='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__eq__', ctx=Store()), Name(id='__ne__', ctx=Store()), Name(id='__bool__', ctx=Store()), Name(id='__hash__', ctx=Store())], value=Attribute(value=Name(id='Undefined', ctx=Load()), attr='_fail_with_undefined_error', ctx=Load())), Assign(targets=[Name(id='__contains__', ctx=Store())], value=Attribute(value=Name(id='Undefined', ctx=Load()), attr='_fail_with_undefined_error', ctx=Load()))], decorator_list=[]), Delete(targets=[Tuple(elts=[Attribute(value=Name(id='Undefined', ctx=Load()), attr='__slots__', ctx=Del()), Attribute(value=Name(id='ChainableUndefined', ctx=Load()), attr='__slots__', ctx=Del()), Attribute(value=Name(id='DebugUndefined', ctx=Load()), attr='__slots__', ctx=Del()), Attribute(value=Name(id='StrictUndefined', ctx=Load()), attr='__slots__', ctx=Del())], ctx=Del())])], type_ignores=[])