Module(body=[Import(names=[alias(name='typing', asname='t')]), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1)], orelse=[]), ClassDef(name='TemplateError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Baseclass for all template errors.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Constant(value=None)))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='TemplateNotFound', bases=[Name(id='IOError', ctx=Load()), Name(id='LookupError', ctx=Load()), Name(id='TemplateError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if a template does not exist.\n\n    .. versionchanged:: 2.11\n        If the given name is :class:`Undefined` and no message was\n        provided, an :exc:`UndefinedError` is raised.\n    ')), AnnAssign(target=Name(id='message', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='message', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='IOError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='message', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='Undefined', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='_fail_with_undefined_error', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='templates', ctx=Store())], value=List(elts=[Name(id='name', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='TemplatesNotFound', bases=[Name(id='TemplateNotFound', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Like :class:`TemplateNotFound` but raised if multiple templates\n    are selected.  This is a subclass of :class:`TemplateNotFound`\n    exception, so just catching the base exception will catch both.\n\n    .. versionchanged:: 2.11\n        If a name in the list of names is :class:`Undefined`, a message\n        about it being undefined is shown rather than the empty string.\n\n    .. versionadded:: 2.2\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='names', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Undefined')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='message', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=None)]), body=[If(test=Compare(left=Name(id='message', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='Undefined', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='_undefined_message', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='parts_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='parts', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='none of the templates given were found: '), FormattedValue(value=Name(id='parts_str', ctx=Load()), conversion=-1)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[IfExp(test=Name(id='names', ctx=Load()), body=Subscript(value=Name(id='names', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), orelse=Constant(value=None)), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='templates', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='TemplateSyntaxError', bases=[Name(id='TemplateError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised to tell the user that there is a problem with the template.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Store())], value=Name(id='lineno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='translated', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='translated', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='location', ctx=Store())], value=JoinedStr(values=[Constant(value='line '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())])), If(test=Name(id='name', ctx=Load()), body=[Assign(targets=[Name(id='location', ctx=Store())], value=JoinedStr(values=[Constant(value='File "'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='", '), FormattedValue(value=Name(id='location', ctx=Load()), conversion=-1)]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load())], keywords=[]), BinOp(left=Constant(value='  '), op=Add(), right=Name(id='location', ctx=Load()))], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='    '), op=Add(), right=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], keywords=[]))], finalbody=[])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='TemplateAssertionError', bases=[Name(id='TemplateSyntaxError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Like a template syntax error, but covers cases where something in the\n    template caused an error at compile time that wasn't necessarily caused\n    by a syntax error.  However it's a direct subclass of\n    :exc:`TemplateSyntaxError` and has the same attributes.\n    "))], decorator_list=[]), ClassDef(name='TemplateRuntimeError', bases=[Name(id='TemplateError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A generic runtime error in the template engine.  Under some situations\n    Jinja may raise this exception.\n    '))], decorator_list=[]), ClassDef(name='UndefinedError', bases=[Name(id='TemplateRuntimeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if a template tries to operate on :class:`Undefined`.'))], decorator_list=[]), ClassDef(name='SecurityError', bases=[Name(id='TemplateRuntimeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if a template tries to do something insecure if the\n    sandbox is enabled.\n    '))], decorator_list=[]), ClassDef(name='FilterArgumentError', bases=[Name(id='TemplateRuntimeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='This error is raised if a filter was called with inappropriate\n    arguments\n    '))], decorator_list=[])], type_ignores=[])