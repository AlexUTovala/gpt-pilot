Module(body=[Expr(value=Constant(value='The optional bytecode cache system. This is useful if you have very\ncomplex template situations and the compilation of all those templates\nslows down your application too much.\n\nSituations where this is useful are often forking web applications that\nare initialized on the first request.\n')), Import(names=[alias(name='errno')]), Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='marshal')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pickle')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='hashlib', names=[alias(name='sha1')], level=0), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), ImportFrom(module='types', names=[alias(name='CodeType')], level=0), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='typing_extensions', asname='te')]), ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ClassDef(name='_MemcachedClient', bases=[Attribute(value=Name(id='te', ctx=Load()), attr='Protocol', ctx=Load())], keywords=[], body=[FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='bc_version', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='bc_magic', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=b'j2'), op=Add(), right=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='bc_version', ctx=Load()), Constant(value=2)], keywords=[])), op=Add(), right=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dumps', ctx=Load()), args=[BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=LShift(), right=Constant(value=24)), op=BitOr(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=1), ctx=Load())), Constant(value=2)], keywords=[]))), ClassDef(name='Bucket', bases=[], keywords=[], body=[Expr(value=Constant(value="Buckets are used to store the bytecode for one template.  It's created\n    and initialized by the bytecode cache and passed to the loading functions.\n\n    The buckets get an internal checksum from the cache assigned and use this\n    to automatically reject outdated cache material.  Individual bytecode\n    cache subclasses don't have to care about cache invalidation.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='checksum', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Store())], value=Name(id='environment', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='checksum', ctx=Store())], value=Name(id='checksum', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Resets the bucket (unloads the bytecode).')), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='CodeType', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='BinaryIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Loads bytecode from a file or file like object.')), Assign(targets=[Name(id='magic', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='bc_magic', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='magic', ctx=Load()), ops=[NotEq()], comparators=[Name(id='bc_magic', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='checksum', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='checksum', ctx=Load()), ops=[NotEq()], comparators=[Name(id='checksum', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='marshal', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='EOFError', ctx=Load()), Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Return()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dump the bytecode into the file or file like object passed.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value="can't write empty bucket")], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='bc_magic', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='checksum', ctx=Load()), Name(id='f', ctx=Load()), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='marshal', ctx=Load()), attr='dump', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='bytecode_from_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load bytecode from bytes.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_bytecode', ctx=Load()), args=[Call(func=Name(id='BytesIO', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='bytecode_to_string', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the bytecode as bytes.')), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='BytesIO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_bytecode', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bytes', ctx=Load()))], decorator_list=[]), ClassDef(name='BytecodeCache', bases=[], keywords=[], body=[Expr(value=Constant(value="To implement your own bytecode cache you have to subclass this class\n    and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of\n    these methods are passed a :class:`~jinja2.bccache.Bucket`.\n\n    A very basic bytecode cache that saves the bytecode on the file system::\n\n        from os import path\n\n        class MyCache(BytecodeCache):\n\n            def __init__(self, directory):\n                self.directory = directory\n\n            def load_bytecode(self, bucket):\n                filename = path.join(self.directory, bucket.key)\n                if path.exists(filename):\n                    with open(filename, 'rb') as f:\n                        bucket.load_bytecode(f)\n\n            def dump_bytecode(self, bucket):\n                filename = path.join(self.directory, bucket.key)\n                with open(filename, 'wb') as f:\n                    bucket.write_bytecode(f)\n\n    A more advanced version of a filesystem based bytecode cache is part of\n    Jinja.\n    ")), FunctionDef(name='load_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Subclasses have to override this method to load bytecode into a\n        bucket.  If they are not able to find code in the cache for the\n        bucket, it must not do anything.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='dump_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Subclasses have to override this method to write the bytecode\n        from a bucket back to the cache.  If it unable to do so it must not\n        fail silently but raise an exception.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clears the cache.  This method is not used by Jinja but should be\n        implemented to allow applications to clear the bytecode cache used\n        by a particular environment.\n        '))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_cache_key', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Returns the unique hash key for this template name.')), Assign(targets=[Name(id='hash', ctx=Store())], value=Call(func=Name(id='sha1', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=JoinedStr(values=[Constant(value='|'), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_source_checksum', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a checksum for the source.')), Return(value=Call(func=Attribute(value=Call(func=Name(id='sha1', ctx=Load()), args=[Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_bucket', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='Environment')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a cache bucket for the given template.  All arguments are\n        mandatory but filename may be `None`.\n        ')), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cache_key', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='checksum', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_source_checksum', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bucket', ctx=Store())], value=Call(func=Name(id='Bucket', ctx=Load()), args=[Name(id='environment', ctx=Load()), Name(id='key', ctx=Load()), Name(id='checksum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_bytecode', ctx=Load()), args=[Name(id='bucket', ctx=Load())], keywords=[])), Return(value=Name(id='bucket', ctx=Load()))], decorator_list=[], returns=Name(id='Bucket', ctx=Load())), FunctionDef(name='set_bucket', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Put the bucket into the cache.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_bytecode', ctx=Load()), args=[Name(id='bucket', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FileSystemBytecodeCache', bases=[Name(id='BytecodeCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A bytecode cache that stores bytecode on the filesystem.  It accepts\n    two arguments: The directory where the cache items are stored and a\n    pattern string that is used to build the filename.\n\n    If no directory is specified a default cache directory is selected.  On\n    Windows the user's temp directory is used, on UNIX systems a directory\n    is created for the user in the system temp directory.\n\n    The pattern can be used to have multiple separate caches operate on the\n    same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``\n    is replaced with the cache key.\n\n    >>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')\n\n    This bytecode cache supports clearing of the cache using the clear method.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='directory', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='pattern', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='__jinja2_%s.cache')]), body=[If(test=Compare(left=Name(id='directory', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_default_cache_dir', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Store())], value=Name(id='directory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_default_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_unsafe_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Cannot determine safe temp directory.  You need to explicitly provide one.')], keywords=[]))], decorator_list=[], returns=Constant(value='te.NoReturn')), Assign(targets=[Name(id='tmpdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='gettempdir', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Return(value=Name(id='tmpdir', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='getuid')], keywords=[])), body=[Expr(value=Call(func=Name(id='_unsafe_dir', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dirname', ctx=Store())], value=JoinedStr(values=[Constant(value='_jinja2-cache-'), FormattedValue(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[]), conversion=-1)])), Assign(targets=[Name(id='actual_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='tmpdir', ctx=Load()), Name(id='dirname', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='actual_dir', ctx=Load()), Attribute(value=Name(id='stat', ctx=Load()), attr='S_IRWXU', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='actual_dir', ctx=Load()), Attribute(value=Name(id='stat', ctx=Load()), attr='S_IRWXU', ctx=Load())], keywords=[])), Assign(targets=[Name(id='actual_dir_stat', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='lstat', ctx=Load()), args=[Name(id='actual_dir', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_uid', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[])]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISDIR', ctx=Load()), args=[Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[])), Compare(left=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IMODE', ctx=Load()), args=[Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='stat', ctx=Load()), attr='S_IRWXU', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='_unsafe_dir', ctx=Load()), args=[], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='actual_dir_stat', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='lstat', ctx=Load()), args=[Name(id='actual_dir', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_uid', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[])]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISDIR', ctx=Load()), args=[Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[])), Compare(left=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IMODE', ctx=Load()), args=[Attribute(value=Name(id='actual_dir_stat', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='stat', ctx=Load()), attr='S_IRWXU', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='_unsafe_dir', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='actual_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_cache_filename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='bucket', ctx=Load()), attr='key', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='load_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_filename', ctx=Load()), args=[Name(id='bucket', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='IsADirectoryError', ctx=Load()), Name(id='PermissionError', ctx=Load())], ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='bucket', ctx=Load()), attr='load_bytecode', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='dump_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_filename', ctx=Load()), args=[Name(id='bucket', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='wb')), keyword(arg='dir', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), keyword(arg='prefix', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), keyword(arg='suffix', value=Constant(value='.tmp')), keyword(arg='delete', value=Constant(value=False))])), FunctionDef(name='remove_silent', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), Try(body=[With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='bucket', ctx=Load()), attr='write_bytecode', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Name(id='remove_silent', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Name(id='remove_silent', ctx=Load()), args=[], keywords=[]))]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Name(id='remove_silent', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='os', names=[alias(name='remove')], level=0), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='filter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Load())], keywords=[]), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Load()), op=Mod(), right=Tuple(elts=[Constant(value='*')], ctx=Load()))], keywords=[])), For(target=Name(id='filename', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id='remove', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='MemcachedBytecodeCache', bases=[Name(id='BytecodeCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="This class implements a bytecode cache that uses a memcache cache for\n    storing the information.  It does not enforce a specific memcache library\n    (tummy's memcache or cmemcache) but will accept any class that provides\n    the minimal interface required.\n\n    Libraries compatible with this class:\n\n    -   `cachelib <https://github.com/pallets/cachelib>`_\n    -   `python-memcached <https://pypi.org/project/python-memcached/>`_\n\n    (Unfortunately the django cache interface is not compatible because it\n    does not support storing binary data, only text. You can however pass\n    the underlying cache client to the bytecode cache which is available\n    as `django.core.cache.cache._client`.)\n\n    The minimal interface for the client passed to the constructor is this:\n\n    .. class:: MinimalClientInterface\n\n        .. method:: set(key, value[, timeout])\n\n            Stores the bytecode in the cache.  `value` is a string and\n            `timeout` the timeout of the key.  If timeout is not provided\n            a default timeout or no timeout should be assumed, if it's\n            provided it's an integer with the number of seconds the cache\n            item should exist.\n\n        .. method:: get(key)\n\n            Returns the value for the cache key.  If the item does not\n            exist in the cache the return value must be `None`.\n\n    The other arguments to the constructor are the prefix for all keys that\n    is added before the actual cache key and the timeout for the bytecode in\n    the cache system.  We recommend a high (or no) timeout.\n\n    This bytecode cache does not support clearing of used items in the cache.\n    The clear method is a no-operation function.\n\n    .. versionadded:: 2.7\n       Added support for ignoring memcache errors through the\n       `ignore_memcache_errors` parameter.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='client', annotation=Constant(value='_MemcachedClient')), arg(arg='prefix', annotation=Name(id='str', ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='ignore_memcache_errors', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='jinja2/bytecode/'), Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Store())], value=Name(id='client', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Name(id='prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store())], value=Name(id='timeout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_memcache_errors', ctx=Store())], value=Name(id='ignore_memcache_errors', ctx=Load()))], decorator_list=[]), FunctionDef(name='load_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), op=Add(), right=Attribute(value=Name(id='bucket', ctx=Load()), attr='key', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_memcache_errors', ctx=Load())), body=[Raise()], orelse=[])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='bucket', ctx=Load()), attr='bytecode_from_string', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='dump_bytecode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bucket', annotation=Name(id='Bucket', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), op=Add(), right=Attribute(value=Name(id='bucket', ctx=Load()), attr='key', ctx=Load()))), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='bucket', ctx=Load()), attr='bytecode_to_string', ctx=Load()), args=[], keywords=[])), Try(body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_memcache_errors', ctx=Load())), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])