Module(body=[Expr(value=Constant(value='Built-in template tests used with the ``is`` operator.')), Import(names=[alias(name='operator')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='collections', names=[alias(name='abc')], level=0), ImportFrom(module='numbers', names=[alias(name='Number')], level=0), ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), ImportFrom(module='utils', names=[alias(name='pass_environment')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='environment', names=[alias(name='Environment')], level=1)], orelse=[]), FunctionDef(name='test_odd', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is odd.')), Return(value=Compare(left=BinOp(left=Name(id='value', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_even', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is even.')), Return(value=Compare(left=BinOp(left=Name(id='value', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_divisibleby', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='int', ctx=Load())), arg(arg='num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if a variable is divisible by a number.')), Return(value=Compare(left=BinOp(left=Name(id='value', ctx=Load()), op=Mod(), right=Name(id='num', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_defined', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is defined:\n\n    .. sourcecode:: jinja\n\n        {% if variable is defined %}\n            value of variable: {{ variable }}\n        {% else %}\n            variable is not defined\n        {% endif %}\n\n    See the :func:`default` filter for a simple way to set undefined\n    variables.\n    ')), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Undefined', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_undefined', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like :func:`defined` but the other way round.')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Undefined', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_filter', args=arguments(posonlyargs=[], args=[arg(arg='env', annotation=Constant(value='Environment')), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if a filter exists by name. Useful if a filter may be\n    optionally available.\n\n    .. code-block:: jinja\n\n        {% if 'markdown' is filter %}\n            {{ value | markdown }}\n        {% else %}\n            {{ value }}\n        {% endif %}\n\n    .. versionadded:: 3.0\n    ")), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='env', ctx=Load()), attr='filters', ctx=Load())]))], decorator_list=[Name(id='pass_environment', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_test', args=arguments(posonlyargs=[], args=[arg(arg='env', annotation=Constant(value='Environment')), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if a test exists by name. Useful if a test may be\n    optionally available.\n\n    .. code-block:: jinja\n\n        {% if 'loud' is test %}\n            {% if value is loud %}\n                {{ value|upper }}\n            {% else %}\n                {{ value|lower }}\n            {% endif %}\n        {% else %}\n            {{ value }}\n        {% endif %}\n\n    .. versionadded:: 3.0\n    ")), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='env', ctx=Load()), attr='tests', ctx=Load())]))], decorator_list=[Name(id='pass_environment', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_none', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is none.')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_boolean', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is a boolean value.\n\n    .. versionadded:: 2.11\n    ')), Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_false', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is False.\n\n    .. versionadded:: 2.11\n    ')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_true', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is True.\n\n    .. versionadded:: 2.11\n    ')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_integer', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is an integer.\n\n    .. versionadded:: 2.11\n    ')), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=True)]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_float', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is a float.\n\n    .. versionadded:: 2.11\n    ')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_lower', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is lowercased.')), Return(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='islower', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_upper', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is uppercased.')), Return(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='isupper', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_string', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is a string.')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_mapping', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the object is a mapping (dict etc.).\n\n    .. versionadded:: 2.6\n    ')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='abc', ctx=Load()), attr='Mapping', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_number', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is a number.')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Number', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_sequence', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return true if the variable is a sequence. Sequences are variables\n    that are iterable.\n    ')), Try(body=[Expr(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Expr(value=Attribute(value=Name(id='value', ctx=Load()), attr='__getitem__', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_sameas', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='other', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an object points to the same memory address than another\n    object:\n\n    .. sourcecode:: jinja\n\n        {% if foo.attribute is sameas false %}\n            the foo attribute really is the `False` singleton\n        {% endif %}\n    ')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Name(id='other', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_iterable', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if it's possible to iterate over an object.")), Try(body=[Expr(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_escaped', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the value is escaped.')), Return(value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__html__')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='test_in', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='seq', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Container', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if value is in seq.\n\n    .. versionadded:: 2.10\n    ')), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Name(id='seq', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='TESTS', ctx=Store())], value=Dict(keys=[Constant(value='odd'), Constant(value='even'), Constant(value='divisibleby'), Constant(value='defined'), Constant(value='undefined'), Constant(value='filter'), Constant(value='test'), Constant(value='none'), Constant(value='boolean'), Constant(value='false'), Constant(value='true'), Constant(value='integer'), Constant(value='float'), Constant(value='lower'), Constant(value='upper'), Constant(value='string'), Constant(value='mapping'), Constant(value='number'), Constant(value='sequence'), Constant(value='iterable'), Constant(value='callable'), Constant(value='sameas'), Constant(value='escaped'), Constant(value='in'), Constant(value='=='), Constant(value='eq'), Constant(value='equalto'), Constant(value='!='), Constant(value='ne'), Constant(value='>'), Constant(value='gt'), Constant(value='greaterthan'), Constant(value='ge'), Constant(value='>='), Constant(value='<'), Constant(value='lt'), Constant(value='lessthan'), Constant(value='<='), Constant(value='le')], values=[Name(id='test_odd', ctx=Load()), Name(id='test_even', ctx=Load()), Name(id='test_divisibleby', ctx=Load()), Name(id='test_defined', ctx=Load()), Name(id='test_undefined', ctx=Load()), Name(id='test_filter', ctx=Load()), Name(id='test_test', ctx=Load()), Name(id='test_none', ctx=Load()), Name(id='test_boolean', ctx=Load()), Name(id='test_false', ctx=Load()), Name(id='test_true', ctx=Load()), Name(id='test_integer', ctx=Load()), Name(id='test_float', ctx=Load()), Name(id='test_lower', ctx=Load()), Name(id='test_upper', ctx=Load()), Name(id='test_string', ctx=Load()), Name(id='test_mapping', ctx=Load()), Name(id='test_number', ctx=Load()), Name(id='test_sequence', ctx=Load()), Name(id='test_iterable', ctx=Load()), Name(id='callable', ctx=Load()), Name(id='test_sameas', ctx=Load()), Name(id='test_escaped', ctx=Load()), Name(id='test_in', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='eq', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='eq', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='eq', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='ne', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='ne', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='gt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='gt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='gt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='ge', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='ge', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='lt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='lt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='lt', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='le', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='le', ctx=Load())]))], type_ignores=[])