Module(body=[Expr(value=Constant(value="The optimizer tries to constant fold expressions and modify the AST\nin place so that it should be faster to evaluate.\n\nBecause the AST does not contain all the scoping information and the\ncompiler has to find that out, we cannot do all the optimizations we\nwant. For example, loop unrolling doesn't work because unrolled loops\nwould have a different scope. The solution would be a second syntax tree\nthat stored the scoping rules.\n")), Import(names=[alias(name='typing', asname='t')]), ImportFrom(names=[alias(name='nodes')], level=1), ImportFrom(module='visitor', names=[alias(name='NodeTransformer')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='environment', names=[alias(name='Environment')], level=1)], orelse=[]), FunctionDef(name='optimize', args=arguments(posonlyargs=[], args=[arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())), arg(arg='environment', annotation=Constant(value='Environment'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The context hint can be used to perform an static optimization\n    based on the context given.')), Assign(targets=[Name(id='optimizer', ctx=Store())], value=Call(func=Name(id='Optimizer', ctx=Load()), args=[Name(id='environment', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), Call(func=Attribute(value=Name(id='optimizer', ctx=Load()), attr='visit', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load())), ClassDef(name='Optimizer', bases=[Name(id='NodeTransformer', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Constant(value='t.Optional[Environment]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Store())], value=Name(id='environment', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='generic_visit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='generic_visit', ctx=Load()), args=[Name(id='node', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())], keywords=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load()), attr='from_untrusted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='as_const', ctx=Load()), args=[IfExp(test=Name(id='args', ctx=Load()), body=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Constant(value=None))], keywords=[])], keywords=[keyword(arg='lineno', value=Attribute(value=Name(id='node', ctx=Load()), attr='lineno', ctx=Load())), keyword(arg='environment', value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='nodes', ctx=Load()), attr='Impossible', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='node', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()))], decorator_list=[])], type_ignores=[])