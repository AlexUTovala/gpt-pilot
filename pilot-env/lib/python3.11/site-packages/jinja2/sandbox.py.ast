Module(body=[Expr(value=Constant(value='A sandbox layer that ensures unsafe operations cannot be performed.\nUseful when the template itself comes from an untrusted source.\n')), Import(names=[alias(name='operator')]), Import(names=[alias(name='types')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='_string', names=[alias(name='formatter_field_name_split')], level=0), ImportFrom(module='collections', names=[alias(name='abc')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='string', names=[alias(name='Formatter')], level=0), ImportFrom(module='markupsafe', names=[alias(name='EscapeFormatter')], level=0), ImportFrom(module='markupsafe', names=[alias(name='Markup')], level=0), ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ImportFrom(module='exceptions', names=[alias(name='SecurityError')], level=1), ImportFrom(module='runtime', names=[alias(name='Context')], level=1), ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), Assign(targets=[Name(id='F', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='F')], keywords=[keyword(arg='bound', value=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))])), Assign(targets=[Name(id='MAX_RANGE', ctx=Store())], value=Constant(value=100000)), AnnAssign(target=Name(id='UNSAFE_FUNCTION_ATTRIBUTES', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='UNSAFE_METHOD_ATTRIBUTES', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='UNSAFE_GENERATOR_ATTRIBUTES', ctx=Store())], value=Set(elts=[Constant(value='gi_frame'), Constant(value='gi_code')])), Assign(targets=[Name(id='UNSAFE_COROUTINE_ATTRIBUTES', ctx=Store())], value=Set(elts=[Constant(value='cr_frame'), Constant(value='cr_code')])), Assign(targets=[Name(id='UNSAFE_ASYNC_GENERATOR_ATTRIBUTES', ctx=Store())], value=Set(elts=[Constant(value='ag_code'), Constant(value='ag_frame')])), AnnAssign(target=Name(id='_mutable_spec', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Tuple(elts=[Attribute(value=Name(id='abc', ctx=Load()), attr='MutableSet', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='add'), Constant(value='clear'), Constant(value='difference_update'), Constant(value='discard'), Constant(value='pop'), Constant(value='remove'), Constant(value='symmetric_difference_update'), Constant(value='update')], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='abc', ctx=Load()), attr='MutableMapping', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='clear'), Constant(value='pop'), Constant(value='popitem'), Constant(value='setdefault'), Constant(value='update')], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='abc', ctx=Load()), attr='MutableSequence', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='append'), Constant(value='reverse'), Constant(value='insert'), Constant(value='sort'), Constant(value='extend'), Constant(value='remove')], ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Name(id='deque', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='append'), Constant(value='appendleft'), Constant(value='clear'), Constant(value='extend'), Constant(value='extendleft'), Constant(value='pop'), Constant(value='popleft'), Constant(value='remove'), Constant(value='rotate')], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()), simple=1), FunctionDef(name='inspect_format_method', args=arguments(posonlyargs=[], args=[arg(arg='callable', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='callable', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='BuiltinMethodType', ctx=Load())], ctx=Load())], keywords=[])), Compare(left=Attribute(value=Name(id='callable', ctx=Load()), attr='__name__', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='format'), Constant(value='format_map')], ctx=Load())])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Attribute(value=Name(id='callable', ctx=Load()), attr='__self__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Name(id='obj', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='safe_range', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='int', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A range that can't generate ranges with a length of more than\n    MAX_RANGE items.\n    ")), Assign(targets=[Name(id='rng', ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rng', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='MAX_RANGE', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='OverflowError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Range too big. The sandbox blocks ranges larger than MAX_RANGE ('), FormattedValue(value=Name(id='MAX_RANGE', ctx=Load()), conversion=-1), Constant(value=').')])], keywords=[]))], orelse=[]), Return(value=Name(id='rng', ctx=Load()))], decorator_list=[], returns=Name(id='range', ctx=Load())), FunctionDef(name='unsafe', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='F', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Marks a function or method as unsafe.\n\n    .. code-block: python\n\n        @unsafe\n        def delete(self):\n            pass\n    ')), Assign(targets=[Attribute(value=Name(id='f', ctx=Load()), attr='unsafe_callable', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Name(id='F', ctx=Load())), FunctionDef(name='is_internal_attribute', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test if the attribute given is an internal python attribute.  For\n    example this function returns `True` for the `func_code` attribute of\n    python objects.  This is useful if the environment method\n    :meth:`~SandboxedEnvironment.is_safe_attribute` is overridden.\n\n    >>> from jinja2.sandbox import is_internal_attribute\n    >>> is_internal_attribute(str, "mro")\n    True\n    >>> is_internal_attribute(str, "upper")\n    False\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='FunctionType', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_FUNCTION_ATTRIBUTES', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_FUNCTION_ATTRIBUTES', ctx=Load())]), Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_METHOD_ATTRIBUTES', ctx=Load())])]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mro')]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='TracebackType', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='FrameType', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='GeneratorType', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_GENERATOR_ATTRIBUTES', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='types', ctx=Load()), Constant(value='CoroutineType')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='CoroutineType', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_COROUTINE_ATTRIBUTES', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='types', ctx=Load()), Constant(value='AsyncGeneratorType')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='AsyncGeneratorType', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='UNSAFE_ASYNC_GENERATOR_ATTRIBUTES', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[])])])])])])]), Return(value=Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='modifies_known_mutable', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attr', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This function checks if an attribute on a builtin mutable object\n    (list, dict, set or deque) or the corresponding ABCs would modify it\n    if called.\n\n    >>> modifies_known_mutable({}, "clear")\n    True\n    >>> modifies_known_mutable({}, "keys")\n    False\n    >>> modifies_known_mutable([], "append")\n    True\n    >>> modifies_known_mutable([], "index")\n    False\n\n    If called with an unsupported object, ``False`` is returned.\n\n    >>> modifies_known_mutable("foo", "upper")\n    False\n    ')), For(target=Tuple(elts=[Name(id='typespec', ctx=Store()), Name(id='unsafe', ctx=Store())], ctx=Store()), iter=Name(id='_mutable_spec', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='typespec', ctx=Load())], keywords=[]), body=[Return(value=Compare(left=Name(id='attr', ctx=Load()), ops=[In()], comparators=[Name(id='unsafe', ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='SandboxedEnvironment', bases=[Name(id='Environment', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The sandboxed environment.  It works like the regular environment but\n    tells the compiler to generate sandboxed code.  Additionally subclasses of\n    this environment may override the methods that tell the runtime what\n    attributes or functions are safe to access.\n\n    If the template tries to access insecure code a :exc:`SecurityError` is\n    raised.  However also other exceptions may occur during the rendering so\n    the caller has to ensure that all exceptions are caught.\n    ')), Assign(targets=[Name(id='sandboxed', ctx=Store())], value=Constant(value=True)), AnnAssign(target=Name(id='default_binop_table', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='+'), Constant(value='-'), Constant(value='*'), Constant(value='/'), Constant(value='//'), Constant(value='**'), Constant(value='%')], values=[Attribute(value=Name(id='operator', ctx=Load()), attr='add', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='sub', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='mul', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='truediv', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='floordiv', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='pow', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='mod', ctx=Load())]), simple=1), AnnAssign(target=Name(id='default_unop_table', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='+'), Constant(value='-')], values=[Attribute(value=Name(id='operator', ctx=Load()), attr='pos', ctx=Load()), Attribute(value=Name(id='operator', ctx=Load()), attr='neg', ctx=Load())]), simple=1), AnnAssign(target=Name(id='intercepted_binops', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='intercepted_unops', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='globals', ctx=Load()), slice=Constant(value='range'), ctx=Store())], value=Name(id='safe_range', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='binop_table', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_binop_table', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='unop_table', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_unop_table', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_safe_attribute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attr', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The sandboxed environment will call this method to check if the\n        attribute of an object is safe to access.  Per default all attributes\n        starting with an underscore are considered private as well as the\n        special attributes of internal python objects as returned by the\n        :func:`is_internal_attribute` function.\n        ')), Return(value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='_')], keywords=[]), Call(func=Name(id='is_internal_attribute', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])])))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_safe_callable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an object is safely callable. By default callables\n        are considered safe unless decorated with :func:`unsafe`.\n\n        This also recognizes the Django convention of setting\n        ``func.alters_data = True``.\n        ')), Return(value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='unsafe_callable'), Constant(value=False)], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='alters_data'), Constant(value=False)], keywords=[])])))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='call_binop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='operator', annotation=Name(id='str', ctx=Load())), arg(arg='left', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='right', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For intercepted binary operator calls (:meth:`intercepted_binops`)\n        this function is executed instead of the builtin operator.  This can\n        be used to fine tune the behavior of certain operators.\n\n        .. versionadded:: 2.6\n        ')), Return(value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='binop_table', ctx=Load()), slice=Name(id='operator', ctx=Load()), ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='call_unop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load())), arg(arg='operator', annotation=Name(id='str', ctx=Load())), arg(arg='arg', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For intercepted unary operator calls (:meth:`intercepted_unops`)\n        this function is executed instead of the builtin operator.  This can\n        be used to fine tune the behavior of certain operators.\n\n        .. versionadded:: 2.6\n        ')), Return(value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='unop_table', ctx=Load()), slice=Name(id='operator', ctx=Load()), ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='getitem', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='argument', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Subscribe an object from sandboxed code.')), Try(body=[Return(value=Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='argument', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='LookupError', ctx=Load())], ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='argument', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='attr', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='argument', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_safe_attribute', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='argument', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unsafe_undefined', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='argument', ctx=Load())], keywords=[]))], finalbody=[])], finalbody=[])], orelse=[])])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='undefined', ctx=Load()), args=[], keywords=[keyword(arg='obj', value=Name(id='obj', ctx=Load())), keyword(arg='name', value=Name(id='argument', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Name(id='Undefined', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='getattr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Subscribe an object from sandboxed code and prefer the\n        attribute.  The attribute passed *must* be a bytestring.\n        ')), Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attribute', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Return(value=Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='attribute', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='LookupError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_safe_attribute', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attribute', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unsafe_undefined', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attribute', ctx=Load())], keywords=[]))], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='undefined', ctx=Load()), args=[], keywords=[keyword(arg='obj', value=Name(id='obj', ctx=Load())), keyword(arg='name', value=Name(id='attribute', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Name(id='Undefined', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='unsafe_undefined', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return an undefined object for unsafe attributes.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='undefined', ctx=Load()), args=[JoinedStr(values=[Constant(value='access to attribute '), FormattedValue(value=Name(id='attribute', ctx=Load()), conversion=114), Constant(value=' of '), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=114), Constant(value=' object is unsafe.')])], keywords=[keyword(arg='name', value=Name(id='attribute', ctx=Load())), keyword(arg='obj', value=Name(id='obj', ctx=Load())), keyword(arg='exc', value=Name(id='SecurityError', ctx=Load()))]))], decorator_list=[], returns=Name(id='Undefined', ctx=Load())), FunctionDef(name='format_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s', annotation=Name(id='str', ctx=Load())), arg(arg='args', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), arg(arg='kwargs', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='format_func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='If a format call is detected, then this is routed through this\n        method so that our safety sandbox can be used for it.\n        ')), AnnAssign(target=Name(id='formatter', ctx=Store()), annotation=Name(id='SandboxedFormatter', ctx=Load()), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='Markup', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='SandboxedEscapeFormatter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='escape', value=Attribute(value=Name(id='s', ctx=Load()), attr='escape', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='SandboxedFormatter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='format_func', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='format_func', ctx=Load()), attr='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='format_map')])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), Name(id='kwargs', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='format_map() takes exactly one argument '), FormattedValue(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), op=Add(), right=Compare(left=Name(id='kwargs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), conversion=-1), Constant(value=' given')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='vformat', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load())], keywords=[])), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), args=[Name(id='rv', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='call', args=arguments(posonlyargs=[], args=[arg(arg='__self'), arg(arg='__context', annotation=Name(id='Context', ctx=Load())), arg(arg='__obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Call an object from sandboxed code.')), Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Name(id='inspect_format_method', ctx=Load()), args=[Name(id='__obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fmt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='__self', ctx=Load()), attr='format_string', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load()), Name(id='__obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='__self', ctx=Load()), attr='is_safe_callable', ctx=Load()), args=[Name(id='__obj', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='SecurityError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='__obj', ctx=Load()), conversion=114), Constant(value=' is not safely callable')])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='__obj', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], decorator_list=[]), ClassDef(name='ImmutableSandboxedEnvironment', bases=[Name(id='SandboxedEnvironment', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Works exactly like the regular `SandboxedEnvironment` but does not\n    permit modifications on the builtin mutable objects `list`, `set`, and\n    `dict` by using the :func:`modifies_known_mutable` function.\n    ')), FunctionDef(name='is_safe_attribute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='attr', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='is_safe_attribute', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='modifies_known_mutable', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='SandboxedFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='env', annotation=Name(id='Environment', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_env', ctx=Store())], value=Name(id='env', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='field_name', annotation=Name(id='str', ctx=Load())), arg(arg='args', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), arg(arg='kwargs', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='first', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Name(id='formatter_field_name_split', ctx=Load()), args=[Name(id='field_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_value', ctx=Load()), args=[Name(id='first', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='is_attr', ctx=Store()), Name(id='i', ctx=Store())], ctx=Store()), iter=Name(id='rest', ctx=Load()), body=[If(test=Name(id='is_attr', ctx=Load()), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_env', ctx=Load()), attr='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_env', ctx=Load()), attr='getitem', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Tuple(elts=[Name(id='obj', ctx=Load()), Name(id='first', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='SandboxedEscapeFormatter', bases=[Name(id='SandboxedFormatter', ctx=Load()), Name(id='EscapeFormatter', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])], type_ignores=[])