Module(body=[Expr(value=Constant(value='Extension API for adding custom tags and behavior.')), Import(names=[alias(name='pprint')]), Import(names=[alias(name='re')]), Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='markupsafe', names=[alias(name='Markup')], level=0), ImportFrom(names=[alias(name='defaults')], level=1), ImportFrom(names=[alias(name='nodes')], level=1), ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ImportFrom(module='exceptions', names=[alias(name='TemplateAssertionError')], level=1), ImportFrom(module='exceptions', names=[alias(name='TemplateSyntaxError')], level=1), ImportFrom(module='runtime', names=[alias(name='concat')], level=1), ImportFrom(module='runtime', names=[alias(name='Context')], level=1), ImportFrom(module='runtime', names=[alias(name='Undefined')], level=1), ImportFrom(module='utils', names=[alias(name='import_string')], level=1), ImportFrom(module='utils', names=[alias(name='pass_context')], level=1), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='typing_extensions', asname='te')]), ImportFrom(module='lexer', names=[alias(name='Token')], level=1), ImportFrom(module='lexer', names=[alias(name='TokenStream')], level=1), ImportFrom(module='parser', names=[alias(name='Parser')], level=1), ClassDef(name='_TranslationsBasic', bases=[Attribute(value=Name(id='te', ctx=Load()), attr='Protocol', ctx=Load())], keywords=[], body=[FunctionDef(name='gettext', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='ngettext', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='singular', annotation=Name(id='str', ctx=Load())), arg(arg='plural', annotation=Name(id='str', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='_TranslationsContext', bases=[Name(id='_TranslationsBasic', ctx=Load())], keywords=[], body=[FunctionDef(name='pgettext', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='str', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='npgettext', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='str', ctx=Load())), arg(arg='singular', annotation=Name(id='str', ctx=Load())), arg(arg='plural', annotation=Name(id='str', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_SupportedTranslations', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='_TranslationsBasic', ctx=Load()), Name(id='_TranslationsContext', ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='GETTEXT_FUNCTIONS', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Constant(value='_'), Constant(value='gettext'), Constant(value='ngettext'), Constant(value='pgettext'), Constant(value='npgettext')], ctx=Load()), simple=1), Assign(targets=[Name(id='_ws_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\s*\\n\\s*')], keywords=[])), ClassDef(name='Extension', bases=[], keywords=[], body=[Expr(value=Constant(value='Extensions can be used to add extra functionality to the Jinja template\n    system at the parser level.  Custom extensions are bound to an environment\n    but may not store environment specific data on `self`.  The reason for\n    this is that an extension can be bound to another environment (for\n    overlays) by creating a copy and reassigning the `environment` attribute.\n\n    As extensions are created by the environment they cannot accept any\n    arguments for configuration.  One may want to work around that by using\n    a factory function, but that is not possible as extensions are identified\n    by their import name.  The correct way to configure the extension is\n    storing the configuration values on the environment.  Because this way the\n    environment ends up acting as central configuration storage the\n    attributes may clash which is why extensions have to ensure that the names\n    they choose for configuration are not too generic.  ``prefix`` for example\n    is a terrible name, ``fragment_cache_prefix`` on the other hand is a good\n    name as includes the name of the extension (fragment cache).\n    ')), AnnAssign(target=Name(id='identifier', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='ClassVar', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init_subclass__', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='identifier', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='tags', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='priority', ctx=Store())], value=Constant(value=100)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Name(id='Environment', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Store())], value=Name(id='environment', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='bind', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Name(id='Environment', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a copy of this extension bound to another environment.')), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='rv', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='rv', ctx=Load()), attr='environment', ctx=Store())], value=Name(id='environment', ctx=Load())), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[], returns=Constant(value='Extension')), FunctionDef(name='preprocess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='This method is called before the actual lexing and can be used to\n        preprocess the source.  The `filename` is optional.  The return value\n        must be the preprocessed source.\n        ')), Return(value=Name(id='source', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='filter_stream', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream', annotation=Constant(value='TokenStream'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="It's passed a :class:`~jinja2.lexer.TokenStream` that can be used\n        to filter tokens returned.  This method has to return an iterable of\n        :class:`~jinja2.lexer.Token`\\s, but it doesn't have to return a\n        :class:`~jinja2.lexer.TokenStream`.\n        ")), Return(value=Name(id='stream', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='TokenStream'), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Constant(value='Token'), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If any of the :attr:`tags` matched this method is called with the\n        parser as first argument.  The token the parser stream is pointing at\n        is the name token that matched.  This method has to return one or a\n        list of multiple nodes.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Return an attribute node for the current extension.  This is useful\n        to pass constants on extensions to generated template code.\n\n        ::\n\n            self.attr('_my_attribute', lineno=lineno)\n        ")), Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='ExtensionAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='identifier', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='ExtensionAttribute', ctx=Load())), FunctionDef(name='call_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='args', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='kwargs', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Keyword', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='dyn_args', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load())), arg(arg='dyn_kwargs', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load())), arg(arg='lineno', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Call a method of the extension.  This is a shortcut for\n        :meth:`attr` + :class:`jinja2.nodes.Call`.\n        ')), If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='kwargs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Call', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='attr', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))]), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load()), Name(id='dyn_args', ctx=Load()), Name(id='dyn_kwargs', ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='Call', ctx=Load()))], decorator_list=[]), FunctionDef(name='_gettext_alias', args=arguments(posonlyargs=[], args=[arg(arg='__context', annotation=Name(id='Context', ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='resolve', ctx=Load()), args=[Constant(value='gettext')], keywords=[]), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Name(id='pass_context', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Name(id='Undefined', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_make_new_gettext', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='gettext', args=arguments(posonlyargs=[], args=[arg(arg='__context', annotation=Name(id='Context', ctx=Load())), arg(arg='__string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='variables', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='__string', ctx=Load())], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='__context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='rv', ctx=Load()), op=Mod(), right=Name(id='variables', ctx=Load())))], decorator_list=[Name(id='pass_context', ctx=Load())], returns=Name(id='str', ctx=Load())), Return(value=Name(id='gettext', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_make_new_ngettext', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='ngettext', args=arguments(posonlyargs=[], args=[arg(arg='__context', annotation=Name(id='Context', ctx=Load())), arg(arg='__singular', annotation=Name(id='str', ctx=Load())), arg(arg='__plural', annotation=Name(id='str', ctx=Load())), arg(arg='__num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='variables', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='num'), Name(id='__num', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='__singular', ctx=Load()), Name(id='__plural', ctx=Load()), Name(id='__num', ctx=Load())], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='__context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='rv', ctx=Load()), op=Mod(), right=Name(id='variables', ctx=Load())))], decorator_list=[Name(id='pass_context', ctx=Load())], returns=Name(id='str', ctx=Load())), Return(value=Name(id='ngettext', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_make_new_pgettext', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='pgettext', args=arguments(posonlyargs=[], args=[arg(arg='__context', annotation=Name(id='Context', ctx=Load())), arg(arg='__string_ctx', annotation=Name(id='str', ctx=Load())), arg(arg='__string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='variables', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='context'), Name(id='__string_ctx', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='__string_ctx', ctx=Load()), Name(id='__string', ctx=Load())], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='__context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='rv', ctx=Load()), op=Mod(), right=Name(id='variables', ctx=Load())))], decorator_list=[Name(id='pass_context', ctx=Load())], returns=Name(id='str', ctx=Load())), Return(value=Name(id='pgettext', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_make_new_npgettext', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='npgettext', args=arguments(posonlyargs=[], args=[arg(arg='__context', annotation=Name(id='Context', ctx=Load())), arg(arg='__string_ctx', annotation=Name(id='str', ctx=Load())), arg(arg='__singular', annotation=Name(id='str', ctx=Load())), arg(arg='__plural', annotation=Name(id='str', ctx=Load())), arg(arg='__num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='variables', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='context'), Name(id='__string_ctx', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='num'), Name(id='__num', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='__context', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='__string_ctx', ctx=Load()), Name(id='__singular', ctx=Load()), Name(id='__plural', ctx=Load()), Name(id='__num', ctx=Load())], keywords=[])), If(test=Attribute(value=Attribute(value=Name(id='__context', ctx=Load()), attr='eval_ctx', ctx=Load()), attr='autoescape', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='Markup', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='rv', ctx=Load()), op=Mod(), right=Name(id='variables', ctx=Load())))], decorator_list=[Name(id='pass_context', ctx=Load())], returns=Name(id='str', ctx=Load())), Return(value=Name(id='npgettext', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='InternationalizationExtension', bases=[Name(id='Extension', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='This extension adds gettext support to Jinja.')), Assign(targets=[Name(id='tags', ctx=Store())], value=Set(elts=[Constant(value='trans')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='environment', annotation=Name(id='Environment', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='environment', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='environment', ctx=Load()), attr='globals', ctx=Load()), slice=Constant(value='_'), ctx=Store())], value=Name(id='_gettext_alias', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='extend', ctx=Load()), args=[], keywords=[keyword(arg='install_gettext_translations', value=Attribute(value=Name(id='self', ctx=Load()), attr='_install', ctx=Load())), keyword(arg='install_null_translations', value=Attribute(value=Name(id='self', ctx=Load()), attr='_install_null', ctx=Load())), keyword(arg='install_gettext_callables', value=Attribute(value=Name(id='self', ctx=Load()), attr='_install_callables', ctx=Load())), keyword(arg='uninstall_gettext_translations', value=Attribute(value=Name(id='self', ctx=Load()), attr='_uninstall', ctx=Load())), keyword(arg='extract_translations', value=Attribute(value=Name(id='self', ctx=Load()), attr='_extract', ctx=Load())), keyword(arg='newstyle_gettext', value=Constant(value=False))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_install', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='translations', annotation=Constant(value='_SupportedTranslations')), arg(arg='newstyle', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='gettext', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='ugettext'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='gettext', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='gettext', ctx=Store())], value=Attribute(value=Name(id='translations', ctx=Load()), attr='gettext', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ngettext', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='ungettext'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='ngettext', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ngettext', ctx=Store())], value=Attribute(value=Name(id='translations', ctx=Load()), attr='ngettext', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pgettext', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='pgettext'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='npgettext', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='npgettext'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_install_callables', ctx=Load()), args=[Name(id='gettext', ctx=Load()), Name(id='ngettext', ctx=Load())], keywords=[keyword(arg='newstyle', value=Name(id='newstyle', ctx=Load())), keyword(arg='pgettext', value=Name(id='pgettext', ctx=Load())), keyword(arg='npgettext', value=Name(id='npgettext', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_install_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='newstyle', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Import(names=[alias(name='gettext')]), Assign(targets=[Name(id='translations', ctx=Store())], value=Call(func=Attribute(value=Name(id='gettext', ctx=Load()), attr='NullTranslations', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='pgettext')], keywords=[]), body=[Assign(targets=[Name(id='pgettext', ctx=Store())], value=Attribute(value=Name(id='translations', ctx=Load()), attr='pgettext', ctx=Load()))], orelse=[FunctionDef(name='pgettext', args=arguments(posonlyargs=[], args=[arg(arg='c', annotation=Name(id='str', ctx=Load())), arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='translations', ctx=Load()), Constant(value='npgettext')], keywords=[]), body=[Assign(targets=[Name(id='npgettext', ctx=Store())], value=Attribute(value=Name(id='translations', ctx=Load()), attr='npgettext', ctx=Load()))], orelse=[FunctionDef(name='npgettext', args=arguments(posonlyargs=[], args=[arg(arg='c', annotation=Name(id='str', ctx=Load())), arg(arg='s', annotation=Name(id='str', ctx=Load())), arg(arg='p', annotation=Name(id='str', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Name(id='s', ctx=Load()), orelse=Name(id='p', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_install_callables', ctx=Load()), args=[], keywords=[keyword(arg='gettext', value=Attribute(value=Name(id='translations', ctx=Load()), attr='gettext', ctx=Load())), keyword(arg='ngettext', value=Attribute(value=Name(id='translations', ctx=Load()), attr='ngettext', ctx=Load())), keyword(arg='newstyle', value=Name(id='newstyle', ctx=Load())), keyword(arg='pgettext', value=Name(id='pgettext', ctx=Load())), keyword(arg='npgettext', value=Name(id='npgettext', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_install_callables', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='gettext', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='ngettext', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='newstyle', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='pgettext', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='npgettext', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='newstyle', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='newstyle_gettext', ctx=Store())], value=Name(id='newstyle', ctx=Load()))], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='newstyle_gettext', ctx=Load()), body=[Assign(targets=[Name(id='gettext', ctx=Store())], value=Call(func=Name(id='_make_new_gettext', ctx=Load()), args=[Name(id='gettext', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ngettext', ctx=Store())], value=Call(func=Name(id='_make_new_ngettext', ctx=Load()), args=[Name(id='ngettext', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pgettext', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pgettext', ctx=Store())], value=Call(func=Name(id='_make_new_pgettext', ctx=Load()), args=[Name(id='pgettext', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='npgettext', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='npgettext', ctx=Store())], value=Call(func=Name(id='_make_new_npgettext', ctx=Load()), args=[Name(id='npgettext', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='globals', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='gettext', value=Name(id='gettext', ctx=Load())), keyword(arg='ngettext', value=Name(id='ngettext', ctx=Load())), keyword(arg='pgettext', value=Name(id='pgettext', ctx=Load())), keyword(arg='npgettext', value=Name(id='npgettext', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_uninstall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='translations', annotation=Constant(value='_SupportedTranslations'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='gettext'), Constant(value='ngettext'), Constant(value='pgettext'), Constant(value='npgettext')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='globals', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_extract', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Template', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='gettext_functions', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='GETTEXT_FUNCTIONS', ctx=Load())]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='extract_from_ast', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='gettext_functions', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a translatable tag.')), Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[]), attr='lineno', ctx=Load())), Assign(targets=[Name(id='context', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='context_token', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='next_if', ctx=Load()), args=[Constant(value='string')], keywords=[])), If(test=Compare(left=Name(id='context_token', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='context', ctx=Store())], value=Attribute(value=Name(id='context_token', ctx=Load()), attr='value', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='plural_expr', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='plural_expr_assignment', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Assign', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assign(targets=[Name(id='num_called_num', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Name(id='variables', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='trimmed', ctx=Store())], value=Constant(value=None)), While(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='block_end')]), body=[If(test=Name(id='variables', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='comma')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='skip_if', ctx=Load()), args=[Constant(value='colon')], keywords=[]), body=[Break()], orelse=[]), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='name')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[In()], comparators=[Name(id='variables', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='translatable variable '), FormattedValue(value=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), conversion=114), Constant(value=' defined twice.')]), Attribute(value=Name(id='token', ctx=Load()), attr='lineno', ctx=Load())], keywords=[keyword(arg='exc', value=Name(id='TemplateAssertionError', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='assign')]), body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='variables', ctx=Load()), slice=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ctx=Store()), Name(id='var', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_expression', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='trimmed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='trimmed'), Constant(value='notrimmed')], ctx=Load())])]), body=[Assign(targets=[Name(id='trimmed', ctx=Store())], value=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='trimmed')])), Continue()], orelse=[Assign(targets=[Subscript(value=Name(id='variables', ctx=Load()), slice=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ctx=Store()), Name(id='var', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), Constant(value='load')], keywords=[]))])]), If(test=Compare(left=Name(id='plural_expr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='var', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='plural_expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='_trans'), Constant(value='load')], keywords=[])), Assign(targets=[Subscript(value=Name(id='variables', ctx=Load()), slice=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ctx=Store())], value=Name(id='plural_expr', ctx=Load())), Assign(targets=[Name(id='plural_expr_assignment', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Assign', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Constant(value='_trans'), Constant(value='store')], keywords=[]), Name(id='var', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='plural_expr', ctx=Store())], value=Name(id='var', ctx=Load()))]), Assign(targets=[Name(id='num_called_num', ctx=Store())], value=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='num')]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='block_end')], keywords=[])), Assign(targets=[Name(id='plural', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='have_plural', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='referenced', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='singular_names', ctx=Store()), Name(id='singular', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_block', ctx=Load()), args=[Name(id='parser', ctx=Load()), Constant(value=True)], keywords=[])), If(test=Name(id='singular_names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='referenced', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='singular_names', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='plural_expr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plural_expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Subscript(value=Name(id='singular_names', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='load')], keywords=[])), Assign(targets=[Name(id='num_called_num', ctx=Store())], value=Compare(left=Subscript(value=Name(id='singular_names', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='num')]))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='test', ctx=Load()), args=[Constant(value='name:pluralize')], keywords=[]), body=[Assign(targets=[Name(id='have_plural', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='block_end')]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='name')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[NotIn()], comparators=[Name(id='variables', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='unknown variable '), FormattedValue(value=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), conversion=114), Constant(value=' for pluralization')]), Attribute(value=Name(id='token', ctx=Load()), attr='lineno', ctx=Load())], keywords=[keyword(arg='exc', value=Name(id='TemplateAssertionError', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='plural_expr', ctx=Store())], value=Subscript(value=Name(id='variables', ctx=Load()), slice=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='num_called_num', ctx=Store())], value=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='num')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='block_end')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='plural_names', ctx=Store()), Name(id='plural', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_block', ctx=Load()), args=[Name(id='parser', ctx=Load()), Constant(value=False)], keywords=[])), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='referenced', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='plural_names', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[]))]), For(target=Name(id='name', ctx=Store()), iter=Name(id='referenced', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='variables', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='variables', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value='load')], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='have_plural', ctx=Load())), body=[Assign(targets=[Name(id='plural_expr', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='plural_expr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='pluralize without variables'), Name(id='lineno', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='trimmed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='trimmed', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='policies', ctx=Load()), slice=Constant(value='ext.i18n.trimmed'), ctx=Load()))], orelse=[]), If(test=Name(id='trimmed', ctx=Load()), body=[Assign(targets=[Name(id='singular', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_trim_whitespace', ctx=Load()), args=[Name(id='singular', ctx=Load())], keywords=[])), If(test=Name(id='plural', ctx=Load()), body=[Assign(targets=[Name(id='plural', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_trim_whitespace', ctx=Load()), args=[Name(id='plural', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_node', ctx=Load()), args=[Name(id='singular', ctx=Load()), Name(id='plural', ctx=Load()), Name(id='context', ctx=Load()), Name(id='variables', ctx=Load()), Name(id='plural_expr', ctx=Load()), Call(func=Name(id='bool', ctx=Load()), args=[Name(id='referenced', ctx=Load())], keywords=[]), BoolOp(op=And(), values=[Name(id='num_called_num', ctx=Load()), Name(id='have_plural', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='set_lineno', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='plural_expr_assignment', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[Name(id='plural_expr_assignment', ctx=Load()), Name(id='node', ctx=Load())], ctx=Load()))], orelse=[Return(value=Name(id='node', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Node', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_trim_whitespace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load())), arg(arg='_ws_re', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_ws_re', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='_ws_re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=' '), Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_parse_block', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser')), arg(arg='allow_pluralize', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse until the next block tag with a given name.')), Assign(targets=[Name(id='referenced', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='buf', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='data')]), body=[Expr(value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='%%')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='variable_begin')]), body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='name')], keywords=[]), attr='value', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='referenced', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='%('), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=')s')])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='variable_end')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='block_begin')]), body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='test', ctx=Load()), args=[Constant(value='name:endtrans')], keywords=[]), body=[Break()], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='current', ctx=Load()), attr='test', ctx=Load()), args=[Constant(value='name:pluralize')], keywords=[]), body=[If(test=Name(id='allow_pluralize', ctx=Load()), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='a translatable section can have only one pluralize section')], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='control structures in translatable sections are not allowed')], keywords=[]))], orelse=[If(test=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='eos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='unclosed translation block')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='internal parser error')], keywords=[]))])])])])], orelse=[]), Return(value=Tuple(elts=[Name(id='referenced', ctx=Load()), Call(func=Name(id='concat', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_make_node', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='singular', annotation=Name(id='str', ctx=Load())), arg(arg='plural', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='context', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='variables', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='plural_expr', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load())), arg(arg='vars_referenced', annotation=Name(id='bool', ctx=Load())), arg(arg='num_called_num', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generates a useful node from the data provided.')), Assign(targets=[Name(id='newstyle', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='newstyle_gettext', ctx=Load())), AnnAssign(target=Name(id='node', ctx=Store()), annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), simple=1), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='vars_referenced', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='newstyle', ctx=Load()))]), body=[Assign(targets=[Name(id='singular', ctx=Store())], value=Call(func=Attribute(value=Name(id='singular', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%%'), Constant(value='%')], keywords=[])), If(test=Name(id='plural', ctx=Load()), body=[Assign(targets=[Name(id='plural', ctx=Store())], value=Call(func=Attribute(value=Name(id='plural', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%%'), Constant(value='%')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='func_name', ctx=Store())], value=Constant(value='gettext')), AnnAssign(target=Name(id='func_args', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load()), ctx=Load()), value=List(elts=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load()), args=[Name(id='singular', ctx=Load())], keywords=[])], ctx=Load()), simple=1), If(test=Compare(left=Name(id='context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='func_args', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='func_name', ctx=Store())], value=JoinedStr(values=[Constant(value='p'), FormattedValue(value=Name(id='func_name', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Compare(left=Name(id='plural_expr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='func_name', ctx=Store())], value=JoinedStr(values=[Constant(value='n'), FormattedValue(value=Name(id='func_name', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='func_args', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load()), args=[Name(id='plural', ctx=Load())], keywords=[]), Name(id='plural_expr', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Call', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load()), args=[Name(id='func_name', ctx=Load()), Constant(value='load')], keywords=[]), Name(id='func_args', ctx=Load()), List(elts=[], ctx=Load()), Constant(value=None), Constant(value=None)], keywords=[])), If(test=Name(id='newstyle', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='num_called_num', ctx=Load()), Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='num')])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='kwargs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Keyword', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='MarkSafeIfAutoescape', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), If(test=Name(id='variables', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Mod', ctx=Load()), args=[Name(id='node', ctx=Load()), Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Dict', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Pair', ctx=Load()), args=[Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Output', ctx=Load()), args=[List(elts=[Name(id='node', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='Output', ctx=Load()))], decorator_list=[]), ClassDef(name='ExprStmtExtension', bases=[Name(id='Extension', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Adds a `do` tag to Jinja that works like the print statement just\n    that it doesn't print the return value.\n    ")), Assign(targets=[Name(id='tags', ctx=Store())], value=Set(elts=[Constant(value='do')])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='ExprStmt', ctx=Load()), args=[], keywords=[keyword(arg='lineno', value=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[]), attr='lineno', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_tuple', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='node', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='ExprStmt', ctx=Load()))], decorator_list=[]), ClassDef(name='LoopControlExtension', bases=[Name(id='Extension', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Adds break and continue to the template engine.')), Assign(targets=[Name(id='tags', ctx=Store())], value=Set(elts=[Constant(value='break'), Constant(value='continue')])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='token', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='break')]), body=[Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Break', ctx=Load()), args=[], keywords=[keyword(arg='lineno', value=Attribute(value=Name(id='token', ctx=Load()), attr='lineno', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Continue', ctx=Load()), args=[], keywords=[keyword(arg='lineno', value=Attribute(value=Name(id='token', ctx=Load()), attr='lineno', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Break', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Continue', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='DebugExtension', bases=[Name(id='Extension', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A ``{% debug %}`` tag that dumps the available variables,\n    filters, and tests.\n\n    .. code-block:: html+jinja\n\n        <pre>{% debug %}</pre>\n\n    .. code-block:: text\n\n        {'context': {'cycler': <class 'jinja2.utils.Cycler'>,\n                     ...,\n                     'namespace': <class 'jinja2.utils.Namespace'>},\n         'filters': ['abs', 'attr', 'batch', 'capitalize', 'center', 'count', 'd',\n                     ..., 'urlencode', 'urlize', 'wordcount', 'wordwrap', 'xmlattr'],\n         'tests': ['!=', '<', '<=', '==', '>', '>=', 'callable', 'defined',\n                   ..., 'odd', 'sameas', 'sequence', 'string', 'undefined', 'upper']}\n\n    .. versionadded:: 2.11.0\n    ")), Assign(targets=[Name(id='tags', ctx=Store())], value=Set(elts=[Constant(value='debug')])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser', annotation=Constant(value='Parser'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lineno', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='parser', ctx=Load()), attr='stream', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='name:debug')], keywords=[]), attr='lineno', ctx=Load())), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='ContextReference', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='call_method', ctx=Load()), args=[Constant(value='_render'), List(elts=[Name(id='context', ctx=Load())], ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Output', ctx=Load()), args=[List(elts=[Name(id='result', ctx=Load())], ctx=Load())], keywords=[keyword(arg='lineno', value=Name(id='lineno', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='nodes', ctx=Load()), attr='Output', ctx=Load())), FunctionDef(name='_render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='context', annotation=Name(id='Context', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='context'), Constant(value='filters'), Constant(value='tests')], values=[Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='get_all', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='filters', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='tests', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])])), Return(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='depth', value=Constant(value=3)), keyword(arg='compact', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='extract_from_ast', args=arguments(posonlyargs=[], args=[arg(arg='ast', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Template', ctx=Load())), arg(arg='gettext_functions', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='babel_style', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='GETTEXT_FUNCTIONS', ctx=Load()), Constant(value=True)]), body=[Expr(value=Constant(value='Extract localizable strings from the given template node.  Per\n    default this function returns matches in babel style that means non string\n    parameters as well as keyword arguments are returned as `None`.  This\n    allows Babel to figure out what you really meant if you are using\n    gettext functions that allow keyword arguments for placeholder expansion.\n    If you don\'t want that behavior set the `babel_style` parameter to `False`\n    which causes only strings to be returned and parameters are always stored\n    in tuples.  As a consequence invalid gettext calls (calls without a single\n    string parameter or string parameters after non-string parameters) are\n    skipped.\n\n    This example explains the behavior:\n\n    >>> from jinja2 import Environment\n    >>> env = Environment()\n    >>> node = env.parse(\'{{ (_("foo"), _(), ngettext("foo", "bar", 42)) }}\')\n    >>> list(extract_from_ast(node))\n    [(1, \'_\', \'foo\'), (1, \'_\', ()), (1, \'ngettext\', (\'foo\', \'bar\', None))]\n    >>> list(extract_from_ast(node, babel_style=False))\n    [(1, \'_\', (\'foo\',)), (1, \'ngettext\', (\'foo\', \'bar\'))]\n\n    For every string found this function yields a ``(lineno, function,\n    message)`` tuple, where:\n\n    * ``lineno`` is the number of the line on which the string was found,\n    * ``function`` is the name of the ``gettext`` function used (if the\n      string was extracted from embedded Python code), and\n    *   ``message`` is the string, or a tuple of strings for functions\n         with multiple string arguments.\n\n    This extraction function operates on the AST and is because of that unable\n    to extract any comments.  For comment support you have to use the babel\n    extraction interface or extract comments yourself.\n    ')), AnnAssign(target=Name(id='out', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), For(target=Name(id='node', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='find_all', ctx=Load()), args=[Attribute(value=Name(id='nodes', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Name', ctx=Load())], keywords=[])), Compare(left=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='node', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='gettext_functions', ctx=Load())])]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='strings', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='args', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='Const', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='arg', ctx=Load()), attr='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='arg', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))])], orelse=[]), For(target=Name(id='_', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='kwargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='dyn_args', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='dyn_kwargs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='strings', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='babel_style', ctx=Load())), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='strings', ctx=Load()), ifs=[Compare(left=Name(id='x', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='out', ctx=Load())), body=[Continue()], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Subscript(value=Name(id='strings', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[]))])]), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='node', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='node', ctx=Load()), attr='name', ctx=Load()), Name(id='out', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), ClassDef(name='_CommentFinder', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper class to find comments in a token stream.  Can only\n    find comments for gettext calls forwards.  Once the comment\n    from line 4 is found, a comment for line 1 will not return a\n    usable value.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokens', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='comment_tags', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Store())], value=Name(id='tokens', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='comment_tags', ctx=Store())], value=Name(id='comment_tags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_lineno', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='find_backwards', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='token_type', ctx=Store()), Name(id='token_value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Load()), upper=Name(id='offset', ctx=Load())), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='token_type', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='comment'), Constant(value='linecomment')], ctx=Load())]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='comment', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='token_value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=None), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='comment_tags', ctx=Load())]), body=[Return(value=List(elts=[Call(func=Attribute(value=Name(id='comment', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=List(elts=[], ctx=Load()))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Store())], value=Name(id='offset', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='find_comments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='comment_tags', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='last_lineno', ctx=Load()), ops=[Gt()], comparators=[Name(id='lineno', ctx=Load())])]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Tuple(elts=[Name(id='token_lineno', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Load())), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='token_lineno', ctx=Load()), ops=[Gt()], comparators=[Name(id='lineno', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_backwards', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='offset', ctx=Load()), op=Add(), right=Name(id='idx', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_backwards', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tokens', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='babel_extract', args=arguments(posonlyargs=[], args=[arg(arg='fileobj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='BinaryIO', ctx=Load())), arg(arg='keywords', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='comment_tags', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='options', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Babel extraction method for Jinja templates.\n\n    .. versionchanged:: 2.3\n       Basic support for translation comments was added.  If `comment_tags`\n       is now set to a list of keywords for extraction, the extractor will\n       try to find the best preceding comment that begins with one of the\n       keywords.  For best results, make sure to not have more than one\n       gettext call in one line of code and the matching comment in the\n       same line or the line before.\n\n    .. versionchanged:: 2.5.1\n       The `newstyle_gettext` flag can be set to `True` to enable newstyle\n       gettext calls.\n\n    .. versionchanged:: 2.7\n       A `silent` option can now be provided.  If set to `False` template\n       syntax errors are propagated instead of being ignored.\n\n    :param fileobj: the file-like object the messages should be extracted from\n    :param keywords: a list of keywords (i.e. function names) that should be\n                     recognized as translation functions\n    :param comment_tags: a list of translator tags to search for and include\n                         in the results.\n    :param options: a dictionary of additional options (optional)\n    :return: an iterator over ``(lineno, funcname, message, comments)`` tuples.\n             (comments will be empty currently)\n    ')), AnnAssign(target=Name(id='extensions', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='Extension', ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='extension_name', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='extensions'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Name(id='extension_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='extension_name', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='extension_name', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='extensions', ctx=Load()), slice=Call(func=Name(id='import_string', ctx=Load()), args=[Name(id='extension_name', ctx=Load())], keywords=[]), ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='InternationalizationExtension', ctx=Load()), ops=[NotIn()], comparators=[Name(id='extensions', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='extensions', ctx=Load()), slice=Name(id='InternationalizationExtension', ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[]), FunctionDef(name='getbool', args=arguments(posonlyargs=[], args=[arg(arg='options', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Set(elts=[Constant(value='1'), Constant(value='on'), Constant(value='yes'), Constant(value='true')])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='silent', ctx=Store())], value=Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='silent'), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='environment', ctx=Store())], value=Call(func=Name(id='Environment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='block_start_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='BLOCK_START_STRING', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='block_end_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='BLOCK_END_STRING', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='variable_start_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='VARIABLE_START_STRING', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='variable_end_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='VARIABLE_END_STRING', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='comment_start_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='COMMENT_START_STRING', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='comment_end_string'), Attribute(value=Name(id='defaults', ctx=Load()), attr='COMMENT_END_STRING', ctx=Load())], keywords=[]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='line_statement_prefix')], keywords=[]), Attribute(value=Name(id='defaults', ctx=Load()), attr='LINE_STATEMENT_PREFIX', ctx=Load())]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='line_comment_prefix')], keywords=[]), Attribute(value=Name(id='defaults', ctx=Load()), attr='LINE_COMMENT_PREFIX', ctx=Load())]), Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='trim_blocks'), Attribute(value=Name(id='defaults', ctx=Load()), attr='TRIM_BLOCKS', ctx=Load())], keywords=[]), Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='lstrip_blocks'), Attribute(value=Name(id='defaults', ctx=Load()), attr='LSTRIP_BLOCKS', ctx=Load())], keywords=[]), Attribute(value=Name(id='defaults', ctx=Load()), attr='NEWLINE_SEQUENCE', ctx=Load()), Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='keep_trailing_newline'), Attribute(value=Name(id='defaults', ctx=Load()), attr='KEEP_TRAILING_NEWLINE', ctx=Load())], keywords=[]), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='extensions', ctx=Load())], keywords=[])], keywords=[keyword(arg='cache_size', value=Constant(value=0)), keyword(arg='auto_reload', value=Constant(value=False))])), If(test=Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='trimmed')], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='environment', ctx=Load()), attr='policies', ctx=Load()), slice=Constant(value='ext.i18n.trimmed'), ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='getbool', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='newstyle_gettext')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='environment', ctx=Load()), attr='newstyle_gettext', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fileobj', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding'), Constant(value='utf-8')], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='lex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='preprocess', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TemplateSyntaxError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='silent', ctx=Load())), body=[Raise()], orelse=[]), Return()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Name(id='_CommentFinder', ctx=Load()), args=[Name(id='tokens', ctx=Load()), Name(id='comment_tags', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='lineno', ctx=Store()), Name(id='func', ctx=Store()), Name(id='message', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='extract_from_ast', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='keywords', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='lineno', ctx=Load()), Name(id='func', ctx=Load()), Name(id='message', ctx=Load()), Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find_comments', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterator', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='i18n', ctx=Store())], value=Name(id='InternationalizationExtension', ctx=Load())), Assign(targets=[Name(id='do', ctx=Store())], value=Name(id='ExprStmtExtension', ctx=Load())), Assign(targets=[Name(id='loopcontrols', ctx=Store())], value=Name(id='LoopControlExtension', ctx=Load())), Assign(targets=[Name(id='debug', ctx=Store())], value=Name(id='DebugExtension', ctx=Load()))], type_ignores=[])