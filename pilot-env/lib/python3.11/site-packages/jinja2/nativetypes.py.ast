Module(body=[Import(names=[alias(name='typing', asname='t')]), ImportFrom(module='ast', names=[alias(name='literal_eval')], level=0), ImportFrom(module='ast', names=[alias(name='parse')], level=0), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='itertools', names=[alias(name='islice')], level=0), ImportFrom(module='types', names=[alias(name='GeneratorType')], level=0), ImportFrom(names=[alias(name='nodes')], level=1), ImportFrom(module='compiler', names=[alias(name='CodeGenerator')], level=1), ImportFrom(module='compiler', names=[alias(name='Frame')], level=1), ImportFrom(module='compiler', names=[alias(name='has_safe_repr')], level=1), ImportFrom(module='environment', names=[alias(name='Environment')], level=1), ImportFrom(module='environment', names=[alias(name='Template')], level=1), FunctionDef(name='native_concat', args=arguments(posonlyargs=[], args=[arg(arg='values', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a native Python type from the list of compiled nodes. If\n    the result is a single node, its value is returned. Otherwise, the\n    nodes are concatenated as strings. If the result can be parsed with\n    :func:`ast.literal_eval`, the parsed value is returned. Otherwise,\n    the string is returned.\n\n    :param values: Iterable of outputs to concatenate.\n    ')), Assign(targets=[Name(id='head', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='islice', ctx=Load()), args=[Name(id='values', ctx=Load()), Constant(value=2)], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='head', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='raw', ctx=Store())], value=Subscript(value=Name(id='head', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Return(value=Name(id='raw', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='values', ctx=Load()), Name(id='GeneratorType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Name(id='head', ctx=Load()), Name(id='values', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='raw', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Try(body=[Return(value=Call(func=Name(id='literal_eval', ctx=Load()), args=[Call(func=Name(id='parse', ctx=Load()), args=[Name(id='raw', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='eval'))])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='SyntaxError', ctx=Load()), Name(id='MemoryError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='raw', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), ClassDef(name='NativeCodeGenerator', bases=[Name(id='CodeGenerator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A code generator which renders Python types by not adding\n    ``str()`` around output nodes.\n    ')), FunctionDef(name='_default_finalize', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='value', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='_output_const_repr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='group', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='group', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_output_child_to_const', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())), arg(arg='frame', annotation=Name(id='Frame', ctx=Load())), arg(arg='finalize', annotation=Attribute(value=Name(id='CodeGenerator', ctx=Load()), attr='_FinalizeInfo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='const', ctx=Store())], value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='as_const', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='eval_ctx', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='has_safe_repr', ctx=Load()), args=[Name(id='const', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='Impossible', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='nodes', ctx=Load()), attr='TemplateData', ctx=Load())], keywords=[]), body=[Return(value=Name(id='const', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='finalize', ctx=Load()), attr='const', ctx=Load()), args=[Name(id='const', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='_output_child_pre', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())), arg(arg='frame', annotation=Name(id='Frame', ctx=Load())), arg(arg='finalize', annotation=Attribute(value=Name(id='CodeGenerator', ctx=Load()), attr='_FinalizeInfo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='finalize', ctx=Load()), attr='src', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='finalize', ctx=Load()), attr='src', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_output_child_post', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node', annotation=Attribute(value=Name(id='nodes', ctx=Load()), attr='Expr', ctx=Load())), arg(arg='frame', annotation=Name(id='Frame', ctx=Load())), arg(arg='finalize', annotation=Attribute(value=Name(id='CodeGenerator', ctx=Load()), attr='_FinalizeInfo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='finalize', ctx=Load()), attr='src', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=')')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='NativeEnvironment', bases=[Name(id='Environment', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An environment that renders templates to native Python types.')), Assign(targets=[Name(id='code_generator_class', ctx=Store())], value=Name(id='NativeCodeGenerator', ctx=Load())), Assign(targets=[Name(id='concat', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Name(id='native_concat', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='NativeTemplate', bases=[Name(id='Template', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='environment_class', ctx=Store())], value=Name(id='NativeEnvironment', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Render the template to produce a native Python type. If the\n        result is a single node, its value is returned. Otherwise, the\n        nodes are concatenated as strings. If the result can be parsed\n        with :func:`ast.literal_eval`, the parsed value is returned.\n        Otherwise, the string is returned.\n        ')), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new_context', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment_class', ctx=Load()), attr='concat', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='root_render_func', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='handle_exception', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), AsyncFunctionDef(name='render_async', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='is_async', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='The environment was not created with async mode enabled.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new_context', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment_class', ctx=Load()), attr='concat', ctx=Load()), args=[ListComp(elt=Name(id='n', ctx=Load()), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='root_render_func', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[]), ifs=[], is_async=1)])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='environment', ctx=Load()), attr='handle_exception', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='NativeEnvironment', ctx=Load()), attr='template_class', ctx=Store())], value=Name(id='NativeTemplate', ctx=Load()))], type_ignores=[])