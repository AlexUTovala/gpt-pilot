Module(body=[Expr(value=Constant(value='\nCommonly useful filters for `attr.asdict`.\n')), ImportFrom(module='_make', names=[alias(name='Attribute')], level=1), FunctionDef(name='_split_what', args=arguments(posonlyargs=[], args=[arg(arg='what')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns a tuple of `frozenset`s of classes and attributes.\n    ')), Return(value=Tuple(elts=[Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='cls', ctx=Load()), generators=[comprehension(target=Name(id='cls', ctx=Store()), iter=Name(id='what', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])], is_async=0)])], keywords=[]), Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='cls', ctx=Load()), generators=[comprehension(target=Name(id='cls', ctx=Store()), iter=Name(id='what', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])], is_async=0)])], keywords=[]), Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='cls', ctx=Load()), generators=[comprehension(target=Name(id='cls', ctx=Store()), iter=Name(id='what', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='Attribute', ctx=Load())], keywords=[])], is_async=0)])], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='include', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='what'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Include *what*.\n\n    :param what: What to include.\n    :type what: `list` of classes `type`, field names `str` or\n        `attrs.Attribute`\\ s\n\n    :rtype: `callable`\n\n    .. versionchanged:: 23.1.0 Accept strings with field names.\n    ')), Assign(targets=[Tuple(elts=[Name(id='cls', ctx=Store()), Name(id='names', ctx=Store()), Name(id='attrs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_what', ctx=Load()), args=[Name(id='what', ctx=Load())], keywords=[])), FunctionDef(name='include_', args=arguments(posonlyargs=[], args=[arg(arg='attribute'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='value', ctx=Load()), attr='__class__', ctx=Load()), ops=[In()], comparators=[Name(id='cls', ctx=Load())]), Compare(left=Attribute(value=Name(id='attribute', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='names', ctx=Load())]), Compare(left=Name(id='attribute', ctx=Load()), ops=[In()], comparators=[Name(id='attrs', ctx=Load())])]))], decorator_list=[]), Return(value=Name(id='include_', ctx=Load()))], decorator_list=[]), FunctionDef(name='exclude', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='what'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Exclude *what*.\n\n    :param what: What to exclude.\n    :type what: `list` of classes `type`, field names `str` or\n        `attrs.Attribute`\\ s.\n\n    :rtype: `callable`\n\n    .. versionchanged:: 23.3.0 Accept field name string as input argument\n    ')), Assign(targets=[Tuple(elts=[Name(id='cls', ctx=Store()), Name(id='names', ctx=Store()), Name(id='attrs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_what', ctx=Load()), args=[Name(id='what', ctx=Load())], keywords=[])), FunctionDef(name='exclude_', args=arguments(posonlyargs=[], args=[arg(arg='attribute'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='value', ctx=Load()), attr='__class__', ctx=Load()), ops=[In()], comparators=[Name(id='cls', ctx=Load())]), Compare(left=Attribute(value=Name(id='attribute', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='names', ctx=Load())]), Compare(left=Name(id='attribute', ctx=Load()), ops=[In()], comparators=[Name(id='attrs', ctx=Load())])])))], decorator_list=[]), Return(value=Name(id='exclude_', ctx=Load()))], decorator_list=[])], type_ignores=[])