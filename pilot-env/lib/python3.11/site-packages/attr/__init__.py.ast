Module(body=[Expr(value=Constant(value='\nClasses Without Boilerplate\n')), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(names=[alias(name='converters'), alias(name='exceptions'), alias(name='filters'), alias(name='setters'), alias(name='validators')], level=1), ImportFrom(module='_cmp', names=[alias(name='cmp_using')], level=1), ImportFrom(module='_config', names=[alias(name='get_run_validators'), alias(name='set_run_validators')], level=1), ImportFrom(module='_funcs', names=[alias(name='asdict'), alias(name='assoc'), alias(name='astuple'), alias(name='evolve'), alias(name='has'), alias(name='resolve_types')], level=1), ImportFrom(module='_make', names=[alias(name='NOTHING'), alias(name='Attribute'), alias(name='Factory'), alias(name='attrib'), alias(name='attrs'), alias(name='fields'), alias(name='fields_dict'), alias(name='make_class'), alias(name='validate')], level=1), ImportFrom(module='_next_gen', names=[alias(name='define'), alias(name='field'), alias(name='frozen'), alias(name='mutable')], level=1), ImportFrom(module='_version_info', names=[alias(name='VersionInfo')], level=1), Assign(targets=[Name(id='s', ctx=Store()), Name(id='attributes', ctx=Store())], value=Name(id='attrs', ctx=Load())), Assign(targets=[Name(id='ib', ctx=Store()), Name(id='attr', ctx=Store())], value=Name(id='attrib', ctx=Load())), Assign(targets=[Name(id='dataclass', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[keyword(arg='auto_attribs', value=Constant(value=True))])), ClassDef(name='AttrsInstance', bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Attribute'), Constant(value='AttrsInstance'), Constant(value='Factory'), Constant(value='NOTHING'), Constant(value='asdict'), Constant(value='assoc'), Constant(value='astuple'), Constant(value='attr'), Constant(value='attrib'), Constant(value='attributes'), Constant(value='attrs'), Constant(value='cmp_using'), Constant(value='converters'), Constant(value='define'), Constant(value='evolve'), Constant(value='exceptions'), Constant(value='field'), Constant(value='fields'), Constant(value='fields_dict'), Constant(value='filters'), Constant(value='frozen'), Constant(value='get_run_validators'), Constant(value='has'), Constant(value='ib'), Constant(value='make_class'), Constant(value='mutable'), Constant(value='resolve_types'), Constant(value='s'), Constant(value='set_run_validators'), Constant(value='setters'), Constant(value='validate'), Constant(value='validators')], ctx=Load())), FunctionDef(name='_make_getattr', args=arguments(posonlyargs=[], args=[arg(arg='mod_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a metadata proxy for packaging information that uses *mod_name* in\n    its warnings and errors.\n    ')), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dunder_to_metadata', ctx=Store())], value=Dict(keys=[Constant(value='__title__'), Constant(value='__copyright__'), Constant(value='__version__'), Constant(value='__version_info__'), Constant(value='__description__'), Constant(value='__uri__'), Constant(value='__url__'), Constant(value='__author__'), Constant(value='__email__'), Constant(value='__license__')], values=[Constant(value='Name'), Constant(value=''), Constant(value='version'), Constant(value='version'), Constant(value='summary'), Constant(value=''), Constant(value=''), Constant(value=''), Constant(value=''), Constant(value='license')])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='dunder_to_metadata', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module '), FormattedValue(value=Name(id='mod_name', ctx=Load()), conversion=-1), Constant(value=' has no attribute '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='importlib_metadata', names=[alias(name='metadata')], level=0)], orelse=[ImportFrom(module='importlib.metadata', names=[alias(name='metadata')], level=0)]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__version_info__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Accessing '), FormattedValue(value=Name(id='mod_name', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=" is deprecated and will be removed in a future release. Use importlib.metadata directly to query for attrs's packaging metadata.")]), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[]), Assign(targets=[Name(id='meta', ctx=Store())], value=Call(func=Name(id='metadata', ctx=Load()), args=[Constant(value='attrs')], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__license__')]), body=[Return(value=Constant(value='MIT'))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__copyright__')]), body=[Return(value=Constant(value='Copyright (c) 2015 Hynek Schlawack'))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='__uri__'), Constant(value='__url__')], ctx=Load())]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='meta', ctx=Load()), slice=Constant(value='Project-URL'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__version_info__')]), body=[Return(value=Call(func=Attribute(value=Name(id='VersionInfo', ctx=Load()), attr='_from_version_string', ctx=Load()), args=[Subscript(value=Name(id='meta', ctx=Load()), slice=Constant(value='version'), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__author__')]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='meta', ctx=Load()), slice=Constant(value='Author-email'), ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__email__')]), body=[Return(value=Subscript(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='meta', ctx=Load()), slice=Constant(value='Author-email'), ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='<'), Constant(value=1)], keywords=[]), slice=Constant(value=1), ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[])])])])])]), Return(value=Subscript(value=Name(id='meta', ctx=Load()), slice=Subscript(value=Name(id='dunder_to_metadata', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Name(id='__getattr__', ctx=Load()))], decorator_list=[], returns=Name(id='Callable', ctx=Load())), Assign(targets=[Name(id='__getattr__', ctx=Store())], value=Call(func=Name(id='_make_getattr', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))], type_ignores=[])