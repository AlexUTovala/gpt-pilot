Module(body=[ImportFrom(module='functools', names=[alias(name='total_ordering')], level=0), ImportFrom(module='_funcs', names=[alias(name='astuple')], level=1), ImportFrom(module='_make', names=[alias(name='attrib'), alias(name='attrs')], level=1), ClassDef(name='VersionInfo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A version object that can be compared to tuple of length 1--4:\n\n    >>> attr.VersionInfo(19, 1, 0, "final")  <= (19, 2)\n    True\n    >>> attr.VersionInfo(19, 1, 0, "final") < (19, 1, 1)\n    True\n    >>> vi = attr.VersionInfo(19, 2, 0, "final")\n    >>> vi < (19, 1, 1)\n    False\n    >>> vi < (19,)\n    False\n    >>> vi == (19, 2,)\n    True\n    >>> vi == (19, 2, 1)\n    False\n\n    .. versionadded:: 19.2\n    ')), Assign(targets=[Name(id='year', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load()))])), Assign(targets=[Name(id='minor', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load()))])), Assign(targets=[Name(id='micro', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load()))])), Assign(targets=[Name(id='releaselevel', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[keyword(arg='type', value=Name(id='str', ctx=Load()))])), FunctionDef(name='_from_version_string', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse *s* and return a _VersionInfo.\n        ')), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='final')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='year', value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), keyword(arg='minor', value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), keyword(arg='micro', value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), keyword(arg='releaselevel', value=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=3), ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_ensure_tuple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Ensure *other* is a tuple of a valid length.\n\n        Returns a possibly transformed *other* and ourselves as a tuple of\n        the same length as *other*.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Assign(targets=[Name(id='other', ctx=Store())], value=Call(func=Name(id='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=1), ops=[LtE(), LtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), Constant(value=4)])), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Call(func=Name(id='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), ctx=Load()), Name(id='other', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='us', ctx=Store()), Name(id='them', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Return(value=Name(id='NotImplemented', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Compare(left=Name(id='us', ctx=Load()), ops=[Eq()], comparators=[Name(id='them', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='us', ctx=Store()), Name(id='them', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Return(value=Name(id='NotImplemented', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Compare(left=Name(id='us', ctx=Load()), ops=[Lt()], comparators=[Name(id='them', ctx=Load())]))], decorator_list=[])], decorator_list=[Name(id='total_ordering', ctx=Load()), Call(func=Name(id='attrs', ctx=Load()), args=[], keywords=[keyword(arg='eq', value=Constant(value=False)), keyword(arg='order', value=Constant(value=False)), keyword(arg='slots', value=Constant(value=True)), keyword(arg='frozen', value=Constant(value=True))])])], type_ignores=[])