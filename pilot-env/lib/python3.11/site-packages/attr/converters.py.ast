Module(body=[Expr(value=Constant(value='\nCommonly useful converters.\n')), Import(names=[alias(name='typing')]), ImportFrom(module='_compat', names=[alias(name='_AnnotationExtractor')], level=1), ImportFrom(module='_make', names=[alias(name='NOTHING'), alias(name='Factory'), alias(name='pipe')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='default_if_none'), Constant(value='optional'), Constant(value='pipe'), Constant(value='to_bool')], ctx=Load())), FunctionDef(name='optional', args=arguments(posonlyargs=[], args=[arg(arg='converter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    A converter that allows an attribute to be optional. An optional attribute\n    is one which can be set to ``None``.\n\n    Type annotations will be inferred from the wrapped converter's, if it\n    has any.\n\n    :param callable converter: the converter that is used for non-``None``\n        values.\n\n    .. versionadded:: 17.1.0\n    ")), FunctionDef(name='optional_converter', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='xtr', ctx=Store())], value=Call(func=Name(id='_AnnotationExtractor', ctx=Load()), args=[Name(id='converter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='xtr', ctx=Load()), attr='get_first_param_type', ctx=Load()), args=[], keywords=[])), If(test=Name(id='t', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='optional_converter', ctx=Load()), attr='__annotations__', ctx=Load()), slice=Constant(value='val'), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='t', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='rt', ctx=Store())], value=Call(func=Attribute(value=Name(id='xtr', ctx=Load()), attr='get_return_type', ctx=Load()), args=[], keywords=[])), If(test=Name(id='rt', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='optional_converter', ctx=Load()), attr='__annotations__', ctx=Load()), slice=Constant(value='return'), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='rt', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='optional_converter', ctx=Load()))], decorator_list=[]), FunctionDef(name='default_if_none', args=arguments(posonlyargs=[], args=[arg(arg='default'), arg(arg='factory')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NOTHING', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='\n    A converter that allows to replace ``None`` values by *default* or the\n    result of *factory*.\n\n    :param default: Value to be used if ``None`` is passed. Passing an instance\n       of `attrs.Factory` is supported, however the ``takes_self`` option\n       is *not*.\n    :param callable factory: A callable that takes no parameters whose result\n       is used if ``None`` is passed.\n\n    :raises TypeError: If **neither** *default* or *factory* is passed.\n    :raises TypeError: If **both** *default* and *factory* are passed.\n    :raises ValueError: If an instance of `attrs.Factory` is passed with\n       ``takes_self=True``.\n\n    .. versionadded:: 18.2.0\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Name(id='NOTHING', ctx=Load())]), Compare(left=Name(id='factory', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Must pass either `default` or `factory`.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTHING', ctx=Load())]), Compare(left=Name(id='factory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Must pass either `default` or `factory` but not both.')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='factory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Name(id='Factory', ctx=Load()), args=[Name(id='factory', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default', ctx=Load()), Name(id='Factory', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='default', ctx=Load()), attr='takes_self', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='`takes_self` is not supported by default_if_none.')], keywords=[]))], orelse=[]), FunctionDef(name='default_if_none_converter', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='val', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='default', ctx=Load()), attr='factory', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], orelse=[FunctionDef(name='default_if_none_converter', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='val', ctx=Load()))], orelse=[]), Return(value=Name(id='default', ctx=Load()))], decorator_list=[])]), Return(value=Name(id='default_if_none_converter', ctx=Load()))], decorator_list=[]), FunctionDef(name='to_bool', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert "boolean" strings (e.g., from env. vars.) to real booleans.\n\n    Values mapping to :code:`True`:\n\n    - :code:`True`\n    - :code:`"true"` / :code:`"t"`\n    - :code:`"yes"` / :code:`"y"`\n    - :code:`"on"`\n    - :code:`"1"`\n    - :code:`1`\n\n    Values mapping to :code:`False`:\n\n    - :code:`False`\n    - :code:`"false"` / :code:`"f"`\n    - :code:`"no"` / :code:`"n"`\n    - :code:`"off"`\n    - :code:`"0"`\n    - :code:`0`\n\n    :raises ValueError: for any other value.\n\n    .. versionadded:: 21.3.0\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='truthy', ctx=Store())], value=Set(elts=[Constant(value=True), Constant(value='true'), Constant(value='t'), Constant(value='yes'), Constant(value='y'), Constant(value='on'), Constant(value='1'), Constant(value=1)])), Assign(targets=[Name(id='falsy', ctx=Store())], value=Set(elts=[Constant(value=False), Constant(value='false'), Constant(value='f'), Constant(value='no'), Constant(value='n'), Constant(value='off'), Constant(value='0'), Constant(value=0)])), Try(body=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Name(id='truthy', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Name(id='falsy', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot convert value to bool: '), FormattedValue(value=Name(id='val', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[])], type_ignores=[])