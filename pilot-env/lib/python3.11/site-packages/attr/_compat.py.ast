Module(body=[Import(names=[alias(name='inspect')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='types')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections.abc', names=[alias(name='Mapping'), alias(name='Sequence')], level=0), ImportFrom(module='typing', names=[alias(name='_GenericAlias')], level=0), Assign(targets=[Name(id='PYPY', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='PyPy')])), Assign(targets=[Name(id='PY_3_9_PLUS', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())])), Assign(targets=[Name(id='PY310', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())])), Assign(targets=[Name(id='PY_3_12_PLUS', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())])), FunctionDef(name='just_warn', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Running interpreter doesn't sufficiently support code object introspection.  Some features like bare super() or accessing __class__ will not work with slotted classes."), Name(id='RuntimeWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], decorator_list=[]), ClassDef(name='_AnnotationExtractor', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Extract type annotations from a callable, returning None whenever there\n    is none.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='sig')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='callable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='signature', ctx=Load()), args=[Name(id='callable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_first_param_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the type annotation of the first argument if it's not empty.\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='params', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Load()), attr='parameters', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='params', ctx=Load()), Compare(left=Attribute(value=Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='annotation', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Attribute(value=Name(id='inspect', ctx=Load()), attr='Parameter', ctx=Load()), attr='empty', ctx=Load())])]), body=[Return(value=Attribute(value=Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='annotation', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_return_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the return type if it's not empty.\n        ")), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Load()), attr='return_annotation', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Attribute(value=Name(id='inspect', ctx=Load()), attr='Signature', ctx=Load()), attr='empty', ctx=Load())])]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sig', ctx=Load()), attr='return_annotation', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], decorator_list=[]), FunctionDef(name='make_set_closure_cell', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a function of two arguments (cell, value) which sets\n    the value stored in the closure cell `cell` to `value`.\n    ')), If(test=Name(id='PYPY', ctx=Load()), body=[FunctionDef(name='set_closure_cell', args=arguments(posonlyargs=[], args=[arg(arg='cell'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cell', ctx=Load()), attr='__setstate__', ctx=Load()), args=[Tuple(elts=[Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='set_closure_cell', ctx=Load()))], orelse=[]), Try(body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[FunctionDef(name='set_closure_cell', args=arguments(posonlyargs=[], args=[arg(arg='cell'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cell', ctx=Load()), attr='cell_contents', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[])], orelse=[FunctionDef(name='set_first_cellvar_to', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Name(id='value', ctx=Load())), Return(), FunctionDef(name='force_x_to_be_a_cell', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='co', ctx=Store())], value=Attribute(value=Name(id='set_first_cellvar_to', ctx=Load()), attr='__code__', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='co', ctx=Load()), attr='co_cellvars', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Constant(value='x')], ctx=Load())]), Compare(left=Attribute(value=Name(id='co', ctx=Load()), attr='co_freevars', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[], ctx=Load())])]), body=[Raise(exc=Name(id='AssertionError', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Attribute(value=Name(id='co', ctx=Load()), attr='co_argcount', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='co', ctx=Load()), attr='co_kwonlyargcount', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='co', ctx=Load()), attr='co_nlocals', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_stacksize', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_flags', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_code', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_consts', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_names', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_varnames', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_filename', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_name', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_firstlineno', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_lnotab', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_cellvars', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_freevars', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='set_first_freevar_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='CodeType', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), FunctionDef(name='set_closure_cell', args=arguments(posonlyargs=[], args=[arg(arg='cell'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='setter', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='FunctionType', ctx=Load()), args=[Name(id='set_first_freevar_code', ctx=Load()), Dict(keys=[], values=[]), Constant(value='setter'), Tuple(elts=[], ctx=Load()), Tuple(elts=[Name(id='cell', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[])]), FunctionDef(name='make_func_with_cell', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=None)), FunctionDef(name='func', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[]), Return(value=Name(id='func', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='cell', ctx=Store())], value=Subscript(value=Attribute(value=Call(func=Name(id='make_func_with_cell', ctx=Load()), args=[], keywords=[]), attr='__closure__', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Name(id='set_closure_cell', ctx=Load()), args=[Name(id='cell', ctx=Load()), Constant(value=100)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cell', ctx=Load()), attr='cell_contents', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=100)]), body=[Raise(exc=Name(id='AssertionError', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Name(id='just_warn', ctx=Load()))])], orelse=[Return(value=Name(id='set_closure_cell', ctx=Load()))], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='set_closure_cell', ctx=Store())], value=Call(func=Name(id='make_set_closure_cell', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='repr_context', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='local', ctx=Load()), args=[], keywords=[])), FunctionDef(name='get_generic_base', args=arguments(posonlyargs=[], args=[arg(arg='cl')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If this is a generic class (A[str]), return the generic base for it.')), If(test=Compare(left=Attribute(value=Name(id='cl', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Name(id='_GenericAlias', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='cl', ctx=Load()), attr='__origin__', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])