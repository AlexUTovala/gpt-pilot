Module(body=[Import(names=[alias(name='copy')]), Import(names=[alias(name='enum')]), Import(names=[alias(name='linecache')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Import(names=[alias(name='typing')]), ImportFrom(module='operator', names=[alias(name='itemgetter')], level=0), ImportFrom(names=[alias(name='_compat'), alias(name='_config'), alias(name='setters')], level=1), ImportFrom(module='_compat', names=[alias(name='PY310'), alias(name='_AnnotationExtractor'), alias(name='get_generic_base'), alias(name='set_closure_cell')], level=1), ImportFrom(module='exceptions', names=[alias(name='DefaultAlreadySetError'), alias(name='FrozenInstanceError'), alias(name='NotAnAttrsClassError'), alias(name='UnannotatedAttributeError')], level=1), Assign(targets=[Name(id='_obj_setattr', ctx=Store())], value=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load())), Assign(targets=[Name(id='_init_converter_pat', ctx=Store())], value=Constant(value='__attr_converter_%s')), Assign(targets=[Name(id='_init_factory_pat', ctx=Store())], value=Constant(value='__attr_factory_%s')), Assign(targets=[Name(id='_classvar_prefixes', ctx=Store())], value=Tuple(elts=[Constant(value='typing.ClassVar'), Constant(value='t.ClassVar'), Constant(value='ClassVar'), Constant(value='typing_extensions.ClassVar')], ctx=Load())), Assign(targets=[Name(id='_hash_cache_field', ctx=Store())], value=Constant(value='_attrs_cached_hash')), Assign(targets=[Name(id='_empty_metadata_singleton', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MappingProxyType', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='_sentinel', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_ng_default_on_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='setters', ctx=Load()), attr='pipe', ctx=Load()), args=[Attribute(value=Name(id='setters', ctx=Load()), attr='convert', ctx=Load()), Attribute(value=Name(id='setters', ctx=Load()), attr='validate', ctx=Load())], keywords=[])), ClassDef(name='_Nothing', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Sentinel to indicate the lack of a value when ``None`` is ambiguous.\n\n    If extending attrs, you can use ``typing.Literal[NOTHING]`` to show\n    that a value may be ``NOTHING``.\n\n    .. versionchanged:: 21.1.0 ``bool(NOTHING)`` is now False.\n    .. versionchanged:: 22.2.0 ``NOTHING`` is now an ``enum.Enum`` variant.\n    ')), Assign(targets=[Name(id='NOTHING', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='auto', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='NOTHING'))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='NOTHING', ctx=Store())], value=Attribute(value=Name(id='_Nothing', ctx=Load()), attr='NOTHING', ctx=Load())), Expr(value=Constant(value='\nSentinel to indicate the lack of a value when ``None`` is ambiguous.\n')), ClassDef(name='_CacheHashWrapper', bases=[Name(id='int', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    An integer subclass that pickles / copies as None\n\n    This is used for non-slots classes with ``cache_hash=True``, to avoid\n    serializing a potentially (even likely) invalid hash value. Since ``None``\n    is the default value for uncalculated hashes, whenever this is copied,\n    the copy's value for the hash should automatically reset.\n\n    See GH #613 for more details.\n    ")), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_none_constructor'), arg(arg='_args')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[]), Tuple(elts=[], ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='_none_constructor', ctx=Load()), Name(id='_args', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='attrib', args=arguments(posonlyargs=[], args=[arg(arg='default'), arg(arg='validator'), arg(arg='repr'), arg(arg='cmp'), arg(arg='hash'), arg(arg='init'), arg(arg='metadata'), arg(arg='type'), arg(arg='converter'), arg(arg='factory'), arg(arg='kw_only'), arg(arg='eq'), arg(arg='order'), arg(arg='on_setattr'), arg(arg='alias')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NOTHING', ctx=Load()), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n    Create a new attribute on a class.\n\n    ..  warning::\n\n        Does *not* do anything unless the class is also decorated with\n        `attr.s` / `attrs.define` / et cetera!\n\n    Please consider using `attrs.field` in new code (``attr.ib`` will *never*\n    go away, though).\n\n    :param default: A value that is used if an *attrs*-generated ``__init__``\n        is used and no value is passed while instantiating or the attribute is\n        excluded using ``init=False``.\n\n        If the value is an instance of `attrs.Factory`, its callable will be\n        used to construct a new value (useful for mutable data types like lists\n        or dicts).\n\n        If a default is not set (or set manually to `attrs.NOTHING`), a value\n        *must* be supplied when instantiating; otherwise a `TypeError`\n        will be raised.\n\n        The default can also be set using decorator notation as shown below.\n\n    :type default: Any value\n\n    :param callable factory: Syntactic sugar for\n        ``default=attr.Factory(factory)``.\n\n    :param validator: `callable` that is called by *attrs*-generated\n        ``__init__`` methods after the instance has been initialized.  They\n        receive the initialized instance, the :func:`~attrs.Attribute`, and the\n        passed value.\n\n        The return value is *not* inspected so the validator has to throw an\n        exception itself.\n\n        If a `list` is passed, its items are treated as validators and must\n        all pass.\n\n        Validators can be globally disabled and re-enabled using\n        `attrs.validators.get_disabled` / `attrs.validators.set_disabled`.\n\n        The validator can also be set using decorator notation as shown below.\n\n    :type validator: `callable` or a `list` of `callable`\\ s.\n\n    :param repr: Include this attribute in the generated ``__repr__``\n        method. If ``True``, include the attribute; if ``False``, omit it. By\n        default, the built-in ``repr()`` function is used. To override how the\n        attribute value is formatted, pass a ``callable`` that takes a single\n        value and returns a string. Note that the resulting string is used\n        as-is, i.e. it will be used directly *instead* of calling ``repr()``\n        (the default).\n    :type repr: a `bool` or a `callable` to use a custom function.\n\n    :param eq: If ``True`` (default), include this attribute in the\n        generated ``__eq__`` and ``__ne__`` methods that check two instances\n        for equality. To override how the attribute value is compared,\n        pass a ``callable`` that takes a single value and returns the value\n        to be compared.\n    :type eq: a `bool` or a `callable`.\n\n    :param order: If ``True`` (default), include this attributes in the\n        generated ``__lt__``, ``__le__``, ``__gt__`` and ``__ge__`` methods.\n        To override how the attribute value is ordered,\n        pass a ``callable`` that takes a single value and returns the value\n        to be ordered.\n    :type order: a `bool` or a `callable`.\n\n    :param cmp: Setting *cmp* is equivalent to setting *eq* and *order* to the\n        same value. Must not be mixed with *eq* or *order*.\n    :type cmp: a `bool` or a `callable`.\n\n    :param Optional[bool] hash: Include this attribute in the generated\n        ``__hash__`` method.  If ``None`` (default), mirror *eq*'s value.  This\n        is the correct behavior according the Python spec.  Setting this value\n        to anything else than ``None`` is *discouraged*.\n    :param bool init: Include this attribute in the generated ``__init__``\n        method.  It is possible to set this to ``False`` and set a default\n        value.  In that case this attributed is unconditionally initialized\n        with the specified default value or factory.\n    :param callable converter: `callable` that is called by\n        *attrs*-generated ``__init__`` methods to convert attribute's value\n        to the desired format.  It is given the passed-in value, and the\n        returned value will be used as the new value of the attribute.  The\n        value is converted before being passed to the validator, if any.\n    :param metadata: An arbitrary mapping, to be used by third-party\n        components.  See `extending-metadata`.\n\n    :param type: The type of the attribute. Nowadays, the preferred method to\n        specify the type is using a variable annotation (see :pep:`526`).\n        This argument is provided for backward compatibility.\n        Regardless of the approach used, the type will be stored on\n        ``Attribute.type``.\n\n        Please note that *attrs* doesn't do anything with this metadata by\n        itself. You can use it as part of your own code or for\n        `static type checking <types>`.\n    :param kw_only: Make this attribute keyword-only in the generated\n        ``__init__`` (if ``init`` is ``False``, this parameter is ignored).\n    :param on_setattr: Allows to overwrite the *on_setattr* setting from\n        `attr.s`. If left `None`, the *on_setattr* value from `attr.s` is used.\n        Set to `attrs.setters.NO_OP` to run **no** `setattr` hooks for this\n        attribute -- regardless of the setting in `attr.s`.\n    :type on_setattr: `callable`, or a list of callables, or `None`, or\n        `attrs.setters.NO_OP`\n    :param Optional[str] alias: Override this attribute's parameter name in the\n        generated ``__init__`` method. If left `None`, default to ``name``\n        stripped of leading underscores. See `private-attributes`.\n\n    .. versionadded:: 15.2.0 *convert*\n    .. versionadded:: 16.3.0 *metadata*\n    .. versionchanged:: 17.1.0 *validator* can be a ``list`` now.\n    .. versionchanged:: 17.1.0\n       *hash* is ``None`` and therefore mirrors *eq* by default.\n    .. versionadded:: 17.3.0 *type*\n    .. deprecated:: 17.4.0 *convert*\n    .. versionadded:: 17.4.0 *converter* as a replacement for the deprecated\n       *convert* to achieve consistency with other noun-based arguments.\n    .. versionadded:: 18.1.0\n       ``factory=f`` is syntactic sugar for ``default=attr.Factory(f)``.\n    .. versionadded:: 18.2.0 *kw_only*\n    .. versionchanged:: 19.2.0 *convert* keyword argument removed.\n    .. versionchanged:: 19.2.0 *repr* also accepts a custom callable.\n    .. deprecated:: 19.2.0 *cmp* Removal on or after 2021-06-01.\n    .. versionadded:: 19.2.0 *eq* and *order*\n    .. versionadded:: 20.1.0 *on_setattr*\n    .. versionchanged:: 20.3.0 *kw_only* backported to Python 2\n    .. versionchanged:: 21.1.0\n       *eq*, *order*, and *cmp* also accept a custom callable\n    .. versionchanged:: 21.1.0 *cmp* undeprecated\n    .. versionadded:: 22.2.0 *alias*\n    ")), Assign(targets=[Tuple(elts=[Name(id='eq', ctx=Store()), Name(id='eq_key', ctx=Store()), Name(id='order', ctx=Store()), Name(id='order_key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_determine_attrib_eq_order', ctx=Load()), args=[Name(id='cmp', ctx=Load()), Name(id='eq', ctx=Load()), Name(id='order', ctx=Load()), Constant(value=True)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=True)]), Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Invalid value for hash.  Must be True, False, or None.')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='factory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTHING', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The `default` and `factory` arguments are mutually exclusive.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='factory', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='The `factory` argument must be a callable.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Name(id='Factory', ctx=Load()), args=[Name(id='factory', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='metadata', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='metadata', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='on_setattr', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='on_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='setters', ctx=Load()), attr='pipe', ctx=Load()), args=[Starred(value=Name(id='on_setattr', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='validator', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='validator', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='and_', ctx=Load()), args=[Starred(value=Name(id='validator', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='converter', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='converter', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Name(id='pipe', ctx=Load()), args=[Starred(value=Name(id='converter', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_CountingAttr', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='validator', value=Name(id='validator', ctx=Load())), keyword(arg='repr', value=Name(id='repr', ctx=Load())), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='hash', value=Name(id='hash', ctx=Load())), keyword(arg='init', value=Name(id='init', ctx=Load())), keyword(arg='converter', value=Name(id='converter', ctx=Load())), keyword(arg='metadata', value=Name(id='metadata', ctx=Load())), keyword(arg='type', value=Name(id='type', ctx=Load())), keyword(arg='kw_only', value=Name(id='kw_only', ctx=Load())), keyword(arg='eq', value=Name(id='eq', ctx=Load())), keyword(arg='eq_key', value=Name(id='eq_key', ctx=Load())), keyword(arg='order', value=Name(id='order', ctx=Load())), keyword(arg='order_key', value=Name(id='order_key', ctx=Load())), keyword(arg='on_setattr', value=Name(id='on_setattr', ctx=Load())), keyword(arg='alias', value=Name(id='alias', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_compile_and_eval', args=arguments(posonlyargs=[], args=[arg(arg='script'), arg(arg='globs'), arg(arg='locs'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='')]), body=[Expr(value=Constant(value='\n    "Exec" the script with the given global (globs) and local (locs) variables.\n    ')), Assign(targets=[Name(id='bytecode', ctx=Store())], value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='script', ctx=Load()), Name(id='filename', ctx=Load()), Constant(value='exec')], keywords=[])), Expr(value=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='bytecode', ctx=Load()), Name(id='globs', ctx=Load()), Name(id='locs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_make_method', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='script'), arg(arg='filename'), arg(arg='globs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create the method with the script given and return the method object.\n    ')), Assign(targets=[Name(id='locs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='base_filename', ctx=Store())], value=Name(id='filename', ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='linecache_tuple', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='script', ctx=Load())], keywords=[]), Constant(value=None), Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[]), Name(id='filename', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='old_val', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='linecache', ctx=Load()), attr='cache', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='linecache_tuple', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='old_val', ctx=Load()), ops=[Eq()], comparators=[Name(id='linecache_tuple', ctx=Load())]), body=[Break()], orelse=[Assign(targets=[Name(id='filename', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='base_filename', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='count', ctx=Load()), conversion=-1), Constant(value='>')])), AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), Expr(value=Call(func=Name(id='_compile_and_eval', ctx=Load()), args=[Name(id='script', ctx=Load()), Name(id='globs', ctx=Load()), Name(id='locs', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='locs', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_attr_tuple_class', args=arguments(posonlyargs=[], args=[arg(arg='cls_name'), arg(arg='attr_names')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a tuple subclass to hold `Attribute`s for an `attrs` class.\n\n    The subclass is a bare tuple with properties for names.\n\n    class MyClassAttributes(tuple):\n        __slots__ = ()\n        x = property(itemgetter(0))\n    ')), Assign(targets=[Name(id='attr_class_name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='cls_name', ctx=Load()), conversion=-1), Constant(value='Attributes')])), Assign(targets=[Name(id='attr_class_template', ctx=Store())], value=List(elts=[JoinedStr(values=[Constant(value='class '), FormattedValue(value=Name(id='attr_class_name', ctx=Load()), conversion=-1), Constant(value='(tuple):')]), Constant(value='    __slots__ = ()')], ctx=Load())), If(test=Name(id='attr_names', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='attr_name', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='attr_names', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='attr_class_template', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='    '), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value=' = _attrs_property(_attrs_itemgetter('), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), Constant(value='))')])], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='attr_class_template', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='    pass')], keywords=[]))]), Assign(targets=[Name(id='globs', ctx=Store())], value=Dict(keys=[Constant(value='_attrs_itemgetter'), Constant(value='_attrs_property')], values=[Name(id='itemgetter', ctx=Load()), Name(id='property', ctx=Load())])), Expr(value=Call(func=Name(id='_compile_and_eval', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='attr_class_template', ctx=Load())], keywords=[]), Name(id='globs', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='globs', ctx=Load()), slice=Name(id='attr_class_name', ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_Attributes', ctx=Store())], value=Call(func=Name(id='_make_attr_tuple_class', ctx=Load()), args=[Constant(value='_Attributes'), List(elts=[Constant(value='attrs'), Constant(value='base_attrs'), Constant(value='base_attrs_map')], ctx=Load())], keywords=[])), FunctionDef(name='_is_class_var', args=arguments(posonlyargs=[], args=[arg(arg='annot')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check whether *annot* is a typing.ClassVar.\n\n    The string comparison hack is used to avoid evaluating all string\n    annotations which would put attrs-based classes at a performance\n    disadvantage compared to plain old classes.\n    ')), Assign(targets=[Name(id='annot', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='annot', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='annot', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value="'"), Constant(value='"')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='annot', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value="'"), Constant(value='"')], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='annot', ctx=Store())], value=Subscript(value=Name(id='annot', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='annot', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='_classvar_prefixes', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_has_own_attribute', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrib_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Check whether *cls* defines *attrib_name* (and doesn't just inherit it).\n    ")), Assign(targets=[Name(id='attr', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attrib_name', ctx=Load()), Name(id='_sentinel', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[Is()], comparators=[Name(id='_sentinel', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), For(target=Name(id='base_cls', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base_cls', ctx=Load()), Name(id='attrib_name', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[Is()], comparators=[Name(id='a', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_get_annotations', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get annotations for *cls*.\n    ')), If(test=Call(func=Name(id='_has_own_attribute', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__annotations__')], keywords=[]), body=[Return(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__annotations__', ctx=Load()))], orelse=[]), Return(value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='_collect_base_attrs', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='taken_attr_names')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Collect attr.ibs from base classes of *cls*, except *taken_attr_names*.\n    ')), Assign(targets=[Name(id='base_attrs', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='base_attr_map', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='base_cls', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), body=[For(target=Name(id='a', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base_cls', ctx=Load()), Constant(value='__attrs_attrs__'), List(elts=[], ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='a', ctx=Load()), attr='inherited', ctx=Load()), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='taken_attr_names', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='inherited', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='base_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='base_attr_map', ctx=Load()), slice=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='base_cls', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='filtered', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='a', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='base_attrs', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='a', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='filtered', ctx=Load()), Name(id='base_attr_map', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_collect_base_attrs_broken', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='taken_attr_names')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Collect attr.ibs from base classes of *cls*, except *taken_attr_names*.\n\n    N.B. *taken_attr_names* will be mutated.\n\n    Adhere to the old incorrect behavior.\n\n    Notably it collects from the front and considers inherited attributes which\n    leads to the buggy behavior reported in #428.\n    ')), Assign(targets=[Name(id='base_attrs', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='base_attr_map', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='base_cls', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[For(target=Name(id='a', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base_cls', ctx=Load()), Constant(value='__attrs_attrs__'), List(elts=[], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='taken_attr_names', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='inherited', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='taken_attr_names', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='base_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='base_attr_map', ctx=Load()), slice=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='base_cls', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='base_attrs', ctx=Load()), Name(id='base_attr_map', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_transform_attrs', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='these'), arg(arg='auto_attribs'), arg(arg='kw_only'), arg(arg='collect_by_mro'), arg(arg='field_transformer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Transform all `_CountingAttr`s on a class into `Attribute`s.\n\n    If *these* is passed, use that and don't look for them on the class.\n\n    *collect_by_mro* is True, collect them in the correct MRO order, otherwise\n    use the old -- incorrect -- order.  See #428.\n\n    Return an `_Attributes`.\n    ")), Assign(targets=[Name(id='cd', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())), Assign(targets=[Name(id='anns', ctx=Store())], value=Call(func=Name(id='_get_annotations', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='these', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ca_list', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='ca', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='ca', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='these', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Name(id='auto_attribs', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='ca_names', ctx=Store())], value=SetComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='attr', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cd', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='attr', ctx=Load()), Name(id='_CountingAttr', ctx=Load())], keywords=[])], is_async=0)])), Assign(targets=[Name(id='ca_list', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='annot_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='attr_name', ctx=Store()), Name(id='type', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='anns', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='_is_class_var', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='annot_names', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='attr_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='cd', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='NOTHING', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='_CountingAttr', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='a', ctx=Load()), ops=[Is()], comparators=[Name(id='NOTHING', ctx=Load())]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Name(id='a', ctx=Load()))]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ca_list', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='attr_name', ctx=Load()), Name(id='a', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='unannotated', ctx=Store())], value=BinOp(left=Name(id='ca_names', ctx=Load()), op=Sub(), right=Name(id='annot_names', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='unannotated', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='UnannotatedAttributeError', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='The following `attr.ib`s lack a type annotation: '), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='unannotated', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Call(func=Attribute(value=Name(id='cd', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), attr='counter', ctx=Load())))])], keywords=[])), op=Add(), right=Constant(value='.'))], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='ca_list', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='attr', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='attr', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cd', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='attr', ctx=Load()), Name(id='_CountingAttr', ctx=Load())], keywords=[])], is_async=0)])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Subscript(value=Name(id='e', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='counter', ctx=Load())))]))])]), Assign(targets=[Name(id='own_attrs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='Attribute', ctx=Load()), attr='from_counting_attr', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='attr_name', ctx=Load())), keyword(arg='ca', value=Name(id='ca', ctx=Load())), keyword(arg='type', value=Call(func=Attribute(value=Name(id='anns', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attr_name', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Tuple(elts=[Name(id='attr_name', ctx=Store()), Name(id='ca', ctx=Store())], ctx=Store()), iter=Name(id='ca_list', ctx=Load()), ifs=[], is_async=0)])), If(test=Name(id='collect_by_mro', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='base_attrs', ctx=Store()), Name(id='base_attr_map', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_collect_base_attrs', ctx=Load()), args=[Name(id='cls', ctx=Load()), SetComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='own_attrs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='base_attrs', ctx=Store()), Name(id='base_attr_map', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_collect_base_attrs_broken', ctx=Load()), args=[Name(id='cls', ctx=Load()), SetComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='own_attrs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), If(test=Name(id='kw_only', ctx=Load()), body=[Assign(targets=[Name(id='own_attrs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='kw_only', value=Constant(value=True))]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='own_attrs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='base_attrs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='kw_only', value=Constant(value=True))]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='base_attrs', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=BinOp(left=Name(id='base_attrs', ctx=Load()), op=Add(), right=Name(id='own_attrs', ctx=Load()))), Assign(targets=[Name(id='had_default', ctx=Store())], value=Constant(value=False)), For(target=Name(id='a', ctx=Store()), iter=GeneratorExp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)]), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='kw_only', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])])], is_async=0)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='had_default', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), ops=[Is()], comparators=[Name(id='NOTHING', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No mandatory attributes allowed after an attribute with a default value or factory.  Attribute in question: '), FormattedValue(value=Name(id='a', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='had_default', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTHING', ctx=Load())])]), body=[Assign(targets=[Name(id='had_default', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='field_transformer', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='field_transformer', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attrs', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=ListComp(elt=IfExp(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='a', ctx=Load()), attr='alias', ctx=Load())), body=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Call(func=Name(id='_default_init_alias_for', ctx=Load()), args=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], keywords=[]))]), orelse=Name(id='a', ctx=Load())), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='attr_names', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='AttrsClass', ctx=Store())], value=Call(func=Name(id='_make_attr_tuple_class', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), Name(id='attr_names', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_Attributes', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='AttrsClass', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[]), Name(id='base_attrs', ctx=Load()), Name(id='base_attr_map', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_frozen_setattrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Attached to frozen classes as __setattr__.\n    ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='BaseException', ctx=Load())], keywords=[]), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='__cause__'), Constant(value='__context__'), Constant(value='__traceback__')], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='BaseException', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Return()], orelse=[]), Raise(exc=Call(func=Name(id='FrozenInstanceError', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_frozen_delattrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Attached to frozen classes as __delattr__.\n    ')), Raise(exc=Call(func=Name(id='FrozenInstanceError', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='_ClassBuilder', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Iteratively build *one* class.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_attr_names'), Constant(value='_attrs'), Constant(value='_base_attr_map'), Constant(value='_base_names'), Constant(value='_cache_hash'), Constant(value='_cls'), Constant(value='_cls_dict'), Constant(value='_delete_attribs'), Constant(value='_frozen'), Constant(value='_has_pre_init'), Constant(value='_has_post_init'), Constant(value='_is_exc'), Constant(value='_on_setattr'), Constant(value='_slots'), Constant(value='_weakref_slot'), Constant(value='_wrote_own_setattr'), Constant(value='_has_custom_setattr')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cls'), arg(arg='these'), arg(arg='slots'), arg(arg='frozen'), arg(arg='weakref_slot'), arg(arg='getstate_setstate'), arg(arg='auto_attribs'), arg(arg='kw_only'), arg(arg='cache_hash'), arg(arg='is_exc'), arg(arg='collect_by_mro'), arg(arg='on_setattr'), arg(arg='has_custom_setattr'), arg(arg='field_transformer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='attrs', ctx=Store()), Name(id='base_attrs', ctx=Store()), Name(id='base_map', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_transform_attrs', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='these', ctx=Load()), Name(id='auto_attribs', ctx=Load()), Name(id='kw_only', ctx=Load()), Name(id='collect_by_mro', ctx=Load()), Name(id='field_transformer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Store())], value=Name(id='cls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Store())], value=IfExp(test=Name(id='slots', ctx=Load()), body=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[]), orelse=Dict(keys=[], values=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Store())], value=Name(id='attrs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_names', ctx=Store())], value=SetComp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='base_attrs', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_attr_map', ctx=Store())], value=Name(id='base_map', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_attr_names', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_slots', ctx=Store())], value=Name(id='slots', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_frozen', ctx=Store())], value=Name(id='frozen', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_weakref_slot', ctx=Store())], value=Name(id='weakref_slot', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Store())], value=Name(id='cache_hash', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_pre_init', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__attrs_pre_init__'), Constant(value=False)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_post_init', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__attrs_post_init__'), Constant(value=False)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_delete_attribs', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='these', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_exc', ctx=Store())], value=Name(id='is_exc', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_on_setattr', ctx=Store())], value=Name(id='on_setattr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_custom_setattr', ctx=Store())], value=Name(id='has_custom_setattr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrote_own_setattr', ctx=Store())], value=Constant(value=False)), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__attrs_attrs__'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load())), If(test=Name(id='frozen', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__setattr__'), ctx=Store())], value=Name(id='_frozen_setattrs', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__delattr__'), ctx=Store())], value=Name(id='_frozen_delattrs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrote_own_setattr', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='on_setattr', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='_ng_default_on_setattr', ctx=Load()), Attribute(value=Name(id='setters', ctx=Load()), attr='validate', ctx=Load()), Attribute(value=Name(id='setters', ctx=Load()), attr='convert', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='has_validator', ctx=Store()), Name(id='has_converter', ctx=Store())], value=Constant(value=False)), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='validator', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='has_validator', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='has_converter', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='has_validator', ctx=Load()), Name(id='has_converter', ctx=Load())]), body=[Break()], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='on_setattr', ctx=Load()), ops=[Eq()], comparators=[Name(id='_ng_default_on_setattr', ctx=Load())]), UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='has_validator', ctx=Load()), Name(id='has_converter', ctx=Load())]))]), BoolOp(op=And(), values=[Compare(left=Name(id='on_setattr', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='validate', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='has_validator', ctx=Load()))]), BoolOp(op=And(), values=[Compare(left=Name(id='on_setattr', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='convert', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='has_converter', ctx=Load()))])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_on_setattr', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[])]), If(test=Name(id='getstate_setstate', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__getstate__'), ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__setstate__'), ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_getstate_setstate', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<_ClassBuilder(cls='), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=')>')]))], decorator_list=[]), If(test=Name(id='PY310', ctx=Load()), body=[Import(names=[alias(name='abc')]), FunctionDef(name='build_class', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Finalize class based on the accumulated configuration.\n\n            Builder cannot be used after calling this method.\n            ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_slots', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_slots_class', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='abc', ctx=Load()), attr='update_abstractmethods', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_patch_original_class', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], orelse=[FunctionDef(name='build_class', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Finalize class based on the accumulated configuration.\n\n            Builder cannot be used after calling this method.\n            ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_slots', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_slots_class', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_patch_original_class', ctx=Load()), args=[], keywords=[]))], decorator_list=[])]), FunctionDef(name='_patch_original_class', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Apply accumulated methods and return the class.\n        ')), Assign(targets=[Name(id='cls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load())), Assign(targets=[Name(id='base_names', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_base_names', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_delete_attribs', ctx=Load()), body=[For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_attr_names', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='base_names', ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='name', ctx=Load()), Name(id='_sentinel', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Name(id='_sentinel', ctx=Load())])]), body=[Try(body=[Expr(value=Call(func=Name(id='delattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_wrote_own_setattr', ctx=Load())), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__attrs_own_setattr__'), Constant(value=False)], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__attrs_own_setattr__', ctx=Store())], value=Constant(value=False)), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_has_custom_setattr', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__setattr__', ctx=Store())], value=Name(id='_obj_setattr', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='_create_slots_class', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Build and return a new class with a `__slots__` attribute.\n        ')), Assign(targets=[Name(id='cd', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[BinOp(left=Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_attr_names', ctx=Load())], keywords=[]), op=Add(), right=Tuple(elts=[Constant(value='__dict__'), Constant(value='__weakref__')], ctx=Load()))])], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_wrote_own_setattr', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__attrs_own_setattr__'), ctx=Store())], value=Constant(value=False)), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_has_custom_setattr', ctx=Load())), body=[For(target=Name(id='base_cls', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__bases__', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='base_cls', ctx=Load()), attr='__dict__', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__attrs_own_setattr__'), Constant(value=False)], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__setattr__'), ctx=Store())], value=Name(id='_obj_setattr', ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='existing_slots', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='weakref_inherited', ctx=Store())], value=Constant(value=False)), For(target=Name(id='base_cls', ctx=Store()), iter=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__mro__', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='base_cls', ctx=Load()), attr='__dict__', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__weakref__'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='weakref_inherited', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='existing_slots', ctx=Load()), attr='update', ctx=Load()), args=[DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base_cls', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base_cls', ctx=Load()), Constant(value='__slots__'), List(elts=[], ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='base_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_names', ctx=Load())], keywords=[])), Assign(targets=[Name(id='names', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attr_names', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_weakref_slot', ctx=Load()), Compare(left=Constant(value='__weakref__'), ops=[NotIn()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Constant(value='__slots__'), Tuple(elts=[], ctx=Load())], keywords=[])]), Compare(left=Constant(value='__weakref__'), ops=[NotIn()], comparators=[Name(id='names', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='weakref_inherited', ctx=Load()))]), body=[AugAssign(target=Name(id='names', ctx=Store()), op=Add(), value=Tuple(elts=[Constant(value='__weakref__')], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='slot_names', ctx=Store())], value=ListComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), ifs=[Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='base_names', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='reused_slots', ctx=Store())], value=DictComp(key=Name(id='slot', ctx=Load()), value=Name(id='slot_descriptor', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='slot', ctx=Store()), Name(id='slot_descriptor', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='existing_slots', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='slot', ctx=Load()), ops=[In()], comparators=[Name(id='slot_names', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='slot_names', ctx=Store())], value=ListComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='slot_names', ctx=Load()), ifs=[Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='reused_slots', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='cd', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='reused_slots', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='slot_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='_hash_cache_field', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__slots__'), ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='slot_names', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__qualname__'), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__qualname__', ctx=Load())), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load())], keywords=[]), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__bases__', ctx=Load()), Name(id='cd', ctx=Load())], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Tuple(elts=[Name(id='classmethod', ctx=Load()), Name(id='staticmethod', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='closure_cells', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='__func__', ctx=Load()), Constant(value='__closure__'), Constant(value=None)], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='property', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='closure_cells', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='fget', ctx=Load()), Constant(value='__closure__'), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='closure_cells', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value='__closure__'), Constant(value=None)], keywords=[]))])]), If(test=UnaryOp(op=Not(), operand=Name(id='closure_cells', ctx=Load())), body=[Continue()], orelse=[]), For(target=Name(id='cell', ctx=Store()), iter=Name(id='closure_cells', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='match', ctx=Store())], value=Compare(left=Attribute(value=Name(id='cell', ctx=Load()), attr='cell_contents', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[If(test=Name(id='match', ctx=Load()), body=[Expr(value=Call(func=Name(id='set_closure_cell', ctx=Load()), args=[Name(id='cell', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]))], orelse=[])], finalbody=[])], orelse=[])], orelse=[]), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_repr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__repr__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load()), Name(id='ns', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_str', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='repr', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__repr__')], keywords=[])), If(test=Compare(left=Name(id='repr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='__str__ can only be generated if a __repr__ exists.')], keywords=[]))], orelse=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__repr__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__str__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Name(id='__str__', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_getstate_setstate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create custom __setstate__ and __getstate__ methods.\n        ')), Assign(targets=[Name(id='state_attr_names', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='an', ctx=Load()), generators=[comprehension(target=Name(id='an', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_attr_names', ctx=Load()), ifs=[Compare(left=Name(id='an', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__weakref__')])], is_async=0)])], keywords=[])), FunctionDef(name='slots_getstate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Automatically created by attrs.\n            ')), Return(value=DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='state_attr_names', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), Assign(targets=[Name(id='hash_caching_enabled', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Load())), FunctionDef(name='slots_setstate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Automatically created by attrs.\n            ')), Assign(targets=[Name(id='__bound_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='_obj_setattr', ctx=Load()), attr='__get__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='state', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='state_attr_names', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='__bound_setattr', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='name', ctx=Store()), iter=Name(id='state_attr_names', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='state', ctx=Load())]), body=[Expr(value=Call(func=Name(id='__bound_setattr', ctx=Load()), args=[Name(id='name', ctx=Load()), Subscript(value=Name(id='state', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), If(test=Name(id='hash_caching_enabled', ctx=Load()), body=[Expr(value=Call(func=Name(id='__bound_setattr', ctx=Load()), args=[Name(id='_hash_cache_field', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[])], decorator_list=[]), Return(value=Tuple(elts=[Name(id='slots_getstate', ctx=Load()), Name(id='slots_setstate', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='make_unhashable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__hash__'), ctx=Store())], value=Constant(value=None)), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_hash', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__hash__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load())], keywords=[keyword(arg='frozen', value=Attribute(value=Name(id='self', ctx=Load()), attr='_frozen', ctx=Load())), keyword(arg='cache_hash', value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Load()))])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_init', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__init__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_init', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_has_pre_init', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_has_post_init', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_frozen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_slots', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_base_attr_map', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_is_exc', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_on_setattr', ctx=Load())], keywords=[keyword(arg='attrs_init', value=Constant(value=False))])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_match_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__match_args__'), ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load()), ifs=[BoolOp(op=And(), values=[Attribute(value=Name(id='field', ctx=Load()), attr='init', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='kw_only', ctx=Load()))])], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='add_attrs_init', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__attrs_init__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_init', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_has_pre_init', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_has_post_init', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_frozen', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_slots', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_cache_hash', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_base_attr_map', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_is_exc', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_on_setattr', ctx=Load())], keywords=[keyword(arg='attrs_init', value=Constant(value=True))])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_eq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cd', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load())), Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__eq__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_eq', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__ne__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Call(func=Name(id='_make_ne', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_order', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cd', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load())), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__lt__'), ctx=Store()), Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__le__'), ctx=Store()), Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__gt__'), ctx=Store()), Subscript(value=Name(id='cd', ctx=Load()), slice=Constant(value='__ge__'), ctx=Store())], ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Name(id='meth', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='meth', ctx=Store()), iter=Call(func=Name(id='_make_order', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_setattr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_frozen', ctx=Load()), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='sa_attrs', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='a', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_attrs', ctx=Load()), body=[Assign(targets=[Name(id='on_setattr', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='a', ctx=Load()), attr='on_setattr', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_on_setattr', ctx=Load())])), If(test=BoolOp(op=And(), values=[Name(id='on_setattr', ctx=Load()), Compare(left=Name(id='on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='NO_OP', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='sa_attrs', ctx=Load()), slice=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='a', ctx=Load()), Name(id='on_setattr', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='sa_attrs', ctx=Load())), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_has_custom_setattr', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't combine custom __setattr__ with on_setattr hooks.")], keywords=[]))], orelse=[]), FunctionDef(name='__setattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='a', ctx=Store()), Name(id='hook', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='sa_attrs', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='nval', ctx=Store())], value=Name(id='val', ctx=Load()))])], orelse=[Assign(targets=[Name(id='nval', ctx=Store())], value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='a', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], finalbody=[]), Expr(value=Call(func=Name(id='_obj_setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='nval', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__attrs_own_setattr__'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls_dict', ctx=Load()), slice=Constant(value='__setattr__'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_method_dunders', ctx=Load()), args=[Name(id='__setattr__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrote_own_setattr', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='_add_method_dunders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add __module__ and __qualname__ to a *method* if possible.\n        ')), Try(body=[Assign(targets=[Attribute(value=Name(id='method', ctx=Load()), attr='__module__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__module__', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='method', ctx=Load()), attr='__qualname__', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__qualname__', ctx=Load()), Attribute(value=Name(id='method', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='method', ctx=Load()), attr='__doc__', ctx=Store())], value=JoinedStr(values=[Constant(value='Method generated by attrs for class '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cls', ctx=Load()), attr='__qualname__', ctx=Load()), conversion=-1), Constant(value='.')]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Name(id='method', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_determine_attrs_eq_order', args=arguments(posonlyargs=[], args=[arg(arg='cmp'), arg(arg='eq'), arg(arg='order'), arg(arg='default_eq')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Validate the combination of *cmp*, *eq*, and *order*. Derive the effective\n    values of eq and order.  If *eq* is None, set it to *default_eq*.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='cmp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='any', ctx=Load()), args=[Tuple(elts=[Compare(left=Name(id='eq', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='order', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Don't mix `cmp` with `eq' and `order`.")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cmp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='cmp', ctx=Load()), Name(id='cmp', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='eq', ctx=Store())], value=Name(id='default_eq', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='order', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='order', ctx=Store())], value=Name(id='eq', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Name(id='order', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='`order` can only be True if `eq` is True too.')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='eq', ctx=Load()), Name(id='order', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_determine_attrib_eq_order', args=arguments(posonlyargs=[], args=[arg(arg='cmp'), arg(arg='eq'), arg(arg='order'), arg(arg='default_eq')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Validate the combination of *cmp*, *eq*, and *order*. Derive the effective\n    values of eq and order.  If *eq* is None, set it to *default_eq*.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='cmp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='any', ctx=Load()), args=[Tuple(elts=[Compare(left=Name(id='eq', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='order', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Don't mix `cmp` with `eq' and `order`.")], keywords=[]))], orelse=[]), FunctionDef(name='decide_callable_or_boolean', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Decide whether a key function is used.\n        ')), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='value', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=True), Name(id='value', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='key', ctx=Store())], value=Constant(value=None))]), Return(value=Tuple(elts=[Name(id='value', ctx=Load()), Name(id='key', ctx=Load())], ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='cmp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='cmp', ctx=Store()), Name(id='cmp_key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='decide_callable_or_boolean', ctx=Load()), args=[Name(id='cmp', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='cmp', ctx=Load()), Name(id='cmp_key', ctx=Load()), Name(id='cmp', ctx=Load()), Name(id='cmp_key', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='eq', ctx=Store()), Name(id='eq_key', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='default_eq', ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='eq', ctx=Store()), Name(id='eq_key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='decide_callable_or_boolean', ctx=Load()), args=[Name(id='eq', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='order', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='order', ctx=Store()), Name(id='order_key', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='eq', ctx=Load()), Name(id='eq_key', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='order', ctx=Store()), Name(id='order_key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='decide_callable_or_boolean', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Name(id='order', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='`order` can only be True if `eq` is True too.')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='eq', ctx=Load()), Name(id='eq_key', ctx=Load()), Name(id='order', ctx=Load()), Name(id='order_key', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_determine_whether_to_implement', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='flag'), arg(arg='auto_detect'), arg(arg='dunders'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="\n    Check whether we should implement a set of methods for *cls*.\n\n    *flag* is the argument passed into @attr.s like 'init', *auto_detect* the\n    same as passed into @attr.s and *dunders* is a tuple of attribute names\n    whose presence signal that the user has implemented it themselves.\n\n    Return *default* if no reason for either for or against is found.\n    ")), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='flag', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='flag', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Return(value=Name(id='flag', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='flag', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='auto_detect', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), For(target=Name(id='dunder', ctx=Store()), iter=Name(id='dunders', ctx=Load()), body=[If(test=Call(func=Name(id='_has_own_attribute', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='dunder', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='default', ctx=Load()))], decorator_list=[]), FunctionDef(name='attrs', args=arguments(posonlyargs=[], args=[arg(arg='maybe_cls'), arg(arg='these'), arg(arg='repr_ns'), arg(arg='repr'), arg(arg='cmp'), arg(arg='hash'), arg(arg='init'), arg(arg='slots'), arg(arg='frozen'), arg(arg='weakref_slot'), arg(arg='str'), arg(arg='auto_attribs'), arg(arg='kw_only'), arg(arg='cache_hash'), arg(arg='auto_exc'), arg(arg='eq'), arg(arg='order'), arg(arg='auto_detect'), arg(arg='collect_by_mro'), arg(arg='getstate_setstate'), arg(arg='on_setattr'), arg(arg='field_transformer'), arg(arg='match_args'), arg(arg='unsafe_hash')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value='\n    A class decorator that adds :term:`dunder methods` according to the\n    specified attributes using `attr.ib` or the *these* argument.\n\n    Please consider using `attrs.define` / `attrs.frozen` in new code\n    (``attr.s`` will *never* go away, though).\n\n    :param these: A dictionary of name to `attr.ib` mappings.  This is\n        useful to avoid the definition of your attributes within the class body\n        because you can\'t (e.g. if you want to add ``__repr__`` methods to\n        Django models) or don\'t want to.\n\n        If *these* is not ``None``, *attrs* will *not* search the class body\n        for attributes and will *not* remove any attributes from it.\n\n        The order is deduced from the order of the attributes inside *these*.\n\n    :type these: `dict` of `str` to `attr.ib`\n\n    :param str repr_ns: When using nested classes, there\'s no way in Python 2\n        to automatically detect that.  Therefore it\'s possible to set the\n        namespace explicitly for a more meaningful ``repr`` output.\n    :param bool auto_detect: Instead of setting the *init*, *repr*, *eq*,\n        *order*, and *hash* arguments explicitly, assume they are set to\n        ``True`` **unless any** of the involved methods for one of the\n        arguments is implemented in the *current* class (i.e. it is *not*\n        inherited from some base class).\n\n        So for example by implementing ``__eq__`` on a class yourself,\n        *attrs* will deduce ``eq=False`` and will create *neither*\n        ``__eq__`` *nor* ``__ne__`` (but Python classes come with a sensible\n        ``__ne__`` by default, so it *should* be enough to only implement\n        ``__eq__`` in most cases).\n\n        .. warning::\n\n           If you prevent *attrs* from creating the ordering methods for you\n           (``order=False``, e.g. by implementing ``__le__``), it becomes\n           *your* responsibility to make sure its ordering is sound. The best\n           way is to use the `functools.total_ordering` decorator.\n\n\n        Passing ``True`` or ``False`` to *init*, *repr*, *eq*, *order*,\n        *cmp*, or *hash* overrides whatever *auto_detect* would determine.\n\n    :param bool repr: Create a ``__repr__`` method with a human readable\n        representation of *attrs* attributes..\n    :param bool str: Create a ``__str__`` method that is identical to\n        ``__repr__``.  This is usually not necessary except for\n        `Exception`\\ s.\n    :param Optional[bool] eq: If ``True`` or ``None`` (default), add ``__eq__``\n        and ``__ne__`` methods that check two instances for equality.\n\n        They compare the instances as if they were tuples of their *attrs*\n        attributes if and only if the types of both classes are *identical*!\n    :param Optional[bool] order: If ``True``, add ``__lt__``, ``__le__``,\n        ``__gt__``, and ``__ge__`` methods that behave like *eq* above and\n        allow instances to be ordered. If ``None`` (default) mirror value of\n        *eq*.\n    :param Optional[bool] cmp: Setting *cmp* is equivalent to setting *eq*\n        and *order* to the same value. Must not be mixed with *eq* or *order*.\n    :param Optional[bool] unsafe_hash: If ``None`` (default), the ``__hash__``\n        method is generated according how *eq* and *frozen* are set.\n\n        1. If *both* are True, *attrs* will generate a ``__hash__`` for you.\n        2. If *eq* is True and *frozen* is False, ``__hash__`` will be set to\n           None, marking it unhashable (which it is).\n        3. If *eq* is False, ``__hash__`` will be left untouched meaning the\n           ``__hash__`` method of the base class will be used (if base class is\n           ``object``, this means it will fall back to id-based hashing.).\n\n        Although not recommended, you can decide for yourself and force\n        *attrs* to create one (e.g. if the class is immutable even though you\n        didn\'t freeze it programmatically) by passing ``True`` or not.  Both of\n        these cases are rather special and should be used carefully.\n\n        See our documentation on `hashing`, Python\'s documentation on\n        `object.__hash__`, and the `GitHub issue that led to the default \\\n        behavior <https://github.com/python-attrs/attrs/issues/136>`_ for more\n        details.\n    :param Optional[bool] hash: Alias for *unsafe_hash*. *unsafe_hash* takes\n        precedence.\n    :param bool init: Create a ``__init__`` method that initializes the\n        *attrs* attributes. Leading underscores are stripped for the argument\n        name. If a ``__attrs_pre_init__`` method exists on the class, it will\n        be called before the class is initialized. If a ``__attrs_post_init__``\n        method exists on the class, it will be called after the class is fully\n        initialized.\n\n        If ``init`` is ``False``, an ``__attrs_init__`` method will be\n        injected instead. This allows you to define a custom ``__init__``\n        method that can do pre-init work such as ``super().__init__()``,\n        and then call ``__attrs_init__()`` and ``__attrs_post_init__()``.\n    :param bool slots: Create a :term:`slotted class <slotted classes>` that\'s\n        more memory-efficient. Slotted classes are generally superior to the\n        default dict classes, but have some gotchas you should know about, so\n        we encourage you to read the :term:`glossary entry <slotted classes>`.\n    :param bool frozen: Make instances immutable after initialization.  If\n        someone attempts to modify a frozen instance,\n        `attrs.exceptions.FrozenInstanceError` is raised.\n\n        .. note::\n\n            1. This is achieved by installing a custom ``__setattr__`` method\n               on your class, so you can\'t implement your own.\n\n            2. True immutability is impossible in Python.\n\n            3. This *does* have a minor a runtime performance `impact\n               <how-frozen>` when initializing new instances.  In other words:\n               ``__init__`` is slightly slower with ``frozen=True``.\n\n            4. If a class is frozen, you cannot modify ``self`` in\n               ``__attrs_post_init__`` or a self-written ``__init__``. You can\n               circumvent that limitation by using\n               ``object.__setattr__(self, "attribute_name", value)``.\n\n            5. Subclasses of a frozen class are frozen too.\n\n    :param bool weakref_slot: Make instances weak-referenceable.  This has no\n        effect unless ``slots`` is also enabled.\n    :param bool auto_attribs: If ``True``, collect :pep:`526`-annotated\n        attributes from the class body.\n\n        In this case, you **must** annotate every field.  If *attrs*\n        encounters a field that is set to an `attr.ib` but lacks a type\n        annotation, an `attr.exceptions.UnannotatedAttributeError` is\n        raised.  Use ``field_name: typing.Any = attr.ib(...)`` if you don\'t\n        want to set a type.\n\n        If you assign a value to those attributes (e.g. ``x: int = 42``), that\n        value becomes the default value like if it were passed using\n        ``attr.ib(default=42)``.  Passing an instance of `attrs.Factory` also\n        works as expected in most cases (see warning below).\n\n        Attributes annotated as `typing.ClassVar`, and attributes that are\n        neither annotated nor set to an `attr.ib` are **ignored**.\n\n        .. warning::\n           For features that use the attribute name to create decorators (e.g.\n           :ref:`validators <validators>`), you still *must* assign `attr.ib`\n           to them. Otherwise Python will either not find the name or try to\n           use the default value to call e.g. ``validator`` on it.\n\n           These errors can be quite confusing and probably the most common bug\n           report on our bug tracker.\n\n    :param bool kw_only: Make all attributes keyword-only\n        in the generated ``__init__`` (if ``init`` is ``False``, this\n        parameter is ignored).\n    :param bool cache_hash: Ensure that the object\'s hash code is computed\n        only once and stored on the object.  If this is set to ``True``,\n        hashing must be either explicitly or implicitly enabled for this\n        class.  If the hash code is cached, avoid any reassignments of\n        fields involved in hash code computation or mutations of the objects\n        those fields point to after object creation.  If such changes occur,\n        the behavior of the object\'s hash code is undefined.\n    :param bool auto_exc: If the class subclasses `BaseException`\n        (which implicitly includes any subclass of any exception), the\n        following happens to behave like a well-behaved Python exceptions\n        class:\n\n        - the values for *eq*, *order*, and *hash* are ignored and the\n          instances compare and hash by the instance\'s ids (N.B. *attrs* will\n          *not* remove existing implementations of ``__hash__`` or the equality\n          methods. It just won\'t add own ones.),\n        - all attributes that are either passed into ``__init__`` or have a\n          default value are additionally available as a tuple in the ``args``\n          attribute,\n        - the value of *str* is ignored leaving ``__str__`` to base classes.\n    :param bool collect_by_mro: Setting this to `True` fixes the way *attrs*\n       collects attributes from base classes.  The default behavior is\n       incorrect in certain cases of multiple inheritance.  It should be on by\n       default but is kept off for backward-compatibility.\n\n       See issue `#428 <https://github.com/python-attrs/attrs/issues/428>`_ for\n       more details.\n\n    :param Optional[bool] getstate_setstate:\n       .. note::\n          This is usually only interesting for slotted classes and you should\n          probably just set *auto_detect* to `True`.\n\n       If `True`, ``__getstate__`` and\n       ``__setstate__`` are generated and attached to the class. This is\n       necessary for slotted classes to be pickleable. If left `None`, it\'s\n       `True` by default for slotted classes and ``False`` for dict classes.\n\n       If *auto_detect* is `True`, and *getstate_setstate* is left `None`,\n       and **either** ``__getstate__`` or ``__setstate__`` is detected directly\n       on the class (i.e. not inherited), it is set to `False` (this is usually\n       what you want).\n\n    :param on_setattr: A callable that is run whenever the user attempts to set\n        an attribute (either by assignment like ``i.x = 42`` or by using\n        `setattr` like ``setattr(i, "x", 42)``). It receives the same arguments\n        as validators: the instance, the attribute that is being modified, and\n        the new value.\n\n        If no exception is raised, the attribute is set to the return value of\n        the callable.\n\n        If a list of callables is passed, they\'re automatically wrapped in an\n        `attrs.setters.pipe`.\n    :type on_setattr: `callable`, or a list of callables, or `None`, or\n        `attrs.setters.NO_OP`\n\n    :param Optional[callable] field_transformer:\n        A function that is called with the original class object and all\n        fields right before *attrs* finalizes the class.  You can use\n        this, e.g., to automatically add converters or validators to\n        fields based on their types.  See `transform-fields` for more details.\n\n    :param bool match_args:\n        If `True` (default), set ``__match_args__`` on the class to support\n        :pep:`634` (Structural Pattern Matching). It is a tuple of all\n        non-keyword-only ``__init__`` parameter names on Python 3.10 and later.\n        Ignored on older Python versions.\n\n    .. versionadded:: 16.0.0 *slots*\n    .. versionadded:: 16.1.0 *frozen*\n    .. versionadded:: 16.3.0 *str*\n    .. versionadded:: 16.3.0 Support for ``__attrs_post_init__``.\n    .. versionchanged:: 17.1.0\n       *hash* supports ``None`` as value which is also the default now.\n    .. versionadded:: 17.3.0 *auto_attribs*\n    .. versionchanged:: 18.1.0\n       If *these* is passed, no attributes are deleted from the class body.\n    .. versionchanged:: 18.1.0 If *these* is ordered, the order is retained.\n    .. versionadded:: 18.2.0 *weakref_slot*\n    .. deprecated:: 18.2.0\n       ``__lt__``, ``__le__``, ``__gt__``, and ``__ge__`` now raise a\n       `DeprecationWarning` if the classes compared are subclasses of\n       each other. ``__eq`` and ``__ne__`` never tried to compared subclasses\n       to each other.\n    .. versionchanged:: 19.2.0\n       ``__lt__``, ``__le__``, ``__gt__``, and ``__ge__`` now do not consider\n       subclasses comparable anymore.\n    .. versionadded:: 18.2.0 *kw_only*\n    .. versionadded:: 18.2.0 *cache_hash*\n    .. versionadded:: 19.1.0 *auto_exc*\n    .. deprecated:: 19.2.0 *cmp* Removal on or after 2021-06-01.\n    .. versionadded:: 19.2.0 *eq* and *order*\n    .. versionadded:: 20.1.0 *auto_detect*\n    .. versionadded:: 20.1.0 *collect_by_mro*\n    .. versionadded:: 20.1.0 *getstate_setstate*\n    .. versionadded:: 20.1.0 *on_setattr*\n    .. versionadded:: 20.3.0 *field_transformer*\n    .. versionchanged:: 21.1.0\n       ``init=False`` injects ``__attrs_init__``\n    .. versionchanged:: 21.1.0 Support for ``__attrs_pre_init__``\n    .. versionchanged:: 21.1.0 *cmp* undeprecated\n    .. versionadded:: 21.3.0 *match_args*\n    .. versionadded:: 22.2.0\n       *unsafe_hash* as an alias for *hash* (for :pep:`681` compliance).\n    ')), Assign(targets=[Tuple(elts=[Name(id='eq_', ctx=Store()), Name(id='order_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_determine_attrs_eq_order', ctx=Load()), args=[Name(id='cmp', ctx=Load()), Name(id='eq', ctx=Load()), Name(id='order', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='unsafe_hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='hash', ctx=Store())], value=Name(id='unsafe_hash', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='on_setattr', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='on_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='setters', ctx=Load()), attr='pipe', ctx=Load()), args=[Starred(value=Name(id='on_setattr', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='wrap', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='is_frozen', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='frozen', ctx=Load()), Call(func=Name(id='_has_frozen_base_class', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='is_exc', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='auto_exc', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='BaseException', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='has_own_setattr', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='auto_detect', ctx=Load()), Call(func=Name(id='_has_own_attribute', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__setattr__')], keywords=[])])), If(test=BoolOp(op=And(), values=[Name(id='has_own_setattr', ctx=Load()), Name(id='is_frozen', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't freeze a class with a custom __setattr__.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='builder', ctx=Store())], value=Call(func=Name(id='_ClassBuilder', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='these', ctx=Load()), Name(id='slots', ctx=Load()), Name(id='is_frozen', ctx=Load()), Name(id='weakref_slot', ctx=Load()), Call(func=Name(id='_determine_whether_to_implement', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='getstate_setstate', ctx=Load()), Name(id='auto_detect', ctx=Load()), Tuple(elts=[Constant(value='__getstate__'), Constant(value='__setstate__')], ctx=Load())], keywords=[keyword(arg='default', value=Name(id='slots', ctx=Load()))]), Name(id='auto_attribs', ctx=Load()), Name(id='kw_only', ctx=Load()), Name(id='cache_hash', ctx=Load()), Name(id='is_exc', ctx=Load()), Name(id='collect_by_mro', ctx=Load()), Name(id='on_setattr', ctx=Load()), Name(id='has_own_setattr', ctx=Load()), Name(id='field_transformer', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='_determine_whether_to_implement', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='repr', ctx=Load()), Name(id='auto_detect', ctx=Load()), Tuple(elts=[Constant(value='__repr__')], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_repr', ctx=Load()), args=[Name(id='repr_ns', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='str', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_str', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='eq', ctx=Store())], value=Call(func=Name(id='_determine_whether_to_implement', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='eq_', ctx=Load()), Name(id='auto_detect', ctx=Load()), Tuple(elts=[Constant(value='__eq__'), Constant(value='__ne__')], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_exc', ctx=Load())), Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_eq', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_exc', ctx=Load())), Call(func=Name(id='_determine_whether_to_implement', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='order_', ctx=Load()), Name(id='auto_detect', ctx=Load()), Tuple(elts=[Constant(value='__lt__'), Constant(value='__le__'), Constant(value='__gt__'), Constant(value='__ge__')], ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_order', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_setattr', ctx=Load()), args=[], keywords=[])), Nonlocal(names=['hash']), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='auto_detect', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Call(func=Name(id='_has_own_attribute', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__hash__')], keywords=[])]), body=[Assign(targets=[Name(id='hash', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=True)]), Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)]), Compare(left=Name(id='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Invalid value for hash.  Must be True, False, or None.')], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), BoolOp(op=And(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), Name(id='is_exc', ctx=Load())]), body=[If(test=Name(id='cache_hash', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Invalid value for cache_hash.  To use hash caching, hashing must be either explicitly or implicitly enabled.')], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), BoolOp(op=And(), values=[Compare(left=Name(id='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='is_frozen', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_hash', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Name(id='cache_hash', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Invalid value for cache_hash.  To use hash caching, hashing must be either explicitly or implicitly enabled.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='make_unhashable', ctx=Load()), args=[], keywords=[]))])])]), If(test=Call(func=Name(id='_determine_whether_to_implement', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='init', ctx=Load()), Name(id='auto_detect', ctx=Load()), Tuple(elts=[Constant(value='__init__')], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_init', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_attrs_init', ctx=Load()), args=[], keywords=[])), If(test=Name(id='cache_hash', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Invalid value for cache_hash.  To use hash caching, init must be True.')], keywords=[]))], orelse=[])]), If(test=BoolOp(op=And(), values=[Name(id='PY310', ctx=Load()), Name(id='match_args', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='_has_own_attribute', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__match_args__')], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='add_match_args', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='builder', ctx=Load()), attr='build_class', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id='maybe_cls', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='wrap', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='wrap', ctx=Load()), args=[Name(id='maybe_cls', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='_attrs', ctx=Store())], value=Name(id='attrs', ctx=Load())), Expr(value=Constant(value='\nInternal alias so we can use it in functions that take an argument called\n*attrs*.\n')), FunctionDef(name='_has_frozen_base_class', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check whether *cls* has a frozen ancestor by looking at its\n    __setattr__.\n    ')), Return(value=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='__setattr__', ctx=Load()), ops=[Is()], comparators=[Name(id='_frozen_setattrs', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_generate_unique_filename', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='func_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a "filename" suitable for a function being generated.\n    ')), Return(value=JoinedStr(values=[Constant(value='<attrs generated '), FormattedValue(value=Name(id='func_name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__qualname__'), Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load())], keywords=[]), conversion=-1), Constant(value='>')]))], decorator_list=[]), FunctionDef(name='_make_hash', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs'), arg(arg='frozen'), arg(arg='cache_hash')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='hash', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='eq', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])])])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='tab', ctx=Store())], value=Constant(value='        ')), Assign(targets=[Name(id='unique_filename', ctx=Store())], value=Call(func=Name(id='_generate_unique_filename', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='hash')], keywords=[])), Assign(targets=[Name(id='type_hash', ctx=Store())], value=Call(func=Name(id='hash', ctx=Load()), args=[Name(id='unique_filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='globs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='hash_def', ctx=Store())], value=Constant(value='def __hash__(self')), Assign(targets=[Name(id='hash_func', ctx=Store())], value=Constant(value='hash((')), Assign(targets=[Name(id='closing_braces', ctx=Store())], value=Constant(value='))')), If(test=UnaryOp(op=Not(), operand=Name(id='cache_hash', ctx=Load())), body=[AugAssign(target=Name(id='hash_def', ctx=Store()), op=Add(), value=Constant(value='):'))], orelse=[AugAssign(target=Name(id='hash_def', ctx=Store()), op=Add(), value=Constant(value=', *')), AugAssign(target=Name(id='hash_def', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=', _cache_wrapper='), op=Add(), right=Constant(value="__import__('attr._make')._make._CacheHashWrapper):"))), Assign(targets=[Name(id='hash_func', ctx=Store())], value=BinOp(left=Constant(value='_cache_wrapper('), op=Add(), right=Name(id='hash_func', ctx=Load()))), AugAssign(target=Name(id='closing_braces', ctx=Store()), op=Add(), value=Constant(value=')'))]), Assign(targets=[Name(id='method_lines', ctx=Store())], value=List(elts=[Name(id='hash_def', ctx=Load())], ctx=Load())), FunctionDef(name='append_hash_computation_lines', args=arguments(posonlyargs=[], args=[arg(arg='prefix'), arg(arg='indent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate the code for actually computing the hash code.\n        Below this will either be returned directly or used to compute\n        a value which is then cached, depending on the value of cache_hash\n        ')), Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[BinOp(left=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='prefix', ctx=Load())), op=Add(), right=Name(id='hash_func', ctx=Load())), BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='        '), FormattedValue(value=Name(id='type_hash', ctx=Load()), conversion=-1), Constant(value=',')]))], ctx=Load())], keywords=[])), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=Attribute(value=Name(id='a', ctx=Load()), attr='eq_key', ctx=Load()), body=[Assign(targets=[Name(id='cmp_name', ctx=Store())], value=JoinedStr(values=[Constant(value='_'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_key')])), Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Name(id='cmp_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='eq_key', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='        '), FormattedValue(value=Name(id='cmp_name', ctx=Load()), conversion=-1), Constant(value='(self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='),')]))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='        self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=',')]))], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value='    ')), op=Add(), right=Name(id='closing_braces', ctx=Load()))], keywords=[]))], decorator_list=[]), If(test=Name(id='cache_hash', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='tab', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='if self.'), FormattedValue(value=Name(id='_hash_cache_field', ctx=Load()), conversion=-1), Constant(value=' is None:')]))], keywords=[])), If(test=Name(id='frozen', ctx=Load()), body=[Expr(value=Call(func=Name(id='append_hash_computation_lines', ctx=Load()), args=[JoinedStr(values=[Constant(value="object.__setattr__(self, '"), FormattedValue(value=Name(id='_hash_cache_field', ctx=Load()), conversion=-1), Constant(value="', ")]), BinOp(left=Name(id='tab', ctx=Load()), op=Mult(), right=Constant(value=2))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='tab', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Add(), right=Constant(value=')'))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='append_hash_computation_lines', ctx=Load()), args=[JoinedStr(values=[Constant(value='self.'), FormattedValue(value=Name(id='_hash_cache_field', ctx=Load()), conversion=-1), Constant(value=' = ')]), BinOp(left=Name(id='tab', ctx=Load()), op=Mult(), right=Constant(value=2))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='method_lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='tab', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='return self.'), FormattedValue(value=Name(id='_hash_cache_field', ctx=Load()), conversion=-1)]))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='append_hash_computation_lines', ctx=Load()), args=[Constant(value='return '), Name(id='tab', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='method_lines', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_make_method', ctx=Load()), args=[Constant(value='__hash__'), Name(id='script', ctx=Load()), Name(id='unique_filename', ctx=Load()), Name(id='globs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_hash', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Add a hash method to *cls*.\n    ')), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__hash__', ctx=Store())], value=Call(func=Name(id='_make_hash', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attrs', ctx=Load())], keywords=[keyword(arg='frozen', value=Constant(value=False)), keyword(arg='cache_hash', value=Constant(value=False))])), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_ne', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create __ne__ method.\n    ')), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check equality and either forward a NotImplemented or\n        return the result negated.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Name(id='NotImplemented', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())))], decorator_list=[]), Return(value=Name(id='__ne__', ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_eq', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create __eq__ method for *cls* with *attrs*.\n    ')), Assign(targets=[Name(id='attrs', ctx=Store())], value=ListComp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[Attribute(value=Name(id='a', ctx=Load()), attr='eq', ctx=Load())], is_async=0)])), Assign(targets=[Name(id='unique_filename', ctx=Store())], value=Call(func=Name(id='_generate_unique_filename', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='eq')], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Constant(value='def __eq__(self, other):'), Constant(value='    if other.__class__ is not self.__class__:'), Constant(value='        return NotImplemented')], ctx=Load())), Assign(targets=[Name(id='globs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='attrs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='    return  (')], keywords=[])), Assign(targets=[Name(id='others', ctx=Store())], value=List(elts=[Constant(value='    ) == (')], ctx=Load())), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=Attribute(value=Name(id='a', ctx=Load()), attr='eq_key', ctx=Load()), body=[Assign(targets=[Name(id='cmp_name', ctx=Store())], value=JoinedStr(values=[Constant(value='_'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_key')])), Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Name(id='cmp_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='eq_key', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='        '), FormattedValue(value=Name(id='cmp_name', ctx=Load()), conversion=-1), Constant(value='(self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='),')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='others', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='        '), FormattedValue(value=Name(id='cmp_name', ctx=Load()), conversion=-1), Constant(value='(other.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='),')])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='        self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=',')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='others', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='        other.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=',')])], keywords=[]))])], orelse=[]), AugAssign(target=Name(id='lines', ctx=Store()), op=Add(), value=BinOp(left=Name(id='others', ctx=Load()), op=Add(), right=List(elts=[Constant(value='    )')], ctx=Load())))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='    return True')], keywords=[]))]), Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_make_method', ctx=Load()), args=[Constant(value='__eq__'), Name(id='script', ctx=Load()), Name(id='unique_filename', ctx=Load()), Name(id='globs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_make_order', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create ordering methods for *cls* with *attrs*.\n    ')), Assign(targets=[Name(id='attrs', ctx=Store())], value=ListComp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[Attribute(value=Name(id='a', ctx=Load()), attr='order', ctx=Load())], is_async=0)])), FunctionDef(name='attrs_to_tuple', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Save us some typing.\n        ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Name(id='key', ctx=Load()), body=Call(func=Name(id='key', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), orelse=Name(id='value', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='value', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store()), iter=GeneratorExp(elt=Tuple(elts=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Attribute(value=Name(id='a', ctx=Load()), attr='order_key', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Automatically created by attrs.\n        ')), If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[]), FunctionDef(name='__le__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Automatically created by attrs.\n        ')), If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[]), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Automatically created by attrs.\n        ')), If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[]), FunctionDef(name='__ge__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Automatically created by attrs.\n        ')), If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='attrs_to_tuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[]), Return(value=Tuple(elts=[Name(id='__lt__', ctx=Load()), Name(id='__le__', ctx=Load()), Name(id='__gt__', ctx=Load()), Name(id='__ge__', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_add_eq', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Add equality methods to *cls* with *attrs*.\n    ')), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__attrs_attrs__', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__eq__', ctx=Store())], value=Call(func=Name(id='_make_eq', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attrs', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__ne__', ctx=Store())], value=Call(func=Name(id='_make_ne', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_repr', args=arguments(posonlyargs=[], args=[arg(arg='attrs'), arg(arg='ns'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='unique_filename', ctx=Store())], value=Call(func=Name(id='_generate_unique_filename', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='repr')], keywords=[])), Assign(targets=[Name(id='attr_names_with_reprs', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), IfExp(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='repr', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=Name(id='repr', ctx=Load()), orelse=Attribute(value=Name(id='a', ctx=Load()), attr='repr', ctx=Load())), Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='repr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='globs', ctx=Store())], value=DictComp(key=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='_repr')), value=Name(id='r', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='r', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='attr_names_with_reprs', ctx=Load()), ifs=[Compare(left=Name(id='r', ctx=Load()), ops=[NotEq()], comparators=[Name(id='repr', ctx=Load())])], is_async=0)])), Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Constant(value='_compat'), ctx=Store())], value=Name(id='_compat', ctx=Load())), Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Constant(value='AttributeError'), ctx=Store())], value=Name(id='AttributeError', ctx=Load())), Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Constant(value='NOTHING'), ctx=Store())], value=Name(id='NOTHING', ctx=Load())), Assign(targets=[Name(id='attribute_fragments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='r', ctx=Store()), Name(id='i', ctx=Store())], ctx=Store()), iter=Name(id='attr_names_with_reprs', ctx=Load()), body=[Assign(targets=[Name(id='accessor', ctx=Store())], value=IfExp(test=Name(id='i', ctx=Load()), body=BinOp(left=Constant(value='self.'), op=Add(), right=Name(id='name', ctx=Load())), orelse=BinOp(left=BinOp(left=Constant(value='getattr(self, "'), op=Add(), right=Name(id='name', ctx=Load())), op=Add(), right=Constant(value='", NOTHING)')))), Assign(targets=[Name(id='fragment', ctx=Store())], value=IfExp(test=Compare(left=Name(id='r', ctx=Load()), ops=[Eq()], comparators=[Name(id='repr', ctx=Load())]), body=BinOp(left=Constant(value='%s={%s!r}'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='accessor', ctx=Load())], ctx=Load())), orelse=BinOp(left=Constant(value='%s={%s_repr(%s)}'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='name', ctx=Load()), Name(id='accessor', ctx=Load())], ctx=Load())))), Expr(value=Call(func=Attribute(value=Name(id='attribute_fragments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fragment', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='repr_fragment', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='attribute_fragments', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ns', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cls_name_fragment', ctx=Store())], value=Constant(value='{self.__class__.__qualname__.rsplit(">.", 1)[-1]}'))], orelse=[Assign(targets=[Name(id='cls_name_fragment', ctx=Store())], value=BinOp(left=Name(id='ns', ctx=Load()), op=Add(), right=Constant(value='.{self.__class__.__name__}')))]), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Constant(value='def __repr__(self):'), Constant(value='  try:'), Constant(value='    already_repring = _compat.repr_context.already_repring'), Constant(value='  except AttributeError:'), Constant(value='    already_repring = {id(self),}'), Constant(value='    _compat.repr_context.already_repring = already_repring'), Constant(value='  else:'), Constant(value='    if id(self) in already_repring:'), Constant(value="      return '...'"), Constant(value='    else:'), Constant(value='      already_repring.add(id(self))'), Constant(value='  try:'), JoinedStr(values=[Constant(value="    return f'"), FormattedValue(value=Name(id='cls_name_fragment', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Name(id='repr_fragment', ctx=Load()), conversion=-1), Constant(value=")'")]), Constant(value='  finally:'), Constant(value='    already_repring.remove(id(self))')], ctx=Load())), Return(value=Call(func=Name(id='_make_method', ctx=Load()), args=[Constant(value='__repr__'), Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), Name(id='unique_filename', ctx=Load())], keywords=[keyword(arg='globs', value=Name(id='globs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_add_repr', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='ns'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Add a repr method to *cls*.\n    ')), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__attrs_attrs__', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__repr__', ctx=Store())], value=Call(func=Name(id='_make_repr', ctx=Load()), args=[Name(id='attrs', ctx=Load()), Name(id='ns', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='fields', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the tuple of *attrs* attributes for a class.\n\n    The tuple also allows accessing the fields by their names (see below for\n    examples).\n\n    :param type cls: Class to introspect.\n\n    :raise TypeError: If *cls* is not a class.\n    :raise attrs.exceptions.NotAnAttrsClassError: If *cls* is not an *attrs*\n        class.\n\n    :rtype: tuple (with name accessors) of `attrs.Attribute`\n\n    .. versionchanged:: 16.2.0 Returned tuple allows accessing the fields\n       by name.\n    .. versionchanged:: 23.1.0 Add support for generic classes.\n    ')), Assign(targets=[Name(id='generic_base', ctx=Store())], value=Call(func=Name(id='get_generic_base', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='generic_base', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Passed object must be a class.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__attrs_attrs__'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='generic_base', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='generic_base', ctx=Load()), Constant(value='__attrs_attrs__'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__attrs_attrs__', ctx=Store())], value=Name(id='attrs', ctx=Load())), Return(value=Name(id='attrs', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='NotAnAttrsClassError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='cls', ctx=Load()), conversion=114), Constant(value=' is not an attrs-decorated class.')])], keywords=[]))], orelse=[]), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[]), FunctionDef(name='fields_dict', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return an ordered dictionary of *attrs* attributes for a class, whose\n    keys are the attribute names.\n\n    :param type cls: Class to introspect.\n\n    :raise TypeError: If *cls* is not a class.\n    :raise attrs.exceptions.NotAnAttrsClassError: If *cls* is not an *attrs*\n        class.\n\n    :rtype: dict\n\n    .. versionadded:: 18.1.0\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='Passed object must be a class.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__attrs_attrs__'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='attrs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='NotAnAttrsClassError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='cls', ctx=Load()), conversion=114), Constant(value=' is not an attrs-decorated class.')])], keywords=[]))], orelse=[]), Return(value=DictComp(key=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), value=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='inst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Validate all attributes on *inst* that have a validator.\n\n    Leaves all exceptions through.\n\n    :param inst: Instance of a class with *attrs* attributes.\n    ')), If(test=Compare(left=Attribute(value=Name(id='_config', ctx=Load()), attr='_run_validators', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Return()], orelse=[]), For(target=Name(id='a', ctx=Store()), iter=Call(func=Name(id='fields', ctx=Load()), args=[Attribute(value=Name(id='inst', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='validator', ctx=Load())), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='v', ctx=Load()), args=[Name(id='inst', ctx=Load()), Name(id='a', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='inst', ctx=Load()), Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_is_slot_cls', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Constant(value='__slots__'), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_is_slot_attr', args=arguments(posonlyargs=[], args=[arg(arg='a_name'), arg(arg='base_attr_map')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check if the attribute name comes from a slot class.\n    ')), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='a_name', ctx=Load()), ops=[In()], comparators=[Name(id='base_attr_map', ctx=Load())]), Call(func=Name(id='_is_slot_cls', ctx=Load()), args=[Subscript(value=Name(id='base_attr_map', ctx=Load()), slice=Name(id='a_name', ctx=Load()), ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='_make_init', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attrs'), arg(arg='pre_init'), arg(arg='post_init'), arg(arg='frozen'), arg(arg='slots'), arg(arg='cache_hash'), arg(arg='base_attr_map'), arg(arg='is_exc'), arg(arg='cls_on_setattr'), arg(arg='attrs_init')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='has_cls_on_setattr', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='cls_on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='cls_on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='NO_OP', ctx=Load())])])), If(test=BoolOp(op=And(), values=[Name(id='frozen', ctx=Load()), Name(id='has_cls_on_setattr', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Frozen classes can't use on_setattr.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='needs_cached_setattr', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cache_hash', ctx=Load()), Name(id='frozen', ctx=Load())])), Assign(targets=[Name(id='filtered_attrs', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='attr_dict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load())), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), ops=[Is()], comparators=[Name(id='NOTHING', ctx=Load())])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='filtered_attrs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='attr_dict', ctx=Load()), slice=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='a', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='frozen', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Frozen classes can't use on_setattr.")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='needs_cached_setattr', ctx=Store())], value=Constant(value=True))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='has_cls_on_setattr', ctx=Load()), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='NO_OP', ctx=Load())])]), body=[Assign(targets=[Name(id='needs_cached_setattr', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='unique_filename', ctx=Store())], value=Call(func=Name(id='_generate_unique_filename', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='init')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='script', ctx=Store()), Name(id='globs', ctx=Store()), Name(id='annotations', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_attrs_to_init_script', ctx=Load()), args=[Name(id='filtered_attrs', ctx=Load()), Name(id='frozen', ctx=Load()), Name(id='slots', ctx=Load()), Name(id='pre_init', ctx=Load()), Name(id='post_init', ctx=Load()), Name(id='cache_hash', ctx=Load()), Name(id='base_attr_map', ctx=Load()), Name(id='is_exc', ctx=Load()), Name(id='needs_cached_setattr', ctx=Load()), Name(id='has_cls_on_setattr', ctx=Load()), Name(id='attrs_init', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='globs', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), ctx=Load()), attr='__dict__', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='globs', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='NOTHING'), Constant(value='attr_dict')], values=[Name(id='NOTHING', ctx=Load()), Name(id='attr_dict', ctx=Load())])], keywords=[])), If(test=Name(id='needs_cached_setattr', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='globs', ctx=Load()), slice=Constant(value='_cached_setattr_get'), ctx=Store())], value=Attribute(value=Name(id='_obj_setattr', ctx=Load()), attr='__get__', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='init', ctx=Store())], value=Call(func=Name(id='_make_method', ctx=Load()), args=[IfExp(test=Name(id='attrs_init', ctx=Load()), body=Constant(value='__attrs_init__'), orelse=Constant(value='__init__')), Name(id='script', ctx=Load()), Name(id='unique_filename', ctx=Load()), Name(id='globs', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='init', ctx=Load()), attr='__annotations__', ctx=Store())], value=Name(id='annotations', ctx=Load())), Return(value=Name(id='init', ctx=Load()))], decorator_list=[]), FunctionDef(name='_setattr', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value_var'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Use the cached object.setattr to set *attr_name* to *value_var*.\n    ')), Return(value=JoinedStr(values=[Constant(value="_setattr('"), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value="', "), FormattedValue(value=Name(id='value_var', ctx=Load()), conversion=-1), Constant(value=')')]))], decorator_list=[]), FunctionDef(name='_setattr_with_converter', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value_var'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Use the cached object.setattr to set *attr_name* to *value_var*, but run\n    its converter first.\n    ')), Return(value=BinOp(left=Constant(value="_setattr('%s', %s(%s))"), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load()), BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load())], ctx=Load())), Name(id='value_var', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='_assign', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Unless *attr_name* has an on_setattr hook, use normal assignment. Otherwise\n    relegate to _setattr.\n    ')), If(test=Name(id='has_on_setattr', ctx=Load()), body=[Return(value=Call(func=Name(id='_setattr', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='value', ctx=Load()), Constant(value=True)], keywords=[]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value='self.'), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)]))], decorator_list=[]), FunctionDef(name='_assign_with_converter', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value_var'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Unless *attr_name* has an on_setattr hook, use normal assignment after\n    conversion. Otherwise relegate to _setattr_with_converter.\n    ')), If(test=Name(id='has_on_setattr', ctx=Load()), body=[Return(value=Call(func=Name(id='_setattr_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='value_var', ctx=Load()), Constant(value=True)], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value='self.%s = %s(%s)'), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load()), BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load())], ctx=Load())), Name(id='value_var', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='_attrs_to_init_script', args=arguments(posonlyargs=[], args=[arg(arg='attrs'), arg(arg='frozen'), arg(arg='slots'), arg(arg='pre_init'), arg(arg='post_init'), arg(arg='cache_hash'), arg(arg='base_attr_map'), arg(arg='is_exc'), arg(arg='needs_cached_setattr'), arg(arg='has_cls_on_setattr'), arg(arg='attrs_init')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a script of an initializer for *attrs* and a dict of globals.\n\n    The globals are expected by the generated script.\n\n    If *frozen* is True, we cannot set the attributes directly so we use\n    a cached ``object.__setattr__``.\n    ')), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='pre_init', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='self.__attrs_pre_init__()')], keywords=[]))], orelse=[]), If(test=Name(id='needs_cached_setattr', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='_setattr = _cached_setattr_get(self)')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='frozen', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[If(test=Compare(left=Name(id='slots', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='fmt_setter', ctx=Store())], value=Name(id='_setattr', ctx=Load())), Assign(targets=[Name(id='fmt_setter_with_converter', ctx=Store())], value=Name(id='_setattr_with_converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='_inst_dict = self.__dict__')], keywords=[])), FunctionDef(name='fmt_setter', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value_var'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_is_slot_attr', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='base_attr_map', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='_setattr', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='value_var', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=JoinedStr(values=[Constant(value="_inst_dict['"), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value="'] = "), FormattedValue(value=Name(id='value_var', ctx=Load()), conversion=-1)]))], decorator_list=[]), FunctionDef(name='fmt_setter_with_converter', args=arguments(posonlyargs=[], args=[arg(arg='attr_name'), arg(arg='value_var'), arg(arg='has_on_setattr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Name(id='has_on_setattr', ctx=Load()), Call(func=Name(id='_is_slot_attr', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='base_attr_map', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='_setattr_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='value_var', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value="_inst_dict['%s'] = %s(%s)"), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load()), BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='attr_name', ctx=Load())], ctx=Load())), Name(id='value_var', ctx=Load())], ctx=Load())))], decorator_list=[])])], orelse=[Assign(targets=[Name(id='fmt_setter', ctx=Store())], value=Name(id='_assign', ctx=Load())), Assign(targets=[Name(id='fmt_setter_with_converter', ctx=Store())], value=Name(id='_assign_with_converter', ctx=Load()))]), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='kw_only_args', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='attrs_to_validate', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='names_for_globals', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='annotations', ctx=Store())], value=Dict(keys=[Constant(value='return')], values=[Constant(value=None)])), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=Attribute(value=Name(id='a', ctx=Load()), attr='validator', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='attrs_to_validate', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='attr_name', ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='has_on_setattr', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='on_setattr', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='setters', ctx=Load()), attr='NO_OP', ctx=Load())]), Name(id='has_cls_on_setattr', ctx=Load())])])), Assign(targets=[Name(id='arg_name', ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='alias', ctx=Load())), Assign(targets=[Name(id='has_factory', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), Name(id='Factory', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='has_factory', ctx=Load()), Attribute(value=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), attr='takes_self', ctx=Load())]), body=[Assign(targets=[Name(id='maybe_self', ctx=Store())], value=Constant(value='self'))], orelse=[Assign(targets=[Name(id='maybe_self', ctx=Store())], value=Constant(value=''))]), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[If(test=Name(id='has_factory', ctx=Load()), body=[Assign(targets=[Name(id='init_factory_name', ctx=Store())], value=BinOp(left=Name(id='_init_factory_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), BinOp(left=Name(id='init_factory_name', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='maybe_self', ctx=Load()), conversion=-1), Constant(value=')')])), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='conv_name', ctx=Store())], value=BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='conv_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), BinOp(left=Name(id='init_factory_name', ctx=Load()), op=Add(), right=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='maybe_self', ctx=Load()), conversion=-1), Constant(value=')')])), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='init_factory_name', ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), attr='factory', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), JoinedStr(values=[Constant(value="attr_dict['"), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value="'].default")]), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='conv_name', ctx=Store())], value=BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='conv_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), JoinedStr(values=[Constant(value="attr_dict['"), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value="'].default")]), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTHING', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='has_factory', ctx=Load()))]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='arg_name', ctx=Load()), conversion=-1), Constant(value="=attr_dict['"), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value="'].default")])), If(test=Attribute(value=Name(id='a', ctx=Load()), attr='kw_only', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='kw_only_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load())), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[If(test=Name(id='has_factory', ctx=Load()), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='arg_name', ctx=Load()), conversion=-1), Constant(value='=NOTHING')])), If(test=Attribute(value=Name(id='a', ctx=Load()), attr='kw_only', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='kw_only_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='if '), FormattedValue(value=Name(id='arg_name', ctx=Load()), conversion=-1), Constant(value=' is not NOTHING:')])], keywords=[])), Assign(targets=[Name(id='init_factory_name', ctx=Store())], value=BinOp(left=Name(id='_init_factory_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='    '), op=Add(), right=Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='else:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='    '), op=Add(), right=Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), BinOp(left=BinOp(left=BinOp(left=Name(id='init_factory_name', ctx=Load()), op=Add(), right=Constant(value='(')), op=Add(), right=Name(id='maybe_self', ctx=Load())), op=Add(), right=Constant(value=')')), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load())), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='    '), op=Add(), right=Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='else:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='    '), op=Add(), right=Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), BinOp(left=BinOp(left=BinOp(left=Name(id='init_factory_name', ctx=Load()), op=Add(), right=Constant(value='(')), op=Add(), right=Name(id='maybe_self', ctx=Load())), op=Add(), right=Constant(value=')')), Name(id='has_on_setattr', ctx=Load())], keywords=[]))], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='init_factory_name', ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='a', ctx=Load()), attr='default', ctx=Load()), attr='factory', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='a', ctx=Load()), attr='kw_only', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='kw_only_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg_name', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg_name', ctx=Load())], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter_with_converter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=BinOp(left=Name(id='_init_converter_pat', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load())], ctx=Load())), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='fmt_setter', ctx=Load()), args=[Name(id='attr_name', ctx=Load()), Name(id='arg_name', ctx=Load()), Name(id='has_on_setattr', ctx=Load())], keywords=[])], keywords=[]))])])])]), If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='annotations', ctx=Load()), slice=Name(id='arg_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='type', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_AnnotationExtractor', ctx=Load()), args=[Attribute(value=Name(id='a', ctx=Load()), attr='converter', ctx=Load())], keywords=[]), attr='get_first_param_type', ctx=Load()), args=[], keywords=[])), If(test=Name(id='t', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='annotations', ctx=Load()), slice=Name(id='arg_name', ctx=Load()), ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[])], orelse=[])])], orelse=[])], orelse=[]), If(test=Name(id='attrs_to_validate', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Constant(value='_config'), ctx=Store())], value=Name(id='_config', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='if _config._run_validators is True:')], keywords=[])), For(target=Name(id='a', ctx=Store()), iter=Name(id='attrs_to_validate', ctx=Load()), body=[Assign(targets=[Name(id='val_name', ctx=Store())], value=BinOp(left=Constant(value='__attr_validator_'), op=Add(), right=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()))), Assign(targets=[Name(id='attr_name', ctx=Store())], value=BinOp(left=Constant(value='__attr_'), op=Add(), right=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='    '), FormattedValue(value=Name(id='val_name', ctx=Load()), conversion=-1), Constant(value='(self, '), FormattedValue(value=Name(id='attr_name', ctx=Load()), conversion=-1), Constant(value=', self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[])), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='val_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='a', ctx=Load()), attr='validator', ctx=Load())), Assign(targets=[Subscript(value=Name(id='names_for_globals', ctx=Load()), slice=Name(id='attr_name', ctx=Load()), ctx=Store())], value=Name(id='a', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='post_init', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='self.__attrs_post_init__()')], keywords=[]))], orelse=[]), If(test=Name(id='cache_hash', ctx=Load()), body=[If(test=Name(id='frozen', ctx=Load()), body=[If(test=Name(id='slots', ctx=Load()), body=[Assign(targets=[Name(id='init_hash_cache', ctx=Store())], value=Constant(value="_setattr('%s', %s)"))], orelse=[Assign(targets=[Name(id='init_hash_cache', ctx=Store())], value=Constant(value="_inst_dict['%s'] = %s"))])], orelse=[Assign(targets=[Name(id='init_hash_cache', ctx=Store())], value=Constant(value='self.%s = %s'))]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='init_hash_cache', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='_hash_cache_field', ctx=Load()), Constant(value='None')], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Name(id='is_exc', ctx=Load()), body=[Assign(targets=[Name(id='vals', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='self.'), FormattedValue(value=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[Attribute(value=Name(id='a', ctx=Load()), attr='init', ctx=Load())], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='BaseException.__init__(self, '), FormattedValue(value=Name(id='vals', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), If(test=Name(id='kw_only_args', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='%s*, %s'), op=Mod(), right=Tuple(elts=[IfExp(test=Name(id='args', ctx=Load()), body=Constant(value=', '), orelse=Constant(value='')), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='kw_only_args', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Constant(value='def %s(self, %s):\n    %s\n'), op=Mod(), right=Tuple(elts=[IfExp(test=Name(id='attrs_init', ctx=Load()), body=Constant(value='__attrs_init__'), orelse=Constant(value='__init__')), Name(id='args', ctx=Load()), IfExp(test=Name(id='lines', ctx=Load()), body=Call(func=Attribute(value=Constant(value='\n    '), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), orelse=Constant(value='pass'))], ctx=Load())), Name(id='names_for_globals', ctx=Load()), Name(id='annotations', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_default_init_alias_for', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    The default __init__ parameter name for a field.\n\n    This performs private-name adjustment via leading-unscore stripping,\n    and is the default value of Attribute.alias if not provided.\n    ')), Return(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='_')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='Attribute', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    *Read-only* representation of an attribute.\n\n    .. warning::\n\n       You should never instantiate this class yourself.\n\n    The class has *all* arguments of `attr.ib` (except for ``factory``\n    which is only syntactic sugar for ``default=Factory(...)`` plus the\n    following:\n\n    - ``name`` (`str`): The name of the attribute.\n    - ``alias`` (`str`): The __init__ parameter name of the attribute, after\n      any explicit overrides and default private-attribute-name handling.\n    - ``inherited`` (`bool`): Whether or not that attribute has been inherited\n      from a base class.\n    - ``eq_key`` and ``order_key`` (`typing.Callable` or `None`): The callables\n      that are used for comparing and ordering objects by this attribute,\n      respectively. These are set by passing a callable to `attr.ib`'s ``eq``,\n      ``order``, or ``cmp`` arguments. See also :ref:`comparison customization\n      <custom-comparison>`.\n\n    Instances of this class are frequently used for introspection purposes\n    like:\n\n    - `fields` returns a tuple of them.\n    - Validators get them passed as the first argument.\n    - The :ref:`field transformer <transform-fields>` hook receives a list of\n      them.\n    - The ``alias`` property exposes the __init__ parameter name of the field,\n      with any overrides and default private-attribute handling applied.\n\n\n    .. versionadded:: 20.1.0 *inherited*\n    .. versionadded:: 20.1.0 *on_setattr*\n    .. versionchanged:: 20.2.0 *inherited* is not taken into account for\n        equality checks and hashing anymore.\n    .. versionadded:: 21.1.0 *eq_key* and *order_key*\n    .. versionadded:: 22.2.0 *alias*\n\n    For the full version history of the fields, see `attr.ib`.\n    ")), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='name'), Constant(value='default'), Constant(value='validator'), Constant(value='repr'), Constant(value='eq'), Constant(value='eq_key'), Constant(value='order'), Constant(value='order_key'), Constant(value='hash'), Constant(value='init'), Constant(value='metadata'), Constant(value='type'), Constant(value='converter'), Constant(value='kw_only'), Constant(value='inherited'), Constant(value='on_setattr'), Constant(value='alias')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='default'), arg(arg='validator'), arg(arg='repr'), arg(arg='cmp'), arg(arg='hash'), arg(arg='init'), arg(arg='inherited'), arg(arg='metadata'), arg(arg='type'), arg(arg='converter'), arg(arg='kw_only'), arg(arg='eq'), arg(arg='eq_key'), arg(arg='order'), arg(arg='order_key'), arg(arg='on_setattr'), arg(arg='alias')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='eq', ctx=Store()), Name(id='eq_key', ctx=Store()), Name(id='order', ctx=Store()), Name(id='order_key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_determine_attrib_eq_order', ctx=Load()), args=[Name(id='cmp', ctx=Load()), BoolOp(op=Or(), values=[Name(id='eq_key', ctx=Load()), Name(id='eq', ctx=Load())]), BoolOp(op=Or(), values=[Name(id='order_key', ctx=Load()), Name(id='order', ctx=Load())]), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='bound_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='_obj_setattr', ctx=Load()), attr='__get__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='name'), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='default'), Name(id='default', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='validator'), Name(id='validator', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='repr'), Name(id='repr', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='eq'), Name(id='eq', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='eq_key'), Name(id='eq_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='order'), Name(id='order', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='order_key'), Name(id='order_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='hash'), Name(id='hash', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='init'), Name(id='init', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='converter'), Name(id='converter', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='metadata'), IfExp(test=Name(id='metadata', ctx=Load()), body=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MappingProxyType', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='metadata', ctx=Load())], keywords=[])], keywords=[]), orelse=Name(id='_empty_metadata_singleton', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='type'), Name(id='type', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='kw_only'), Name(id='kw_only', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='inherited'), Name(id='inherited', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='on_setattr'), Name(id='on_setattr', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Constant(value='alias'), Name(id='alias', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__setattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='FrozenInstanceError', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='from_counting_attr', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='ca'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Attribute(value=Name(id='ca', ctx=Load()), attr='type', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='ca', ctx=Load()), attr='type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Type annotation and type argument cannot both be present')], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='inst_dict', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ca', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='Attribute', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='name'), Constant(value='validator'), Constant(value='default'), Constant(value='type'), Constant(value='inherited')], ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='validator', value=Attribute(value=Name(id='ca', ctx=Load()), attr='_validator', ctx=Load())), keyword(arg='default', value=Attribute(value=Name(id='ca', ctx=Load()), attr='_default', ctx=Load())), keyword(arg='type', value=Name(id='type', ctx=Load())), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='inherited', value=Constant(value=False)), keyword(value=Name(id='inst_dict', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='evolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='changes'), defaults=[]), body=[Expr(value=Constant(value='\n        Copy *self* and apply *changes*.\n\n        This works similarly to `attrs.evolve` but that function does not work\n        with `Attribute`.\n\n        It is mainly meant to be used for `transform-fields`.\n\n        .. versionadded:: 20.3.0\n        ')), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new', ctx=Load()), attr='_setattrs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='changes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Name(id='new', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Play nice with pickle.\n        ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='metadata')]), body=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Play nice with pickle.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_setattrs', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), Name(id='state', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_setattrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name_values_pairs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='bound_setattr', ctx=Store())], value=Call(func=Attribute(value=Name(id='_obj_setattr', ctx=Load()), attr='__get__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='name_values_pairs', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='metadata')]), body=[Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='bound_setattr', ctx=Load()), args=[Name(id='name', ctx=Load()), IfExp(test=Name(id='value', ctx=Load()), body=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MappingProxyType', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]), orelse=Name(id='_empty_metadata_singleton', ctx=Load()))], keywords=[]))])], orelse=[])], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_a', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Attribute', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='default', value=Name(id='NOTHING', ctx=Load())), keyword(arg='validator', value=Constant(value=None)), keyword(arg='repr', value=Constant(value=True)), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='eq', value=Constant(value=True)), keyword(arg='order', value=Constant(value=False)), keyword(arg='hash', value=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='metadata')])), keyword(arg='init', value=Constant(value=True)), keyword(arg='inherited', value=Constant(value=False)), keyword(arg='alias', value=Call(func=Name(id='_default_init_alias_for', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='Attribute', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='Attribute', ctx=Store())], value=Call(func=Name(id='_add_hash', ctx=Load()), args=[Call(func=Name(id='_add_eq', ctx=Load()), args=[Call(func=Name(id='_add_repr', ctx=Load()), args=[Name(id='Attribute', ctx=Load())], keywords=[keyword(arg='attrs', value=Name(id='_a', ctx=Load()))])], keywords=[keyword(arg='attrs', value=ListComp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='_a', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='inherited')])], is_async=0)]))])], keywords=[keyword(arg='attrs', value=ListComp(elt=Name(id='a', ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='_a', ctx=Load()), ifs=[BoolOp(op=And(), values=[Attribute(value=Name(id='a', ctx=Load()), attr='hash', ctx=Load()), Compare(left=Attribute(value=Name(id='a', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='inherited')])])], is_async=0)]))])), ClassDef(name='_CountingAttr', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Intermediate representation of attributes that uses a counter to preserve\n    the order in which the attributes have been defined.\n\n    *Internal* data structure of the attrs library.  Running into is most\n    likely the result of a bug like a forgotten `@attr.s` decorator.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='counter'), Constant(value='_default'), Constant(value='repr'), Constant(value='eq'), Constant(value='eq_key'), Constant(value='order'), Constant(value='order_key'), Constant(value='hash'), Constant(value='init'), Constant(value='metadata'), Constant(value='_validator'), Constant(value='converter'), Constant(value='type'), Constant(value='kw_only'), Constant(value='on_setattr'), Constant(value='alias')], ctx=Load())), Assign(targets=[Name(id='__attrs_attrs__', ctx=Store())], value=BinOp(left=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='Attribute', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='alias', value=Call(func=Name(id='_default_init_alias_for', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), keyword(arg='default', value=Name(id='NOTHING', ctx=Load())), keyword(arg='validator', value=Constant(value=None)), keyword(arg='repr', value=Constant(value=True)), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='hash', value=Constant(value=True)), keyword(arg='init', value=Constant(value=True)), keyword(arg='kw_only', value=Constant(value=False)), keyword(arg='eq', value=Constant(value=True)), keyword(arg='eq_key', value=Constant(value=None)), keyword(arg='order', value=Constant(value=False)), keyword(arg='order_key', value=Constant(value=None)), keyword(arg='inherited', value=Constant(value=False)), keyword(arg='on_setattr', value=Constant(value=None))]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Tuple(elts=[Constant(value='counter'), Constant(value='_default'), Constant(value='repr'), Constant(value='eq'), Constant(value='order'), Constant(value='hash'), Constant(value='init'), Constant(value='on_setattr'), Constant(value='alias')], ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Tuple(elts=[Call(func=Name(id='Attribute', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='metadata')), keyword(arg='alias', value=Constant(value='metadata')), keyword(arg='default', value=Constant(value=None)), keyword(arg='validator', value=Constant(value=None)), keyword(arg='repr', value=Constant(value=True)), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='hash', value=Constant(value=False)), keyword(arg='init', value=Constant(value=True)), keyword(arg='kw_only', value=Constant(value=False)), keyword(arg='eq', value=Constant(value=True)), keyword(arg='eq_key', value=Constant(value=None)), keyword(arg='order', value=Constant(value=False)), keyword(arg='order_key', value=Constant(value=None)), keyword(arg='inherited', value=Constant(value=False)), keyword(arg='on_setattr', value=Constant(value=None))])], ctx=Load()))), Assign(targets=[Name(id='cls_counter', ctx=Store())], value=Constant(value=0)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default'), arg(arg='validator'), arg(arg='repr'), arg(arg='cmp'), arg(arg='hash'), arg(arg='init'), arg(arg='converter'), arg(arg='metadata'), arg(arg='type'), arg(arg='kw_only'), arg(arg='eq'), arg(arg='eq_key'), arg(arg='order'), arg(arg='order_key'), arg(arg='on_setattr'), arg(arg='alias')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='_CountingAttr', ctx=Load()), attr='cls_counter', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='counter', ctx=Store())], value=Attribute(value=Name(id='_CountingAttr', ctx=Load()), attr='cls_counter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Store())], value=Name(id='default', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='converter', ctx=Store())], value=Name(id='converter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repr', ctx=Store())], value=Name(id='repr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='eq', ctx=Store())], value=Name(id='eq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='eq_key', ctx=Store())], value=Name(id='eq_key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='order', ctx=Store())], value=Name(id='order', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='order_key', ctx=Store())], value=Name(id='order_key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hash', ctx=Store())], value=Name(id='hash', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='init', ctx=Store())], value=Name(id='init', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Store())], value=Name(id='metadata', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Store())], value=Name(id='type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kw_only', ctx=Store())], value=Name(id='kw_only', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='on_setattr', ctx=Store())], value=Name(id='on_setattr', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alias', ctx=Store())], value=Name(id='alias', ctx=Load()))], decorator_list=[]), FunctionDef(name='validator', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='meth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Decorator that adds *meth* to the list of validators.\n\n        Returns *meth* unchanged.\n\n        .. versionadded:: 17.1.0\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_validator', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_validator', ctx=Store())], value=Name(id='meth', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_validator', ctx=Store())], value=Call(func=Name(id='and_', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_validator', ctx=Load()), Name(id='meth', ctx=Load())], keywords=[]))]), Return(value=Name(id='meth', ctx=Load()))], decorator_list=[]), FunctionDef(name='default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='meth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Decorator that allows to set the default for an attribute.\n\n        Returns *meth* unchanged.\n\n        :raises DefaultAlreadySetError: If default has been set before.\n\n        .. versionadded:: 17.1.0\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NOTHING', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DefaultAlreadySetError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Store())], value=Call(func=Name(id='Factory', ctx=Load()), args=[Name(id='meth', ctx=Load())], keywords=[keyword(arg='takes_self', value=Constant(value=True))])), Return(value=Name(id='meth', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_CountingAttr', ctx=Store())], value=Call(func=Name(id='_add_eq', ctx=Load()), args=[Call(func=Name(id='_add_repr', ctx=Load()), args=[Name(id='_CountingAttr', ctx=Load())], keywords=[])], keywords=[])), ClassDef(name='Factory', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Stores a factory callable.\n\n    If passed as the default value to `attrs.field`, the factory is used to\n    generate a new value.\n\n    :param callable factory: A callable that takes either none or exactly one\n        mandatory positional argument depending on *takes_self*.\n    :param bool takes_self: Pass the partially initialized instance that is\n        being initialized as a positional argument.\n\n    .. versionadded:: 17.1.0  *takes_self*\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='factory'), Constant(value='takes_self')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='factory'), arg(arg='takes_self')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='factory', ctx=Store())], value=Name(id='factory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='takes_self', ctx=Store())], value=Name(id='takes_self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Play nice with pickle.\n        ')), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Play nice with pickle.\n        ')), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_f', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Attribute', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='default', value=Name(id='NOTHING', ctx=Load())), keyword(arg='validator', value=Constant(value=None)), keyword(arg='repr', value=Constant(value=True)), keyword(arg='cmp', value=Constant(value=None)), keyword(arg='eq', value=Constant(value=True)), keyword(arg='order', value=Constant(value=False)), keyword(arg='hash', value=Constant(value=True)), keyword(arg='init', value=Constant(value=True)), keyword(arg='inherited', value=Constant(value=False))]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='Factory', ctx=Load()), attr='__slots__', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='Factory', ctx=Store())], value=Call(func=Name(id='_add_hash', ctx=Load()), args=[Call(func=Name(id='_add_eq', ctx=Load()), args=[Call(func=Name(id='_add_repr', ctx=Load()), args=[Name(id='Factory', ctx=Load())], keywords=[keyword(arg='attrs', value=Name(id='_f', ctx=Load()))])], keywords=[keyword(arg='attrs', value=Name(id='_f', ctx=Load()))])], keywords=[keyword(arg='attrs', value=Name(id='_f', ctx=Load()))])), FunctionDef(name='make_class', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='attrs'), arg(arg='bases')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='attributes_arguments'), defaults=[Tuple(elts=[Name(id='object', ctx=Load())], ctx=Load())]), body=[Expr(value=Constant(value='\n    A quick way to create a new class called *name* with *attrs*.\n\n    :param str name: The name for the new class.\n\n    :param attrs: A list of names or a dictionary of mappings of names to\n        `attr.ib`\\ s / `attrs.field`\\ s.\n\n        The order is deduced from the order of the names or attributes inside\n        *attrs*.  Otherwise the order of the definition of the attributes is\n        used.\n    :type attrs: `list` or `dict`\n\n    :param tuple bases: Classes that the new class will subclass.\n\n    :param attributes_arguments: Passed unmodified to `attr.s`.\n\n    :return: A new class with *attrs*.\n    :rtype: type\n\n    .. versionadded:: 17.1.0 *bases*\n    .. versionchanged:: 18.1.0 If *attrs* is ordered, the order is retained.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='attrs', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cls_dict', ctx=Store())], value=Name(id='attrs', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='attrs', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cls_dict', ctx=Store())], value=DictComp(key=Name(id='a', ctx=Load()), value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='attrs argument must be a dict or a list.')], keywords=[]))])]), Assign(targets=[Name(id='pre_init', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__attrs_pre_init__'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='post_init', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__attrs_post_init__'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='user_init', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__init__'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='body', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Name(id='pre_init', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='body', ctx=Load()), slice=Constant(value='__attrs_pre_init__'), ctx=Store())], value=Name(id='pre_init', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='post_init', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='body', ctx=Load()), slice=Constant(value='__attrs_post_init__'), ctx=Store())], value=Name(id='post_init', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='user_init', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='body', ctx=Load()), slice=Constant(value='__init__'), ctx=Store())], value=Name(id='user_init', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='type_', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='new_class', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='bases', ctx=Load()), Dict(keys=[], values=[]), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='ns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[]))], keywords=[])), Try(body=[Assign(targets=[Attribute(value=Name(id='type_', ctx=Load()), attr='__module__', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='f_globals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__name__'), Constant(value='__main__')], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='cmp', ctx=Store())], value=Call(func=Attribute(value=Name(id='attributes_arguments', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='cmp'), Constant(value=None)], keywords=[])), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='attributes_arguments', ctx=Load()), slice=Constant(value='eq'), ctx=Store()), Subscript(value=Name(id='attributes_arguments', ctx=Load()), slice=Constant(value='order'), ctx=Store())], ctx=Store())], value=Call(func=Name(id='_determine_attrs_eq_order', ctx=Load()), args=[Name(id='cmp', ctx=Load()), Call(func=Attribute(value=Name(id='attributes_arguments', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='eq')], keywords=[]), Call(func=Attribute(value=Name(id='attributes_arguments', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='order')], keywords=[]), Constant(value=True)], keywords=[])), Return(value=Call(func=Call(func=Name(id='_attrs', ctx=Load()), args=[], keywords=[keyword(arg='these', value=Name(id='cls_dict', ctx=Load())), keyword(value=Name(id='attributes_arguments', ctx=Load()))]), args=[Name(id='type_', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='_AndValidator', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Compose many validators to a single one.\n    ')), Assign(targets=[Name(id='_validators', ctx=Store())], value=Call(func=Name(id='attrib', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inst'), arg(arg='attr'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='v', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_validators', ctx=Load()), body=[Expr(value=Call(func=Name(id='v', ctx=Load()), args=[Name(id='inst', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[Call(func=Name(id='attrs', ctx=Load()), args=[], keywords=[keyword(arg='slots', value=Constant(value=True)), keyword(arg='hash', value=Constant(value=True))])]), FunctionDef(name='and_', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='validators'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    A validator that composes multiple validators into one.\n\n    When called on a value, it runs all wrapped validators.\n\n    :param callables validators: Arbitrary number of validators.\n\n    .. versionadded:: 17.1.0\n    ')), Assign(targets=[Name(id='vals', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='validator', ctx=Store()), iter=Name(id='validators', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='vals', ctx=Load()), attr='extend', ctx=Load()), args=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='_AndValidator', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='validator', ctx=Load()), attr='_validators', ctx=Load()), orelse=List(elts=[Name(id='validator', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_AndValidator', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='vals', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='pipe', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='converters'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    A converter that composes multiple converters into one.\n\n    When called on a value, it runs all wrapped converters, returning the\n    *last* value.\n\n    Type annotations will be inferred from the wrapped converters', if\n    they have any.\n\n    :param callables converters: Arbitrary number of converters.\n\n    .. versionadded:: 20.1.0\n    ")), FunctionDef(name='pipe_converter', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='converter', ctx=Store()), iter=Name(id='converters', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='val', ctx=Load()))], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Name(id='converters', ctx=Load())), body=[Assign(targets=[Name(id='A', ctx=Store())], value=Call(func=Attribute(value=Name(id='typing', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='A')], keywords=[])), Assign(targets=[Attribute(value=Name(id='pipe_converter', ctx=Load()), attr='__annotations__', ctx=Store())], value=Dict(keys=[Constant(value='val'), Constant(value='return')], values=[Name(id='A', ctx=Load()), Name(id='A', ctx=Load())]))], orelse=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_AnnotationExtractor', ctx=Load()), args=[Subscript(value=Name(id='converters', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), attr='get_first_param_type', ctx=Load()), args=[], keywords=[])), If(test=Name(id='t', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='pipe_converter', ctx=Load()), attr='__annotations__', ctx=Load()), slice=Constant(value='val'), ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='rt', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_AnnotationExtractor', ctx=Load()), args=[Subscript(value=Name(id='converters', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), attr='get_return_type', ctx=Load()), args=[], keywords=[])), If(test=Name(id='rt', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='pipe_converter', ctx=Load()), attr='__annotations__', ctx=Load()), slice=Constant(value='return'), ctx=Store())], value=Name(id='rt', ctx=Load()))], orelse=[])]), Return(value=Name(id='pipe_converter', ctx=Load()))], decorator_list=[])], type_ignores=[])