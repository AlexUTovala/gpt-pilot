Module(body=[Expr(value=Constant(value='Handwritten parser of dependency specifiers.\n\nThe docstring for each __parse_* function contains ENBF-inspired grammar representing\nthe implementation.\n')), Import(names=[alias(name='ast')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='_tokenizer', names=[alias(name='DEFAULT_RULES'), alias(name='Tokenizer')], level=1), ClassDef(name='Node', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value="('"), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value="')>")]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='serialize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Variable', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[FunctionDef(name='serialize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Value', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[FunctionDef(name='serialize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value='"')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='Op', bases=[Name(id='Node', ctx=Load())], keywords=[], body=[FunctionDef(name='serialize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='MarkerVar', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Variable', ctx=Load()), Name(id='Value', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='MarkerItem', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='MarkerVar', ctx=Load()), Name(id='Op', ctx=Load()), Name(id='MarkerVar', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='MarkerAtom', ctx=Store())], value=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='MarkerList', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), ClassDef(name='ParsedRequirement', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='url', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='extras', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='specifier', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='marker', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='MarkerList', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='parse_requirement', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_parse_requirement', ctx=Load()), args=[Call(func=Name(id='Tokenizer', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='rules', value=Name(id='DEFAULT_RULES', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='ParsedRequirement', ctx=Load())), FunctionDef(name='_parse_requirement', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    requirement = WS? IDENTIFIER WS? extras WS? requirement_details\n    ')), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='name_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='IDENTIFIER')], keywords=[keyword(arg='expected', value=Constant(value='package name at the start of dependency specifier'))])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='name_token', ctx=Load()), attr='text', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Name(id='_parse_extras', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='specifier', ctx=Store()), Name(id='marker', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_parse_requirement_details', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='END')], keywords=[keyword(arg='expected', value=Constant(value='end of dependency specifier'))])), Return(value=Call(func=Name(id='ParsedRequirement', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='url', ctx=Load()), Name(id='extras', ctx=Load()), Name(id='specifier', ctx=Load()), Name(id='marker', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ParsedRequirement', ctx=Load())), FunctionDef(name='_parse_requirement_details', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    requirement_details = AT URL (WS requirement_marker?)?\n                        | specifier WS? (requirement_marker)?\n    ')), Assign(targets=[Name(id='specifier', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='marker', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='AT')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='url_start', ctx=Store())], value=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='position', ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='URL')], keywords=[keyword(arg='expected', value=Constant(value='URL after @'))]), attr='text', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='END')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='specifier', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='WS')], keywords=[keyword(arg='expected', value=Constant(value='whitespace after URL'))])), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='END')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='specifier', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Name(id='_parse_requirement_marker', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[keyword(arg='span_start', value=Name(id='url_start', ctx=Load())), keyword(arg='after', value=Constant(value='URL and whitespace'))]))], orelse=[Assign(targets=[Name(id='specifier_start', ctx=Store())], value=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='position', ctx=Load())), Assign(targets=[Name(id='specifier', ctx=Store())], value=Call(func=Name(id='_parse_specifier', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='END')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='specifier', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Name(id='_parse_requirement_marker', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[keyword(arg='span_start', value=Name(id='specifier_start', ctx=Load())), keyword(arg='after', value=IfExp(test=Name(id='specifier', ctx=Load()), body=Constant(value='version specifier'), orelse=Constant(value='name and no valid version specifier')))]))]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='specifier', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='MarkerList', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_requirement_marker', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[arg(arg='span_start', annotation=Name(id='int', ctx=Load())), arg(arg='after', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Expr(value=Constant(value='\n    requirement_marker = SEMICOLON marker WS?\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='SEMICOLON')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected end or semicolon (after '), FormattedValue(value=Name(id='after', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[keyword(arg='span_start', value=Name(id='span_start', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Name(id='_parse_marker', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Return(value=Name(id='marker', ctx=Load()))], decorator_list=[], returns=Name(id='MarkerList', ctx=Load())), FunctionDef(name='_parse_extras', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='LEFT_BRACKET')], keywords=[keyword(arg='peek', value=Constant(value=True))])), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='enclosing_tokens', ctx=Load()), args=[Constant(value='LEFT_BRACKET'), Constant(value='RIGHT_BRACKET')], keywords=[keyword(arg='around', value=Constant(value='extras'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Name(id='_parse_extras_list', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[]))]), Return(value=Name(id='extras', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_extras_list', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    extras_list = identifier (wsp* ',' wsp* identifier)*\n    ")), AnnAssign(target=Name(id='extras', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='IDENTIFIER')], keywords=[])), body=[Return(value=Name(id='extras', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='IDENTIFIER')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[Constant(value='Expected comma between extra names')], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='COMMA')], keywords=[])), body=[Break()], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='extra_token', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='IDENTIFIER')], keywords=[keyword(arg='expected', value=Constant(value='extra name after comma'))])), Expr(value=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='extra_token', ctx=Load()), attr='text', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='extras', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_specifier', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS\n              | WS? version_many WS?\n    ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='enclosing_tokens', ctx=Load()), args=[Constant(value='LEFT_PARENTHESIS'), Constant(value='RIGHT_PARENTHESIS')], keywords=[keyword(arg='around', value=Constant(value='version specifier'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='parsed_specifiers', ctx=Store())], value=Call(func=Name(id='_parse_version_many', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[]))]), Return(value=Name(id='parsed_specifiers', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_parse_version_many', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?\n    ')), Assign(targets=[Name(id='parsed_specifiers', ctx=Store())], value=Constant(value='')), While(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='SPECIFIER')], keywords=[]), body=[Assign(targets=[Name(id='span_start', ctx=Store())], value=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='position', ctx=Load())), AugAssign(target=Name(id='parsed_specifiers', ctx=Store()), op=Add(), value=Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='VERSION_PREFIX_TRAIL')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[Constant(value='.* suffix can only be used with `==` or `!=` operators')], keywords=[keyword(arg='span_start', value=Name(id='span_start', ctx=Load())), keyword(arg='span_end', value=BinOp(left=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='position', ctx=Load()), op=Add(), right=Constant(value=1)))]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='VERSION_LOCAL_LABEL_TRAIL')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[Constant(value='Local version label can only be used with `==` or `!=` operators')], keywords=[keyword(arg='span_start', value=Name(id='span_start', ctx=Load())), keyword(arg='span_end', value=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='position', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='COMMA')], keywords=[])), body=[Break()], orelse=[]), AugAssign(target=Name(id='parsed_specifiers', ctx=Store()), op=Add(), value=Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[]))], orelse=[]), Return(value=Name(id='parsed_specifiers', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_marker', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_parse_full_marker', ctx=Load()), args=[Call(func=Name(id='Tokenizer', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='rules', value=Name(id='DEFAULT_RULES', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Name(id='MarkerList', ctx=Load())), FunctionDef(name='_parse_full_marker', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='retval', ctx=Store())], value=Call(func=Name(id='_parse_marker', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='END')], keywords=[keyword(arg='expected', value=Constant(value='end of marker expression'))])), Return(value=Name(id='retval', ctx=Load()))], decorator_list=[], returns=Name(id='MarkerList', ctx=Load())), FunctionDef(name='_parse_marker', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    marker = marker_atom (BOOLOP marker_atom)+\n    ')), Assign(targets=[Name(id='expression', ctx=Store())], value=List(elts=[Call(func=Name(id='_parse_marker_atom', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='BOOLOP')], keywords=[]), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expr_right', ctx=Store())], value=Call(func=Name(id='_parse_marker_atom', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='expression', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='token', ctx=Load()), attr='text', ctx=Load()), Name(id='expr_right', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='expression', ctx=Load()))], decorator_list=[], returns=Name(id='MarkerList', ctx=Load())), FunctionDef(name='_parse_marker_atom', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?\n                | WS? marker_item WS?\n    ')), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='LEFT_PARENTHESIS')], keywords=[keyword(arg='peek', value=Constant(value=True))]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='enclosing_tokens', ctx=Load()), args=[Constant(value='LEFT_PARENTHESIS'), Constant(value='RIGHT_PARENTHESIS')], keywords=[keyword(arg='around', value=Constant(value='marker expression'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), AnnAssign(target=Name(id='marker', ctx=Store()), annotation=Name(id='MarkerAtom', ctx=Load()), value=Call(func=Name(id='_parse_marker', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[]))])], orelse=[Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Name(id='_parse_marker_item', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Return(value=Name(id='marker', ctx=Load()))], decorator_list=[], returns=Name(id='MarkerAtom', ctx=Load())), FunctionDef(name='_parse_marker_item', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    marker_item = WS? marker_var WS? marker_op WS? marker_var WS?\n    ')), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='marker_var_left', ctx=Store())], value=Call(func=Name(id='_parse_marker_var', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='marker_op', ctx=Store())], value=Call(func=Name(id='_parse_marker_op', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Assign(targets=[Name(id='marker_var_right', ctx=Store())], value=Call(func=Name(id='_parse_marker_var', ctx=Load()), args=[Name(id='tokenizer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='consume', ctx=Load()), args=[Constant(value='WS')], keywords=[])), Return(value=Tuple(elts=[Name(id='marker_var_left', ctx=Load()), Name(id='marker_op', ctx=Load()), Name(id='marker_var_right', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='MarkerItem', ctx=Load())), FunctionDef(name='_parse_marker_var', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    marker_var = VARIABLE | QUOTED_STRING\n    ')), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='VARIABLE')], keywords=[]), body=[Return(value=Call(func=Name(id='process_env_var', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='_')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='QUOTED_STRING')], keywords=[]), body=[Return(value=Call(func=Name(id='process_python_str', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='Expected a marker variable or quoted string'))]))])])], decorator_list=[], returns=Name(id='MarkerVar', ctx=Load())), FunctionDef(name='process_env_var', args=arguments(posonlyargs=[], args=[arg(arg='env_var', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='env_var', ctx=Load()), ops=[Eq()], comparators=[Constant(value='platform_python_implementation')]), Compare(left=Name(id='env_var', ctx=Load()), ops=[Eq()], comparators=[Constant(value='python_implementation')])]), body=[Return(value=Call(func=Name(id='Variable', ctx=Load()), args=[Constant(value='platform_python_implementation')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Variable', ctx=Load()), args=[Name(id='env_var', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Variable', ctx=Load())), FunctionDef(name='process_python_str', args=arguments(posonlyargs=[], args=[arg(arg='python_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='literal_eval', ctx=Load()), args=[Name(id='python_str', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Value', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Value', ctx=Load())), FunctionDef(name='_parse_marker_op', args=arguments(posonlyargs=[], args=[arg(arg='tokenizer', annotation=Name(id='Tokenizer', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    marker_op = IN | NOT IN | OP\n    ')), If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='IN')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Op', ctx=Load()), args=[Constant(value='in')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='NOT')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='WS')], keywords=[keyword(arg='expected', value=Constant(value="whitespace after 'not'"))])), Expr(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='IN')], keywords=[keyword(arg='expected', value=Constant(value="'in' after 'not'"))])), Return(value=Call(func=Name(id='Op', ctx=Load()), args=[Constant(value='not in')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value='OP')], keywords=[]), body=[Return(value=Call(func=Name(id='Op', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='text', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[Constant(value='Expected marker operator, one of <=, <, !=, ==, >=, >, ~=, ===, in, not in')], keywords=[]))])])])], decorator_list=[], returns=Name(id='Op', ctx=Load()))], type_ignores=[])