Module(body=[Import(names=[alias(name='email.feedparser')]), Import(names=[alias(name='email.header')]), Import(names=[alias(name='email.message')]), Import(names=[alias(name='email.parser')]), Import(names=[alias(name='email.policy')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Generic'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='Type'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(names=[alias(name='requirements'), alias(name='specifiers'), alias(name='utils'), alias(name='version', asname='version_module')], level=1), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Attribute(value=Name(id='typing', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal'), alias(name='TypedDict')], level=0)], orelse=[If(test=Attribute(value=Name(id='typing', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal'), alias(name='TypedDict')], level=0)], orelse=[Try(body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal'), alias(name='TypedDict')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='Literal', bases=[], keywords=[], body=[FunctionDef(name='__init_subclass__', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='_kwargs'), defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), ClassDef(name='TypedDict', bases=[], keywords=[], body=[FunctionDef(name='__init_subclass__', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='_kwargs'), defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[])])]), Try(body=[Assign(targets=[Name(id='ExceptionGroup', ctx=Store())], value=Attribute(value=Name(id='__builtins__', ctx=Load()), attr='ExceptionGroup', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[ClassDef(name='ExceptionGroup', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A minimal implementation of :external:exc:`ExceptionGroup` from Python 3.11.\n\n        If :external:exc:`ExceptionGroup` is already defined by Python itself,\n        that version is used instead.\n        ')), AnnAssign(target=Name(id='message', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='exceptions', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Exception', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='exceptions', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Exception', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exceptions', ctx=Store())], value=Name(id='exceptions', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='exceptions', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])])], orelse=[], finalbody=[]), ClassDef(name='InvalidMetadata', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A metadata field contains invalid data.')), AnnAssign(target=Name(id='field', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value='The name of the field that contains invalid data.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='field', annotation=Name(id='str', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='field', ctx=Store())], value=Name(id='field', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='RawMetadata', bases=[Name(id='TypedDict', ctx=Load())], keywords=[keyword(arg='total', value=Constant(value=False))], body=[Expr(value=Constant(value='A dictionary of raw core metadata.\n\n    Each field in core metadata maps to a key of this dictionary (when data is\n    provided). The key is lower-case and underscores are used instead of dashes\n    compared to the equivalent core metadata field. Any core metadata field that\n    can be specified multiple times or can hold multiple values in a single\n    field have a key with a plural name. See :class:`Metadata` whose attributes\n    match the keys of this dictionary.\n\n    Core metadata fields that can be specified multiple times are stored as a\n    list or dict depending on which is appropriate for the field. Any fields\n    which hold multiple values in a single field are stored as a list.\n\n    ')), AnnAssign(target=Name(id='metadata_version', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='platforms', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='keywords', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='home_page', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='author', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='author_email', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='license', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='supported_platforms', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='download_url', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='classifiers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='requires', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='provides', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='obsoletes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='maintainer', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='maintainer_email', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='provides_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='obsoletes_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_python', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_external', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='project_urls', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='description_content_type', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='provides_extra', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='dynamic', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='_STRING_FIELDS', ctx=Store())], value=Set(elts=[Constant(value='author'), Constant(value='author_email'), Constant(value='description'), Constant(value='description_content_type'), Constant(value='download_url'), Constant(value='home_page'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer_email'), Constant(value='metadata_version'), Constant(value='name'), Constant(value='requires_python'), Constant(value='summary'), Constant(value='version')])), Assign(targets=[Name(id='_LIST_FIELDS', ctx=Store())], value=Set(elts=[Constant(value='classifiers'), Constant(value='dynamic'), Constant(value='obsoletes'), Constant(value='obsoletes_dist'), Constant(value='platforms'), Constant(value='provides'), Constant(value='provides_dist'), Constant(value='provides_extra'), Constant(value='requires'), Constant(value='requires_dist'), Constant(value='requires_external'), Constant(value='supported_platforms')])), Assign(targets=[Name(id='_DICT_FIELDS', ctx=Store())], value=Set(elts=[Constant(value='project_urls')])), FunctionDef(name='_parse_keywords', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split a string of comma-separate keyboards into a list of keywords.')), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_project_urls', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a list of label/URL string pairings separated by a comma.')), Assign(targets=[Name(id='urls', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='pair', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pair', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=','), Constant(value=1)], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value='')], ctx=Load()), op=Mult(), right=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value=2), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], keywords=[]))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='label', ctx=Store()), Name(id='url', ctx=Store())], ctx=Store())], value=Name(id='parts', ctx=Load())), If(test=Compare(left=Name(id='label', ctx=Load()), ops=[In()], comparators=[Name(id='urls', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='duplicate labels in project urls')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='urls', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Store())], value=Name(id='url', ctx=Load()))], orelse=[]), Return(value=Name(id='urls', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_payload', args=arguments(posonlyargs=[], args=[arg(arg='msg', annotation=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load())), arg(arg='source', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the body of the message.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='payload', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[]), simple=1), Return(value=Name(id='payload', ctx=Load()))], orelse=[AnnAssign(target=Name(id='bpayload', ctx=Store()), annotation=Name(id='bytes', ctx=Load()), value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[keyword(arg='decode', value=Constant(value=True))]), simple=1), Try(body=[Return(value=Call(func=Attribute(value=Name(id='bpayload', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8'), Constant(value='strict')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='payload in an invalid encoding')], keywords=[]))])], orelse=[], finalbody=[])])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Store())], value=Dict(keys=[Constant(value='author'), Constant(value='author-email'), Constant(value='classifier'), Constant(value='description'), Constant(value='description-content-type'), Constant(value='download-url'), Constant(value='dynamic'), Constant(value='home-page'), Constant(value='keywords'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer-email'), Constant(value='metadata-version'), Constant(value='name'), Constant(value='obsoletes'), Constant(value='obsoletes-dist'), Constant(value='platform'), Constant(value='project-url'), Constant(value='provides'), Constant(value='provides-dist'), Constant(value='provides-extra'), Constant(value='requires'), Constant(value='requires-dist'), Constant(value='requires-external'), Constant(value='requires-python'), Constant(value='summary'), Constant(value='supported-platform'), Constant(value='version')], values=[Constant(value='author'), Constant(value='author_email'), Constant(value='classifiers'), Constant(value='description'), Constant(value='description_content_type'), Constant(value='download_url'), Constant(value='dynamic'), Constant(value='home_page'), Constant(value='keywords'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer_email'), Constant(value='metadata_version'), Constant(value='name'), Constant(value='obsoletes'), Constant(value='obsoletes_dist'), Constant(value='platforms'), Constant(value='project_urls'), Constant(value='provides'), Constant(value='provides_dist'), Constant(value='provides_extra'), Constant(value='requires'), Constant(value='requires_dist'), Constant(value='requires_external'), Constant(value='requires_python'), Constant(value='summary'), Constant(value='supported_platforms'), Constant(value='version')])), Assign(targets=[Name(id='_RAW_TO_EMAIL_MAPPING', ctx=Store())], value=DictComp(key=Name(id='raw', ctx=Load()), value=Name(id='email', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='email', ctx=Store()), Name(id='raw', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), FunctionDef(name='parse_email', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse a distribution's metadata stored as email headers (e.g. from ``METADATA``).\n\n    This function returns a two-item tuple of dicts. The first dict is of\n    recognized fields from the core metadata specification. Fields that can be\n    parsed and translated into Python's built-in types are converted\n    appropriately. All other fields are left as-is. Fields that are allowed to\n    appear multiple times are stored as lists.\n\n    The second dict contains all other fields from the metadata. This includes\n    any unrecognized fields. It also includes any fields which are expected to\n    be parsed into a built-in type but were not formatted appropriately. Finally,\n    any fields that are expected to appear only once but are repeated are\n    included in this dict.\n\n    ")), AnnAssign(target=Name(id='raw', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='unparsed', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='parser', ctx=Load()), attr='Parser', ctx=Load()), args=[], keywords=[keyword(arg='policy', value=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='policy', ctx=Load()), attr='compat32', ctx=Load()))]), attr='parsestr', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='parser', ctx=Load()), attr='BytesParser', ctx=Load()), args=[], keywords=[keyword(arg='policy', value=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='policy', ctx=Load()), attr='compat32', ctx=Load()))]), attr='parsebytes', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))]), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='frozenset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_all', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='valid_encoding', ctx=Store())], value=Constant(value=True)), For(target=Name(id='h', ctx=Store()), iter=Name(id='headers', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='h', ctx=Load()), Tuple(elts=[Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='Header', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='h', ctx=Load()), Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='Header', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='chunks', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='bin', ctx=Store()), Name(id='encoding', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='decode_header', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='bin', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8'), Constant(value='strict')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='latin1')), Assign(targets=[Name(id='valid_encoding', ctx=Store())], value=Constant(value=False))])], orelse=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='utf8'))], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='chunks', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='bin', ctx=Load()), Name(id='encoding', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='make_header', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='valid_encoding', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Continue()], orelse=[]), Assign(targets=[Name(id='raw_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='raw_name', ctx=Load()), ops=[In()], comparators=[Name(id='_STRING_FIELDS', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[In()], comparators=[Name(id='_LIST_FIELDS', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='raw_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='keywords')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_parse_keywords', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='project_urls')]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_parse_project_urls', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])])])])], orelse=[]), Try(body=[Assign(targets=[Name(id='payload', ctx=Store())], value=Call(func=Name(id='_get_payload', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='unparsed', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='description'), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[keyword(arg='decode', value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]))])], keywords=[]))])], orelse=[If(test=Name(id='payload', ctx=Load()), body=[If(test=Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='raw', ctx=Load())]), body=[Assign(targets=[Name(id='description_header', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Attribute(value=Name(id='raw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='description')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='unparsed', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='description'), List(elts=[], ctx=Load())], keywords=[]), attr='extend', ctx=Load()), args=[List(elts=[Name(id='description_header', ctx=Load()), Name(id='payload', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='unparsed', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='unparsed', ctx=Load()), slice=Constant(value='description'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='payload', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Constant(value='description'), ctx=Store())], value=Name(id='payload', ctx=Load()))])])], orelse=[])], finalbody=[]), Return(value=Tuple(elts=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='RawMetadata', ctx=Load()), Name(id='raw', ctx=Load())], keywords=[]), Name(id='unparsed', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='RawMetadata', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_NOT_FOUND', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_VALID_METADATA_VERSIONS', ctx=Store())], value=List(elts=[Constant(value='1.0'), Constant(value='1.1'), Constant(value='1.2'), Constant(value='2.1'), Constant(value='2.2'), Constant(value='2.3')], ctx=Load())), Assign(targets=[Name(id='_MetadataVersion', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='1.0'), Constant(value='1.1'), Constant(value='1.2'), Constant(value='2.1'), Constant(value='2.2'), Constant(value='2.3')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_REQUIRED_ATTRS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='metadata_version'), Constant(value='name'), Constant(value='version')], ctx=Load())], keywords=[])), ClassDef(name='_Validator', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Validate a metadata field.\n\n    All _process_*() methods correspond to a core metadata field. The method is\n    called with the field\'s raw value. If the raw value is valid it is returned\n    in its "enriched" form (e.g. ``version.Version`` for the ``Version`` field).\n    If the raw value is invalid, :exc:`InvalidMetadata` is raised (with a cause\n    as appropriate).\n    ')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='raw_name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='added', ctx=Store()), annotation=Name(id='_MetadataVersion', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='added', annotation=Name(id='_MetadataVersion', ctx=Load()))], kw_defaults=[Constant(value='1.0')], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='added', ctx=Store())], value=Name(id='added', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__set_name__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_owner', annotation=Constant(value='Metadata')), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_name', ctx=Store())], value=Subscript(value=Name(id='_RAW_TO_EMAIL_MAPPING', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance', annotation=Constant(value='Metadata')), arg(arg='_owner', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='Metadata'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cache', ctx=Store())], value=Attribute(value=Name(id='instance', ctx=Load()), attr='__dict__', ctx=Load())), Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='instance', ctx=Load()), attr='_raw', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='_STRING_FIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='_LIST_FIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='_DICT_FIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[Assert(test=Constant(value=False))])])])])], orelse=[], finalbody=[]), Try(body=[AnnAssign(target=Name(id='converter', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), JoinedStr(values=[Constant(value='_process_'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1)])], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], finalbody=[]), Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Try(body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='instance', ctx=Load()), attr='_raw', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='T', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='T', ctx=Load())), FunctionDef(name='_invalid_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='cause', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Exception', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='InvalidMetadata', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_name', ctx=Load()), Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format_map', ctx=Load()), args=[Dict(keys=[Constant(value='field')], values=[Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='exc', ctx=Load()), attr='__cause__', ctx=Store())], value=Name(id='cause', ctx=Load())), Return(value=Name(id='exc', ctx=Load()))], decorator_list=[], returns=Name(id='InvalidMetadata', ctx=Load())), FunctionDef(name='_process_metadata_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_VALID_METADATA_VERSIONS', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is not a valid metadata version')])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='_MetadataVersion', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='_MetadataVersion', ctx=Load())), FunctionDef(name='_process_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='value', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[Constant(value='{field} is a required field')], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='canonicalize_name', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='validate', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='utils', ctx=Load()), attr='InvalidName', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is invalid for {field}')])], keywords=[keyword(arg='cause', value=Name(id='exc', ctx=Load()))]))])], orelse=[Return(value=Name(id='value', ctx=Load()))], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_process_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='value', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[Constant(value='{field} is a required field')], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='version_module', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='version_module', ctx=Load()), attr='InvalidVersion', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is invalid for {field}')])], keywords=[keyword(arg='cause', value=Name(id='exc', ctx=Load()))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='version_module', ctx=Load()), attr='Version', ctx=Load())), FunctionDef(name='_process_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the field contains no newlines.')), If(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='value', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[Constant(value='{field} must be a single line')], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_process_description_content_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='content_types', ctx=Store())], value=Set(elts=[Constant(value='text/plain'), Constant(value='text/x-rst'), Constant(value='text/markdown')])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='EmailMessage', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='message', ctx=Load()), slice=Constant(value='content-type'), ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='content_type', ctx=Store()), Name(id='parameters', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='get_content_type', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), Attribute(value=Subscript(value=Name(id='message', ctx=Load()), slice=Constant(value='content-type'), ctx=Load()), attr='params', ctx=Load())], ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='content_type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='content_types', ctx=Load())]), Compare(left=Name(id='content_type', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[Constant(value='{field} must be one of '), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='content_types', ctx=Load())], keywords=[]), conversion=-1), Constant(value=', not '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='charset', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='charset'), Constant(value='UTF-8')], keywords=[])), If(test=Compare(left=Name(id='charset', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='UTF-8')]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[Constant(value='{field} can only specify the UTF-8 charset, not '), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='charset', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='markdown_variants', ctx=Store())], value=Set(elts=[Constant(value='GFM'), Constant(value='CommonMark')])), Assign(targets=[Name(id='variant', ctx=Store())], value=Call(func=Attribute(value=Name(id='parameters', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='variant'), Constant(value='GFM')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='content_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='text/markdown')]), Compare(left=Name(id='variant', ctx=Load()), ops=[NotIn()], comparators=[Name(id='markdown_variants', ctx=Load())])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[Constant(value='valid Markdown variants for {field} are '), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='markdown_variants', ctx=Load())], keywords=[]), conversion=-1), Constant(value=', not '), FormattedValue(value=Name(id='variant', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_process_dynamic', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='dynamic_field', ctx=Store()), iter=Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='lower', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='dynamic_field', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='name'), Constant(value='version'), Constant(value='metadata-version')])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is not allowed as a dynamic field')])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='dynamic_field', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is not a valid dynamic field')])], keywords=[]))], orelse=[])])], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='lower', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_process_provides_extra', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='normalized_names', ctx=Store())], value=List(elts=[], ctx=Load())), Try(body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='normalized_names', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='utils', ctx=Load()), attr='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='validate', value=Constant(value=True))])], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='utils', ctx=Load()), attr='InvalidName', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=' is invalid for {field}')])], keywords=[keyword(arg='cause', value=Name(id='exc', ctx=Load()))]))])], orelse=[Return(value=Name(id='normalized_names', ctx=Load()))], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='utils', ctx=Load()), attr='NormalizedName', ctx=Load()), ctx=Load())), FunctionDef(name='_process_requires_python', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='specifiers', ctx=Load()), attr='SpecifierSet', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='specifiers', ctx=Load()), attr='InvalidSpecifier', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=114), Constant(value=' is invalid for {field}')])], keywords=[keyword(arg='cause', value=Name(id='exc', ctx=Load()))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Attribute(value=Name(id='specifiers', ctx=Load()), attr='SpecifierSet', ctx=Load())), FunctionDef(name='_process_requires_dist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reqs', ctx=Store())], value=List(elts=[], ctx=Load())), Try(body=[For(target=Name(id='req', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='reqs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='Requirement', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='requirements', ctx=Load()), attr='InvalidRequirement', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_invalid_metadata', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='req', ctx=Load()), conversion=114), Constant(value=' is invalid for {field}')])], keywords=[keyword(arg='cause', value=Name(id='exc', ctx=Load()))]))])], orelse=[Return(value=Name(id='reqs', ctx=Load()))], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='requirements', ctx=Load()), attr='Requirement', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Metadata', bases=[], keywords=[], body=[Expr(value=Constant(value='Representation of distribution metadata.\n\n    Compared to :class:`RawMetadata`, this class provides objects representing\n    metadata fields instead of only using built-in types. Any invalid metadata\n    will cause :exc:`InvalidMetadata` to be raised (with a\n    :py:attr:`~BaseException.__cause__` attribute as appropriate).\n    ')), AnnAssign(target=Name(id='_raw', ctx=Store()), annotation=Name(id='RawMetadata', ctx=Load()), simple=1), FunctionDef(name='from_raw', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='data', annotation=Name(id='RawMetadata', ctx=Load()))], kwonlyargs=[arg(arg='validate', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value='Create an instance from :class:`RawMetadata`.\n\n        If *validate* is true, all metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        ')), Assign(targets=[Name(id='ins', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='ins', ctx=Load()), attr='_raw', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='validate', ctx=Load()), body=[AnnAssign(target=Name(id='exceptions', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InvalidMetadata', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Try(body=[Assign(targets=[Name(id='metadata_version', ctx=Store())], value=Attribute(value=Name(id='ins', ctx=Load()), attr='metadata_version', ctx=Load())), Assign(targets=[Name(id='metadata_age', ctx=Store())], value=Call(func=Attribute(value=Name(id='_VALID_METADATA_VERSIONS', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='metadata_version', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidMetadata', ctx=Load()), name='metadata_version_exc', body=[Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='metadata_version_exc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metadata_version', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='fields_to_check', ctx=Store())], value=BinOp(left=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='ins', ctx=Load()), attr='_raw', ctx=Load())], keywords=[]), op=BitOr(), right=Name(id='_REQUIRED_ATTRS', ctx=Load()))), AugAssign(target=Name(id='fields_to_check', ctx=Store()), op=Sub(), value=Set(elts=[Constant(value='metadata_version')])), For(target=Name(id='key', ctx=Store()), iter=Name(id='fields_to_check', ctx=Load()), body=[Try(body=[If(test=Name(id='metadata_version', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='field_metadata_version', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='added', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='InvalidMetadata', ctx=Load()), args=[Name(id='key', ctx=Load()), JoinedStr(values=[Constant(value='unrecognized field: '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=114)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='field_age', ctx=Store())], value=Call(func=Attribute(value=Name(id='_VALID_METADATA_VERSIONS', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='field_metadata_version', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='field_age', ctx=Load()), ops=[Gt()], comparators=[Name(id='metadata_age', ctx=Load())]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Subscript(value=Name(id='_RAW_TO_EMAIL_MAPPING', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='InvalidMetadata', ctx=Load()), args=[Name(id='field', ctx=Load()), Constant(value='{field} introduced in metadata version {field_metadata_version}, not {metadata_version}')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), Continue()], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ins', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidMetadata', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='exceptions', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ExceptionGroup', ctx=Load()), args=[Constant(value='invalid metadata'), Name(id='exceptions', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='ins', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Metadata')), FunctionDef(name='from_email', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='validate', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value='Parse metadata from email headers.\n\n        If *validate* is true, the metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        ')), AnnAssign(target=Name(id='exceptions', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='InvalidMetadata', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Tuple(elts=[Name(id='raw', ctx=Store()), Name(id='unparsed', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_email', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Name(id='validate', ctx=Load()), body=[For(target=Name(id='unparsed_key', ctx=Store()), iter=Name(id='unparsed', ctx=Load()), body=[If(test=Compare(left=Name(id='unparsed_key', ctx=Load()), ops=[In()], comparators=[Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Load())]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='unparsed_key', ctx=Load()), conversion=114), Constant(value=' has invalid data')]))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='unrecognized field: '), FormattedValue(value=Name(id='unparsed_key', ctx=Load()), conversion=114)]))]), Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='InvalidMetadata', ctx=Load()), args=[Name(id='unparsed_key', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='exceptions', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ExceptionGroup', ctx=Load()), args=[Constant(value='unparsed'), Name(id='exceptions', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_raw', ctx=Load()), args=[Name(id='raw', ctx=Load())], keywords=[keyword(arg='validate', value=Name(id='validate', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ExceptionGroup', ctx=Load()), name='exc_group', body=[Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='exc_group', ctx=Load()), attr='exceptions', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='ExceptionGroup', ctx=Load()), args=[Constant(value='invalid or unparsed metadata'), Name(id='exceptions', ctx=Load())], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Metadata')), AnnAssign(target=Name(id='metadata_version', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='_MetadataVersion', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-metadata-version`\n    (required; validated to be a valid metadata version)')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-name`\n    (required; validated using :func:`~packaging.utils.canonicalize_name` and its\n    *validate* parameter)')), AnnAssign(target=Name(id='version', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Attribute(value=Name(id='version_module', ctx=Load()), attr='Version', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-version` (required)')), AnnAssign(target=Name(id='dynamic', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='2.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-dynamic`\n    (validated against core metadata field names and lowercased)')), AnnAssign(target=Name(id='platforms', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-platform`')), AnnAssign(target=Name(id='supported_platforms', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-supported-platform`')), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-summary` (validated to contain no newlines)')), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-description`')), AnnAssign(target=Name(id='description_content_type', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='2.1'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-description-content-type` (validated)')), AnnAssign(target=Name(id='keywords', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-keywords`')), AnnAssign(target=Name(id='home_page', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-home-page`')), AnnAssign(target=Name(id='download_url', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-download-url`')), AnnAssign(target=Name(id='author', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-author`')), AnnAssign(target=Name(id='author_email', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-author-email`')), AnnAssign(target=Name(id='maintainer', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-maintainer`')), AnnAssign(target=Name(id='maintainer_email', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-maintainer-email`')), AnnAssign(target=Name(id='license', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-license`')), AnnAssign(target=Name(id='classifiers', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-classifier`')), AnnAssign(target=Name(id='requires_dist', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='requirements', ctx=Load()), attr='Requirement', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-requires-dist`')), AnnAssign(target=Name(id='requires_python', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Attribute(value=Name(id='specifiers', ctx=Load()), attr='SpecifierSet', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-requires-python`')), AnnAssign(target=Name(id='requires_external', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-requires-external`')), AnnAssign(target=Name(id='project_urls', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-project-url`')), AnnAssign(target=Name(id='provides_extra', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='utils', ctx=Load()), attr='NormalizedName', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='2.1'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-provides-extra`')), AnnAssign(target=Name(id='provides_dist', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-provides-dist`')), AnnAssign(target=Name(id='obsoletes_dist', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.2'))]), simple=1), Expr(value=Constant(value=':external:ref:`core-metadata-obsoletes-dist`')), AnnAssign(target=Name(id='requires', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value='``Requires`` (deprecated)')), AnnAssign(target=Name(id='provides', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value='``Provides`` (deprecated)')), AnnAssign(target=Name(id='obsoletes', ctx=Store()), annotation=Subscript(value=Name(id='_Validator', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='_Validator', ctx=Load()), args=[], keywords=[keyword(arg='added', value=Constant(value='1.1'))]), simple=1), Expr(value=Constant(value='``Obsoletes`` (deprecated)'))], decorator_list=[])], type_ignores=[])