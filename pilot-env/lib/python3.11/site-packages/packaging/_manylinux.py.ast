Module(body=[Import(names=[alias(name='collections')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Generator'), alias(name='Iterator'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple')], level=0), ImportFrom(module='_elffile', names=[alias(name='EIClass'), alias(name='EIData'), alias(name='ELFFile'), alias(name='EMachine')], level=1), Assign(targets=[Name(id='EF_ARM_ABIMASK', ctx=Store())], value=Constant(value=4278190080)), Assign(targets=[Name(id='EF_ARM_ABI_VER5', ctx=Store())], value=Constant(value=83886080)), Assign(targets=[Name(id='EF_ARM_ABI_FLOAT_HARD', ctx=Store())], value=Constant(value=1024)), FunctionDef(name='_parse_elf', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Yield(value=Call(func=Name(id='ELFFile', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='TypeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Expr(value=Yield(value=Constant(value=None)))])], orelse=[], finalbody=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ELFFile', ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_is_linux_armhf', args=arguments(posonlyargs=[], args=[arg(arg='executable', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='_parse_elf', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='f', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='capacity', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EIClass', ctx=Load()), attr='C32', ctx=Load())]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EIData', ctx=Load()), attr='Lsb', ctx=Load())]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='machine', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EMachine', ctx=Load()), attr='Arm', ctx=Load())]), Compare(left=BinOp(left=Attribute(value=Name(id='f', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='EF_ARM_ABIMASK', ctx=Load())), ops=[Eq()], comparators=[Name(id='EF_ARM_ABI_VER5', ctx=Load())]), Compare(left=BinOp(left=Attribute(value=Name(id='f', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='EF_ARM_ABI_FLOAT_HARD', ctx=Load())), ops=[Eq()], comparators=[Name(id='EF_ARM_ABI_FLOAT_HARD', ctx=Load())])]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_is_linux_i686', args=arguments(posonlyargs=[], args=[arg(arg='executable', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='_parse_elf', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='f', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='capacity', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EIClass', ctx=Load()), attr='C32', ctx=Load())]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EIData', ctx=Load()), attr='Lsb', ctx=Load())]), Compare(left=Attribute(value=Name(id='f', ctx=Load()), attr='machine', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='EMachine', ctx=Load()), attr='I386', ctx=Load())])]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_have_compatible_abi', args=arguments(posonlyargs=[], args=[arg(arg='executable', annotation=Name(id='str', ctx=Load())), arg(arg='archs', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='armv7l'), ops=[In()], comparators=[Name(id='archs', ctx=Load())]), body=[Return(value=Call(func=Name(id='_is_linux_armhf', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='i686'), ops=[In()], comparators=[Name(id='archs', ctx=Load())]), body=[Return(value=Call(func=Name(id='_is_linux_i686', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='allowed_archs', ctx=Store())], value=Set(elts=[Constant(value='x86_64'), Constant(value='aarch64'), Constant(value='ppc64'), Constant(value='ppc64le'), Constant(value='s390x'), Constant(value='loongarch64')])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='arch', ctx=Load()), ops=[In()], comparators=[Name(id='allowed_archs', ctx=Load())]), generators=[comprehension(target=Name(id='arch', ctx=Store()), iter=Name(id='archs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), AnnAssign(target=Name(id='_LAST_GLIBC_MINOR', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=50))], keywords=[]), simple=1), ClassDef(name='_GLibCVersion', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='major', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='minor', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='_glibc_version_string_confstr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Primary implementation of glibc_version_string using os.confstr.\n    ')), Try(body=[AnnAssign(target=Name(id='version_string', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='confstr')], keywords=[]), args=[Constant(value='CS_GNU_LIBC_VERSION')], keywords=[]), simple=1), Assert(test=Compare(left=Name(id='version_string', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='version_string', ctx=Load()), attr='rsplit', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AssertionError', ctx=Load()), Name(id='AttributeError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_glibc_version_string_ctypes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Fallback implementation of glibc_version_string using ctypes.\n    ')), Try(body=[Import(names=[alias(name='ctypes')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='process_namespace', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='CDLL', ctx=Load()), args=[Constant(value=None)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='gnu_get_libc_version', ctx=Store())], value=Attribute(value=Name(id='process_namespace', ctx=Load()), attr='gnu_get_libc_version', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='gnu_get_libc_version', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char_p', ctx=Load())), AnnAssign(target=Name(id='version_str', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Name(id='gnu_get_libc_version', ctx=Load()), args=[], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='version_str', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[]), Return(value=Name(id='version_str', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_glibc_version_string', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns glibc version string, or None if not using glibc.')), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='_glibc_version_string_confstr', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='_glibc_version_string_ctypes', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_glibc_version', args=arguments(posonlyargs=[], args=[arg(arg='version_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse glibc version.\n\n    We use a regexp instead of str.split because we want to discard any\n    random junk that might come after the minor version -- this might happen\n    in patched/forked versions of glibc (e.g. Linaro\'s version of glibc\n    uses version strings like "2.20-2014.11"). See gh-3588.\n    ')), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)'), Name(id='version_str', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected glibc version with 2 components major.minor, got: '), FormattedValue(value=Name(id='version_str', ctx=Load()), conversion=-1)]), Name(id='RuntimeWarning', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='major')], keywords=[])], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='minor')], keywords=[])], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_glibc_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Name(id='_glibc_version_string', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='version_str', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='_parse_glibc_version', ctx=Load()), args=[Name(id='version_str', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_is_compatible', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load())), arg(arg='version', annotation=Name(id='_GLibCVersion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sys_glibc', ctx=Store())], value=Call(func=Name(id='_get_glibc_version', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='sys_glibc', ctx=Load()), ops=[Lt()], comparators=[Name(id='version', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Import(names=[alias(name='_manylinux')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[], finalbody=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_manylinux', ctx=Load()), Constant(value='manylinux_compatible')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='_manylinux', ctx=Load()), attr='manylinux_compatible', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='arch', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Constant(value=2), Constant(value=5)], keywords=[])]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_manylinux', ctx=Load()), Constant(value='manylinux1_compatible')], keywords=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='_manylinux', ctx=Load()), attr='manylinux1_compatible', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Constant(value=2), Constant(value=12)], keywords=[])]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_manylinux', ctx=Load()), Constant(value='manylinux2010_compatible')], keywords=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='_manylinux', ctx=Load()), attr='manylinux2010_compatible', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Constant(value=2), Constant(value=17)], keywords=[])]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_manylinux', ctx=Load()), Constant(value='manylinux2014_compatible')], keywords=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='_manylinux', ctx=Load()), attr='manylinux2014_compatible', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_LEGACY_MANYLINUX_MAP', ctx=Store())], value=Dict(keys=[Tuple(elts=[Constant(value=2), Constant(value=17)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=12)], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value=5)], ctx=Load())], values=[Constant(value='manylinux2014'), Constant(value='manylinux2010'), Constant(value='manylinux1')])), FunctionDef(name='platform_tags', args=arguments(posonlyargs=[], args=[arg(arg='archs', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate manylinux tags compatible to the current platform.\n\n    :param archs: Sequence of compatible architectures.\n        The first one shall be the closest to the actual architecture and be the part of\n        platform tag after the ``linux_`` prefix, e.g. ``x86_64``.\n        The ``linux_`` prefix is assumed as a prerequisite for the current platform to\n        be manylinux-compatible.\n\n    :returns: An iterator of compatible manylinux tags.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_have_compatible_abi', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Name(id='archs', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='too_old_glibc2', ctx=Store())], value=Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Constant(value=2), Constant(value=16)], keywords=[])), If(test=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='archs', ctx=Load())], keywords=[]), op=BitAnd(), right=Set(elts=[Constant(value='x86_64'), Constant(value='i686')])), body=[Assign(targets=[Name(id='too_old_glibc2', ctx=Store())], value=Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Constant(value=2), Constant(value=4)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='current_glibc', ctx=Store())], value=Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Starred(value=Call(func=Name(id='_get_glibc_version', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='glibc_max_list', ctx=Store())], value=List(elts=[Name(id='current_glibc', ctx=Load())], ctx=Load())), For(target=Name(id='glibc_major', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='current_glibc', ctx=Load()), attr='major', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='glibc_minor', ctx=Store())], value=Subscript(value=Name(id='_LAST_GLIBC_MINOR', ctx=Load()), slice=Name(id='glibc_major', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='glibc_max_list', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Name(id='glibc_major', ctx=Load()), Name(id='glibc_minor', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='arch', ctx=Store()), iter=Name(id='archs', ctx=Load()), body=[For(target=Name(id='glibc_max', ctx=Store()), iter=Name(id='glibc_max_list', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='glibc_max', ctx=Load()), attr='major', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='too_old_glibc2', ctx=Load()), attr='major', ctx=Load())]), body=[Assign(targets=[Name(id='min_minor', ctx=Store())], value=Attribute(value=Name(id='too_old_glibc2', ctx=Load()), attr='minor', ctx=Load()))], orelse=[Assign(targets=[Name(id='min_minor', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))]), For(target=Name(id='glibc_minor', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='glibc_max', ctx=Load()), attr='minor', ctx=Load()), Name(id='min_minor', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='glibc_version', ctx=Store())], value=Call(func=Name(id='_GLibCVersion', ctx=Load()), args=[Attribute(value=Name(id='glibc_max', ctx=Load()), attr='major', ctx=Load()), Name(id='glibc_minor', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tag', ctx=Store())], value=Call(func=Attribute(value=Constant(value='manylinux_{}_{}'), attr='format', ctx=Load()), args=[Starred(value=Name(id='glibc_version', ctx=Load()), ctx=Load())], keywords=[])), If(test=Call(func=Name(id='_is_compatible', ctx=Load()), args=[Name(id='arch', ctx=Load()), Name(id='glibc_version', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='tag', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='arch', ctx=Load()), conversion=-1)])))], orelse=[]), If(test=Compare(left=Name(id='glibc_version', ctx=Load()), ops=[In()], comparators=[Name(id='_LEGACY_MANYLINUX_MAP', ctx=Load())]), body=[Assign(targets=[Name(id='legacy_tag', ctx=Store())], value=Subscript(value=Name(id='_LEGACY_MANYLINUX_MAP', ctx=Load()), slice=Name(id='glibc_version', ctx=Load()), ctx=Load())), If(test=Call(func=Name(id='_is_compatible', ctx=Load()), args=[Name(id='arch', ctx=Load()), Name(id='glibc_version', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='legacy_tag', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='arch', ctx=Load()), conversion=-1)])))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])