Module(body=[Import(names=[alias(name='enum')]), Import(names=[alias(name='string')]), Import(names=[alias(name='unicodedata')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), Import(names=[alias(name='regex._regex', asname='_regex')]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='A'), Constant(value='ASCII'), Constant(value='B'), Constant(value='BESTMATCH'), Constant(value='D'), Constant(value='DEBUG'), Constant(value='E'), Constant(value='ENHANCEMATCH'), Constant(value='F'), Constant(value='FULLCASE'), Constant(value='I'), Constant(value='IGNORECASE'), Constant(value='L'), Constant(value='LOCALE'), Constant(value='M'), Constant(value='MULTILINE'), Constant(value='P'), Constant(value='POSIX'), Constant(value='R'), Constant(value='REVERSE'), Constant(value='S'), Constant(value='DOTALL'), Constant(value='T'), Constant(value='TEMPLATE'), Constant(value='U'), Constant(value='UNICODE'), Constant(value='V0'), Constant(value='VERSION0'), Constant(value='V1'), Constant(value='VERSION1'), Constant(value='W'), Constant(value='WORD'), Constant(value='X'), Constant(value='VERBOSE'), Constant(value='error'), Constant(value='Scanner'), Constant(value='RegexFlag')], ctx=Load())), ClassDef(name='error', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exception raised for invalid regular expressions.\n\n    Attributes:\n\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The position in the pattern where compilation failed, or None\n        lineno: The line number where compilation failed, unless pos is None\n        colno: The column number where compilation failed, unless pos is None\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='pattern'), arg(arg='pos')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='newline', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Constant(value='\n'), orelse=Constant(value=b'\n'))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pattern', ctx=Store())], value=Name(id='pattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='pattern', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='pos', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='newline', ctx=Load()), Constant(value=0), Name(id='pos', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='colno', ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='rfind', ctx=Load()), args=[Name(id='newline', ctx=Load()), Constant(value=0), Name(id='pos', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} at position {}'), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='newline', ctx=Load()), ops=[In()], comparators=[Name(id='pattern', ctx=Load())]), body=[AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=' (line {}, column {})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='colno', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='Exception', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_UnscopedFlagSet', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='ParseError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='_FirstSetError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='RegexFlag', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntFlag', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='A', ctx=Store()), Name(id='ASCII', ctx=Store())], value=Constant(value=128)), Assign(targets=[Name(id='B', ctx=Store()), Name(id='BESTMATCH', ctx=Store())], value=Constant(value=4096)), Assign(targets=[Name(id='D', ctx=Store()), Name(id='DEBUG', ctx=Store())], value=Constant(value=512)), Assign(targets=[Name(id='E', ctx=Store()), Name(id='ENHANCEMATCH', ctx=Store())], value=Constant(value=32768)), Assign(targets=[Name(id='F', ctx=Store()), Name(id='FULLCASE', ctx=Store())], value=Constant(value=16384)), Assign(targets=[Name(id='I', ctx=Store()), Name(id='IGNORECASE', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='L', ctx=Store()), Name(id='LOCALE', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='M', ctx=Store()), Name(id='MULTILINE', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='P', ctx=Store()), Name(id='POSIX', ctx=Store())], value=Constant(value=65536)), Assign(targets=[Name(id='R', ctx=Store()), Name(id='REVERSE', ctx=Store())], value=Constant(value=1024)), Assign(targets=[Name(id='S', ctx=Store()), Name(id='DOTALL', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='U', ctx=Store()), Name(id='UNICODE', ctx=Store())], value=Constant(value=32)), Assign(targets=[Name(id='V0', ctx=Store()), Name(id='VERSION0', ctx=Store())], value=Constant(value=8192)), Assign(targets=[Name(id='V1', ctx=Store()), Name(id='VERSION1', ctx=Store())], value=Constant(value=256)), Assign(targets=[Name(id='W', ctx=Store()), Name(id='WORD', ctx=Store())], value=Constant(value=2048)), Assign(targets=[Name(id='X', ctx=Store()), Name(id='VERBOSE', ctx=Store())], value=Constant(value=64)), Assign(targets=[Name(id='T', ctx=Store()), Name(id='TEMPLATE', ctx=Store())], value=Constant(value=1)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name_', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=BinOp(left=Constant(value='regex.%s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_name_', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_value_', ctx=Load())), Assign(targets=[Name(id='members', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='negative', ctx=Store())], value=Compare(left=Name(id='value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])), If(test=Name(id='negative', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=UnaryOp(op=Invert(), operand=Name(id='value', ctx=Load())))], orelse=[]), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), body=[If(test=BinOp(left=Name(id='value', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='m', ctx=Load()), attr='_value_', ctx=Load())), body=[AugAssign(target=Name(id='value', ctx=Store()), op=BitAnd(), value=UnaryOp(op=Invert(), operand=Attribute(value=Name(id='m', ctx=Load()), attr='_value_', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='members', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='regex.%s'), op=Mod(), right=Attribute(value=Name(id='m', ctx=Load()), attr='_name_', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='members', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='hex', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Name(id='members', ctx=Load())], keywords=[])), If(test=Name(id='negative', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='members', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=BinOp(left=Constant(value='~(%s)'), op=Mod(), right=Name(id='res', ctx=Load())))], orelse=[Assign(targets=[Name(id='res', ctx=Store())], value=BinOp(left=Constant(value='~%s'), op=Mod(), right=Name(id='res', ctx=Load())))])], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__str__', ctx=Store())], value=Attribute(value=Name(id='object', ctx=Load()), attr='__str__', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='RegexFlag', ctx=Load()), attr='__members__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='DEFAULT_VERSION', ctx=Store())], value=Name(id='VERSION1', ctx=Load())), Assign(targets=[Name(id='_ALL_VERSIONS', ctx=Store())], value=BinOp(left=Name(id='VERSION0', ctx=Load()), op=BitOr(), right=Name(id='VERSION1', ctx=Load()))), Assign(targets=[Name(id='_ALL_ENCODINGS', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ASCII', ctx=Load()), op=BitOr(), right=Name(id='LOCALE', ctx=Load())), op=BitOr(), right=Name(id='UNICODE', ctx=Load()))), Assign(targets=[Name(id='DEFAULT_FLAGS', ctx=Store())], value=Dict(keys=[Name(id='VERSION0', ctx=Load()), Name(id='VERSION1', ctx=Load())], values=[Constant(value=0), Name(id='FULLCASE', ctx=Load())])), Assign(targets=[Name(id='GLOBAL_FLAGS', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='_ALL_VERSIONS', ctx=Load()), op=BitOr(), right=Name(id='BESTMATCH', ctx=Load())), op=BitOr(), right=Name(id='DEBUG', ctx=Load())), op=BitOr(), right=Name(id='ENHANCEMATCH', ctx=Load())), op=BitOr(), right=Name(id='POSIX', ctx=Load())), op=BitOr(), right=Name(id='REVERSE', ctx=Load()))), Assign(targets=[Name(id='SCOPED_FLAGS', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='FULLCASE', ctx=Load()), op=BitOr(), right=Name(id='IGNORECASE', ctx=Load())), op=BitOr(), right=Name(id='MULTILINE', ctx=Load())), op=BitOr(), right=Name(id='DOTALL', ctx=Load())), op=BitOr(), right=Name(id='WORD', ctx=Load())), op=BitOr(), right=Name(id='VERBOSE', ctx=Load())), op=BitOr(), right=Name(id='_ALL_ENCODINGS', ctx=Load()))), Assign(targets=[Name(id='ALPHA', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='string', ctx=Load()), attr='ascii_letters', ctx=Load())], keywords=[])), Assign(targets=[Name(id='DIGITS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='string', ctx=Load()), attr='digits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ALNUM', ctx=Store())], value=BinOp(left=Name(id='ALPHA', ctx=Load()), op=BitOr(), right=Name(id='DIGITS', ctx=Load()))), Assign(targets=[Name(id='OCT_DIGITS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='string', ctx=Load()), attr='octdigits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='HEX_DIGITS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='string', ctx=Load()), attr='hexdigits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='SPECIAL_CHARS', ctx=Store())], value=BinOp(left=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value='()|?*+{^$.[\\#')], keywords=[]), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='')], ctx=Load())], keywords=[]))), Assign(targets=[Name(id='NAMED_CHAR_PART', ctx=Store())], value=BinOp(left=Name(id='ALNUM', ctx=Load()), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value=' -')], keywords=[]))), Assign(targets=[Name(id='PROPERTY_NAME_PART', ctx=Store())], value=BinOp(left=Name(id='ALNUM', ctx=Load()), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value=' &_-.')], keywords=[]))), Assign(targets=[Name(id='SET_OPS', ctx=Store())], value=Tuple(elts=[Constant(value='||'), Constant(value='~~'), Constant(value='&&'), Constant(value='--')], ctx=Load())), Assign(targets=[Name(id='BYTES_PER_CODE', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_code_size', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='BITS_PER_CODE', ctx=Store())], value=BinOp(left=Name(id='BYTES_PER_CODE', ctx=Load()), op=Mult(), right=Constant(value=8))), Assign(targets=[Name(id='UNLIMITED', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='BITS_PER_CODE', ctx=Load())), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='REGEX_FLAGS', ctx=Store())], value=Dict(keys=[Constant(value='a'), Constant(value='b'), Constant(value='e'), Constant(value='f'), Constant(value='i'), Constant(value='L'), Constant(value='m'), Constant(value='p'), Constant(value='r'), Constant(value='s'), Constant(value='u'), Constant(value='V0'), Constant(value='V1'), Constant(value='w'), Constant(value='x')], values=[Name(id='ASCII', ctx=Load()), Name(id='BESTMATCH', ctx=Load()), Name(id='ENHANCEMATCH', ctx=Load()), Name(id='FULLCASE', ctx=Load()), Name(id='IGNORECASE', ctx=Load()), Name(id='LOCALE', ctx=Load()), Name(id='MULTILINE', ctx=Load()), Name(id='POSIX', ctx=Load()), Name(id='REVERSE', ctx=Load()), Name(id='DOTALL', ctx=Load()), Name(id='UNICODE', ctx=Load()), Name(id='VERSION0', ctx=Load()), Name(id='VERSION1', ctx=Load()), Name(id='WORD', ctx=Load()), Name(id='VERBOSE', ctx=Load())])), Assign(targets=[Name(id='CASE_FLAGS', ctx=Store())], value=BinOp(left=Name(id='FULLCASE', ctx=Load()), op=BitOr(), right=Name(id='IGNORECASE', ctx=Load()))), Assign(targets=[Name(id='NOCASE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='FULLIGNORECASE', ctx=Store())], value=BinOp(left=Name(id='FULLCASE', ctx=Load()), op=BitOr(), right=Name(id='IGNORECASE', ctx=Load()))), Assign(targets=[Name(id='FULL_CASE_FOLDING', ctx=Store())], value=BinOp(left=Name(id='UNICODE', ctx=Load()), op=BitOr(), right=Name(id='FULLIGNORECASE', ctx=Load()))), Assign(targets=[Name(id='CASE_FLAGS_COMBINATIONS', ctx=Store())], value=Dict(keys=[Constant(value=0), Name(id='FULLCASE', ctx=Load()), Name(id='IGNORECASE', ctx=Load()), Name(id='FULLIGNORECASE', ctx=Load())], values=[Constant(value=0), Constant(value=0), Name(id='IGNORECASE', ctx=Load()), Name(id='FULLIGNORECASE', ctx=Load())])), Assign(targets=[Name(id='HEX_ESCAPES', ctx=Store())], value=Dict(keys=[Constant(value='x'), Constant(value='u'), Constant(value='U')], values=[Constant(value=2), Constant(value=4), Constant(value=8)])), Assign(targets=[Name(id='OPCODES', ctx=Store())], value=Constant(value='\nFAILURE\nSUCCESS\nANY\nANY_ALL\nANY_ALL_REV\nANY_REV\nANY_U\nANY_U_REV\nATOMIC\nBOUNDARY\nBRANCH\nCALL_REF\nCHARACTER\nCHARACTER_IGN\nCHARACTER_IGN_REV\nCHARACTER_REV\nCONDITIONAL\nDEFAULT_BOUNDARY\nDEFAULT_END_OF_WORD\nDEFAULT_START_OF_WORD\nEND\nEND_OF_LINE\nEND_OF_LINE_U\nEND_OF_STRING\nEND_OF_STRING_LINE\nEND_OF_STRING_LINE_U\nEND_OF_WORD\nFUZZY\nGRAPHEME_BOUNDARY\nGREEDY_REPEAT\nGROUP\nGROUP_CALL\nGROUP_EXISTS\nKEEP\nLAZY_REPEAT\nLOOKAROUND\nNEXT\nPROPERTY\nPROPERTY_IGN\nPROPERTY_IGN_REV\nPROPERTY_REV\nPRUNE\nRANGE\nRANGE_IGN\nRANGE_IGN_REV\nRANGE_REV\nREF_GROUP\nREF_GROUP_FLD\nREF_GROUP_FLD_REV\nREF_GROUP_IGN\nREF_GROUP_IGN_REV\nREF_GROUP_REV\nSEARCH_ANCHOR\nSET_DIFF\nSET_DIFF_IGN\nSET_DIFF_IGN_REV\nSET_DIFF_REV\nSET_INTER\nSET_INTER_IGN\nSET_INTER_IGN_REV\nSET_INTER_REV\nSET_SYM_DIFF\nSET_SYM_DIFF_IGN\nSET_SYM_DIFF_IGN_REV\nSET_SYM_DIFF_REV\nSET_UNION\nSET_UNION_IGN\nSET_UNION_IGN_REV\nSET_UNION_REV\nSKIP\nSTART_OF_LINE\nSTART_OF_LINE_U\nSTART_OF_STRING\nSTART_OF_WORD\nSTRING\nSTRING_FLD\nSTRING_FLD_REV\nSTRING_IGN\nSTRING_IGN_REV\nSTRING_REV\nFUZZY_EXT\n')), ClassDef(name='Namespace', bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Name(id='OP', ctx=Store())], value=Call(func=Name(id='Namespace', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='op', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='OPCODES', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='OP', ctx=Load()), Name(id='op', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='_shrink_cache', args=arguments(posonlyargs=[], args=[arg(arg='cache_dict'), arg(arg='args_dict'), arg(arg='locale_sensitive'), arg(arg='max_length'), arg(arg='divisor')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='Make room in the given cache.\n\n    Args:\n        cache_dict: The cache dictionary to modify.\n        args_dict: The dictionary of named list args used by patterns.\n        max_length: Maximum # of entries in cache_dict before it is shrunk.\n        divisor: Cache will shrink to max_length - 1/divisor*max_length items.\n    ')), Assign(targets=[Name(id='cache_keys', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cache_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='overage', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cache_keys', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='max_length', ctx=Load()))), If(test=Compare(left=Name(id='overage', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='number_to_toss', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='max_length', ctx=Load()), op=FloorDiv(), right=Name(id='divisor', ctx=Load())), op=Add(), right=Name(id='overage', ctx=Load()))), Import(names=[alias(name='random')]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='random', ctx=Load()), Constant(value='sample')], keywords=[])), body=[Return()], orelse=[]), For(target=Name(id='doomed_key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='sample', ctx=Load()), args=[Name(id='cache_keys', ctx=Load()), Name(id='number_to_toss', ctx=Load())], keywords=[]), body=[Try(body=[Delete(targets=[Subscript(value=Name(id='cache_dict', ctx=Load()), slice=Name(id='doomed_key', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='args_dict', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sensitivity_dict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='pattern', ctx=Store()), Name(id='pattern_type', ctx=Store()), Name(id='flags', ctx=Store()), Name(id='args', ctx=Store()), Name(id='default_version', ctx=Store()), Name(id='locale', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='cache_dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='args_dict', ctx=Load()), slice=Tuple(elts=[Name(id='pattern', ctx=Load()), Name(id='pattern_type', ctx=Load()), Name(id='flags', ctx=Load()), Name(id='default_version', ctx=Load()), Name(id='locale', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='args', ctx=Load())), Try(body=[Assign(targets=[Subscript(value=Name(id='sensitivity_dict', ctx=Load()), slice=Tuple(elts=[Name(id='pattern_type', ctx=Load()), Name(id='pattern', ctx=Load())], ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='locale_sensitive', ctx=Load()), slice=Tuple(elts=[Name(id='pattern_type', ctx=Load()), Name(id='pattern', ctx=Load())], ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='locale_sensitive', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='locale_sensitive', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='sensitivity_dict', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_fold_case', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Folds the case of a string.')), Assign(targets=[Name(id='flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), If(test=Compare(left=BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_ENCODINGS', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='info', ctx=Load()), attr='guess_encoding', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='flags', ctx=Load()), Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_cased_i', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='char')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a character is cased.')), Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_all_cases', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), Name(id='char', ctx=Load())], keywords=[])], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='is_cased_f', args=arguments(posonlyargs=[], args=[arg(arg='flags'), arg(arg='char')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a character is cased.')), Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_all_cases', ctx=Load()), args=[Name(id='flags', ctx=Load()), Name(id='char', ctx=Load())], keywords=[])], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='_compile_firstset', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='fs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compiles the firstset for the pattern.')), Assign(targets=[Name(id='reverse', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='REVERSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Name(id='_check_firstset', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fs', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='fs', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='fs', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_check_firstset', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='fs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks the firstset for the pattern.')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='fs', ctx=Load())), Compare(left=Constant(value=None), ops=[In()], comparators=[Name(id='fs', ctx=Load())])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='members', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Name(id='NOCASE', ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Name(id='fs', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='i', ctx=Load()), attr='positive', ctx=Load()))]), body=[Return(value=Constant(value=None))], orelse=[]), AugAssign(target=Name(id='case_flags', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='i', ctx=Load()), attr='case_flags', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='members', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Name(id='NOCASE', ctx=Load()))])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='case_flags', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='FULLCASE', ctx=Load()), op=BitOr(), right=Name(id='IGNORECASE', ctx=Load()))]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Name(id='members', ctx=Load())], keywords=[])], keywords=[keyword(arg='case_flags', value=BinOp(left=Name(id='case_flags', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='FULLCASE', ctx=Load())))), keyword(arg='zerowidth', value=Constant(value=True))])), Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Attribute(value=Name(id='fs', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[keyword(arg='in_set', value=Constant(value=True))])), Return(value=Name(id='fs', ctx=Load()))], decorator_list=[]), FunctionDef(name='_flatten_code', args=arguments(posonlyargs=[], args=[arg(arg='code')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Flattens the code from a list of tuples.')), Assign(targets=[Name(id='flat_code', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Name(id='code', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='flat_code', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='flat_code', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_case_flags', args=arguments(posonlyargs=[], args=[arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes the case flags.')), Assign(targets=[Name(id='flags', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='CASE_FLAGS', ctx=Load()))), If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='ASCII', ctx=Load())), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitAnd(), value=UnaryOp(op=Invert(), operand=Name(id='FULLCASE', ctx=Load())))], orelse=[]), Return(value=Name(id='flags', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_character', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='value'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Makes a character literal.')), If(test=Name(id='in_set', ctx=Load()), body=[Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='case_flags', value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='make_ref_group', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='name'), arg(arg='position')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes a group reference.')), Return(value=Call(func=Name(id='RefGroup', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='name', ctx=Load()), Name(id='position', ctx=Load())], keywords=[keyword(arg='case_flags', value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='make_string_set', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes a string set.')), Return(value=Call(func=Name(id='StringSet', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(arg='case_flags', value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='make_property', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='prop'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes a property.')), If(test=Name(id='in_set', ctx=Load()), body=[Return(value=Name(id='prop', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='prop', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='_parse_pattern', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parses a pattern, eg. 'a|b|c'.")), Assign(targets=[Name(id='branches', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='|')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='branches', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_sequence', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parses a sequence, eg. 'abc'.")), Assign(targets=[Name(id='sequence', ctx=Store())], value=List(elts=[Constant(value=None)], ctx=Load())), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='SPECIAL_CHARS', ctx=Load())]), body=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Constant(value=')|')]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Break()], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=False)], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='(')]), body=[Assign(targets=[Name(id='element', ctx=Store())], value=Call(func=Name(id='parse_paren', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='case_flags', ctx=Store())], value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='DOTALL', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='AnyAll', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='AnyU', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Any', ctx=Load()), args=[], keywords=[])], keywords=[]))])])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='^')]), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='MULTILINE', ctx=Load())), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='StartOfLineU', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='StartOfLine', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='StartOfString', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='$')]), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='MULTILINE', ctx=Load())), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='EndOfLineU', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='EndOfLine', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='EndOfStringLineU', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='EndOfStringLine', ctx=Load()), args=[], keywords=[])], keywords=[]))])])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Constant(value='?*+{')]), body=[Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Name(id='parse_quantifier', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])), If(test=Name(id='counts', ctx=Load()), body=[Expr(value=Call(func=Name(id='apply_quantifier', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='counts', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='ch', ctx=Load()), Name(id='saved_pos', ctx=Load()), Name(id='sequence', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='constraints', ctx=Store())], value=Call(func=Name(id='parse_fuzzy', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='ch', ctx=Load()), Name(id='case_flags', ctx=Load())], keywords=[])), If(test=Name(id='constraints', ctx=Load()), body=[Expr(value=Call(func=Name(id='apply_constraint', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='constraints', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='saved_pos', ctx=Load()), Name(id='sequence', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[]))])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[]))])])])])])])])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='sequence', ctx=Store())], value=ListComp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='sequence', ctx=Load()), ifs=[Compare(left=Name(id='item', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Return(value=Call(func=Name(id='Sequence', ctx=Load()), args=[Name(id='sequence', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='apply_quantifier', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='counts'), arg(arg='case_flags'), arg(arg='ch'), arg(arg='saved_pos'), arg(arg='sequence')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='element', ctx=Store())], value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='sequence', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='multiple repeat'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='nothing to repeat'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Tuple(elts=[Name(id='GreedyRepeat', ctx=Load()), Name(id='LazyRepeat', ctx=Load()), Name(id='PossessiveRepeat', ctx=Load())], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='multiple repeat'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='min_count', ctx=Store()), Name(id='max_count', ctx=Store())], ctx=Store())], value=Name(id='counts', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='?')]), body=[Assign(targets=[Name(id='repeated', ctx=Store())], value=Name(id='LazyRepeat', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='+')]), body=[Assign(targets=[Name(id='repeated', ctx=Store())], value=Name(id='PossessiveRepeat', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Assign(targets=[Name(id='repeated', ctx=Store())], value=Name(id='GreedyRepeat', ctx=Load()))])]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='element', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), BoolOp(op=Or(), values=[Compare(left=Name(id='min_count', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Name(id='max_count', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)])])]), body=[Assign(targets=[Name(id='element', ctx=Store())], value=Call(func=Name(id='repeated', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='min_count', ctx=Load()), Name(id='max_count', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='apply_constraint', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='constraints'), arg(arg='case_flags'), arg(arg='saved_pos'), arg(arg='sequence')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='element', ctx=Store())], value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='nothing for fuzzy constraint'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='Group', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='element', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Name(id='Fuzzy', ctx=Load()), args=[Attribute(value=Name(id='element', ctx=Load()), attr='subpattern', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Fuzzy', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='_QUANTIFIERS', ctx=Store())], value=Dict(keys=[Constant(value='?'), Constant(value='*'), Constant(value='+')], values=[Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value=None)], ctx=Load())])), FunctionDef(name='parse_quantifier', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a quantifier.')), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Attribute(value=Name(id='_QUANTIFIERS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])), If(test=Name(id='q', ctx=Load()), body=[Return(value=Name(id='q', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{')]), body=[Assign(targets=[Name(id='counts', ctx=Store())], value=Call(func=Name(id='parse_limited_quantifier', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Name(id='counts', ctx=Load()), body=[Return(value=Name(id='counts', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='is_above_limit', args=arguments(posonlyargs=[], args=[arg(arg='count')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a count is above the maximum.')), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='count', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='count', ctx=Load()), ops=[GtE()], comparators=[Name(id='UNLIMITED', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='parse_limited_quantifier', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a limited quantifier.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='min_count', ctx=Store())], value=Call(func=Name(id='parse_count', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Name(id='max_count', ctx=Store())], value=Call(func=Name(id='parse_count', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='min_count', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='min_count', ctx=Load()), Constant(value=0)])], keywords=[])), Assign(targets=[Name(id='max_count', ctx=Store())], value=IfExp(test=Name(id='max_count', ctx=Load()), body=Call(func=Name(id='int', ctx=Load()), args=[Name(id='max_count', ctx=Load())], keywords=[]), orelse=Constant(value=None)))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='min_count', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='min_count', ctx=Store()), Name(id='max_count', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='min_count', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='}')], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Constant(value=None))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='is_above_limit', ctx=Load()), args=[Name(id='min_count', ctx=Load())], keywords=[]), Call(func=Name(id='is_above_limit', ctx=Load()), args=[Name(id='max_count', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='repeat count too big'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='max_count', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='min_count', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_count', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='min repeat greater than max repeat'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='min_count', ctx=Load()), Name(id='max_count', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_fuzzy', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='ch'), arg(arg='case_flags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a fuzzy setting, if present.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='{')]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='constraints', ctx=Store())], value=Dict(keys=[], values=[])), Try(body=[Expr(value=Call(func=Name(id='parse_fuzzy_item', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[])), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Expr(value=Call(func=Name(id='parse_fuzzy_item', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ParseError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=':')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='test'), ctx=Store())], value=Call(func=Name(id='parse_fuzzy_test', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='case_flags', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='}')], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='expected }'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='constraints', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_fuzzy_item', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='constraints')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a fuzzy setting item.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Try(body=[Expr(value=Call(func=Name(id='parse_cost_constraint', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ParseError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Expr(value=Call(func=Name(id='parse_cost_equation', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='parse_cost_constraint', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='constraints')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a cost constraint.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='ALPHA', ctx=Load())]), body=[Assign(targets=[Name(id='constraint', ctx=Store())], value=Call(func=Name(id='parse_constraint', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_inc', ctx=Store())], value=Call(func=Name(id='parse_fuzzy_compare', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='max_inc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Name(id='constraint', ctx=Load()), ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load()))], orelse=[Assign(targets=[Name(id='cost_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='max_cost', ctx=Store())], value=Call(func=Name(id='parse_cost_limit', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='max_inc', ctx=Load())), body=[AugAssign(target=Name(id='max_cost', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='max_cost', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad fuzzy cost limit'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='cost_pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Name(id='constraint', ctx=Load()), ctx=Store())], value=Tuple(elts=[Constant(value=0), Name(id='max_cost', ctx=Load())], ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Assign(targets=[Name(id='cost_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='min_cost', ctx=Store())], value=Call(func=Name(id='parse_cost_limit', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='min_inc', ctx=Store())], value=Call(func=Name(id='parse_fuzzy_compare', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='min_inc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='constraint', ctx=Store())], value=Call(func=Name(id='parse_constraint', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='constraints', ctx=Load()), Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='max_inc', ctx=Store())], value=Call(func=Name(id='parse_fuzzy_compare', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='max_inc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cost_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='max_cost', ctx=Store())], value=Call(func=Name(id='parse_cost_limit', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='min_inc', ctx=Load())), body=[AugAssign(target=Name(id='min_cost', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='max_inc', ctx=Load())), body=[AugAssign(target=Name(id='max_cost', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='min_cost', ctx=Load()), Name(id='max_cost', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad fuzzy cost limit'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='cost_pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Name(id='constraint', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='min_cost', ctx=Load()), Name(id='max_cost', ctx=Load())], ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='parse_cost_limit', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a cost limit.')), Assign(targets=[Name(id='cost_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='digits', ctx=Store())], value=Call(func=Name(id='parse_count', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad fuzzy cost limit'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='cost_pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_constraint', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='constraints'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a constraint.')), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Constant(value='deis')]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='constraints', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='ch', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_fuzzy_compare', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a cost comparator.')), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='<=')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='<')], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=None))])])], decorator_list=[]), FunctionDef(name='parse_cost_equation', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='constraints')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a cost equation.')), If(test=Compare(left=Constant(value='cost'), ops=[In()], comparators=[Name(id='constraints', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='more than one cost equation'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cost', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Name(id='parse_cost_term', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='cost', ctx=Load())], keywords=[])), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='+')], keywords=[]), body=[Expr(value=Call(func=Name(id='parse_cost_term', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='cost', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='max_inc', ctx=Store())], value=Call(func=Name(id='parse_fuzzy_compare', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='max_inc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='max_cost', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='parse_count', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='max_inc', ctx=Load())), body=[AugAssign(target=Name(id='max_cost', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='max_cost', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad fuzzy cost limit'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='cost', ctx=Load()), slice=Constant(value='max'), ctx=Store())], value=Name(id='max_cost', ctx=Load())), Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Store())], value=Name(id='cost', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_cost_term', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='cost')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a cost equation term.')), Assign(targets=[Name(id='coeff', ctx=Store())], value=Call(func=Name(id='parse_count', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Constant(value='dis')]), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='cost', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='repeated fuzzy cost'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='cost', ctx=Load()), slice=Name(id='ch', ctx=Load()), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='coeff', ctx=Load()), Constant(value=1)])], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_fuzzy_test', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='case_flags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='SPECIAL_CHARS', ctx=Load())]), body=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Return(value=Call(func=Name(id='parse_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=False)], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='DOTALL', ctx=Load())), body=[Return(value=Call(func=Name(id='AnyAll', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Return(value=Call(func=Name(id='AnyU', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Any', ctx=Load()), args=[], keywords=[]))])])], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Return(value=Call(func=Name(id='parse_set', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='expected character set'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))])])])], orelse=[If(test=Name(id='ch', ctx=Load()), body=[Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))]))], orelse=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='expected character set'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='parse_count', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parses a quantifier's count, which can be empty.")), Return(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Name(id='DIGITS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_paren', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parses a parenthesised subpattern or a flag. Returns FLAGS if it's an\n    inline flag.\n    ")), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=True)], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='?')]), body=[Assign(targets=[Name(id='saved_pos_2', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=True)], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<')]), body=[Assign(targets=[Name(id='saved_pos_3', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='='), Constant(value='!')], ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_lookaround', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=True), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos_3', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='open_group', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='>')], keywords=[])), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='close_group', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='='), Constant(value='!')], ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_lookaround', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=False), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='P')]), body=[Return(value=Call(func=Name(id='parse_extension', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Return(value=Call(func=Name(id='parse_comment', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='(')]), body=[Return(value=Call(func=Name(id='parse_conditional', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='>')]), body=[Return(value=Call(func=Name(id='parse_atomic', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='|')]), body=[Return(value=Call(func=Name(id='parse_common', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='R')]), Compare(left=Constant(value='0'), ops=[LtE(), LtE()], comparators=[Name(id='ch', ctx=Load()), Constant(value='9')])]), body=[Return(value=Call(func=Name(id='parse_call_group', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='ch', ctx=Load()), Name(id='saved_pos_2', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='&')]), body=[Return(value=Call(func=Name(id='parse_call_named_group', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='saved_pos_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos_2', ctx=Load())), Return(value=Call(func=Name(id='parse_flags_subpattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')]), body=[Assign(targets=[Name(id='saved_pos_2', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Constant(value=')>')], keywords=[])], keywords=[keyword(arg='include', value=Constant(value=False))])), If(test=Call(func=Attribute(value=Subscript(value=Name(id='word', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='verb', ctx=Store())], value=Call(func=Attribute(value=Name(id='VERBS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='verb', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown verb'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos_2', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Return(value=Name(id='verb', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='open_group', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='close_group', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_extension', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a Python extension.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<')]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='open_group', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='>')], keywords=[])), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='close_group', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='allow_numeric', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='is_open_group', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='cannot refer to an open group'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='make_ref_group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='name', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='>')]), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='&')])]), body=[Return(value=Call(func=Name(id='parse_call_named_group', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown extension'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_comment', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a comment.')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=True)], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='c', ctx=Load())), Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value=')')])]), body=[Break()], orelse=[]), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='parse_lookaround', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='behind'), arg(arg='positive')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a lookaround.')), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Return(value=Call(func=Name(id='LookAround', ctx=Load()), args=[Name(id='behind', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_conditional', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a conditional subpattern.')), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='?')]), body=[Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='='), Constant(value='!')], ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_lookaround_conditional', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=False), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<')]), body=[Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='='), Constant(value='!')], ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_lookaround_conditional', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=True), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='expected lookaround conditional'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Try(body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Assign(targets=[Name(id='yes_branch', ctx=Store())], value=Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='|')], keywords=[]), body=[Assign(targets=[Name(id='no_branch', ctx=Store())], value=Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='no_branch', ctx=Store())], value=Call(func=Name(id='Sequence', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='yes_branch', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='no_branch', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Call(func=Name(id='Sequence', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Conditional', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='yes_branch', ctx=Load()), Name(id='no_branch', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_lookaround_conditional', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='behind'), arg(arg='positive')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Assign(targets=[Name(id='yes_branch', ctx=Store())], value=Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='|')], keywords=[]), body=[Assign(targets=[Name(id='no_branch', ctx=Store())], value=Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='no_branch', ctx=Store())], value=Call(func=Name(id='Sequence', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Return(value=Call(func=Name(id='LookAroundConditional', ctx=Load()), args=[Name(id='behind', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='subpattern', ctx=Load()), Name(id='yes_branch', ctx=Load()), Name(id='no_branch', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_atomic', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses an atomic subpattern.')), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Return(value=Call(func=Name(id='Atomic', ctx=Load()), args=[Name(id='subpattern', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_common', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a common groups branch.')), Assign(targets=[Name(id='initial_group_count', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='group_count', ctx=Load())), Assign(targets=[Name(id='branches', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='final_group_count', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='group_count', ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='|')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='group_count', ctx=Store())], value=Name(id='initial_group_count', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_sequence', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='final_group_count', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='final_group_count', ctx=Load()), Attribute(value=Name(id='info', ctx=Load()), attr='group_count', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='group_count', ctx=Store())], value=Name(id='final_group_count', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='branches', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_call_group', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='ch'), arg(arg='pos')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a call to a group.')), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='R')]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Constant(value='0'))], orelse=[Assign(targets=[Name(id='group', ctx=Store())], value=BinOp(left=Name(id='ch', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Name(id='DIGITS', ctx=Load())], keywords=[])))]), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Return(value=Call(func=Name(id='CallGroup', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_call_named_group', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='pos')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a call to a named group.')), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[])), Return(value=Call(func=Name(id='CallGroup', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='group', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_flag_set', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set of inline flags.')), Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), Try(body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='V')]), body=[AugAssign(target=Name(id='ch', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]))], orelse=[]), AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Subscript(value=Name(id='REGEX_FLAGS', ctx=Load()), slice=Name(id='ch', ctx=Load()), ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='flags', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_flags', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses flags being turned on/off.')), Assign(targets=[Name(id='flags_on', ctx=Store())], value=Call(func=Name(id='parse_flag_set', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='-')], keywords=[]), body=[Assign(targets=[Name(id='flags_off', ctx=Store())], value=Call(func=Name(id='parse_flag_set', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='flags_off', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value="bad inline flags: no flags after '-'"), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='flags_off', ctx=Store())], value=Constant(value=0))]), If(test=BinOp(left=Name(id='flags_on', ctx=Load()), op=BitAnd(), right=Name(id='LOCALE', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='inline_locale', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Tuple(elts=[Name(id='flags_on', ctx=Load()), Name(id='flags_off', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_subpattern', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='flags_on'), arg(arg='flags_off')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a subpattern with scoped flags.')), Assign(targets=[Name(id='saved_flags', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitOr(), right=Name(id='flags_on', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='flags_off', ctx=Load())))), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[])), Try(body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value=')')], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='saved_flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))]), Return(value=Name(id='subpattern', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_flags_subpattern', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parses a flags subpattern. It could be inline flags or a subpattern\n    possibly with local flags. If it's a subpattern, then that's returned;\n    if it's a inline flags, then None is returned.\n    ")), Assign(targets=[Tuple(elts=[Name(id='flags_on', ctx=Store()), Name(id='flags_off', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_flags', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=BinOp(left=Name(id='flags_off', ctx=Load()), op=BitAnd(), right=Name(id='GLOBAL_FLAGS', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad inline flags: cannot turn off global flag'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='flags_on', ctx=Load()), op=BitAnd(), right=Name(id='flags_off', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad inline flags: flag turned on and off'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_global_flags', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='flags_on', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Load()))), op=BitAnd(), right=Name(id='GLOBAL_FLAGS', ctx=Load()))), If(test=Name(id='new_global_flags', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Store()), op=BitOr(), value=Name(id='new_global_flags', ctx=Load())), Raise(exc=Call(func=Name(id='_UnscopedFlagSet', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Load())], keywords=[]))], orelse=[]), AugAssign(target=Name(id='flags_on', ctx=Store()), op=BitAnd(), value=UnaryOp(op=Invert(), operand=Name(id='GLOBAL_FLAGS', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=':')], keywords=[]), body=[Return(value=Call(func=Name(id='parse_subpattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='flags_on', ctx=Load()), Name(id='flags_off', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=')')], keywords=[]), body=[Expr(value=Call(func=Name(id='parse_positional_flags', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='flags_on', ctx=Load()), Name(id='flags_off', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown extension'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_positional_flags', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='flags_on'), arg(arg='flags_off')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses positional flags.')), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION0', ctx=Load())]), body=[If(test=Name(id='flags_off', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad inline flags: cannot turn flags off'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_global_flags', ctx=Store())], value=BinOp(left=Name(id='flags_on', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Load())))), If(test=Name(id='new_global_flags', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Store()), op=BitOr(), value=Name(id='new_global_flags', ctx=Load())), Raise(exc=Call(func=Name(id='_UnscopedFlagSet', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='global_flags', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitOr(), right=Name(id='flags_on', ctx=Load())), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Name(id='flags_off', ctx=Load()))))]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_name', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='allow_numeric'), arg(arg='allow_group_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='Parses a name.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Constant(value=')>')], keywords=[])], keywords=[keyword(arg='include', value=Constant(value=False))])), If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='missing group name'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='min_group', ctx=Store())], value=IfExp(test=Name(id='allow_group_0', ctx=Load()), body=Constant(value=0), orelse=Constant(value=1))), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='allow_numeric', ctx=Load())), Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='min_group', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad character in group name'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='isidentifier', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad character in group name'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_octal', args=arguments(posonlyargs=[], args=[arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a string is octal.')), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='OCT_DIGITS', ctx=Load())]), generators=[comprehension(target=Name(id='ch', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='is_decimal', args=arguments(posonlyargs=[], args=[arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a string is decimal.')), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), generators=[comprehension(target=Name(id='ch', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='is_hexadecimal', args=arguments(posonlyargs=[], args=[arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether a string is hexadecimal.')), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='HEX_DIGITS', ctx=Load())]), generators=[comprehension(target=Name(id='ch', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_escape', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses an escape sequence.')), Assign(targets=[Name(id='saved_ignore', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Name(id='saved_ignore', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='ch', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad escape (end of pattern)'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='HEX_ESCAPES', ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_hex_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='ch', ctx=Load()), Subscript(value=Name(id='HEX_ESCAPES', ctx=Load()), slice=Name(id='ch', ctx=Load()), ctx=Load()), Name(id='in_set', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='g')]), UnaryOp(op=Not(), operand=Name(id='in_set', ctx=Load()))]), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Try(body=[Return(value=Call(func=Name(id='parse_group_ref', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='error', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='G')]), UnaryOp(op=Not(), operand=Name(id='in_set', ctx=Load()))]), body=[Return(value=Call(func=Name(id='SearchAnchor', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='L')]), UnaryOp(op=Not(), operand=Name(id='in_set', ctx=Load()))]), body=[Return(value=Call(func=Name(id='parse_string_set', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='N')]), body=[Return(value=Call(func=Name(id='parse_named_char', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Constant(value='pP')]), body=[Return(value=Call(func=Name(id='parse_property', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='p')]), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='X')]), UnaryOp(op=Not(), operand=Name(id='in_set', ctx=Load()))]), body=[Return(value=Call(func=Name(id='Grapheme', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='ALPHA', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='in_set', ctx=Load())), body=[If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='WORD', ctx=Load())), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='WORD_POSITION_ESCAPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='POSITION_ESCAPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]))]), If(test=Name(id='value', ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='CHARSET_ESCAPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='CHARACTER_ESCAPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='bad escape \\%s'), op=Mod(), right=Name(id='ch', ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), body=[Return(value=Call(func=Name(id='parse_numeric_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Name(id='ch', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), Name(id='in_set', ctx=Load())], keywords=[]))])])])])])])])])])], decorator_list=[]), FunctionDef(name='parse_numeric_escape', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='ch'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a numeric escape sequence.')), If(test=BoolOp(op=Or(), values=[Name(id='in_set', ctx=Load()), Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')])]), body=[Return(value=Call(func=Name(id='parse_octal_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), List(elts=[Name(id='ch', ctx=Load())], ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='digits', ctx=Store())], value=Name(id='ch', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), body=[AugAssign(target=Name(id='digits', ctx=Store()), op=Add(), value=Name(id='ch', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='is_octal', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='OCT_DIGITS', ctx=Load())])]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_ENCODINGS', ctx=Load()))), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='encoding', ctx=Load()), ops=[Eq()], comparators=[Name(id='ASCII', ctx=Load())]), Compare(left=Name(id='encoding', ctx=Load()), ops=[Eq()], comparators=[Name(id='LOCALE', ctx=Load())])]), body=[Assign(targets=[Name(id='octal_mask', ctx=Store())], value=Constant(value=255))], orelse=[Assign(targets=[Name(id='octal_mask', ctx=Store())], value=Constant(value=511))]), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='digits', ctx=Load()), op=Add(), right=Name(id='ch', ctx=Load())), Constant(value=8)], keywords=[]), op=BitAnd(), right=Name(id='octal_mask', ctx=Load()))), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='is_open_group', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='cannot refer to an open group'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='make_ref_group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='digits', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_octal_escape', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='digits'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses an octal escape sequence.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), While(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='OCT_DIGITS', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='digits', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), Constant(value=8)], keywords=[])), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='value', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='digits', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Name(id='OCT_DIGITS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='incomplete escape \\%s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[])), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='bad escape \\%s'), op=Mod(), right=Subscript(value=Name(id='digits', ctx=Load()), slice=Constant(value=0), ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))])])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='parse_hex_escape', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='esc'), arg(arg='expected_len'), arg(arg='in_set'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a hex escape sequence.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='digits', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='expected_len', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Name(id='HEX_DIGITS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='incomplete escape \\%s%s'), op=Mod(), right=Tuple(elts=[Name(id='type', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[])], ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='digits', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), Constant(value=16)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1114112)]), body=[Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='value', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[])], finalbody=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='bad hex escape \\%s%s'), op=Mod(), right=Tuple(elts=[Name(id='esc', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[])], ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_group_ref', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a group reference.')), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='<')], keywords=[])), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='>')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='is_open_group', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='cannot refer to an open group'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='make_ref_group', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='name', ctx=Load()), Name(id='saved_pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_string_set', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a string set reference.')), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='<')], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='>')], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='info', ctx=Load()), attr='kwargs', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='undefined named list'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='make_string_set', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_named_char', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a named character.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='{')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Name(id='NAMED_CHAR_PART', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='}')], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='ord', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), Name(id='in_set', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='undefined character name'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='N')], keywords=[]), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_property', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info'), arg(arg='positive'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a Unicode property.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{')]), body=[Assign(targets=[Name(id='negate', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='prop_name', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_property_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='}')], keywords=[]), body=[Assign(targets=[Name(id='prop', ctx=Store())], value=Call(func=Name(id='lookup_property', ctx=Load()), args=[Name(id='prop_name', ctx=Load()), Name(id='name', ctx=Load()), Compare(left=Name(id='positive', ctx=Load()), ops=[NotEq()], comparators=[Name(id='negate', ctx=Load())]), Name(id='source', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='make_property', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='prop', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Name(id='ch', ctx=Load()), Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Constant(value='CLMNPSZ')])]), body=[Assign(targets=[Name(id='prop', ctx=Store())], value=Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Name(id='ch', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='source', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='make_property', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='prop', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=IfExp(test=Name(id='positive', ctx=Load()), body=Constant(value='p'), orelse=Constant(value='P'))), Return(value=Call(func=Name(id='make_character', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_property_name', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a property name, which may be qualified.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[Name(id='PROPERTY_NAME_PART', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='ch', ctx=Load()), Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Constant(value=':=')])]), body=[Assign(targets=[Name(id='prop_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[BinOp(left=Name(id='ALNUM', ctx=Load()), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Constant(value=' &_-./')], keywords=[]))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='name', ctx=Load()), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='prop_name', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Name(id='prop_name', ctx=Load())], ctx=Load()))])], orelse=[Assign(targets=[Name(id='prop_name', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Tuple(elts=[Name(id='prop_name', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_set', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a character set.')), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), Assign(targets=[Name(id='saved_ignore', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Load())), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='negate', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^')], keywords=[])), Try(body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION0', ctx=Load())]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='parse_set_imp_union', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='parse_set_union', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=']')], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='missing ]'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Name(id='saved_ignore', ctx=Load()))]), If(test=Name(id='negate', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='positive', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='item', ctx=Load()), attr='positive', ctx=Load())))]))], orelse=[]), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Call(func=Name(id='make_case_flags', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))])), Return(value=Name(id='item', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_set_union', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set union ([x||y]).')), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_set_symm_diff', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='||')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set_symm_diff', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_symm_diff', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set symmetric difference ([x~~y]).')), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_set_inter', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='~~')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set_inter', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='SetSymDiff', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_inter', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set intersection ([x&&y]).')), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_set_diff', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='&&')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set_diff', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='SetInter', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_diff', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set difference ([x--y]).')), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_set_imp_union', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='--')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set_imp_union', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='SetDiff', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_imp_union', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a set implicit union ([xy]).')), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Call(func=Name(id='parse_set_member', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=']')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Break()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION1', ctx=Load())]), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='op', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='op', ctx=Store()), iter=Name(id='SET_OPS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='parse_set_member', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_member', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a member in a character set.')), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='parse_set_item', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Name(id='saved_pos1', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Attribute(value=Name(id='start', ctx=Load()), attr='positive', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='-')], keywords=[]))]), body=[Return(value=Name(id='start', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), Assign(targets=[Name(id='saved_pos2', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION1', ctx=Load())]), Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='-')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos1', ctx=Load())), Return(value=Name(id='start', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=']')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos2', ctx=Load())), Return(value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), List(elts=[Name(id='start', ctx=Load()), Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='-')], keywords=[])], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='parse_set_item', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='end', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Attribute(value=Name(id='end', ctx=Load()), attr='positive', ctx=Load()))]), body=[Return(value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), List(elts=[Name(id='start', ctx=Load()), Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='-')], keywords=[])], keywords=[]), Name(id='end', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='start', ctx=Load()), attr='value', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='end', ctx=Load()), attr='value', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad character range'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='start', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='end', ctx=Load()), attr='value', ctx=Load())]), body=[Return(value=Name(id='start', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Range', ctx=Load()), args=[Attribute(value=Name(id='start', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='end', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_set_item', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses an item in a character set.')), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='\\')], keywords=[]), body=[Return(value=Call(func=Name(id='parse_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load()), Constant(value=True)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='[:')], keywords=[]), body=[Try(body=[Return(value=Call(func=Name(id='parse_posix_class', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ParseError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION1', ctx=Load())]), Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='[')], keywords=[])]), body=[Assign(targets=[Name(id='negate', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^')], keywords=[])), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='parse_set_union', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=']')], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='missing ]'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='negate', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='positive', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='item', ctx=Load()), attr='positive', ctx=Load())))]))], orelse=[]), Return(value=Name(id='item', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ch', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unterminated character set'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_posix_class', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a POSIX character class.')), Assign(targets=[Name(id='negate', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='prop_name', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_property_name', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value=':]')], keywords=[])), body=[Raise(exc=Call(func=Name(id='ParseError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='lookup_property', ctx=Load()), args=[Name(id='prop_name', ctx=Load()), Name(id='name', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='negate', ctx=Load())), Name(id='source', ctx=Load())], keywords=[keyword(arg='posix', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='float_to_rational', args=arguments(posonlyargs=[], args=[arg(arg='flt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Converts a float to a rational pair.')), Assign(targets=[Name(id='int_part', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='flt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=BinOp(left=Name(id='flt', ctx=Load()), op=Sub(), right=Name(id='int_part', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=0.0001)]), body=[Return(value=Tuple(elts=[Name(id='int_part', ctx=Load()), Constant(value=1)], ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='den', ctx=Store()), Name(id='num', ctx=Store())], ctx=Store())], value=Call(func=Name(id='float_to_rational', ctx=Load()), args=[BinOp(left=Constant(value=1.0), op=Div(), right=Name(id='error', ctx=Load()))], keywords=[])), Return(value=Tuple(elts=[BinOp(left=BinOp(left=Name(id='int_part', ctx=Load()), op=Mult(), right=Name(id='den', ctx=Load())), op=Add(), right=Name(id='num', ctx=Load())), Name(id='den', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='numeric_to_rational', args=arguments(posonlyargs=[], args=[arg(arg='numeric')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Converts a numeric string to a rational string, if possible.')), If(test=Compare(left=Subscript(value=Name(id='numeric', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Tuple(elts=[Name(id='sign', ctx=Store()), Name(id='numeric', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='numeric', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='numeric', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='sign', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='numeric', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='num', ctx=Store()), Name(id='den', ctx=Store())], ctx=Store())], value=Call(func=Name(id='float_to_rational', ctx=Load()), args=[BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Tuple(elts=[Name(id='num', ctx=Store()), Name(id='den', ctx=Store())], ctx=Store())], value=Call(func=Name(id='float_to_rational', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[], keywords=[]))])]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}{}/{}'), attr='format', ctx=Load()), args=[Name(id='sign', ctx=Load()), Name(id='num', ctx=Load()), Name(id='den', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/1')], keywords=[]), body=[Return(value=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='standardise_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Standardises a property or value name.')), Try(body=[Return(value=Call(func=Name(id='numeric_to_rational', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='ZeroDivisionError', ctx=Load())], ctx=Load()), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Name(id='ch', ctx=Load()), generators=[comprehension(target=Name(id='ch', ctx=Store()), iter=Name(id='name', ctx=Load()), ifs=[Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Constant(value='_- ')])], is_async=0)])], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='_POSIX_CLASSES', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='ALNUM DIGIT PUNCT XDIGIT'), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='_BINARY_VALUES', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='YES Y NO N TRUE T FALSE F'), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), FunctionDef(name='lookup_property', args=arguments(posonlyargs=[], args=[arg(arg='property'), arg(arg='value'), arg(arg='positive'), arg(arg='source'), arg(arg='posix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Looks up a property.')), Assign(targets=[Name(id='property', ctx=Store())], value=IfExp(test=Name(id='property', ctx=Load()), body=Call(func=Name(id='standardise_name', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='standardise_name', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Tuple(elts=[Name(id='property', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='GENERALCATEGORY'), Constant(value='ASSIGNED')], ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='property', ctx=Store()), Name(id='value', ctx=Store()), Name(id='positive', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='GENERALCATEGORY'), Constant(value='UNASSIGNED'), UnaryOp(op=Not(), operand=Name(id='positive', ctx=Load()))], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='posix', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='property', ctx=Load())), Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='_POSIX_CLASSES', ctx=Load())])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Constant(value='POSIX'), op=Add(), right=Name(id='value', ctx=Load())))], orelse=[]), If(test=Name(id='property', ctx=Load()), body=[Assign(targets=[Name(id='prop', ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='prop', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Name(id='source', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property')], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='value_dict', ctx=Store())], ctx=Store())], value=Name(id='prop', ctx=Load())), Assign(targets=[Name(id='val_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='value_dict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='source', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property value')], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property value'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), op=BitOr(), right=Name(id='val_id', ctx=Load())), Name(id='positive', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='property', ctx=Store()), iter=Tuple(elts=[Constant(value='GC'), Constant(value='SCRIPT'), Constant(value='BLOCK')], ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='value_dict', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[])), Assign(targets=[Name(id='val_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='value_dict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), op=BitOr(), right=Name(id='val_id', ctx=Load())), Name(id='positive', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='prop', ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Name(id='prop', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='value_dict', ctx=Store())], ctx=Store())], value=Name(id='prop', ctx=Load())), If(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='value_dict', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='_BINARY_VALUES', ctx=Load())]), body=[Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), op=BitOr(), right=Constant(value=1)), Name(id='positive', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), UnaryOp(op=Not(), operand=Name(id='positive', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='IS')], keywords=[]), body=[Assign(targets=[Name(id='prop', ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='get', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())], keywords=[])), If(test=Name(id='prop', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='value_dict', ctx=Store())], ctx=Store())], value=Name(id='prop', ctx=Load())), If(test=Compare(left=Constant(value='YES'), ops=[In()], comparators=[Name(id='value_dict', ctx=Load())]), body=[Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), op=BitOr(), right=Constant(value=1)), Name(id='positive', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='property', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Constant(value='IS'), Constant(value='SCRIPT')], ctx=Load()), Tuple(elts=[Constant(value='IN'), Constant(value='BLOCK')], ctx=Load())], ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='value_dict', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[])), Assign(targets=[Name(id='val_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='value_dict', ctx=Load()), attr='get', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Property', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prop_id', ctx=Load()), op=LShift(), right=Constant(value=16)), op=BitOr(), right=Name(id='val_id', ctx=Load())), Name(id='positive', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='source', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property')], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown property'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile_replacement', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='pattern'), arg(arg='is_unicode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compiles a replacement template escape sequence.')), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='ALPHA', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='CHARACTER_ESCAPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value=False), List(elts=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='HEX_ESCAPES', ctx=Load())]), BoolOp(op=Or(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x')]), Name(id='is_unicode', ctx=Load())])]), body=[Return(value=Tuple(elts=[Constant(value=False), List(elts=[Call(func=Name(id='parse_repl_hex_escape', ctx=Load()), args=[Name(id='source', ctx=Load()), Subscript(value=Name(id='HEX_ESCAPES', ctx=Load()), slice=Name(id='ch', ctx=Load()), ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='g')]), body=[Return(value=Tuple(elts=[Constant(value=True), List(elts=[Call(func=Name(id='compile_repl_group', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='pattern', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='N')]), Name(id='is_unicode', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='parse_repl_named_char', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Constant(value=False), List(elts=[Name(id='value', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='bad escape \\%s'), op=Mod(), right=Name(id='ch', ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='source', ctx=Load()), attr='sep', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='octal_mask', ctx=Store())], value=Constant(value=255))], orelse=[Assign(targets=[Name(id='octal_mask', ctx=Store())], value=Constant(value=511))]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Assign(targets=[Name(id='digits', ctx=Store())], value=Name(id='ch', ctx=Load())), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Name(id='OCT_DIGITS', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Break()], orelse=[]), AugAssign(target=Name(id='digits', ctx=Store()), op=Add(), value=Name(id='ch', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Constant(value=False), List(elts=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='digits', ctx=Load()), Constant(value=8)], keywords=[]), op=BitAnd(), right=Name(id='octal_mask', ctx=Load()))], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), body=[Assign(targets=[Name(id='digits', ctx=Store())], value=Name(id='ch', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[In()], comparators=[Name(id='DIGITS', ctx=Load())]), body=[AugAssign(target=Name(id='digits', ctx=Store()), op=Add(), value=Name(id='ch', ctx=Load())), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='ch', ctx=Load()), Call(func=Name(id='is_octal', ctx=Load()), args=[BinOp(left=Name(id='digits', ctx=Load()), op=Add(), right=Name(id='ch', ctx=Load()))], keywords=[])]), body=[Return(value=Tuple(elts=[Constant(value=False), List(elts=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='digits', ctx=Load()), op=Add(), right=Name(id='ch', ctx=Load())), Constant(value=8)], keywords=[]), op=BitAnd(), right=Name(id='octal_mask', ctx=Load()))], ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Tuple(elts=[Constant(value=True), List(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Return(value=Tuple(elts=[Constant(value=False), List(elts=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='\\')], keywords=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='ch', ctx=Load())), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='bad escape (end of pattern)'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Constant(value=False), List(elts=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='\\')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_repl_hex_escape', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='expected_len'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a hex escape sequence in a replacement string.')), Assign(targets=[Name(id='digits', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='expected_len', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ch', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ch', ctx=Load()), ops=[NotIn()], comparators=[Name(id='HEX_DIGITS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[BinOp(left=Constant(value='incomplete escape \\%s%s'), op=Mod(), right=Tuple(elts=[Name(id='type', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[])], ctx=Load())), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='digits', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='digits', ctx=Load())], keywords=[]), Constant(value=16)], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_repl_named_char', args=arguments(posonlyargs=[], args=[arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a named character in a replacement string.')), Assign(targets=[Name(id='saved_pos', ctx=Store())], value=Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='{')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='get_while', ctx=Load()), args=[BinOp(left=Name(id='ALPHA', ctx=Load()), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Constant(value=' ')], keywords=[]))], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='}')], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='undefined character name'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='saved_pos', ctx=Load())), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='compile_repl_group', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compiles a replacement template group reference.')), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='<')], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='parse_name', ctx=Load()), args=[Name(id='source', ctx=Load()), Constant(value=True), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='expect', ctx=Load()), args=[Constant(value='>')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='index', ctx=Load()), Attribute(value=Name(id='pattern', ctx=Load()), attr='groups', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='invalid group reference'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='index', ctx=Load()))], orelse=[]), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='pattern', ctx=Load()), attr='groupindex', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Constant(value='unknown group')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='INDENT', ctx=Store())], value=Constant(value='  ')), Assign(targets=[Name(id='POSITIVE_OP', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='ZEROWIDTH_OP', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='FUZZY_OP', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='REVERSE_OP', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='REQUIRED_OP', ctx=Store())], value=Constant(value=16)), Assign(targets=[Name(id='POS_TEXT', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Constant(value='NON-MATCH'), Constant(value='MATCH')])), Assign(targets=[Name(id='CASE_TEXT', ctx=Store())], value=Dict(keys=[Name(id='NOCASE', ctx=Load()), Name(id='IGNORECASE', ctx=Load()), Name(id='FULLCASE', ctx=Load()), Name(id='FULLIGNORECASE', ctx=Load())], values=[Constant(value=''), Constant(value=' SIMPLE_IGNORE_CASE'), Constant(value=''), Constant(value=' FULL_IGNORE_CASE')])), FunctionDef(name='make_sequence', args=arguments(posonlyargs=[], args=[arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Sequence', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='RegexBase', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()))], decorator_list=[]), FunctionDef(name='with_flags', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='positive', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='positive', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()))], orelse=[Assign(targets=[Name(id='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='case_flags', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='case_flags', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()))], orelse=[Assign(targets=[Name(id='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=BinOp(left=Name(id='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='CASE_FLAGS', ctx=Load())), ctx=Load()))]), If(test=Compare(left=Name(id='zerowidth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='zerowidth', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()))], orelse=[Assign(targets=[Name(id='zerowidth', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='zerowidth', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='positive', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]), Compare(left=Name(id='case_flags', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())]), Compare(left=Name(id='zerowidth', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load())])]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rebuild', ctx=Load()), args=[Name(id='positive', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='zerowidth', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='_FirstSetError', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), Constant(value=None)], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ZeroWidthBase', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=None)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), If(test=Name(id='reverse', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='REVERSE_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{} {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_op_name', ctx=Load()), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=0))], decorator_list=[])], decorator_list=[]), ClassDef(name='Any', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='ANY', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='ANY_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='ANY')), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Name(id='reverse', ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_op_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[])], decorator_list=[]), ClassDef(name='AnyAll', bases=[Name(id='Any', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='ANY_ALL', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='ANY_ALL_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='ANY_ALL'))], decorator_list=[]), ClassDef(name='AnyU', bases=[Name(id='Any', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='ANY_U', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='ANY_U_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='ANY_U'))], decorator_list=[]), ClassDef(name='Atomic', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subpattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='has_simple_start', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='ATOMIC', ctx=Load())], ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}ATOMIC'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_required_string', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Boundary', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='BOUNDARY', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='BOUNDARY'))], decorator_list=[]), ClassDef(name='Branch', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Store())], value=Name(id='branches', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load())), body=[Return(value=Call(func=Name(id='Sequence', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='branches', ctx=Store())], value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flatten_branches', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load())], keywords=[])), If(test=Name(id='reverse', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='suffix', ctx=Store()), Name(id='branches', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_split_common_suffix', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='branches', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='branches', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_split_common_prefix', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='branches', ctx=Load())], keywords=[])), Assign(targets=[Name(id='suffix', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='branches', ctx=Store())], value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_reduce_to_set', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='branches', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='sequence', ctx=Store())], value=List(elts=[Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[])], ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='suffix', ctx=Load()))]), body=[Assign(targets=[Name(id='firstset', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_precheck', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='branches', ctx=Load())], keywords=[])), If(test=Name(id='firstset', ctx=Load()), body=[If(test=Name(id='reverse', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='firstset', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='firstset', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='sequence', ctx=Store())], value=Name(id='branches', ctx=Load()))]), Return(value=Call(func=Name(id='make_sequence', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='sequence', ctx=Load())), op=Add(), right=Name(id='suffix', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_precheck', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='charset', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=IfExp(test=Name(id='reverse', ctx=Load()), body=UnaryOp(op=USub(), operand=Constant(value=1)), orelse=Constant(value=0))), For(target=Name(id='branch', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='branch', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='Literal', ctx=Load())]), Compare(left=Attribute(value=Name(id='branch', ctx=Load()), attr='case_flags', ctx=Load()), ops=[Eq()], comparators=[Name(id='NOCASE', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='charset', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='branch', ctx=Load()), attr='characters', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Return()])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='charset', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='_check_firstset', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), ListComp(elt=Call(func=Name(id='Character', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='charset', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), body=[AugAssign(target=Name(id='fs', ctx=Store()), op=BitOr(), value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='fs', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=None)], ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='BRANCH', ctx=Load())], ctx=Load())], ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='NEXT', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='code', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}BRANCH'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[])), For(target=Name(id='b', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}OR'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_flatten_branches', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='new_branches', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='Branch', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='branches', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='new_branches', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_split_common_prefix', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='alternatives', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='alternatives', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='alternatives', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='max_count', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='alternatives', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='end_pos', ctx=Store())], value=Name(id='max_count', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[Name(id='end_pos', ctx=Load())]), Call(func=Attribute(value=Subscript(value=Name(id='prefix', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='count', ctx=Store())], value=Name(id='pos', ctx=Load())), If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load())), body=[Assign(targets=[Name(id='count', ctx=Store())], value=Name(id='pos', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_can_split', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='count', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='branches', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='new_branches', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_sequence', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(lower=Name(id='count', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(upper=Name(id='count', ctx=Load())), ctx=Load()), Name(id='new_branches', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_split_common_suffix', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='alternatives', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='alternatives', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='alternatives', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='max_count', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Name(id='alternatives', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='end_pos', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='max_count', ctx=Load()))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='pos', ctx=Load()), ops=[Gt()], comparators=[Name(id='end_pos', ctx=Load())]), Call(func=Attribute(value=Subscript(value=Name(id='suffix', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='a', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='suffix', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='count', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='pos', ctx=Load()))), If(test=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load())), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_can_split_rev', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='count', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), body=[AugAssign(target=Name(id='count', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='branches', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='new_branches', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='a', ctx=Store()), iter=Name(id='alternatives', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_sequence', ctx=Load()), args=[Subscript(value=Name(id='a', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Name(id='suffix', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='count', ctx=Load()))), ctx=Load()), Name(id='new_branches', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_can_split', args=arguments(posonlyargs=[], args=[arg(arg='items'), arg(arg='count')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), Name(id='count', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=1)), upper=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Constant(value=2))], keywords=[]), Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=1)), upper=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='count', ctx=Load()), op=Sub(), right=Constant(value=2)), upper=BinOp(left=Name(id='count', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_can_split_rev', args=arguments(posonlyargs=[], args=[arg(arg='items'), arg(arg='count')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load()))], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Sub(), right=Constant(value=1))], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Sub(), right=Constant(value=1)), upper=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Add(), right=Constant(value=2))], keywords=[]), Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Sub(), right=Constant(value=1)), upper=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Add(), right=Constant(value=2))), ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_full_case', ctx=Load()), args=[Name(id='items', ctx=Load()), BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Sub(), right=Constant(value=2))], keywords=[]), Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_folded', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Sub(), right=Constant(value=2)), upper=BinOp(left=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Name(id='count', ctx=Load())), op=Add(), right=Constant(value=1))), ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_merge_common_prefixes', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prefixed', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), Assign(targets=[Name(id='order', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='new_branches', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_simple_character', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='prefixed', ctx=Load()), slice=Attribute(value=Name(id='b', ctx=Load()), attr='value', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='value', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load()), Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_is_simple_character', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='prefixed', ctx=Load()), slice=Attribute(value=Subscript(value=Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='value', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='b', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='value', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='order', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flush_char_prefix', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='prefixed', ctx=Load()), Name(id='order', ctx=Load()), Name(id='new_branches', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flush_char_prefix', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='prefixed', ctx=Load()), Name(id='order', ctx=Load()), Name(id='new_branches', ctx=Load())], keywords=[])), Return(value=Name(id='new_branches', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_is_simple_character', args=arguments(posonlyargs=[], args=[arg(arg='c')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[]), Attribute(value=Name(id='c', ctx=Load()), attr='positive', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='c', ctx=Load()), attr='case_flags', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_reduce_to_set', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='new_branches', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Name(id='NOCASE', ctx=Load())), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='b', ctx=Load()), Tuple(elts=[Name(id='Character', ctx=Load()), Name(id='Property', ctx=Load()), Name(id='SetBase', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='b', ctx=Load()), attr='case_flags', ctx=Load()), ops=[NotEq()], comparators=[Name(id='case_flags', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flush_set_members', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='items', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='new_branches', ctx=Load())], keywords=[])), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Attribute(value=Name(id='b', ctx=Load()), attr='case_flags', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Name(id='NOCASE', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flush_set_members', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='items', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='new_branches', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='Branch', ctx=Load()), attr='_flush_set_members', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='items', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='new_branches', ctx=Load())], keywords=[])), Return(value=Name(id='new_branches', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_flush_char_prefix', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='prefixed'), arg(arg='order'), arg(arg='new_branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prefixed', ctx=Load())), body=[Return()], orelse=[]), For(target=Tuple(elts=[Name(id='value', ctx=Store()), Name(id='branches', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='prefixed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='pair')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='order', ctx=Load()), slice=Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())))]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='branches', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_sequence', ctx=Load()), args=[Subscript(value=Name(id='branches', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='subbranches', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='optional', ctx=Store())], value=Constant(value=False)), For(target=Name(id='b', ctx=Store()), iter=Name(id='branches', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='subbranches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_sequence', ctx=Load()), args=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='optional', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='subbranches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Sequence', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='optional', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='sequence', ctx=Store())], value=Call(func=Name(id='Sequence', ctx=Load()), args=[List(elts=[Call(func=Name(id='Character', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='subbranches', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='prefixed', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='order', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_flush_set_members', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='reverse'), arg(arg='items'), arg(arg='case_flags'), arg(arg='new_branches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='items', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])], keywords=[]), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='new_branches', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_is_full_case', args=arguments(posonlyargs=[], args=[arg(arg='items'), arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='i', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Name(id='items', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[]), Attribute(value=Name(id='item', ctx=Load()), attr='positive', ctx=Load()), Compare(left=BinOp(left=Attribute(value=Name(id='item', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[Eq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())])]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_is_folded', args=arguments(posonlyargs=[], args=[arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=False))], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Attribute(value=Name(id='i', ctx=Load()), attr='positive', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='i', ctx=Load()), attr='case_flags', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='i', ctx=Load()), attr='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='folded', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expanding_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_expand_on_folding', ctx=Load()), args=[], keywords=[])), For(target=Name(id='c', ctx=Store()), iter=Name(id='expanding_chars', ctx=Load()), body=[If(test=Compare(left=Name(id='folded', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='c', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='branches', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CallGroup', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='group'), arg(arg='position')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Name(id='position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_index', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='invalid group reference'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_count', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown group'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='open_group_count', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='ambiguous group reference'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_calls', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='self', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='group reference not allowed'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='GROUP_CALL', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='call_ref', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}GROUP_CALL {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='group', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='UNLIMITED', ctx=Load()))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='CallRef', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ref'), arg(arg='parsed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ref', ctx=Store())], value=Name(id='ref', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parsed', ctx=Store())], value=Name(id='parsed', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='CALL_REF', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ref', ctx=Load())], ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parsed', ctx=Load()), attr='_compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='Character', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER_IGN_REV', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Name(id='NOCASE', ctx=Load()), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='zerowidth', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[Eq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Store())], value=Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Character', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='zerowidth', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='ZEROWIDTH_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='PrecompiledCode', ctx=Load()), args=[List(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='Branch', ctx=Load()), args=[List(elts=[Name(id='code', ctx=Load()), Call(func=Name(id='String', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()))])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='display', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='ascii', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], keywords=[])], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='bu')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}CHARACTER {} {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load()), Name(id='display', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Compare(left=Name(id='ch', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=1), Constant(value=None)], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='folded_characters', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='folded', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Tuple(elts=[Constant(value=0), Name(id='self', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Conditional', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='group'), arg(arg='yes_item'), arg(arg='no_item'), arg(arg='position')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Name(id='yes_item', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Name(id='no_item', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Name(id='position', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_index', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DEFINE')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown group'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))])])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_count', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='invalid group reference'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), Assign(targets=[Name(id='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Conditional', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Name(id='yes_item', ctx=Load()), Name(id='no_item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]), op=BitOr(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='GROUP_EXISTS', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='add_code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), If(test=Name(id='add_code', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='NEXT', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='add_code', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}GROUP_EXISTS {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}OR'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='yes_item', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='no_item', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='DefaultBoundary', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='DEFAULT_BOUNDARY', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='DEFAULT_BOUNDARY'))], decorator_list=[]), ClassDef(name='DefaultEndOfWord', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='DEFAULT_END_OF_WORD', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='DEFAULT_END_OF_WORD'))], decorator_list=[]), ClassDef(name='DefaultStartOfWord', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='DEFAULT_START_OF_WORD', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='DEFAULT_START_OF_WORD'))], decorator_list=[]), ClassDef(name='EndOfLine', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_LINE', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_LINE'))], decorator_list=[]), ClassDef(name='EndOfLineU', bases=[Name(id='EndOfLine', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_LINE_U', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_LINE_U'))], decorator_list=[]), ClassDef(name='EndOfString', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_STRING', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_STRING'))], decorator_list=[]), ClassDef(name='EndOfStringLine', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_STRING_LINE', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_STRING_LINE'))], decorator_list=[]), ClassDef(name='EndOfStringLineU', bases=[Name(id='EndOfStringLine', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_STRING_LINE_U', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_STRING_LINE_U'))], decorator_list=[]), ClassDef(name='EndOfWord', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='END_OF_WORD', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='END_OF_WORD'))], decorator_list=[]), ClassDef(name='Failure', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='FAILURE')), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='FAILURE', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Fuzzy', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subpattern'), arg(arg='constraints')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='constraints', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='constraints', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Store())], value=Name(id='constraints', ctx=Load())), If(test=Compare(left=Constant(value='cost'), ops=[In()], comparators=[Name(id='constraints', ctx=Load())]), body=[For(target=Name(id='e', ctx=Store()), iter=Constant(value='dis'), body=[If(test=Compare(left=Name(id='e', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='e', ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='constraints', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Constant(value='dis')], keywords=[])), body=[For(target=Name(id='e', ctx=Store()), iter=Constant(value='dis'), body=[Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='e', ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='e', ctx=Store()), iter=Constant(value='dis'), body=[Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='e', ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='e'), Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='cost'), ops=[In()], comparators=[Name(id='constraints', ctx=Load())]), body=[For(target=Name(id='e', ctx=Store()), iter=Constant(value='dis'), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='e', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Store())], value=Dict(keys=[Constant(value='d'), Constant(value='i'), Constant(value='s'), Constant(value='max')], values=[Constant(value=1), Constant(value=1), Constant(value=1), Subscript(value=Subscript(value=Name(id='constraints', ctx=Load()), slice=Constant(value='e'), ctx=Load()), slice=Constant(value=1), ctx=Load())]))])], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='e', ctx=Store()), iter=Constant(value='dise'), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Name(id='e', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[IfExp(test=Compare(left=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='UNLIMITED', ctx=Load()), orelse=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=1), ctx=Load()))], keywords=[]))], orelse=[]), For(target=Name(id='e', ctx=Store()), iter=Constant(value='dis'), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load()), slice=Name(id='e', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load()), slice=Constant(value='max'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[IfExp(test=Compare(left=Name(id='v', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='UNLIMITED', ctx=Load()), orelse=Name(id='v', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Name(id='reverse', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='REVERSE_OP', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='test')], keywords=[])), If(test=Name(id='test', ctx=Load()), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=List(elts=[BinOp(left=Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='FUZZY_EXT', ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[]))], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Constant(value=True)], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='NEXT', ctx=Load())], ctx=Load())], ctx=Load())), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Constant(value=True)], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], orelse=[]), Return(value=BinOp(left=BinOp(left=List(elts=[BinOp(left=Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='FUZZY', ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[]))], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Constant(value=True)], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='constraints', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_constraints_to_string', ctx=Load()), args=[], keywords=[])), If(test=Name(id='constraints', ctx=Load()), body=[Assign(targets=[Name(id='constraints', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Name(id='constraints', ctx=Load())))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}FUZZY{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Name(id='constraints', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='constraints', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='UNLIMITED', ctx=Load()))], decorator_list=[]), FunctionDef(name='_constraints_to_string', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='constraints', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Constant(value='ids'), body=[Assign(targets=[Tuple(elts=[Name(id='min', ctx=Store()), Name(id='max', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='max', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='con', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Name(id='min', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='con', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}<='), attr='format', ctx=Load()), args=[Name(id='min', ctx=Load())], keywords=[]))], orelse=[]), AugAssign(target=Name(id='con', ctx=Store()), op=Add(), value=Name(id='name', ctx=Load())), If(test=Compare(left=Name(id='max', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='con', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value='<={}'), attr='format', ctx=Load()), args=[Name(id='max', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='con', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cost', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Constant(value='ids'), body=[Assign(targets=[Name(id='coeff', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='coeff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cost', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{}'), attr='format', ctx=Load()), args=[Name(id='coeff', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='limit', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constraints', ctx=Load()), slice=Constant(value='cost'), ctx=Load()), slice=Constant(value='max'), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='limit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='limit', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='cost', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}<={}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='+'), attr='join', ctx=Load()), args=[Name(id='cost', ctx=Load())], keywords=[]), Name(id='limit', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='constraints', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='cost', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='constraints', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Grapheme', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='grapheme_matcher', ctx=Store())], value=Call(func=Name(id='Atomic', ctx=Load()), args=[Call(func=Name(id='Sequence', ctx=Load()), args=[List(elts=[Call(func=Name(id='LazyRepeat', ctx=Load()), args=[Call(func=Name(id='AnyAll', ctx=Load()), args=[], keywords=[]), Constant(value=1), Constant(value=None)], keywords=[]), Call(func=Name(id='GraphemeBoundary', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='grapheme_matcher', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}GRAPHEME'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='UNLIMITED', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='GraphemeBoundary', bases=[], keywords=[], body=[FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='GRAPHEME_BOUNDARY', ctx=Load()), Constant(value=1)], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='GreedyRepeat', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='GREEDY_REPEAT', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='GREEDY_REPEAT')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subpattern'), arg(arg='min_count'), arg(arg='max_count')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Store())], value=Name(id='min_count', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Store())], value=Name(id='max_count', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[Name(id='subpattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='fs', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), Return(value=Name(id='fs', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='repeat', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='repeat', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='UNLIMITED', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='repeat', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='subpattern', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=BinOp(left=List(elts=[Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='repeat', ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Name(id='subpattern', ctx=Load())), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='limit', ctx=Store())], value=Constant(value='INF'))], orelse=[Assign(targets=[Name(id='limit', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()))]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{} {} {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_op_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), Name(id='limit', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='min_count', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='max_count', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='UNLIMITED', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_count', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='UNLIMITED', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Name(id='max_count', ctx=Load()))), Return(value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='w', ctx=Load()), Name(id='UNLIMITED', ctx=Load())], keywords=[]), Constant(value=None)], ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='ofs', ctx=Store()), Name(id='req', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_required_string', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])), If(test=Name(id='req', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='ofs', ctx=Load()), Name(id='req', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='w', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), op=Mult(), right=Name(id='max_count', ctx=Load()))), Return(value=Tuple(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='w', ctx=Load()), Name(id='UNLIMITED', ctx=Load())], keywords=[]), Constant(value=None)], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='PossessiveRepeat', bases=[Name(id='GreedyRepeat', ctx=Load())], keywords=[], body=[FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='subpattern', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='repeat', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='repeat', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='UNLIMITED', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='repeat', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load())], keywords=[]))]), Return(value=BinOp(left=BinOp(left=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='ATOMIC', ctx=Load())], ctx=Load()), Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='repeat', ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Name(id='subpattern', ctx=Load())), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}ATOMIC'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='limit', ctx=Store())], value=Constant(value='INF'))], orelse=[Assign(targets=[Name(id='limit', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='max_count', ctx=Load()))]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{} {} {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1))), Attribute(value=Name(id='self', ctx=Load()), attr='_op_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='min_count', ctx=Load()), Name(id='limit', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=2)), Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Group', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='group'), arg(arg='subpattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='call_ref', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='defined_groups', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='self', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='has_simple_start', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='public_group', ctx=Store()), Name(id='private_group', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())), If(test=Compare(left=Name(id='private_group', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='public_group', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='private_groups', ctx=Load()), slice=Name(id='private_group', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='private_group', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_count', ctx=Load()), op=Sub(), right=Name(id='private_group', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='call_refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ref', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='code', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='CALL_REF', ctx=Load()), Name(id='ref', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='code', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='GROUP', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='reverse', ctx=Load()))], keywords=[]), Name(id='private_group', ctx=Load()), Name(id='public_group', ctx=Load())], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='code', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), AugAssign(target=Name(id='code', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='ref', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='code', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())), If(test=Compare(left=Name(id='group', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Subscript(value=Name(id='private_groups', ctx=Load()), slice=Name(id='group', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}GROUP {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Name(id='group', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_required_string', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='Keep', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='KEEP', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='KEEP'))], decorator_list=[]), ClassDef(name='LazyRepeat', bases=[Name(id='GreedyRepeat', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='LAZY_REPEAT', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='LAZY_REPEAT'))], decorator_list=[]), ClassDef(name='LookAround', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_dir_text', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Constant(value='AHEAD'), Constant(value='BEHIND')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='behind'), arg(arg='positive'), arg(arg='subpattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='behind', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Call(func=Attribute(value=Name(id='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Name(id='subpattern', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='LookAround', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Name(id='subpattern', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), ops=[Eq()], comparators=[Name(id='reverse', ctx=Load())])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=None)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), If(test=Name(id='reverse', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='REVERSE_OP', ctx=Load()))], orelse=[]), Return(value=BinOp(left=BinOp(left=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='LOOKAROUND', ctx=Load()), Name(id='flags', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()))], keywords=[])], ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}LOOK{} {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dir_text', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), ctx=Load()), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='behind', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=0))], decorator_list=[])], decorator_list=[]), ClassDef(name='LookAroundConditional', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_dir_text', ctx=Store())], value=Dict(keys=[Constant(value=False), Constant(value=True)], values=[Constant(value='AHEAD'), Constant(value='BEHIND')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='behind'), arg(arg='positive'), arg(arg='subpattern'), arg(arg='yes_item'), arg(arg='no_item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='behind', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Name(id='subpattern', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Name(id='yes_item', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Name(id='no_item', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), Assign(targets=[Name(id='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), Assign(targets=[Name(id='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='LookAroundConditional', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Name(id='subpattern', ctx=Load()), Name(id='yes_item', ctx=Load()), Name(id='no_item', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='can_be_affix', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='CONDITIONAL', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()))], keywords=[])], ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='compile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='NEXT', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='add_code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])), If(test=Name(id='add_code', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='NEXT', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='add_code', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}CONDITIONAL {} {}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dir_text', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load()), ctx=Load()), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='self', ctx=Load()), attr='behind', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}EITHER'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}OR'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='subpattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='subpattern', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='yes_item', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='no_item', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yes_item', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='no_item', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), Constant(value=None)], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='PrecompiledCode', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Store())], value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Call(func=Name(id='tuple', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Property', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='PROPERTY_IGN_REV', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Name(id='NOCASE', ctx=Load()), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='zerowidth', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Property', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='zerowidth', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='ZEROWIDTH_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prop', ctx=Store())], value=Subscript(value=Name(id='PROPERTY_NAMES', ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), op=RShift(), right=Constant(value=16)), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='prop', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Subscript(value=Name(id='prop', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), op=BitAnd(), right=Constant(value=65535)), ctx=Load())], ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}PROPERTY {} {}:{}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='has_property_value', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[])], decorator_list=[]), ClassDef(name='Prune', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='PRUNE')), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='PRUNE', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Range', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='RANGE_IGN_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='RANGE')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lower'), arg(arg='upper'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Name(id='NOCASE', ctx=Load()), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Store())], value=Name(id='lower', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Store())], value=Name(id='upper', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='zerowidth', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='zerowidth', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())), UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='IGNORECASE', ctx=Load()))), Name(id='in_set', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load()))), Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[NotEq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())])]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='expanding_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_expand_on_folding', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='ch', ctx=Store()), iter=Name(id='expanding_chars', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), ops=[LtE(), LtE()], comparators=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load())]), body=[Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='String', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='folded', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='items', ctx=Load())), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load())), op=Add(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='ZEROWIDTH_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='display_lower', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='ascii', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load())], keywords=[])], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='bu')], keywords=[])), Assign(targets=[Name(id='display_upper', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='ascii', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load())], keywords=[])], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='bu')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}RANGE {} {} {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load()), Name(id='display_lower', ctx=Load()), Name(id='display_upper', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), ops=[LtE(), LtE()], comparators=[Name(id='ch', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='upper', ctx=Load())]), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=1))], decorator_list=[])], decorator_list=[]), ClassDef(name='RefGroup', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_FLD', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='REF_GROUP_FLD_REV', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='group'), arg(arg='position'), arg(arg='case_flags')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NOCASE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Name(id='position', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_index', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unknown group'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=1), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='group_count', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='invalid group reference'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='group reference not allowed'), Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}REF_GROUP {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='UNLIMITED', ctx=Load()))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='SearchAnchor', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='SEARCH_ANCHOR', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SEARCH_ANCHOR'))], decorator_list=[]), ClassDef(name='Sequence', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='items', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Name(id='items', ctx=Load()))], decorator_list=[]), FunctionDef(name='fix_groups', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='fix_groups', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='make_sequence', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='pack_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Packs sequences of characters into strings.')), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='characters', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Name(id='NOCASE', ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='Character', ctx=Load())]), Attribute(value=Name(id='s', ctx=Load()), attr='positive', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='s', ctx=Load()), attr='zerowidth', ctx=Load()))]), body=[If(test=Compare(left=Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()), ops=[NotEq()], comparators=[Name(id='case_flags', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()), Call(func=Name(id='is_cased_i', ctx=Load()), args=[Name(id='info', ctx=Load()), Attribute(value=Name(id='s', ctx=Load()), attr='value', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_flush_characters', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='characters', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='characters', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='String', ctx=Load())]), Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='Literal', ctx=Load())])]), body=[If(test=Compare(left=Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()), ops=[NotEq()], comparators=[Name(id='case_flags', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='is_cased_i', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_flush_characters', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='characters', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Attribute(value=Name(id='s', ctx=Load()), attr='case_flags', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='characters', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='characters', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_flush_characters', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='characters', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='items', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_flush_characters', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='characters', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='items', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='make_sequence', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_captures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_atomic', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='is_atomic', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='can_be_affix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='contains_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='contains_group', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='items', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())), If(test=Name(id='reverse', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='s', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[AugAssign(target=Name(id='fs', ctx=Store()), op=BitOr(), value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value=None), ops=[NotIn()], comparators=[Name(id='fs', ctx=Load())]), body=[Return(value=Name(id='fs', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fs', ctx=Load()), attr='discard', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='fs', ctx=Load()), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=None)], ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())], keywords=[]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='has_simple_start', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='seq', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())), If(test=Name(id='reverse', ctx=Load()), body=[Assign(targets=[Name(id='seq', ctx=Store())], value=Subscript(value=Name(id='seq', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Name(id='seq', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='indent', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_flush_characters', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='characters'), arg(arg='case_flags'), arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='characters', ctx=Load())), body=[Return()], orelse=[]), If(test=BinOp(left=Name(id='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='IGNORECASE', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='is_cased_i', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Assign(targets=[Name(id='case_flags', ctx=Store())], value=Name(id='NOCASE', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[Eq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())]), body=[Assign(targets=[Name(id='literals', ctx=Store())], value=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_fix_full_casefold', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='literals', ctx=Load()), body=[Assign(targets=[Name(id='chars', ctx=Store())], value=Attribute(value=Name(id='item', ctx=Load()), attr='characters', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='chars', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Character', ctx=Load()), args=[Subscript(value=Name(id='chars', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='item', ctx=Load()), attr='case_flags', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='String', ctx=Load()), args=[Name(id='chars', ctx=Load())], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='item', ctx=Load()), attr='case_flags', ctx=Load()))])], keywords=[]))])], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Character', ctx=Load()), args=[Subscript(value=Name(id='characters', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='String', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))])], keywords=[]))])]), Assign(targets=[Subscript(value=Name(id='characters', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_fix_full_casefold', args=arguments(posonlyargs=[], args=[arg(arg='characters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='expanded', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_expand_on_folding', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='string', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='chunks', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='e', ctx=Store()), iter=Name(id='expanded', ctx=Load()), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='found', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='chunks', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='found', ctx=Load()), BinOp(left=Name(id='found', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='e', ctx=Load()), BinOp(left=Name(id='found', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='literals', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='Sequence', ctx=Load()), attr='_merge_chunks', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[Name(id='start', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='literals', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Literal', ctx=Load()), args=[Subscript(value=Name(id='characters', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=Name(id='start', ctx=Load())), ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='IGNORECASE', ctx=Load()))])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='literals', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Literal', ctx=Load()), args=[Subscript(value=Name(id='characters', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='FULLIGNORECASE', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Name(id='end', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='literals', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Literal', ctx=Load()), args=[Subscript(value=Name(id='characters', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load())), ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='IGNORECASE', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Name(id='literals', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_merge_chunks', args=arguments(posonlyargs=[], args=[arg(arg='chunks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Return(value=Name(id='chunks', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='chunks', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='new_chunks', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='s', ctx=Store()), Name(id='e', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='chunks', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[LtE()], comparators=[Name(id='end', ctx=Load())]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='end', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_chunks', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='e', ctx=Load())], ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_chunks', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='new_chunks', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='is_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='is_empty', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='items', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='max_width', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='seq', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())), If(test=Name(id='reverse', ctx=Load()), body=[Assign(targets=[Name(id='seq', ctx=Store())], value=Subscript(value=Name(id='seq', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='offset', ctx=Store())], value=Constant(value=0)), For(target=Name(id='s', ctx=Store()), iter=Name(id='seq', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='ofs', ctx=Store()), Name(id='req', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='get_required_string', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])), AugAssign(target=Name(id='offset', ctx=Store()), op=Add(), value=Name(id='ofs', ctx=Load())), If(test=Name(id='req', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='offset', ctx=Load()), Name(id='req', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='offset', ctx=Load()), Constant(value=None)], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='SetBase', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='items'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Name(id='NOCASE', ctx=Load()), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='RegexBase', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='positive', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='zerowidth', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char_width', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='positive'), arg(arg='case_flags'), arg(arg='zerowidth')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), Name(id='positive', ctx=Load()), Name(id='case_flags', ctx=Load()), Name(id='zerowidth', ctx=Load())], keywords=[]), attr='optimise', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), Constant(value=False)], keywords=[]))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='ZEROWIDTH_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load())], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='compile', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}{} {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_op_name', ctx=Load()), Subscript(value=Name(id='POS_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='dump', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='reverse', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_handle_case_folding', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())), UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='IGNORECASE', ctx=Load()))), Name(id='in_set', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load()))), Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[NotEq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())])]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='expanding_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_expand_on_folding', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='ch', ctx=Store()), iter=Name(id='expanding_chars', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='matches', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='folded', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='String', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='folded', ctx=Load()), ifs=[], is_async=0)])], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='folded', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='items', ctx=Load())), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Branch', ctx=Load()), args=[BinOp(left=List(elts=[Name(id='self', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='items', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())), UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='IGNORECASE', ctx=Load())))]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load()))), Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[NotEq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())])]), body=[Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='expanding_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_expand_on_folding', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='ch', ctx=Store()), iter=Name(id='expanding_chars', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='matches', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Name(id='ch', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='folded', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='seen', ctx=Load())), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='folded', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='folded', ctx=Store()), iter=Name(id='seen', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='SetDiff', bases=[Name(id='SetBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_DIFF_IGN_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SET_DIFF')), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='SetUnion', ctx=Load()), args=[Name(id='info', ctx=Load()), Subscript(value=Name(id='items', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())), keyword(arg='zerowidth', value=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()))]), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[keyword(arg='in_set', value=Constant(value=True))]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_case_folding', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='matches', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='matches', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]))])), Return(value=Compare(left=Name(id='m', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[])], decorator_list=[]), ClassDef(name='SetInter', bases=[Name(id='SetBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_INTER_IGN_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SET_INTER')), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[keyword(arg='in_set', value=Constant(value=True))])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='SetInter', ctx=Load())], keywords=[]), Attribute(value=Name(id='m', ctx=Load()), attr='positive', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())), keyword(arg='zerowidth', value=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()))]), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_case_folding', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='matches', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Compare(left=Name(id='m', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[])], decorator_list=[]), ClassDef(name='SetSymDiff', bases=[Name(id='SetBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_SYM_DIFF_IGN_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SET_SYM_DIFF')), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[keyword(arg='in_set', value=Constant(value=True))])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='SetSymDiff', ctx=Load())], keywords=[]), Attribute(value=Name(id='m', ctx=Load()), attr='positive', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())), keyword(arg='zerowidth', value=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()))]), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_case_folding', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Compare(left=Name(id='m', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='matches', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[])]))], orelse=[]), Return(value=Compare(left=Name(id='m', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[])], decorator_list=[]), ClassDef(name='SetUnion', bases=[Name(id='SetBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='SET_UNION_IGN_REV', ctx=Load())])), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SET_UNION')), FunctionDef(name='optimise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='reverse'), arg(arg='in_set')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[keyword(arg='in_set', value=Constant(value=True))])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='SetUnion', ctx=Load())], keywords=[]), Attribute(value=Name(id='m', ctx=Load()), attr='positive', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='items', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='with_flags', ctx=Load()), args=[], keywords=[keyword(arg='positive', value=Compare(left=Attribute(value=Name(id='i', ctx=Load()), attr='positive', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())])), keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())), keyword(arg='zerowidth', value=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()))]), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_case_folding', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='in_set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='zerowidth', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='ZEROWIDTH_OP', ctx=Load()))], orelse=[]), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='characters', ctx=Store()), Name(id='others', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[]), List(elts=[], ctx=Load())], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='m', ctx=Load()), Name(id='Character', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='characters', ctx=Load()), slice=Attribute(value=Name(id='m', ctx=Load()), attr='positive', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='others', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=List(elts=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load())], ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='positive', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='characters', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Name(id='positive', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='POSITIVE_OP', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='CHARACTER', ctx=Load()), Name(id='flags', ctx=Load()), Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='STRING', ctx=Load()), Name(id='flags', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]))], keywords=[]))])], orelse=[]), For(target=Name(id='m', ctx=Store()), iter=Name(id='others', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='compile', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='END', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='code', ctx=Load()))], decorator_list=[]), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='matches', ctx=Load()), args=[Name(id='ch', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Compare(left=Name(id='m', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='positive', ctx=Load())]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Skip', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='SKIP')), Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='SKIP', ctx=Load()))], decorator_list=[]), ClassDef(name='StartOfLine', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='START_OF_LINE', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='START_OF_LINE'))], decorator_list=[]), ClassDef(name='StartOfLineU', bases=[Name(id='StartOfLine', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='START_OF_LINE_U', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='START_OF_LINE_U'))], decorator_list=[]), ClassDef(name='StartOfString', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='START_OF_STRING', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='START_OF_STRING'))], decorator_list=[]), ClassDef(name='StartOfWord', bases=[Name(id='ZeroWidthBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Attribute(value=Name(id='OP', ctx=Load()), attr='START_OF_WORD', ctx=Load())), Assign(targets=[Name(id='_op_name', ctx=Store())], value=Constant(value='START_OF_WORD'))], decorator_list=[]), ClassDef(name='String', bases=[Name(id='RegexBase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_opcode', ctx=Store())], value=Dict(keys=[Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='NOCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='IGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLCASE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='FULLIGNORECASE', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='OP', ctx=Load()), attr='STRING', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_IGN', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_FLD', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_IGN_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_REV', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='STRING_FLD_REV', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='characters'), arg(arg='case_flags')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NOCASE', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), op=BitAnd(), right=Name(id='FULLIGNORECASE', ctx=Load())), ops=[Eq()], comparators=[Name(id='FULLIGNORECASE', ctx=Load())]), body=[Assign(targets=[Name(id='folded_characters', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='char', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), body=[Assign(targets=[Name(id='folded', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='fold_case', ctx=Load()), args=[Name(id='FULL_CASE_FOLDING', ctx=Load()), Call(func=Name(id='chr', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='folded_characters', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='folded', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='folded_characters', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='folded_characters', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='folded_characters', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='required', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_firstset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='reverse', ctx=Load()), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0))]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Call(func=Name(id='Character', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[keyword(arg='case_flags', value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()))])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='has_simple_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse'), arg(arg='fuzzy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Name(id='fuzzy', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='FUZZY_OP', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='required', ctx=Load()), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Name(id='REQUIRED_OP', ctx=Load()))], orelse=[]), Return(value=List(elts=[BinOp(left=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_opcode', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), Name(id='reverse', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='flags', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='folded_characters', ctx=Load())], keywords=[])], ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='folded_characters', ctx=Load()))], ctx=Load()))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='display', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='ascii', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='bu')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}STRING {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Name(id='display', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='max_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='folded_characters', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Constant(value=0), Name(id='self', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Literal', bases=[Name(id='String', ctx=Load())], keywords=[], body=[FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='literal', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='display', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='ascii', ctx=Load()), args=[Name(id='literal', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='bu')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}LITERAL MATCH {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Name(id='display', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='StringSet', bases=[Name(id='Branch', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info'), arg(arg='name'), arg(arg='case_flags')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NOCASE', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Store())], value=Subscript(value=Name(id='CASE_FLAGS_COMBINATIONS', ctx=Load()), slice=Name(id='case_flags', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='set_key', ctx=Store())], value=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='set_key', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='info', ctx=Load()), attr='named_lists_used', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='info', ctx=Load()), attr='named_lists_used', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='set_key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='named_lists_used', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='index', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='named_lists_used', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='set_key', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='items', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='kwargs', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='case_flags', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load())), Assign(targets=[Name(id='encoding', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_ENCODINGS', ctx=Load()))), Assign(targets=[Name(id='fold_flags', ctx=Store())], value=BinOp(left=Name(id='encoding', ctx=Load()), op=BitOr(), right=Name(id='case_flags', ctx=Load()))), Assign(targets=[Name(id='choices', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='string', ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='string', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=ListComp(elt=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='choices', ctx=Load()), attr='append', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='Character', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[keyword(arg='case_flags', value=Name(id='case_flags', ctx=Load()))]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='string', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='choices', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load())), keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Sequence', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='choice', ctx=Store()), iter=Name(id='choices', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='reverse')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}STRING_SET {}{}'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='INDENT', ctx=Load()), op=Mult(), right=Name(id='indent', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Subscript(value=Name(id='CASE_TEXT', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='case_flags', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__del__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info', ctx=Store())], value=Constant(value=None))], decorator_list=[])], decorator_list=[]), ClassDef(name='Source', bases=[], keywords=[], body=[Expr(value=Constant(value='Scanner for the regular expression source string.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='string', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Store())], value=Name(id='string', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char_type', ctx=Store())], value=Name(id='chr', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char_type', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='c')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='c', ctx=Load())], ctx=Load())], keywords=[])))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sep', ctx=Store())], value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='override_ignore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), Try(body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='override_ignore', ctx=Load()))]), body=[While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[Break()])])], orelse=[])], orelse=[]), Assign(targets=[Name(id='ch', ctx=Store())], value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='ch', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Return(value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Load()))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_many', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), body=[Assign(targets=[Name(id='substring', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='count', ctx=Load())]), body=[While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[Break()])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='substring', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='substring', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='substring', ctx=Store())], value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Name(id='count', ctx=Load()))), ctx=Load())), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Return(value=Name(id='substring', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_while', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set'), arg(arg='include')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='substring', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='test_set', ctx=Load())]), ops=[Eq()], comparators=[Name(id='include', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='substring', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Break()])])])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))], orelse=[Try(body=[While(test=Compare(left=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='test_set', ctx=Load())]), ops=[Eq()], comparators=[Name(id='include', ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='substring', ctx=Store())], value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Return(value=Name(id='substring', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='substring', ctx=Store())], value=Subscript(value=Name(id='string', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Return(value=Name(id='substring', ctx=Load()))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='skip_while', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test_set'), arg(arg='include')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), body=[While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='test_set', ctx=Load())]), ops=[Eq()], comparators=[Name(id='include', ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Break()])])])], orelse=[])], orelse=[While(test=Compare(left=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='test_set', ctx=Load())]), ops=[Eq()], comparators=[Name(id='include', ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='substring')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), body=[Try(body=[For(target=Name(id='c', ctx=Store()), iter=Name(id='substring', ctx=Load()), body=[While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[Break()])])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Name(id='c', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='substring', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]))), Return(value=Constant(value=True))])], decorator_list=[]), FunctionDef(name='expect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='substring')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='missing {}'), attr='format', ctx=Load()), args=[Name(id='substring', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='at_end', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())), Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_space', ctx=Load()), body=[While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='string', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[Break()])])], orelse=[])], orelse=[]), Return(value=Compare(left=Name(id='pos', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Constant(value=True))]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='Info', bases=[], keywords=[], body=[Expr(value=Constant(value='Info about the regular expression.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='flags'), arg(arg='char_type'), arg(arg='kwargs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None), Dict(keys=[], values=[])]), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Subscript(value=Name(id='DEFAULT_FLAGS', ctx=Load()), slice=BoolOp(op=Or(), values=[BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())]), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='global_flags', ctx=Store())], value=Name(id='flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inline_locale', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group_index', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group_name', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='char_type', ctx=Store())], value=Name(id='char_type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='named_lists_used', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='open_groups', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='open_group_count', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='defined_groups', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group_calls', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='private_groups', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='open_group', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='group_index', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='group', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[While(test=Constant(value=True), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='group_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='group_count', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='group_name', ctx=Load())])]), body=[Break()], orelse=[])], orelse=[]), Assign(targets=[Name(id='group', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='group_count', ctx=Load())), If(test=Name(id='name', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='group_index', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='group_name', ctx=Load()), slice=Name(id='group', ctx=Load()), ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='group', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='open_groups', ctx=Load())]), body=[Assign(targets=[Name(id='group_alias', ctx=Store())], value=UnaryOp(op=USub(), operand=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='private_groups', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='private_groups', ctx=Load()), slice=Name(id='group_alias', ctx=Load()), ctx=Store())], value=Name(id='group', ctx=Load())), Assign(targets=[Name(id='group', ctx=Store())], value=Name(id='group_alias', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_groups', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_group_count', ctx=Load()), slice=Name(id='group', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_group_count', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='group', ctx=Load()), Constant(value=0)], keywords=[]), op=Add(), right=Constant(value=1))), Return(value=Name(id='group', ctx=Load()))], decorator_list=[]), FunctionDef(name='close_group', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_groups', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_open_group', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='VERSION1', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='group_index', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))]), Return(value=Compare(left=Name(id='group', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='open_groups', ctx=Load())]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_check_group_features', args=arguments(posonlyargs=[], args=[arg(arg='info'), arg(arg='parsed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether the reverse and fuzzy features of the group calls match\n    the groups which they call.\n    ')), Assign(targets=[Name(id='call_refs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='additional_groups', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='call', ctx=Store()), Name(id='reverse', ctx=Store()), Name(id='fuzzy', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='info', ctx=Load()), attr='group_calls', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='call', ctx=Load()), attr='group', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Attribute(value=Name(id='call_refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ref', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='call', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='rev', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='REVERSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='fuz', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='Fuzzy', ctx=Load())], keywords=[])), If(test=Compare(left=Tuple(elts=[Name(id='rev', ctx=Load()), Name(id='fuz', ctx=Load())], ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='additional_groups', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='CallRef', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='call_refs', ctx=Load())], keywords=[]), Name(id='parsed', ctx=Load())], keywords=[]), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='def_info', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='info', ctx=Load()), attr='defined_groups', ctx=Load()), slice=Attribute(value=Name(id='call', ctx=Load()), attr='group', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='group', ctx=Store())], value=Subscript(value=Name(id='def_info', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='def_info', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='additional_groups', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='group', ctx=Load()), Name(id='reverse', ctx=Load()), Name(id='fuzzy', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='call_refs', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='call_refs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='ref', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='call', ctx=Load()), attr='call_ref', ctx=Store())], value=Name(id='ref', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='call_refs', ctx=Store())], value=Name(id='call_refs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='info', ctx=Load()), attr='additional_groups', ctx=Store())], value=Name(id='additional_groups', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_required_string', args=arguments(posonlyargs=[], args=[arg(arg='parsed'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets the required string and related info of a parsed pattern.')), Assign(targets=[Tuple(elts=[Name(id='req_offset', ctx=Store()), Name(id='required', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_required_string', ctx=Load()), args=[Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Name(id='REVERSE', ctx=Load()))], keywords=[])], keywords=[])), If(test=Name(id='required', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='required', ctx=Load()), attr='required', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Name(id='req_offset', ctx=Load()), ops=[GtE()], comparators=[Name(id='UNLIMITED', ctx=Load())]), body=[Assign(targets=[Name(id='req_offset', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='req_flags', ctx=Store())], value=Attribute(value=Name(id='required', ctx=Load()), attr='case_flags', ctx=Load())), If(test=UnaryOp(op=Not(), operand=BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Name(id='UNICODE', ctx=Load()))), body=[AugAssign(target=Name(id='req_flags', ctx=Store()), op=BitAnd(), value=UnaryOp(op=Invert(), operand=Name(id='UNICODE', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='req_chars', ctx=Store())], value=Attribute(value=Name(id='required', ctx=Load()), attr='folded_characters', ctx=Load()))], orelse=[Assign(targets=[Name(id='req_offset', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='req_chars', ctx=Store())], value=Tuple(elts=[], ctx=Load())), Assign(targets=[Name(id='req_flags', ctx=Store())], value=Constant(value=0))]), Return(value=Tuple(elts=[Name(id='req_offset', ctx=Load()), Name(id='req_chars', ctx=Load()), Name(id='req_flags', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='Scanner', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lexicon'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lexicon', ctx=Store())], value=Name(id='lexicon', ctx=Load())), Assign(targets=[Name(id='patterns', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='phrase', ctx=Store()), Name(id='action', ctx=Store())], ctx=Store()), iter=Name(id='lexicon', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='Source', ctx=Load()), args=[Name(id='phrase', ctx=Load())], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Name(id='Info', ctx=Load()), args=[Name(id='flags', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='char_type', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='source', ctx=Load()), attr='ignore_space', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='VERBOSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='_parse_pattern', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='at_end', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='unbalanced parenthesis'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='patterns', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='remove_captures', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Name(id='Info', ctx=Load()), args=[Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Group', ctx=Load()), args=[Name(id='info', ctx=Load()), BinOp(left=Name(id='g', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='g', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='Branch', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reverse', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='REVERSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='optimise', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='reverse', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='pack_characters', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='req_offset', ctx=Store()), Name(id='req_chars', ctx=Store()), Name(id='req_flags', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_required_string', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_check_group_features', ctx=Load()), args=[Name(id='info', ctx=Load()), Name(id='parsed', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='info', ctx=Load()), attr='call_refs', ctx=Load()), body=[Raise(exc=Call(func=Name(id='error', ctx=Load()), args=[Constant(value='recursive regex not supported by Scanner'), Attribute(value=Name(id='source', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Name(id='source', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='reverse', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='REVERSE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Tuple(elts=[Attribute(value=Name(id='OP', ctx=Load()), attr='SUCCESS', ctx=Load())], ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='_flatten_code', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='has_simple_start', ctx=Load()), args=[], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='fs_code', ctx=Store())], value=Call(func=Name(id='_compile_firstset', ctx=Load()), args=[Name(id='info', ctx=Load()), Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_firstset', ctx=Load()), args=[Name(id='reverse', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='fs_code', ctx=Store())], value=Call(func=Name(id='_flatten_code', ctx=Load()), args=[Name(id='fs_code', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=BinOp(left=Name(id='fs_code', ctx=Load()), op=Add(), right=Name(id='code', ctx=Load())))], handlers=[ExceptHandler(type=Name(id='_FirstSetError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='flags', ctx=Load()), op=BitAnd(), right=Name(id='_ALL_VERSIONS', ctx=Load())), Name(id='DEFAULT_VERSION', ctx=Load())])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=0), Name(id='VERSION0', ctx=Load()), Name(id='VERSION1', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='VERSION0 and VERSION1 flags are mutually incompatible')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scanner', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=None), BinOp(left=BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Name(id='GLOBAL_FLAGS', ctx=Load())), op=BitOr(), right=Name(id='version', ctx=Load())), Name(id='code', ctx=Load()), Dict(keys=[], values=[]), Dict(keys=[], values=[]), Dict(keys=[], values=[]), List(elts=[], ctx=Load()), Name(id='req_offset', ctx=Load()), Name(id='req_chars', ctx=Load()), Name(id='req_flags', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='scan', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scanner', ctx=Load()), attr='scanner', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[]), attr='match', ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='match', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='j', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='j', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='action', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='lexicon', ctx=Load()), slice=BinOp(left=Attribute(value=Name(id='m', ctx=Load()), attr='lastindex', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='action', ctx=Load()), Constant(value='__call__')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Store())], value=Name(id='m', ctx=Load())), Assign(targets=[Name(id='action', ctx=Store())], value=Call(func=Name(id='action', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='action', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Name(id='j', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), Subscript(value=Name(id='string', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='PROPERTIES', ctx=Store())], value=Call(func=Attribute(value=Name(id='_regex', ctx=Load()), attr='get_properties', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='PROPERTY_NAMES', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='prop_name', ctx=Store()), Tuple(elts=[Name(id='prop_id', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='PROPERTIES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='prop_values', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='PROPERTY_NAMES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='prop_id', ctx=Load()), Tuple(elts=[Constant(value=''), Dict(keys=[], values=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='prop_name', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='PROPERTY_NAMES', ctx=Load()), slice=Name(id='prop_id', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='prop_values', ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='val_name', ctx=Store()), Name(id='val_id', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='prop_values', ctx=Load()), slice=Name(id='val_id', ctx=Load()), ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='prop_values', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='val_id', ctx=Load()), Constant(value='')], keywords=[]), Name(id='val_name', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='CHARACTER_ESCAPES', ctx=Store())], value=Dict(keys=[Constant(value='a'), Constant(value='b'), Constant(value='f'), Constant(value='n'), Constant(value='r'), Constant(value='t'), Constant(value='v')], values=[Constant(value='\x07'), Constant(value='\x08'), Constant(value='\x0c'), Constant(value='\n'), Constant(value='\r'), Constant(value='\t'), Constant(value='\x0b')])), Assign(targets=[Name(id='CHARSET_ESCAPES', ctx=Store())], value=Dict(keys=[Constant(value='d'), Constant(value='D'), Constant(value='h'), Constant(value='s'), Constant(value='S'), Constant(value='w'), Constant(value='W')], values=[Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Digit'), Constant(value=True)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Digit'), Constant(value=False)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Blank'), Constant(value=True)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Space'), Constant(value=True)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Space'), Constant(value=False)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Word'), Constant(value=True)], keywords=[]), Call(func=Name(id='lookup_property', ctx=Load()), args=[Constant(value=None), Constant(value='Word'), Constant(value=False)], keywords=[])])), Assign(targets=[Name(id='POSITION_ESCAPES', ctx=Store())], value=Dict(keys=[Constant(value='A'), Constant(value='b'), Constant(value='B'), Constant(value='K'), Constant(value='m'), Constant(value='M'), Constant(value='Z')], values=[Call(func=Name(id='StartOfString', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Boundary', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Boundary', ctx=Load()), args=[Constant(value=False)], keywords=[]), Call(func=Name(id='Keep', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='StartOfWord', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='EndOfWord', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='EndOfString', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='WORD_POSITION_ESCAPES', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='POSITION_ESCAPES', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='WORD_POSITION_ESCAPES', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='b'), Constant(value='B'), Constant(value='m'), Constant(value='M')], values=[Call(func=Name(id='DefaultBoundary', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DefaultBoundary', ctx=Load()), args=[Constant(value=False)], keywords=[]), Call(func=Name(id='DefaultStartOfWord', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DefaultEndOfWord', ctx=Load()), args=[], keywords=[])])], keywords=[])), Assign(targets=[Name(id='VERBS', ctx=Store())], value=Dict(keys=[Constant(value='FAIL'), Constant(value='F'), Constant(value='PRUNE'), Constant(value='SKIP')], values=[Call(func=Name(id='Failure', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Failure', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Prune', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Skip', ctx=Load()), args=[], keywords=[])]))], type_ignores=[])