Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), ImportFrom(module='api', names=[alias(name='PlatformDirsABC')], level=1), ClassDef(name='MacOS', bases=[Name(id='PlatformDirsABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Platform directories for the macOS operating system. Follows the guidance from `Apple documentation\n    <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>` and\n    `version <platformdirs.api.PlatformDirsABC.version>`.\n    ')), FunctionDef(name='user_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Library/Application Support/')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Constant(value='/Library/Application Support')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: config directory tied to the user, e.g. ``~/Library/Preferences/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Library/Preferences/')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: config directory shared by the users, e.g. ``/Library/Preferences/$appname``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Constant(value='/Library/Preferences')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Library/Caches')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_state_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: state directory tied to the user, same as `user_data_dir`')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='user_data_dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_log_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Library/Logs')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_documents_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: documents directory tied to the user, e.g. ``~/Documents``')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Documents')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_runtime_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Library/Caches/TemporaryItems')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='MacOS')], ctx=Load()))], type_ignores=[])