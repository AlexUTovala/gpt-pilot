Module(body=[Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='sys')]), ClassDef(name='VendorImporter', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A PEP 302 meta path importer for finding optionally-vendored\n    or otherwise naturally-installed packages from root_name.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root_name'), arg(arg='vendored_names'), arg(arg='vendor_pkg')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_name', ctx=Store())], value=Name(id='root_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vendored_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='vendored_names', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vendor_pkg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='vendor_pkg', ctx=Load()), Call(func=Attribute(value=Name(id='root_name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='extern'), Constant(value='_vendor')], keywords=[])]))], decorator_list=[]), FunctionDef(name='search_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Search first the vendor package then as a natural package.\n        ')), Expr(value=Yield(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='vendor_pkg', ctx=Load()), op=Add(), right=Constant(value='.')))), Expr(value=Yield(value=Constant(value='')))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_module_matches_namespace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Figure out if the target module is vendored.')), Assign(targets=[Tuple(elts=[Name(id='root', ctx=Store()), Name(id='base', ctx=Store()), Name(id='target', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='partition', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='root_name', ctx=Load()), op=Add(), right=Constant(value='.'))], keywords=[])), Return(value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='root', ctx=Load())), Call(func=Name(id='any', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='target', ctx=Load()), attr='startswith', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='vendored_names', ctx=Load())], keywords=[])], keywords=[])]))], decorator_list=[]), FunctionDef(name='load_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Iterate over the search path to locate and load fullname.\n        ')), Assign(targets=[Tuple(elts=[Name(id='root', ctx=Store()), Name(id='base', ctx=Store()), Name(id='target', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='partition', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='root_name', ctx=Load()), op=Add(), right=Constant(value='.'))], keywords=[])), For(target=Name(id='prefix', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='search_path', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='extant', ctx=Store())], value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='target', ctx=Load()))), Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='extant', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='extant', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Store())], value=Name(id='mod', ctx=Load())), Return(value=Name(id='mod', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="The '{target}' package is required; normally this is bundled with this package so if you get this warning, consult the packager of your distribution."), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])], keywords=[]))])], decorator_list=[]), FunctionDef(name='create_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_module', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exec_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname'), arg(arg='path'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a module spec for vendored names.')), Return(value=IfExp(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_module_matches_namespace', ctx=Load()), args=[Name(id='fullname', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_loader', ctx=Load()), args=[Name(id='fullname', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), orelse=Constant(value=None)))], decorator_list=[]), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Install this importer into sys.meta_path if not already present.\n        ')), If(test=Compare(left=Name(id='self', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='names', ctx=Store())], value=Tuple(elts=[Constant(value='packaging'), Constant(value='platformdirs'), Constant(value='jaraco'), Constant(value='importlib_resources'), Constant(value='more_itertools')], ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='VendorImporter', ctx=Load()), args=[Name(id='__name__', ctx=Load()), Name(id='names', ctx=Load())], keywords=[]), attr='install', ctx=Load()), args=[], keywords=[]))], type_ignores=[])