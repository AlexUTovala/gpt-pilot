Module(body=[Expr(value=Constant(value='\nHelpers for normalization as expected in wheel/sdist/module file names\nand core metadata\n')), Import(names=[alias(name='re')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='extern', names=[alias(name='packaging')], level=1), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=1), Assign(targets=[Name(id='_Path', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Path', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_VALID_NAME', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_UNSAFE_NAME_CHARS', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[^A-Z0-9.]+'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_NON_ALPHANUMERIC', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[^A-Z0-9]+'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='safe_identifier', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make a string safe to be used as Python identifier.\n    >>> safe_identifier("12abc")\n    \'_12abc\'\n    >>> safe_identifier("__editable__.myns.pkg-78.9.3_local")\n    \'__editable___myns_pkg_78_9_3_local\'\n    ')), Assign(targets=[Name(id='safe', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\W|^(?=\\d)'), Constant(value='_'), Name(id='name', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='safe', ctx=Load()), attr='isidentifier', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='safe', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='safe_name', args=arguments(posonlyargs=[], args=[arg(arg='component', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Escape a component used as a project name according to Core Metadata.\n    >>> safe_name("hello world")\n    \'hello-world\'\n    >>> safe_name("hello?world")\n    \'hello-world\'\n    ')), Return(value=Call(func=Attribute(value=Name(id='_UNSAFE_NAME_CHARS', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Name(id='component', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='safe_version', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert an arbitrary string into a valid version string.\n    >>> safe_version("1988 12 25")\n    \'1988.12.25\'\n    >>> safe_version("v0.2.1")\n    \'0.2.1\'\n    >>> safe_version("v0.2?beta")\n    \'0.2b0\'\n    >>> safe_version("v0.2 beta")\n    \'0.2b0\'\n    >>> safe_version("ubuntu lts")\n    Traceback (most recent call last):\n    ...\n    setuptools.extern.packaging.version.InvalidVersion: Invalid version: \'ubuntu.lts\'\n    ')), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='.')], keywords=[])), Try(body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='Version', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='InvalidVersion', ctx=Load()), body=[Assign(targets=[Name(id='attempt', ctx=Store())], value=Call(func=Attribute(value=Name(id='_UNSAFE_NAME_CHARS', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Name(id='v', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='Version', ctx=Load()), args=[Name(id='attempt', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='best_effort_version', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert an arbitrary string into a version-like string.\n    >>> best_effort_version("v0.2 beta")\n    \'0.2b0\'\n\n    >>> import warnings\n    >>> warnings.simplefilter("ignore", category=SetuptoolsDeprecationWarning)\n    >>> best_effort_version("ubuntu lts")\n    \'ubuntu.lts\'\n    ')), Try(body=[Return(value=Call(func=Name(id='safe_version', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='InvalidVersion', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid version: '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=114), Constant(value='.')]), JoinedStr(values=[Constant(value='\n            Version '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=114), Constant(value=' is not valid according to PEP 440.\n\n            Please make sure to specify a valid version for your package.\n            Also note that future releases of setuptools may halt the build process\n            if an invalid version is given.\n            ')])], keywords=[keyword(arg='see_url', value=Constant(value='https://peps.python.org/pep-0440/')), keyword(arg='due_date', value=Tuple(elts=[Constant(value=2023), Constant(value=9), Constant(value=26)], ctx=Load()))])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='.')], keywords=[])), Return(value=Call(func=Name(id='safe_name', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='safe_extra', args=arguments(posonlyargs=[], args=[arg(arg='extra', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize extra name according to PEP 685\n    >>> safe_extra("_FrIeNdLy-._.-bArD")\n    \'friendly-bard\'\n    >>> safe_extra("FrIeNdLy-._.-bArD__._-")\n    \'friendly-bard\'\n    ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_NON_ALPHANUMERIC', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Name(id='extra', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value='-')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='filename_component', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize each component of a filename (e.g. distribution/version part of wheel)\n    Note: ``value`` needs to be already normalized.\n    >>> filename_component("my-pkg")\n    \'my_pkg\'\n    ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value='_')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='safer_name', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like ``safe_name`` but can be used as filename component for wheel')), Return(value=Call(func=Name(id='filename_component', ctx=Load()), args=[Call(func=Name(id='safe_name', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='safer_best_effort_version', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like ``best_effort_version`` but can be used as filename component for wheel')), Return(value=Call(func=Name(id='filename_component', ctx=Load()), args=[Call(func=Name(id='best_effort_version', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])