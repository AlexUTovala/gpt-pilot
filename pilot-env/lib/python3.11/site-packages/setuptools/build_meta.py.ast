Module(body=[Expr(value=Constant(value='A PEP 517 interface to setuptools\n\nPreviously, when a user or a command line tool (let\'s call it a "frontend")\nneeded to make a request of setuptools to take a certain action, for\nexample, generating a list of installation requirements, the frontend would\nwould call "setup.py egg_info" or "setup.py bdist_wheel" on the command line.\n\nPEP 517 defines a different method of interfacing with setuptools. Rather\nthan calling "setup.py" directly, the frontend should:\n\n  1. Set the current directory to the directory with a setup.py file\n  2. Import this module into a safe python interpreter (one in which\n     setuptools can potentially set global variables or crash hard).\n  3. Call one of the functions defined in PEP 517.\n\nWhat each function does is defined in PEP 517. However, here is a "casual"\ndefinition of the functions (this definition should not be relied on for\nbug reports or API stability):\n\n  - `build_wheel`: build a wheel in the folder and return the basename\n  - `get_requires_for_build_wheel`: get the `setup_requires` to build\n  - `prepare_metadata_for_build_wheel`: get the `install_requires`\n  - `build_sdist`: build an sdist in the folder and return the basename\n  - `get_requires_for_build_sdist`: get the `setup_requires` to build\n\nAgain, this is not a formal definition! Just a "taste" of the module.\n')), Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tokenize')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='warnings')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Union')], level=0), Import(names=[alias(name='setuptools')]), Import(names=[alias(name='distutils')]), ImportFrom(names=[alias(name='errors')], level=1), ImportFrom(module='_path', names=[alias(name='same_path')], level=1), ImportFrom(module='_reqs', names=[alias(name='parse_strings')], level=1), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=1), ImportFrom(module='distutils.util', names=[alias(name='strtobool')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='get_requires_for_build_sdist'), Constant(value='get_requires_for_build_wheel'), Constant(value='prepare_metadata_for_build_wheel'), Constant(value='build_wheel'), Constant(value='build_sdist'), Constant(value='get_requires_for_build_editable'), Constant(value='prepare_metadata_for_build_editable'), Constant(value='build_editable'), Constant(value='__legacy__'), Constant(value='SetupRequirementsError')], ctx=Load())), Assign(targets=[Name(id='SETUPTOOLS_ENABLE_FEATURES', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='SETUPTOOLS_ENABLE_FEATURES'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='LEGACY_EDITABLE', ctx=Store())], value=Compare(left=Constant(value='legacy-editable'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='SETUPTOOLS_ENABLE_FEATURES', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[])])), ClassDef(name='SetupRequirementsError', bases=[Name(id='BaseException', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifiers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='specifiers', ctx=Store())], value=Name(id='specifiers', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Distribution', bases=[Attribute(value=Attribute(value=Name(id='setuptools', ctx=Load()), attr='dist', ctx=Load()), attr='Distribution', ctx=Load())], keywords=[], body=[FunctionDef(name='fetch_build_eggs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifiers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='specifier_list', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='parse_strings', ctx=Load()), args=[Name(id='specifiers', ctx=Load())], keywords=[])], keywords=[])), Raise(exc=Call(func=Name(id='SetupRequirementsError', ctx=Load()), args=[Name(id='specifier_list', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='patch', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Replace\n        distutils.dist.Distribution with this class\n        for the duration of this context.\n        ')), Assign(targets=[Name(id='orig', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='Distribution', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='Distribution', ctx=Store())], value=Name(id='cls', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='Distribution', ctx=Store())], value=Name(id='orig', ctx=Load()))])], decorator_list=[Name(id='classmethod', ctx=Load()), Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())])], decorator_list=[]), FunctionDef(name='no_install_setup_requires', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Temporarily disable installing setup_requires\n\n    Under PEP 517, the backend reports build dependencies to the frontend,\n    and the frontend is responsible for ensuring they're installed.\n    So setuptools (acting as a backend) should not try to install them.\n    ")), Assign(targets=[Name(id='orig', ctx=Store())], value=Attribute(value=Name(id='setuptools', ctx=Load()), attr='_install_setup_requires', ctx=Load())), Assign(targets=[Attribute(value=Name(id='setuptools', ctx=Load()), attr='_install_setup_requires', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='setuptools', ctx=Load()), attr='_install_setup_requires', ctx=Store())], value=Name(id='orig', ctx=Load()))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_get_immediate_subdirectories', args=arguments(posonlyargs=[], args=[arg(arg='a_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='a_dir', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='a_dir', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[])], is_async=0)]))], decorator_list=[]), FunctionDef(name='_file_with_extension', args=arguments(posonlyargs=[], args=[arg(arg='directory'), arg(arg='extension')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='matching', ctx=Store())], value=GeneratorExp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='extension', ctx=Load())], keywords=[])], is_async=0)])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='file', ctx=Store())], ctx=Store())], value=Name(id='matching', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='No distribution was found. Ensure that `setup.py` is not empty and that it calls `setup()`.')], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='file', ctx=Load()))], decorator_list=[]), FunctionDef(name='_open_setup_script', args=arguments(posonlyargs=[], args=[arg(arg='setup_script')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Constant(value='from setuptools import setup; setup()', kind='u')], keywords=[]))], orelse=[]), Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='tokenize', ctx=Load()), Constant(value='open'), Name(id='open', ctx=Load())], keywords=[]), args=[Name(id='setup_script', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='suppress_known_deprecation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='ignore'), Constant(value='setup.py install is deprecated')], keywords=[])), Expr(value=Yield())])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), Assign(targets=[Name(id='_ConfigSettings', ctx=Store())], value=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Expr(value=Constant(value='\nCurrently the user can run::\n\n    pip install -e . --config-settings key=value\n    python -m build -C--key=value -C key=value\n\n- pip will pass both key and value as strings and overwriting repeated keys\n  (pypa/pip#11059).\n- build will accumulate values associated with repeated keys in a list.\n  It will also accept keys with no associated value.\n  This means that an option passed by build can be ``str | list[str] | None``.\n- PEP 517 specifies that ``config_settings`` is an optional dict.\n')), ClassDef(name='_ConfigSettingsTranslator', bases=[], keywords=[], body=[Expr(value=Constant(value='Translate ``config_settings`` into distutils-style command arguments.\n    Only a limited number of options is currently supported.\n    ')), FunctionDef(name='_get_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Name(id='_ConfigSettings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the value of a specific key in ``config_settings`` as a list of strings.\n\n        >>> fn = _ConfigSettingsTranslator()._get_config\n        >>> fn("--global-option", None)\n        []\n        >>> fn("--global-option", {})\n        []\n        >>> fn("--global-option", {\'--global-option\': \'foo\'})\n        [\'foo\']\n        >>> fn("--global-option", {\'--global-option\': [\'foo\']})\n        [\'foo\']\n        >>> fn("--global-option", {\'--global-option\': \'foo\'})\n        [\'foo\']\n        >>> fn("--global-option", {\'--global-option\': \'foo bar\'})\n        [\'foo\', \'bar\']\n        ')), Assign(targets=[Name(id='cfg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='config_settings', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='opts', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), List(elts=[], ctx=Load())])), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='opts', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='opts', ctx=Load())], keywords=[]), orelse=Name(id='opts', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_valid_global_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Global options accepted by setuptools (e.g. quiet or verbose).')), Assign(targets=[Name(id='options', ctx=Store())], value=GeneratorExp(elt=Subscript(value=Name(id='opt', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), generators=[comprehension(target=Name(id='opt', ctx=Store()), iter=Attribute(value=Attribute(value=Attribute(value=Name(id='setuptools', ctx=Load()), attr='dist', ctx=Load()), attr='Distribution', ctx=Load()), attr='global_options', ctx=Load()), ifs=[], is_async=0)])), Return(value=SetComp(elt=Name(id='flag', ctx=Load()), generators=[comprehension(target=Name(id='long_and_short', ctx=Store()), iter=Name(id='options', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='flag', ctx=Store()), iter=Name(id='long_and_short', ctx=Load()), ifs=[Name(id='flag', ctx=Load())], is_async=0)]))], decorator_list=[]), FunctionDef(name='_global_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Name(id='_ConfigSettings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Let the user specify ``verbose`` or ``quiet`` + escape hatch via\n        ``--global-option``.\n        Note: ``-v``, ``-vv``, ``-vvv`` have similar effects in setuptools,\n        so we just have to cover the basic scenario ``-v``.\n\n        >>> fn = _ConfigSettingsTranslator()._global_args\n        >>> list(fn(None))\n        []\n        >>> list(fn({"verbose": "False"}))\n        [\'-q\']\n        >>> list(fn({"verbose": "1"}))\n        [\'-v\']\n        >>> list(fn({"--verbose": None}))\n        [\'-v\']\n        >>> list(fn({"verbose": "true", "--global-option": "-q --no-user-cfg"}))\n        [\'-v\', \'-q\', \'--no-user-cfg\']\n        >>> list(fn({"--quiet": None}))\n        [\'-q\']\n        ')), Assign(targets=[Name(id='cfg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='config_settings', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='falsey', ctx=Store())], value=Set(elts=[Constant(value='false'), Constant(value='no'), Constant(value='0'), Constant(value='off')])), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='verbose'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())]), Compare(left=Constant(value='--verbose'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())])]), body=[Assign(targets=[Name(id='level', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='verbose')], keywords=[]), Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='--verbose')], keywords=[]), Constant(value='1')])], keywords=[])), Expr(value=Yield(value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='level', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='falsey', ctx=Load())]), body=Constant(value='-q'), orelse=Constant(value='-v'))))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='quiet'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())]), Compare(left=Constant(value='--quiet'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())])]), body=[Assign(targets=[Name(id='level', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='quiet')], keywords=[]), Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='--quiet')], keywords=[]), Constant(value='1')])], keywords=[])), Expr(value=Yield(value=IfExp(test=Compare(left=Call(func=Attribute(value=Name(id='level', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='falsey', ctx=Load())]), body=Constant(value='-v'), orelse=Constant(value='-q'))))], orelse=[]), Assign(targets=[Name(id='valid', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_global_options', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_config', ctx=Load()), args=[Constant(value='--global-option'), Name(id='config_settings', ctx=Load())], keywords=[])), Expr(value=YieldFrom(value=GeneratorExp(elt=Name(id='arg', ctx=Load()), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='-')], keywords=[]), ops=[In()], comparators=[Name(id='valid', ctx=Load())])], is_async=0)])))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='__dist_info_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Name(id='_ConfigSettings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The ``dist_info`` command accepts ``tag-date`` and ``tag-build``.\n\n        .. warning::\n           We cannot use this yet as it requires the ``sdist`` and ``bdist_wheel``\n           commands run in ``build_sdist`` and ``build_wheel`` to reuse the egg-info\n           directory created in ``prepare_metadata_for_build_wheel``.\n\n        >>> fn = _ConfigSettingsTranslator()._ConfigSettingsTranslator__dist_info_args\n        >>> list(fn(None))\n        []\n        >>> list(fn({"tag-date": "False"}))\n        [\'--no-date\']\n        >>> list(fn({"tag-date": None}))\n        [\'--no-date\']\n        >>> list(fn({"tag-date": "true", "tag-build": ".a"}))\n        [\'--tag-date\', \'--tag-build\', \'.a\']\n        ')), Assign(targets=[Name(id='cfg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='config_settings', ctx=Load()), Dict(keys=[], values=[])])), If(test=Compare(left=Constant(value='tag-date'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='strtobool', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[BoolOp(op=Or(), values=[Subscript(value=Name(id='cfg', ctx=Load()), slice=Constant(value='tag-date'), ctx=Load()), Constant(value='false')])], keywords=[])], keywords=[])), Expr(value=Yield(value=IfExp(test=Name(id='val', ctx=Load()), body=Constant(value='--tag-date'), orelse=Constant(value='--no-date'))))], orelse=[]), If(test=Compare(left=Constant(value='tag-build'), ops=[In()], comparators=[Name(id='cfg', ctx=Load())]), body=[Expr(value=YieldFrom(value=List(elts=[Constant(value='--tag-build'), Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='cfg', ctx=Load()), slice=Constant(value='tag-build'), ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_editable_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Name(id='_ConfigSettings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The ``editable_wheel`` command accepts ``editable-mode=strict``.\n\n        >>> fn = _ConfigSettingsTranslator()._editable_args\n        >>> list(fn(None))\n        []\n        >>> list(fn({"editable-mode": "strict"}))\n        [\'--mode\', \'strict\']\n        ')), Assign(targets=[Name(id='cfg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='config_settings', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='mode', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='editable-mode')], keywords=[]), Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='editable_mode')], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='mode', ctx=Load())), body=[Return()], orelse=[]), Expr(value=YieldFrom(value=List(elts=[Constant(value='--mode'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])], ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_arbitrary_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Name(id='_ConfigSettings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Users may expect to pass arbitrary lists of arguments to a command\n        via "--global-option" (example provided in PEP 517 of a "escape hatch").\n\n        >>> fn = _ConfigSettingsTranslator()._arbitrary_args\n        >>> list(fn(None))\n        []\n        >>> list(fn({}))\n        []\n        >>> list(fn({\'--build-option\': \'foo\'}))\n        [\'foo\']\n        >>> list(fn({\'--build-option\': [\'foo\']}))\n        [\'foo\']\n        >>> list(fn({\'--build-option\': \'foo\'}))\n        [\'foo\']\n        >>> list(fn({\'--build-option\': \'foo bar\'}))\n        [\'foo\', \'bar\']\n        >>> warnings.simplefilter(\'error\', SetuptoolsDeprecationWarning)\n        >>> list(fn({\'--global-option\': \'foo\'}))  # doctest: +IGNORE_EXCEPTION_DETAIL\n        Traceback (most recent call last):\n        SetuptoolsDeprecationWarning: ...arguments given via `--global-option`...\n        ')), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_config', ctx=Load()), args=[Constant(value='--global-option'), Name(id='config_settings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='global_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_global_options', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='bad_args', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='-')], keywords=[]), ops=[NotIn()], comparators=[Name(id='global_opts', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='bad_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='arg', ctx=Load())))], orelse=[])], orelse=[]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_config', ctx=Load()), args=[Constant(value='--build-option'), Name(id='config_settings', ctx=Load())], keywords=[]))), If(test=Name(id='bad_args', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value='Incompatible `config_settings` passed to build backend.'), JoinedStr(values=[Constant(value='\n                The arguments '), FormattedValue(value=Name(id='bad_args', ctx=Load()), conversion=114), Constant(value=' were given via `--global-option`.\n                Please use `--build-option` instead,\n                `--global-option` is reserved for flags like `--verbose` or `--quiet`.\n                ')])], keywords=[keyword(arg='due_date', value=Tuple(elts=[Constant(value=2023), Constant(value=9), Constant(value=26)], ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_BuildMetaBackend', bases=[Name(id='_ConfigSettingsTranslator', ctx=Load())], keywords=[], body=[FunctionDef(name='_get_build_requires', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings'), arg(arg='requirements')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Store())], value=List(elts=[Starred(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_global_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load()), Constant(value='egg_info'), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_arbitrary_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())), Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='Distribution', ctx=Load()), attr='patch', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_setup', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='SetupRequirementsError', ctx=Load()), name='e', body=[AugAssign(target=Name(id='requirements', ctx=Store()), op=Add(), value=Attribute(value=Name(id='e', ctx=Load()), attr='specifiers', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='requirements', ctx=Load()))], decorator_list=[]), FunctionDef(name='run_setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='setup_script')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='setup.py')]), body=[Assign(targets=[Name(id='__file__', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__name__', ctx=Store())], value=Constant(value='__main__')), With(items=[withitem(context_expr=Call(func=Name(id='_open_setup_script', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\r\\n'), Constant(value='\\n')], keywords=[]))]), Try(body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Name(id='code', ctx=Load()), Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SystemExit', ctx=Load()), name='e', body=[If(test=Attribute(value=Name(id='e', ctx=Load()), attr='code', ctx=Load()), body=[Raise()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value='Running `setup.py` directly as CLI tool is deprecated.'), Constant(value="Please avoid using `sys.exit(0)` or similar statements that don't fit in the paradigm of a configuration file.")], keywords=[keyword(arg='see_url', value=Constant(value='https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html'))]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_requires_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_build_requires', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[keyword(arg='requirements', value=List(elts=[Constant(value='wheel')], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_requires_for_build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_build_requires', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[keyword(arg='requirements', value=List(elts=[], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_bubble_up_info_directory', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory', annotation=Name(id='str', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        PEP 517 requires that the .dist-info directory be placed in the\n        metadata_directory. To comply, we MUST copy the directory to the root.\n\n        Returns the basename of the info directory, e.g. `proj-0.0.0.dist-info`.\n        ')), Assign(targets=[Name(id='info_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_info_directory', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='same_path', ctx=Load()), args=[Attribute(value=Name(id='info_dir', ctx=Load()), attr='parent', ctx=Load()), Name(id='metadata_directory', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='info_dir', ctx=Load())], keywords=[]), Name(id='metadata_directory', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='info_dir', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_find_info_directory', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory', annotation=Name(id='str', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='candidates', ctx=Store())], value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='dirs', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='suffix', ctx=Load())], keywords=[])], is_async=0)])), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='candidates', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dirs', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)])]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='candidates', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), msg=JoinedStr(values=[Constant(value='Multiple '), FormattedValue(value=Name(id='suffix', ctx=Load()), conversion=-1), Constant(value=' directories found')])), Return(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='parent', ctx=Load()), Subscript(value=Name(id='candidates', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='No '), FormattedValue(value=Name(id='suffix', ctx=Load()), conversion=-1), Constant(value=' directory found in '), FormattedValue(value=Name(id='metadata_directory', ctx=Load()), conversion=-1)])), Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='InternalError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='prepare_metadata_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Store())], value=List(elts=[Starred(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_global_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load()), Constant(value='dist_info'), Constant(value='--output-dir'), Name(id='metadata_directory', ctx=Load()), Constant(value='--keep-egg-info')], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='no_install_setup_requires', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_setup', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_bubble_up_info_directory', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Constant(value='.egg-info')], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_bubble_up_info_directory', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Constant(value='.dist-info')], keywords=[]))], decorator_list=[]), FunctionDef(name='_build_with_temp_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='setup_command'), arg(arg='result_extension'), arg(arg='result_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='result_directory', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='result_directory', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), Assign(targets=[Name(id='temp_opts', ctx=Store())], value=Dict(keys=[Constant(value='prefix'), Constant(value='dir')], values=[Constant(value='.tmp-'), Name(id='result_directory', ctx=Load())])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='TemporaryDirectory', ctx=Load()), args=[], keywords=[keyword(value=Name(id='temp_opts', ctx=Load()))]), optional_vars=Name(id='tmp_dist_dir', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Store())], value=List(elts=[Starred(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_global_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load()), Starred(value=Name(id='setup_command', ctx=Load()), ctx=Load()), Constant(value='--dist-dir'), Name(id='tmp_dist_dir', ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_arbitrary_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='no_install_setup_requires', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_setup', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='result_basename', ctx=Store())], value=Call(func=Name(id='_file_with_extension', ctx=Load()), args=[Name(id='tmp_dist_dir', ctx=Load()), Name(id='result_extension', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='result_directory', ctx=Load()), Name(id='result_basename', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='result_path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='result_path', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rename', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='tmp_dist_dir', ctx=Load()), Name(id='result_basename', ctx=Load())], keywords=[]), Name(id='result_path', ctx=Load())], keywords=[]))]), Return(value=Name(id='result_basename', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress_known_deprecation', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_with_temp_dir', ctx=Load()), args=[List(elts=[Constant(value='bdist_wheel')], ctx=Load()), Constant(value='.whl'), Name(id='wheel_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sdist_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_with_temp_dir', ctx=Load()), args=[List(elts=[Constant(value='sdist'), Constant(value='--formats'), Constant(value='gztar')], ctx=Load()), Constant(value='.tar.gz'), Name(id='sdist_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_dist_info_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='metadata_directory', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='dist_info_candidates', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]), attr='glob', ctx=Load()), args=[Constant(value='*.dist-info')], keywords=[])], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dist_info_candidates', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Constant(value=1)])), Return(value=IfExp(test=Name(id='dist_info_candidates', ctx=Load()), body=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='dist_info_candidates', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), orelse=Constant(value=None)))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='LEGACY_EDITABLE', ctx=Load())), body=[FunctionDef(name='build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='info_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_dist_info_dir', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opts', ctx=Store())], value=IfExp(test=Name(id='info_dir', ctx=Load()), body=List(elts=[Constant(value='--dist-info-dir'), Name(id='info_dir', ctx=Load())], ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Constant(value='editable_wheel'), Starred(value=Name(id='opts', ctx=Load()), ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_editable_args', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='suppress_known_deprecation', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_with_temp_dir', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Constant(value='.whl'), Name(id='wheel_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_requires_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_requires_for_build_wheel', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_metadata_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_metadata_for_build_wheel', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[])], decorator_list=[]), ClassDef(name='_BuildMetaLegacyBackend', bases=[Name(id='_BuildMetaBackend', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compatibility backend for setuptools\n\n    This is a version of setuptools.build_meta that endeavors\n    to maintain backwards\n    compatibility with pre-PEP 517 modes of invocation. It\n    exists as a temporary\n    bridge between the old packaging mechanism and the new\n    packaging mechanism,\n    and will eventually be removed.\n    ')), FunctionDef(name='run_setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='setup_script')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='setup.py')]), body=[Assign(targets=[Name(id='sys_path', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='script_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='script_dir', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='script_dir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sys_argv_0', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='setup_script', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='_BuildMetaLegacyBackend', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='run_setup', ctx=Load()), args=[], keywords=[keyword(arg='setup_script', value=Name(id='setup_script', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='sys_path', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='sys_argv_0', ctx=Load()))])], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_BACKEND', ctx=Store())], value=Call(func=Name(id='_BuildMetaBackend', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='get_requires_for_build_wheel', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='get_requires_for_build_wheel', ctx=Load())), Assign(targets=[Name(id='get_requires_for_build_sdist', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='get_requires_for_build_sdist', ctx=Load())), Assign(targets=[Name(id='prepare_metadata_for_build_wheel', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='prepare_metadata_for_build_wheel', ctx=Load())), Assign(targets=[Name(id='build_wheel', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='build_wheel', ctx=Load())), Assign(targets=[Name(id='build_sdist', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='build_sdist', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='LEGACY_EDITABLE', ctx=Load())), body=[Assign(targets=[Name(id='get_requires_for_build_editable', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='get_requires_for_build_editable', ctx=Load())), Assign(targets=[Name(id='prepare_metadata_for_build_editable', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='prepare_metadata_for_build_editable', ctx=Load())), Assign(targets=[Name(id='build_editable', ctx=Store())], value=Attribute(value=Name(id='_BACKEND', ctx=Load()), attr='build_editable', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='__legacy__', ctx=Store())], value=Call(func=Name(id='_BuildMetaLegacyBackend', ctx=Load()), args=[], keywords=[]))], type_ignores=[])