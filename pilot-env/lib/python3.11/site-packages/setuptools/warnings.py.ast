Module(body=[Expr(value=Constant(value='Provide basic warnings used by setuptools modules.\n\nUsing custom classes (other than ``UserWarning``) allow users to set\n``PYTHONWARNINGS`` filters to run tests and prepare for upcoming changes in\nsetuptools.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='warnings')]), ImportFrom(module='datetime', names=[alias(name='date')], level=0), ImportFrom(module='inspect', names=[alias(name='cleandoc')], level=0), ImportFrom(module='textwrap', names=[alias(name='indent')], level=0), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Tuple')], level=0), Assign(targets=[Name(id='_DueDate', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_INDENT', ctx=Store())], value=BinOp(left=Constant(value=8), op=Mult(), right=Constant(value=' '))), Assign(targets=[Name(id='_TEMPLATE', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=80), op=Mult(), right=Constant(value='*')), conversion=-1), Constant(value='\n{details}\n'), FormattedValue(value=BinOp(left=Constant(value=80), op=Mult(), right=Constant(value='*')), conversion=-1)])), ClassDef(name='SetuptoolsWarning', bases=[Name(id='UserWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class in ``setuptools`` warning hierarchy.')), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='summary', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='details', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='due_date', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_DueDate', ctx=Load()), ctx=Load())), arg(arg='see_docs', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='see_url', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='stacklevel', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=2)]), body=[Expr(value=Constant(value='Private: reserved for ``setuptools`` internal use only')), Assign(targets=[Name(id='summary_', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='summary', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_SUMMARY'), Constant(value=None)], keywords=[]), Constant(value='')])), Assign(targets=[Name(id='details_', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='details', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_DETAILS'), Constant(value=None)], keywords=[]), Constant(value='')])), Assign(targets=[Name(id='due_date', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='due_date', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_DUE_DATE'), Constant(value=None)], keywords=[])])), Assign(targets=[Name(id='docs_ref', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='see_docs', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_SEE_DOCS'), Constant(value=None)], keywords=[])])), Assign(targets=[Name(id='docs_url', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='docs_ref', ctx=Load()), JoinedStr(values=[Constant(value='https://setuptools.pypa.io/en/latest/'), FormattedValue(value=Name(id='docs_ref', ctx=Load()), conversion=-1)])])), Assign(targets=[Name(id='see_url', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='see_url', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_SEE_URL'), Constant(value=None)], keywords=[])])), Assign(targets=[Name(id='due', ctx=Store())], value=IfExp(test=Name(id='due_date', ctx=Load()), body=Call(func=Name(id='date', ctx=Load()), args=[Starred(value=Name(id='due_date', ctx=Load()), ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_format', ctx=Load()), args=[Name(id='summary_', ctx=Load()), Name(id='details_', ctx=Load()), Name(id='due', ctx=Load()), BoolOp(op=Or(), values=[Name(id='see_url', ctx=Load()), Name(id='docs_url', ctx=Load())]), Name(id='kwargs', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='due', ctx=Load()), Compare(left=Name(id='due', ctx=Load()), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='date', ctx=Load()), attr='today', ctx=Load()), args=[], keywords=[])]), Call(func=Name(id='_should_enforce', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[keyword(arg='stacklevel', value=BinOp(left=Name(id='stacklevel', ctx=Load()), op=Add(), right=Constant(value=1)))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_format', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='summary', annotation=Name(id='str', ctx=Load())), arg(arg='details', annotation=Name(id='str', ctx=Load())), arg(arg='due_date', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='date', ctx=Load()), ctx=Load())), arg(arg='see_url', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='format_args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Private: reserved for ``setuptools`` internal use only')), Assign(targets=[Name(id='today', ctx=Store())], value=Call(func=Attribute(value=Name(id='date', ctx=Load()), attr='today', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='summary', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cleandoc', ctx=Load()), args=[Name(id='summary', ctx=Load())], keywords=[]), attr='format_map', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='format_args', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), Assign(targets=[Name(id='possible_parts', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Call(func=Name(id='cleandoc', ctx=Load()), args=[Name(id='details', ctx=Load())], keywords=[]), attr='format_map', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='format_args', ctx=Load()), Dict(keys=[], values=[])])], keywords=[]), IfExp(test=BoolOp(op=And(), values=[Name(id='due_date', ctx=Load()), Compare(left=Name(id='due_date', ctx=Load()), ops=[Gt()], comparators=[Name(id='today', ctx=Load())])]), body=JoinedStr(values=[Constant(value='\nBy '), FormattedValue(value=Name(id='due_date', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='%Y-%b-%d')])), Constant(value=', you need to update your project and remove deprecated calls\nor your builds will no longer be supported.')]), orelse=Constant(value=None)), IfExp(test=BoolOp(op=And(), values=[Name(id='due_date', ctx=Load()), Compare(left=Name(id='due_date', ctx=Load()), ops=[Lt()], comparators=[Name(id='today', ctx=Load())])]), body=Constant(value='\nThis deprecation is overdue, please update your project and remove deprecated\ncalls to avoid build errors in the future.'), orelse=Constant(value=None)), IfExp(test=Name(id='see_url', ctx=Load()), body=JoinedStr(values=[Constant(value='\nSee '), FormattedValue(value=Name(id='see_url', ctx=Load()), conversion=-1), Constant(value=' for details.')]), orelse=Constant(value=None))], ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='possible_parts', ctx=Load()), ifs=[Name(id='x', ctx=Load())], is_async=0)])), If(test=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_TEMPLATE', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='details', value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))]), Name(id='_INDENT', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[List(elts=[Name(id='summary', ctx=Load()), Constant(value='!!\n'), Name(id='body', ctx=Load()), Constant(value='\n!!')], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='summary', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='InformationOnly', bases=[Name(id='SetuptoolsWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Currently there is no clear way of displaying messages to the users\n    that use the setuptools backend directly via ``pip``.\n    The only thing that might work is a warning, although it is not the\n    most appropriate tool for the job...\n\n    See pypa/packaging-problems#558.\n    '))], decorator_list=[]), ClassDef(name='SetuptoolsDeprecationWarning', bases=[Name(id='SetuptoolsWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Base class for warning deprecations in ``setuptools``\n\n    This class is not derived from ``DeprecationWarning``, and as such is\n    visible by default.\n    '))], decorator_list=[]), FunctionDef(name='_should_enforce', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='enforce', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='SETUPTOOLS_ENFORCE_DEPRECATION'), Constant(value='false')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Return(value=Compare(left=Name(id='enforce', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='true'), Constant(value='on'), Constant(value='ok'), Constant(value='1')], ctx=Load())]))], decorator_list=[])], type_ignores=[])