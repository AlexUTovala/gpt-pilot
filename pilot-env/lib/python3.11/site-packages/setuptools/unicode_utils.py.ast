Module(body=[Import(names=[alias(name='unicodedata')]), Import(names=[alias(name='sys')]), FunctionDef(name='decompose', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='normalize', ctx=Load()), args=[Constant(value='NFD'), Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='normalize', ctx=Load()), args=[Constant(value='NFD'), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[]), FunctionDef(name='filesys_decode', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Ensure that the given path is decoded,\n    NONE when no expected encoding works\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fs_enc', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[]), Constant(value='utf-8')])), Assign(targets=[Name(id='candidates', ctx=Store())], value=Tuple(elts=[Name(id='fs_enc', ctx=Load()), Constant(value='utf-8')], ctx=Load())), For(target=Name(id='enc', ctx=Store()), iter=Name(id='candidates', ctx=Load()), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='enc', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='try_encode', args=arguments(posonlyargs=[], args=[arg(arg='string'), arg(arg='enc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='turn unicode encoding into a functional routine')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='enc', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])