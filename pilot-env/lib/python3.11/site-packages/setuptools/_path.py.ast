Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Union')], level=0), Assign(targets=[Name(id='_Path', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='ensure_directory', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure that the parent directory of `path` exists')), Assign(targets=[Name(id='dirname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='same_path', args=arguments(posonlyargs=[], args=[arg(arg='p1', annotation=Name(id='_Path', ctx=Load())), arg(arg='p2', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Differs from os.path.samefile because it does not require paths to exist.\n    Purely string based (no comparison between i-nodes).\n    >>> same_path("a/b", "./a/b")\n    True\n    >>> same_path("a/b", "a/./b")\n    True\n    >>> same_path("a/b", "././a/b")\n    True\n    >>> same_path("a/b", "./a/b/c/..")\n    True\n    >>> same_path("a/b", "../a/b/c")\n    False\n    >>> same_path("a", "a/b")\n    False\n    ')), Return(value=Compare(left=Call(func=Name(id='normpath', ctx=Load()), args=[Name(id='p1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='normpath', ctx=Load()), args=[Name(id='p2', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='normpath', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize a file/dir name for comparison purposes.')), Assign(targets=[Name(id='file', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), orelse=Name(id='filename', ctx=Load()))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])