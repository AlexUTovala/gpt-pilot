Module(body=[Expr(value=Constant(value='For backward compatibility, expose main functions from\n``setuptools.config.setupcfg``\n')), ImportFrom(module='functools', names=[alias(name='wraps')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='TypeVar'), alias(name='cast')], level=0), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=2), ImportFrom(names=[alias(name='setupcfg')], level=1), Assign(targets=[Name(id='Fn', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='Fn')], keywords=[keyword(arg='bound', value=Name(id='Callable', ctx=Load()))])), Assign(targets=[Name(id='__all__', ctx=Store())], value=Tuple(elts=[Constant(value='parse_configuration'), Constant(value='read_configuration')], ctx=Load())), FunctionDef(name='_deprecation_notice', args=arguments(posonlyargs=[], args=[arg(arg='fn', annotation=Name(id='Fn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value='Deprecated API usage.'), JoinedStr(values=[Constant(value='\n            As setuptools moves its configuration towards `pyproject.toml`,\n            `'), FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Name(id='fn', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='` became deprecated.\n\n            For the time being, you can use the `'), FormattedValue(value=Attribute(value=Name(id='setupcfg', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='` module\n            to access a backward compatible API, but this module is provisional\n            and might be removed in the future.\n\n            To read project metadata, consider using\n            ``build.util.project_wheel_metadata`` (https://pypi.org/project/build/).\n            For simple scenarios, you can also try parsing the file directly\n            with the help of ``configparser``.\n            ')])], keywords=[])), Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Name(id='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Fn', ctx=Load()), Name(id='_wrapper', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Fn', ctx=Load())), Assign(targets=[Name(id='read_configuration', ctx=Store())], value=Call(func=Name(id='_deprecation_notice', ctx=Load()), args=[Attribute(value=Name(id='setupcfg', ctx=Load()), attr='read_configuration', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parse_configuration', ctx=Store())], value=Call(func=Name(id='_deprecation_notice', ctx=Load()), args=[Attribute(value=Name(id='setupcfg', ctx=Load()), attr='parse_configuration', ctx=Load())], keywords=[]))], type_ignores=[])