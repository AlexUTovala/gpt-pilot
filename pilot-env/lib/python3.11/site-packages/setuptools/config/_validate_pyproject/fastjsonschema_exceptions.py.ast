Module(body=[Import(names=[alias(name='re')]), Assign(targets=[Name(id='SPLIT_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[\\.\\[\\]]+')], keywords=[])), ClassDef(name='JsonSchemaException', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Base exception of ``fastjsonschema`` library.\n    '))], decorator_list=[]), ClassDef(name='JsonSchemaValueException', bases=[Name(id='JsonSchemaException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Exception raised by validation function. Available properties:\n\n     * ``message`` containing human-readable information what is wrong (e.g. ``data.property[index] must be smaller than or equal to 42``),\n     * invalid ``value`` (e.g. ``60``),\n     * ``name`` of a path in the data structure (e.g. ``data.property[index]``),\n     * ``path`` as an array in the data structure (e.g. ``['data', 'property', 'index']``),\n     * the whole ``definition`` which the ``value`` has to fulfil (e.g. ``{'type': 'number', 'maximum': 42}``),\n     * ``rule`` which the ``value`` is breaking (e.g. ``maximum``)\n     * and ``rule_definition`` (e.g. ``42``).\n\n    .. versionchanged:: 2.14.0\n        Added all extra properties.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='value'), arg(arg='name'), arg(arg='definition'), arg(arg='rule')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='definition', ctx=Store())], value=Name(id='definition', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rule', ctx=Store())], value=Name(id='rule', ctx=Load()))], decorator_list=[]), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='SPLIT_RE', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='item', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='rule_definition', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='rule', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='definition', ctx=Load()))]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='definition', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rule', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='JsonSchemaDefinitionException', bases=[Name(id='JsonSchemaException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Exception raised by generator of validation function.\n    '))], decorator_list=[])], type_ignores=[])