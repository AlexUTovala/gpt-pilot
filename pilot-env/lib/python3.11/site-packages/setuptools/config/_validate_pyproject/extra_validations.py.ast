Module(body=[Expr(value=Constant(value='The purpose of this module is implement PEP 621 validations that are\ndifficult to express as a JSON Schema (or that are not supported by the current\nJSON Schema library).\n')), ImportFrom(module='typing', names=[alias(name='Mapping'), alias(name='TypeVar')], level=0), ImportFrom(module='error_reporting', names=[alias(name='ValidationError')], level=1), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[keyword(arg='bound', value=Name(id='Mapping', ctx=Load()))])), ClassDef(name='RedefiningStaticFieldAsDynamic', bases=[Name(id='ValidationError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='According to PEP 621:\n\n    Build back-ends MUST raise an error if the metadata specifies a field\n    statically as well as being listed in dynamic.\n    '))], decorator_list=[]), FunctionDef(name='validate_project_dynamic', args=arguments(posonlyargs=[], args=[arg(arg='pyproject', annotation=Name(id='T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='pyproject', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='project'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='dynamic', ctx=Store())], value=Call(func=Attribute(value=Name(id='project_table', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dynamic'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Name(id='dynamic', ctx=Load()), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='project_table', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='You cannot provide a value for `project.'), FormattedValue(value=Name(id='field', ctx=Load()), conversion=-1), Constant(value='` and ')])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='list it under `project.dynamic` at the same time')), Assign(targets=[Name(id='name', ctx=Store())], value=JoinedStr(values=[Constant(value='data.project.'), FormattedValue(value=Name(id='field', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='value', ctx=Store())], value=Dict(keys=[Name(id='field', ctx=Load()), Constant(value='...'), Constant(value='dynamic')], values=[Subscript(value=Name(id='project_table', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load()), Constant(value=' # ...'), Name(id='dynamic', ctx=Load())])), Raise(exc=Call(func=Name(id='RedefiningStaticFieldAsDynamic', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='value', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(arg='rule', value=Constant(value='PEP 621'))]))], orelse=[])], orelse=[]), Return(value=Name(id='pyproject', ctx=Load()))], decorator_list=[], returns=Name(id='T', ctx=Load())), Assign(targets=[Name(id='EXTRA_VALIDATIONS', ctx=Store())], value=Tuple(elts=[Name(id='validate_project_dynamic', ctx=Load())], ctx=Load()))], type_ignores=[])