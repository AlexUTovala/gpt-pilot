Module(body=[Expr(value=Constant(value='\nLoad setuptools configuration from ``pyproject.toml`` files.\n\n**PRIVATE MODULE**: API reserved for setuptools internal usage only.\n\nTo read project metadata, consider using\n``build.util.project_wheel_metadata`` (https://pypi.org/project/build/).\nFor simple scenarios, you can also try parsing the file directly\nwith the help of ``tomllib`` or ``tomli``.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Dict'), alias(name='Mapping'), alias(name='Optional'), alias(name='Set'), alias(name='Union')], level=0), ImportFrom(module='errors', names=[alias(name='FileError'), alias(name='OptionError')], level=2), ImportFrom(module='warnings', names=[alias(name='SetuptoolsWarning')], level=2), ImportFrom(names=[alias(name='expand', asname='_expand')], level=1), ImportFrom(module='_apply_pyprojecttoml', names=[alias(name='_PREVIOUSLY_DEFINED'), alias(name='_WouldIgnoreField')], level=1), ImportFrom(module='_apply_pyprojecttoml', names=[alias(name='apply', asname='_apply')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='setuptools.dist', names=[alias(name='Distribution')], level=0)], orelse=[]), Assign(targets=[Name(id='_Path', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='load_file', args=arguments(posonlyargs=[], args=[arg(arg='filepath', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.extern', names=[alias(name='tomli')], level=0), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filepath', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='tomli', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='filepath', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(names=[alias(name='_validate_pyproject', asname='validator')], level=1), Assign(targets=[Name(id='trove_classifier', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validator', ctx=Load()), attr='FORMAT_FUNCTIONS', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='trove-classifier')], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='trove_classifier', ctx=Load()), Constant(value='_disable_download')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='trove_classifier', ctx=Load()), attr='_disable_download', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='validator', ctx=Load()), attr='ValidationError', ctx=Load()), name='ex', body=[Assign(targets=[Name(id='summary', ctx=Store())], value=JoinedStr(values=[Constant(value='configuration error: '), FormattedValue(value=Attribute(value=Name(id='ex', ctx=Load()), attr='summary', ctx=Load()), conversion=-1)])), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='ex', ctx=Load()), attr='name', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='`')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='project')]), body=[Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='summary', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[Attribute(value=Name(id='ex', ctx=Load()), attr='details', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='error', ctx=Store())], value=JoinedStr(values=[Constant(value='invalid pyproject.toml config: '), FormattedValue(value=Attribute(value=Name(id='ex', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='.')])), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1), Constant(value='\n'), FormattedValue(value=Name(id='summary', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='apply_configuration', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='filepath', annotation=Name(id='_Path', ctx=Load())), arg(arg='ignore_option_errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Apply the configuration from a ``pyproject.toml`` file into an existing\n    distribution object.\n    ')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Name(id='read_configuration', ctx=Load()), args=[Name(id='filepath', ctx=Load()), Constant(value=True), Name(id='ignore_option_errors', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_apply', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='config', ctx=Load()), Name(id='filepath', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Distribution')), FunctionDef(name='read_configuration', args=arguments(posonlyargs=[], args=[arg(arg='filepath', annotation=Name(id='_Path', ctx=Load())), arg(arg='expand'), arg(arg='ignore_option_errors'), arg(arg='dist', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Distribution'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Read given configuration file and returns options from it as a dict.\n\n    :param str|unicode filepath: Path to configuration file in the ``pyproject.toml``\n        format.\n\n    :param bool expand: Whether to expand directives and other computed values\n        (i.e. post-process the given configuration)\n\n    :param bool ignore_option_errors: Whether to silently ignore\n        options, values of which could not be resolved (e.g. due to exceptions\n        in directives such as file:, attr:, etc.).\n        If False exceptions are propagated as expected.\n\n    :param Distribution|None: Distribution object to which the configuration refers.\n        If not given a dummy object will be created and discarded after the\n        configuration is read. This is used for auto-discovery of packages and in the\n        case a dynamic configuration (e.g. ``attr`` or ``cmdclass``) is expanded.\n        When ``expand=False`` this object is simply ignored.\n\n    :rtype: dict\n    ')), Assign(targets=[Name(id='filepath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='FileError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Configuration file '), FormattedValue(value=Name(id='filepath', ctx=Load()), conversion=114), Constant(value=' does not exist.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='asdict', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='load_file', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[]), Dict(keys=[], values=[])])), Assign(targets=[Name(id='project_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='asdict', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='project'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='tool_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='asdict', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='setuptools_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='tool_table', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='setuptools'), Dict(keys=[], values=[])], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='asdict', ctx=Load())), UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='project_table', ctx=Load()), Name(id='setuptools_table', ctx=Load())]))]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Constant(value='distutils'), ops=[In()], comparators=[Name(id='tool_table', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='_ExperimentalConfiguration', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[keyword(arg='subject', value=Constant(value='[tool.distutils]'))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='dist', ctx=Load()), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='include_package_data'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='setuptools_table', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='include-package-data'), Attribute(value=Name(id='dist', ctx=Load()), attr='include_package_data', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='setuptools_table', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='include-package-data'), Constant(value=True)], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='asdict', ctx=Load()), slice=Constant(value='tool'), ctx=Store())], value=Name(id='tool_table', ctx=Load())), Assign(targets=[Subscript(value=Name(id='tool_table', ctx=Load()), slice=Constant(value='setuptools'), ctx=Store())], value=Name(id='setuptools_table', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='_ignore_errors', ctx=Load()), args=[Name(id='ignore_option_errors', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='subset', ctx=Store())], value=Dict(keys=[Constant(value='project'), Constant(value='tool')], values=[Name(id='project_table', ctx=Load()), Dict(keys=[Constant(value='setuptools')], values=[Name(id='setuptools_table', ctx=Load())])])), Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[Name(id='subset', ctx=Load()), Name(id='filepath', ctx=Load())], keywords=[]))]), If(test=Name(id='expand', ctx=Load()), body=[Assign(targets=[Name(id='root_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='expand_configuration', ctx=Load()), args=[Name(id='asdict', ctx=Load()), Name(id='root_dir', ctx=Load()), Name(id='ignore_option_errors', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='asdict', ctx=Load()))], decorator_list=[]), FunctionDef(name='expand_configuration', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='root_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_Path', ctx=Load()), ctx=Load())), arg(arg='ignore_option_errors', annotation=Name(id='bool', ctx=Load())), arg(arg='dist', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Distribution'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Given a configuration with unresolved fields (e.g. dynamic, cmdclass, ...)\n    find their final values.\n\n    :param dict config: Dict containing the configuration for the distribution\n    :param str root_dir: Top-level directory for the distribution/project\n        (the same directory where ``pyproject.toml`` is place)\n    :param bool ignore_option_errors: see :func:`read_configuration`\n    :param Distribution|None: Distribution object to which the configuration refers.\n        If not given a dummy object will be created and discarded after the\n        configuration is read. Used in the case a dynamic configuration\n        (e.g. ``attr`` or ``cmdclass``).\n\n    :rtype: dict\n    ')), Return(value=Call(func=Attribute(value=Call(func=Name(id='_ConfigExpander', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='root_dir', ctx=Load()), Name(id='ignore_option_errors', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[]), attr='expand', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='dict', ctx=Load())), ClassDef(name='_ConfigExpander', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='root_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_Path', ctx=Load()), ctx=Load())), arg(arg='ignore_option_errors', annotation=Name(id='bool', ctx=Load())), arg(arg='dist', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Distribution'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Name(id='config', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='root_dir', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project_cfg', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='project'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dynamic'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='setuptools'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dynamic'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_option_errors', ctx=Store())], value=Name(id='ignore_option_errors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Store())], value=Name(id='dist', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_referenced_files', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0)], decorator_list=[]), FunctionDef(name='_ensure_dist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.dist', names=[alias(name='Distribution')], level=0), Assign(targets=[Name(id='attrs', ctx=Store())], value=Dict(keys=[Constant(value='src_root'), Constant(value='name')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='name'), Constant(value=None)], keywords=[])])), Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), Call(func=Name(id='Distribution', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Constant(value='Distribution')), FunctionDef(name='_process_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='container', annotation=Name(id='dict', ctx=Load())), arg(arg='field', annotation=Name(id='str', ctx=Load())), arg(arg='fn', annotation=Name(id='Callable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='container', ctx=Load())]), body=[With(items=[withitem(context_expr=Call(func=Name(id='_ignore_errors', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_option_errors', ctx=Load())], keywords=[]))], body=[Assign(targets=[Subscript(value=Name(id='container', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Store())], value=Call(func=Name(id='fn', ctx=Load()), args=[Subscript(value=Name(id='container', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='_canonic_package_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='package-data')]), body=[Assign(targets=[Name(id='package_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='field', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='canonic_package_data', ctx=Load()), args=[Name(id='package_data', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='expand', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_packages', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_canonic_package_data', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_canonic_package_data', ctx=Load()), args=[Constant(value='exclude-package-data')], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_dist', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Name(id='_EnsurePackagesDiscovered', ctx=Load()), args=[Name(id='dist', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='project_cfg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Name(id='ctx', ctx=Load()), optional_vars=Name(id='ensure_discovered', ctx=Store()))], body=[Assign(targets=[Name(id='package_dir', ctx=Store())], value=Attribute(value=Name(id='ensure_discovered', ctx=Load()), attr='package_dir', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_data_files', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_cmdclass', ctx=Load()), args=[Name(id='package_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_all_dynamic', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='_referenced_files', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_referenced_files', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()))], decorator_list=[]), FunctionDef(name='_expand_packages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='packages', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='packages')], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='packages', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='packages', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='find', ctx=Store())], value=Call(func=Attribute(value=Name(id='packages', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='find')], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='find', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='find', ctx=Load()), slice=Constant(value='root_dir'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Load())), Assign(targets=[Subscript(value=Name(id='find', ctx=Load()), slice=Constant(value='fill_package_dir'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='package-dir'), Dict(keys=[], values=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='_ignore_errors', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_option_errors', ctx=Load())], keywords=[]))], body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), slice=Constant(value='packages'), ctx=Store())], value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='find_packages', ctx=Load()), args=[], keywords=[keyword(value=Name(id='find', ctx=Load()))]))])], orelse=[])], decorator_list=[]), FunctionDef(name='_expand_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data_files', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='_expand', ctx=Load()), attr='canonic_data_files', ctx=Load())], keywords=[keyword(arg='root_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_field', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), Constant(value='data-files'), Name(id='data_files', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_expand_cmdclass', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='root_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Load())), Assign(targets=[Name(id='cmdclass', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='_expand', ctx=Load()), attr='cmdclass', ctx=Load())], keywords=[keyword(arg='package_dir', value=Name(id='package_dir', ctx=Load())), keyword(arg='root_dir', value=Name(id='root_dir', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_field', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='setuptools_cfg', ctx=Load()), Constant(value='cmdclass'), Name(id='cmdclass', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_expand_all_dynamic', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='special', ctx=Store())], value=Tuple(elts=[Constant(value='version'), Constant(value='readme'), Constant(value='entry-points'), Constant(value='scripts'), Constant(value='gui-scripts'), Constant(value='classifiers'), Constant(value='dependencies'), Constant(value='optional-dependencies')], ctx=Load())), Assign(targets=[Name(id='obtained_dynamic', ctx=Store())], value=DictComp(key=Name(id='field', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='field', ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load()), ifs=[Compare(left=Name(id='field', ctx=Load()), ops=[NotIn()], comparators=[Name(id='special', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='obtained_dynamic', ctx=Load()), attr='update', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_entry_points', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[]), Dict(keys=[], values=[])])], keywords=[keyword(arg='version', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_version', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[])), keyword(arg='readme', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_readme', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), keyword(arg='classifiers', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_classifiers', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), keyword(arg='dependencies', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_dependencies', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), keyword(arg='optional_dependencies', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain_optional_dependencies', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='updates', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='obtained_dynamic', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_cfg', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='updates', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_ensure_previously_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='field', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='previous', ctx=Store())], value=Call(func=Subscript(value=Name(id='_PREVIOUSLY_DEFINED', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='previous', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_option_errors', ctx=Load()))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='No configuration found for dynamic '), FormattedValue(value=Name(id='field', ctx=Load()), conversion=114), Constant(value='.\nSome dynamic fields need to be specified via `tool.setuptools.dynamic`\nothers must be specified via the equivalent attribute in `setup.py`.')])), Raise(exc=Call(func=Name(id='OptionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_expand_directive', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifier', annotation=Name(id='str', ctx=Load())), arg(arg='directive'), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.extern.more_itertools', names=[alias(name='always_iterable')], level=0), With(items=[withitem(context_expr=Call(func=Name(id='_ignore_errors', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_option_errors', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='root_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Load())), If(test=Compare(left=Constant(value='file'), ops=[In()], comparators=[Name(id='directive', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_referenced_files', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='always_iterable', ctx=Load()), args=[Subscript(value=Name(id='directive', ctx=Load()), slice=Constant(value='file'), ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='read_files', ctx=Load()), args=[Subscript(value=Name(id='directive', ctx=Load()), slice=Constant(value='file'), ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='attr'), ops=[In()], comparators=[Name(id='directive', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='read_attr', ctx=Load()), args=[Subscript(value=Name(id='directive', ctx=Load()), slice=Constant(value='attr'), ctx=Load()), Name(id='package_dir', ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid `'), FormattedValue(value=Name(id='specifier', ctx=Load()), conversion=-1), Constant(value='`: '), FormattedValue(value=Name(id='directive', ctx=Load()), conversion=114)])], keywords=[]))]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_obtain', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='field', annotation=Name(id='str', ctx=Load())), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_directive', ctx=Load()), args=[JoinedStr(values=[Constant(value='tool.setuptools.dynamic.'), FormattedValue(value=Name(id='field', ctx=Load()), conversion=-1)]), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_previously_set', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_obtain_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='version'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), Compare(left=Constant(value='version'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load())])]), body=[Return(value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='version'), Name(id='package_dir', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_obtain_readme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='readme'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='dynamic_cfg', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load())), If(test=Compare(left=Constant(value='readme'), ops=[In()], comparators=[Name(id='dynamic_cfg', ctx=Load())]), body=[Return(value=Dict(keys=[Constant(value='text'), Constant(value='content-type')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='readme'), Dict(keys=[], values=[])], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='dynamic_cfg', ctx=Load()), slice=Constant(value='readme'), ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content-type'), Constant(value='text/x-rst')], keywords=[])]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_previously_set', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='readme')], keywords=[])), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_obtain_entry_points', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='package_dir', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Tuple(elts=[Constant(value='entry-points'), Constant(value='scripts'), Constant(value='gui-scripts')], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Name(id='fields', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='entry-points'), Name(id='package_dir', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='_expand', ctx=Load()), attr='entry_points', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expanded', ctx=Store())], value=Dict(keys=[Constant(value='entry-points')], values=[Name(id='groups', ctx=Load())])), FunctionDef(name='_set_scripts', args=arguments(posonlyargs=[], args=[arg(arg='field', annotation=Name(id='str', ctx=Load())), arg(arg='group', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='group', ctx=Load()), ops=[In()], comparators=[Name(id='groups', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='groups', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='_WouldIgnoreField', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[keyword(arg='field', value=Name(id='field', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load()))]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='expanded', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), Expr(value=Call(func=Name(id='_set_scripts', ctx=Load()), args=[Constant(value='scripts'), Constant(value='console_scripts')], keywords=[])), Expr(value=Call(func=Name(id='_set_scripts', ctx=Load()), args=[Constant(value='gui-scripts'), Constant(value='gui_scripts')], keywords=[])), Return(value=Name(id='expanded', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_obtain_classifiers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='classifiers'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='classifiers'), Dict(keys=[], values=[])], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_obtain_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='dependencies'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_obtain', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='dependencies'), Dict(keys=[], values=[])], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Return(value=Call(func=Name(id='_parse_requirements_list', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_obtain_optional_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='optional-dependencies'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Constant(value='optional-dependencies'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load())]), body=[Assign(targets=[Name(id='optional_dependencies_map', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dynamic_cfg', ctx=Load()), slice=Constant(value='optional-dependencies'), ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='optional_dependencies_map', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='group', ctx=Load()), value=Call(func=Name(id='_parse_requirements_list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_directive', ctx=Load()), args=[JoinedStr(values=[Constant(value='tool.setuptools.dynamic.optional-dependencies.'), FormattedValue(value=Name(id='group', ctx=Load()), conversion=-1)]), Name(id='directive', ctx=Load()), Dict(keys=[], values=[])], keywords=[])], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='group', ctx=Store()), Name(id='directive', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='optional_dependencies_map', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_previously_set', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='optional-dependencies')], keywords=[])), Return(value=Constant(value=None))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_parse_requirements_list', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='line', ctx=Load()), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]))])], is_async=0)]))], decorator_list=[]), FunctionDef(name='_ignore_errors', args=arguments(posonlyargs=[], args=[arg(arg='ignore_option_errors', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ignore_option_errors', ctx=Load())), body=[Expr(value=Yield()), Return()], orelse=[]), Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='ex', body=[Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='ignored error: '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='ex', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' - '), FormattedValue(value=Name(id='ex', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='contextmanager', ctx=Load())]), ClassDef(name='_EnsurePackagesDiscovered', bases=[Attribute(value=Name(id='_expand', ctx=Load()), attr='EnsurePackagesDiscovered', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distribution', annotation=Constant(value='Distribution')), arg(arg='project_cfg', annotation=Name(id='dict', ctx=Load())), arg(arg='setuptools_cfg', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='distribution', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_project_cfg', ctx=Store())], value=Name(id='project_cfg', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_setuptools_cfg', ctx=Store())], value=Name(id='setuptools_cfg', ctx=Load()))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When entering the context, the values of ``packages``, ``py_modules`` and\n        ``package_dir`` that are missing in ``dist`` are copied from ``setuptools_cfg``.\n        ')), Assign(targets=[Tuple(elts=[Name(id='dist', ctx=Store()), Name(id='cfg', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_setuptools_cfg', ctx=Load())], ctx=Load())), AnnAssign(target=Name(id='package_dir', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='package-dir'), Dict(keys=[], values=[])], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='package_dir', ctx=Load()), attr='update', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='package_dir', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='package_dir', ctx=Store())], value=Name(id='package_dir', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='set_defaults', ctx=Load()), attr='_ignore_ext_modules', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()), attr='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()), attr='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_project_cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='name')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='py_modules', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='py_modules', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='py-modules')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='packages', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='packages', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='packages')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__enter__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type'), arg(arg='exc_value'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When exiting the context, if values of ``packages``, ``py_modules`` and\n        ``package_dir`` are missing in ``setuptools_cfg``, copy from ``dist``.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_setuptools_cfg', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='packages'), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='packages', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_setuptools_cfg', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='py-modules'), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='py_modules', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__exit__', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='traceback', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_ExperimentalConfiguration', bases=[Name(id='SetuptoolsWarning', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_SUMMARY', ctx=Store())], value=Constant(value='`{subject}` in `pyproject.toml` is still *experimental* and likely to change in future releases.'))], decorator_list=[])], type_ignores=[])