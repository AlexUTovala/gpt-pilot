Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='types')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Union'), alias(name='Iterable'), alias(name='ContextManager'), alias(name='BinaryIO'), alias(name='TextIO'), alias(name='Any')], level=0), ImportFrom(names=[alias(name='_common')], level=1), Assign(targets=[Name(id='Package', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='Resource', ctx=Store())], value=Name(id='str', ctx=Load())), FunctionDef(name='deprecated', args=arguments(posonlyargs=[], args=[arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' is deprecated. Use files() instead. Refer to https://importlib-resources.readthedocs.io/en/latest/using.html#migrating-from-legacy for migration advice.')]), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='normalize_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize a path by ensuring it is a string.\n\n    If the resulting string contains path separators, an exception is raised.\n    ')), Assign(targets=[Name(id='str_path', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='file_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='str_path', ctx=Load())], keywords=[])), If(test=Name(id='parent', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='path', ctx=Load()), conversion=114), Constant(value=' must be only a file name')])], keywords=[]))], orelse=[]), Return(value=Name(id='file_name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='open_binary', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='resource', annotation=Name(id='Resource', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a file-like object opened for binary reading of the resource.')), Return(value=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='resource', ctx=Load())], keywords=[])), attr='open', ctx=Load()), args=[Constant(value='rb')], keywords=[]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Name(id='BinaryIO', ctx=Load())), FunctionDef(name='read_binary', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='resource', annotation=Name(id='Resource', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the binary contents of the resource.')), Return(value=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='resource', ctx=Load())], keywords=[])), attr='read_bytes', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='open_text', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='resource', annotation=Name(id='Resource', ctx=Load())), arg(arg='encoding', annotation=Name(id='str', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value='strict')]), body=[Expr(value=Constant(value='Return a file-like object opened for text reading of the resource.')), Return(value=Call(func=Attribute(value=BinOp(left=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='resource', ctx=Load())], keywords=[])), attr='open', ctx=Load()), args=[Constant(value='r')], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='errors', value=Name(id='errors', ctx=Load()))]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Name(id='TextIO', ctx=Load())), FunctionDef(name='read_text', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='resource', annotation=Name(id='Resource', ctx=Load())), arg(arg='encoding', annotation=Name(id='str', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value='strict')]), body=[Expr(value=Constant(value='Return the decoded string of the resource.\n\n    The decoding-related arguments have the same semantics as those of\n    bytes.decode().\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='package', ctx=Load()), Name(id='resource', ctx=Load()), Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='contents', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return an iterable of entries in `package`.\n\n    Note that not all entries are resources.  Specifically, directories are\n    not considered resources.  Use `is_resource()` on each entry returned here\n    to check if it is a resource or not.\n    ')), Return(value=ListComp(elt=Attribute(value=Name(id='path', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), attr='iterdir', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_resource', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if `name` is a resource inside `package`.\n\n    Directories are *not* resources.\n    ')), Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='traversable', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='resource', ctx=Load())]), Call(func=Attribute(value=Name(id='traversable', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[])]), generators=[comprehension(target=Name(id='traversable', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), attr='iterdir', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Name(id='Package', ctx=Load())), arg(arg='resource', annotation=Name(id='Resource', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A context manager providing a file path object to the resource.\n\n    If the resource does not already exist on its own on the file system,\n    a temporary file will be created. If the file was created, the file\n    will be deleted upon exiting the context manager (no exception is\n    raised if the file was deleted prior to the context manager\n    exiting).\n    ')), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='as_file', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='files', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='resource', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Name(id='deprecated', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), ctx=Load()))], type_ignores=[])