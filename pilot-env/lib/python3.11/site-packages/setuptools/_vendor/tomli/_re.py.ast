Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='datetime', names=[alias(name='date'), alias(name='datetime'), alias(name='time'), alias(name='timedelta'), alias(name='timezone'), alias(name='tzinfo')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='_types', names=[alias(name='ParseFloat')], level=1), Assign(targets=[Name(id='_TIME_RE_STR', ctx=Store())], value=Constant(value='([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:\\.([0-9]{1,6})[0-9]*)?')), Assign(targets=[Name(id='RE_NUMBER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n0\n(?:\n    x[0-9A-Fa-f](?:_?[0-9A-Fa-f])*   # hex\n    |\n    b[01](?:_?[01])*                 # bin\n    |\n    o[0-7](?:_?[0-7])*               # oct\n)\n|\n[+-]?(?:0|[1-9](?:_?[0-9])*)         # dec, integer part\n(?P<floatpart>\n    (?:\\.[0-9](?:_?[0-9])*)?         # optional fractional part\n    (?:[eE][+-]?[0-9](?:_?[0-9])*)?  # optional exponent part\n)\n')], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()))])), Assign(targets=[Name(id='RE_LOCALTIME', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='_TIME_RE_STR', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RE_DATETIME', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])  # date, e.g. 1988-10-27\n(?:\n    [Tt ]\n    '), FormattedValue(value=Name(id='_TIME_RE_STR', ctx=Load()), conversion=-1), Constant(value='\n    (?:([Zz])|([+-])([01][0-9]|2[0-3]):([0-5][0-9]))?  # optional time offset\n)?\n')])], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()))])), FunctionDef(name='match_to_datetime', args=arguments(posonlyargs=[], args=[arg(arg='match', annotation=Attribute(value=Name(id='re', ctx=Load()), attr='Match', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a `RE_DATETIME` match to `datetime.datetime` or `datetime.date`.\n\n    Raises ValueError if the match does not correspond to a valid date\n    or datetime.\n    ')), Assign(targets=[Tuple(elts=[Name(id='year_str', ctx=Store()), Name(id='month_str', ctx=Store()), Name(id='day_str', ctx=Store()), Name(id='hour_str', ctx=Store()), Name(id='minute_str', ctx=Store()), Name(id='sec_str', ctx=Store()), Name(id='micros_str', ctx=Store()), Name(id='zulu_time', ctx=Store()), Name(id='offset_sign_str', ctx=Store()), Name(id='offset_hour_str', ctx=Store()), Name(id='offset_minute_str', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='year', ctx=Store()), Name(id='month', ctx=Store()), Name(id='day', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='year_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='month_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='day_str', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='hour_str', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='date', ctx=Load()), args=[Name(id='year', ctx=Load()), Name(id='month', ctx=Load()), Name(id='day', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='hour', ctx=Store()), Name(id='minute', ctx=Store()), Name(id='sec', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='hour_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minute_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='sec_str', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='micros', ctx=Store())], value=IfExp(test=Name(id='micros_str', ctx=Load()), body=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='micros_str', ctx=Load()), attr='ljust', ctx=Load()), args=[Constant(value=6), Constant(value='0')], keywords=[])], keywords=[]), orelse=Constant(value=0))), If(test=Name(id='offset_sign_str', ctx=Load()), body=[AnnAssign(target=Name(id='tz', ctx=Store()), annotation=BinOp(left=Name(id='tzinfo', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Call(func=Name(id='cached_tz', ctx=Load()), args=[Name(id='offset_hour_str', ctx=Load()), Name(id='offset_minute_str', ctx=Load()), Name(id='offset_sign_str', ctx=Load())], keywords=[]), simple=1)], orelse=[If(test=Name(id='zulu_time', ctx=Load()), body=[Assign(targets=[Name(id='tz', ctx=Store())], value=Attribute(value=Name(id='timezone', ctx=Load()), attr='utc', ctx=Load()))], orelse=[Assign(targets=[Name(id='tz', ctx=Store())], value=Constant(value=None))])]), Return(value=Call(func=Name(id='datetime', ctx=Load()), args=[Name(id='year', ctx=Load()), Name(id='month', ctx=Load()), Name(id='day', ctx=Load()), Name(id='hour', ctx=Load()), Name(id='minute', ctx=Load()), Name(id='sec', ctx=Load()), Name(id='micros', ctx=Load())], keywords=[keyword(arg='tzinfo', value=Name(id='tz', ctx=Load()))]))], decorator_list=[], returns=BinOp(left=Name(id='datetime', ctx=Load()), op=BitOr(), right=Name(id='date', ctx=Load()))), FunctionDef(name='cached_tz', args=arguments(posonlyargs=[], args=[arg(arg='hour_str', annotation=Name(id='str', ctx=Load())), arg(arg='minute_str', annotation=Name(id='str', ctx=Load())), arg(arg='sign_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sign', ctx=Store())], value=IfExp(test=Compare(left=Name(id='sign_str', ctx=Load()), ops=[Eq()], comparators=[Constant(value='+')]), body=Constant(value=1), orelse=UnaryOp(op=USub(), operand=Constant(value=1)))), Return(value=Call(func=Name(id='timezone', ctx=Load()), args=[Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='hours', value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='hour_str', ctx=Load())], keywords=[]))), keyword(arg='minutes', value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='minute_str', ctx=Load())], keywords=[])))])], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='timezone', ctx=Load())), FunctionDef(name='match_to_localtime', args=arguments(posonlyargs=[], args=[arg(arg='match', annotation=Attribute(value=Name(id='re', ctx=Load()), attr='Match', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='hour_str', ctx=Store()), Name(id='minute_str', ctx=Store()), Name(id='sec_str', ctx=Store()), Name(id='micros_str', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='micros', ctx=Store())], value=IfExp(test=Name(id='micros_str', ctx=Load()), body=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='micros_str', ctx=Load()), attr='ljust', ctx=Load()), args=[Constant(value=6), Constant(value='0')], keywords=[])], keywords=[]), orelse=Constant(value=0))), Return(value=Call(func=Name(id='time', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='hour_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minute_str', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='sec_str', ctx=Load())], keywords=[]), Name(id='micros', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='time', ctx=Load())), FunctionDef(name='match_to_number', args=arguments(posonlyargs=[], args=[arg(arg='match', annotation=Attribute(value=Name(id='re', ctx=Load()), attr='Match', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='floatpart')], keywords=[]), body=[Return(value=Call(func=Name(id='parse_float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[]))], decorator_list=[], returns=Name(id='Any', ctx=Load()))], type_ignores=[])