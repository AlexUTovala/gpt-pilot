Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Iterable')], level=0), Import(names=[alias(name='string')]), ImportFrom(module='types', names=[alias(name='MappingProxyType')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='BinaryIO'), alias(name='NamedTuple')], level=0), ImportFrom(module='_re', names=[alias(name='RE_DATETIME'), alias(name='RE_LOCALTIME'), alias(name='RE_NUMBER'), alias(name='match_to_datetime'), alias(name='match_to_localtime'), alias(name='match_to_number')], level=1), ImportFrom(module='_types', names=[alias(name='Key'), alias(name='ParseFloat'), alias(name='Pos')], level=1), Assign(targets=[Name(id='ASCII_CTRL', ctx=Store())], value=BinOp(left=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=32)], keywords=[]), ifs=[], is_async=0)])], keywords=[]), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Constant(value=127)], keywords=[])], keywords=[]))), Assign(targets=[Name(id='ILLEGAL_BASIC_STR_CHARS', ctx=Store())], value=BinOp(left=Name(id='ASCII_CTRL', ctx=Load()), op=Sub(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value='\t')], keywords=[]))), Assign(targets=[Name(id='ILLEGAL_MULTILINE_BASIC_STR_CHARS', ctx=Store())], value=BinOp(left=Name(id='ASCII_CTRL', ctx=Load()), op=Sub(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value='\t\n')], keywords=[]))), Assign(targets=[Name(id='ILLEGAL_LITERAL_STR_CHARS', ctx=Store())], value=Name(id='ILLEGAL_BASIC_STR_CHARS', ctx=Load())), Assign(targets=[Name(id='ILLEGAL_MULTILINE_LITERAL_STR_CHARS', ctx=Store())], value=Name(id='ILLEGAL_MULTILINE_BASIC_STR_CHARS', ctx=Load())), Assign(targets=[Name(id='ILLEGAL_COMMENT_CHARS', ctx=Store())], value=Name(id='ILLEGAL_BASIC_STR_CHARS', ctx=Load())), Assign(targets=[Name(id='TOML_WS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value=' \t')], keywords=[])), Assign(targets=[Name(id='TOML_WS_AND_NEWLINE', ctx=Store())], value=BinOp(left=Name(id='TOML_WS', ctx=Load()), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value='\n')], keywords=[]))), Assign(targets=[Name(id='BARE_KEY_CHARS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_letters', ctx=Load()), op=Add(), right=Attribute(value=Name(id='string', ctx=Load()), attr='digits', ctx=Load())), op=Add(), right=Constant(value='-_'))], keywords=[])), Assign(targets=[Name(id='KEY_INITIAL_CHARS', ctx=Store())], value=BinOp(left=Name(id='BARE_KEY_CHARS', ctx=Load()), op=BitOr(), right=Call(func=Name(id='frozenset', ctx=Load()), args=[Constant(value='"\'')], keywords=[]))), Assign(targets=[Name(id='HEXDIGIT_CHARS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='string', ctx=Load()), attr='hexdigits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BASIC_STR_ESCAPE_REPLACEMENTS', ctx=Store())], value=Call(func=Name(id='MappingProxyType', ctx=Load()), args=[Dict(keys=[Constant(value='\\b'), Constant(value='\\t'), Constant(value='\\n'), Constant(value='\\f'), Constant(value='\\r'), Constant(value='\\"'), Constant(value='\\\\')], values=[Constant(value='\x08'), Constant(value='\t'), Constant(value='\n'), Constant(value='\x0c'), Constant(value='\r'), Constant(value='"'), Constant(value='\\')])], keywords=[])), ClassDef(name='TOMLDecodeError', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An error raised if a document is not valid TOML.'))], decorator_list=[]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='__fp', annotation=Name(id='BinaryIO', ctx=Load()))], kwonlyargs=[arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kw_defaults=[Name(id='float', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='Parse TOML from a binary file object.')), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='__fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='b', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value="File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`")], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='loads', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(arg='parse_float', value=Name(id='parse_float', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='loads', args=arguments(posonlyargs=[], args=[arg(arg='__s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kw_defaults=[Name(id='float', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='Parse TOML from a string.')), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='__s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r\n'), Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='Output', ctx=Load()), args=[Call(func=Name(id='NestedDict', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Flags', ctx=Load()), args=[], keywords=[])], keywords=[])), AnnAssign(target=Name(id='header', ctx=Store()), annotation=Name(id='Key', ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='parse_float', ctx=Store())], value=Call(func=Name(id='make_safe_parse_float', ctx=Load()), args=[Name(id='parse_float', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Name(id='KEY_INITIAL_CHARS', ctx=Load())]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='key_value_rule', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='out', ctx=Load()), Name(id='header', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Try(body=[AnnAssign(target=Name(id='second_char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='second_char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='finalize_pending', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='second_char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='header', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_list_rule', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='out', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='header', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_dict_rule', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='out', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='#')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Invalid statement')], keywords=[]))], orelse=[])])]), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_comment', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\n')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Expected newline or end of document after a statement')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='data', ctx=Load()), attr='dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Flags', bases=[], keywords=[], body=[Expr(value=Constant(value='Flags that map to parsed keys/namespaces.')), Assign(targets=[Name(id='FROZEN', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='EXPLICIT_NEST', ctx=Store())], value=Constant(value=1)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_flags', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_pending_flags', ctx=Store()), annotation=Subscript(value=Name(id='set', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Key', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_pending', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load())), arg(arg='flag', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pending_flags', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Name(id='flag', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='finalize_pending', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='flag', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_pending_flags', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='flag', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=False))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pending_flags', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unset_all', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cont', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_flags', ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cont', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), slice=Constant(value='nested'), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cont', ctx=Load()), attr='pop', ctx=Load()), args=[Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load())), arg(arg='flag', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[arg(arg='recursive', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Name(id='cont', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_flags', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='key_parent', ctx=Store()), Name(id='key_stem', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Name(id='key_parent', ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cont', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='flags'), Constant(value='recursive_flags'), Constant(value='nested')], values=[Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), Dict(keys=[], values=[])]))], orelse=[]), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), slice=Constant(value='nested'), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='key_stem', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cont', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='key_stem', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='flags'), Constant(value='recursive_flags'), Constant(value='nested')], values=[Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), Dict(keys=[], values=[])]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='key_stem', ctx=Load()), ctx=Load()), slice=IfExp(test=Name(id='recursive', ctx=Load()), body=Constant(value='recursive_flags'), orelse=Constant(value='flags')), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='flag', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load())), arg(arg='flag', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='key', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='cont', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_flags', ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cont', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='inner_cont', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='flag', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='inner_cont', ctx=Load()), slice=Constant(value='recursive_flags'), ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='inner_cont', ctx=Load()), slice=Constant(value='nested'), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='key_stem', ctx=Store())], value=Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='key_stem', ctx=Load()), ops=[In()], comparators=[Name(id='cont', ctx=Load())]), body=[Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='key_stem', ctx=Load()), ctx=Load())), Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='flag', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='cont', ctx=Load()), slice=Constant(value='flags'), ctx=Load())]), Compare(left=Name(id='flag', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='cont', ctx=Load()), slice=Constant(value='recursive_flags'), ctx=Load())])]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='NestedDict', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='dict', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_or_create_nest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load()))], kwonlyargs=[arg(arg='access_lists', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[AnnAssign(target=Name(id='cont', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='dict', ctx=Load()), simple=1), For(target=Name(id='k', ctx=Store()), iter=Name(id='key', ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cont', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='access_lists', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cont', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='cont', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cont', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='There is no nest behind this key')], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='cont', ctx=Load()))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='append_nest_to_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='Key', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cont', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_or_create_nest', ctx=Load()), args=[Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_key', ctx=Store())], value=Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='last_key', ctx=Load()), ops=[In()], comparators=[Name(id='cont', ctx=Load())]), body=[Assign(targets=[Name(id='list_', ctx=Store())], value=Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='last_key', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='list_', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='An object other than list found behind this key')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='list_', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='cont', ctx=Load()), slice=Name(id='last_key', ctx=Load()), ctx=Store())], value=List(elts=[Dict(keys=[], values=[])], ctx=Load()))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='Output', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='data', ctx=Store()), annotation=Name(id='NestedDict', ctx=Load()), simple=1), AnnAssign(target=Name(id='flags', ctx=Store()), annotation=Name(id='Flags', ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='skip_chars', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='chars', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[While(test=Compare(left=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='chars', ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Name(id='pos', ctx=Load()))], decorator_list=[], returns=Name(id='Pos', ctx=Load())), FunctionDef(name='skip_until', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='expect', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='error_on', annotation=Subscript(value=Name(id='frozenset', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='error_on_eof', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='new_pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='expect', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='new_pos', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), If(test=Name(id='error_on_eof', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='new_pos', ctx=Load()), JoinedStr(values=[Constant(value='Expected '), FormattedValue(value=Name(id='expect', ctx=Load()), conversion=114)])], keywords=[]), cause=Constant(value=None))], orelse=[])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='error_on', ctx=Load()), attr='isdisjoint', ctx=Load()), args=[Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=Name(id='new_pos', ctx=Load())), ctx=Load())], keywords=[])), body=[While(test=Compare(left=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='error_on', ctx=Load())]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Found invalid character '), FormattedValue(value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Return(value=Name(id='new_pos', ctx=Load()))], decorator_list=[], returns=Name(id='Pos', ctx=Load())), FunctionDef(name='skip_comment', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Return(value=Call(func=Name(id='skip_until', ctx=Load()), args=[Name(id='src', ctx=Load()), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value='\n')], keywords=[keyword(arg='error_on', value=Name(id='ILLEGAL_COMMENT_CHARS', ctx=Load())), keyword(arg='error_on_eof', value=Constant(value=False))]))], orelse=[]), Return(value=Name(id='pos', ctx=Load()))], decorator_list=[], returns=Name(id='Pos', ctx=Load())), FunctionDef(name='skip_comments_and_array_ws', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='pos_before_skip', ctx=Store())], value=Name(id='pos', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS_AND_NEWLINE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_comment', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Eq()], comparators=[Name(id='pos_before_skip', ctx=Load())]), body=[Return(value=Name(id='pos', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=Name(id='Pos', ctx=Load())), FunctionDef(name='create_dict_rule', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='out', annotation=Name(id='Output', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='EXPLICIT_NEST', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Cannot declare '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=' twice')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='EXPLICIT_NEST', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=False))])), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='data', ctx=Load()), attr='get_or_create_nest', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Cannot overwrite a value')], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=']'), Name(id='pos', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="Expected ']' at the end of a table declaration")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='key', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='Key', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='create_list_rule', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='out', annotation=Name(id='Output', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Cannot mutate immutable namespace '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='unset_all', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='EXPLICIT_NEST', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=False))])), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='data', ctx=Load()), attr='append_nest_to_list', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Cannot overwrite a value')], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=']]'), Name(id='pos', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="Expected ']]' at the end of an array declaration")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=2)), Name(id='key', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='Key', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='key_value_rule', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='out', annotation=Name(id='Output', ctx=Load())), arg(arg='header', annotation=Name(id='Key', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key_value_pair', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='key_parent', ctx=Store()), Name(id='key_stem', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='abs_key_parent', ctx=Store())], value=BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Name(id='key_parent', ctx=Load()))), Assign(targets=[Name(id='relative_path_cont_keys', ctx=Store())], value=GeneratorExp(elt=BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='cont_key', ctx=Store()), iter=Name(id='relative_path_cont_keys', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='cont_key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='EXPLICIT_NEST', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Cannot redefine namespace '), FormattedValue(value=Name(id='cont_key', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='add_pending', ctx=Load()), args=[Name(id='cont_key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='EXPLICIT_NEST', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='abs_key_parent', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Cannot mutate immutable namespace '), FormattedValue(value=Name(id='abs_key_parent', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='nest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='data', ctx=Load()), attr='get_or_create_nest', ctx=Load()), args=[Name(id='abs_key_parent', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Cannot overwrite a value')], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='key_stem', ctx=Load()), ops=[In()], comparators=[Name(id='nest', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Cannot overwrite a value')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='out', ctx=Load()), attr='flags', ctx=Load()), attr='set', ctx=Load()), args=[BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Name(id='key', ctx=Load())), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='nest', ctx=Load()), slice=Name(id='key_stem', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Return(value=Name(id='pos', ctx=Load()))], decorator_list=[], returns=Name(id='Pos', ctx=Load())), FunctionDef(name='parse_key_value_pair', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), Try(body=[AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='=')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="Expected '=' after a key in a key/value pair")], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_value', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='Key', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_key', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key_part', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key_part', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='key', ctx=Store()), annotation=Name(id='Key', ctx=Load()), value=Tuple(elts=[Name(id='key_part', ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Try(body=[AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='.')]), body=[Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='key', ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key_part', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key_part', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), AugAssign(target=Name(id='key', ctx=Store()), op=Add(), value=Tuple(elts=[Name(id='key_part', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='Key', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_key_part', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Name(id='BARE_KEY_CHARS', ctx=Load())]), body=[Assign(targets=[Name(id='start_pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='BARE_KEY_CHARS', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='start_pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value="'")]), body=[Return(value=Call(func=Name(id='parse_literal_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='"')]), body=[Return(value=Call(func=Name(id='parse_one_line_basic_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Invalid initial character for a key part')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_one_line_basic_str', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='parse_basic_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[keyword(arg='multiline', value=Constant(value=False))]))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_array', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), AnnAssign(target=Name(id='array', ctx=Store()), annotation=Name(id='list', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_comments_and_array_ws', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=']'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='array', ctx=Load())], ctx=Load()))], orelse=[]), While(test=Constant(value=True), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_value', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='array', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_comments_and_array_ws', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value=']')]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='array', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=',')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Unclosed array')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_comments_and_array_ws', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=']'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='array', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_inline_table', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='nested_dict', ctx=Store())], value=Call(func=Name(id='NestedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Name(id='Flags', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='}'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='nested_dict', ctx=Load()), attr='dict', ctx=Load())], ctx=Load()))], orelse=[]), While(test=Constant(value=True), body=[Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_key_value_pair', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='key_parent', ctx=Store()), Name(id='key_stem', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='key', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='key', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())), If(test=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='is_', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Cannot mutate immutable namespace '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='nest', ctx=Store())], value=Call(func=Attribute(value=Name(id='nested_dict', ctx=Load()), attr='get_or_create_nest', ctx=Load()), args=[Name(id='key_parent', ctx=Load())], keywords=[keyword(arg='access_lists', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Cannot overwrite a value')], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='key_stem', ctx=Load()), ops=[In()], comparators=[Name(id='nest', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Duplicate inline table key '), FormattedValue(value=Name(id='key_stem', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='nest', ctx=Load()), slice=Name(id='key_stem', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value='}')]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Attribute(value=Name(id='nested_dict', ctx=Load()), attr='dict', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=',')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Unclosed inline table')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='Flags', ctx=Load()), attr='FROZEN', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_basic_str_escape', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[arg(arg='multiline', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Assign(targets=[Name(id='escape_id', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load())), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=2)), If(test=BoolOp(op=And(), values=[Name(id='multiline', ctx=Load()), Compare(left=Name(id='escape_id', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='\\ '), Constant(value='\\\t'), Constant(value='\\\n')])])]), body=[If(test=Compare(left=Name(id='escape_id', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\\\n')]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Constant(value='')], ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\n')]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="Unescaped '\\' in a string")], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_chars', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='TOML_WS_AND_NEWLINE', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Constant(value='')], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='escape_id', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\u')]), body=[Return(value=Call(func=Name(id='parse_hex_char', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value=4)], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='escape_id', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\U')]), body=[Return(value=Call(func=Name(id='parse_hex_char', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value=8)], keywords=[]))], orelse=[]), Try(body=[Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Subscript(value=Name(id='BASIC_STR_ESCAPE_REPLACEMENTS', ctx=Load()), slice=Name(id='escape_id', ctx=Load()), ctx=Load())], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="Unescaped '\\' in a string")], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_basic_str_escape_multiline', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='parse_basic_str_escape', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[keyword(arg='multiline', value=Constant(value=True))]))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_hex_char', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='hex_len', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hex_str', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Name(id='hex_len', ctx=Load()))), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='hex_str', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='hex_len', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='HEXDIGIT_CHARS', ctx=Load()), attr='issuperset', ctx=Load()), args=[Name(id='hex_str', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Invalid hex value')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Name(id='hex_len', ctx=Load())), Assign(targets=[Name(id='hex_int', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='hex_str', ctx=Load()), Constant(value=16)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_unicode_scalar_value', ctx=Load()), args=[Name(id='hex_int', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Escaped character is not a Unicode scalar value')], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Call(func=Name(id='chr', ctx=Load()), args=[Name(id='hex_int', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_literal_str', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='start_pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='skip_until', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="'")], keywords=[keyword(arg='error_on', value=Name(id='ILLEGAL_LITERAL_STR_CHARS', ctx=Load())), keyword(arg='error_on_eof', value=Constant(value=True))])), Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='start_pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_multiline_str', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[arg(arg='literal', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=3)), If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='\n'), Name(id='pos', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Name(id='literal', ctx=Load()), body=[Assign(targets=[Name(id='delim', ctx=Store())], value=Constant(value="'")), Assign(targets=[Name(id='end_pos', ctx=Store())], value=Call(func=Name(id='skip_until', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value="'''")], keywords=[keyword(arg='error_on', value=Name(id='ILLEGAL_MULTILINE_LITERAL_STR_CHARS', ctx=Load())), keyword(arg='error_on_eof', value=Constant(value=True))])), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=Name(id='end_pos', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=Name(id='end_pos', ctx=Load()), op=Add(), right=Constant(value=3)))], orelse=[Assign(targets=[Name(id='delim', ctx=Store())], value=Constant(value='"')), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_basic_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[keyword(arg='multiline', value=Constant(value=True))]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='delim', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), body=[Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='result', ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='delim', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), body=[Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), BinOp(left=Name(id='result', ctx=Load()), op=Add(), right=Name(id='delim', ctx=Load()))], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Tuple(elts=[Name(id='pos', ctx=Load()), BinOp(left=Name(id='result', ctx=Load()), op=Add(), right=BinOp(left=Name(id='delim', ctx=Load()), op=Mult(), right=Constant(value=2)))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_basic_str', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[arg(arg='multiline', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[If(test=Name(id='multiline', ctx=Load()), body=[Assign(targets=[Name(id='error_on', ctx=Store())], value=Name(id='ILLEGAL_MULTILINE_BASIC_STR_CHARS', ctx=Load())), Assign(targets=[Name(id='parse_escapes', ctx=Store())], value=Name(id='parse_basic_str_escape_multiline', ctx=Load()))], orelse=[Assign(targets=[Name(id='error_on', ctx=Store())], value=Name(id='ILLEGAL_BASIC_STR_CHARS', ctx=Load())), Assign(targets=[Name(id='parse_escapes', ctx=Store())], value=Name(id='parse_basic_str_escape', ctx=Load()))]), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='start_pos', ctx=Store())], value=Name(id='pos', ctx=Load())), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Unterminated string')], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='"')]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='multiline', ctx=Load())), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), BinOp(left=Name(id='result', ctx=Load()), op=Add(), right=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='start_pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load()))], ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"""'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=3)), BinOp(left=Name(id='result', ctx=Load()), op=Add(), right=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='start_pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load()))], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='start_pos', ctx=Load()), upper=Name(id='pos', ctx=Load())), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='parsed_escape', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_escapes', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Name(id='parsed_escape', ctx=Load())), Assign(targets=[Name(id='start_pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Continue()], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Name(id='error_on', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), JoinedStr(values=[Constant(value='Illegal character '), FormattedValue(value=Name(id='char', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_value', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[AnnAssign(target=Name(id='char', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), simple=1)], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='"')]), body=[If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"""'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='parse_multiline_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[keyword(arg='literal', value=Constant(value=False))]))], orelse=[]), Return(value=Call(func=Name(id='parse_one_line_basic_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value="'")]), body=[If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value="'''"), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='parse_multiline_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[keyword(arg='literal', value=Constant(value=True))]))], orelse=[]), Return(value=Call(func=Name(id='parse_literal_str', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='t')]), body=[If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='true'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=4)), Constant(value=True)], ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='f')]), body=[If(test=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='false'), Name(id='pos', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=5)), Constant(value=False)], ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Return(value=Call(func=Name(id='parse_array', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{')]), body=[Return(value=Call(func=Name(id='parse_inline_table', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='datetime_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='RE_DATETIME', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Name(id='datetime_match', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='datetime_obj', ctx=Store())], value=Call(func=Name(id='match_to_datetime', ctx=Load()), args=[Name(id='datetime_match', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Invalid date or datetime')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='datetime_match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), Name(id='datetime_obj', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='localtime_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='RE_LOCALTIME', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Name(id='localtime_match', ctx=Load()), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='localtime_match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='match_to_localtime', ctx=Load()), args=[Name(id='localtime_match', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='number_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='RE_NUMBER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Name(id='number_match', ctx=Load()), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='number_match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='match_to_number', ctx=Load()), args=[Name(id='number_match', ctx=Load()), Name(id='parse_float', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='first_three', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=3))), ctx=Load())), If(test=Compare(left=Name(id='first_three', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='inf'), Constant(value='nan')])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=3)), Call(func=Name(id='parse_float', ctx=Load()), args=[Name(id='first_three', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='first_four', ctx=Store())], value=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=4))), ctx=Load())), If(test=Compare(left=Name(id='first_four', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='-inf'), Constant(value='+inf'), Constant(value='-nan'), Constant(value='+nan')])]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=4)), Call(func=Name(id='parse_float', ctx=Load()), args=[Name(id='first_four', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='suffixed_err', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load()), Constant(value='Invalid value')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Pos', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='suffixed_err', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load())), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a `TOMLDecodeError` where error message is suffixed with\n    coordinates in source.')), FunctionDef(name='coord_repr', args=arguments(posonlyargs=[], args=[arg(arg='src', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='Pos', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='end of document'))], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='pos', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='column', ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='column', ctx=Store())], value=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='rindex', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='pos', ctx=Load())], keywords=[])))]), Return(value=JoinedStr(values=[Constant(value='line '), FormattedValue(value=Name(id='line', ctx=Load()), conversion=-1), Constant(value=', column '), FormattedValue(value=Name(id='column', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Call(func=Name(id='TOMLDecodeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value=' (at '), FormattedValue(value=Call(func=Name(id='coord_repr', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]), conversion=-1), Constant(value=')')])], keywords=[]))], decorator_list=[], returns=Name(id='TOMLDecodeError', ctx=Load())), FunctionDef(name='is_unicode_scalar_value', args=arguments(posonlyargs=[], args=[arg(arg='codepoint', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='codepoint', ctx=Load()), Constant(value=55295)]), Compare(left=Constant(value=57344), ops=[LtE(), LtE()], comparators=[Name(id='codepoint', ctx=Load()), Constant(value=1114111)])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='make_safe_parse_float', args=arguments(posonlyargs=[], args=[arg(arg='parse_float', annotation=Name(id='ParseFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A decorator to make `parse_float` safe.\n\n    `parse_float` must not return dicts or lists, because these types\n    would be mixed with parsed TOML tables and arrays, thus confusing\n    the parser. The returned decorated callable raises `ValueError`\n    instead of returning illegal types.\n    ')), If(test=Compare(left=Name(id='parse_float', ctx=Load()), ops=[Is()], comparators=[Name(id='float', ctx=Load())]), body=[Return(value=Name(id='float', ctx=Load()))], orelse=[]), FunctionDef(name='safe_parse_float', args=arguments(posonlyargs=[], args=[arg(arg='float_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='float_value', ctx=Store())], value=Call(func=Name(id='parse_float', ctx=Load()), args=[Name(id='float_str', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='float_value', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='parse_float must not return dicts or lists')], keywords=[]))], orelse=[]), Return(value=Name(id='float_value', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), Return(value=Name(id='safe_parse_float', ctx=Load()))], decorator_list=[], returns=Name(id='ParseFloat', ctx=Load()))], type_ignores=[])