Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), ImportFrom(module='importlib.machinery', names=[alias(name='EXTENSION_SUFFIXES')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='FrozenSet'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(names=[alias(name='_manylinux'), alias(name='_musllinux')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='PythonVersion', ctx=Store())], value=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='MacVersion', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='INTERPRETER_SHORT_NAMES', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='python'), Constant(value='cpython'), Constant(value='pypy'), Constant(value='ironpython'), Constant(value='jython')], values=[Constant(value='py'), Constant(value='cp'), Constant(value='pp'), Constant(value='ip'), Constant(value='jy')]), simple=1), Assign(targets=[Name(id='_32_BIT_INTERPRETER', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()), ops=[LtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))])), ClassDef(name='Tag', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A representation of the tag triple for a wheel.\n\n    Instances are considered immutable and thus are hashable. Equality checking\n    is also supported.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='_interpreter'), Constant(value='_abi'), Constant(value='_platform'), Constant(value='_hash')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='interpreter', annotation=Name(id='str', ctx=Load())), arg(arg='abi', annotation=Name(id='str', ctx=Load())), arg(arg='platform', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_interpreter', ctx=Store())], value=Call(func=Attribute(value=Name(id='interpreter', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_abi', ctx=Store())], value=Call(func=Attribute(value=Name(id='abi', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_platform', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Store())], value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_interpreter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_abi', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_platform', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='interpreter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_interpreter', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='abi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_abi', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='platform', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_platform', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Tag', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_hash', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_platform', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_platform', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_abi', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_abi', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_interpreter', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_interpreter', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_interpreter', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_abi', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_platform', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value=' @ '), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_tag', args=arguments(posonlyargs=[], args=[arg(arg='tag', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.\n\n    Returning a set is required due to the possibility that the tag is a\n    compressed tag set.\n    ')), Assign(targets=[Name(id='tags', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='interpreters', ctx=Store()), Name(id='abis', ctx=Store()), Name(id='platforms', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tag', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[])), For(target=Name(id='interpreter', ctx=Store()), iter=Call(func=Attribute(value=Name(id='interpreters', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[For(target=Name(id='abi', ctx=Store()), iter=Call(func=Attribute(value=Name(id='abis', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[For(target=Name(id='platform_', ctx=Store()), iter=Call(func=Attribute(value=Name(id='platforms', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tags', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Name(id='abi', ctx=Load()), Name(id='platform_', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='tags', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())), FunctionDef(name='_get_config_var', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[AnnAssign(target=Name(id='value', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='warn', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Config variable '%s' is unset, Python ABI tag may be incorrect"), Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_normalize_string', args=arguments(posonlyargs=[], args=[arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='_')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_abi3_applies', args=arguments(posonlyargs=[], args=[arg(arg='python_version', annotation=Name(id='PythonVersion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine if the Python version supports abi3.\n\n    PEP 384 was first implemented in Python 3.2.\n    ')), Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_cpython_abis', args=arguments(posonlyargs=[], args=[arg(arg='py_version', annotation=Name(id='PythonVersion', ctx=Load())), arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='py_version', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='py_version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='abis', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Subscript(value=Name(id='py_version', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='debug', ctx=Store()), Name(id='pymalloc', ctx=Store()), Name(id='ucs4', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='with_debug', ctx=Store())], value=Call(func=Name(id='_get_config_var', ctx=Load()), args=[Constant(value='Py_DEBUG'), Name(id='warn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='has_refcount', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='gettotalrefcount')], keywords=[])), Assign(targets=[Name(id='has_ext', ctx=Store())], value=Compare(left=Constant(value='_d.pyd'), ops=[In()], comparators=[Name(id='EXTENSION_SUFFIXES', ctx=Load())])), If(test=BoolOp(op=Or(), values=[Name(id='with_debug', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Name(id='with_debug', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Name(id='has_refcount', ctx=Load()), Name(id='has_ext', ctx=Load())])])]), body=[Assign(targets=[Name(id='debug', ctx=Store())], value=Constant(value='d'))], orelse=[]), If(test=Compare(left=Name(id='py_version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[Assign(targets=[Name(id='with_pymalloc', ctx=Store())], value=Call(func=Name(id='_get_config_var', ctx=Load()), args=[Constant(value='WITH_PYMALLOC'), Name(id='warn', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='with_pymalloc', ctx=Load()), Compare(left=Name(id='with_pymalloc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='pymalloc', ctx=Store())], value=Constant(value='m'))], orelse=[]), If(test=Compare(left=Name(id='py_version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=3)], ctx=Load())]), body=[Assign(targets=[Name(id='unicode_size', ctx=Store())], value=Call(func=Name(id='_get_config_var', ctx=Load()), args=[Constant(value='Py_UNICODE_SIZE'), Name(id='warn', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='unicode_size', ctx=Load()), ops=[Eq()], comparators=[Constant(value=4)]), BoolOp(op=And(), values=[Compare(left=Name(id='unicode_size', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='maxunicode', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1114111)])])]), body=[Assign(targets=[Name(id='ucs4', ctx=Store())], value=Constant(value='u'))], orelse=[])], orelse=[])], orelse=[If(test=Name(id='debug', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='abis', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='cp'), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='abis', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Attribute(value=Constant(value='cp{version}{debug}{pymalloc}{ucs4}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='debug', value=Name(id='debug', ctx=Load())), keyword(arg='pymalloc', value=Name(id='pymalloc', ctx=Load())), keyword(arg='ucs4', value=Name(id='ucs4', ctx=Load()))])], keywords=[])), Return(value=Name(id='abis', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='cpython_tags', args=arguments(posonlyargs=[], args=[arg(arg='python_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PythonVersion', ctx=Load()), ctx=Load())), arg(arg='abis', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n    Yields the tags for a CPython interpreter.\n\n    The tags consist of:\n    - cp<python_version>-<abi>-<platform>\n    - cp<python_version>-abi3-<platform>\n    - cp<python_version>-none-<platform>\n    - cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.\n\n    If python_version only specifies a major version then user-provided ABIs and\n    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    ")), If(test=UnaryOp(op=Not(), operand=Name(id='python_version', ctx=Load())), body=[Assign(targets=[Name(id='python_version', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='interpreter', ctx=Store())], value=JoinedStr(values=[Constant(value='cp'), FormattedValue(value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Subscript(value=Name(id='python_version', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]), conversion=-1)])), If(test=Compare(left=Name(id='abis', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='abis', ctx=Store())], value=Call(func=Name(id='_cpython_abis', ctx=Load()), args=[Name(id='python_version', ctx=Load()), Name(id='warn', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='abis', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='abis', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='abis', ctx=Load())], keywords=[])), For(target=Name(id='explicit_abi', ctx=Store()), iter=Tuple(elts=[Constant(value='abi3'), Constant(value='none')], ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='abis', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='explicit_abi', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='platforms', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='platforms', ctx=Load()), Call(func=Name(id='platform_tags', ctx=Load()), args=[], keywords=[])])], keywords=[])), For(target=Name(id='abi', ctx=Store()), iter=Name(id='abis', ctx=Load()), body=[For(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Name(id='abi', ctx=Load()), Name(id='platform_', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), If(test=Call(func=Name(id='_abi3_applies', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=GeneratorExp(elt=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Constant(value='abi3'), Name(id='platform_', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), ifs=[], is_async=0)])))], orelse=[]), Expr(value=YieldFrom(value=GeneratorExp(elt=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Constant(value='none'), Name(id='platform_', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), ifs=[], is_async=0)]))), If(test=Call(func=Name(id='_abi3_applies', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), body=[For(target=Name(id='minor_version', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='python_version', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[For(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), body=[Assign(targets=[Name(id='interpreter', ctx=Store())], value=Call(func=Attribute(value=Constant(value='cp{version}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='version', value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='python_version', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='minor_version', ctx=Load())], ctx=Load())], keywords=[]))])), Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Constant(value='abi3'), Name(id='platform_', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())), FunctionDef(name='_generic_abi', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the ABI tag based on EXT_SUFFIX.\n    ')), Assign(targets=[Name(id='ext_suffix', ctx=Store())], value=Call(func=Name(id='_get_config_var', ctx=Load()), args=[Constant(value='EXT_SUFFIX')], keywords=[keyword(arg='warn', value=Constant(value=True))])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ext_suffix', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Compare(left=Subscript(value=Name(id='ext_suffix', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='.')])]), body=[Raise(exc=Call(func=Name(id='SystemError', ctx=Load()), args=[Constant(value="invalid sysconfig.get_config_var('EXT_SUFFIX')")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='ext_suffix', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Return(value=Call(func=Name(id='_cpython_abis', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='soabi', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='cpython')], keywords=[]), body=[Assign(targets=[Name(id='abi', ctx=Store())], value=BinOp(left=Constant(value='cp'), op=Add(), right=Subscript(value=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=1), ctx=Load())))], orelse=[If(test=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='cp')], keywords=[]), body=[Assign(targets=[Name(id='abi', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pypy')], keywords=[]), body=[Assign(targets=[Name(id='abi', ctx=Store())], value=Call(func=Attribute(value=Constant(value='-'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='graalpy')], keywords=[]), body=[Assign(targets=[Name(id='abi', ctx=Store())], value=Call(func=Attribute(value=Constant(value='-'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='soabi', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Slice(upper=Constant(value=3)), ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='soabi', ctx=Load()), body=[Assign(targets=[Name(id='abi', ctx=Store())], value=Name(id='soabi', ctx=Load()))], orelse=[Return(value=List(elts=[], ctx=Load()))])])])])]), Return(value=List(elts=[Call(func=Name(id='_normalize_string', ctx=Load()), args=[Name(id='abi', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='generic_tags', args=arguments(posonlyargs=[], args=[arg(arg='interpreter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='abis', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Yields the tags for a generic interpreter.\n\n    The tags consist of:\n    - <interpreter>-<abi>-<platform>\n\n    The "none" ABI will be added if it was not explicitly provided.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='interpreter', ctx=Load())), body=[Assign(targets=[Name(id='interp_name', ctx=Store())], value=Call(func=Name(id='interpreter_name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='interp_version', ctx=Store())], value=Call(func=Name(id='interpreter_version', ctx=Load()), args=[], keywords=[keyword(arg='warn', value=Name(id='warn', ctx=Load()))])), Assign(targets=[Name(id='interpreter', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[List(elts=[Name(id='interp_name', ctx=Load()), Name(id='interp_version', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='abis', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='abis', ctx=Store())], value=Call(func=Name(id='_generic_abi', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='abis', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='abis', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='platforms', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='platforms', ctx=Load()), Call(func=Name(id='platform_tags', ctx=Load()), args=[], keywords=[])])], keywords=[])), If(test=Compare(left=Constant(value='none'), ops=[NotIn()], comparators=[Name(id='abis', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='abis', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='none')], keywords=[]))], orelse=[]), For(target=Name(id='abi', ctx=Store()), iter=Name(id='abis', ctx=Load()), body=[For(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Name(id='abi', ctx=Load()), Name(id='platform_', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())), FunctionDef(name='_py_interpreter_range', args=arguments(posonlyargs=[], args=[arg(arg='py_version', annotation=Name(id='PythonVersion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Yields Python versions in descending order.\n\n    After the latest version, the major-only version will be yielded, and then\n    all previous versions of that major version.\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='py_version', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Yield(value=JoinedStr(values=[Constant(value='py'), FormattedValue(value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Subscript(value=Name(id='py_version', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]), conversion=-1)])))], orelse=[]), Expr(value=Yield(value=JoinedStr(values=[Constant(value='py'), FormattedValue(value=Subscript(value=Name(id='py_version', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1)]))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='py_version', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[For(target=Name(id='minor', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='py_version', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Expr(value=Yield(value=JoinedStr(values=[Constant(value='py'), FormattedValue(value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='py_version', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='minor', ctx=Load())], ctx=Load())], keywords=[]), conversion=-1)])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='compatible_tags', args=arguments(posonlyargs=[], args=[arg(arg='python_version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PythonVersion', ctx=Load()), ctx=Load())), arg(arg='interpreter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Yields the sequence of tags that are compatible with a specific version of Python.\n\n    The tags consist of:\n    - py*-none-<platform>\n    - <interpreter>-none-any  # ... if `interpreter` is provided.\n    - py*-none-any\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='python_version', ctx=Load())), body=[Assign(targets=[Name(id='python_version', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='platforms', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='platforms', ctx=Load()), Call(func=Name(id='platform_tags', ctx=Load()), args=[], keywords=[])])], keywords=[])), For(target=Name(id='version', ctx=Store()), iter=Call(func=Name(id='_py_interpreter_range', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), body=[For(target=Name(id='platform_', ctx=Store()), iter=Name(id='platforms', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='version', ctx=Load()), Constant(value='none'), Name(id='platform_', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), If(test=Name(id='interpreter', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='interpreter', ctx=Load()), Constant(value='none'), Constant(value='any')], keywords=[])))], orelse=[]), For(target=Name(id='version', ctx=Store()), iter=Call(func=Name(id='_py_interpreter_range', ctx=Load()), args=[Name(id='python_version', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='Tag', ctx=Load()), args=[Name(id='version', ctx=Load()), Constant(value='none'), Constant(value='any')], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())), FunctionDef(name='_mac_arch', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load())), arg(arg='is_32bit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_32_BIT_INTERPRETER', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='is_32bit', ctx=Load())), body=[Return(value=Name(id='arch', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='ppc')], keywords=[]), body=[Return(value=Constant(value='ppc'))], orelse=[]), Return(value=Constant(value='i386'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_mac_binary_formats', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='MacVersion', ctx=Load())), arg(arg='cpu_arch', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='formats', ctx=Store())], value=List(elts=[Name(id='cpu_arch', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86_64')]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=4)], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='intel'), Constant(value='fat64'), Constant(value='fat32')], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='i386')]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=4)], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='intel'), Constant(value='fat32'), Constant(value='fat')], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ppc64')]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[Gt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=5)], ctx=Load())]), Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=4)], ctx=Load())])]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='fat64')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ppc')]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Gt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=6)], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='fat32'), Constant(value='fat')], ctx=Load())], keywords=[]))], orelse=[])])])]), If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='arm64'), Constant(value='x86_64')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='universal2')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cpu_arch', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='x86_64'), Constant(value='i386'), Constant(value='ppc64'), Constant(value='ppc'), Constant(value='intel')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='universal')], keywords=[]))], orelse=[]), Return(value=Name(id='formats', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='mac_platforms', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='MacVersion', ctx=Load()), ctx=Load())), arg(arg='arch', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Yields the platform tags for a macOS system.\n\n    The `version` parameter is a two-item tuple specifying the macOS version to\n    generate platform tags for. The `arch` parameter is the CPU architecture to\n    generate platform tags for. Both parameters default to the appropriate value\n    for the current system.\n    ')), Assign(targets=[Tuple(elts=[Name(id='version_str', ctx=Store()), Name(id='_', ctx=Store()), Name(id='cpu_arch', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='MacVersion'), Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=16)], ctx=Load())]), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-sS'), Constant(value='-c'), Constant(value='import platform; print(platform.mac_ver()[0])')], ctx=Load())], keywords=[keyword(arg='check', value=Constant(value=True)), keyword(arg='env', value=Dict(keys=[Constant(value='SYSTEM_VERSION_COMPAT')], values=[Constant(value='0')])), keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='universal_newlines', value=Constant(value=True))]), attr='stdout', ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='MacVersion'), Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='version', ctx=Store())], value=Name(id='version', ctx=Load()))]), If(test=Compare(left=Name(id='arch', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='arch', ctx=Store())], value=Call(func=Name(id='_mac_arch', ctx=Load()), args=[Name(id='cpu_arch', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='arch', ctx=Store())], value=Name(id='arch', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Tuple(elts=[Constant(value=10), Constant(value=0)], ctx=Load()), ops=[LtE()], comparators=[Name(id='version', ctx=Load())]), Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=11), Constant(value=0)], ctx=Load())])]), body=[For(target=Name(id='minor_version', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=1), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='compat_version', ctx=Store())], value=Tuple(elts=[Constant(value=10), Name(id='minor_version', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='binary_formats', ctx=Store())], value=Call(func=Name(id='_mac_binary_formats', ctx=Load()), args=[Name(id='compat_version', ctx=Load()), Name(id='arch', ctx=Load())], keywords=[])), For(target=Name(id='binary_format', ctx=Store()), iter=Name(id='binary_formats', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='macosx_{major}_{minor}_{binary_format}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Constant(value=10)), keyword(arg='minor', value=Name(id='minor_version', ctx=Load())), keyword(arg='binary_format', value=Name(id='binary_format', ctx=Load()))])))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=11), Constant(value=0)], ctx=Load())]), body=[For(target=Name(id='major_version', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=10), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='compat_version', ctx=Store())], value=Tuple(elts=[Name(id='major_version', ctx=Load()), Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='binary_formats', ctx=Store())], value=Call(func=Name(id='_mac_binary_formats', ctx=Load()), args=[Name(id='compat_version', ctx=Load()), Name(id='arch', ctx=Load())], keywords=[])), For(target=Name(id='binary_format', ctx=Store()), iter=Name(id='binary_formats', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='macosx_{major}_{minor}_{binary_format}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Name(id='major_version', ctx=Load())), keyword(arg='minor', value=Constant(value=0)), keyword(arg='binary_format', value=Name(id='binary_format', ctx=Load()))])))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=11), Constant(value=0)], ctx=Load())]), body=[If(test=Compare(left=Name(id='arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86_64')]), body=[For(target=Name(id='minor_version', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=16), Constant(value=3), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='compat_version', ctx=Store())], value=Tuple(elts=[Constant(value=10), Name(id='minor_version', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='binary_formats', ctx=Store())], value=Call(func=Name(id='_mac_binary_formats', ctx=Load()), args=[Name(id='compat_version', ctx=Load()), Name(id='arch', ctx=Load())], keywords=[])), For(target=Name(id='binary_format', ctx=Store()), iter=Name(id='binary_formats', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='macosx_{major}_{minor}_{binary_format}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Subscript(value=Name(id='compat_version', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='minor', value=Subscript(value=Name(id='compat_version', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='binary_format', value=Name(id='binary_format', ctx=Load()))])))], orelse=[])], orelse=[])], orelse=[For(target=Name(id='minor_version', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=16), Constant(value=3), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='compat_version', ctx=Store())], value=Tuple(elts=[Constant(value=10), Name(id='minor_version', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='binary_format', ctx=Store())], value=Constant(value='universal2')), Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='macosx_{major}_{minor}_{binary_format}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Subscript(value=Name(id='compat_version', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='minor', value=Subscript(value=Name(id='compat_version', ctx=Load()), slice=Constant(value=1), ctx=Load())), keyword(arg='binary_format', value=Name(id='binary_format', ctx=Load()))])))], orelse=[])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_linux_platforms', args=arguments(posonlyargs=[], args=[arg(arg='is_32bit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_32_BIT_INTERPRETER', ctx=Load())]), body=[Assign(targets=[Name(id='linux', ctx=Store())], value=Call(func=Name(id='_normalize_string', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_platform', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Name(id='is_32bit', ctx=Load()), body=[If(test=Compare(left=Name(id='linux', ctx=Load()), ops=[Eq()], comparators=[Constant(value='linux_x86_64')]), body=[Assign(targets=[Name(id='linux', ctx=Store())], value=Constant(value='linux_i686'))], orelse=[If(test=Compare(left=Name(id='linux', ctx=Load()), ops=[Eq()], comparators=[Constant(value='linux_aarch64')]), body=[Assign(targets=[Name(id='linux', ctx=Store())], value=Constant(value='linux_armv7l'))], orelse=[])])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='arch', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='linux', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_'), Constant(value=1)], keywords=[])), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='_manylinux', ctx=Load()), attr='platform_tags', ctx=Load()), args=[Name(id='linux', ctx=Load()), Name(id='arch', ctx=Load())], keywords=[]))), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='_musllinux', ctx=Load()), attr='platform_tags', ctx=Load()), args=[Name(id='arch', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Name(id='linux', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_generic_platforms', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Call(func=Name(id='_normalize_string', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_platform', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='platform_tags', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Provides the platform tags for this installation.\n    ')), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Darwin')]), body=[Return(value=Call(func=Name(id='mac_platforms', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Linux')]), body=[Return(value=Call(func=Name(id='_linux_platforms', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Name(id='_generic_platforms', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='interpreter_name', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns the name of the running interpreter.\n\n    Some implementations have a reserved, two-letter abbreviation which will\n    be returned when appropriate.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load())), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='INTERPRETER_SHORT_NAMES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Name(id='name', ctx=Load())]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='interpreter_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='\n    Returns the version of the running interpreter.\n    ')), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='_get_config_var', ctx=Load()), args=[Constant(value='py_version_nodot')], keywords=[keyword(arg='warn', value=Name(id='warn', ctx=Load()))])), If(test=Name(id='version', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='_version_nodot', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]))]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_version_nodot', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='PythonVersion', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='version', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='sys_tags', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='warn', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='\n    Returns the sequence of tag triples for the running interpreter.\n\n    The order of the sequence corresponds to priority order for the\n    interpreter, from most to least important.\n    ')), Assign(targets=[Name(id='interp_name', ctx=Store())], value=Call(func=Name(id='interpreter_name', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='interp_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cp')]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='cpython_tags', ctx=Load()), args=[], keywords=[keyword(arg='warn', value=Name(id='warn', ctx=Load()))])))], orelse=[Expr(value=YieldFrom(value=Call(func=Name(id='generic_tags', ctx=Load()), args=[], keywords=[])))]), If(test=Compare(left=Name(id='interp_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pp')]), body=[Assign(targets=[Name(id='interp', ctx=Store())], value=Constant(value='pp3'))], orelse=[If(test=Compare(left=Name(id='interp_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cp')]), body=[Assign(targets=[Name(id='interp', ctx=Store())], value=BinOp(left=Constant(value='cp'), op=Add(), right=Call(func=Name(id='interpreter_version', ctx=Load()), args=[], keywords=[keyword(arg='warn', value=Name(id='warn', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='interp', ctx=Store())], value=Constant(value=None))])]), Expr(value=YieldFrom(value=Call(func=Name(id='compatible_tags', ctx=Load()), args=[], keywords=[keyword(arg='interpreter', value=Name(id='interp', ctx=Load()))])))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], type_ignores=[])