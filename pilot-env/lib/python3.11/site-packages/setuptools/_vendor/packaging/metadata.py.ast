Module(body=[Import(names=[alias(name='email.feedparser')]), Import(names=[alias(name='email.header')]), Import(names=[alias(name='email.message')]), Import(names=[alias(name='email.parser')]), Import(names=[alias(name='email.policy')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing')]), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='TypedDict')], level=0)], orelse=[If(test=Attribute(value=Name(id='typing', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='TypedDict')], level=0)], orelse=[Try(body=[ImportFrom(module='typing_extensions', names=[alias(name='TypedDict')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='TypedDict', bases=[], keywords=[], body=[FunctionDef(name='__init_subclass__', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='_kwargs'), defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[])])]), ClassDef(name='RawMetadata', bases=[Name(id='TypedDict', ctx=Load())], keywords=[keyword(arg='total', value=Constant(value=False))], body=[Expr(value=Constant(value='A dictionary of raw core metadata.\n\n    Each field in core metadata maps to a key of this dictionary (when data is\n    provided). The key is lower-case and underscores are used instead of dashes\n    compared to the equivalent core metadata field. Any core metadata field that\n    can be specified multiple times or can hold multiple values in a single\n    field have a key with a plural name.\n\n    Core metadata fields that can be specified multiple times are stored as a\n    list or dict depending on which is appropriate for the field. Any fields\n    which hold multiple values in a single field are stored as a list.\n\n    ')), AnnAssign(target=Name(id='metadata_version', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='platforms', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='keywords', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='home_page', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='author', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='author_email', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='license', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='supported_platforms', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='download_url', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='classifiers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='requires', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='provides', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='obsoletes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='maintainer', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='maintainer_email', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='provides_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='obsoletes_dist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_python', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='requires_external', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='project_urls', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='description_content_type', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='provides_extra', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='dynamic', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='_STRING_FIELDS', ctx=Store())], value=Set(elts=[Constant(value='author'), Constant(value='author_email'), Constant(value='description'), Constant(value='description_content_type'), Constant(value='download_url'), Constant(value='home_page'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer_email'), Constant(value='metadata_version'), Constant(value='name'), Constant(value='requires_python'), Constant(value='summary'), Constant(value='version')])), Assign(targets=[Name(id='_LIST_STRING_FIELDS', ctx=Store())], value=Set(elts=[Constant(value='classifiers'), Constant(value='dynamic'), Constant(value='obsoletes'), Constant(value='obsoletes_dist'), Constant(value='platforms'), Constant(value='provides'), Constant(value='provides_dist'), Constant(value='provides_extra'), Constant(value='requires'), Constant(value='requires_dist'), Constant(value='requires_external'), Constant(value='supported_platforms')])), FunctionDef(name='_parse_keywords', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split a string of comma-separate keyboards into a list of keywords.')), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_parse_project_urls', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a list of label/URL string pairings separated by a comma.')), Assign(targets=[Name(id='urls', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='pair', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pair', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=','), Constant(value=1)], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value='')], ctx=Load()), op=Mult(), right=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value=2), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], keywords=[]))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='label', ctx=Store()), Name(id='url', ctx=Store())], ctx=Store())], value=Name(id='parts', ctx=Load())), If(test=Compare(left=Name(id='label', ctx=Load()), ops=[In()], comparators=[Name(id='urls', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='duplicate labels in project urls')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='urls', ctx=Load()), slice=Name(id='label', ctx=Load()), ctx=Store())], value=Name(id='url', ctx=Load()))], orelse=[]), Return(value=Name(id='urls', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_payload', args=arguments(posonlyargs=[], args=[arg(arg='msg', annotation=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load())), arg(arg='source', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the body of the message.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='payload', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[]), simple=1), Return(value=Name(id='payload', ctx=Load()))], orelse=[AnnAssign(target=Name(id='bpayload', ctx=Store()), annotation=Name(id='bytes', ctx=Load()), value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[keyword(arg='decode', value=Constant(value=True))]), simple=1), Try(body=[Return(value=Call(func=Attribute(value=Name(id='bpayload', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8'), Constant(value='strict')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='payload in an invalid encoding')], keywords=[]))])], orelse=[], finalbody=[])])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Store())], value=Dict(keys=[Constant(value='author'), Constant(value='author-email'), Constant(value='classifier'), Constant(value='description'), Constant(value='description-content-type'), Constant(value='download-url'), Constant(value='dynamic'), Constant(value='home-page'), Constant(value='keywords'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer-email'), Constant(value='metadata-version'), Constant(value='name'), Constant(value='obsoletes'), Constant(value='obsoletes-dist'), Constant(value='platform'), Constant(value='project-url'), Constant(value='provides'), Constant(value='provides-dist'), Constant(value='provides-extra'), Constant(value='requires'), Constant(value='requires-dist'), Constant(value='requires-external'), Constant(value='requires-python'), Constant(value='summary'), Constant(value='supported-platform'), Constant(value='version')], values=[Constant(value='author'), Constant(value='author_email'), Constant(value='classifiers'), Constant(value='description'), Constant(value='description_content_type'), Constant(value='download_url'), Constant(value='dynamic'), Constant(value='home_page'), Constant(value='keywords'), Constant(value='license'), Constant(value='maintainer'), Constant(value='maintainer_email'), Constant(value='metadata_version'), Constant(value='name'), Constant(value='obsoletes'), Constant(value='obsoletes_dist'), Constant(value='platforms'), Constant(value='project_urls'), Constant(value='provides'), Constant(value='provides_dist'), Constant(value='provides_extra'), Constant(value='requires'), Constant(value='requires_dist'), Constant(value='requires_external'), Constant(value='requires_python'), Constant(value='summary'), Constant(value='supported_platforms'), Constant(value='version')])), FunctionDef(name='parse_email', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse a distribution's metadata.\n\n    This function returns a two-item tuple of dicts. The first dict is of\n    recognized fields from the core metadata specification. Fields that can be\n    parsed and translated into Python's built-in types are converted\n    appropriately. All other fields are left as-is. Fields that are allowed to\n    appear multiple times are stored as lists.\n\n    The second dict contains all other fields from the metadata. This includes\n    any unrecognized fields. It also includes any fields which are expected to\n    be parsed into a built-in type but were not formatted appropriately. Finally,\n    any fields that are expected to appear only once but are repeated are\n    included in this dict.\n\n    ")), AnnAssign(target=Name(id='raw', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='unparsed', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='parser', ctx=Load()), attr='Parser', ctx=Load()), args=[], keywords=[keyword(arg='policy', value=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='policy', ctx=Load()), attr='compat32', ctx=Load()))]), attr='parsestr', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='parser', ctx=Load()), attr='BytesParser', ctx=Load()), args=[], keywords=[keyword(arg='policy', value=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='policy', ctx=Load()), attr='compat32', ctx=Load()))]), attr='parsebytes', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))]), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='frozenset', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_all', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='valid_encoding', ctx=Store())], value=Constant(value=True)), For(target=Name(id='h', ctx=Store()), iter=Name(id='headers', ctx=Load()), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='h', ctx=Load()), Tuple(elts=[Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='Header', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='h', ctx=Load()), Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='Header', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='chunks', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='bin', ctx=Store()), Name(id='encoding', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='decode_header', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='bin', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8'), Constant(value='strict')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='latin1')), Assign(targets=[Name(id='valid_encoding', ctx=Store())], value=Constant(value=False))])], orelse=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='utf8'))], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='chunks', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='bin', ctx=Load()), Name(id='encoding', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='header', ctx=Load()), attr='make_header', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='valid_encoding', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Continue()], orelse=[]), Assign(targets=[Name(id='raw_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='_EMAIL_TO_RAW_MAPPING', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='raw_name', ctx=Load()), ops=[In()], comparators=[Name(id='_STRING_FIELDS', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[In()], comparators=[Name(id='_LIST_STRING_FIELDS', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='raw_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='keywords')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_parse_keywords', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='raw_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='project_urls')]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Name(id='raw_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_parse_project_urls', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Subscript(value=Name(id='unparsed', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])])])])], orelse=[]), Try(body=[Assign(targets=[Name(id='payload', ctx=Store())], value=Call(func=Name(id='_get_payload', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='unparsed', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='description'), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[keyword(arg='decode', value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]))])], keywords=[]))])], orelse=[If(test=Name(id='payload', ctx=Load()), body=[If(test=Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='raw', ctx=Load())]), body=[Assign(targets=[Name(id='description_header', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Attribute(value=Name(id='raw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='description')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='unparsed', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='description'), List(elts=[], ctx=Load())], keywords=[]), attr='extend', ctx=Load()), args=[List(elts=[Name(id='description_header', ctx=Load()), Name(id='payload', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='unparsed', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='unparsed', ctx=Load()), slice=Constant(value='description'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='payload', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='raw', ctx=Load()), slice=Constant(value='description'), ctx=Store())], value=Name(id='payload', ctx=Load()))])])], orelse=[])], finalbody=[]), Return(value=Tuple(elts=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='RawMetadata', ctx=Load()), Name(id='raw', ctx=Load())], keywords=[]), Name(id='unparsed', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='RawMetadata', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])