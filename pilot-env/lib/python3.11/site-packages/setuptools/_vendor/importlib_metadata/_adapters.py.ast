Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='re')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='email.message')]), ImportFrom(module='_text', names=[alias(name='FoldedCase')], level=1), ImportFrom(module='_compat', names=[alias(name='pypy_partial')], level=1), Assign(targets=[Name(id='_warn', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), Constant(value='Implicit None on return values is deprecated and will raise KeyErrors.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Call(func=Name(id='pypy_partial', ctx=Load()), args=[Constant(value=2)], keywords=[]))])), ClassDef(name='Message', bases=[Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='multiple_use_keys', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='FoldedCase', ctx=Load()), List(elts=[Constant(value='Classifier'), Constant(value='Obsoletes-Dist'), Constant(value='Platform'), Constant(value='Project-URL'), Constant(value='Provides-Dist'), Constant(value='Provides-Extra'), Constant(value='Requires-Dist'), Constant(value='Requires-External'), Constant(value='Supported-Platform'), Constant(value='Dynamic')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Constant(value='\n    Keys that may be indicated multiple times per PEP 566.\n    ')), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='orig', annotation=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Call(func=Name(id='vars', ctx=Load()), args=[Name(id='orig', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_repair_headers', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__iter__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Warn users that a ``KeyError`` can be expected when a\n        mising key is supplied. Ref python/importlib_metadata#371.\n        ')), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__getitem__', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='res', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_warn', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='_repair_headers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='redent', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Correct for RFC822 indentation')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='value', ctx=Load())), Compare(left=Constant(value='\n'), ops=[NotIn()], comparators=[Name(id='value', ctx=Load())])]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=8)), op=Add(), right=Name(id='value', ctx=Load()))], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='headers', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='key', ctx=Load()), Call(func=Name(id='redent', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Subscript(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), slice=Constant(value='_headers'), ctx=Load()), ifs=[], is_async=0)])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_payload', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='Description'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Convert PackageMetadata to a JSON-compatible format\n        per PEP 0566.\n        ')), FunctionDef(name='transform', args=arguments(posonlyargs=[], args=[arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=IfExp(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='multiple_use_keys', ctx=Load())]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_all', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), orelse=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Keywords')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\s+'), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tk', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), Return(value=Tuple(elts=[Name(id='tk', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], decorator_list=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='transform', ctx=Load()), Call(func=Name(id='map', ctx=Load()), args=[Name(id='FoldedCase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[])], type_ignores=[])