Module(body=[ImportFrom(module='distutils.dep_util', names=[alias(name='newer_group')], level=0), FunctionDef(name='newer_pairwise_group', args=arguments(posonlyargs=[], args=[arg(arg='sources_groups'), arg(arg='targets')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Walk both arguments in parallel, testing if each source group is newer\n    than its corresponding target. Returns a pair of lists (sources_groups,\n    targets) where sources is newer than target, according to the semantics\n    of 'newer_group()'.\n    ")), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sources_groups', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='targets', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="'sources_group' and 'targets' must be the same length")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='n_sources', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='n_targets', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sources_groups', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Call(func=Name(id='newer_group', ctx=Load()), args=[Subscript(value=Name(id='sources_groups', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='targets', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='n_sources', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='sources_groups', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='n_targets', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='targets', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='n_sources', ctx=Load()), Name(id='n_targets', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])