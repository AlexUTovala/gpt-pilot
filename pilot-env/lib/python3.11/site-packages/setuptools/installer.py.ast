Module(body=[Import(names=[alias(name='glob')]), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='distutils', names=[alias(name='log')], level=0), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsError')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(names=[alias(name='_reqs')], level=1), ImportFrom(module='wheel', names=[alias(name='Wheel')], level=1), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=1), FunctionDef(name='_fixup_find_links', args=arguments(posonlyargs=[], args=[arg(arg='find_links')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure find-links option end-up being a list of strings.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='find_links', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='find_links', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='find_links', ctx=Load()), Tuple(elts=[Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='find_links', ctx=Load()))], decorator_list=[]), FunctionDef(name='fetch_build_egg', args=arguments(posonlyargs=[], args=[arg(arg='dist'), arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fetch an egg needed for building.\n\n    Use pip/wheel to fetch/build a wheel.')), Expr(value=Call(func=Attribute(value=Name(id='_DeprecatedInstaller', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='_warn_wheel_not_available', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_fetch_build_egg_no_warn', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='req', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_fetch_build_eggs', args=arguments(posonlyargs=[], args=[arg(arg='dist'), arg(arg='requires')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pkg_resources')]), Expr(value=Call(func=Attribute(value=Name(id='_DeprecatedInstaller', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[keyword(arg='stacklevel', value=Constant(value=3))])), Expr(value=Call(func=Name(id='_warn_wheel_not_available', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resolved_dists', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='working_set', ctx=Load()), attr='resolve', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_reqs', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='requires', ctx=Load()), Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='Requirement', ctx=Load())], keywords=[])], keywords=[keyword(arg='installer', value=Call(func=Name(id='partial', ctx=Load()), args=[Name(id='_fetch_build_egg_no_warn', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[])), keyword(arg='replace_conflicting', value=Constant(value=True))])), For(target=Name(id='dist', ctx=Store()), iter=Name(id='resolved_dists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='working_set', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[keyword(arg='replace', value=Constant(value=True))]))], orelse=[]), Return(value=Name(id='resolved_dists', ctx=Load()))], decorator_list=[]), FunctionDef(name='_fetch_build_egg_no_warn', args=arguments(posonlyargs=[], args=[arg(arg='dist'), arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pkg_resources')]), Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='strip_marker', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Constant(value='easy_install')], keywords=[])), If(test=Compare(left=Constant(value='allow_hosts'), ops=[In()], comparators=[Name(id='opts', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Constant(value='the `allow-hosts` option is not supported when using pip to install requirements.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='quiet', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='PIP_QUIET'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Compare(left=Constant(value='PIP_VERBOSE'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])])), If(test=Compare(left=Constant(value='PIP_INDEX_URL'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='index_url', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Constant(value='index_url'), ops=[In()], comparators=[Name(id='opts', ctx=Load())]), body=[Assign(targets=[Name(id='index_url', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='opts', ctx=Load()), slice=Constant(value='index_url'), ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Name(id='index_url', ctx=Store())], value=Constant(value=None))])]), Assign(targets=[Name(id='find_links', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='find_links'), ops=[In()], comparators=[Name(id='opts', ctx=Load())]), body=Subscript(value=Call(func=Name(id='_fixup_find_links', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='opts', ctx=Load()), slice=Constant(value='find_links'), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), slice=Slice(), ctx=Load()), orelse=List(elts=[], ctx=Load()))), If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='dependency_links', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='find_links', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='dependency_links', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='eggs_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='get_egg_cache_dir', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='environment', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='Environment', ctx=Load()), args=[], keywords=[])), For(target=Name(id='egg_dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='find_distributions', ctx=Load()), args=[Name(id='eggs_dir', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='egg_dist', ctx=Load()), ops=[In()], comparators=[Name(id='req', ctx=Load())]), Call(func=Attribute(value=Name(id='environment', ctx=Load()), attr='can_add', ctx=Load()), args=[Name(id='egg_dist', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='egg_dist', ctx=Load()))], orelse=[])], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='TemporaryDirectory', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='tmpdir', ctx=Store()))], body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='pip'), Constant(value='--disable-pip-version-check'), Constant(value='wheel'), Constant(value='--no-deps'), Constant(value='-w'), Name(id='tmpdir', ctx=Load())], ctx=Load())), If(test=Name(id='quiet', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--quiet')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='index_url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Constant(value='--index-url'), Name(id='index_url', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='link', ctx=Store()), iter=BoolOp(op=Or(), values=[Name(id='find_links', ctx=Load()), List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Constant(value='--find-links'), Name(id='link', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])])], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_call', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='tmpdir', ctx=Load()), Constant(value='*.whl')], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist_location', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='eggs_dir', ctx=Load()), Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='egg_name', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='install_as_egg', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist_metadata', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='PathMetadata', ctx=Load()), args=[Name(id='dist_location', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dist_location', ctx=Load()), Constant(value='EGG-INFO')], keywords=[])], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='Distribution', ctx=Load()), attr='from_filename', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[keyword(arg='metadata', value=Name(id='dist_metadata', ctx=Load()))])), Return(value=Name(id='dist', ctx=Load()))])], decorator_list=[]), FunctionDef(name='strip_marker', args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a new requirement without the environment marker to avoid\n    calling pip with something like `babel; extra == "i18n"`, which\n    would always be ignored.\n    ')), Import(names=[alias(name='pkg_resources')]), Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='Requirement', ctx=Load()), attr='parse', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='req', ctx=Load()))], decorator_list=[]), FunctionDef(name='_warn_wheel_not_available', args=arguments(posonlyargs=[], args=[arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='pkg_resources')]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Constant(value='wheel')], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='DistributionNotFound', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='WARNING: The wheel package is not available.'), Attribute(value=Name(id='log', ctx=Load()), attr='WARN', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), ClassDef(name='_DeprecatedInstaller', bases=[Name(id='SetuptoolsDeprecationWarning', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_SUMMARY', ctx=Store())], value=Constant(value='setuptools.installer and fetch_build_eggs are deprecated.')), Assign(targets=[Name(id='_DETAILS', ctx=Store())], value=Constant(value='\n    Requirements should be satisfied by a PEP 517 installer.\n    If you are using pip, you can try `pip install --use-pep517`.\n    '))], decorator_list=[])], type_ignores=[])