Module(body=[Expr(value=Constant(value='distutils.dir_util\n\nUtility functions for manipulating directories and directory trees.')), Import(names=[alias(name='os')]), Import(names=[alias(name='errno')]), ImportFrom(module='errors', names=[alias(name='DistutilsInternalError'), alias(name='DistutilsFileError')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), Assign(targets=[Name(id='_path_created', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='mkpath', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='mode'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=511), Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, print a one-line summary of each mkdir to stdout.\n    Return the list of directories actually created.\n\n    os.makedirs is not used because:\n\n    a) It's new to Python 1.5.2, and\n    b) it blows up if the directory already exists (in which case it should\n       silently succeed).\n    ")), Global(names=['_path_created']), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsInternalError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="mkpath: 'name' must be a string (got {!r})"), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='created_dirs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]), body=[Return(value=Name(id='created_dirs', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='_path_created', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=Name(id='created_dirs', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tails', ctx=Store())], value=List(elts=[Name(id='tail', ctx=Load())], ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='head', ctx=Load()), Name(id='tail', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tails', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='tail', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='d', ctx=Store()), iter=Name(id='tails', ctx=Load()), body=[Assign(targets=[Name(id='head', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='head', ctx=Load()), Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='abs_head', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='_path_created', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='abs_head', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='creating %s'), Name(id='head', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='head', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[])])), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not create '{}': {}"), attr='format', ctx=Load()), args=[Name(id='head', ctx=Load()), Subscript(value=Attribute(value=Name(id='exc', ctx=Load()), attr='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='created_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='_path_created', ctx=Load()), slice=Name(id='abs_head', ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[]), Return(value=Name(id='created_dirs', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_tree', args=arguments(posonlyargs=[], args=[arg(arg='base_dir'), arg(arg='files'), arg(arg='mode'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=511), Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Create all the empty directories under 'base_dir' needed to put 'files'\n    there.\n\n    'base_dir' is just the name of a directory which doesn't necessarily\n    exist yet; 'files' is a list of filenames to be interpreted relative to\n    'base_dir'.  'base_dir' + the directory portion of every file in 'files'\n    will be created if it doesn't already exist.  'mode', 'verbose' and\n    'dry_run' flags are as for 'mkpath()'.\n    ")), Assign(targets=[Name(id='need_dir', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='need_dir', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='dir', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='need_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='mkpath', ctx=Load()), args=[Name(id='dir', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='copy_tree', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst'), arg(arg='preserve_mode'), arg(arg='preserve_times'), arg(arg='preserve_symlinks'), arg(arg='update'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Copy an entire directory tree 'src' to a new location 'dst'.\n\n    Both 'src' and 'dst' must be directory names.  If 'src' is not a\n    directory, raise DistutilsFileError.  If 'dst' does not exist, it is\n    created with 'mkpath()'.  The end result of the copy is that every\n    file in 'src' is copied to 'dst', and directories under 'src' are\n    recursively copied to 'dst'.  Return the list of files that were\n    copied or might have been copied, using their output name.  The\n    return value is unaffected by 'update' or 'dry_run': it is simply\n    the list of all files under 'src', with the names changed to be\n    under 'dst'.\n\n    'preserve_mode' and 'preserve_times' are the same as for\n    'copy_file'; note that they only apply to regular files, not to\n    directories.  If 'preserve_symlinks' is true, symlinks will be\n    copied as symlinks (on platforms that support them!); otherwise\n    (the default), the destination of the symlink will be copied.\n    'update' and 'verbose' are the same as for 'copy_file'.\n    ")), ImportFrom(module='distutils.file_util', names=[alias(name='copy_file')], level=0), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="cannot copy tree '%s': not a directory"), op=Mod(), right=Name(id='src', ctx=Load()))], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[If(test=Name(id='dry_run', ctx=Load()), body=[Assign(targets=[Name(id='names', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="error listing files in '{}': {}"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Expr(value=Call(func=Name(id='mkpath', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[keyword(arg='verbose', value=Name(id='verbose', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='outputs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='n', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='src_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='n', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dst_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dst', ctx=Load()), Name(id='n', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.nfs')], keywords=[]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='preserve_symlinks', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='src_name', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='link_dest', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='readlink', ctx=Load()), args=[Name(id='src_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='linking %s -> %s'), Name(id='dst_name', ctx=Load()), Name(id='link_dest', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='symlink', ctx=Load()), args=[Name(id='link_dest', ctx=Load()), Name(id='dst_name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst_name', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='src_name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='copy_tree', ctx=Load()), args=[Name(id='src_name', ctx=Load()), Name(id='dst_name', ctx=Load()), Name(id='preserve_mode', ctx=Load()), Name(id='preserve_times', ctx=Load()), Name(id='preserve_symlinks', ctx=Load()), Name(id='update', ctx=Load())], keywords=[keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='copy_file', ctx=Load()), args=[Name(id='src_name', ctx=Load()), Name(id='dst_name', ctx=Load()), Name(id='preserve_mode', ctx=Load()), Name(id='preserve_times', ctx=Load()), Name(id='update', ctx=Load())], keywords=[keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst_name', ctx=Load())], keywords=[]))])])], orelse=[]), Return(value=Name(id='outputs', ctx=Load()))], decorator_list=[]), FunctionDef(name='_build_cmdtuple', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='cmdtuples')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Helper for remove_tree().')), For(target=Name(id='f', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='real_f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='real_f', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='real_f', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Name(id='_build_cmdtuple', ctx=Load()), args=[Name(id='real_f', ctx=Load()), Name(id='cmdtuples', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='cmdtuples', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Name(id='real_f', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmdtuples', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), Name(id='path', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_tree', args=arguments(posonlyargs=[], args=[arg(arg='directory'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    ")), Global(names=['_path_created']), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="removing '%s' (and everything under it)"), Name(id='directory', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='dry_run', ctx=Load()), body=[Return()], orelse=[]), Assign(targets=[Name(id='cmdtuples', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Name(id='_build_cmdtuple', ctx=Load()), args=[Name(id='directory', ctx=Load()), Name(id='cmdtuples', ctx=Load())], keywords=[])), For(target=Name(id='cmd', ctx=Store()), iter=Name(id='cmdtuples', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load()), args=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='abspath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='abspath', ctx=Load()), ops=[In()], comparators=[Name(id='_path_created', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='_path_created', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='abspath', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='error removing %s: %s'), Name(id='directory', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='ensure_relative', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Take the full path 'path', and make it a relative path.\n\n    This is useful to make 'path' the second argument to os.path.join().\n    ")), Assign(targets=[Tuple(elts=[Name(id='drive', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Name(id='drive', ctx=Load()), op=Add(), right=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[])], type_ignores=[])