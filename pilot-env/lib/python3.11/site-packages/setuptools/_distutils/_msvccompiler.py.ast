Module(body=[Expr(value=Constant(value='distutils._msvccompiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor Microsoft Visual Studio 2015.\n\nThe module is compatible with VS 2015 and later. You can find legacy support\nfor older versions in distutils.msvc9compiler and distutils.msvccompiler.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='unittest.mock', asname='mock')]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='ImportError', ctx=Load())], keywords=[]))], body=[Import(names=[alias(name='winreg')])]), ImportFrom(module='errors', names=[alias(name='DistutilsExecError'), alias(name='DistutilsPlatformError'), alias(name='CompileError'), alias(name='LibError'), alias(name='LinkError')], level=1), ImportFrom(module='ccompiler', names=[alias(name='CCompiler'), alias(name='gen_lib_options')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), ImportFrom(module='util', names=[alias(name='get_platform')], level=1), ImportFrom(module='itertools', names=[alias(name='count')], level=0), FunctionDef(name='_find_vc2015', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='OpenKeyEx', ctx=Load()), args=[Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Constant(value='Software\\Microsoft\\VisualStudio\\SxS\\VC7')], keywords=[keyword(arg='access', value=BinOp(left=Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_READ', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_WOW64_32KEY', ctx=Load())))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Visual C++ is not registered')], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='best_version', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='best_dir', ctx=Store())], value=Constant(value=None)), With(items=[withitem(context_expr=Name(id='key', ctx=Load()))], body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='count', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='v', ctx=Store()), Name(id='vc_dir', ctx=Store()), Name(id='vt', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumValue', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='v', ctx=Load()), Compare(left=Name(id='vt', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='winreg', ctx=Load()), attr='REG_SZ', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='vc_dir', ctx=Load())], keywords=[])]), body=[Try(body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14)]), Compare(left=Name(id='version', ctx=Load()), ops=[Gt()], comparators=[Name(id='best_version', ctx=Load())])]), body=[Assign(targets=[Tuple(elts=[Name(id='best_version', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='version', ctx=Load()), Name(id='vc_dir', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='best_version', ctx=Load()), Name(id='best_dir', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_find_vc2017', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns "15, path" based on the result of invoking vswhere.exe\n    If no install is found, returns "None, None"\n\n    The version is returned to avoid unnecessarily changing the function\n    result. It may be ignored when the path is not None.\n\n    If vswhere.exe is not available, by definition, VS 2017 is not\n    installed.\n    ')), Assign(targets=[Name(id='root', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles(x86)')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles')], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='root', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Constant(value='Microsoft Visual Studio'), Constant(value='Installer'), Constant(value='vswhere.exe')], keywords=[]), Constant(value='-latest'), Constant(value='-prerelease'), Constant(value='-requires'), Constant(value='Microsoft.VisualStudio.Component.VC.Tools.x86.x64'), Constant(value='-property'), Constant(value='installationPath'), Constant(value='-products'), Constant(value='*')], ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='mbcs')), keyword(arg='errors', value=Constant(value='strict'))]), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='UnicodeDecodeError', ctx=Load())], ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='VC'), Constant(value='Auxiliary'), Constant(value='Build')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Constant(value=15), Name(id='path', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='PLAT_SPEC_TO_RUNTIME', ctx=Store())], value=Dict(keys=[Constant(value='x86'), Constant(value='x86_amd64'), Constant(value='x86_arm'), Constant(value='x86_arm64')], values=[Constant(value='x86'), Constant(value='x64'), Constant(value='arm'), Constant(value='arm64')])), FunctionDef(name='_find_vcvarsall', args=arguments(posonlyargs=[], args=[arg(arg='plat_spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_find_vc2017', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='best_dir', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='best_version', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_find_vc2015', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='best_dir', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No suitable Visual C++ version found')], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='vcvarsall', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='best_dir', ctx=Load()), Constant(value='vcvarsall.bat')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='vcvarsall', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s cannot be found'), Name(id='vcvarsall', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='vcvarsall', ctx=Load()), Constant(value=None)], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_vc_env', args=arguments(posonlyargs=[], args=[arg(arg='plat_spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='DISTUTILS_USE_SDK')], keywords=[]), body=[Return(value=DictComp(key=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='vcvarsall', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_find_vcvarsall', ctx=Load()), args=[Name(id='plat_spec', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='vcvarsall', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='Unable to find vcvarsall.bat')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[JoinedStr(values=[Constant(value='cmd /u /c "'), FormattedValue(value=Name(id='vcvarsall', ctx=Load()), conversion=-1), Constant(value='" '), FormattedValue(value=Name(id='plat_spec', ctx=Load()), conversion=-1), Constant(value=' && set')])], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))]), attr='decode', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='output', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error executing '), FormattedValue(value=Attribute(value=Name(id='exc', ctx=Load()), attr='cmd', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='env', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='_', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='=')], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ifs=[BoolOp(op=And(), values=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())])], is_async=0)])), Return(value=Name(id='env', ctx=Load()))], decorator_list=[]), FunctionDef(name='_find_exe', args=arguments(posonlyargs=[], args=[arg(arg='exe'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Return path to an MSVC executable program.\n\n    Tries to find the program in several places: first, one of the\n    MSVC program search paths from the registry; next, the directories\n    in the PATH environment variable.  If any of those work, return an\n    absolute path that is known to exist.  If none of them work, just\n    return the original program name, 'exe'.\n    ")), If(test=UnaryOp(op=Not(), operand=Name(id='paths', ctx=Load())), body=[Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='path')], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), Name(id='exe', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Return(value=Name(id='fn', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='exe', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='PLAT_TO_VCVARS', ctx=Store())], value=Dict(keys=[Constant(value='win32'), Constant(value='win-amd64'), Constant(value='win-arm32'), Constant(value='win-arm64')], values=[Constant(value='x86'), Constant(value='x86_amd64'), Constant(value='x86_arm'), Constant(value='x86_arm64')])), ClassDef(name='MSVCCompiler', bases=[Name(id='CCompiler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Concrete class that implements an interface to Microsoft Visual C++,\n    as defined by the CCompiler abstract class.')), Assign(targets=[Name(id='compiler_type', ctx=Store())], value=Constant(value='msvc')), Assign(targets=[Name(id='executables', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='_c_extensions', ctx=Store())], value=List(elts=[Constant(value='.c')], ctx=Load())), Assign(targets=[Name(id='_cpp_extensions', ctx=Store())], value=List(elts=[Constant(value='.cc'), Constant(value='.cpp'), Constant(value='.cxx')], ctx=Load())), Assign(targets=[Name(id='_rc_extensions', ctx=Store())], value=List(elts=[Constant(value='.rc')], ctx=Load())), Assign(targets=[Name(id='_mc_extensions', ctx=Store())], value=List(elts=[Constant(value='.mc')], ctx=Load())), Assign(targets=[Name(id='src_extensions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='_c_extensions', ctx=Load()), op=Add(), right=Name(id='_cpp_extensions', ctx=Load())), op=Add(), right=Name(id='_rc_extensions', ctx=Load())), op=Add(), right=Name(id='_mc_extensions', ctx=Load()))), Assign(targets=[Name(id='res_extension', ctx=Store())], value=Constant(value='.res')), Assign(targets=[Name(id='obj_extension', ctx=Store())], value=Constant(value='.obj')), Assign(targets=[Name(id='static_lib_extension', ctx=Store())], value=Constant(value='.lib')), Assign(targets=[Name(id='shared_lib_extension', ctx=Store())], value=Constant(value='.dll')), Assign(targets=[Name(id='static_lib_format', ctx=Store()), Name(id='shared_lib_format', ctx=Store())], value=Constant(value='%s%s')), Assign(targets=[Name(id='exe_extension', ctx=Store())], value=Constant(value='.exe')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='verbose', ctx=Load()), Name(id='dry_run', ctx=Load()), Name(id='force', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_configure', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='vc_env')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set class-level include/lib dirs.\n        ')), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='include_dirs', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_parse_path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='vc_env', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='include'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='library_dirs', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_parse_path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='vc_env', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='lib'), Constant(value='')], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_parse_path', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='dir', ctx=Load()), attr='rstrip', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='dir', ctx=Store()), iter=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]), ifs=[Name(id='dir', ctx=Load())], is_async=0)]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='initialize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plat_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), msg=Constant(value="don't init multiple times")), If(test=Compare(left=Name(id='plat_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plat_name', ctx=Store())], value=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='plat_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='PLAT_TO_VCVARS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[JoinedStr(values=[Constant(value='--plat-name must be one of '), FormattedValue(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='PLAT_TO_VCVARS', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='plat_spec', ctx=Store())], value=Subscript(value=Name(id='PLAT_TO_VCVARS', ctx=Load()), slice=Name(id='plat_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='vc_env', ctx=Store())], value=Call(func=Name(id='_get_vc_env', ctx=Load()), args=[Name(id='plat_spec', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='vc_env', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='Unable to find a compatible Visual Studio installation.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_configure', ctx=Load()), args=[Name(id='vc_env', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='vc_env', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='path'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='cl.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='link.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='lib.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='rc.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mc', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='mc.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mt', ctx=Store())], value=Call(func=Name(id='_find_exe', ctx=Load()), args=[Constant(value='mt.exe'), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preprocess_options', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/O2'), Constant(value='/W3'), Constant(value='/GL'), Constant(value='/DNDEBUG'), Constant(value='/MD')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options_debug', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/Od'), Constant(value='/MDd'), Constant(value='/Zi'), Constant(value='/W3'), Constant(value='/D_DEBUG')], ctx=Load())), Assign(targets=[Name(id='ldflags', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/INCREMENTAL:NO'), Constant(value='/LTCG')], ctx=Load())), Assign(targets=[Name(id='ldflags_debug', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/INCREMENTAL:NO'), Constant(value='/LTCG'), Constant(value='/DEBUG:FULL')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_exe', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags', ctx=Load()), ctx=Load()), Constant(value='/MANIFEST:EMBED,ID=1')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_exe_debug', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags_debug', ctx=Load()), ctx=Load()), Constant(value='/MANIFEST:EMBED,ID=1')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags', ctx=Load()), ctx=Load()), Constant(value='/DLL'), Constant(value='/MANIFEST:EMBED,ID=2'), Constant(value='/MANIFESTUAC:NO')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared_debug', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags_debug', ctx=Load()), ctx=Load()), Constant(value='/DLL'), Constant(value='/MANIFEST:EMBED,ID=2'), Constant(value='/MANIFESTUAC:NO')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static_debug', ctx=Store())], value=List(elts=[Starred(value=Name(id='ldflags_debug', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ldflags', ctx=Store())], value=Dict(keys=[Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load()), Constant(value=None)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_OBJECT', ctx=Load()), Constant(value=None)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_OBJECT', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_OBJECT', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_LIBRARY', ctx=Load()), Constant(value=None)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_LIBRARY', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='SHARED_LIBRARY', ctx=Load()), Constant(value=True)], ctx=Load())], values=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_exe', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_exe', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_exe_debug', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared_debug', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static_debug', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='out_extensions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[None, None], values=[Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='out_extensions', ctx=Load()), DictComp(key=Name(id='ext', ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='res_extension', ctx=Load()), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_rc_extensions', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_mc_extensions', ctx=Load())), ifs=[], is_async=0)])]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sources'), arg(arg='output_dir'), arg(arg='macros'), arg(arg='include_dirs'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='depends')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='compile_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_setup_compile', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='macros', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='sources', ctx=Load()), Name(id='depends', ctx=Load()), Name(id='extra_postargs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='macros', ctx=Store()), Name(id='objects', ctx=Store()), Name(id='extra_postargs', ctx=Store()), Name(id='pp_opts', ctx=Store()), Name(id='build', ctx=Store())], ctx=Store())], value=Name(id='compile_info', ctx=Load())), Assign(targets=[Name(id='compile_opts', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='extra_preargs', ctx=Load()), List(elts=[], ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='/c')], keywords=[])), If(test=Name(id='debug', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options_debug', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='add_cpp_opts', ctx=Store())], value=Constant(value=False)), For(target=Name(id='obj', ctx=Store()), iter=Name(id='objects', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='build', ctx=Load()), slice=Name(id='obj', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_c_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=BinOp(left=Constant(value='/Tc'), op=Add(), right=Name(id='src', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cpp_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=BinOp(left=Constant(value='/Tp'), op=Add(), right=Name(id='src', ctx=Load()))), Assign(targets=[Name(id='add_cpp_opts', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_rc_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=Name(id='src', ctx=Load())), Assign(targets=[Name(id='output_opt', ctx=Store())], value=BinOp(left=Constant(value='/fo'), op=Add(), right=Name(id='obj', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='pp_opts', ctx=Load())), op=Add(), right=List(elts=[Name(id='output_opt', ctx=Load()), Name(id='input_opt', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Continue()], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mc_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='h_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rc_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='mc', ctx=Load()), Constant(value='-h'), Name(id='h_dir', ctx=Load()), Constant(value='-r'), Name(id='rc_dir', ctx=Load()), Name(id='src', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rc_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='rc_dir', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.rc'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Load()), BinOp(left=Constant(value='/fo'), op=Add(), right=Name(id='obj', ctx=Load())), Name(id='rc_file', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Continue()], orelse=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Don't know how to compile "), FormattedValue(value=Name(id='src', ctx=Load()), conversion=-1), Constant(value=' to '), FormattedValue(value=Name(id='obj', ctx=Load()), conversion=-1)])], keywords=[]))])])])]), Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='compile_opts', ctx=Load())), op=Add(), right=Name(id='pp_opts', ctx=Load()))), If(test=Name(id='add_cpp_opts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='/EHsc')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Name(id='input_opt', ctx=Load()), BinOp(left=Constant(value='/Fo'), op=Add(), right=Name(id='obj', ctx=Load()))], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='extra_postargs', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='objects', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_static_lib', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objects'), arg(arg='output_libname'), arg(arg='output_dir'), arg(arg='debug'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='output_libname', ctx=Load())], keywords=[keyword(arg='output_dir', value=Name(id='output_dir', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='lib_args', ctx=Store())], value=BinOp(left=Name(id='objects', ctx=Load()), op=Add(), right=List(elts=[BinOp(left=Constant(value='/OUT:'), op=Add(), right=Name(id='output_filename', ctx=Load()))], ctx=Load()))), If(test=Name(id='debug', ctx=Load()), body=[Pass()], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Executing "%s" %s'), Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='lib_args', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='lib_args', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LibError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_desc'), arg(arg='objects'), arg(arg='output_filename'), arg(arg='output_dir'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='runtime_library_dirs'), arg(arg='export_symbols'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='build_temp'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fixed_args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_lib_args', ctx=Load()), args=[Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='libraries', ctx=Store()), Name(id='library_dirs', ctx=Store()), Name(id='runtime_library_dirs', ctx=Store())], ctx=Store())], value=Name(id='fixed_args', ctx=Load())), If(test=Name(id='runtime_library_dirs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="I don't know what to do with 'runtime_library_dirs': "), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='runtime_library_dirs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lib_opts', ctx=Store())], value=Call(func=Name(id='gen_lib_options', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load()), Name(id='libraries', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='output_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ldflags', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ldflags', ctx=Load()), slice=Tuple(elts=[Name(id='target_desc', ctx=Load()), Name(id='debug', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='export_opts', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='/EXPORT:'), op=Add(), right=Name(id='sym', ctx=Load())), generators=[comprehension(target=Name(id='sym', ctx=Store()), iter=BoolOp(op=Or(), values=[Name(id='export_symbols', ctx=Load()), List(elts=[], ctx=Load())]), ifs=[], is_async=0)])), Assign(targets=[Name(id='ld_args', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='ldflags', ctx=Load()), op=Add(), right=Name(id='lib_opts', ctx=Load())), op=Add(), right=Name(id='export_opts', ctx=Load())), op=Add(), right=Name(id='objects', ctx=Load())), op=Add(), right=List(elts=[BinOp(left=Constant(value='/OUT:'), op=Add(), right=Name(id='output_filename', ctx=Load()))], ctx=Load()))), Assign(targets=[Name(id='build_temp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Subscript(value=Name(id='objects', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='export_symbols', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='dll_name', ctx=Store()), Name(id='dll_ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='implib_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_temp', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='dll_name', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='/IMPLIB:'), op=Add(), right=Name(id='implib_file', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Name(id='extra_preargs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='ld_args', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=Name(id='extra_preargs', ctx=Load()))], orelse=[]), If(test=Name(id='extra_postargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='extra_postargs', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='output_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Name(id='output_dir', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Executing "%s" %s'), Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='ld_args', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='ld_args', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LinkError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='spawn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())], keywords=[keyword(arg='PATH', value=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fallback_spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Name(id='env', ctx=Load())], keywords=[]), optional_vars=Name(id='fallback', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='env', value=Name(id='env', ctx=Load()))]))]), Return(value=Attribute(value=Name(id='fallback', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='_fallback_spawn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmd'), arg(arg='env')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Discovered in pypa/distutils#15, some tools monkeypatch the compiler,\n        so the 'env' kwarg causes a TypeError. Detect this condition and\n        restore the legacy, unsafe behavior.\n        ")), Assign(targets=[Name(id='bag', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Constant(value='Bag'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], keywords=[]), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='bag', ctx=Load())))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), name='exc', body=[If(test=Compare(left=Constant(value="unexpected keyword argument 'env'"), ops=[NotIn()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])]), body=[Raise()], orelse=[])])], orelse=[Return()], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Fallback spawn triggered. Please update distutils monkeypatch.')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), attr='dict', ctx=Load()), args=[Constant(value='os.environ'), Name(id='env', ctx=Load())], keywords=[]))], body=[Assign(targets=[Attribute(value=Name(id='bag', ctx=Load()), attr='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='/LIBPATH:'), op=Add(), right=Name(id='dir', ctx=Load())))], decorator_list=[]), FunctionDef(name='runtime_library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value="don't know how to set runtime library search path for MSVC")], keywords=[]))], decorator_list=[]), FunctionDef(name='library_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='lib', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='find_library_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dirs'), arg(arg='lib'), arg(arg='debug')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='try_names', ctx=Store())], value=List(elts=[BinOp(left=Name(id='lib', ctx=Load()), op=Add(), right=Constant(value='_d')), Name(id='lib', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='try_names', ctx=Store())], value=List(elts=[Name(id='lib', ctx=Load())], ctx=Load()))]), For(target=Name(id='dir', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='try_names', ctx=Load()), body=[Assign(targets=[Name(id='libfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='libfile', ctx=Load())], keywords=[]), body=[Return(value=Name(id='libfile', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Return(value=Constant(value=None))])], decorator_list=[])], decorator_list=[])], type_ignores=[])