Module(body=[Expr(value=Constant(value="Provide access to Python's configuration information.  The specific\nconfiguration variables available depend heavily on the platform and\nconfiguration.  The values may be retrieved using\nget_config_var(name), and the list of variables is available via\nget_config_vars().keys().  Additional convenience functions are also\navailable.\n\nWritten by:   Fred L. Drake, Jr.\nEmail:        <fdrake@acm.org>\n")), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='pathlib')]), ImportFrom(module='errors', names=[alias(name='DistutilsPlatformError')], level=1), ImportFrom(names=[alias(name='py39compat')], level=1), ImportFrom(module='_functools', names=[alias(name='pass_none')], level=1), Assign(targets=[Name(id='IS_PYPY', ctx=Store())], value=Compare(left=Constant(value='__pypy__'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='builtin_module_names', ctx=Load())])), Assign(targets=[Name(id='PREFIX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='EXEC_PREFIX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BASE_PREFIX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_prefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BASE_EXEC_PREFIX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_exec_prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='_PYTHON_PROJECT_BASE'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='project_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='_PYTHON_PROJECT_BASE'), ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), body=[Assign(targets=[Name(id='project_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='project_base', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]))])]), FunctionDef(name='_is_python_source_dir', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return True if the target directory appears to point to an\n    un-installed Python.\n    ')), Assign(targets=[Name(id='modules', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), attr='joinpath', ctx=Load()), args=[Constant(value='Modules')], keywords=[])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='modules', ctx=Load()), attr='joinpath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), attr='is_file', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='fn', ctx=Store()), iter=Tuple(elts=[Constant(value='Setup'), Constant(value='Setup.local')], ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='_sys_home', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='_home'), Constant(value=None)], keywords=[])), FunctionDef(name='_is_parent', args=arguments(posonlyargs=[], args=[arg(arg='dir_a'), arg(arg='dir_b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return True if a is a parent of b.\n    ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir_a', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir_b', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[FunctionDef(name='_fix_pcbuild', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prefixes', ctx=Store())], value=Tuple(elts=[Name(id='PREFIX', ctx=Load()), Name(id='BASE_PREFIX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='matched', ctx=Store())], value=GeneratorExp(elt=Name(id='prefix', ctx=Load()), generators=[comprehension(target=Name(id='prefix', ctx=Store()), iter=Name(id='prefixes', ctx=Load()), ifs=[Call(func=Name(id='_is_parent', ctx=Load()), args=[Name(id='d', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='PCbuild')], keywords=[])], keywords=[])], is_async=0)])), Return(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='matched', ctx=Load()), Name(id='d', ctx=Load())], keywords=[]))], decorator_list=[Name(id='pass_none', ctx=Load())]), Assign(targets=[Name(id='project_base', ctx=Store())], value=Call(func=Name(id='_fix_pcbuild', ctx=Load()), args=[Name(id='project_base', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_sys_home', ctx=Store())], value=Call(func=Name(id='_fix_pcbuild', ctx=Load()), args=[Name(id='_sys_home', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='_python_build', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='_sys_home', ctx=Load()), body=[Return(value=Call(func=Name(id='_is_python_source_dir', ctx=Load()), args=[Name(id='_sys_home', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_is_python_source_dir', ctx=Load()), args=[Name(id='project_base', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='python_build', ctx=Store())], value=Call(func=Name(id='_python_build', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='build_flags', ctx=Store())], value=Constant(value='')), Try(body=[If(test=UnaryOp(op=Not(), operand=Name(id='python_build', ctx=Load())), body=[Assign(targets=[Name(id='build_flags', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='abiflags', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), FunctionDef(name='get_python_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a string containing the major and minor Python version,\n    leaving off the patchlevel.  Sample return values could be '1.5'\n    or '2.2'.\n    ")), Return(value=BinOp(left=Constant(value='%d.%d'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())))], decorator_list=[]), FunctionDef(name='get_python_inc', args=arguments(posonlyargs=[], args=[arg(arg='plat_specific'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value="Return the directory containing installed Python header files.\n\n    If 'plat_specific' is false (the default), this is the path to the\n    non-platform-specific header files, i.e. Python.h and so on;\n    otherwise, this is the path to platform-specific header files\n    (namely pyconfig.h).\n\n    If 'prefix' is supplied, use it instead of sys.base_prefix or\n    sys.base_exec_prefix -- i.e., ignore 'plat_specific'.\n    ")), Assign(targets=[Name(id='default_prefix', ctx=Store())], value=IfExp(test=Name(id='plat_specific', ctx=Load()), body=Name(id='BASE_EXEC_PREFIX', ctx=Load()), orelse=Name(id='BASE_PREFIX', ctx=Load()))), Assign(targets=[Name(id='resolved_prefix', ctx=Store())], value=IfExp(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='prefix', ctx=Load()), orelse=Name(id='default_prefix', ctx=Load()))), Try(body=[Assign(targets=[Name(id='getter', ctx=Store())], value=Subscript(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), slice=JoinedStr(values=[Constant(value='_get_python_inc_'), FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1)]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="I don't know where Python installs its C header files on platform '%s'"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='getter', ctx=Load()), args=[Name(id='resolved_prefix', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='plat_specific', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_extant', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Replace path with None if it doesn't exist.\n    ")), Return(value=IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=Name(id='path', ctx=Load()), orelse=Constant(value=None)))], decorator_list=[Name(id='pass_none', ctx=Load())]), FunctionDef(name='_get_python_inc_posix', args=arguments(posonlyargs=[], args=[arg(arg='prefix'), arg(arg='spec_prefix'), arg(arg='plat_specific')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='IS_PYPY', ctx=Load()), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='include')], keywords=[]))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='_get_python_inc_posix_python', ctx=Load()), args=[Name(id='plat_specific', ctx=Load())], keywords=[]), Call(func=Name(id='_extant', ctx=Load()), args=[Call(func=Name(id='_get_python_inc_from_config', ctx=Load()), args=[Name(id='plat_specific', ctx=Load()), Name(id='spec_prefix', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='_get_python_inc_posix_prefix', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='_get_python_inc_posix_python', args=arguments(posonlyargs=[], args=[arg(arg='plat_specific')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Assume the executable is in the build directory. The\n    pyconfig.h file should be in the same directory. Since\n    the build directory may not be the source directory,\n    use "srcdir" from the makefile to find the "Include"\n    directory.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='python_build', ctx=Load())), body=[Return()], orelse=[]), If(test=Name(id='plat_specific', ctx=Load()), body=[Return(value=BoolOp(op=Or(), values=[Name(id='_sys_home', ctx=Load()), Name(id='project_base', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='incdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='srcdir')], keywords=[]), Constant(value='Include')], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='incdir', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_python_inc_from_config', args=arguments(posonlyargs=[], args=[arg(arg='plat_specific'), arg(arg='spec_prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    If no prefix was explicitly specified, provide the include\n    directory from the config vars. Useful when\n    cross-compiling, since the config vars may come from\n    the host\n    platform Python installation, while the current Python\n    executable is from the build platform installation.\n\n    >>> monkeypatch = getfixture('monkeypatch')\n    >>> gpifc = _get_python_inc_from_config\n    >>> monkeypatch.setitem(gpifc.__globals__, 'get_config_var', str.lower)\n    >>> gpifc(False, '/usr/bin/')\n    >>> gpifc(False, '')\n    >>> gpifc(False, None)\n    'includepy'\n    >>> gpifc(True, None)\n    'confincludepy'\n    ")), If(test=Compare(left=Name(id='spec_prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='get_config_var', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='CONF'), op=Mult(), right=Name(id='plat_specific', ctx=Load())), op=Add(), right=Constant(value='INCLUDEPY'))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_python_inc_posix_prefix', args=arguments(posonlyargs=[], args=[arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='implementation', ctx=Store())], value=IfExp(test=Name(id='IS_PYPY', ctx=Load()), body=Constant(value='pypy'), orelse=Constant(value='python'))), Assign(targets=[Name(id='python_dir', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='implementation', ctx=Load()), op=Add(), right=Call(func=Name(id='get_python_version', ctx=Load()), args=[], keywords=[])), op=Add(), right=Name(id='build_flags', ctx=Load()))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='include'), Name(id='python_dir', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_python_inc_nt', args=arguments(posonlyargs=[], args=[arg(arg='prefix'), arg(arg='spec_prefix'), arg(arg='plat_specific')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='python_build', ctx=Load()), body=[Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='include')], keywords=[]), op=Add(), right=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='pathsep', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='PC')], keywords=[])))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='include')], keywords=[]))], decorator_list=[]), FunctionDef(name='_posix_lib', args=arguments(posonlyargs=[], args=[arg(arg='standard_lib'), arg(arg='libpython'), arg(arg='early_prefix'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='standard_lib', ctx=Load()), body=[Return(value=Name(id='libpython', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='libpython', ctx=Load()), Constant(value='site-packages')], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_python_lib', args=arguments(posonlyargs=[], args=[arg(arg='plat_specific'), arg(arg='standard_lib'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value="Return the directory containing the Python library (standard or\n    site additions).\n\n    If 'plat_specific' is true, return the directory containing\n    platform-specific modules, i.e. any module from a non-pure-Python\n    module distribution; otherwise, return the platform-shared library\n    directory.  If 'standard_lib' is true, return the directory\n    containing standard Python library modules; otherwise, return the\n    directory for site-specific modules.\n\n    If 'prefix' is supplied, use it instead of sys.base_prefix or\n    sys.base_exec_prefix -- i.e., ignore 'plat_specific'.\n    ")), If(test=BoolOp(op=And(), values=[Name(id='IS_PYPY', ctx=Load()), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())])]), body=[If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Name(id='PREFIX', ctx=Load()))], orelse=[]), If(test=Name(id='standard_lib', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='lib-python'), Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='site-packages')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='early_prefix', ctx=Store())], value=Name(id='prefix', ctx=Load())), If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='standard_lib', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='plat_specific', ctx=Load()), Name(id='BASE_EXEC_PREFIX', ctx=Load())]), Name(id='BASE_PREFIX', ctx=Load())]))], orelse=[Assign(targets=[Name(id='prefix', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='plat_specific', ctx=Load()), Name(id='EXEC_PREFIX', ctx=Load())]), Name(id='PREFIX', ctx=Load())]))])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[If(test=BoolOp(op=Or(), values=[Name(id='plat_specific', ctx=Load()), Name(id='standard_lib', ctx=Load())]), body=[Assign(targets=[Name(id='libdir', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='platlibdir'), Constant(value='lib')], keywords=[]))], orelse=[Assign(targets=[Name(id='libdir', ctx=Store())], value=Constant(value='lib'))]), Assign(targets=[Name(id='implementation', ctx=Store())], value=IfExp(test=Name(id='IS_PYPY', ctx=Load()), body=Constant(value='pypy'), orelse=Constant(value='python'))), Assign(targets=[Name(id='libpython', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Name(id='libdir', ctx=Load()), BinOp(left=Name(id='implementation', ctx=Load()), op=Add(), right=Call(func=Name(id='get_python_version', ctx=Load()), args=[], keywords=[]))], keywords=[])), Return(value=Call(func=Name(id='_posix_lib', ctx=Load()), args=[Name(id='standard_lib', ctx=Load()), Name(id='libpython', ctx=Load()), Name(id='early_prefix', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[If(test=Name(id='standard_lib', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='Lib')], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='Lib'), Constant(value='site-packages')], keywords=[]))])], orelse=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="I don't know where Python installs its library on platform '%s'"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))])])], decorator_list=[]), FunctionDef(name='customize_compiler', args=arguments(posonlyargs=[], args=[arg(arg='compiler')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Do any platform-specific customization of a CCompiler instance.\n\n    Mainly needed on Unix, so we can plug in the information that\n    varies across Unices and is stored in Python's Makefile.\n    ")), If(test=Compare(left=Attribute(value=Name(id='compiler', ctx=Load()), attr='compiler_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='unix')]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[Global(names=['_config_vars']), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='CUSTOMIZED_OSX_COMPILER')], keywords=[])), body=[Import(names=[alias(name='_osx_support')]), Expr(value=Call(func=Attribute(value=Name(id='_osx_support', ctx=Load()), attr='customize_compiler', ctx=Load()), args=[Name(id='_config_vars', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_config_vars', ctx=Load()), slice=Constant(value='CUSTOMIZED_OSX_COMPILER'), ctx=Store())], value=Constant(value='True'))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='cc', ctx=Store()), Name(id='cxx', ctx=Store()), Name(id='cflags', ctx=Store()), Name(id='ccshared', ctx=Store()), Name(id='ldshared', ctx=Store()), Name(id='shlib_suffix', ctx=Store()), Name(id='ar', ctx=Store()), Name(id='ar_flags', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_config_vars', ctx=Load()), args=[Constant(value='CC'), Constant(value='CXX'), Constant(value='CFLAGS'), Constant(value='CCSHARED'), Constant(value='LDSHARED'), Constant(value='SHLIB_SUFFIX'), Constant(value='AR'), Constant(value='ARFLAGS')], keywords=[])), If(test=Compare(left=Constant(value='CC'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='newcc', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CC'), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='LDSHARED'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Call(func=Attribute(value=Name(id='ldshared', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='cc', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='ldshared', ctx=Store())], value=BinOp(left=Name(id='newcc', ctx=Load()), op=Add(), right=Subscript(value=Name(id='ldshared', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cc', ctx=Load())], keywords=[])), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='cc', ctx=Store())], value=Name(id='newcc', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='CXX'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cxx', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CXX'), ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='LDSHARED'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='ldshared', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='LDSHARED'), ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='CPP'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cpp', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CPP'), ctx=Load()))], orelse=[Assign(targets=[Name(id='cpp', ctx=Store())], value=BinOp(left=Name(id='cc', ctx=Load()), op=Add(), right=Constant(value=' -E')))]), If(test=Compare(left=Constant(value='LDFLAGS'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='ldshared', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ldshared', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='LDFLAGS'), ctx=Load())))], orelse=[]), If(test=Compare(left=Constant(value='CFLAGS'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cflags', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='cflags', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CFLAGS'), ctx=Load()))), Assign(targets=[Name(id='ldshared', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ldshared', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CFLAGS'), ctx=Load())))], orelse=[]), If(test=Compare(left=Constant(value='CPPFLAGS'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cpp', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='cpp', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CPPFLAGS'), ctx=Load()))), Assign(targets=[Name(id='cflags', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='cflags', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CPPFLAGS'), ctx=Load()))), Assign(targets=[Name(id='ldshared', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ldshared', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='CPPFLAGS'), ctx=Load())))], orelse=[]), If(test=Compare(left=Constant(value='AR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='ar', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='AR'), ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='ARFLAGS'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='archiver', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ar', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='ARFLAGS'), ctx=Load())))], orelse=[Assign(targets=[Name(id='archiver', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ar', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='ar_flags', ctx=Load())))]), Assign(targets=[Name(id='cc_cmd', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='cc', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='cflags', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='compiler', ctx=Load()), attr='set_executables', ctx=Load()), args=[], keywords=[keyword(arg='preprocessor', value=Name(id='cpp', ctx=Load())), keyword(arg='compiler', value=Name(id='cc_cmd', ctx=Load())), keyword(arg='compiler_so', value=BinOp(left=BinOp(left=Name(id='cc_cmd', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='ccshared', ctx=Load()))), keyword(arg='compiler_cxx', value=Name(id='cxx', ctx=Load())), keyword(arg='linker_so', value=Name(id='ldshared', ctx=Load())), keyword(arg='linker_exe', value=Name(id='cc', ctx=Load())), keyword(arg='archiver', value=Name(id='archiver', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='RANLIB'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='compiler', ctx=Load()), attr='executables', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ranlib'), Constant(value=None)], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='compiler', ctx=Load()), attr='set_executables', ctx=Load()), args=[], keywords=[keyword(arg='ranlib', value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='RANLIB'), ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='compiler', ctx=Load()), attr='shared_lib_extension', ctx=Store())], value=Name(id='shlib_suffix', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_config_h_filename', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return full pathname of installed pyconfig.h file.')), If(test=Name(id='python_build', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Name(id='inc_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='_sys_home', ctx=Load()), Name(id='project_base', ctx=Load())]), Constant(value='PC')], keywords=[]))], orelse=[Assign(targets=[Name(id='inc_dir', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='_sys_home', ctx=Load()), Name(id='project_base', ctx=Load())]))]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='inc_dir', ctx=Load()), Constant(value='pyconfig.h')], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_h_filename', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_makefile_filename', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return full pathname of installed Makefile from the Python build.')), Return(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_makefile_filename', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_config_h', args=arguments(posonlyargs=[], args=[arg(arg='fp'), arg(arg='g')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ')), Return(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='parse_config_h', ctx=Load()), args=[Name(id='fp', ctx=Load())], keywords=[keyword(arg='vars', value=Name(id='g', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='_variable_rx', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)')], keywords=[])), Assign(targets=[Name(id='_findvar1_rx', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)')], keywords=[])), Assign(targets=[Name(id='_findvar2_rx', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\${([A-Za-z][A-Za-z0-9_]*)}')], keywords=[])), FunctionDef(name='parse_makefile', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='g')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ')), ImportFrom(module='distutils.text_file', names=[alias(name='TextFile')], level=0), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Name(id='TextFile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[keyword(arg='strip_comments', value=Constant(value=1)), keyword(arg='skip_blanks', value=Constant(value=1)), keyword(arg='join_lines', value=Constant(value=1)), keyword(arg='errors', value=Constant(value='surrogateescape'))])), If(test=Compare(left=Name(id='g', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='g', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='done', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='notdone', ctx=Store())], value=Dict(keys=[], values=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_variable_rx', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1), Constant(value=2)], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tmpv', ctx=Store())], value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='$$'), Constant(value='')], keywords=[])), If(test=Compare(left=Constant(value='$'), ops=[In()], comparators=[Name(id='tmpv', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='notdone', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='$$'), Constant(value='$')], keywords=[]))])], orelse=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], finalbody=[])])], orelse=[])], orelse=[]), Assign(targets=[Name(id='renamed_variables', ctx=Store())], value=Tuple(elts=[Constant(value='CFLAGS'), Constant(value='LDFLAGS'), Constant(value='CPPFLAGS')], ctx=Load())), While(test=Name(id='notdone', ctx=Load()), body=[For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Name(id='notdone', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='notdone', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='_findvar1_rx', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_findvar2_rx', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In()], comparators=[Name(id='done', ctx=Load())]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In()], comparators=[Name(id='notdone', ctx=Load())]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[In()], comparators=[Name(id='renamed_variables', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='PY_')], keywords=[]), Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load()), ops=[In()], comparators=[Name(id='renamed_variables', ctx=Load())])]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Compare(left=BinOp(left=Constant(value='PY_'), op=Add(), right=Name(id='n', ctx=Load())), ops=[In()], comparators=[Name(id='notdone', ctx=Load())]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='done', ctx=Load()), slice=BinOp(left=Constant(value='PY_'), op=Add(), right=Name(id='n', ctx=Load())), ctx=Load())], keywords=[]))])])], orelse=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Store()), Name(id='item', ctx=Store())], value=Constant(value=''))])])])]), If(test=Name(id='found', ctx=Load()), body=[Assign(targets=[Name(id='after', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), ctx=Load()), op=Add(), right=Name(id='item', ctx=Load())), op=Add(), right=Name(id='after', ctx=Load()))), If(test=Compare(left=Constant(value='$'), ops=[In()], comparators=[Name(id='after', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='notdone', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))])], orelse=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], finalbody=[]), Delete(targets=[Subscript(value=Name(id='notdone', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='PY_')], keywords=[]), Compare(left=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load()), ops=[In()], comparators=[Name(id='renamed_variables', ctx=Load())])]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='done', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[])])], orelse=[])], orelse=[Delete(targets=[Subscript(value=Name(id='notdone', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())])])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='done', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='done', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='g', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='done', ctx=Load())], keywords=[])), Return(value=Name(id='g', ctx=Load()))], decorator_list=[]), FunctionDef(name='expand_makefile_vars', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='vars')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expand Makefile-style variables -- "${foo}" or "$(foo)" -- in\n    \'string\' according to \'vars\' (a dictionary mapping variable names to\n    values).  Variables not present in \'vars\' are silently expanded to the\n    empty string.  The variable values in \'vars\' should not contain further\n    variable expansions; if \'vars\' is the output of \'parse_makefile()\',\n    you\'re fine.  Returns a variable-expanded version of \'s\'.\n    ')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='m', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='_findvar1_rx', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_findvar2_rx', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='beg', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='span', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='beg', ctx=Load())), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='vars', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[])), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Name(id='end', ctx=Load())), ctx=Load())))], orelse=[Break()])], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_config_vars', ctx=Store())], value=Constant(value=None)), FunctionDef(name='get_config_vars', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.  Generally this includes\n    everything needed to build extensions and install both pure modules and\n    extensions.  On Unix, this means every variable defined in Python's\n    installed Makefile; on Windows it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    ")), Global(names=['_config_vars']), If(test=Compare(left=Name(id='_config_vars', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_config_vars', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_vars', ctx=Load()), args=[], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='py39compat', ctx=Load()), attr='add_ext_suffix', ctx=Load()), args=[Name(id='_config_vars', ctx=Load())], keywords=[]))], orelse=[]), Return(value=IfExp(test=Name(id='args', ctx=Load()), body=ListComp(elt=Call(func=Attribute(value=Name(id='_config_vars', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)]), orelse=Name(id='_config_vars', ctx=Load())))], decorator_list=[]), FunctionDef(name='get_config_var', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the value of a single variable using the dictionary\n    returned by 'get_config_vars()'.  Equivalent to\n    get_config_vars().get(name)\n    ")), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='SO')]), body=[Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='SO is deprecated, use EXT_SUFFIX'), Name(id='DeprecationWarning', ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='get_config_vars', ctx=Load()), args=[], keywords=[]), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])