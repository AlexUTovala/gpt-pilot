Module(body=[Expr(value=Constant(value='distutils.dist\n\nProvides the Distribution class, which represents the module distribution\nbeing built/installed/distributed.\n')), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='logging')]), ImportFrom(module='email', names=[alias(name='message_from_file')], level=0), Try(body=[Import(names=[alias(name='warnings')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='warnings', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError'), alias(name='DistutilsModuleError'), alias(name='DistutilsArgError'), alias(name='DistutilsClassError')], level=1), ImportFrom(module='fancy_getopt', names=[alias(name='FancyGetopt'), alias(name='translate_longopt')], level=1), ImportFrom(module='util', names=[alias(name='check_environ'), alias(name='strtobool'), alias(name='rfc822_escape')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), ImportFrom(module='debug', names=[alias(name='DEBUG')], level=1), Assign(targets=[Name(id='command_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[a-zA-Z]([a-zA-Z0-9_]*)$')], keywords=[])), FunctionDef(name='_ensure_list', args=arguments(posonlyargs=[], args=[arg(arg='value'), arg(arg='fieldname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Pass()], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='typename', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='__name__', ctx=Load())), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="Warning: '{fieldname}' should be a list, got type '{typename}'")), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[]), ClassDef(name='Distribution', bases=[], keywords=[], body=[Expr(value=Constant(value="The core of the Distutils.  Most of the work hiding behind 'setup'\n    is really done within a Distribution instance, which farms the work out\n    to the Distutils commands specified on the command line.\n\n    Setup scripts will almost never instantiate Distribution directly,\n    unless the 'setup()' function is totally inadequate to their needs.\n    However, it is conceivable that a setup script might wish to subclass\n    Distribution for some specialized purpose, and then pass the subclass\n    to 'setup()' as the 'distclass' keyword argument.  If so, it is\n    necessary to respect the expectations that 'setup' has of Distribution.\n    See the code for 'setup()', in core.py, for details.\n    ")), Assign(targets=[Name(id='global_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='verbose'), Constant(value='v'), Constant(value='run verbosely (default)'), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value='quiet'), Constant(value='q'), Constant(value='run quietly (turns verbosity off)')], ctx=Load()), Tuple(elts=[Constant(value='dry-run'), Constant(value='n'), Constant(value="don't actually do anything")], ctx=Load()), Tuple(elts=[Constant(value='help'), Constant(value='h'), Constant(value='show detailed help message')], ctx=Load()), Tuple(elts=[Constant(value='no-user-cfg'), Constant(value=None), Constant(value='ignore pydistutils.cfg in your home directory')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='common_usage', ctx=Store())], value=Constant(value="Common commands: (see '--help-commands' for more)\n\n  setup.py build      will build the package underneath 'build/'\n  setup.py install    will install the package\n")), Assign(targets=[Name(id='display_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='help-commands'), Constant(value=None), Constant(value='list all available commands')], ctx=Load()), Tuple(elts=[Constant(value='name'), Constant(value=None), Constant(value='print package name')], ctx=Load()), Tuple(elts=[Constant(value='version'), Constant(value='V'), Constant(value='print package version')], ctx=Load()), Tuple(elts=[Constant(value='fullname'), Constant(value=None), Constant(value='print <package name>-<version>')], ctx=Load()), Tuple(elts=[Constant(value='author'), Constant(value=None), Constant(value="print the author's name")], ctx=Load()), Tuple(elts=[Constant(value='author-email'), Constant(value=None), Constant(value="print the author's email address")], ctx=Load()), Tuple(elts=[Constant(value='maintainer'), Constant(value=None), Constant(value="print the maintainer's name")], ctx=Load()), Tuple(elts=[Constant(value='maintainer-email'), Constant(value=None), Constant(value="print the maintainer's email address")], ctx=Load()), Tuple(elts=[Constant(value='contact'), Constant(value=None), Constant(value="print the maintainer's name if known, else the author's")], ctx=Load()), Tuple(elts=[Constant(value='contact-email'), Constant(value=None), Constant(value="print the maintainer's email address if known, else the author's")], ctx=Load()), Tuple(elts=[Constant(value='url'), Constant(value=None), Constant(value='print the URL for this package')], ctx=Load()), Tuple(elts=[Constant(value='license'), Constant(value=None), Constant(value='print the license of the package')], ctx=Load()), Tuple(elts=[Constant(value='licence'), Constant(value=None), Constant(value='alias for --license')], ctx=Load()), Tuple(elts=[Constant(value='description'), Constant(value=None), Constant(value='print the package description')], ctx=Load()), Tuple(elts=[Constant(value='long-description'), Constant(value=None), Constant(value='print the long package description')], ctx=Load()), Tuple(elts=[Constant(value='platforms'), Constant(value=None), Constant(value='print the list of platforms')], ctx=Load()), Tuple(elts=[Constant(value='classifiers'), Constant(value=None), Constant(value='print the list of classifiers')], ctx=Load()), Tuple(elts=[Constant(value='keywords'), Constant(value=None), Constant(value='print the list of keywords')], ctx=Load()), Tuple(elts=[Constant(value='provides'), Constant(value=None), Constant(value='print the list of packages/modules provided')], ctx=Load()), Tuple(elts=[Constant(value='requires'), Constant(value=None), Constant(value='print the list of packages/modules required')], ctx=Load()), Tuple(elts=[Constant(value='obsoletes'), Constant(value=None), Constant(value='print the list of packages/modules made obsolete')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='display_option_names', ctx=Store())], value=ListComp(elt=Call(func=Name(id='translate_longopt', ctx=Load()), args=[Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='display_options', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='quiet')], values=[Constant(value='verbose')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Construct a new Distribution instance: initialize all the\n        attributes of a Distribution, and then use \'attrs\' (a dictionary\n        mapping attribute names to values) to assign some of those\n        attributes their "real" values.  (Any attributes not mentioned in\n        \'attrs\' will be assigned to some null value: 0, None, an empty list\n        or dictionary, etc.)  Most importantly, initialize the\n        \'command_obj\' attribute to the empty dictionary; this will be\n        filled in with real command objects by \'parse_command_line()\'.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='help', ctx=Store())], value=Constant(value=0)), For(target=Name(id='attr', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='display_option_names', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Store())], value=Call(func=Name(id='DistributionMetadata', ctx=Load()), args=[], keywords=[])), For(target=Name(id='basename', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), attr='_METHOD_BASENAMES', ctx=Load()), body=[Assign(targets=[Name(id='method_name', ctx=Store())], value=BinOp(left=Constant(value='get_'), op=Add(), right=Name(id='basename', ctx=Load()))), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='method_name', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), Name(id='method_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='command_packages', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='script_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='script_args', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_files', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_data', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='py_modules', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ext_modules', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ext_package', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scripts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='command_obj', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='have_run', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='attrs', ctx=Load()), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='options')], keywords=[])), If(test=Compare(left=Name(id='options', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Delete(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='options'), ctx=Del())]), For(target=Tuple(elts=[Name(id='command', ctx=Store()), Name(id='cmd_options', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='opt_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='opt', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cmd_options', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='opt_dict', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Store())], value=Tuple(elts=[Constant(value='setup script'), Name(id='val', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='licence'), ops=[In()], comparators=[Name(id='attrs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='license'), ctx=Store())], value=Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='licence'), ctx=Load())), Delete(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='licence'), ctx=Del())]), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="'licence' distribution option is deprecated; use 'license'")), If(test=Compare(left=Name(id='warnings', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))])], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), BinOp(left=Constant(value='set_'), op=Add(), right=Name(id='key', ctx=Load()))], keywords=[]), body=[Expr(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), BinOp(left=Constant(value='set_'), op=Add(), right=Name(id='key', ctx=Load()))], keywords=[]), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Unknown distribution option: %s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])])])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='want_user_cfg', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='script_args', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='script_args', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='-')], keywords=[])), body=[Break()], orelse=[]), If(test=Compare(left=Name(id='arg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='--no-user-cfg')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='want_user_cfg', ctx=Store())], value=Constant(value=False)), Break()], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize_options', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_option_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the option dictionary for a given command.  If that\n        command's option dictionary hasn't been created yet, then create it\n        and return the new dictionary; otherwise, return the existing\n        option dictionary.\n        ")), Assign(targets=[Name(id='dict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dict', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='dict', ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), slice=Name(id='command', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Return(value=Name(id='dict', ctx=Load()))], decorator_list=[]), FunctionDef(name='dump_option_dicts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header'), arg(arg='commands'), arg(arg='indent')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='')]), body=[ImportFrom(module='pprint', names=[alias(name='pformat')], level=0), If(test=Compare(left=Name(id='commands', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='commands', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='header', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='header', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='indent', ctx=Store())], value=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value='  ')))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='commands', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value='no commands known yet'))], keywords=[])), Return()], orelse=[]), For(target=Name(id='cmd_name', ctx=Store()), iter=Name(id='commands', ctx=Load()), body=[Assign(targets=[Name(id='opt_dict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='opt_dict', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=BinOp(left=Constant(value="no option dict for '%s' command"), op=Mod(), right=Name(id='cmd_name', ctx=Load())))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=BinOp(left=Constant(value="option dict for '%s' command:"), op=Mod(), right=Name(id='cmd_name', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='pformat', ctx=Load()), args=[Name(id='opt_dict', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Constant(value='  ')), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='find_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Find as many configuration files as should be processed for this\n        platform, and return a list of filenames in the order in which they\n        should be parsed.  The filenames returned are guaranteed to exist\n        (modulo nasty race conditions).\n\n        There are multiple possible config files:\n        - distutils.cfg in the Distutils installation directory (i.e.\n          where the top-level Distutils __inst__.py file lives)\n        - a file in the user's home directory named .pydistutils.cfg\n          on Unix and pydistutils.cfg on Windows/Mac; may be disabled\n          with the ``--no-user-cfg`` option\n        - setup.cfg in the current directory\n        - a file named by an environment variable\n        ")), Expr(value=Call(func=Name(id='check_environ', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gen_paths', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], is_async=0)])), If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value='using config files: %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Return(value=Name(id='files', ctx=Load()))], decorator_list=[]), FunctionDef(name='_gen_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sys_dir', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='distutils'), ctx=Load()), attr='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load())), Expr(value=Yield(value=BinOp(left=Name(id='sys_dir', ctx=Load()), op=Div(), right=Constant(value='distutils.cfg')))), Assign(targets=[Name(id='prefix', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Mult(), right=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]))), Assign(targets=[Name(id='filename', ctx=Store())], value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Constant(value='pydistutils.cfg'))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='want_user_cfg', ctx=Load()), body=[Expr(value=Yield(value=BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Constant(value='~')], keywords=[]), attr='expanduser', ctx=Load()), args=[], keywords=[]), op=Div(), right=Name(id='filename', ctx=Load()))))], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Constant(value='setup.cfg')], keywords=[]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='TypeError', ctx=Load())], keywords=[]))], body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='DIST_EXTRA_CONFIG')], keywords=[])], keywords=[])))])], decorator_list=[]), FunctionDef(name='parse_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filenames')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[ImportFrom(module='configparser', names=[alias(name='ConfigParser')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_prefix', ctx=Load())]), body=[Assign(targets=[Name(id='ignore_options', ctx=Store())], value=List(elts=[Constant(value='install-base'), Constant(value='install-platbase'), Constant(value='install-lib'), Constant(value='install-platlib'), Constant(value='install-purelib'), Constant(value='install-headers'), Constant(value='install-scripts'), Constant(value='install-data'), Constant(value='prefix'), Constant(value='exec-prefix'), Constant(value='home'), Constant(value='user'), Constant(value='root')], ctx=Load()))], orelse=[Assign(targets=[Name(id='ignore_options', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='ignore_options', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='ignore_options', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='filenames', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='filenames', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_config_files', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='Distribution.parse_config_files():')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='ConfigParser', ctx=Load()), args=[], keywords=[])), For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value='  reading %s'), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), For(target=Name(id='section', ctx=Store()), iter=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='sections', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='options', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opt_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[])), For(target=Name(id='opt', ctx=Store()), iter=Name(id='options', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='opt', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__name__')]), Compare(left=Name(id='opt', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore_options', ctx=Load())])]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='section', ctx=Load()), Name(id='opt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opt', ctx=Store())], value=Call(func=Attribute(value=Name(id='opt', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), Assign(targets=[Subscript(value=Name(id='opt_dict', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='__init__', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='global'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='opt', ctx=Store()), Tuple(elts=[Name(id='src', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), slice=Constant(value='global'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='alias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='negative_opt', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[])), Try(body=[If(test=Name(id='alias', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='alias', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='verbose'), Constant(value='dry_run')], ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt', ctx=Load()), Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))])])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='parse_command_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse the setup script\'s command line, taken from the\n        \'script_args\' instance attribute (which defaults to \'sys.argv[1:]\'\n        -- see \'setup()\' in core.py).  This list is first processed for\n        "global options" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the \'user_options\' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that \'options\'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn\'t\n        execute commands (currently, this only happens if user asks for\n        help).\n        ')), Assign(targets=[Name(id='toplevel_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_toplevel_options', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='FancyGetopt', ctx=Load()), args=[BinOp(left=Name(id='toplevel_options', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='display_options', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_negative_aliases', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='negative_opt', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_aliases', ctx=Load()), args=[Dict(keys=[Constant(value='licence')], values=[Constant(value='license')])], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getopt', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Attribute(value=Name(id='self', ctx=Load()), attr='script_args', ctx=Load())), keyword(arg='object', value=Name(id='self', ctx=Load()))])), Assign(targets=[Name(id='option_order', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='get_option_order', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[], keywords=[]), attr='setLevel', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='logging', ctx=Load()), attr='WARN', ctx=Load()), op=Sub(), right=BinOp(left=Constant(value=10), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())))], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handle_display_options', ctx=Load()), args=[Name(id='option_order', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), While(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_command_opts', ctx=Load()), args=[Name(id='parser', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='help', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_show_help', ctx=Load()), args=[Name(id='parser', ctx=Load())], keywords=[keyword(arg='display_options', value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])), keyword(arg='commands', value=Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load()))])), Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[Constant(value='no commands supplied')], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='_get_toplevel_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the non-display options recognized at the top level.\n\n        This includes options that are recognized *only* at the top\n        level as well as options recognized for commands.\n        ')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='global_options', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Constant(value='command-packages='), Constant(value=None), Constant(value='list of packages that provide distutils commands')], ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='_parse_command_opts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse the command-line options for a single command.\n        'parser' must be a FancyGetopt instance; 'args' must be the list\n        of arguments, starting with the current command (whose options\n        we are about to parse).  Returns a new version of 'args' with\n        the next command at the front of the list; will be the empty\n        list if there are no more commands on the command line.  Returns\n        None if the user asked for help on this command.\n        ")), ImportFrom(module='distutils.cmd', names=[alias(name='Command')], level=0), Assign(targets=[Name(id='command', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='command_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='SystemExit', ctx=Load()), args=[BinOp(left=Constant(value="invalid command name '%s'"), op=Mod(), right=Name(id='command', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='cmd_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_class', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsModuleError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Name(id='Command', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsClassError', ctx=Load()), args=[BinOp(left=Constant(value='command class %s must subclass Command'), op=Mod(), right=Name(id='cmd_class', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Constant(value='user_options')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='cmd_class', ctx=Load()), attr='user_options', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="command class %s must provide 'user_options' attribute (a list of tuples)")), Raise(exc=Call(func=Name(id='DistutilsClassError', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Name(id='cmd_class', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='negative_opt', ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Constant(value='negative_opt')], keywords=[]), body=[Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Call(func=Attribute(value=Name(id='negative_opt', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='negative_opt', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='cmd_class', ctx=Load()), attr='negative_opt', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Constant(value='help_options')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='cmd_class', ctx=Load()), attr='help_options', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='help_options', ctx=Store())], value=Call(func=Name(id='fix_help_options', ctx=Load()), args=[Attribute(value=Name(id='cmd_class', ctx=Load()), attr='help_options', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='help_options', ctx=Store())], value=List(elts=[], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_option_table', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='global_options', ctx=Load()), op=Add(), right=Attribute(value=Name(id='cmd_class', ctx=Load()), attr='user_options', ctx=Load())), op=Add(), right=Name(id='help_options', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_negative_aliases', ctx=Load()), args=[Name(id='negative_opt', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='args', ctx=Store()), Name(id='opts', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getopt', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='opts', ctx=Load()), Constant(value='help')], keywords=[]), Attribute(value=Name(id='opts', ctx=Load()), attr='help', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_show_help', ctx=Load()), args=[Name(id='parser', ctx=Load())], keywords=[keyword(arg='display_options', value=Constant(value=0)), keyword(arg='commands', value=List(elts=[Name(id='cmd_class', ctx=Load())], ctx=Load()))])), Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Constant(value='help_options')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='cmd_class', ctx=Load()), attr='help_options', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='help_option_found', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='help_option', ctx=Store()), Name(id='short', ctx=Store()), Name(id='desc', ctx=Store()), Name(id='func', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='cmd_class', ctx=Load()), attr='help_options', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='opts', ctx=Load()), Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='get_attr_name', ctx=Load()), args=[Name(id='help_option', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='help_option_found', ctx=Store())], value=Constant(value=1)), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='DistutilsClassError', ctx=Load()), args=[BinOp(left=Constant(value="invalid help function %r for help option '%s': must be a callable object (function, etc.)"), op=Mod(), right=Tuple(elts=[Name(id='func', ctx=Load()), Name(id='help_option', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[])], orelse=[]), If(test=Name(id='help_option_found', ctx=Load()), body=[Return()], orelse=[])], orelse=[]), Assign(targets=[Name(id='opt_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='opts', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='opt_dict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Constant(value='command line'), Name(id='value', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set final values for all the options on the Distribution\n        instance, analogous to the .finalize_options() method of Command\n        objects.\n        ')), For(target=Name(id='attr', ctx=Store()), iter=Tuple(elts=[Constant(value='keywords'), Constant(value='platforms')], ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='elm', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='elm', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_show_help', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parser'), arg(arg='global_options'), arg(arg='display_options'), arg(arg='commands')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), List(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='Show help for the setup script command-line in the form of\n        several lists of command-line options.  \'parser\' should be a\n        FancyGetopt instance; do not expect it to be returned in the\n        same state, as its option table will be reset to make it\n        generate the correct help text.\n\n        If \'global_options\' is true, lists the global options:\n        --verbose, --dry-run, etc.  If \'display_options\' is true, lists\n        the "display-only" options: --name, --version, etc.  Finally,\n        lists per-command help for every command name or command class\n        in \'commands\'.\n        ')), ImportFrom(module='distutils.core', names=[alias(name='gen_usage')], level=0), ImportFrom(module='distutils.cmd', names=[alias(name='Command')], level=0), If(test=Name(id='global_options', ctx=Load()), body=[If(test=Name(id='display_options', ctx=Load()), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_toplevel_options', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='options', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='global_options', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_option_table', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='common_usage', ctx=Load()), op=Add(), right=Constant(value='\nGlobal options:'))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), If(test=Name(id='display_options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_option_table', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='display_options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[BinOp(left=Constant(value='Information display options (just display '), op=Add(), right=Constant(value='information, ignore any commands)'))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), For(target=Name(id='command', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='command', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='command', ctx=Load()), Name(id='Command', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Name(id='command', ctx=Load()))], orelse=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_class', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='klass', ctx=Load()), Constant(value='help_options')], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='klass', ctx=Load()), attr='help_options', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_option_table', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='klass', ctx=Load()), attr='user_options', ctx=Load()), op=Add(), right=Call(func=Name(id='fix_help_options', ctx=Load()), args=[Attribute(value=Name(id='klass', ctx=Load()), attr='help_options', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_option_table', ctx=Load()), args=[Attribute(value=Name(id='klass', ctx=Load()), attr='user_options', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[BinOp(left=Constant(value="Options for '%s' command:"), op=Mod(), right=Attribute(value=Name(id='klass', ctx=Load()), attr='__name__', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='gen_usage', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='script_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='handle_display_options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option_order')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If there were any non-global "display-only" options\n        (--help-commands or the metadata display options) on the command\n        line, display the requested info and return true; else return\n        false.\n        ')), ImportFrom(module='distutils.core', names=[alias(name='gen_usage')], level=0), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='help_commands', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_commands', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='gen_usage', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='script_name', ctx=Load())], keywords=[])], keywords=[])), Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='any_display_options', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='is_display_option', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='option', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='display_options', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='is_display_option', ctx=Load()), slice=Subscript(value=Name(id='option', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[]), For(target=Tuple(elts=[Name(id='opt', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Name(id='option_order', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='val', ctx=Load()), Call(func=Attribute(value=Name(id='is_display_option', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Call(func=Name(id='translate_longopt', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), BinOp(left=Constant(value='get_'), op=Add(), right=Name(id='opt', ctx=Load()))], keywords=[]), args=[], keywords=[])), If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='keywords'), Constant(value='platforms')], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='classifiers'), Constant(value='provides'), Constant(value='requires'), Constant(value='obsoletes')], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='any_display_options', ctx=Store())], value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='any_display_options', ctx=Load()))], decorator_list=[]), FunctionDef(name='print_command_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='commands'), arg(arg='header'), arg(arg='max_length')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Print a subset of the list of all commands -- used by\n        'print_commands()'.\n        ")), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Constant(value=':'))], keywords=[])), For(target=Name(id='cmd', ctx=Store()), iter=Name(id='commands', ctx=Load()), body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='klass', ctx=Load())), body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_class', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='description', ctx=Store())], value=Attribute(value=Name(id='klass', ctx=Load()), attr='description', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='(no description available)'))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='  %-*s  %s'), op=Mod(), right=Tuple(elts=[Name(id='max_length', ctx=Load()), Name(id='cmd', ctx=Load()), Name(id='description', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='print_commands', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Print out a help message listing all available commands with a\n        description of each.  The list is divided into "standard commands"\n        (listed in distutils.command.__all__) and "extra commands"\n        (mentioned in self.cmdclass, but not a standard command).  The\n        descriptions come from the command class attribute\n        \'description\'.\n        ')), Import(names=[alias(name='distutils.command')]), Assign(targets=[Name(id='std_commands', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='command', ctx=Load()), attr='__all__', ctx=Load())), Assign(targets=[Name(id='is_std', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='cmd', ctx=Store()), iter=Name(id='std_commands', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='is_std', ctx=Load()), slice=Name(id='cmd', ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='extra_commands', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cmd', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='is_std', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='extra_commands', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='max_length', ctx=Store())], value=Constant(value=0)), For(target=Name(id='cmd', ctx=Store()), iter=BinOp(left=Name(id='std_commands', ctx=Load()), op=Add(), right=Name(id='extra_commands', ctx=Load())), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='max_length', ctx=Load())]), body=[Assign(targets=[Name(id='max_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_command_list', ctx=Load()), args=[Name(id='std_commands', ctx=Load()), Constant(value='Standard commands'), Name(id='max_length', ctx=Load())], keywords=[])), If(test=Name(id='extra_commands', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_command_list', ctx=Load()), args=[Name(id='extra_commands', ctx=Load()), Constant(value='Extra commands'), Name(id='max_length', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_command_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a list of (command, description) tuples.\n        The list is divided into "standard commands" (listed in\n        distutils.command.__all__) and "extra commands" (mentioned in\n        self.cmdclass, but not a standard command).  The descriptions come\n        from the command class attribute \'description\'.\n        ')), Import(names=[alias(name='distutils.command')]), Assign(targets=[Name(id='std_commands', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='command', ctx=Load()), attr='__all__', ctx=Load())), Assign(targets=[Name(id='is_std', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='cmd', ctx=Store()), iter=Name(id='std_commands', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='is_std', ctx=Load()), slice=Name(id='cmd', ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='extra_commands', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cmd', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='is_std', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='extra_commands', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cmd', ctx=Store()), iter=BinOp(left=Name(id='std_commands', ctx=Load()), op=Add(), right=Name(id='extra_commands', ctx=Load())), body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='klass', ctx=Load())), body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_class', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='description', ctx=Store())], value=Attribute(value=Name(id='klass', ctx=Load()), attr='description', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='(no description available)'))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='rv', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='cmd', ctx=Load()), Name(id='description', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_command_packages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of packages from which commands are loaded.')), Assign(targets=[Name(id='pkgs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='command_packages', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pkgs', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='pkgs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pkgs', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='pkgs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='pkg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pkgs', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[Compare(left=Name(id='pkg', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])], is_async=0)])), If(test=Compare(left=Constant(value='distutils.command'), ops=[NotIn()], comparators=[Name(id='pkgs', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='pkgs', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='distutils.command')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='command_packages', ctx=Store())], value=Name(id='pkgs', ctx=Load()))], orelse=[]), Return(value=Name(id='pkgs', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_command_class', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the class that implements the Distutils command named by\n        \'command\'.  First we check the \'cmdclass\' dictionary; if the\n        command is mentioned there, we fetch the class object from the\n        dictionary and return it.  Otherwise we load the command module\n        ("distutils.command." + command) and fetch the command class from\n        the module.  The loaded class is also stored in \'cmdclass\'\n        to speed future calls to \'get_command_class()\'.\n\n        Raises DistutilsModuleError if the expected module could not be\n        found, or if that module does not define the expected class.\n        ')), Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), If(test=Name(id='klass', ctx=Load()), body=[Return(value=Name(id='klass', ctx=Load()))], orelse=[]), For(target=Name(id='pkgname', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_packages', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='module_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}.{}'), attr='format', ctx=Load()), args=[Name(id='pkgname', ctx=Load()), Name(id='command', ctx=Load())], keywords=[])), Assign(targets=[Name(id='klass_name', ctx=Store())], value=Name(id='command', ctx=Load())), Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='module_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='klass_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsModuleError', ctx=Load()), args=[BinOp(left=Constant(value="invalid command '%s' (no class '%s' in module '%s')"), op=Mod(), right=Tuple(elts=[Name(id='command', ctx=Load()), Name(id='klass_name', ctx=Load()), Name(id='module_name', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmdclass', ctx=Load()), slice=Name(id='command', ctx=Load()), ctx=Store())], value=Name(id='klass', ctx=Load())), Return(value=Name(id='klass', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='DistutilsModuleError', ctx=Load()), args=[BinOp(left=Constant(value="invalid command '%s'"), op=Mod(), right=Name(id='command', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='get_command_obj', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command'), arg(arg='create')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value="Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        ")), Assign(targets=[Name(id='cmd_obj', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_obj', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='cmd_obj', ctx=Load())), Name(id='create', ctx=Load())]), body=[If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value="Distribution.get_command_obj(): creating '%s' command object"), op=Mod(), right=Name(id='command', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_class', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd_obj', ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_obj', ctx=Load()), slice=Name(id='command', ctx=Load()), ctx=Store())], value=Call(func=Name(id='klass', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='have_run', ctx=Load()), slice=Name(id='command', ctx=Load()), ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='command_options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), If(test=Name(id='options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_command_options', ctx=Load()), args=[Name(id='cmd_obj', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='cmd_obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='_set_command_options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command_obj'), arg(arg='option_dict')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Set the options for 'command_obj' from 'option_dict'.  Basically\n        this means copying elements of a dictionary ('option_dict') to\n        attributes of an instance ('command').\n\n        'command_obj' must be a Command instance.  If 'option_dict' is not\n        supplied, uses the standard option dictionary for this command\n        (from 'self.command_options').\n        ")), Assign(targets=[Name(id='command_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='command_obj', ctx=Load()), attr='get_command_name', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='option_dict', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='option_dict', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Name(id='command_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value="  setting options for '%s' command:"), op=Mod(), right=Name(id='command_name', ctx=Load()))], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='option', ctx=Store()), Tuple(elts=[Name(id='source', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='option_dict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='    {} = {} (from {})'), attr='format', ctx=Load()), args=[Name(id='option', ctx=Load()), Name(id='value', ctx=Load()), Name(id='source', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='bool_opts', ctx=Store())], value=ListComp(elt=Call(func=Name(id='translate_longopt', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Attribute(value=Name(id='command_obj', ctx=Load()), attr='boolean_options', ctx=Load()), ifs=[], is_async=0)]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='bool_opts', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='neg_opt', ctx=Store())], value=Attribute(value=Name(id='command_obj', ctx=Load()), attr='negative_opt', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='neg_opt', ctx=Store())], value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='is_string', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='option', ctx=Load()), ops=[In()], comparators=[Name(id='neg_opt', ctx=Load())]), Name(id='is_string', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='command_obj', ctx=Load()), Subscript(value=Name(id='neg_opt', ctx=Load()), slice=Name(id='option', ctx=Load()), ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='option', ctx=Load()), ops=[In()], comparators=[Name(id='bool_opts', ctx=Load())]), Name(id='is_string', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='command_obj', ctx=Load()), Name(id='option', ctx=Load()), Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='command_obj', ctx=Load()), Name(id='option', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='command_obj', ctx=Load()), Name(id='option', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value="error in %s: command '%s' has no such option '%s'"), op=Mod(), right=Tuple(elts=[Name(id='source', ctx=Load()), Name(id='command_name', ctx=Load()), Name(id='option', ctx=Load())], ctx=Load()))], keywords=[]))])])])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='reinitialize_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command'), arg(arg='reinit_subcommands')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Reinitializes a command to the state it was in when first\n        returned by \'get_command_obj()\': ie., initialized but not yet\n        finalized.  This provides the opportunity to sneak option\n        values in programmatically, overriding or supplementing\n        user-supplied values from the config files and command line.\n        You\'ll have to re-finalize the command object (by calling\n        \'finalize_options()\' or \'ensure_finalized()\') before using it for\n        real.\n\n        \'command\' should be a command name (string) or command object.  If\n        \'reinit_subcommands\' is true, also reinitializes the command\'s\n        sub-commands, as declared by the \'sub_commands\' class attribute (if\n        it has one).  See the "install" command for an example.  Only\n        reinitializes the sub-commands that actually matter, ie. those\n        whose test predicates return true.\n\n        Returns the reinitialized command object.\n        ')), ImportFrom(module='distutils.cmd', names=[alias(name='Command')], level=0), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='command', ctx=Load()), Name(id='Command', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='command_name', ctx=Store())], value=Name(id='command', ctx=Load())), Assign(targets=[Name(id='command', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Name(id='command_name', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='command_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='command', ctx=Load()), attr='get_command_name', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='command', ctx=Load()), attr='finalized', ctx=Load())), body=[Return(value=Name(id='command', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='command', ctx=Load()), attr='initialize_options', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='command', ctx=Load()), attr='finalized', ctx=Store())], value=Constant(value=0)), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='have_run', ctx=Load()), slice=Name(id='command_name', ctx=Load()), ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_command_options', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), If(test=Name(id='reinit_subcommands', ctx=Load()), body=[For(target=Name(id='sub', ctx=Store()), iter=Call(func=Attribute(value=Name(id='command', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reinitialize_command', ctx=Load()), args=[Name(id='sub', ctx=Load()), Name(id='reinit_subcommands', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='command', ctx=Load()))], decorator_list=[]), FunctionDef(name='announce', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='level')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='level', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='run_commands', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        ")), For(target=Name(id='cmd', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='commands', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='run_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Do whatever it takes to run a command (including nothing at all,\n        if the command has already been run).  Specifically: if we have\n        already created and run the command named by 'command', return\n        silently without doing anything.  If the command named by 'command'\n        doesn't even have a command object yet, create one.  Then invoke\n        'run()' on that command object (or an existing one).\n        ")), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='have_run', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='running %s'), Name(id='command', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd_obj', ctx=Load()), attr='ensure_finalized', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd_obj', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='have_run', ctx=Load()), slice=Name(id='command', ctx=Load()), ctx=Store())], value=Constant(value=1))], decorator_list=[]), FunctionDef(name='has_pure_modules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='py_modules', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='has_ext_modules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='ext_modules', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ext_modules', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]))], decorator_list=[]), FunctionDef(name='has_c_libraries', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]))], decorator_list=[]), FunctionDef(name='has_modules', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='has_headers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]))], decorator_list=[]), FunctionDef(name='has_scripts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='scripts', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='scripts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]))], decorator_list=[]), FunctionDef(name='has_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]))], decorator_list=[]), FunctionDef(name='is_pure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='has_c_libraries', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='DistributionMetadata', bases=[], keywords=[], body=[Expr(value=Constant(value='Dummy class to hold the distribution meta-data: name, version,\n    author, and so forth.\n    ')), Assign(targets=[Name(id='_METHOD_BASENAMES', ctx=Store())], value=Tuple(elts=[Constant(value='name'), Constant(value='version'), Constant(value='author'), Constant(value='author_email'), Constant(value='maintainer'), Constant(value='maintainer_email'), Constant(value='url'), Constant(value='license'), Constant(value='description'), Constant(value='long_description'), Constant(value='keywords'), Constant(value='platforms'), Constant(value='fullname'), Constant(value='contact'), Constant(value='contact_email'), Constant(value='classifiers'), Constant(value='download_url'), Constant(value='provides'), Constant(value='requires'), Constant(value='obsoletes')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_pkg_file', ctx=Load()), args=[Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='author', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='author_email', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer_email', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='license', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='long_description', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Store())], value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='read_pkg_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reads the metadata values from a file object.')), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='message_from_file', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), FunctionDef(name='_read_field', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='value', ctx=Load()), Compare(left=Name(id='value', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='UNKNOWN')])]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_read_list', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_all', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='values', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='values', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='metadata_version', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='metadata-version'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='name')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='version')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='summary')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='author', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='author')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='author_email', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='author-email')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer_email', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='home-page')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='license', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='license')], keywords=[])), If(test=Compare(left=Constant(value='download-url'), ops=[In()], comparators=[Name(id='msg', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='download-url')], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='long_description', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='description')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Store())], value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='summary')], keywords=[])), If(test=Compare(left=Constant(value='keywords'), ops=[In()], comparators=[Name(id='msg', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_read_field', ctx=Load()), args=[Constant(value='keywords')], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Store())], value=Call(func=Name(id='_read_list', ctx=Load()), args=[Constant(value='platform')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Store())], value=Call(func=Name(id='_read_list', ctx=Load()), args=[Constant(value='classifier')], keywords=[])), If(test=Compare(left=Name(id='metadata_version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1.1')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Store())], value=Call(func=Name(id='_read_list', ctx=Load()), args=[Constant(value='requires')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Store())], value=Call(func=Name(id='_read_list', ctx=Load()), args=[Constant(value='provides')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Store())], value=Call(func=Name(id='_read_list', ctx=Load()), args=[Constant(value='obsoletes')], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Store())], value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='write_pkg_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write the PKG-INFO file into the release tree.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Constant(value='PKG-INFO')], keywords=[]), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))]), optional_vars=Name(id='pkg_info', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_pkg_file', ctx=Load()), args=[Name(id='pkg_info', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='write_pkg_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write the PKG-INFO format data to a file object.')), Assign(targets=[Name(id='version', ctx=Store())], value=Constant(value='1.0')), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Load())]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Constant(value='1.1'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='Metadata-Version: %s\n'), op=Mod(), right=Name(id='version', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='Name: %s\n'), op=Mod(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='Version: %s\n'), op=Mod(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[]))], keywords=[])), FunctionDef(name='maybe_write', args=arguments(posonlyargs=[], args=[arg(arg='header'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='val', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='header', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='val', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], orelse=[])], decorator_list=[]), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Summary'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_description', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Home-page'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_url', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Author'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_contact', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Author-email'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_contact_email', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='License'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_license', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Download-URL'), Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Description'), Call(func=Name(id='rfc822_escape', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_long_description', ctx=Load()), args=[], keywords=[]), Constant(value='')])], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='maybe_write', ctx=Load()), args=[Constant(value='Keywords'), Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_keywords', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_list', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='Platform'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_platforms', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_list', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='Classifier'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_classifiers', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_list', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='Requires'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_requires', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_list', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='Provides'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_provides', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_list', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='Obsoletes'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_obsoletes', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_write_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file'), arg(arg='name'), arg(arg='values')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='values', ctx=Load()), List(elts=[], ctx=Load())])), For(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}: {}\n'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Constant(value='UNKNOWN')]))], decorator_list=[]), FunctionDef(name='get_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), Constant(value='0.0.0')]))], decorator_list=[]), FunctionDef(name='get_fullname', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}-{}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_author', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='author', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_author_email', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='author_email', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_maintainer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='maintainer', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_maintainer_email', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='maintainer_email', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_contact', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='author', ctx=Load())]))], decorator_list=[]), FunctionDef(name='get_contact_email', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='maintainer_email', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='author_email', ctx=Load())]))], decorator_list=[]), FunctionDef(name='get_url', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_license', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='license', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='get_licence', ctx=Store())], value=Name(id='get_license', ctx=Load())), FunctionDef(name='get_description', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_long_description', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='long_description', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_keywords', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Load()), List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='set_keywords', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store())], value=Call(func=Name(id='_ensure_list', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='keywords')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_platforms', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_platforms', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Store())], value=Call(func=Name(id='_ensure_list', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='platforms')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_classifiers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Load()), List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='set_classifiers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Store())], value=Call(func=Name(id='_ensure_list', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='classifiers')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_download_url', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='download_url', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_requires', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Load()), List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='set_requires', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='distutils.versionpredicate')]), For(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='versionpredicate', ctx=Load()), attr='VersionPredicate', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_provides', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Load()), List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='set_provides', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Import(names=[alias(name='distutils.versionpredicate')]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='versionpredicate', ctx=Load()), attr='split_provision', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_obsoletes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Load()), List(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='set_obsoletes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='distutils.versionpredicate')]), For(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='versionpredicate', ctx=Load()), attr='VersionPredicate', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='fix_help_options', args=arguments(posonlyargs=[], args=[arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a 4-tuple 'help_options' list as found in various command\n    classes to the 3-tuple form required by FancyGetopt.\n    ")), Assign(targets=[Name(id='new_options', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='help_tuple', ctx=Store()), iter=Name(id='options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_options', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='help_tuple', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=3)), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='new_options', ctx=Load()))], decorator_list=[])], type_ignores=[])