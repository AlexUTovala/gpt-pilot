Module(body=[Expr(value=Constant(value='distutils.filelist\n\nProvides the FileList class, used for poking about the filesystem\nand building lists of files.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='functools')]), ImportFrom(module='util', names=[alias(name='convert_path')], level=1), ImportFrom(module='errors', names=[alias(name='DistutilsTemplateError'), alias(name='DistutilsInternalError')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), ClassDef(name='FileList', bases=[], keywords=[], body=[Expr(value=Constant(value="A list of files built by on exploring the filesystem and filtered by\n    applying various patterns to what we find there.\n\n    Instance attributes:\n      dir\n        directory from which files will be taken -- only used if\n        'allfiles' not supplied to constructor\n      files\n        list of filenames currently being built/filtered/manipulated\n      allfiles\n        complete list of files under consideration (ie. without any\n        filtering applied)\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warn'), arg(arg='debug_print')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='set_allfiles', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='allfiles')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Store())], value=Name(id='allfiles', ctx=Load()))], decorator_list=[]), FunctionDef(name='findall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Store())], value=Call(func=Name(id='findall', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='debug_print', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        ")), ImportFrom(module='distutils.debug', names=[alias(name='DEBUG')], level=0), If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sortable_files', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='sort_tuple', ctx=Store()), iter=Name(id='sortable_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='sort_tuple', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='remove_duplicates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_parse_template_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='action', ctx=Store())], value=Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='patterns', ctx=Store()), Name(id='dir', ctx=Store()), Name(id='dir_pattern', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='include'), Constant(value='exclude'), Constant(value='global-include'), Constant(value='global-exclude')], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='DistutilsTemplateError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' expects <pattern1> <pattern2> ..."), op=Mod(), right=Name(id='action', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Subscript(value=Name(id='words', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='recursive-include'), Constant(value='recursive-exclude')], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='DistutilsTemplateError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' expects <dir> <pattern1> <pattern2> ..."), op=Mod(), right=Name(id='action', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dir', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='patterns', ctx=Store())], value=ListComp(elt=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Subscript(value=Name(id='words', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='graft'), Constant(value='prune')], ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='DistutilsTemplateError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' expects a single <dir_pattern>"), op=Mod(), right=Name(id='action', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dir_pattern', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='DistutilsTemplateError', ctx=Load()), args=[BinOp(left=Constant(value="unknown action '%s'"), op=Mod(), right=Name(id='action', ctx=Load()))], keywords=[]))])])]), Return(value=Tuple(elts=[Name(id='action', ctx=Load()), Name(id='patterns', ctx=Load()), Name(id='dir', ctx=Load()), Name(id='dir_pattern', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='process_template_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='action', ctx=Store()), Name(id='patterns', ctx=Store()), Name(id='dir', ctx=Store()), Name(id='dir_pattern', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_template_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='include')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='include '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]))], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='include_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='anchor', value=Constant(value=1))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no files found matching '%s'"), Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='exclude')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='exclude '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]))], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='anchor', value=Constant(value=1))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no previously-included files found matching '%s'"), Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='global-include')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='global-include '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]))], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='include_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='anchor', value=Constant(value=0))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no files found matching '%s' anywhere in distribution"), Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='global-exclude')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='global-exclude '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[]))], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='anchor', value=Constant(value=0))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no previously-included files matching '%s' found anywhere in distribution"), Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='recursive-include')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='recursive-include {} {}'), attr='format', ctx=Load()), args=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='include_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='prefix', value=Name(id='dir', ctx=Load()))])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="warning: no files found matching '%s' under directory '%s'")), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='pattern', ctx=Load()), Name(id='dir', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='recursive-exclude')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='recursive-exclude {} {}'), attr='format', ctx=Load()), args=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='patterns', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[keyword(arg='prefix', value=Name(id='dir', ctx=Load()))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no previously-included files matching '%s' found under directory '%s'"), Name(id='pattern', ctx=Load()), Name(id='dir', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='graft')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='graft '), op=Add(), right=Name(id='dir_pattern', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='include_pattern', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='prefix', value=Name(id='dir_pattern', ctx=Load()))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="warning: no directories found matching '%s'"), Name(id='dir_pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='prune')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value='prune '), op=Add(), right=Name(id='dir_pattern', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='prefix', value=Name(id='dir_pattern', ctx=Load()))])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="no previously-included directories found matching '%s'"), Name(id='dir_pattern', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='DistutilsInternalError', ctx=Load()), args=[BinOp(left=Constant(value="this cannot happen: invalid action '%s'"), op=Mod(), right=Name(id='action', ctx=Load()))], keywords=[]))])])])])])])])])], decorator_list=[]), FunctionDef(name='include_pattern', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='anchor'), arg(arg='prefix'), arg(arg='is_regex')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='Select strings (presumably filenames) from \'self.files\' that\n        match \'pattern\', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the \'fnmatch\' module: \'*\'\n        and \'?\'  match non-special characters, where "special" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If \'anchor\' is true (the default), then the pattern match is more\n        stringent: "*.py" will match "foo.py" but not "foo/bar.py".  If\n        \'anchor\' is false, both of these will match.\n\n        If \'prefix\' is supplied, then only filenames starting with \'prefix\'\n        (itself a pattern) and ending with \'pattern\', with anything in between\n        them, will match.  \'anchor\' is ignored in this case.\n\n        If \'is_regex\' is true, \'anchor\' and \'prefix\' are ignored, and\n        \'pattern\' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return True if files are found, False otherwise.\n        ')), Assign(targets=[Name(id='files_found', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='anchor', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='is_regex', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value="include_pattern: applying regex r'%s'"), op=Mod(), right=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='pattern', ctx=Load()))], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='findall', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value=' adding '), op=Add(), right=Name(id='name', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='files_found', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='files_found', ctx=Load()))], decorator_list=[]), FunctionDef(name='exclude_pattern', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='anchor'), arg(arg='prefix'), arg(arg='is_regex')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value="Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        ")), Assign(targets=[Name(id='files_found', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='anchor', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='is_regex', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value="exclude_pattern: applying regex r'%s'"), op=Mod(), right=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='pattern', ctx=Load()))], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='search', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value=' removing '), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())]), Assign(targets=[Name(id='files_found', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='files_found', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_find_all_simple', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Find all files under 'path'\n    ")), Assign(targets=[Name(id='all_unique', ctx=Store())], value=Call(func=Attribute(value=Name(id='_UniqueDirs', ctx=Load()), attr='filter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='followlinks', value=Constant(value=True))])], keywords=[])), Assign(targets=[Name(id='results', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='file', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Name(id='all_unique', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), Name(id='results', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='_UniqueDirs', bases=[Name(id='set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Exclude previously-seen dirs from walk results,\n    avoiding infinite recursion.\n    Ref https://bugs.python.org/issue44497.\n    ')), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='walk_item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Given an item from an os.walk result, determine\n        if the item represents a unique dir for this instance\n        and if not, prevent further traversal.\n        ')), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store())], value=Name(id='walk_item', ctx=Load())), Assign(targets=[Name(id='stat', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidate', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='stat', ctx=Load()), attr='st_dev', ctx=Load()), Attribute(value=Name(id='stat', ctx=Load()), attr='st_ino', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='found', ctx=Store())], value=Compare(left=Name(id='candidate', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())])), If(test=Name(id='found', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='dirs', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[])), Return(value=UnaryOp(op=Not(), operand=Name(id='found', ctx=Load())))], decorator_list=[]), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='filter', ctx=Load()), args=[Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[]), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='findall', args=arguments(posonlyargs=[], args=[arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Expr(value=Constant(value="\n    Find all files under 'dir' and return the list of full filenames.\n    Unless dir is '.', return full filenames with dir prepended.\n    ")), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='_find_all_simple', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dir', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Name(id='make_rel', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='relpath', ctx=Load())], keywords=[keyword(arg='start', value=Name(id='dir', ctx=Load()))])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='make_rel', ctx=Load()), Name(id='files', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='glob_to_re', args=arguments(posonlyargs=[], args=[arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Translate a shell-like glob pattern to a regular expression; return\n    a string containing the regex.  Differs from \'fnmatch.translate()\' in\n    that \'*\' does not match "special characters" (which are\n    platform-specific).\n    ')), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sep', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='sep', ctx=Store())], value=Constant(value='\\\\\\\\'))], orelse=[]), Assign(targets=[Name(id='escaped', ctx=Store())], value=BinOp(left=Constant(value='\\1[^%s]'), op=Mod(), right=Name(id='sep', ctx=Load()))), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='((?<!\\\\)(\\\\\\\\)*)\\.'), Name(id='escaped', ctx=Load()), Name(id='pattern_re', ctx=Load())], keywords=[])), Return(value=Name(id='pattern_re', ctx=Load()))], decorator_list=[]), FunctionDef(name='translate_pattern', args=arguments(posonlyargs=[], args=[arg(arg='pattern'), arg(arg='anchor'), arg(arg='prefix'), arg(arg='is_regex')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value="Translate a shell-like wildcard pattern to a compiled regular\n    expression.  Return the compiled regex.  If 'is_regex' true,\n    then 'pattern' is directly compiled to a regex (if it's a string)\n    or just returned as-is (assumes it's a regex object).\n    ")), If(test=Name(id='is_regex', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='pattern', ctx=Load()))])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='_', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='glob_to_re', ctx=Load()), args=[Constant(value='_')], keywords=[]), attr='partition', ctx=Load()), args=[Constant(value='_')], keywords=[])), If(test=Name(id='pattern', ctx=Load()), body=[Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Name(id='glob_to_re', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), Assert(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pattern_re', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[])]))], orelse=[Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Constant(value=''))]), If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='prefix_re', ctx=Store())], value=Call(func=Name(id='glob_to_re', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), Assert(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='prefix_re', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='prefix_re', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='prefix_re', ctx=Store())], value=Subscript(value=Name(id='prefix_re', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix_re', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='sep', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='sep', ctx=Store())], value=Constant(value='\\\\'))], orelse=[]), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Subscript(value=Name(id='pattern_re', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[]), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pattern_re', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}\\A{}{}.*{}{}'), attr='format', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='prefix_re', ctx=Load()), Name(id='sep', ctx=Load()), Name(id='pattern_re', ctx=Load()), Name(id='end', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='anchor', ctx=Load()), body=[Assign(targets=[Name(id='pattern_re', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}\\A{}'), attr='format', ctx=Load()), args=[Name(id='start', ctx=Load()), Subscript(value=Name(id='pattern_re', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern_re', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])