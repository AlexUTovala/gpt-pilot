Module(body=[Expr(value=Constant(value='distutils.fancy_getopt\n\nWrapper around the standard getopt module that provides the following\nadditional features:\n  * short and long options are tied together\n  * options have help strings, so fancy_getopt could potentially\n    create a complete usage summary\n  * options set attributes of a passed-in object\n')), Import(names=[alias(name='sys')]), Import(names=[alias(name='string')]), Import(names=[alias(name='re')]), Import(names=[alias(name='getopt')]), ImportFrom(module='errors', names=[alias(name='DistutilsGetoptError'), alias(name='DistutilsArgError')], level=1), Assign(targets=[Name(id='longopt_pat', ctx=Store())], value=Constant(value='[a-zA-Z](?:[a-zA-Z0-9-]*)')), Assign(targets=[Name(id='longopt_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=Constant(value='^%s$'), op=Mod(), right=Name(id='longopt_pat', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='neg_alias_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='^({})=!({})$'), attr='format', ctx=Load()), args=[Name(id='longopt_pat', ctx=Load()), Name(id='longopt_pat', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='longopt_xlate', ctx=Store())], value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='maketrans', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), ClassDef(name='FancyGetopt', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrapper around the standard \'getopt()\' module that provides some\n    handy extra functionality:\n      * short and long options are tied together\n      * options have help strings, and help text can be assembled\n        from them\n      * options set attributes of a passed-in object\n      * boolean options can have "negative aliases" -- eg. if\n        --quiet is the "negative alias" of --verbose, then "--quiet"\n        on the command line sets \'verbose\' to false\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option_table')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Store())], value=Name(id='option_table', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alias', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='negative_alias', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='short_opts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='long_opts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='short2long', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attr_name', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='option_order', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='_build_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), For(target=Name(id='option', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load()), slice=Subscript(value=Name(id='option', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='option', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='set_option_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option_table')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Store())], value=Name(id='option_table', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_index', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='add_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='long_option'), arg(arg='short_option'), arg(arg='help_string')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='long_option', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="option conflict: already an option '%s'"), op=Mod(), right=Name(id='long_option', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='option', ctx=Store())], value=Tuple(elts=[Name(id='long_option', ctx=Load()), Name(id='short_option', ctx=Load()), Name(id='help_string', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load()), slice=Name(id='long_option', ctx=Load()), ctx=Store())], value=Name(id='option', ctx=Load()))])], decorator_list=[]), FunctionDef(name='has_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='long_option')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return true if the option table for this parser has an\n        option with long name 'long_option'.")), Return(value=Compare(left=Name(id='long_option', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load())]))], decorator_list=[]), FunctionDef(name='get_attr_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='long_option')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Translate long option name 'long_option' to the form it\n        has as an attribute of some object: ie., translate hyphens\n        to underscores.")), Return(value=Call(func=Attribute(value=Name(id='long_option', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='longopt_xlate', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_check_alias_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='aliases'), arg(arg='what')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='aliases', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='alias', ctx=Store()), Name(id='opt', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='aliases', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='alias', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid %s '%s': option '%s' not defined"), op=Mod(), right=Tuple(elts=[Name(id='what', ctx=Load()), Name(id='alias', ctx=Load()), Name(id='alias', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='option_index', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid %s '%s': aliased option '%s' not defined"), op=Mod(), right=Tuple(elts=[Name(id='what', ctx=Load()), Name(id='alias', ctx=Load()), Name(id='opt', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='set_aliases', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='alias')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the aliases for this option parser.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_alias_dict', ctx=Load()), args=[Name(id='alias', ctx=Load()), Constant(value='alias')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='alias', ctx=Store())], value=Name(id='alias', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_negative_aliases', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='negative_alias')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Set the negative aliases for this option parser.\n        'negative_alias' should be a dictionary mapping option names to\n        option names, both the key and value must already be defined\n        in the option table.")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_alias_dict', ctx=Load()), args=[Name(id='negative_alias', ctx=Load()), Constant(value='negative alias')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='negative_alias', ctx=Store())], value=Name(id='negative_alias', ctx=Load()))], decorator_list=[]), FunctionDef(name='_grok_option_table', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Populate the various data structures that keep tabs on the\n        option table.  Called by 'getopt()' before it can do anything\n        worthwhile.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='long_opts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='short_opts', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='short2long', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repeat', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='option', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Tuple(elts=[Name(id='long', ctx=Store()), Name(id='short', ctx=Store()), Name(id='help', ctx=Store())], ctx=Store())], value=Name(id='option', ctx=Load())), Assign(targets=[Name(id='repeat', ctx=Store())], value=Constant(value=0))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]), body=[Assign(targets=[Tuple(elts=[Name(id='long', ctx=Store()), Name(id='short', ctx=Store()), Name(id='help', ctx=Store()), Name(id='repeat', ctx=Store())], ctx=Store())], value=Name(id='option', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='invalid option tuple: {!r}'), attr='format', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[])], keywords=[]))])]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='long', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)])]), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid long option '%s': must be a string of length >= 2"), op=Mod(), right=Name(id='long', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Compare(left=Name(id='short', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='short', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='short', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])])])), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid short option '%s': must a single character or None"), op=Mod(), right=Name(id='short', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='repeat', ctx=Load()), slice=Name(id='long', ctx=Load()), ctx=Store())], value=Name(id='repeat', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='long_opts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='long', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')]), body=[If(test=Name(id='short', ctx=Load()), body=[Assign(targets=[Name(id='short', ctx=Store())], value=BinOp(left=Name(id='short', ctx=Load()), op=Add(), right=Constant(value=':')))], orelse=[]), Assign(targets=[Name(id='long', ctx=Store())], value=Subscript(value=Name(id='long', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='long', ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[Assign(targets=[Name(id='alias_to', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='negative_alias', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='alias_to', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='alias_to', ctx=Load()), ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid negative alias '%s': aliased option '%s' takes a value"), op=Mod(), right=Tuple(elts=[Name(id='long', ctx=Load()), Name(id='alias_to', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='long_opts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Name(id='long', ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='long', ctx=Load()), ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='alias_to', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alias', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='alias_to', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='long', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='alias_to', ctx=Load()), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid alias '%s': inconsistent with aliased option '%s' (one of them takes a value, the other doesn't"), op=Mod(), right=Tuple(elts=[Name(id='long', ctx=Load()), Name(id='alias_to', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='longopt_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsGetoptError', ctx=Load()), args=[BinOp(left=Constant(value="invalid long option name '%s' (must be letters, numbers, hyphens only"), op=Mod(), right=Name(id='long', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='attr_name', ctx=Load()), slice=Name(id='long', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_attr_name', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), If(test=Name(id='short', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='short_opts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='short', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='short2long', ctx=Load()), slice=Subscript(value=Name(id='short', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Name(id='long', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='getopt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args'), arg(arg='object')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Parse command-line options in args. Store as attributes on object.\n\n        If 'args' is None or not supplied, uses 'sys.argv[1:]'.  If\n        'object' is None or not supplied, creates a new OptionDummy\n        object, stores option values there, and returns a tuple (args,\n        object).  If 'object' is supplied, it is modified in place and\n        'getopt()' just returns 'args'; in both cases, the returned\n        'args' is a modified copy of the passed-in 'args' list, which\n        is left untouched.\n        ")), If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='object', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='object', ctx=Store())], value=Call(func=Name(id='OptionDummy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='created_object', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='created_object', ctx=Store())], value=Constant(value=False))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_grok_option_table', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='short_opts', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='short_opts', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='opts', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='getopt', ctx=Load()), attr='getopt', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='short_opts', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='long_opts', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='getopt', ctx=Load()), attr='error', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), For(target=Tuple(elts=[Name(id='opt', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Name(id='opts', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='opt', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')])]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='short2long', ctx=Load()), slice=Subscript(value=Name(id='opt', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load()))], orelse=[Assert(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='opt', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='--')])])), Assign(targets=[Name(id='opt', ctx=Store())], value=Subscript(value=Name(id='opt', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))]), Assign(targets=[Name(id='alias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='alias', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[])), If(test=Name(id='alias', ctx=Load()), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Name(id='alias', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='takes_arg', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Load())), body=[Assert(test=Compare(left=Name(id='val', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), msg=Constant(value="boolean option can't have value")), Assign(targets=[Name(id='alias', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='negative_alias', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='opt', ctx=Load())], keywords=[])), If(test=Name(id='alias', ctx=Load()), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=Name(id='alias', ctx=Load())), Assign(targets=[Name(id='val', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='val', ctx=Store())], value=Constant(value=1))])], orelse=[]), Assign(targets=[Name(id='attr', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='attr_name', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='val', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='repeat', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=BinOp(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='object', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=0)], keywords=[]), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='object', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='val', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_order', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='opt', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='created_object', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='args', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()))], orelse=[Return(value=Name(id='args', ctx=Load()))])], decorator_list=[]), FunctionDef(name='get_option_order', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the list of (option, value) tuples processed by the\n        previous run of 'getopt()'.  Raises RuntimeError if\n        'getopt()' hasn't been called yet.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='option_order', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="'getopt()' hasn't been called yet")], keywords=[]))], orelse=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_order', ctx=Load()))])], decorator_list=[]), FunctionDef(name='generate_help', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Generate help text (a list of strings, one per suggested line of\n        output) from the option table for this FancyGetopt object.\n        ')), Assign(targets=[Name(id='max_opt', ctx=Store())], value=Constant(value=0)), For(target=Name(id='option', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), body=[Assign(targets=[Name(id='long', ctx=Store())], value=Subscript(value=Name(id='option', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='short', ctx=Store())], value=Subscript(value=Name(id='option', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='ell', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='long', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='long', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')]), body=[Assign(targets=[Name(id='ell', ctx=Store())], value=BinOp(left=Name(id='ell', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='short', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ell', ctx=Store())], value=BinOp(left=Name(id='ell', ctx=Load()), op=Add(), right=Constant(value=5)))], orelse=[]), If(test=Compare(left=Name(id='ell', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_opt', ctx=Load())]), body=[Assign(targets=[Name(id='max_opt', ctx=Store())], value=Name(id='ell', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='opt_width', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='max_opt', ctx=Load()), op=Add(), right=Constant(value=2)), op=Add(), right=Constant(value=2)), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='line_width', ctx=Store())], value=Constant(value=78)), Assign(targets=[Name(id='text_width', ctx=Store())], value=BinOp(left=Name(id='line_width', ctx=Load()), op=Sub(), right=Name(id='opt_width', ctx=Load()))), Assign(targets=[Name(id='big_indent', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='opt_width', ctx=Load()))), If(test=Name(id='header', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Name(id='header', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Constant(value='Option summary:')], ctx=Load()))]), For(target=Name(id='option', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='option_table', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='long', ctx=Store()), Name(id='short', ctx=Store()), Name(id='help', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='option', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load())), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='wrap_text', ctx=Load()), args=[Name(id='help', ctx=Load()), Name(id='text_width', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='long', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')]), body=[Assign(targets=[Name(id='long', ctx=Store())], value=Subscript(value=Name(id='long', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='short', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='text', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  --%-*s  %s'), op=Mod(), right=Tuple(elts=[Name(id='max_opt', ctx=Load()), Name(id='long', ctx=Load()), Subscript(value=Name(id='text', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  --%-*s  '), op=Mod(), right=Tuple(elts=[Name(id='max_opt', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[Assign(targets=[Name(id='opt_names', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} (-{})'), attr='format', ctx=Load()), args=[Name(id='long', ctx=Load()), Name(id='short', ctx=Load())], keywords=[])), If(test=Name(id='text', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  --%-*s  %s'), op=Mod(), right=Tuple(elts=[Name(id='max_opt', ctx=Load()), Name(id='opt_names', ctx=Load()), Subscript(value=Name(id='text', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  --%-*s'), op=Mod(), right=Name(id='opt_names', ctx=Load()))], keywords=[]))])]), For(target=Name(id='ell', ctx=Store()), iter=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='big_indent', ctx=Load()), op=Add(), right=Name(id='ell', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[]), FunctionDef(name='print_help', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()))], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='generate_help', ctx=Load()), args=[Name(id='header', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='fancy_getopt', args=arguments(posonlyargs=[], args=[arg(arg='options'), arg(arg='negative_opt'), arg(arg='object'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='FancyGetopt', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set_negative_aliases', ctx=Load()), args=[Name(id='negative_opt', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='getopt', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='object', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='WS_TRANS', ctx=Store())], value=DictComp(key=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='_wschar', ctx=Load())], keywords=[]), value=Constant(value=' '), generators=[comprehension(target=Name(id='_wschar', ctx=Store()), iter=Attribute(value=Name(id='string', ctx=Load()), attr='whitespace', ctx=Load()), ifs=[], is_async=0)])), FunctionDef(name='wrap_text', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='width')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="wrap_text(text : string, width : int) -> [string]\n\n    Split 'text' into multiple lines of no more than 'width' characters\n    each, and return the list of strings that results.\n    ")), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='width', ctx=Load())]), body=[Return(value=List(elts=[Name(id='text', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='expandtabs', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='WS_TRANS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='chunks', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='( +|-+)'), Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='chunks', ctx=Store())], value=ListComp(elt=Name(id='ch', ctx=Load()), generators=[comprehension(target=Name(id='ch', ctx=Store()), iter=Name(id='chunks', ctx=Load()), ifs=[Name(id='ch', ctx=Load())], is_async=0)])), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Name(id='chunks', ctx=Load()), body=[Assign(targets=[Name(id='cur_line', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='cur_len', ctx=Store())], value=Constant(value=0)), While(test=Name(id='chunks', ctx=Load()), body=[Assign(targets=[Name(id='ell', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=BinOp(left=Name(id='cur_len', ctx=Load()), op=Add(), right=Name(id='ell', ctx=Load())), ops=[LtE()], comparators=[Name(id='width', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='cur_line', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Del())]), Assign(targets=[Name(id='cur_len', ctx=Store())], value=BinOp(left=Name(id='cur_len', ctx=Load()), op=Add(), right=Name(id='ell', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='cur_line', ctx=Load()), Compare(left=Subscript(value=Subscript(value=Name(id='cur_line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')])]), body=[Delete(targets=[Subscript(value=Name(id='cur_line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())])], orelse=[]), Break()])], orelse=[]), If(test=Name(id='chunks', ctx=Load()), body=[If(test=Compare(left=Name(id='cur_len', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cur_line', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='width', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(lower=Name(id='width', ctx=Load())), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Delete(targets=[Subscript(value=Name(id='chunks', ctx=Load()), slice=Constant(value=0), ctx=Del())])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='cur_line', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[]), FunctionDef(name='translate_longopt', args=arguments(posonlyargs=[], args=[arg(arg='opt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a long option name to a valid Python identifier by\n    changing "-" to "_".\n    ')), Return(value=Call(func=Attribute(value=Name(id='opt', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='longopt_xlate', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='OptionDummy', bases=[], keywords=[], body=[Expr(value=Constant(value='Dummy class just used as a place to hold command-line option\n    values as instance attributes.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Expr(value=Constant(value="Create a new OptionDummy instance.  The attributes listed in\n        'options' will be initialized to None.")), For(target=Name(id='opt', ctx=Store()), iter=Name(id='options', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Constant(value='Tra-la-la, supercalifragilisticexpialidocious.\nHow *do* you spell that odd word, anyways?\n(Someone ask Mary -- she\'ll know [or she\'ll\nsay, "How should I know?"].)')), For(target=Name(id='w', ctx=Store()), iter=Tuple(elts=[Constant(value=10), Constant(value=20), Constant(value=30), Constant(value=40)], ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='width: %d'), op=Mod(), right=Name(id='w', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='wrap_text', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='w', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], type_ignores=[])