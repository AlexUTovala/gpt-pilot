Module(body=[Expr(value=Constant(value='distutils.command.config\n\nImplements the Distutils \'config\' command, a (mostly) empty command class\nthat exists mainly to be sub-classed by specific module distributions and\napplications.  The idea is that while every "config" command is different,\nat least they\'re all named the same, and users always see "config" in the\nlist of standard commands.  Also, this is a good place to put common\nconfigure-like tasks: "try to compile this C code", or "figure out where\nthis header file lives".\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsExecError')], level=2), ImportFrom(module='sysconfig', names=[alias(name='customize_compiler')], level=2), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), Assign(targets=[Name(id='LANG_EXT', ctx=Store())], value=Dict(keys=[Constant(value='c'), Constant(value='c++')], values=[Constant(value='.c'), Constant(value='.cxx')])), ClassDef(name='config', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='prepare to build')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='compiler='), Constant(value=None), Constant(value='specify the compiler type')], ctx=Load()), Tuple(elts=[Constant(value='cc='), Constant(value=None), Constant(value='specify the compiler executable')], ctx=Load()), Tuple(elts=[Constant(value='include-dirs='), Constant(value='I'), Constant(value='list of directories to search for header files')], ctx=Load()), Tuple(elts=[Constant(value='define='), Constant(value='D'), Constant(value='C preprocessor macros to define')], ctx=Load()), Tuple(elts=[Constant(value='undef='), Constant(value='U'), Constant(value='C preprocessor macros to undefine')], ctx=Load()), Tuple(elts=[Constant(value='libraries='), Constant(value='l'), Constant(value='external C libraries to link with')], ctx=Load()), Tuple(elts=[Constant(value='library-dirs='), Constant(value='L'), Constant(value='directories to search for external C libraries')], ctx=Load()), Tuple(elts=[Constant(value='noisy'), Constant(value=None), Constant(value='show every action (compile, link, run, ...) taken')], ctx=Load()), Tuple(elts=[Constant(value='dump-source'), Constant(value=None), Constant(value='dump generated source files before attempting to compile them')], ctx=Load())], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='noisy', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dump_source', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='include_dirs', ctx=Load()), List(elts=[], ctx=Load())]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load())], ctx=Load()))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='_check_compiler', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check that 'self.compiler' really is a CCompiler object;\n        if not, make it one.\n        ")), ImportFrom(module='ccompiler', names=[alias(name='CCompiler'), alias(name='new_compiler')], level=2), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), Name(id='CCompiler', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Store())], value=Call(func=Name(id='new_compiler', ctx=Load()), args=[], keywords=[keyword(arg='compiler', value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load())), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), keyword(arg='force', value=Constant(value=1))])), Expr(value=Call(func=Name(id='customize_compiler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_include_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_libraries', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_library_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_gen_temp_sourcefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=BinOp(left=Constant(value='_configtest'), op=Add(), right=Subscript(value=Name(id='LANG_EXT', ctx=Load()), slice=Name(id='lang', ctx=Load()), ctx=Load()))), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[If(test=Name(id='headers', ctx=Load()), body=[For(target=Name(id='header', ctx=Store()), iter=Name(id='headers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='#include <%s>\n'), op=Mod(), right=Name(id='header', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='body', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\n')]), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])]), Return(value=Name(id='filename', ctx=Load()))], decorator_list=[]), FunctionDef(name='_preprocess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gen_temp_sourcefile', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), Assign(targets=[Name(id='out', ctx=Store())], value=Constant(value='_configtest.i')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Name(id='src', ctx=Load()), Name(id='out', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='preprocess', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='out', ctx=Load())], keywords=[keyword(arg='include_dirs', value=Name(id='include_dirs', ctx=Load()))])), Return(value=Tuple(elts=[Name(id='src', ctx=Load()), Name(id='out', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gen_temp_sourcefile', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dump_source', ctx=Load()), body=[Expr(value=Call(func=Name(id='dump_file', ctx=Load()), args=[Name(id='src', ctx=Load()), BinOp(left=Constant(value="compiling '%s':"), op=Mod(), right=Name(id='src', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='object_filenames', ctx=Load()), args=[List(elts=[Name(id='src', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Name(id='src', ctx=Load()), Name(id='obj', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='compile', ctx=Load()), args=[List(elts=[Name(id='src', ctx=Load())], ctx=Load())], keywords=[keyword(arg='include_dirs', value=Name(id='include_dirs', ctx=Load()))])), Return(value=Tuple(elts=[Name(id='src', ctx=Load()), Name(id='obj', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compile', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prog', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='link_executable', ctx=Load()), args=[List(elts=[Name(id='obj', ctx=Load())], ctx=Load()), Name(id='prog', ctx=Load())], keywords=[keyword(arg='libraries', value=Name(id='libraries', ctx=Load())), keyword(arg='library_dirs', value=Name(id='library_dirs', ctx=Load())), keyword(arg='target_lang', value=Name(id='lang', ctx=Load()))])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='exe_extension', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='prog', ctx=Store())], value=BinOp(left=Name(id='prog', ctx=Load()), op=Add(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='exe_extension', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='prog', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='src', ctx=Load()), Name(id='obj', ctx=Load()), Name(id='prog', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_clean', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='filenames'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='filenames', ctx=Load())), body=[Assign(targets=[Name(id='filenames', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='temp_files', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='removing: %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='filenames', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='try_cpp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Construct a source file from 'body' (a string containing lines\n        of C/C++ code) and 'headers' (a list of header files to include)\n        and run it through the preprocessor.  Return true if the\n        preprocessor succeeded, false if there were any errors.\n        ('body' probably isn't of much use, but what the heck.)\n        ")), ImportFrom(module='ccompiler', names=[alias(name='CompileError')], level=2), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True)), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_preprocess', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='CompileError', ctx=Load()), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_clean', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='search_cpp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Construct a source file (just like 'try_cpp()'), run it through\n        the preprocessor, and return true if any line of the output matches\n        'pattern'.  'pattern' should either be a compiled regex object or a\n        string containing a regex.  If both 'body' and 'headers' are None,\n        preprocesses an empty file -- which can be useful to determine the\n        symbols the preprocessor and compiler set by default.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='out', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_preprocess', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[Assign(targets=[Name(id='match', ctx=Store())], value=Constant(value=False)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Break()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_clean', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='match', ctx=Load()))], decorator_list=[]), FunctionDef(name='try_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Try to compile a source file built from 'body' and 'headers'.\n        Return true on success, false otherwise.\n        ")), ImportFrom(module='ccompiler', names=[alias(name='CompileError')], level=2), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_compile', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='CompileError', ctx=Load()), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='ok', ctx=Load()), Constant(value='success!')]), Constant(value='failure.')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_clean', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='try_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Try to compile and link a source file, built from 'body' and\n        'headers', to executable form.  Return true on success, false\n        otherwise.\n        ")), ImportFrom(module='ccompiler', names=[alias(name='CompileError'), alias(name='LinkError')], level=2), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='CompileError', ctx=Load()), Name(id='LinkError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='ok', ctx=Load()), Constant(value='success!')]), Constant(value='failure.')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_clean', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='try_run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Try to compile, link to an executable, and run a program\n        built from 'body' and 'headers'.  Return true on success, false\n        otherwise.\n        ")), ImportFrom(module='ccompiler', names=[alias(name='CompileError'), alias(name='LinkError')], level=2), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='obj', ctx=Store()), Name(id='exe', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='lang', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[List(elts=[Name(id='exe', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='CompileError', ctx=Load()), Name(id='LinkError', ctx=Load()), Name(id='DistutilsExecError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='ok', ctx=Load()), Constant(value='success!')]), Constant(value='failure.')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_clean', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='check_func', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='decl'), arg(arg='call')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='Determine if function \'func\' is available by constructing a\n        source file that refers to \'func\', and compiles and links it.\n        If everything succeeds, returns true; otherwise returns false.\n\n        The constructed source file starts out by including the header\n        files listed in \'headers\'.  If \'decl\' is true, it then declares\n        \'func\' (as "int func()"); you probably shouldn\'t supply \'headers\'\n        and set \'decl\' true in the same call, or you might get errors about\n        a conflicting declarations for \'func\'.  Finally, the constructed\n        \'main()\' function either references \'func\' or (if \'call\' is true)\n        calls it.  \'libraries\' and \'library_dirs\' are used when\n        linking.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='body', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='decl', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='int %s ();'), op=Mod(), right=Name(id='func', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='int main () {')], keywords=[])), If(test=Name(id='call', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  %s();'), op=Mod(), right=Name(id='func', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  %s;'), op=Mod(), right=Name(id='func', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='}')], keywords=[])), Assign(targets=[Name(id='body', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n'))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='try_link', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_lib', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='library'), arg(arg='library_dirs'), arg(arg='headers'), arg(arg='include_dirs'), arg(arg='other_libraries')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), List(elts=[], ctx=Load())]), body=[Expr(value=Constant(value="Determine if 'library' is available to be linked against,\n        without actually checking that any particular symbols are provided\n        by it.  'headers' will be used in constructing the source file to\n        be compiled, but the only effect of this is to check if all the\n        header files listed are available.  Any libraries listed in\n        'other_libraries' will be included in the link, in case 'library'\n        has symbols that depend on other libraries.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compiler', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='try_link', ctx=Load()), args=[Constant(value='int main (void) { }'), Name(id='headers', ctx=Load()), Name(id='include_dirs', ctx=Load()), BinOp(left=List(elts=[Name(id='library', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='other_libraries', ctx=Load())), Name(id='library_dirs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header'), arg(arg='include_dirs'), arg(arg='library_dirs'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='c')]), body=[Expr(value=Constant(value="Determine if the system header file named by 'header_file'\n        exists and can be found by the preprocessor; return true if so,\n        false otherwise.\n        ")), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='try_cpp', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Constant(value='/* No body */')), keyword(arg='headers', value=List(elts=[Name(id='header', ctx=Load())], ctx=Load())), keyword(arg='include_dirs', value=Name(id='include_dirs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='dump_file', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='head')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Dumps a file content into log.info.\n\n    If head is not None, will be dumped before the file content.\n    ')), If(test=Compare(left=Name(id='head', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s'), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], type_ignores=[])