Module(body=[Expr(value=Constant(value="distutils.command.register\n\nImplements the Distutils 'register' command (register with the repository).\n")), Import(names=[alias(name='getpass')]), Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='urllib.request')]), ImportFrom(module='warnings', names=[alias(name='warn')], level=0), ImportFrom(module='core', names=[alias(name='PyPIRCCommand')], level=2), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), ClassDef(name='register', bases=[Name(id='PyPIRCCommand', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='register the distribution with the Python package index')), Assign(targets=[Name(id='user_options', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='PyPIRCCommand', ctx=Load()), attr='user_options', ctx=Load()), op=Add(), right=List(elts=[Tuple(elts=[Constant(value='list-classifiers'), Constant(value=None), Constant(value='list the valid Trove classifiers')], ctx=Load()), Tuple(elts=[Constant(value='strict'), Constant(value=None), Constant(value='Will stop the registering if the meta-data are not fully compliant')], ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='PyPIRCCommand', ctx=Load()), attr='boolean_options', ctx=Load()), op=Add(), right=List(elts=[Constant(value='verify'), Constant(value='list-classifiers'), Constant(value='strict')], ctx=Load()))), Assign(targets=[Name(id='sub_commands', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='check'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], ctx=Load())], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='PyPIRCCommand', ctx=Load()), attr='initialize_options', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='list_classifiers', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strict', ctx=Store())], value=Constant(value=0))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='PyPIRCCommand', ctx=Load()), attr='finalize_options', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='check_options', ctx=Store())], value=Dict(keys=[Constant(value='strict'), Constant(value='restructuredtext')], values=[Tuple(elts=[Constant(value='register'), Attribute(value=Name(id='self', ctx=Load()), attr='strict', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='register'), Constant(value=1)], ctx=Load())])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='command_options', ctx=Load()), slice=Constant(value='check'), ctx=Store())], value=Name(id='check_options', ctx=Load()))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize_options', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_config', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='verify_metadata', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='list_classifiers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='classifiers', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_metadata', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='check_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deprecated API.')), Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value='distutils.command.register.check_metadata is deprecated; use the check command instead'), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='check', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Constant(value='check')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='ensure_finalized', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='check', ctx=Load()), attr='strict', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='strict', ctx=Load())), Assign(targets=[Attribute(value=Name(id='check', ctx=Load()), attr='restructuredtext', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_set_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reads the configuration file and set attributes.')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_pypirc', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='config', ctx=Load()), ops=[NotEq()], comparators=[Dict(keys=[], values=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='username', ctx=Store())], value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='username'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Store())], value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='password'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Store())], value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='repository'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='realm', ctx=Store())], value=Subscript(value=Name(id='config', ctx=Load()), slice=Constant(value='realm'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='has_config', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='pypi'), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s not found in .pypirc'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pypi')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='has_config', ctx=Store())], value=Constant(value=False))])], decorator_list=[]), FunctionDef(name='classifiers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fetch the list of classifiers from the server.')), Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load()), op=Add(), right=Constant(value='?:action=list_classifiers'))), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='urlopen', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_pypi_response', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='verify_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Send the metadata to the package index server to be checked.')), Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='post_to_server', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_post_data', ctx=Load()), args=[Constant(value='verify')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Server response (%s): %s'), Name(id='code', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='send_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Send the metadata to the package index server.\n\n        Well, do the following:\n        1. figure who the user is, and then\n        2. send the data as a Basic auth'ed POST.\n\n        First we try to read the username/password from $HOME/.pypirc,\n        which is a ConfigParser-formatted file with a section\n        [distutils] containing username and password entries (both\n        in clear text). Eg:\n\n            [distutils]\n            index-servers =\n                pypi\n\n            [pypi]\n            username: fred\n            password: sekrit\n\n        Otherwise, to figure who the user is, we offer the user three\n        choices:\n\n         1. use existing login,\n         2. register as a new user, or\n         3. set the password to a random string and email the user.\n\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='has_config', ctx=Load()), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Constant(value='1')), Assign(targets=[Name(id='username', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='username', ctx=Load())), Assign(targets=[Name(id='password', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Load()))], orelse=[Assign(targets=[Name(id='choice', ctx=Store())], value=Constant(value='x')), Assign(targets=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='choices', ctx=Store())], value=Call(func=Attribute(value=Constant(value='1 2 3 4'), attr='split', ctx=Load()), args=[], keywords=[])), While(test=Compare(left=Name(id='choice', ctx=Load()), ops=[NotIn()], comparators=[Name(id='choices', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='We need to know who you are, so please choose either:\n 1. use your existing login,\n 2. register as a new user,\n 3. have the server generate a new password for you (and email it to you), or\n 4. quit\nYour selection [default 1]: '), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='choice', ctx=Load())), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Constant(value='1'))], orelse=[If(test=Compare(left=Name(id='choice', ctx=Load()), ops=[NotIn()], comparators=[Name(id='choices', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Please choose one of the four options!')], keywords=[]))], orelse=[])])], orelse=[]), If(test=Compare(left=Name(id='choice', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1')]), body=[While(test=UnaryOp(op=Not(), operand=Name(id='username', ctx=Load())), body=[Assign(targets=[Name(id='username', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Username: ')], keywords=[]))], orelse=[]), While(test=UnaryOp(op=Not(), operand=Name(id='password', ctx=Load())), body=[Assign(targets=[Name(id='password', ctx=Store())], value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getpass', ctx=Load()), args=[Constant(value='Password: ')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='auth', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='HTTPPasswordMgr', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='host', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='auth', ctx=Load()), attr='add_password', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='realm', ctx=Load()), Name(id='host', ctx=Load()), Name(id='username', ctx=Load()), Name(id='password', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='post_to_server', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_post_data', ctx=Load()), args=[Constant(value='submit')], keywords=[]), Name(id='auth', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Server response ({}): {}'), attr='format', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=200)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='has_config', ctx=Load()), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='password', ctx=Store())], value=Name(id='password', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='I can store your PyPI login so future submissions will be faster.'), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value='(the login will be stored in %s)'), op=Mod(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_rc_file', ctx=Load()), args=[], keywords=[])), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[])), Assign(targets=[Name(id='choice', ctx=Store())], value=Constant(value='X')), While(test=Compare(left=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Constant(value='yn')]), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Save your login (y/N)?')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='choice', ctx=Load())), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Constant(value='n'))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='y')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_store_pypirc', ctx=Load()), args=[Name(id='username', ctx=Load()), Name(id='password', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[If(test=Compare(left=Name(id='choice', ctx=Load()), ops=[Eq()], comparators=[Constant(value='2')]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value=':action')], values=[Constant(value='user')])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Store()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Store()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Store())], value=Constant(value='')), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Store())], value=Constant(value=None)), While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Username: ')], keywords=[]))], orelse=[]), While(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Load())]), body=[While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Store())], value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getpass', ctx=Load()), args=[Constant(value='Password: ')], keywords=[]))], orelse=[]), While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Store())], value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getpass', ctx=Load()), args=[Constant(value=' Confirm: ')], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='password'), ctx=Store())], value=Constant(value='')), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='confirm'), ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value="Password and confirm don't match!")], keywords=[]))], orelse=[])], orelse=[]), While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='   EMail: ')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='post_to_server', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=200)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Server response (%s): %s'), Name(id='code', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='You will receive an email shortly.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Follow the instructions in it to complete registration.')], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='choice', ctx=Load()), ops=[Eq()], comparators=[Constant(value='3')]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value=':action')], values=[Constant(value='password_reset')])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Store())], value=Constant(value='')), While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='email'), ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Constant(value='Your email address: ')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='post_to_server', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Server response (%s): %s'), Name(id='code', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], orelse=[])])])], decorator_list=[]), FunctionDef(name='build_post_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='action')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='meta', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value=':action'), Constant(value='metadata_version'), Constant(value='name'), Constant(value='version'), Constant(value='summary'), Constant(value='home_page'), Constant(value='author'), Constant(value='author_email'), Constant(value='license'), Constant(value='description'), Constant(value='keywords'), Constant(value='platform'), Constant(value='classifiers'), Constant(value='download_url'), Constant(value='provides'), Constant(value='requires'), Constant(value='obsoletes')], values=[Name(id='action', ctx=Load()), Constant(value='1.0'), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_description', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_url', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_contact', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_contact_email', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_licence', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_long_description', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_keywords', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_platforms', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_classifiers', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_download_url', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_provides', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_requires', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='get_obsoletes', ctx=Load()), args=[], keywords=[])])), If(test=BoolOp(op=Or(), values=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='provides'), ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='requires'), ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='obsoletes'), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='metadata_version'), ctx=Store())], value=Constant(value='1.1'))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='post_to_server', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='auth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Post a query to the server, and return a string response.')), If(test=Compare(left=Constant(value='name'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Registering {} to {}'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load())], keywords=[]), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='boundary', ctx=Store())], value=Constant(value='--------------GHSKFJDLGDS7543FJKLFHRE75642756743254')), Assign(targets=[Name(id='sep_boundary', ctx=Store())], value=BinOp(left=Constant(value='\n--'), op=Add(), right=Name(id='boundary', ctx=Load()))), Assign(targets=[Name(id='end_boundary', ctx=Store())], value=BinOp(left=Name(id='sep_boundary', ctx=Load()), op=Add(), right=Constant(value='--'))), Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), Call(func=Name(id='type', ctx=Load()), args=[Tuple(elts=[], ctx=Load())], keywords=[])], ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[Name(id='value', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='value', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='sep_boundary', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='\nContent-Disposition: form-data; name="%s"'), op=Mod(), right=Name(id='key', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='value', ctx=Load()), Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\r')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='end_boundary', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-type'), Constant(value='Content-length')], values=[BinOp(left=Constant(value='multipart/form-data; boundary=%s; charset=utf-8'), op=Mod(), right=Name(id='boundary', ctx=Load())), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])], keywords=[])])), Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='Request', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='repository', ctx=Load()), Name(id='body', ctx=Load()), Name(id='headers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opener', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='build_opener', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='HTTPBasicAuthHandler', ctx=Load()), args=[], keywords=[keyword(arg='password_mgr', value=Name(id='auth', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Constant(value='')), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='opener', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='error', ctx=Load()), attr='HTTPError', ctx=Load()), name='e', body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_response', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='e', ctx=Load()), attr='fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='e', ctx=Load()), attr='code', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load())], ctx=Load()))]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='error', ctx=Load()), attr='URLError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Constant(value=500), Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], ctx=Load()))])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_response', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_pypi_response', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Constant(value=200), Constant(value='OK')], ctx=Load()))], finalbody=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_response', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=75)), Name(id='data', ctx=Load()), BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=75))], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Name(id='msg', ctx=Load()), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])