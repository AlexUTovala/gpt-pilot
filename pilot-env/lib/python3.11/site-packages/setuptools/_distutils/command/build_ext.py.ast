Module(body=[Expr(value=Constant(value="distutils.command.build_ext\n\nImplements the Distutils 'build_ext' command, for building extension\nmodules (currently limited to C extensions, should accommodate C++\nextensions ASAP).")), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError'), alias(name='DistutilsSetupError'), alias(name='CCompilerError'), alias(name='DistutilsError'), alias(name='CompileError'), alias(name='DistutilsPlatformError')], level=2), ImportFrom(module='sysconfig', names=[alias(name='customize_compiler'), alias(name='get_python_version')], level=2), ImportFrom(module='sysconfig', names=[alias(name='get_config_h_filename')], level=2), ImportFrom(module='dep_util', names=[alias(name='newer_group')], level=2), ImportFrom(module='extension', names=[alias(name='Extension')], level=2), ImportFrom(module='util', names=[alias(name='get_platform')], level=2), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), ImportFrom(names=[alias(name='py37compat')], level=1), ImportFrom(module='site', names=[alias(name='USER_BASE')], level=0), Assign(targets=[Name(id='extension_name_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[a-zA-Z_][a-zA-Z_0-9]*(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$')], keywords=[])), FunctionDef(name='show_compilers', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='ccompiler', names=[alias(name='show_compilers')], level=2), Expr(value=Call(func=Name(id='show_compilers', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='build_ext', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='build C/C++ extensions (compile/link to build directory)')), Assign(targets=[Name(id='sep_by', ctx=Store())], value=BinOp(left=Constant(value=" (separated by '%s')"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()))), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='build-lib='), Constant(value='b'), Constant(value='directory for compiled extension modules')], ctx=Load()), Tuple(elts=[Constant(value='build-temp='), Constant(value='t'), Constant(value='directory for temporary files (build by-products)')], ctx=Load()), Tuple(elts=[Constant(value='plat-name='), Constant(value='p'), BinOp(left=Constant(value='platform name to cross-compile for, if supported (default: %s)'), op=Mod(), right=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]))], ctx=Load()), Tuple(elts=[Constant(value='inplace'), Constant(value='i'), BinOp(left=Constant(value='ignore build-lib and put compiled extensions into the source '), op=Add(), right=Constant(value='directory alongside your pure Python modules'))], ctx=Load()), Tuple(elts=[Constant(value='include-dirs='), Constant(value='I'), BinOp(left=Constant(value='list of directories to search for header files'), op=Add(), right=Name(id='sep_by', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value='define='), Constant(value='D'), Constant(value='C preprocessor macros to define')], ctx=Load()), Tuple(elts=[Constant(value='undef='), Constant(value='U'), Constant(value='C preprocessor macros to undefine')], ctx=Load()), Tuple(elts=[Constant(value='libraries='), Constant(value='l'), Constant(value='external C libraries to link with')], ctx=Load()), Tuple(elts=[Constant(value='library-dirs='), Constant(value='L'), BinOp(left=Constant(value='directories to search for external C libraries'), op=Add(), right=Name(id='sep_by', ctx=Load()))], ctx=Load()), Tuple(elts=[Constant(value='rpath='), Constant(value='R'), Constant(value='directories to search for shared C libraries at runtime')], ctx=Load()), Tuple(elts=[Constant(value='link-objects='), Constant(value='O'), Constant(value='extra explicit link objects to include in the link')], ctx=Load()), Tuple(elts=[Constant(value='debug'), Constant(value='g'), Constant(value='compile/link with debugging information')], ctx=Load()), Tuple(elts=[Constant(value='force'), Constant(value='f'), Constant(value='forcibly build everything (ignore file timestamps)')], ctx=Load()), Tuple(elts=[Constant(value='compiler='), Constant(value='c'), Constant(value='specify the compiler type')], ctx=Load()), Tuple(elts=[Constant(value='parallel='), Constant(value='j'), Constant(value='number of parallel build jobs')], ctx=Load()), Tuple(elts=[Constant(value='swig-cpp'), Constant(value=None), Constant(value='make SWIG create C++ files (default is C)')], ctx=Load()), Tuple(elts=[Constant(value='swig-opts='), Constant(value=None), Constant(value='list of SWIG command line options')], ctx=Load()), Tuple(elts=[Constant(value='swig='), Constant(value=None), Constant(value='path to the SWIG executable')], ctx=Load()), Tuple(elts=[Constant(value='user'), Constant(value=None), Constant(value='add user include, library and rpath')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='inplace'), Constant(value='debug'), Constant(value='force'), Constant(value='swig-cpp'), Constant(value='user')], ctx=Load())), Assign(targets=[Name(id='help_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='help-compiler'), Constant(value=None), Constant(value='list available compilers'), Name(id='show_compilers', ctx=Load())], ctx=Load())], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='link_objects', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='debug', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_cpp', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='distutils', names=[alias(name='sysconfig')], level=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='build'), Tuple(elts=[Constant(value='build_lib'), Constant(value='build_lib')], ctx=Load()), Tuple(elts=[Constant(value='build_temp'), Constant(value='build_temp')], ctx=Load()), Tuple(elts=[Constant(value='compiler'), Constant(value='compiler')], ctx=Load()), Tuple(elts=[Constant(value='debug'), Constant(value='debug')], ctx=Load()), Tuple(elts=[Constant(value='force'), Constant(value='force')], ctx=Load()), Tuple(elts=[Constant(value='parallel'), Constant(value='parallel')], ctx=Load()), Tuple(elts=[Constant(value='plat_name'), Constant(value='plat_name')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='package', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='ext_package', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='ext_modules', ctx=Load())), Assign(targets=[Name(id='py_include', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_python_inc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='plat_py_include', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_python_inc', ctx=Load()), args=[], keywords=[keyword(arg='plat_specific', value=Constant(value=1))])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='include_dirs', ctx=Load()), List(elts=[], ctx=Load())]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_exec_prefix', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load()), Constant(value='include')], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='py_include', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='plat_py_include', ctx=Load()), ops=[NotEq()], comparators=[Name(id='py_include', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='plat_py_include', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='libraries')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='link_objects')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load()), Constant(value='libs')], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='base_exec_prefix', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_exec_prefix', ctx=Load()), Constant(value='libs')], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='debug', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Load()), Constant(value='Debug')], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Load()), Constant(value='Release')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Name(id='get_config_h_filename', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_exec_prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Constant(value='win32'))], orelse=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Load()), slice=Slice(lower=Constant(value=4)), ctx=Load()))]), Assign(targets=[Name(id='new_lib', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load()), Constant(value='PCbuild')], keywords=[])), If(test=Name(id='suffix', ctx=Load()), body=[Assign(targets=[Name(id='new_lib', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_lib', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_lib', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='python_build', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), Constant(value='lib'), BinOp(left=Constant(value='python'), op=Add(), right=Call(func=Name(id='get_python_version', ctx=Load()), args=[], keywords=[])), Constant(value='config')], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='.')], keywords=[]))])], orelse=[]), If(test=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='Py_ENABLE_SHARED')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='python_build', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='LIBDIR')], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='.')], keywords=[]))])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Load()), body=[Assign(targets=[Name(id='defines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='symbol', ctx=Load()), Constant(value='1')], ctx=Load()), generators=[comprehension(target=Name(id='symbol', ctx=Store()), iter=Name(id='defines', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), body=[Assign(targets=[Name(id='user_include', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='USER_BASE', ctx=Load()), Constant(value='include')], keywords=[])), Assign(targets=[Name(id='user_lib', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='USER_BASE', ctx=Load()), Constant(value='lib')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='user_include', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='user_include', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='user_lib', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='user_lib', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='user_lib', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='parallel should be an integer')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='ccompiler', names=[alias(name='new_compiler')], level=2), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load())), body=[Return()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_c_libraries', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_clib', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_clib')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), attr='extend', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='build_clib', ctx=Load()), attr='get_library_names', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='build_clib', ctx=Load()), attr='build_clib', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Store())], value=Call(func=Name(id='new_compiler', ctx=Load()), args=[], keywords=[keyword(arg='compiler', value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load())), keyword(arg='verbose', value=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), keyword(arg='force', value=Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load()))])), Expr(value=Call(func=Name(id='customize_compiler', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='initialize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_include_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='define', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='define_macro', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='macro', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='undef', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='undefine_macro', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_libraries', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_library_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_runtime_library_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='link_objects', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='set_link_objects', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='link_objects', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_extensions', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='check_extensions_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='extensions')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Ensure that the list of extensions (presumably provided as a\n        command option 'extensions') is valid, i.e. it is a list of\n        Extension objects.  We also support the old-style list of 2-tuples,\n        where the tuples are (ext_name, build_info), which are converted to\n        Extension instances here.\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='extensions', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Constant(value="'ext_modules' option must be a list of Extension instances")], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='extensions', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ext', ctx=Load()), Name(id='Extension', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ext', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)])]), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Constant(value="each element of 'ext_modules' option must be an Extension instance or 2-tuple")], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='ext_name', ctx=Store()), Name(id='build_info', ctx=Store())], ctx=Store())], value=Name(id='ext', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="old-style (ext_name, build_info) tuple found in ext_modules for extension '%s' -- please convert to Extension instance"), Name(id='ext_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ext_name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='extension_name_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='ext_name', ctx=Load())], keywords=[])])), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Constant(value="first element of each tuple in 'ext_modules' must be the extension name (a string)")], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='build_info', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Constant(value="second element of each tuple in 'ext_modules' must be a dictionary (build info)")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ext', ctx=Store())], value=Call(func=Name(id='Extension', ctx=Load()), args=[Name(id='ext_name', ctx=Load()), Subscript(value=Name(id='build_info', ctx=Load()), slice=Constant(value='sources'), ctx=Load())], keywords=[])), For(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='include_dirs'), Constant(value='library_dirs'), Constant(value='libraries'), Constant(value='extra_objects'), Constant(value='extra_compile_args'), Constant(value='extra_link_args')], ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_info', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='ext', ctx=Load()), Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='ext', ctx=Load()), attr='runtime_library_dirs', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='rpath')], keywords=[])), If(test=Compare(left=Constant(value='def_file'), ops=[In()], comparators=[Name(id='build_info', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="'def_file' element of build info dict no longer supported")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='macros', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='macros')], keywords=[])), If(test=Name(id='macros', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ext', ctx=Load()), attr='define_macros', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='ext', ctx=Load()), attr='undef_macros', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='macro', ctx=Store()), iter=Name(id='macros', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='macro', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load())])])), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Constant(value="'macros' element of build info dict must be 1- or 2-tuple")], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='undef_macros', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='macro', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='define_macros', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='macro', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='extensions', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='ext', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_source_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_extensions_list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='ext', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='filenames', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='ext', ctx=Load()), attr='sources', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='filenames', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_extensions_list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load())], keywords=[])), Assign(targets=[Name(id='outputs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='ext', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_ext_fullpath', ctx=Load()), args=[Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='outputs', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_extensions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_extensions_list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_extensions_parallel', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_extensions_serial', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_build_extensions_parallel', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='workers', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parallel', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='workers', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[ImportFrom(module='concurrent.futures', names=[alias(name='ThreadPoolExecutor')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='workers', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='workers', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_extensions_serial', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='ThreadPoolExecutor', ctx=Load()), args=[], keywords=[keyword(arg='max_workers', value=Name(id='workers', ctx=Load()))]), optional_vars=Name(id='executor', ctx=Store()))], body=[Assign(targets=[Name(id='futures', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='executor', ctx=Load()), attr='submit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_extension', ctx=Load()), Name(id='ext', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load()), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='ext', ctx=Store()), Name(id='fut', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load()), Name(id='futures', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_build_errors', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='result', ctx=Load()), args=[], keywords=[]))])], orelse=[])])], decorator_list=[]), FunctionDef(name='_build_extensions_serial', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='ext', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='extensions', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_build_errors', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_extension', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='_filter_build_errors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='CCompilerError', ctx=Load()), Name(id='DistutilsError', ctx=Load()), Name(id='CompileError', ctx=Load())], ctx=Load()), name='e', body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='ext', ctx=Load()), attr='optional', ctx=Load())), body=[Raise()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='building extension "{}" failed: {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='build_extension', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sources', ctx=Store())], value=Attribute(value=Name(id='ext', ctx=Load()), attr='sources', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='sources', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sources', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[BinOp(left=Constant(value="in 'ext_modules' option (extension '%s'), 'sources' must be present and must be a list of source filenames"), op=Mod(), right=Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sources', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='sources', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ext_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_ext_fullpath', ctx=Load()), args=[Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='depends', ctx=Store())], value=BinOp(left=Name(id='sources', ctx=Load()), op=Add(), right=Attribute(value=Name(id='ext', ctx=Load()), attr='depends', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load()), Call(func=Name(id='newer_group', ctx=Load()), args=[Name(id='depends', ctx=Load()), Name(id='ext_path', ctx=Load()), Constant(value='newer')], keywords=[])])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="skipping '%s' extension (up-to-date)"), Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Return()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="building '%s' extension"), Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='sources', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='swig_sources', ctx=Load()), args=[Name(id='sources', ctx=Load()), Name(id='ext', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extra_args', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ext', ctx=Load()), attr='extra_compile_args', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='macros', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='ext', ctx=Load()), attr='define_macros', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='undef', ctx=Store()), iter=Attribute(value=Name(id='ext', ctx=Load()), attr='undef_macros', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='macros', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='undef', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='objects', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='sources', ctx=Load())], keywords=[keyword(arg='output_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Load())), keyword(arg='macros', value=Name(id='macros', ctx=Load())), keyword(arg='include_dirs', value=Attribute(value=Name(id='ext', ctx=Load()), attr='include_dirs', ctx=Load())), keyword(arg='debug', value=Attribute(value=Name(id='self', ctx=Load()), attr='debug', ctx=Load())), keyword(arg='extra_postargs', value=Name(id='extra_args', ctx=Load())), keyword(arg='depends', value=Attribute(value=Name(id='ext', ctx=Load()), attr='depends', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_built_objects', ctx=Store())], value=Subscript(value=Name(id='objects', ctx=Load()), slice=Slice(), ctx=Load())), If(test=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_objects', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='objects', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='ext', ctx=Load()), attr='extra_objects', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='extra_args', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ext', ctx=Load()), attr='extra_link_args', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='language', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='ext', ctx=Load()), attr='language', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='detect_language', ctx=Load()), args=[Name(id='sources', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), attr='link_shared_object', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='ext_path', ctx=Load())], keywords=[keyword(arg='libraries', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_libraries', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[])), keyword(arg='library_dirs', value=Attribute(value=Name(id='ext', ctx=Load()), attr='library_dirs', ctx=Load())), keyword(arg='runtime_library_dirs', value=Attribute(value=Name(id='ext', ctx=Load()), attr='runtime_library_dirs', ctx=Load())), keyword(arg='extra_postargs', value=Name(id='extra_args', ctx=Load())), keyword(arg='export_symbols', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_export_symbols', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[])), keyword(arg='debug', value=Attribute(value=Name(id='self', ctx=Load()), attr='debug', ctx=Load())), keyword(arg='build_temp', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_temp', ctx=Load())), keyword(arg='target_lang', value=Name(id='language', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='swig_sources', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sources'), arg(arg='extension')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Walk the list of source files in 'sources', looking for SWIG\n        interface (.i) files.  Run SWIG on all that are found, and\n        return a modified 'sources' list with SWIG source files replaced\n        by the generated C (or C++) files.\n        ")), Assign(targets=[Name(id='new_sources', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='swig_sources', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='swig_targets', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='swig_cpp', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='--swig-cpp is deprecated - use --swig-opts=-c++')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_cpp', ctx=Load()), Compare(left=Constant(value='-c++'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Load())]), Compare(left=Constant(value='-c++'), ops=[In()], comparators=[Attribute(value=Name(id='extension', ctx=Load()), attr='swig_opts', ctx=Load())])]), body=[Assign(targets=[Name(id='target_ext', ctx=Store())], value=Constant(value='.cpp'))], orelse=[Assign(targets=[Name(id='target_ext', ctx=Store())], value=Constant(value='.c'))]), For(target=Name(id='source', ctx=Store()), iter=Name(id='sources', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.i')]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_sources', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_wrap')), op=Add(), right=Name(id='target_ext', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='swig_sources', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='swig_targets', ctx=Load()), slice=Name(id='source', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='new_sources', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_sources', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='swig_sources', ctx=Load())), body=[Return(value=Name(id='new_sources', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='swig', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='swig', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_swig', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='swig_cmd', ctx=Store())], value=List(elts=[Name(id='swig', ctx=Load()), Constant(value='-python')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='swig_cmd', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='swig_cpp', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='swig_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-c++')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Load())), body=[For(target=Name(id='o', ctx=Store()), iter=Attribute(value=Name(id='extension', ctx=Load()), attr='swig_opts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='swig_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='source', ctx=Store()), iter=Name(id='swig_sources', ctx=Load()), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Subscript(value=Name(id='swig_targets', ctx=Load()), slice=Name(id='source', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='swigging %s to %s'), Name(id='source', ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=Name(id='swig_cmd', ctx=Load()), op=Add(), right=List(elts=[Constant(value='-o'), Name(id='target', ctx=Load()), Name(id='source', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='new_sources', ctx=Load()))], decorator_list=[]), FunctionDef(name='find_swig', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the name of the SWIG executable.  On Unix, this is\n        just "swig" -- it should be in the PATH.  Tries a bit harder on\n        Windows.\n        ')), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[Return(value=Constant(value='swig'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[For(target=Name(id='vers', ctx=Store()), iter=Tuple(elts=[Constant(value='1.3'), Constant(value='1.2'), Constant(value='1.1')], ctx=Load()), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[BinOp(left=Constant(value='c:\\swig%s'), op=Mod(), right=Name(id='vers', ctx=Load())), Constant(value='swig.exe')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Return(value=Name(id='fn', ctx=Load()))], orelse=[])], orelse=[Return(value=Constant(value='swig.exe'))])], orelse=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="I don't know how to find (much less run) SWIG on platform '%s'"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))])])], decorator_list=[]), FunctionDef(name='get_ext_fullpath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the path of the filename for a given extension.\n\n        The file is located in `build_lib` or directly in the package\n        (inplace option).\n        ')), Assign(targets=[Name(id='fullname', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_ext_fullname', ctx=Load()), args=[Name(id='ext_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='modpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_ext_filename', ctx=Load()), args=[Subscript(value=Name(id='modpath', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='inplace', ctx=Load())), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=BinOp(left=Subscript(value=Name(id='modpath', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=List(elts=[Name(id='filename', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='package', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Subscript(value=Name(id='modpath', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='build_py', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_py')], keywords=[])), Assign(targets=[Name(id='package_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_package_dir', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='package_dir', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_ext_fullname', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the fullname of a given extension name.\n\n        Adds the `package.` prefix')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='package', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='ext_name', ctx=Load()))], orelse=[Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='package', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Name(id='ext_name', ctx=Load())))])], decorator_list=[]), FunctionDef(name='get_ext_filename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert the name of an extension (eg. "foo.bar") into the name\n        of the file from which it will be loaded (eg. "foo/bar.so", or\n        "foo\\bar.pyd").\n        ')), ImportFrom(module='sysconfig', names=[alias(name='get_config_var')], level=2), Assign(targets=[Name(id='ext_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='ext_name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='ext_suffix', ctx=Store())], value=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='EXT_SUFFIX')], keywords=[])), Return(value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='ext_path', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Name(id='ext_suffix', ctx=Load())))], decorator_list=[]), FunctionDef(name='get_export_symbols', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the list of symbols that a shared extension has to\n        export.  This either uses \'ext.export_symbols\' or, if it\'s not\n        provided, "PyInit_" + module_name.  Only relevant on Windows, where\n        the .pyd file (DLL) must export the module "PyInit_" function.\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=BinOp(left=Constant(value='U_'), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='punycode')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=b'-'), Constant(value=b'_')], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])))])], orelse=[Assign(targets=[Name(id='suffix', ctx=Store())], value=BinOp(left=Constant(value='_'), op=Add(), right=Name(id='name', ctx=Load())))], finalbody=[]), Assign(targets=[Name(id='initfunc_name', ctx=Store())], value=BinOp(left=Constant(value='PyInit'), op=Add(), right=Name(id='suffix', ctx=Load()))), If(test=Compare(left=Name(id='initfunc_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='ext', ctx=Load()), attr='export_symbols', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='export_symbols', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='initfunc_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='ext', ctx=Load()), attr='export_symbols', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_libraries', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ext')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the list of libraries to link against when building a\n        shared extension.  On most platforms, this is just 'ext.libraries';\n        on Windows, we add the Python library (eg. python20.dll).\n        ")), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='_msvccompiler', names=[alias(name='MSVCCompiler')], level=2), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler', ctx=Load()), Name(id='MSVCCompiler', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='python%d%d')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='debug', ctx=Load()), body=[Assign(targets=[Name(id='template', ctx=Store())], value=BinOp(left=Name(id='template', ctx=Load()), op=Add(), right=Constant(value='_d')))], orelse=[]), Assign(targets=[Name(id='pythonlib', ctx=Store())], value=BinOp(left=Name(id='template', ctx=Load()), op=Mod(), right=Tuple(elts=[BinOp(left=Attribute(value=Name(id='sys', ctx=Load()), attr='hexversion', ctx=Load()), op=RShift(), right=Constant(value=24)), BinOp(left=BinOp(left=Attribute(value=Name(id='sys', ctx=Load()), attr='hexversion', ctx=Load()), op=RShift(), right=Constant(value=16)), op=BitAnd(), right=Constant(value=255))], ctx=Load()))), Return(value=BinOp(left=Attribute(value=Name(id='ext', ctx=Load()), attr='libraries', ctx=Load()), op=Add(), right=List(elts=[Name(id='pythonlib', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[ImportFrom(module='sysconfig', names=[alias(name='get_config_var')], level=2), Assign(targets=[Name(id='link_libpython', ctx=Store())], value=Constant(value=False)), If(test=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='Py_ENABLE_SHARED')], keywords=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='getandroidapilevel')], keywords=[]), body=[Assign(targets=[Name(id='link_libpython', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=[Assign(targets=[Name(id='link_libpython', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value='_PYTHON_HOST_PLATFORM'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='ANDROID_API_LEVEL')], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='link_libpython', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='MACHDEP')], keywords=[]), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=[Assign(targets=[Name(id='link_libpython', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[])])])], orelse=[]), If(test=Name(id='link_libpython', ctx=Load()), body=[Assign(targets=[Name(id='ldversion', ctx=Store())], value=Call(func=Name(id='get_config_var', ctx=Load()), args=[Constant(value='LDVERSION')], keywords=[])), Return(value=BinOp(left=Attribute(value=Name(id='ext', ctx=Load()), attr='libraries', ctx=Load()), op=Add(), right=List(elts=[BinOp(left=Constant(value='python'), op=Add(), right=Name(id='ldversion', ctx=Load()))], ctx=Load())))], orelse=[])]), Return(value=BinOp(left=Attribute(value=Name(id='ext', ctx=Load()), attr='libraries', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='py37compat', ctx=Load()), attr='pythonlib', ctx=Load()), args=[], keywords=[])))], decorator_list=[])], decorator_list=[])], type_ignores=[])