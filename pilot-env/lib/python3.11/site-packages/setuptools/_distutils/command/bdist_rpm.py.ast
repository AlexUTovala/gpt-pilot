Module(body=[Expr(value=Constant(value="distutils.command.bdist_rpm\n\nImplements the Distutils 'bdist_rpm' command (create RPM source and binary\ndistributions).")), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='debug', names=[alias(name='DEBUG')], level=2), ImportFrom(module='file_util', names=[alias(name='write_file')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError'), alias(name='DistutilsPlatformError'), alias(name='DistutilsFileError'), alias(name='DistutilsExecError')], level=2), ImportFrom(module='sysconfig', names=[alias(name='get_python_version')], level=2), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), ClassDef(name='bdist_rpm', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='create an RPM distribution')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='bdist-base='), Constant(value=None), Constant(value='base directory for creating built distributions')], ctx=Load()), Tuple(elts=[Constant(value='rpm-base='), Constant(value=None), Constant(value='base directory for creating RPMs (defaults to "rpm" under --bdist-base; must be specified for RPM 2)')], ctx=Load()), Tuple(elts=[Constant(value='dist-dir='), Constant(value='d'), Constant(value='directory to put final RPM files in (and .spec files if --spec-only)')], ctx=Load()), Tuple(elts=[Constant(value='python='), Constant(value=None), Constant(value='path to Python interpreter to hard-code in the .spec file (default: "python")')], ctx=Load()), Tuple(elts=[Constant(value='fix-python'), Constant(value=None), Constant(value='hard-code the exact path to the current Python interpreter in the .spec file')], ctx=Load()), Tuple(elts=[Constant(value='spec-only'), Constant(value=None), Constant(value='only regenerate spec file')], ctx=Load()), Tuple(elts=[Constant(value='source-only'), Constant(value=None), Constant(value='only generate source RPM')], ctx=Load()), Tuple(elts=[Constant(value='binary-only'), Constant(value=None), Constant(value='only generate binary RPM')], ctx=Load()), Tuple(elts=[Constant(value='use-bzip2'), Constant(value=None), Constant(value='use bzip2 instead of gzip to create source distribution')], ctx=Load()), Tuple(elts=[Constant(value='distribution-name='), Constant(value=None), Constant(value='name of the (Linux) distribution to which this RPM applies (*not* the name of the module distribution!)')], ctx=Load()), Tuple(elts=[Constant(value='group='), Constant(value=None), Constant(value='package classification [default: "Development/Libraries"]')], ctx=Load()), Tuple(elts=[Constant(value='release='), Constant(value=None), Constant(value='RPM release number')], ctx=Load()), Tuple(elts=[Constant(value='serial='), Constant(value=None), Constant(value='RPM serial number')], ctx=Load()), Tuple(elts=[Constant(value='vendor='), Constant(value=None), Constant(value='RPM "vendor" (eg. "Joe Blow <joe@example.com>") [default: maintainer or author from setup script]')], ctx=Load()), Tuple(elts=[Constant(value='packager='), Constant(value=None), Constant(value='RPM packager (eg. "Jane Doe <jane@example.net>") [default: vendor]')], ctx=Load()), Tuple(elts=[Constant(value='doc-files='), Constant(value=None), Constant(value='list of documentation files (space or comma-separated)')], ctx=Load()), Tuple(elts=[Constant(value='changelog='), Constant(value=None), Constant(value='RPM changelog')], ctx=Load()), Tuple(elts=[Constant(value='icon='), Constant(value=None), Constant(value='name of icon file')], ctx=Load()), Tuple(elts=[Constant(value='provides='), Constant(value=None), Constant(value='capabilities provided by this package')], ctx=Load()), Tuple(elts=[Constant(value='requires='), Constant(value=None), Constant(value='capabilities required by this package')], ctx=Load()), Tuple(elts=[Constant(value='conflicts='), Constant(value=None), Constant(value='capabilities which conflict with this package')], ctx=Load()), Tuple(elts=[Constant(value='build-requires='), Constant(value=None), Constant(value='capabilities required to build this package')], ctx=Load()), Tuple(elts=[Constant(value='obsoletes='), Constant(value=None), Constant(value='capabilities made obsolete by this package')], ctx=Load()), Tuple(elts=[Constant(value='no-autoreq'), Constant(value=None), Constant(value='do not automatically calculate dependencies')], ctx=Load()), Tuple(elts=[Constant(value='keep-temp'), Constant(value='k'), Constant(value="don't clean up RPM build directory")], ctx=Load()), Tuple(elts=[Constant(value='no-keep-temp'), Constant(value=None), Constant(value='clean up RPM build directory [default]')], ctx=Load()), Tuple(elts=[Constant(value='use-rpm-opt-flags'), Constant(value=None), Constant(value='compile with RPM_OPT_FLAGS when building from source RPM')], ctx=Load()), Tuple(elts=[Constant(value='no-rpm-opt-flags'), Constant(value=None), Constant(value='do not pass any RPM CFLAGS to compiler')], ctx=Load()), Tuple(elts=[Constant(value='rpm3-mode'), Constant(value=None), Constant(value='RPM 3 compatibility mode (default)')], ctx=Load()), Tuple(elts=[Constant(value='rpm2-mode'), Constant(value=None), Constant(value='RPM 2 compatibility mode')], ctx=Load()), Tuple(elts=[Constant(value='prep-script='), Constant(value=None), Constant(value='Specify a script for the PREP phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='build-script='), Constant(value=None), Constant(value='Specify a script for the BUILD phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='pre-install='), Constant(value=None), Constant(value='Specify a script for the pre-INSTALL phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='install-script='), Constant(value=None), Constant(value='Specify a script for the INSTALL phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='post-install='), Constant(value=None), Constant(value='Specify a script for the post-INSTALL phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='pre-uninstall='), Constant(value=None), Constant(value='Specify a script for the pre-UNINSTALL phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='post-uninstall='), Constant(value=None), Constant(value='Specify a script for the post-UNINSTALL phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='clean-script='), Constant(value=None), Constant(value='Specify a script for the CLEAN phase of RPM building')], ctx=Load()), Tuple(elts=[Constant(value='verify-script='), Constant(value=None), Constant(value='Specify a script for the VERIFY phase of the RPM build')], ctx=Load()), Tuple(elts=[Constant(value='force-arch='), Constant(value=None), Constant(value='Force an architecture onto the RPM build process')], ctx=Load()), Tuple(elts=[Constant(value='quiet'), Constant(value='q'), Constant(value='Run the INSTALL phase of RPM building in quiet mode')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='keep-temp'), Constant(value='use-rpm-opt-flags'), Constant(value='rpm3-mode'), Constant(value='no-autoreq'), Constant(value='quiet')], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='no-keep-temp'), Constant(value='no-rpm-opt-flags'), Constant(value='rpm2-mode')], values=[Constant(value='keep-temp'), Constant(value='use-rpm-opt-flags'), Constant(value='rpm3-mode')])), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bdist_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpm_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fix_python', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spec_only', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='binary_only', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_only', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_bzip2', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='serial', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vendor', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='packager', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prep_script', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_script', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_script', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clean_script', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verify_script', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pre_install', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='post_install', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pre_uninstall', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='post_uninstall', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prep', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='conflicts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_requires', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obsoletes', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keep_temp', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_rpm_opt_flags', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpm3_mode', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_autoreq', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force_arch', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quiet', ctx=Store())], value=Constant(value=0))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='bdist'), Tuple(elts=[Constant(value='bdist_base'), Constant(value='bdist_base')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='rpm_base', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='rpm3_mode', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='you must specify --rpm-base in RPM 2 mode')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rpm_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bdist_base', ctx=Load()), Constant(value='rpm')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='fix_python', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Store())], value=Constant(value='python3'))])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='fix_python', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='--python and --fix-python are mutually exclusive options')], keywords=[]))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='posix')]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="don't know how to create RPM distributions on platform %s"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='binary_only', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='source_only', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value="cannot supply both '--source-only' and '--binary-only'")], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_rpm_opt_flags', ctx=Store())], value=Constant(value=0))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='bdist'), Tuple(elts=[Constant(value='dist_dir'), Constant(value='dist_dir')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize_package_data', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='finalize_package_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='group'), Constant(value='Development/Libraries')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='vendor'), BinOp(left=Constant(value='%s <%s>'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_contact', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_contact_email', ctx=Load()), args=[], keywords=[])], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='packager')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='doc_files')], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[For(target=Name(id='readme', ctx=Store()), iter=Tuple(elts=[Constant(value='README'), Constant(value='README.txt')], ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='readme', ctx=Load())], keywords=[]), Compare(left=Name(id='readme', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='readme', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='release'), Constant(value='1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='serial')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='distribution_name')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='changelog')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_format_changelog', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='icon')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='prep_script')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='build_script')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='install_script')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='clean_script')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='verify_script')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='pre_install')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='post_install')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='pre_uninstall')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_filename', ctx=Load()), args=[Constant(value='post_uninstall')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='provides')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='requires')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='conflicts')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='build_requires')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='obsoletes')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string', ctx=Load()), args=[Constant(value='force_arch')], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='DEBUG', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='before _get_package_data():')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='vendor ='), Attribute(value=Name(id='self', ctx=Load()), attr='vendor', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='packager ='), Attribute(value=Name(id='self', ctx=Load()), attr='packager', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='doc_files ='), Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='changelog ='), Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='spec_only', ctx=Load()), body=[Assign(targets=[Name(id='spec_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Name(id='spec_dir', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rpm_dir', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='d', ctx=Store()), iter=Tuple(elts=[Constant(value='SOURCES'), Constant(value='SPECS'), Constant(value='BUILD'), Constant(value='RPMS'), Constant(value='SRPMS')], ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Name(id='d', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rpm_base', ctx=Load()), Name(id='d', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Name(id='d', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='spec_dir', ctx=Store())], value=Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Constant(value='SPECS'), ctx=Load()))]), Assign(targets=[Name(id='spec_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='spec_dir', ctx=Load()), BinOp(left=Constant(value='%s.spec'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='write_file', ctx=Load()), Tuple(elts=[Name(id='spec_path', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_spec_file', ctx=Load()), args=[], keywords=[])], ctx=Load()), BinOp(left=Constant(value="writing '%s'"), op=Mod(), right=Name(id='spec_path', ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='spec_only', ctx=Load()), body=[Return()], orelse=[]), Assign(targets=[Name(id='saved_dist_files', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='dist_files', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='sdist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reinitialize_command', ctx=Load()), args=[Constant(value='sdist')], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_bzip2', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='sdist', ctx=Load()), attr='formats', ctx=Store())], value=List(elts=[Constant(value='bztar')], ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='sdist', ctx=Load()), attr='formats', ctx=Store())], value=List(elts=[Constant(value='gztar')], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='sdist')], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='dist_files', ctx=Store())], value=Name(id='saved_dist_files', ctx=Load())), Assign(targets=[Name(id='source', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='sdist', ctx=Load()), attr='get_archive_files', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='source_dir', ctx=Store())], value=Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Constant(value='SOURCES'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_file', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='source_dir', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_file', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load()), Name(id='source_dir', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="icon file '%s' does not exist"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load()))], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='building RPMs')], keywords=[])), Assign(targets=[Name(id='rpm_cmd', ctx=Store())], value=List(elts=[Constant(value='rpmbuild')], ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_only', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-bs')], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='binary_only', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-bb')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-ba')], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--define'), BinOp(left=Constant(value='__python %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Load()))], ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='rpm3_mode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--define'), BinOp(left=Constant(value='_topdir %s'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rpm_base', ctx=Load())], keywords=[]))], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='keep_temp', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--clean')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='quiet', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--quiet')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='rpm_cmd', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='spec_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nvr_string', ctx=Store())], value=Constant(value='%{name}-%{version}-%{release}')), Assign(targets=[Name(id='src_rpm', ctx=Store())], value=BinOp(left=Name(id='nvr_string', ctx=Load()), op=Add(), right=Constant(value='.src.rpm'))), Assign(targets=[Name(id='non_src_rpm', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='%{arch}/'), op=Add(), right=Name(id='nvr_string', ctx=Load())), op=Add(), right=Constant(value='.%{arch}.rpm'))), Assign(targets=[Name(id='q_cmd', ctx=Store())], value=Call(func=Attribute(value=Constant(value="rpm -q --qf '{} {}\\n' --specfile '{}'"), attr='format', ctx=Load()), args=[Name(id='src_rpm', ctx=Load()), Name(id='non_src_rpm', ctx=Load()), Name(id='spec_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='popen', ctx=Load()), args=[Name(id='q_cmd', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='binary_rpms', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='source_rpm', ctx=Store())], value=Constant(value=None)), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='ell', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ell', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)])), Expr(value=Call(func=Attribute(value=Name(id='binary_rpms', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='ell', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='source_rpm', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='source_rpm', ctx=Store())], value=Subscript(value=Name(id='ell', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), If(test=Name(id='status', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsExecError', ctx=Load()), args=[BinOp(left=Constant(value='Failed to execute: %s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='q_cmd', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[Name(id='rpm_cmd', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='pyversion', ctx=Store())], value=Call(func=Name(id='get_python_version', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='pyversion', ctx=Store())], value=Constant(value='any'))]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='binary_only', ctx=Load())), body=[Assign(targets=[Name(id='srpm', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Constant(value='SRPMS'), ctx=Load()), Name(id='source_rpm', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='srpm', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='move_file', ctx=Load()), args=[Name(id='srpm', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load()), Name(id='source_rpm', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='dist_files', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='bdist_rpm'), Name(id='pyversion', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='source_only', ctx=Load())), body=[For(target=Name(id='rpm', ctx=Store()), iter=Name(id='binary_rpms', ctx=Load()), body=[Assign(targets=[Name(id='rpm', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Subscript(value=Name(id='rpm_dir', ctx=Load()), slice=Constant(value='RPMS'), ctx=Load()), Name(id='rpm', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='rpm', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='move_file', ctx=Load()), args=[Name(id='rpm', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='rpm', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='dist_files', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='bdist_rpm'), Name(id='pyversion', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_dist_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_make_spec_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate the text of an RPM spec file and return it as a\n        list of strings (one per line).\n        ')), Assign(targets=[Name(id='spec_file', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='%define name '), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[])), BinOp(left=Constant(value='%define version '), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), BinOp(left=Constant(value='%define unmangled_version '), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[])), BinOp(left=Constant(value='%define release '), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), Constant(value=''), BinOp(left=Constant(value='Summary: '), op=Add(), right=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_description', ctx=Load()), args=[], keywords=[]), Constant(value='UNKNOWN')]))], ctx=Load())), Assign(targets=[Name(id='vendor_hook', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='getoutput', ctx=Load()), args=[Constant(value='rpm --eval %{__os_install_post}')], keywords=[])), Assign(targets=[Name(id='vendor_hook', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='  %s \\'), op=Mod(), right=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='vendor_hook', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='problem', ctx=Store())], value=Constant(value='brp-python-bytecompile \\\n')), Assign(targets=[Name(id='fixed', ctx=Store())], value=Constant(value='brp-python-bytecompile %{__python} \\\n')), Assign(targets=[Name(id='fixed_hook', ctx=Store())], value=Call(func=Attribute(value=Name(id='vendor_hook', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='problem', ctx=Load()), Name(id='fixed', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fixed_hook', ctx=Load()), ops=[NotEq()], comparators=[Name(id='vendor_hook', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='# Workaround for http://bugs.python.org/issue14443')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='%define __os_install_post '), op=Add(), right=Name(id='fixed_hook', ctx=Load())), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='Name: %{name}'), Constant(value='Version: %{version}'), Constant(value='Release: %{release}')], ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_bzip2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Source0: %{name}-%{unmangled_version}.tar.bz2')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Source0: %{name}-%{unmangled_version}.tar.gz')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[BinOp(left=Constant(value='License: '), op=Add(), right=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_license', ctx=Load()), args=[], keywords=[]), Constant(value='UNKNOWN')])), BinOp(left=Constant(value='Group: '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load())), Constant(value='BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot'), Constant(value='Prefix: %{_prefix}')], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='force_arch', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='BuildArch: noarch')], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='BuildArch: %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='force_arch', ctx=Load()))], keywords=[]))]), For(target=Name(id='field', ctx=Store()), iter=Tuple(elts=[Constant(value='Vendor'), Constant(value='Packager'), Constant(value='Provides'), Constant(value='Requires'), Constant(value='Conflicts'), Constant(value='Obsoletes')], ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}: {}'), attr='format', ctx=Load()), args=[Name(id='field', ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}: {}'), attr='format', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_url', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Url: '), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_url', ctx=Load()), args=[], keywords=[]))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='distribution_name', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Distribution: '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='distribution_name', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='build_requires', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='BuildRequires: '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_requires', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='Icon: '), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='icon', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='no_autoreq', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='AutoReq: 0')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='%description'), BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_long_description', ctx=Load()), args=[], keywords=[]), Constant(value='')])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='def_setup_call', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='python', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='def_build', ctx=Store())], value=BinOp(left=Constant(value='%s build'), op=Mod(), right=Name(id='def_setup_call', ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_rpm_opt_flags', ctx=Load()), body=[Assign(targets=[Name(id='def_build', ctx=Store())], value=BinOp(left=Constant(value='env CFLAGS="$RPM_OPT_FLAGS" '), op=Add(), right=Name(id='def_build', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='install_cmd', ctx=Store())], value=BinOp(left=Constant(value='%s install -O1 --root=$RPM_BUILD_ROOT --record=INSTALLED_FILES'), op=Mod(), right=Name(id='def_setup_call', ctx=Load()))), Assign(targets=[Name(id='script_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='prep'), Constant(value='prep_script'), Constant(value='%setup -n %{name}-%{unmangled_version}')], ctx=Load()), Tuple(elts=[Constant(value='build'), Constant(value='build_script'), Name(id='def_build', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='install'), Constant(value='install_script'), Name(id='install_cmd', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='clean'), Constant(value='clean_script'), Constant(value='rm -rf $RPM_BUILD_ROOT')], ctx=Load()), Tuple(elts=[Constant(value='verifyscript'), Constant(value='verify_script'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='pre'), Constant(value='pre_install'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='post'), Constant(value='post_install'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='preun'), Constant(value='pre_uninstall'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='postun'), Constant(value='post_uninstall'), Constant(value=None)], ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='rpm_opt', ctx=Store()), Name(id='attr', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store()), iter=Name(id='script_options', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='val', ctx=Load()), Name(id='default', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value=''), BinOp(left=Constant(value='%'), op=Add(), right=Name(id='rpm_opt', ctx=Load()))], ctx=Load())], keywords=[])), If(test=Name(id='val', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='%files -f INSTALLED_FILES'), Constant(value='%defattr(-,root,root)')], ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='%doc '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='doc_files', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='%changelog')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='spec_file', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='changelog', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='spec_file', ctx=Load()))], decorator_list=[]), FunctionDef(name='_format_changelog', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='changelog')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format the changelog correctly and convert it to a list of strings')), If(test=UnaryOp(op=Not(), operand=Name(id='changelog', ctx=Load())), body=[Return(value=Name(id='changelog', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='new_changelog', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='changelog', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_changelog', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value=''), Name(id='line', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_changelog', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_changelog', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='new_changelog', ctx=Load()), slice=Constant(value=0), ctx=Load())), body=[Delete(targets=[Subscript(value=Name(id='new_changelog', ctx=Load()), slice=Constant(value=0), ctx=Del())])], orelse=[]), Return(value=Name(id='new_changelog', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])