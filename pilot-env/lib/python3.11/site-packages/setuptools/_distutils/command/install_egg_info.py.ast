Module(body=[Expr(value=Constant(value="\ndistutils.command.install_egg_info\n\nImplements the Distutils 'install_egg_info' command, for installing\na package's PKG-INFO metadata.\n")), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='re')]), ImportFrom(module='cmd', names=[alias(name='Command')], level=2), ImportFrom(names=[alias(name='dir_util')], level=2), ImportFrom(module='_log', names=[alias(name='log')], level=2), ClassDef(name='install_egg_info', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Install an .egg-info file for the package')), Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value="Install package's PKG-INFO metadata as an .egg-info file")), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='install-dir='), Constant(value='d'), Constant(value='directory to install to')], ctx=Load())], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='basename', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Allow basename to be overridden by child class.\n        Ref pypa/distutils#2.\n        ')), Return(value=BinOp(left=Constant(value='%s-%s-py%d.%d.egg-info'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='to_filename', ctx=Load()), args=[Call(func=Name(id='safe_name', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), Call(func=Name(id='to_filename', ctx=Load()), args=[Call(func=Name(id='safe_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), Starred(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ctx=Load())], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install_lib'), Tuple(elts=[Constant(value='install_dir'), Constant(value='install_dir')], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='basename', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='target', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='target', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='dir_util', ctx=Load()), attr='remove_tree', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='target', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='Removing '), op=Add(), right=Name(id='target', ctx=Load()))], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='Creating '), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()))], keywords=[]))], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Writing %s'), Name(id='target', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='target', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='UTF-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load()), attr='write_pkg_file', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='safe_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert an arbitrary string to a standard distribution name\n\n    Any runs of non-alphanumeric/. characters are replaced with a single '-'.\n    ")), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[^A-Za-z0-9.]+'), Constant(value='-'), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='safe_version', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert an arbitrary string to a standard version string\n\n    Spaces become dots, and all other non-alphanumeric characters become\n    dashes, with runs of multiple dashes condensed to a single dash.\n    ')), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='.')], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[^A-Za-z0-9.]+'), Constant(value='-'), Name(id='version', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='to_filename', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a project or version name to its filename-escaped form\n\n    Any '-' characters are currently replaced with '_'.\n    ")), Return(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]))], decorator_list=[])], type_ignores=[])