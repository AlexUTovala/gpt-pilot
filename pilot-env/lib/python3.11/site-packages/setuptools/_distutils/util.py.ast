Module(body=[Expr(value=Constant(value="distutils.util\n\nMiscellaneous utility functions -- anything that doesn't fit into\none of the other *util.py modules.\n")), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='string')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='functools')]), ImportFrom(module='errors', names=[alias(name='DistutilsPlatformError'), alias(name='DistutilsByteCompileError')], level=1), ImportFrom(module='dep_util', names=[alias(name='newer')], level=1), ImportFrom(module='spawn', names=[alias(name='spawn')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), FunctionDef(name='get_host_platform', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a string that identifies the current platform. Use this\n    function to distinguish platform-specific build directories and\n    platform-specific built distributions.\n    ')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[If(test=Compare(left=Constant(value='(arm)'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Constant(value='win-arm32'))], orelse=[]), If(test=Compare(left=Constant(value='(arm64)'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Constant(value='win-arm64'))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='uname')], keywords=[])]), body=[Assign(targets=[Tuple(elts=[Name(id='osname', ctx=Store()), Name(id='host', ctx=Store()), Name(id='release', ctx=Store()), Name(id='version', ctx=Store()), Name(id='machine', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='aix')]), body=[ImportFrom(module='py38compat', names=[alias(name='aix_platform')], level=1), Return(value=Call(func=Name(id='aix_platform', ctx=Load()), args=[Name(id='osname', ctx=Load()), Name(id='version', ctx=Load()), Name(id='release', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_platform', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_platform', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Name(id='TARGET_TO_PLAT', ctx=Store())], value=Dict(keys=[Constant(value='x86'), Constant(value='x64'), Constant(value='arm'), Constant(value='arm64')], values=[Constant(value='win32'), Constant(value='win-amd64'), Constant(value='win-arm32'), Constant(value='win-arm64')])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='VSCMD_ARG_TGT_ARCH')], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='TARGET_TO_PLAT', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), Call(func=Name(id='get_host_platform', ctx=Load()), args=[], keywords=[])]))], orelse=[]), Return(value=Call(func=Name(id='get_host_platform', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[Assign(targets=[Name(id='_syscfg_macosx_ver', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='MACOSX_VERSION_VAR', ctx=Store())], value=Constant(value='MACOSX_DEPLOYMENT_TARGET')), FunctionDef(name='_clear_cached_macosx_ver', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For testing only. Do not call.')), Global(names=['_syscfg_macosx_ver']), Assign(targets=[Name(id='_syscfg_macosx_ver', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_macosx_target_ver_from_syscfg', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the version of macOS latched in the Python interpreter configuration.\n    Returns the version as a string or None if can't obtain one. Cached.")), Global(names=['_syscfg_macosx_ver']), If(test=Compare(left=Name(id='_syscfg_macosx_ver', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='distutils', names=[alias(name='sysconfig')], level=0), Assign(targets=[Name(id='ver', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Name(id='MACOSX_VERSION_VAR', ctx=Load())], keywords=[]), Constant(value='')])), If(test=Name(id='ver', ctx=Load()), body=[Assign(targets=[Name(id='_syscfg_macosx_ver', ctx=Store())], value=Name(id='ver', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='_syscfg_macosx_ver', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_macosx_target_ver', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the version of macOS for which we are building.\n\n    The target version defaults to the version in sysconfig latched at time\n    the Python interpreter was built, unless overridden by an environment\n    variable. If neither source has a value, then None is returned')), Assign(targets=[Name(id='syscfg_ver', ctx=Store())], value=Call(func=Name(id='get_macosx_target_ver_from_syscfg', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='env_ver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='MACOSX_VERSION_VAR', ctx=Load())], keywords=[])), If(test=Name(id='env_ver', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='syscfg_ver', ctx=Load()), Compare(left=Call(func=Name(id='split_version', ctx=Load()), args=[Name(id='syscfg_ver', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[List(elts=[Constant(value=10), Constant(value=3)], ctx=Load())]), Compare(left=Call(func=Name(id='split_version', ctx=Load()), args=[Name(id='env_ver', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[List(elts=[Constant(value=10), Constant(value=3)], ctx=Load())])]), body=[Assign(targets=[Name(id='my_msg', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='$'), op=Add(), right=Name(id='MACOSX_VERSION_VAR', ctx=Load())), op=Add(), right=BinOp(left=Constant(value=' mismatch: now "%s" but "%s" during configure; must use 10.3 or later'), op=Mod(), right=Tuple(elts=[Name(id='env_ver', ctx=Load()), Name(id='syscfg_ver', ctx=Load())], ctx=Load())))), Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Name(id='my_msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='env_ver', ctx=Load()))], orelse=[]), Return(value=Name(id='syscfg_ver', ctx=Load()))], decorator_list=[]), FunctionDef(name='split_version', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a dot-separated string into a list of numbers for comparisons')), Return(value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='convert_path', args=arguments(posonlyargs=[], args=[arg(arg='pathname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return 'pathname' as a name that will work on the native filesystem,\n    i.e. split it on '/' and put it back together again using the current\n    directory separator.  Needed because filenames in the setup script are\n    always supplied in Unix style, and have to be converted to the local\n    convention before we can actually use them in the filesystem.  Raises\n    ValueError on non-Unix-ish systems if 'pathname' either starts or\n    ends with a slash.\n    ")), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Return(value=Name(id='pathname', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='pathname', ctx=Load())), body=[Return(value=Name(id='pathname', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='pathname', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="path '%s' cannot be absolute"), op=Mod(), right=Name(id='pathname', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='pathname', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="path '%s' cannot end with '/'"), op=Mod(), right=Name(id='pathname', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), While(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='paths', ctx=Load())), body=[Return(value=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='paths', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='change_root', args=arguments(posonlyargs=[], args=[arg(arg='new_root'), arg(arg='pathname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return \'pathname\' with \'new_root\' prepended.  If \'pathname\' is\n    relative, this is equivalent to "os.path.join(new_root,pathname)".\n    Otherwise, it requires making \'pathname\' relative and then joining the\n    two, which is tricky on DOS/Windows and Mac OS.\n    ')), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Name(id='pathname', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Subscript(value=Name(id='pathname', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Tuple(elts=[Name(id='drive', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], orelse=[])]), Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[JoinedStr(values=[Constant(value="nothing known about platform '"), FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))], decorator_list=[]), FunctionDef(name='check_environ', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    ")), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), Compare(left=Constant(value='HOME'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])]), body=[Try(body=[Import(names=[alias(name='pwd')]), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='HOME'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='pwd', ctx=Load()), attr='getpwuid', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[])], keywords=[]), slice=Constant(value=5), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Constant(value='PLAT'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PLAT'), ctx=Store())], value=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='subst_vars', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='local_vars')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Perform variable substitution on \'string\'.\n    Variables are indicated by format-style braces ("{var}").\n    Variable is substituted by the value found in the \'local_vars\'\n    dictionary or in \'os.environ\' if it\'s not in \'local_vars\'.\n    \'os.environ\' is first checked/augmented to guarantee that it contains\n    certain values: see \'check_environ()\'.  Raise ValueError for any\n    variables not found in either \'local_vars\' or \'os.environ\'.\n    ')), Expr(value=Call(func=Name(id='check_environ', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lookup', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lookup', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='local_vars', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='_subst_compat', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), attr='format_map', ctx=Load()), args=[Name(id='lookup', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='var', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid variable '), FormattedValue(value=Name(id='var', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_subst_compat', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Replace shell/Perl-style variable substitution with\n    format-style. For compatibility.\n    ')), FunctionDef(name='_subst', args=arguments(posonlyargs=[], args=[arg(arg='match')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='{'), FormattedValue(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), conversion=-1), Constant(value='}')]))], decorator_list=[]), Assign(targets=[Name(id='repl', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\$([a-zA-Z_][a-zA-Z_0-9]*)'), Name(id='_subst', ctx=Load()), Name(id='s', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='repl', ctx=Load()), ops=[NotEq()], comparators=[Name(id='s', ctx=Load())]), body=[Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='shell/Perl-style substitutions are deprecated'), Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='repl', ctx=Load()))], decorator_list=[]), FunctionDef(name='grok_environment_error', args=arguments(posonlyargs=[], args=[arg(arg='exc'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='error: ')]), body=[Return(value=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])))], decorator_list=[]), Assign(targets=[Name(id='_wordchars_re', ctx=Store()), Name(id='_squote_re', ctx=Store()), Name(id='_dquote_re', ctx=Store())], value=Constant(value=None)), FunctionDef(name='_init_regex', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['_wordchars_re', '_squote_re', '_dquote_re']), Assign(targets=[Name(id='_wordchars_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=Constant(value='[^\\\\\\\'\\"%s ]*'), op=Mod(), right=Attribute(value=Name(id='string', ctx=Load()), attr='whitespace', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='_squote_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value="'(?:[^'\\\\]|\\\\.)*'")], keywords=[])), Assign(targets=[Name(id='_dquote_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='"(?:[^"\\\\]|\\\\.)*"')], keywords=[]))], decorator_list=[]), FunctionDef(name='split_quoted', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split a string up according to Unix shell-like rules for quotes and\n    backslashes.  In short: words are delimited by spaces, as long as those\n    spaces are not escaped by a backslash, or inside a quoted string.\n    Single and double quotes are equivalent, and the quote characters can\n    be backslash-escaped.  The backslash is stripped from any two-character\n    escape sequence, leaving only the escaped character.  The quote\n    characters are stripped from any quoted string.  Returns a list of\n    words.\n    ')), If(test=Compare(left=Name(id='_wordchars_re', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_init_regex', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), While(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_wordchars_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='end', ctx=Load())), ctx=Load())], keywords=[])), Break()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='string', ctx=Load()), attr='whitespace', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='end', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Name(id='end', ctx=Load())), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0))], orelse=[If(test=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='end', ctx=Load())), ctx=Load()), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='end', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()))), Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=Name(id='end', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value="'")]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_squote_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='end', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='"')]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_dquote_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='end', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value="this can't happen (bad char '%c')"), op=Mod(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()))], keywords=[]))])]), If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='bad string (mismatched %s quotes?)'), op=Mod(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Name(id='end', ctx=Load()), ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='beg', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='span', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='beg', ctx=Load())), ctx=Load()), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='beg', ctx=Load()), op=Add(), right=Constant(value=1)), upper=BinOp(left=Name(id='end', ctx=Load()), op=Sub(), right=Constant(value=1))), ctx=Load())), op=Add(), right=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Name(id='end', ctx=Load())), ctx=Load()))), Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Constant(value=2)))])]), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='words', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[]), Return(value=Name(id='words', ctx=Load()))], decorator_list=[]), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='args'), arg(arg='msg'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='Perform some action that affects the outside world (eg.  by\n    writing to the filesystem).  Such actions are special because they\n    are disabled by the \'dry_run\' flag.  This method takes care of all\n    that bureaucracy for you; all you have to do is supply the\n    function to call and an argument tuple for it (to embody the\n    "external action" being performed), and an optional message to\n    print.\n    ')), If(test=Compare(left=Name(id='msg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}{!r}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='func', ctx=Load()), attr='__name__', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), ops=[Eq()], comparators=[Constant(value=',)')]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Constant(value=')')))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='strtobool', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    ")), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='y'), Constant(value='yes'), Constant(value='t'), Constant(value='true'), Constant(value='on'), Constant(value='1')], ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='n'), Constant(value='no'), Constant(value='f'), Constant(value='false'), Constant(value='off'), Constant(value='0')], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='invalid truth value {!r}'), attr='format', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[]))])])], decorator_list=[]), FunctionDef(name='byte_compile', args=arguments(posonlyargs=[], args=[arg(arg='py_files'), arg(arg='optimize'), arg(arg='force'), arg(arg='prefix'), arg(arg='base_dir'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='direct')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=1), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value='Byte-compile a collection of Python source files to .pyc\n    files in a __pycache__ subdirectory.  \'py_files\' is a list\n    of files to compile; any files that don\'t end in ".py" are silently\n    skipped.  \'optimize\' must be one of the following:\n      0 - don\'t optimize\n      1 - normal optimization (like "python -O")\n      2 - extra optimization (like "python -OO")\n    If \'force\' is true, all files are recompiled regardless of\n    timestamps.\n\n    The source filename encoded in each bytecode file defaults to the\n    filenames listed in \'py_files\'; you can modify these with \'prefix\' and\n    \'basedir\'.  \'prefix\' is a string that will be stripped off of each\n    source filename, and \'base_dir\' is a directory name that will be\n    prepended (after \'prefix\' is stripped).  You can supply either or both\n    (or neither) of \'prefix\' and \'base_dir\', as you wish.\n\n    If \'dry_run\' is true, doesn\'t actually do anything that would\n    affect the filesystem.\n\n    Byte-compilation is either done directly in this interpreter process\n    with the standard py_compile module, or indirectly by writing a\n    temporary script and executing it.  Normally, you should let\n    \'byte_compile()\' figure out to use direct compilation or not (see\n    the source for details).  The \'direct\' flag is used by the script\n    generated in indirect mode; unless you know what you\'re doing, leave\n    it set to None.\n    ')), If(test=Attribute(value=Name(id='sys', ctx=Load()), attr='dont_write_bytecode', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsByteCompileError', ctx=Load()), args=[Constant(value='byte-compiling is disabled.')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='direct', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='direct', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='__debug__', ctx=Load()), Compare(left=Name(id='optimize', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='direct', ctx=Load())), body=[Try(body=[ImportFrom(module='tempfile', names=[alias(name='mkstemp')], level=0), Assign(targets=[Tuple(elts=[Name(id='script_fd', ctx=Store()), Name(id='script_name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='mkstemp', ctx=Load()), args=[Constant(value='.py')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='tempfile', names=[alias(name='mktemp')], level=0), Assign(targets=[Tuple(elts=[Name(id='script_fd', ctx=Store()), Name(id='script_name', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Call(func=Name(id='mktemp', ctx=Load()), args=[Constant(value='.py')], keywords=[])], ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="writing byte-compilation script '%s'"), Name(id='script_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[If(test=Compare(left=Name(id='script_fd', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fdopen', ctx=Load()), args=[Name(id='script_fd', ctx=Load()), Constant(value='w')], keywords=[]))], orelse=[Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='script_name', ctx=Load()), Constant(value='w')], keywords=[]))]), With(items=[withitem(context_expr=Name(id='script', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='from distutils.util import byte_compile\nfiles = [\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Constant(value=',\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Name(id='py_files', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=']\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='\nbyte_compile(files, optimize=%r, force=%r,\n             prefix=%r, base_dir=%r,\n             verbose=%r, dry_run=0,\n             direct=1)\n'), op=Mod(), right=Tuple(elts=[Name(id='optimize', ctx=Load()), Name(id='force', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='base_dir', ctx=Load()), Name(id='verbose', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='_optim_args_from_interpreter_flags', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='script_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])), Expr(value=Call(func=Name(id='execute', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Tuple(elts=[Name(id='script_name', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='removing %s'), op=Mod(), right=Name(id='script_name', ctx=Load()))], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))]))], orelse=[ImportFrom(module='py_compile', names=[alias(name='compile')], level=0), For(target=Name(id='file', ctx=Store()), iter=Name(id='py_files', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='file', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=3))), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='.py')]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='optimize', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='opt', ctx=Store())], value=IfExp(test=Compare(left=Name(id='optimize', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Constant(value=''), orelse=Name(id='optimize', ctx=Load()))), Assign(targets=[Name(id='cfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='cache_from_source', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[keyword(arg='optimization', value=Name(id='opt', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='cfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='cache_from_source', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='dfile', ctx=Store())], value=Name(id='file', ctx=Load())), If(test=Name(id='prefix', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='file', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), ctx=Load()), ops=[NotEq()], comparators=[Name(id='prefix', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="invalid prefix: filename %r doesn't start with %r"), op=Mod(), right=Tuple(elts=[Name(id='file', ctx=Load()), Name(id='prefix', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dfile', ctx=Store())], value=Subscript(value=Name(id='dfile', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), ctx=Load()))], orelse=[]), If(test=Name(id='base_dir', ctx=Load()), body=[Assign(targets=[Name(id='dfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Name(id='dfile', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cfile_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='cfile', ctx=Load())], keywords=[])), If(test=Name(id='direct', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Name(id='force', ctx=Load()), Call(func=Name(id='newer', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='cfile', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='byte-compiling %s to %s'), Name(id='file', ctx=Load()), Name(id='cfile_base', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Expr(value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='cfile', ctx=Load()), Name(id='dfile', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping byte-compilation of %s to %s'), Name(id='file', ctx=Load()), Name(id='cfile_base', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='rfc822_escape', args=arguments(posonlyargs=[], args=[arg(arg='header')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a version of the string escaped for inclusion in an\n    RFC-822 header, by ensuring there are 8 spaces space after each newline.\n    ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='sep', ctx=Store())], value=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value=8), op=Mult(), right=Constant(value=' ')))), Return(value=Call(func=Attribute(value=Name(id='sep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])