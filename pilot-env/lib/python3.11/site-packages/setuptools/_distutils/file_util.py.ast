Module(body=[Expr(value=Constant(value='distutils.file_util\n\nUtility functions for operating on single files.\n')), Import(names=[alias(name='os')]), ImportFrom(module='errors', names=[alias(name='DistutilsFileError')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), Assign(targets=[Name(id='_copy_action', ctx=Store())], value=Dict(keys=[Constant(value=None), Constant(value='hard'), Constant(value='sym')], values=[Constant(value='copying'), Constant(value='hard linking'), Constant(value='symbolically linking')])), FunctionDef(name='_copy_file_contents', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst'), arg(arg='buffer_size')], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Constant(value=16), op=Mult(), right=Constant(value=1024))]), body=[Expr(value=Constant(value="Copy the file 'src' to 'dst'; both must be filenames.  Any error\n    opening either file, reading from 'src', or writing to 'dst', raises\n    DistutilsFileError.  Data is read/written in chunks of 'buffer_size'\n    bytes (default 16k).  No attempt is made to handle anything apart from\n    regular files.\n    ")), Assign(targets=[Name(id='fsrc', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='fdst', ctx=Store())], value=Constant(value=None)), Try(body=[Try(body=[Assign(targets=[Name(id='fsrc', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='src', ctx=Load()), Constant(value='rb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not open '{}': {}"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not delete '{}': {}"), attr='format', ctx=Load()), args=[Name(id='dst', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='fdst', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='dst', ctx=Load()), Constant(value='wb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not create '{}': {}"), attr='format', ctx=Load()), args=[Name(id='dst', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='fsrc', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='buffer_size', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not read from '{}': {}"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='buf', ctx=Load())), body=[Break()], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='fdst', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="could not write to '{}': {}"), attr='format', ctx=Load()), args=[Name(id='dst', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], handlers=[], orelse=[], finalbody=[If(test=Name(id='fdst', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fdst', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='fsrc', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fsrc', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='copy_file', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst'), arg(arg='preserve_mode'), arg(arg='preserve_times'), arg(arg='update'), arg(arg='link'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=None), Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value='Copy a file \'src\' to \'dst\'.  If \'dst\' is a directory, then \'src\' is\n    copied there with the same name; otherwise, it must be a filename.  (If\n    the file exists, it will be ruthlessly clobbered.)  If \'preserve_mode\'\n    is true (the default), the file\'s mode (type and permission bits, or\n    whatever is analogous on the current platform) is copied.  If\n    \'preserve_times\' is true (the default), the last-modified and\n    last-access times are copied as well.  If \'update\' is true, \'src\' will\n    only be copied if \'dst\' does not exist, or if \'dst\' does exist but is\n    older than \'src\'.\n\n    \'link\' allows you to make hard links (os.link) or symbolic links\n    (os.symlink) instead of copying: set it to "hard" or "sym"; if it is\n    None (the default), files are copied.  Don\'t set \'link\' on systems that\n    don\'t support it: \'copy_file()\' doesn\'t check if hard or symbolic\n    linking is available. If hardlink fails, falls back to\n    _copy_file_contents().\n\n    Under Mac OS, uses the native file copy function in macostools; on\n    other systems, uses \'_copy_file_contents()\' to copy file contents.\n\n    Return a tuple (dest_name, copied): \'dest_name\' is the actual name of\n    the output file, and \'copied\' is true if the file was copied (or would\n    have been copied, if \'dry_run\' true).\n    ')), ImportFrom(module='distutils.dep_util', names=[alias(name='newer')], level=0), ImportFrom(module='stat', names=[alias(name='ST_ATIME'), alias(name='ST_MTIME'), alias(name='ST_MODE'), alias(name='S_IMODE')], level=0), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="can't copy '%s': doesn't exist or not a regular file"), op=Mod(), right=Name(id='src', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='dir', ctx=Store())], value=Name(id='dst', ctx=Load())), Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dst', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Name(id='update', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='newer', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[]))]), body=[If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='not copying %s (output up-to-date)'), Name(id='src', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='dst', ctx=Load()), Constant(value=0)], ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='action', ctx=Store())], value=Subscript(value=Name(id='_copy_action', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="invalid value '%s' for 'link' argument"), op=Mod(), right=Name(id='link', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s %s -> %s'), Name(id='action', ctx=Load()), Name(id='src', ctx=Load()), Name(id='dir', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s %s -> %s'), Name(id='action', ctx=Load()), Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='dry_run', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='dst', ctx=Load()), Constant(value=1)], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[Eq()], comparators=[Constant(value='hard')]), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])])), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='link', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='dst', ctx=Load()), Constant(value=1)], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sym')]), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])])), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='symlink', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='dst', ctx=Load()), Constant(value=1)], ctx=Load()))], orelse=[])], orelse=[])])]), Expr(value=Call(func=Name(id='_copy_file_contents', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='preserve_mode', ctx=Load()), Name(id='preserve_times', ctx=Load())]), body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), If(test=Name(id='preserve_times', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='utime', ctx=Load()), args=[Name(id='dst', ctx=Load()), Tuple(elts=[Subscript(value=Name(id='st', ctx=Load()), slice=Name(id='ST_ATIME', ctx=Load()), ctx=Load()), Subscript(value=Name(id='st', ctx=Load()), slice=Name(id='ST_MTIME', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='preserve_mode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='dst', ctx=Load()), Call(func=Name(id='S_IMODE', ctx=Load()), args=[Subscript(value=Name(id='st', ctx=Load()), slice=Name(id='ST_MODE', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='dst', ctx=Load()), Constant(value=1)], ctx=Load()))], decorator_list=[]), FunctionDef(name='move_file', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=0)]), body=[Expr(value=Constant(value="Move a file 'src' to 'dst'.  If 'dst' is a directory, the file will\n    be moved into it with the same name; otherwise, 'src' is just renamed\n    to 'dst'.  Return the new full name of the file.\n\n    Handles cross-device moves on Unix using 'copy_file()'.  What about\n    other systems???\n    ")), ImportFrom(module='os.path', names=[alias(name='exists'), alias(name='isfile'), alias(name='isdir'), alias(name='basename'), alias(name='dirname')], level=0), Import(names=[alias(name='errno')]), If(test=Compare(left=Name(id='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='moving %s -> %s'), Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='dry_run', ctx=Load()), body=[Return(value=Name(id='dst', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isfile', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="can't move '%s': not a regular file"), op=Mod(), right=Name(id='src', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dst', ctx=Load()), Call(func=Name(id='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Name(id='exists', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="can't move '{}': destination '{}' already exists"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isdir', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="can't move '{}': destination '{}' not a valid path"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='copy_it', ctx=Store())], value=Constant(value=False)), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rename', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Assign(targets=[Tuple(elts=[Name(id='num', ctx=Store()), Name(id='msg', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load())), If(test=Compare(left=Name(id='num', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EXDEV', ctx=Load())]), body=[Assign(targets=[Name(id='copy_it', ctx=Store())], value=Constant(value=True))], orelse=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="couldn't move '{}' to '{}': {}"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[], finalbody=[]), If(test=Name(id='copy_it', ctx=Load()), body=[Expr(value=Call(func=Name(id='copy_file', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[keyword(arg='verbose', value=Name(id='verbose', ctx=Load()))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Assign(targets=[Tuple(elts=[Name(id='num', ctx=Store()), Name(id='msg', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="couldn't move '%s' to '%s' by copy/delete: delete '%s' failed: %s"), op=Mod(), right=Tuple(elts=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load()), Name(id='src', ctx=Load()), Name(id='msg', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='dst', ctx=Load()))], decorator_list=[]), FunctionDef(name='write_file', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create a file with the specified name and write 'contents' (a\n    sequence of strings without line terminators) to it.\n    ")), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='w')], keywords=[])), Try(body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='contents', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], type_ignores=[])