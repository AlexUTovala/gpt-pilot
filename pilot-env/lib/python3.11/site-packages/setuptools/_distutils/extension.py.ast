Module(body=[Expr(value=Constant(value='distutils.extension\n\nProvides the Extension class, used to describe C/C++ extension\nmodules in setup scripts.')), Import(names=[alias(name='os')]), Import(names=[alias(name='warnings')]), ClassDef(name='Extension', bases=[], keywords=[], body=[Expr(value=Constant(value='Just a collection of attributes that describes an extension\n    module and everything needed to build it (hopefully in a portable\n    way, but there are hooks that let you be as unportable as you need).\n\n    Instance attributes:\n      name : string\n        the full name of the extension, including any packages -- ie.\n        *not* a filename or pathname, but Python dotted name\n      sources : [string]\n        list of source filenames, relative to the distribution root\n        (where the setup script lives), in Unix form (slash-separated)\n        for portability.  Source files may be C, C++, SWIG (.i),\n        platform-specific resource files, or whatever else is recognized\n        by the "build_ext" command as source for a Python extension.\n      include_dirs : [string]\n        list of directories to search for C/C++ header files (in Unix\n        form for portability)\n      define_macros : [(name : string, value : string|None)]\n        list of macros to define; each macro is defined using a 2-tuple,\n        where \'value\' is either the string to define it to or None to\n        define it without a particular value (equivalent of "#define\n        FOO" in source or -DFOO on Unix C compiler command line)\n      undef_macros : [string]\n        list of macros to undefine explicitly\n      library_dirs : [string]\n        list of directories to search for C/C++ libraries at link time\n      libraries : [string]\n        list of library names (not filenames or paths) to link against\n      runtime_library_dirs : [string]\n        list of directories to search for C/C++ libraries at run time\n        (for shared extensions, this is when the extension is loaded)\n      extra_objects : [string]\n        list of extra files to link with (eg. object files not implied\n        by \'sources\', static library that must be explicitly specified,\n        binary resource files, etc.)\n      extra_compile_args : [string]\n        any extra platform- and compiler-specific information to use\n        when compiling the source files in \'sources\'.  For platforms and\n        compilers where "command line" makes sense, this is typically a\n        list of command-line arguments, but for other platforms it could\n        be anything.\n      extra_link_args : [string]\n        any extra platform- and compiler-specific information to use\n        when linking object files together to create the extension (or\n        to create a new static Python interpreter).  Similar\n        interpretation as for \'extra_compile_args\'.\n      export_symbols : [string]\n        list of symbols to be exported from a shared extension.  Not\n        used on all platforms, and not generally necessary for Python\n        extensions, which typically export exactly one symbol: "init" +\n        extension_name.\n      swig_opts : [string]\n        any extra options to pass to SWIG if a source file has the .i\n        extension.\n      depends : [string]\n        list of files that the extension depends on\n      language : string\n        extension language (i.e. "c", "c++", "objc"). Will be detected\n        from the source extensions if not provided.\n      optional : boolean\n        specifies that a build failure in the extension should not abort the\n        build process, but simply not install the failing extension.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='sources'), arg(arg='include_dirs'), arg(arg='define_macros'), arg(arg='undef_macros'), arg(arg='library_dirs'), arg(arg='libraries'), arg(arg='runtime_library_dirs'), arg(arg='extra_objects'), arg(arg='extra_compile_args'), arg(arg='extra_link_args'), arg(arg='export_symbols'), arg(arg='swig_opts'), arg(arg='depends'), arg(arg='language'), arg(arg='optional')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[Constant(value="'name' must be a string")], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sources', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='sources', ctx=Load()), ifs=[], is_async=0)])], keywords=[])])), body=[Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[Constant(value="'sources' must be a list of strings")], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sources', ctx=Store())], value=Name(id='sources', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_dirs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='include_dirs', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='define_macros', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='define_macros', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='undef_macros', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='undef_macros', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='library_dirs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='library_dirs', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='libraries', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='libraries', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='runtime_library_dirs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='runtime_library_dirs', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_objects', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='extra_objects', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_compile_args', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='extra_compile_args', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_link_args', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='extra_link_args', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='export_symbols', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='export_symbols', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='swig_opts', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='swig_opts', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='depends', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='depends', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='language', ctx=Store())], value=Name(id='language', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optional', ctx=Store())], value=Name(id='optional', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='option', ctx=Store()), iter=Name(id='kw', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Unknown Extension options: %s'), op=Mod(), right=Name(id='options', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{}.{}({!r}) at {:#x}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__module__', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__qualname__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='read_setup_file', args=arguments(posonlyargs=[], args=[arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reads a Setup file and returns Extension instances.')), ImportFrom(module='distutils.sysconfig', names=[alias(name='parse_makefile'), alias(name='expand_makefile_vars'), alias(name='_variable_rx')], level=0), ImportFrom(module='distutils.text_file', names=[alias(name='TextFile')], level=0), ImportFrom(module='distutils.util', names=[alias(name='split_quoted')], level=0), Assign(targets=[Name(id='vars', ctx=Store())], value=Call(func=Name(id='parse_makefile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='TextFile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[keyword(arg='strip_comments', value=Constant(value=1)), keyword(arg='skip_blanks', value=Constant(value=1)), keyword(arg='join_lines', value=Constant(value=1)), keyword(arg='lstrip_ws', value=Constant(value=1)), keyword(arg='rstrip_ws', value=Constant(value=1))])), Try(body=[Assign(targets=[Name(id='extensions', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='_variable_rx', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq(), Eq()], comparators=[Subscript(value=Name(id='line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Constant(value='*')]), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="'%s' lines not handled yet"), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='expand_makefile_vars', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='vars', ctx=Load())], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Name(id='split_quoted', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='ext', ctx=Store())], value=Call(func=Name(id='Extension', ctx=Load()), args=[Name(id='module', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Constant(value=None)), For(target=Name(id='word', ctx=Store()), iter=Subscript(value=Name(id='words', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='append_next_word', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='append_next_word', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Constant(value=None)), Continue()], orelse=[]), Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='switch', ctx=Store())], value=Subscript(value=Name(id='word', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='word', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())), If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='.c'), Constant(value='.cc'), Constant(value='.cpp'), Constant(value='.cxx'), Constant(value='.c++'), Constant(value='.m'), Constant(value='.mm')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='sources', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-I')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='include_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-D')]), body=[Assign(targets=[Name(id='equals', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='=')], keywords=[])), If(test=Compare(left=Name(id='equals', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='define_macros', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='value', ctx=Load()), Constant(value=None)], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='define_macros', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='equals', ctx=Load())), ctx=Load()), Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='equals', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-U')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='undef_macros', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-C')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_compile_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-l')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='libraries', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-L')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-R')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='runtime_library_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-rpath')]), body=[Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Attribute(value=Name(id='ext', ctx=Load()), attr='runtime_library_dirs', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-Xlinker')]), body=[Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_link_args', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-Xcompiler')]), body=[Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_compile_args', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='switch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-u')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_link_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='value', ctx=Load())), body=[Assign(targets=[Name(id='append_next_word', ctx=Store())], value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_link_args', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='.a'), Constant(value='.so'), Constant(value='.sl'), Constant(value='.o'), Constant(value='.dylib')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ext', ctx=Load()), attr='extra_objects', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="unrecognized argument '%s'"), op=Mod(), right=Name(id='word', ctx=Load()))], keywords=[]))])])])])])])])])])])])])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='extensions', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Return(value=Name(id='extensions', ctx=Load()))], decorator_list=[])], type_ignores=[])