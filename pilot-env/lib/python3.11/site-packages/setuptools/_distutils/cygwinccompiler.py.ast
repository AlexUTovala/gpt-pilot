Module(body=[Expr(value=Constant(value='distutils.cygwinccompiler\n\nProvides the CygwinCCompiler class, a subclass of UnixCCompiler that\nhandles the Cygwin port of the GNU C compiler to Windows.  It also contains\nthe Mingw32CCompiler class which handles the mingw32 port of GCC (same as\ncygwin in no-cygwin mode).\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='copy')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='warnings')]), ImportFrom(module='subprocess', names=[alias(name='check_output')], level=0), ImportFrom(module='unixccompiler', names=[alias(name='UnixCCompiler')], level=1), ImportFrom(module='file_util', names=[alias(name='write_file')], level=1), ImportFrom(module='errors', names=[alias(name='DistutilsExecError'), alias(name='DistutilsPlatformError'), alias(name='CCompilerError'), alias(name='CompileError')], level=1), ImportFrom(module='version', names=[alias(name='LooseVersion'), alias(name='suppress_known_deprecation')], level=1), ImportFrom(module='_collections', names=[alias(name='RangeMap')], level=1), Assign(targets=[Name(id='_msvcr_lookup', ctx=Store())], value=Call(func=Attribute(value=Name(id='RangeMap', ctx=Load()), attr='left', ctx=Load()), args=[Dict(keys=[Constant(value=1300), Constant(value=1310), Constant(value=1400), Constant(value=1500), Constant(value=1600), Constant(value=1700), Constant(value=1800), Constant(value=1900), Constant(value=2000)], values=[List(elts=[Constant(value='msvcr70')], ctx=Load()), List(elts=[Constant(value='msvcr71')], ctx=Load()), List(elts=[Constant(value='msvcr80')], ctx=Load()), List(elts=[Constant(value='msvcr90')], ctx=Load()), List(elts=[Constant(value='msvcr100')], ctx=Load()), List(elts=[Constant(value='msvcr110')], ctx=Load()), List(elts=[Constant(value='msvcr120')], ctx=Load()), List(elts=[Constant(value='vcruntime140')], ctx=Load()), Attribute(value=Name(id='RangeMap', ctx=Load()), attr='undefined_value', ctx=Load())])], keywords=[])), FunctionDef(name='get_msvcr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Include the appropriate MSVC runtime library if Python was built\n    with MSVC 7.0 or later.\n    ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='MSC v\\.(\\d{4})'), Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='msc_ver', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), Try(body=[Return(value=Subscript(value=Name(id='_msvcr_lookup', ctx=Load()), slice=Name(id='msc_ver', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown MS Compiler version %s '), op=Mod(), right=Name(id='msc_ver', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='_runtime_library_dirs_msg', ctx=Store())], value=Constant(value='Unable to set runtime library search path on Windows, usually indicated by `runtime_library_dirs` parameter to Extension')), ClassDef(name='CygwinCCompiler', bases=[Name(id='UnixCCompiler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Handles the Cygwin port of the GNU C compiler to Windows.')), Assign(targets=[Name(id='compiler_type', ctx=Store())], value=Constant(value='cygwin')), Assign(targets=[Name(id='obj_extension', ctx=Store())], value=Constant(value='.o')), Assign(targets=[Name(id='static_lib_extension', ctx=Store())], value=Constant(value='.a')), Assign(targets=[Name(id='shared_lib_extension', ctx=Store())], value=Constant(value='.dll.a')), Assign(targets=[Name(id='dylib_lib_extension', ctx=Store())], value=Constant(value='.dll')), Assign(targets=[Name(id='static_lib_format', ctx=Store())], value=Constant(value='lib%s%s')), Assign(targets=[Name(id='shared_lib_format', ctx=Store())], value=Constant(value='lib%s%s')), Assign(targets=[Name(id='dylib_lib_format', ctx=Store())], value=Constant(value='cyg%s%s')), Assign(targets=[Name(id='exe_extension', ctx=Store())], value=Constant(value='.exe')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='verbose', ctx=Load()), Name(id='dry_run', ctx=Load()), Name(id='force', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='status', ctx=Store()), Name(id='details', ctx=Store())], ctx=Store())], value=Call(func=Name(id='check_config_h', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Python's GCC status: {} (details: {})"), attr='format', ctx=Load()), args=[Name(id='status', ctx=Load()), Name(id='details', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='status', ctx=Load()), ops=[IsNot()], comparators=[Name(id='CONFIG_H_OK', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="Python's pyconfig.h doesn't seem to support your compiler. Reason: %s. Compiling may fail because of undefined preprocessor macros."), op=Mod(), right=Name(id='details', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='CC'), Constant(value='gcc')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cxx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='CXX'), Constant(value='g++')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linker_dll', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load())), Assign(targets=[Name(id='shared_option', ctx=Store())], value=Constant(value='-shared')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_executables', ctx=Load()), args=[], keywords=[keyword(arg='compiler', value=BinOp(left=Constant(value='%s -mcygwin -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='compiler_so', value=BinOp(left=Constant(value='%s -mcygwin -mdll -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='compiler_cxx', value=BinOp(left=Constant(value='%s -mcygwin -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cxx', ctx=Load()))), keyword(arg='linker_exe', value=BinOp(left=Constant(value='%s -mcygwin'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='linker_so', value=Call(func=Attribute(value=Constant(value='{} -mcygwin {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='linker_dll', ctx=Load()), Name(id='shared_option', ctx=Load())], keywords=[]))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dll_libraries', ctx=Store())], value=Call(func=Name(id='get_msvcr', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='gcc_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='gcc_version attribute of CygwinCCompiler is deprecated. Instead of returning actual gcc version a fixed value 11.2.0 is returned.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), With(items=[withitem(context_expr=Call(func=Name(id='suppress_known_deprecation', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Name(id='LooseVersion', ctx=Load()), args=[Constant(value='11.2.0')], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='src'), arg(arg='ext'), arg(arg='cc_args'), arg(arg='extra_postargs'), arg(arg='pp_opts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compiles the source by spawning GCC and windres if needed.')), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='.rc'), Constant(value='.res')], ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[List(elts=[Constant(value='windres'), Constant(value='-i'), Name(id='src', ctx=Load()), Constant(value='-o'), Name(id='obj', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='compiler_so', ctx=Load()), op=Add(), right=Name(id='cc_args', ctx=Load())), op=Add(), right=List(elts=[Name(id='src', ctx=Load()), Constant(value='-o'), Name(id='obj', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='extra_postargs', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_desc'), arg(arg='objects'), arg(arg='output_filename'), arg(arg='output_dir'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='runtime_library_dirs'), arg(arg='export_symbols'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='build_temp'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Link the objects.')), Assign(targets=[Name(id='extra_preargs', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='extra_preargs', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='libraries', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='libraries', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='objects', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='objects', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), If(test=Name(id='runtime_library_dirs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='_runtime_library_dirs_msg', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='libraries', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dll_libraries', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='export_symbols', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Name(id='target_desc', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXECUTABLE', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='linker_dll', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gcc')])])]), body=[Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Subscript(value=Name(id='objects', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dll_name', ctx=Store()), Name(id='dll_extension', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='def_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='temp_dir', ctx=Load()), BinOp(left=Name(id='dll_name', ctx=Load()), op=Add(), right=Constant(value='.def'))], keywords=[])), Assign(targets=[Name(id='contents', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='LIBRARY %s'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])), Constant(value='EXPORTS')], ctx=Load())), For(target=Name(id='sym', ctx=Store()), iter=Name(id='export_symbols', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='contents', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='sym', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='write_file', ctx=Load()), Tuple(elts=[Name(id='def_file', ctx=Load()), Name(id='contents', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='writing %s'), op=Mod(), right=Name(id='def_file', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='objects', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='def_file', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='debug', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='extra_preargs', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-s')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='UnixCCompiler', ctx=Load()), attr='link', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='target_desc', ctx=Load()), Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load()), Name(id='output_dir', ctx=Load()), Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load()), Constant(value=None), Name(id='debug', ctx=Load()), Name(id='extra_preargs', ctx=Load()), Name(id='extra_postargs', ctx=Load()), Name(id='build_temp', ctx=Load()), Name(id='target_lang', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='runtime_library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='_runtime_library_dirs_msg', ctx=Load())], keywords=[])), Return(value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_out_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='output_dir'), arg(arg='strip_dir'), arg(arg='src_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='norm_src_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='src_name', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_make_out_path', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='strip_dir', ctx=Load()), Name(id='norm_src_name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='out_extensions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add support for rc and res files.\n        ')), Return(value=Dict(keys=[None, None], values=[Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='out_extensions', ctx=Load()), DictComp(key=Name(id='ext', ctx=Load()), value=BinOp(left=Name(id='ext', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='obj_extension', ctx=Load())), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=Tuple(elts=[Constant(value='.res'), Constant(value='.rc')], ctx=Load()), ifs=[], is_async=0)])]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='Mingw32CCompiler', bases=[Name(id='CygwinCCompiler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Handles the Mingw32 port of the GNU C compiler to Windows.')), Assign(targets=[Name(id='compiler_type', ctx=Store())], value=Constant(value='mingw32')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='verbose', ctx=Load()), Name(id='dry_run', ctx=Load()), Name(id='force', ctx=Load())], keywords=[])), Assign(targets=[Name(id='shared_option', ctx=Store())], value=Constant(value='-shared')), If(test=Call(func=Name(id='is_cygwincc', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='CCompilerError', ctx=Load()), args=[Constant(value='Cygwin gcc cannot be used with --compiler=mingw32')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_executables', ctx=Load()), args=[], keywords=[keyword(arg='compiler', value=BinOp(left=Constant(value='%s -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='compiler_so', value=BinOp(left=Constant(value='%s -mdll -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='compiler_cxx', value=BinOp(left=Constant(value='%s -O -Wall'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cxx', ctx=Load()))), keyword(arg='linker_exe', value=BinOp(left=Constant(value='%s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load()))), keyword(arg='linker_so', value=Call(func=Attribute(value=Constant(value='{} {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='linker_dll', ctx=Load()), Name(id='shared_option', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='runtime_library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Name(id='_runtime_library_dirs_msg', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='CONFIG_H_OK', ctx=Store())], value=Constant(value='ok')), Assign(targets=[Name(id='CONFIG_H_NOTOK', ctx=Store())], value=Constant(value='not ok')), Assign(targets=[Name(id='CONFIG_H_UNCERTAIN', ctx=Store())], value=Constant(value='uncertain')), FunctionDef(name='check_config_h', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where \'status\' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn\'t look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    \'details\' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude "OK": either \'sys.version\' contains\n    the string "GCC" (implying that this Python was built with GCC), or the\n    installed "pyconfig.h" contains the string "__GNUC__".\n    ')), ImportFrom(module='distutils', names=[alias(name='sysconfig')], level=0), If(test=Compare(left=Constant(value='GCC'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='CONFIG_H_OK', ctx=Load()), Constant(value="sys.version mentions 'GCC'")], ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='Clang'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='CONFIG_H_OK', ctx=Load()), Constant(value="sys.version mentions 'Clang'")], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_h_filename', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='config_h', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), Try(body=[If(test=Compare(left=Constant(value='__GNUC__'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='config_h', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Tuple(elts=[Name(id='CONFIG_H_OK', ctx=Load()), BinOp(left=Constant(value="'%s' mentions '__GNUC__'"), op=Mod(), right=Name(id='fn', ctx=Load()))], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='CONFIG_H_NOTOK', ctx=Load()), BinOp(left=Constant(value="'%s' does not mention '__GNUC__'"), op=Mod(), right=Name(id='fn', ctx=Load()))], ctx=Load()))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='config_h', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Return(value=Tuple(elts=[Name(id='CONFIG_H_UNCERTAIN', ctx=Load()), Call(func=Attribute(value=Constant(value="couldn't read '{}': {}"), attr='format', ctx=Load()), args=[Name(id='fn', ctx=Load()), Attribute(value=Name(id='exc', ctx=Load()), attr='strerror', ctx=Load())], keywords=[])], ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='is_cygwincc', args=arguments(posonlyargs=[], args=[arg(arg='cc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to determine if the compiler that would be used is from cygwin.')), Assign(targets=[Name(id='out_string', ctx=Store())], value=Call(func=Name(id='check_output', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='cc', ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Constant(value='-dumpmachine')], ctx=Load()))], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='out_string', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value=b'cygwin')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='get_versions', ctx=Store())], value=Constant(value=None)), Expr(value=Constant(value='\nA stand-in for the previous get_versions() function to prevent failures\nwhen monkeypatched. See pypa/setuptools#2969.\n'))], type_ignores=[])