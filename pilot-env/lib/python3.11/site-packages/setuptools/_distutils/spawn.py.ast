Module(body=[Expr(value=Constant(value="distutils.spawn\n\nProvides the 'spawn()' function, a front-end to various platform-\nspecific functions for launching another program in a sub-process.\nAlso provides the 'find_executable()' to search the path for a given\nexecutable name.\n")), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), ImportFrom(module='errors', names=[alias(name='DistutilsExecError')], level=1), ImportFrom(module='debug', names=[alias(name='DEBUG')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), FunctionDef(name='spawn', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='search_path'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='env')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=None)]), body=[Expr(value=Constant(value="Run another program, specified as a command list 'cmd', in a new process.\n\n    'cmd' is just the argument list for the new process, ie.\n    cmd[0] is the program to run and cmd[1:] are the rest of its arguments.\n    There is no way to run a program with a name different from that of its\n    executable.\n\n    If 'search_path' is true (the default), the system's executable\n    search path will be used to find the program; otherwise, cmd[0]\n    must be the exact path to the executable.  If 'dry_run' is true,\n    the command will not actually be run.\n\n    Raise DistutilsExecError if running the program fails in any way; just\n    return on success.\n    ")), Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='list2cmdline', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='dry_run', ctx=Load()), body=[Return()], orelse=[]), If(test=Name(id='search_path', ctx=Load()), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Name(id='find_executable', ctx=Load()), args=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='executable', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='executable', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='env', ctx=Store())], value=IfExp(test=Compare(left=Name(id='env', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='env', ctx=Load()), orelse=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())], keywords=[]))), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[ImportFrom(module='distutils.util', names=[alias(name='MACOSX_VERSION_VAR'), alias(name='get_macosx_target_ver')], level=0), Assign(targets=[Name(id='macosx_target_ver', ctx=Store())], value=Call(func=Name(id='get_macosx_target_ver', ctx=Load()), args=[], keywords=[])), If(test=Name(id='macosx_target_ver', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Name(id='MACOSX_VERSION_VAR', ctx=Load()), ctx=Store())], value=Name(id='macosx_target_ver', ctx=Load()))], orelse=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='env', value=Name(id='env', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='exitcode', ctx=Store())], value=Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[If(test=UnaryOp(op=Not(), operand=Name(id='DEBUG', ctx=Load())), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='DistutilsExecError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='command {!r} failed: {}'), attr='format', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Subscript(value=Attribute(value=Name(id='exc', ctx=Load()), attr='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Name(id='exitcode', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='DEBUG', ctx=Load())), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='DistutilsExecError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='command {!r} failed with exit code {}'), attr='format', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Name(id='exitcode', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='find_executable', args=arguments(posonlyargs=[], args=[arg(arg='executable'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Tries to find 'executable' in the directories listed in 'path'.\n\n    A string listing directories separated by 'os.pathsep'; defaults to\n    os.environ['PATH'].  Returns the complete filename or None if not found.\n    ")), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Name(id='ext', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='.exe')])]), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=BinOp(left=Name(id='executable', ctx=Load()), op=Add(), right=Constant(value='.exe')))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), body=[Return(value=Name(id='executable', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATH'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='confstr', ctx=Load()), args=[Constant(value='CS_PATH')], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='defpath', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='executable', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Return(value=Name(id='f', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])