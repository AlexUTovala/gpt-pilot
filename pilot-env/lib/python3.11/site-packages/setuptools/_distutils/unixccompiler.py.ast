Module(body=[Expr(value=Constant(value='distutils.unixccompiler\n\nContains the UnixCCompiler class, a subclass of CCompiler that handles\nthe "typical" Unix-style command-line C compiler:\n  * macros defined with -Dname[=value]\n  * macros undefined with -Uname\n  * include search directories specified with -Idir\n  * libraries specified with -lllib\n  * library search directories specified with -Ldir\n  * compile handled by \'cc\' (or similar) executable with -c option:\n    compiles .c to .o\n  * link static library handled by \'ar\' command (possibly with \'ranlib\')\n  * link shared library handled by \'cc -shared\'\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='itertools')]), ImportFrom(names=[alias(name='sysconfig')], level=1), ImportFrom(module='dep_util', names=[alias(name='newer')], level=1), ImportFrom(module='ccompiler', names=[alias(name='CCompiler'), alias(name='gen_preprocess_options'), alias(name='gen_lib_options')], level=1), ImportFrom(module='errors', names=[alias(name='DistutilsExecError'), alias(name='CompileError'), alias(name='LibError'), alias(name='LinkError')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), ImportFrom(module='_macos_compat', names=[alias(name='compiler_fixup')], level=1), FunctionDef(name='_split_env', args=arguments(posonlyargs=[], args=[arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    For macOS, split command into 'env' portion (if any)\n    and the rest of the linker command.\n\n    >>> _split_env(['a', 'b', 'c'])\n    ([], ['a', 'b', 'c'])\n    >>> _split_env(['/usr/bin/env', 'A=3', 'gcc'])\n    (['/usr/bin/env', 'A=3'], ['gcc'])\n    ")), Assign(targets=[Name(id='pivot', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='env')]), body=[Assign(targets=[Name(id='pivot', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Constant(value='='), ops=[In()], comparators=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Name(id='pivot', ctx=Load()), ctx=Load())]), body=[AugAssign(target=Name(id='pivot', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Slice(upper=Name(id='pivot', ctx=Load())), ctx=Load()), Subscript(value=Name(id='cmd', ctx=Load()), slice=Slice(lower=Name(id='pivot', ctx=Load())), ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_split_aix', args=arguments(posonlyargs=[], args=[arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    AIX platforms prefix the compiler with the ld_so_aix\n    script, so split that from the linker command.\n\n    >>> _split_aix(['a', 'b', 'c'])\n    ([], ['a', 'b', 'c'])\n    >>> _split_aix(['/bin/foo/ld_so_aix', 'gcc'])\n    (['/bin/foo/ld_so_aix'], ['gcc'])\n    ")), Assign(targets=[Name(id='pivot', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='ld_so_aix')])), Return(value=Tuple(elts=[Subscript(value=Name(id='cmd', ctx=Load()), slice=Slice(upper=Name(id='pivot', ctx=Load())), ctx=Load()), Subscript(value=Name(id='cmd', ctx=Load()), slice=Slice(lower=Name(id='pivot', ctx=Load())), ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_linker_params', args=arguments(posonlyargs=[], args=[arg(arg='linker_cmd'), arg(arg='compiler_cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    The linker command usually begins with the compiler\n    command (possibly multiple elements), followed by zero or more\n    params for shared library building.\n\n    If the LDSHARED env variable overrides the linker command,\n    however, the commands may not match.\n\n    Return the best guess of the linker parameters by stripping\n    the linker command. If the compiler command does not\n    match the linker command, assume the linker command is\n    just the first element.\n\n    >>> _linker_params('gcc foo bar'.split(), ['gcc'])\n    ['foo', 'bar']\n    >>> _linker_params('gcc foo bar'.split(), ['other'])\n    ['foo', 'bar']\n    >>> _linker_params('ccache gcc foo bar'.split(), 'ccache gcc'.split())\n    ['foo', 'bar']\n    >>> _linker_params(['gcc'], ['gcc'])\n    []\n    ")), Assign(targets=[Name(id='c_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='compiler_cmd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pivot', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='linker_cmd', ctx=Load()), slice=Slice(upper=Name(id='c_len', ctx=Load())), ctx=Load()), ops=[Eq()], comparators=[Name(id='compiler_cmd', ctx=Load())]), body=Name(id='c_len', ctx=Load()), orelse=Constant(value=1))), Return(value=Subscript(value=Name(id='linker_cmd', ctx=Load()), slice=Slice(lower=Name(id='pivot', ctx=Load())), ctx=Load()))], decorator_list=[]), ClassDef(name='UnixCCompiler', bases=[Name(id='CCompiler', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='compiler_type', ctx=Store())], value=Constant(value='unix')), Assign(targets=[Name(id='executables', ctx=Store())], value=Dict(keys=[Constant(value='preprocessor'), Constant(value='compiler'), Constant(value='compiler_so'), Constant(value='compiler_cxx'), Constant(value='linker_so'), Constant(value='linker_exe'), Constant(value='archiver'), Constant(value='ranlib')], values=[Constant(value=None), List(elts=[Constant(value='cc')], ctx=Load()), List(elts=[Constant(value='cc')], ctx=Load()), List(elts=[Constant(value='cc')], ctx=Load()), List(elts=[Constant(value='cc'), Constant(value='-shared')], ctx=Load()), List(elts=[Constant(value='cc')], ctx=Load()), List(elts=[Constant(value='ar'), Constant(value='-cr')], ctx=Load()), Constant(value=None)])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[Assign(targets=[Subscript(value=Name(id='executables', ctx=Load()), slice=Constant(value='ranlib'), ctx=Store())], value=List(elts=[Constant(value='ranlib')], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='src_extensions', ctx=Store())], value=List(elts=[Constant(value='.c'), Constant(value='.C'), Constant(value='.cc'), Constant(value='.cxx'), Constant(value='.cpp'), Constant(value='.m')], ctx=Load())), Assign(targets=[Name(id='obj_extension', ctx=Store())], value=Constant(value='.o')), Assign(targets=[Name(id='static_lib_extension', ctx=Store())], value=Constant(value='.a')), Assign(targets=[Name(id='shared_lib_extension', ctx=Store())], value=Constant(value='.so')), Assign(targets=[Name(id='dylib_lib_extension', ctx=Store())], value=Constant(value='.dylib')), Assign(targets=[Name(id='xcode_stub_lib_extension', ctx=Store())], value=Constant(value='.tbd')), Assign(targets=[Name(id='static_lib_format', ctx=Store()), Name(id='shared_lib_format', ctx=Store()), Name(id='dylib_lib_format', ctx=Store())], value=Constant(value='lib%s%s')), Assign(targets=[Name(id='xcode_stub_lib_format', ctx=Store())], value=Name(id='dylib_lib_format', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=[Assign(targets=[Name(id='exe_extension', ctx=Store())], value=Constant(value='.exe'))], orelse=[]), FunctionDef(name='preprocess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source'), arg(arg='output_file'), arg(arg='macros'), arg(arg='include_dirs'), arg(arg='extra_preargs'), arg(arg='extra_postargs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='fixed_args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_compile_args', ctx=Load()), args=[Constant(value=None), Name(id='macros', ctx=Load()), Name(id='include_dirs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='ignore', ctx=Store()), Name(id='macros', ctx=Store()), Name(id='include_dirs', ctx=Store())], ctx=Store())], value=Name(id='fixed_args', ctx=Load())), Assign(targets=[Name(id='pp_opts', ctx=Store())], value=Call(func=Name(id='gen_preprocess_options', ctx=Load()), args=[Name(id='macros', ctx=Load()), Name(id='include_dirs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pp_args', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='preprocessor', ctx=Load()), op=Add(), right=Name(id='pp_opts', ctx=Load()))), If(test=Name(id='output_file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='pp_args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='-o'), Name(id='output_file', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='extra_preargs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='pp_args', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=Name(id='extra_preargs', ctx=Load()))], orelse=[]), If(test=Name(id='extra_postargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='pp_args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='extra_postargs', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='pp_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='preprocess', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load()), Compare(left=Name(id='output_file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='newer', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='output_file', ctx=Load())], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='preprocess', ctx=Load())), body=[Return()], orelse=[]), If(test=Name(id='output_file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='output_file', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[Name(id='pp_args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='src'), arg(arg='ext'), arg(arg='cc_args'), arg(arg='extra_postargs'), arg(arg='pp_opts')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='compiler_so', ctx=Store())], value=Call(func=Name(id='compiler_fixup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler_so', ctx=Load()), BinOp(left=Name(id='cc_args', ctx=Load()), op=Add(), right=Name(id='extra_postargs', ctx=Load()))], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='compiler_so', ctx=Load()), op=Add(), right=Name(id='cc_args', ctx=Load())), op=Add(), right=List(elts=[Name(id='src', ctx=Load()), Constant(value='-o'), Name(id='obj', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='extra_postargs', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='create_static_lib', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objects'), arg(arg='output_libname'), arg(arg='output_dir'), arg(arg='debug'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='output_libname', ctx=Load())], keywords=[keyword(arg='output_dir', value=Name(id='output_dir', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='archiver', ctx=Load()), op=Add(), right=List(elts=[Name(id='output_filename', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='objects', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='objects', ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ranlib', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='ranlib', ctx=Load()), op=Add(), right=List(elts=[Name(id='output_filename', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LibError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_desc'), arg(arg='objects'), arg(arg='output_filename'), arg(arg='output_dir'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='runtime_library_dirs'), arg(arg='export_symbols'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='build_temp'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fixed_args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_lib_args', ctx=Load()), args=[Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='libraries', ctx=Store()), Name(id='library_dirs', ctx=Store()), Name(id='runtime_library_dirs', ctx=Store())], ctx=Store())], value=Name(id='fixed_args', ctx=Load())), Assign(targets=[Name(id='lib_opts', ctx=Store())], value=Call(func=Name(id='gen_lib_options', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load()), Name(id='libraries', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value="'output_dir' must be a string or None")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='output_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ld_args', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='objects', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='objects', ctx=Load())), op=Add(), right=Name(id='lib_opts', ctx=Load())), op=Add(), right=List(elts=[Constant(value='-o'), Name(id='output_filename', ctx=Load())], ctx=Load()))), If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='ld_args', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=List(elts=[Constant(value='-g')], ctx=Load()))], orelse=[]), If(test=Name(id='extra_preargs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='ld_args', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=Name(id='extra_preargs', ctx=Load()))], orelse=[]), If(test=Name(id='extra_postargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='extra_postargs', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='building_exe', ctx=Store())], value=Compare(left=Name(id='target_desc', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load())])), Assign(targets=[Name(id='linker', ctx=Store())], value=Subscript(value=IfExp(test=Name(id='building_exe', ctx=Load()), body=Attribute(value=Name(id='self', ctx=Load()), attr='linker_exe', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='linker_so', ctx=Load())), slice=Slice(), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='target_lang', ctx=Load()), ops=[Eq()], comparators=[Constant(value='c++')]), Attribute(value=Name(id='self', ctx=Load()), attr='compiler_cxx', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='env', ctx=Store()), Name(id='linker_ne', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_env', ctx=Load()), args=[Name(id='linker', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='aix', ctx=Store()), Name(id='linker_na', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_aix', ctx=Load()), args=[Name(id='linker_ne', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='compiler_cxx_ne', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_env', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compiler_cxx', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='linker_exe_ne', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_split_env', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='linker_exe', ctx=Load())], keywords=[])), Assign(targets=[Name(id='params', ctx=Store())], value=Call(func=Name(id='_linker_params', ctx=Load()), args=[Name(id='linker_na', ctx=Load()), Name(id='linker_exe_ne', ctx=Load())], keywords=[])), Assign(targets=[Name(id='linker', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='env', ctx=Load()), op=Add(), right=Name(id='aix', ctx=Load())), op=Add(), right=Name(id='compiler_cxx_ne', ctx=Load())), op=Add(), right=Name(id='params', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='linker', ctx=Store())], value=Call(func=Name(id='compiler_fixup', ctx=Load()), args=[Name(id='linker', ctx=Load()), Name(id='ld_args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=Name(id='linker', ctx=Load()), op=Add(), right=Name(id='ld_args', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LinkError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='-L'), op=Add(), right=Name(id='dir', ctx=Load())))], decorator_list=[]), FunctionDef(name='_is_gcc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cc_var', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='CC')], keywords=[])), Assign(targets=[Name(id='compiler', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='cc_var', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value='gcc'), ops=[In()], comparators=[Name(id='compiler', ctx=Load())]), Compare(left=Constant(value='g++'), ops=[In()], comparators=[Name(id='compiler', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='runtime_library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[ImportFrom(module='distutils.util', names=[alias(name='get_macosx_target_ver'), alias(name='split_version')], level=0), Assign(targets=[Name(id='macosx_target_ver', ctx=Store())], value=Call(func=Name(id='get_macosx_target_ver', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='macosx_target_ver', ctx=Load()), Compare(left=Call(func=Name(id='split_version', ctx=Load()), args=[Name(id='macosx_target_ver', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[List(elts=[Constant(value=10), Constant(value=5)], ctx=Load())])]), body=[Return(value=BinOp(left=Constant(value='-Wl,-rpath,'), op=Add(), right=Name(id='dir', ctx=Load())))], orelse=[Return(value=BinOp(left=Constant(value='-L'), op=Add(), right=Name(id='dir', ctx=Load())))])], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=7)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='freebsd')]), body=[Return(value=BinOp(left=Constant(value='-Wl,-rpath='), op=Add(), right=Name(id='dir', ctx=Load())))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='hp-ux')]), body=[Return(value=List(elts=[IfExp(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_gcc', ctx=Load()), args=[], keywords=[]), body=Constant(value='-Wl,+s'), orelse=Constant(value='+s')), BinOp(left=Constant(value='-L'), op=Add(), right=Name(id='dir', ctx=Load()))], ctx=Load()))], orelse=[])])]), If(test=Compare(left=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='GNULD')], keywords=[]), ops=[Eq()], comparators=[Constant(value='yes')]), body=[Return(value=BinOp(left=Constant(value='-Wl,--enable-new-dtags,-R'), op=Add(), right=Name(id='dir', ctx=Load())))], orelse=[Return(value=BinOp(left=Constant(value='-Wl,-R'), op=Add(), right=Name(id='dir', ctx=Load())))])], decorator_list=[]), FunctionDef(name='library_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='-l'), op=Add(), right=Name(id='lib', ctx=Load())))], decorator_list=[]), FunctionDef(name='_library_root', args=arguments(posonlyargs=[], args=[arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        macOS users can specify an alternate SDK using'-isysroot'.\n        Calculate the SDK root if it is specified.\n\n        Note that, as of Xcode 7, Apple SDKs may contain textual stub\n        libraries with .tbd extensions rather than the normal .dylib\n        shared libraries installed in /.  The Apple compiler tool\n        chain handles this transparently but it can cause problems\n        for programs that are being built with an SDK and searching\n        for specific libraries.  Callers of find_library_file need to\n        keep in mind that the base filename of the returned SDK library\n        file might have a different extension from that of the library\n        file installed on the running system, for example:\n          /Applications/Xcode.app/Contents/Developer/Platforms/\n              MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/\n              usr/lib/libedit.tbd\n        vs\n          /usr/lib/libedit.dylib\n        ")), Assign(targets=[Name(id='cflags', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='CFLAGS')], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='-isysroot\\s*(\\S+)'), Name(id='cflags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='apply_root', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), Name(id='match', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='dir', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/System/')], keywords=[]), BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='dir', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/usr/')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='dir', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/usr/local/')], keywords=[]))])])])), Return(value=IfExp(test=Name(id='apply_root', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), Subscript(value=Name(id='dir', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), orelse=Name(id='dir', ctx=Load())))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='find_library_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dirs'), arg(arg='lib'), arg(arg='debug')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC\'s "-static" option.\n\n        >>> compiler = UnixCCompiler()\n        >>> compiler._library_root = lambda dir: dir\n        >>> monkeypatch = getfixture(\'monkeypatch\')\n        >>> monkeypatch.setattr(os.path, \'exists\', lambda d: \'existing\' in d)\n        >>> dirs = (\'/foo/bar/missing\', \'/foo/bar/existing\')\n        >>> compiler.find_library_file(dirs, \'abc\').replace(\'\\\\\', \'/\')\n        \'/foo/bar/existing/libabc.dylib\'\n        >>> compiler.find_library_file(reversed(dirs), \'abc\').replace(\'\\\\\', \'/\')\n        \'/foo/bar/existing/libabc.dylib\'\n        >>> monkeypatch.setattr(os.path, \'exists\',\n        ...     lambda d: \'existing\' in d and \'.a\' in d)\n        >>> compiler.find_library_file(dirs, \'abc\').replace(\'\\\\\', \'/\')\n        \'/foo/bar/existing/libabc.a\'\n        >>> compiler.find_library_file(reversed(dirs), \'abc\').replace(\'\\\\\', \'/\')\n        \'/foo/bar/existing/libabc.a\'\n        ')), Assign(targets=[Name(id='lib_names', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='lib', ctx=Load())], keywords=[keyword(arg='lib_type', value=Name(id='type', ctx=Load()))]), generators=[comprehension(target=Name(id='type', ctx=Store()), iter=Call(func=Attribute(value=Constant(value='dylib xcode_stub shared static'), attr='split', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='roots', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_library_root', ctx=Load()), Name(id='dirs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='searched', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='lib_name', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='lib_name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[Name(id='roots', ctx=Load()), Name(id='lib_names', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), Name(id='searched', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='found', ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])