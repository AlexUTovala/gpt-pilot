Module(body=[Expr(value=Constant(value='Utilities for extracting common archive formats')), Import(names=[alias(name='zipfile')]), Import(names=[alias(name='tarfile')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='contextlib')]), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsError')], level=0), ImportFrom(module='_path', names=[alias(name='ensure_directory')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='unpack_archive'), Constant(value='unpack_zipfile'), Constant(value='unpack_tarfile'), Constant(value='default_filter'), Constant(value='UnrecognizedFormat'), Constant(value='extraction_drivers'), Constant(value='unpack_directory')], ctx=Load())), ClassDef(name='UnrecognizedFormat', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Couldn't recognize the archive type"))], decorator_list=[]), FunctionDef(name='default_filter', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The default progress/filter callback; returns True for all files')), Return(value=Name(id='dst', ctx=Load()))], decorator_list=[]), FunctionDef(name='unpack_archive', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='extract_dir'), arg(arg='progress_filter'), arg(arg='drivers')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_filter', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value="Unpack `filename` to `extract_dir`, or raise ``UnrecognizedFormat``\n\n    `progress_filter` is a function taking two arguments: a source path\n    internal to the archive ('/'-separated), and a filesystem path where it\n    will be extracted.  The callback must return the desired extract path\n    (which may be the same as the one passed in), or else ``None`` to skip\n    that file or directory.  The callback can thus be used to report on the\n    progress of the extraction, as well as to filter the items extracted or\n    alter their extraction paths.\n\n    `drivers`, if supplied, must be a non-empty sequence of functions with the\n    same signature as this function (minus the `drivers` argument), that raise\n    ``UnrecognizedFormat`` if they do not support extracting the designated\n    archive type.  The `drivers` are tried in sequence until one is found that\n    does not raise an error, or until all are exhausted (in which case\n    ``UnrecognizedFormat`` is raised).  If you do not supply a sequence of\n    drivers, the module's ``extraction_drivers`` constant will be used, which\n    means that ``unpack_zipfile`` and ``unpack_tarfile`` will be tried, in that\n    order.\n    ")), For(target=Name(id='driver', ctx=Store()), iter=BoolOp(op=Or(), values=[Name(id='drivers', ctx=Load()), Name(id='extraction_drivers', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Name(id='driver', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='extract_dir', ctx=Load()), Name(id='progress_filter', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnrecognizedFormat', ctx=Load()), body=[Continue()])], orelse=[Return()], finalbody=[])], orelse=[Raise(exc=Call(func=Name(id='UnrecognizedFormat', ctx=Load()), args=[BinOp(left=Constant(value='Not a recognized archive type: %s'), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))])], decorator_list=[]), FunctionDef(name='unpack_directory', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='extract_dir'), arg(arg='progress_filter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_filter', ctx=Load())]), body=[Expr(value=Constant(value=' "Unpack" a directory, using the same interface as for archives\n\n    Raises ``UnrecognizedFormat`` if `filename` is not a directory\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='UnrecognizedFormat', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a directory'), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paths', ctx=Store())], value=Dict(keys=[Name(id='filename', ctx=Load())], values=[Tuple(elts=[Constant(value=''), Name(id='extract_dir', ctx=Load())], ctx=Load())])), For(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='dst', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='paths', ctx=Load()), slice=Name(id='base', ctx=Load()), ctx=Load())), For(target=Name(id='d', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='paths', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='d', ctx=Load())], keywords=[]), ctx=Store())], value=Tuple(elts=[BinOp(left=BinOp(left=Name(id='src', ctx=Load()), op=Add(), right=Name(id='d', ctx=Load())), op=Add(), right=Constant(value='/')), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dst', ctx=Load()), Name(id='d', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), For(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dst', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Name(id='progress_filter', ctx=Load()), args=[BinOp(left=Name(id='src', ctx=Load()), op=Add(), right=Name(id='f', ctx=Load())), Name(id='target', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='target', ctx=Load())), body=[Continue()], orelse=[]), Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copystat', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='target', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='unpack_zipfile', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='extract_dir'), arg(arg='progress_filter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_filter', ctx=Load())]), body=[Expr(value=Constant(value='Unpack zip `filename` to `extract_dir`\n\n    Raises ``UnrecognizedFormat`` if `filename` is not a zipfile (as determined\n    by ``zipfile.is_zipfile()``).  See ``unpack_archive()`` for an explanation\n    of the `progress_filter` argument.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='is_zipfile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='UnrecognizedFormat', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a zip file'), op=Mod(), right=Tuple(elts=[Name(id='filename', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), optional_vars=Name(id='z', ctx=Store()))], body=[Expr(value=Call(func=Name(id='_unpack_zipfile_obj', ctx=Load()), args=[Name(id='z', ctx=Load()), Name(id='extract_dir', ctx=Load()), Name(id='progress_filter', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_unpack_zipfile_obj', args=arguments(posonlyargs=[], args=[arg(arg='zipfile_obj'), arg(arg='extract_dir'), arg(arg='progress_filter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_filter', ctx=Load())]), body=[Expr(value=Constant(value='Internal/private API used by other parts of setuptools.\n    Similar to ``unpack_zipfile``, but receives an already opened :obj:`zipfile.ZipFile`\n    object instead of a filename.\n    ')), For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='zipfile_obj', ctx=Load()), attr='infolist', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='filename', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), Compare(left=Constant(value='..'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='extract_dir', ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Name(id='progress_filter', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='target', ctx=Load())), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), body=[Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile_obj', ctx=Load()), attr='read', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='target', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='unix_attributes', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='external_attr', ctx=Load()), op=RShift(), right=Constant(value=16))), If(test=Name(id='unix_attributes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='target', ctx=Load()), Name(id='unix_attributes', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_resolve_tar_file_or_dir', args=arguments(posonlyargs=[], args=[arg(arg='tar_obj'), arg(arg='tar_member_obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Resolve any links and extract link targets as normal files.')), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='tar_member_obj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='islnk', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='issym', ctx=Load()), args=[], keywords=[])])]), body=[Assign(targets=[Name(id='linkpath', ctx=Store())], value=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='linkname', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='issym', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='linkpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='linkpath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='linkpath', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='linkpath', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tar_member_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='tar_obj', ctx=Load()), attr='_getmember', ctx=Load()), args=[Name(id='linkpath', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='is_file_or_dir', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='tar_member_obj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='isfile', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='tar_member_obj', ctx=Load()), attr='isdir', ctx=Load()), args=[], keywords=[])])])), If(test=Name(id='is_file_or_dir', ctx=Load()), body=[Return(value=Name(id='tar_member_obj', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='LookupError', ctx=Load()), args=[Constant(value='Got unknown file type')], keywords=[]))], decorator_list=[]), FunctionDef(name='_iter_open_tar', args=arguments(posonlyargs=[], args=[arg(arg='tar_obj'), arg(arg='extract_dir'), arg(arg='progress_filter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Emit member-destination pairs from a tar archive.')), Assign(targets=[Attribute(value=Name(id='tar_obj', ctx=Load()), attr='chown', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='tar_obj', ctx=Load())], keywords=[]))], body=[For(target=Name(id='member', ctx=Store()), iter=Name(id='tar_obj', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='member', ctx=Load()), attr='name', ctx=Load())), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), Compare(left=Constant(value='..'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='prelim_dst', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='extract_dir', ctx=Load()), Starred(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='member', ctx=Store())], value=Call(func=Name(id='_resolve_tar_file_or_dir', ctx=Load()), args=[Name(id='tar_obj', ctx=Load()), Name(id='member', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='LookupError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='final_dst', ctx=Store())], value=Call(func=Name(id='progress_filter', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='prelim_dst', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='final_dst', ctx=Load())), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='final_dst', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='final_dst', ctx=Store())], value=Subscript(value=Name(id='final_dst', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='member', ctx=Load()), Name(id='final_dst', ctx=Load())], ctx=Load())))], orelse=[])])], decorator_list=[]), FunctionDef(name='unpack_tarfile', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='extract_dir'), arg(arg='progress_filter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='default_filter', ctx=Load())]), body=[Expr(value=Constant(value='Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`\n\n    Raises ``UnrecognizedFormat`` if `filename` is not a tarfile (as determined\n    by ``tarfile.open()``).  See ``unpack_archive()`` for an explanation\n    of the `progress_filter` argument.\n    ')), Try(body=[Assign(targets=[Name(id='tarobj', ctx=Store())], value=Call(func=Attribute(value=Name(id='tarfile', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='tarfile', ctx=Load()), attr='TarError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UnrecognizedFormat', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a compressed or uncompressed tar file'), op=Mod(), right=Tuple(elts=[Name(id='filename', ctx=Load())], ctx=Load()))], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), For(target=Tuple(elts=[Name(id='member', ctx=Store()), Name(id='final_dst', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='_iter_open_tar', ctx=Load()), args=[Name(id='tarobj', ctx=Load()), Name(id='extract_dir', ctx=Load()), Name(id='progress_filter', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='tarobj', ctx=Load()), attr='_extract_member', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='final_dst', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='tarfile', ctx=Load()), attr='ExtractError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), Assign(targets=[Name(id='extraction_drivers', ctx=Store())], value=Tuple(elts=[Name(id='unpack_directory', ctx=Load()), Name(id='unpack_zipfile', ctx=Load()), Name(id='unpack_tarfile', ctx=Load())], ctx=Load()))], type_ignores=[])