Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='operator')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='unittest')]), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsError'), alias(name='DistutilsOptionError')], level=0), ImportFrom(module='distutils', names=[alias(name='log')], level=0), ImportFrom(module='unittest', names=[alias(name='TestLoader')], level=0), ImportFrom(module='pkg_resources', names=[alias(name='resource_listdir'), alias(name='resource_exists'), alias(name='normalize_path'), alias(name='working_set'), alias(name='evaluate_marker'), alias(name='add_activation_listener'), alias(name='require')], level=0), ImportFrom(module='_importlib', names=[alias(name='metadata')], level=2), ImportFrom(module='setuptools', names=[alias(name='Command')], level=0), ImportFrom(module='setuptools.extern.more_itertools', names=[alias(name='unique_everseen')], level=0), ImportFrom(module='setuptools.extern.jaraco.functools', names=[alias(name='pass_none')], level=0), ClassDef(name='ScanningLoader', bases=[Name(id='TestLoader', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='TestLoader', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_visited', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='loadTestsFromModule', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Return a suite of all tests cases contained in the given module\n\n        If the module is a package, load tests from all the modules in it.\n        If the module has an ``additional_tests`` function, call it and add\n        the return value to the tests.\n        ')), If(test=Compare(left=Name(id='module', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_visited', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_visited', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='module', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tests', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='tests', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='TestLoader', ctx=Load()), attr='loadTestsFromModule', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='module', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value='additional_tests')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tests', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='module', ctx=Load()), attr='additional_tests', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value='__path__')], keywords=[]), body=[For(target=Name(id='file', ctx=Store()), iter=Call(func=Name(id='resource_listdir', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load()), Constant(value='')], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), Compare(left=Name(id='file', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__init__.py')])]), body=[Assign(targets=[Name(id='submodule', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Subscript(value=Name(id='file', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=3))), ctx=Load())))], orelse=[If(test=Call(func=Name(id='resource_exists', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load()), BinOp(left=Name(id='file', ctx=Load()), op=Add(), right=Constant(value='/__init__.py'))], keywords=[]), body=[Assign(targets=[Name(id='submodule', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Name(id='file', ctx=Load())))], orelse=[Continue()])]), Expr(value=Call(func=Attribute(value=Name(id='tests', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='loadTestsFromName', ctx=Load()), args=[Name(id='submodule', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tests', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suiteClass', ctx=Load()), args=[Name(id='tests', ctx=Load())], keywords=[]))], orelse=[Return(value=Subscript(value=Name(id='tests', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], decorator_list=[])], decorator_list=[]), ClassDef(name='NonDataProperty', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fget')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fget', ctx=Store())], value=Name(id='fget', ctx=Load()))], decorator_list=[]), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='objtype')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fget', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='test', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Command to run unit tests after in-place build')), Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='run unit tests after in-place build (deprecated)')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='test-module='), Constant(value='m'), Constant(value="Run 'test_suite' in specified module")], ctx=Load()), Tuple(elts=[Constant(value='test-suite='), Constant(value='s'), Constant(value="Run single test, case or suite (e.g. 'module.test_suite')")], ctx=Load()), Tuple(elts=[Constant(value='test-runner='), Constant(value='r'), Constant(value='Test runner to use')], ctx=Load())], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_module', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_runner', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='test_module', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='You may specify a module or a suite, but not both')), Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_module', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='test_suite', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_module', ctx=Load()), op=Add(), right=Constant(value='.test_suite')))])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), Constant(value='test_loader'), Constant(value=None)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Store())], value=Constant(value='setuptools.command.test:ScanningLoader'))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='test_runner', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='test_runner', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), Constant(value='test_runner'), Constant(value=None)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_args', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='NonDataProperty', ctx=Load())]), FunctionDef(name='_test_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Load())), body=[Expr(value=Yield(value=Constant(value='discover')))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), body=[Expr(value=Yield(value=Constant(value='--verbose')))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='test_suite', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='with_project_on_sys_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Backward compatibility for project_on_sys_path context.\n        ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='project_on_sys_path', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='project_on_sys_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include_dists')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reinitialize_command', ctx=Load()), args=[Constant(value='build_ext')], keywords=[keyword(arg='inplace', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='build_ext')], keywords=[])), Assign(targets=[Name(id='ei_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Assign(targets=[Name(id='old_path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='old_modules', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='project_path', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_base', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='project_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='working_set', ctx=Load()), attr='__init__', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='add_activation_listener', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='activate', ctx=Load()), args=[], keywords=[]))], keywords=[])), Expr(value=Call(func=Name(id='require', ctx=Load()), args=[BinOp(left=Constant(value='%s==%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_name', ctx=Load()), Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_version', ctx=Load())], ctx=Load()))], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='paths_on_pythonpath', ctx=Load()), args=[List(elts=[Name(id='project_path', ctx=Load())], ctx=Load())], keywords=[]))], body=[Expr(value=Yield())])], handlers=[], orelse=[], finalbody=[Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='old_path', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='old_modules', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='working_set', ctx=Load()), attr='__init__', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='paths_on_pythonpath', args=arguments(posonlyargs=[], args=[arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add the indicated paths to the head of the PYTHONPATH environment\n        variable so that subprocesses will also see the packages at\n        these paths.\n\n        Do this in a context that restores the value on exit.\n        ')), Assign(targets=[Name(id='nothing', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='orig_pythonpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTHONPATH'), Name(id='nothing', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_pythonpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTHONPATH'), Constant(value='')], keywords=[])), Try(body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Name(id='unique_everseen', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='to_join', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Constant(value=None), List(elts=[Name(id='prefix', ctx=Load()), Name(id='current_pythonpath', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='to_join', ctx=Load())], keywords=[])), If(test=Name(id='new_path', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PYTHONPATH'), ctx=Store())], value=Name(id='new_path', ctx=Load()))], orelse=[]), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[If(test=Compare(left=Name(id='orig_pythonpath', ctx=Load()), ops=[Is()], comparators=[Name(id='nothing', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='PYTHONPATH'), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PYTHONPATH'), ctx=Store())], value=Name(id='orig_pythonpath', ctx=Load()))])])], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='install_dists', args=arguments(posonlyargs=[], args=[arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Install the requirements indicated by self.distribution and\n        return an iterable of the dists that were built.\n        ')), Assign(targets=[Name(id='ir_d', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='fetch_build_eggs', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='install_requires', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tr_d', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='fetch_build_eggs', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='tests_require', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='er_d', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='fetch_build_eggs', ctx=Load()), args=[GeneratorExp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='extras_require', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=':')], keywords=[]), Call(func=Name(id='evaluate_marker', ctx=Load()), args=[Subscript(value=Name(id='k', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])])], is_async=0)])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='ir_d', ctx=Load()), Name(id='tr_d', ctx=Load()), Name(id='er_d', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='WARNING: Testing via this command is deprecated and will be removed in a future version. Users looking for a generic test entry point independent of test runner are encouraged to use tox.'), Attribute(value=Name(id='log', ctx=Load()), attr='WARN', ctx=Load())], keywords=[])), Assign(targets=[Name(id='installed_dists', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_dists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_argv', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value='skipping "%s" (dry run)'), op=Mod(), right=Name(id='cmd', ctx=Load()))], keywords=[])), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[BinOp(left=Constant(value='running "%s"'), op=Mod(), right=Name(id='cmd', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='location')], keywords=[]), Name(id='installed_dists', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='paths_on_pythonpath', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='project_on_sys_path', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_tests', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='run_tests', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='main', ctx=Load()), args=[Constant(value=None), Constant(value=None), Attribute(value=Name(id='self', ctx=Load()), attr='_argv', ctx=Load())], keywords=[keyword(arg='testLoader', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_resolve_as_ep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='test_loader', ctx=Load())], keywords=[])), keyword(arg='testRunner', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_resolve_as_ep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='test_runner', ctx=Load())], keywords=[])), keyword(arg='exit', value=Constant(value=False))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='test', ctx=Load()), attr='result', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Test failed: %s'), op=Mod(), right=Attribute(value=Name(id='test', ctx=Load()), attr='result', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Name(id='msg', ctx=Load()), Attribute(value=Name(id='log', ctx=Load()), attr='ERROR', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_argv', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=List(elts=[Constant(value='unittest')], ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='test_args', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_resolve_as_ep', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Load the indicated attribute value, called, as a as if it were\n        specified as an entry point.\n        ')), Return(value=Call(func=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoint', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Name(id='val', ctx=Load())), keyword(arg='name', value=Constant(value=None)), keyword(arg='group', value=Constant(value=None))]), attr='load', ctx=Load()), args=[], keywords=[]), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load()), Name(id='pass_none', ctx=Load())])], decorator_list=[])], type_ignores=[])