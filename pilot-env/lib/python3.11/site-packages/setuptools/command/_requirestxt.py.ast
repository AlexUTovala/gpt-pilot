Module(body=[Expr(value=Constant(value='Helper code used to generate ``requires.txt`` files in the egg-info directory.\n\nThe ``requires.txt`` file has an specific format:\n    - Environment markers need to be part of the section headers and\n      should not be part of the requirement spec itself.\n\nSee https://setuptools.pypa.io/en/latest/deprecated/python_eggs.html#requires-txt\n')), Import(names=[alias(name='io')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='itertools', names=[alias(name='filterfalse')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List'), alias(name='Tuple'), alias(name='Mapping'), alias(name='TypeVar')], level=0), ImportFrom(names=[alias(name='_reqs')], level=2), ImportFrom(module='extern.jaraco.text', names=[alias(name='yield_lines')], level=2), ImportFrom(module='extern.packaging.requirements', names=[alias(name='Requirement')], level=2), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), Assign(targets=[Name(id='_Ordered', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='_T', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_ordered', ctx=Store())], value=Name(id='dict', ctx=Load())), Assign(targets=[Name(id='_StrOrIter', ctx=Store())], value=Attribute(value=Name(id='_reqs', ctx=Load()), attr='_StrOrIter', ctx=Load())), FunctionDef(name='_prepare', args=arguments(posonlyargs=[], args=[arg(arg='install_requires', annotation=Name(id='_StrOrIter', ctx=Load())), arg(arg='extras_require', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_StrOrIter', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given values for ``install_requires`` and ``extras_require``\n    create modified versions in a way that can be written in ``requires.txt``\n    ')), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Name(id='_convert_extras_requirements', ctx=Load()), args=[Name(id='extras_require', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_move_install_requirements_markers', ctx=Load()), args=[Name(id='install_requires', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_convert_extras_requirements', args=arguments(posonlyargs=[], args=[arg(arg='extras_require', annotation=Name(id='_StrOrIter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert requirements in `extras_require` of the form\n    `"extra": ["barbazquux; {marker}"]` to\n    `"extra:{marker}": ["barbazquux"]`.\n    ')), AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='_Ordered', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='dict', ctx=Load())], keywords=[]), simple=1), For(target=Tuple(elts=[Name(id='section', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='extras_require', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Subscript(value=Name(id='output', ctx=Load()), slice=Name(id='section', ctx=Load()), ctx=Load())), For(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_reqs', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='output', ctx=Load()), slice=BinOp(left=Name(id='section', ctx=Load()), op=Add(), right=Call(func=Name(id='_suffix_for', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='output', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='_Ordered', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_move_install_requirements_markers', args=arguments(posonlyargs=[], args=[arg(arg='install_requires', annotation=Name(id='_StrOrIter', ctx=Load())), arg(arg='extras_require', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='_Ordered', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    The ``requires.txt`` file has an specific format:\n        - Environment markers need to be part of the section headers and\n          should not be part of the requirement spec itself.\n\n    Move requirements in ``install_requires`` that are using environment\n    markers ``extras_require``.\n    ')), Assign(targets=[Name(id='inst_reqs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_reqs', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='install_requires', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='simple_reqs', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Name(id='_no_marker', ctx=Load()), Name(id='inst_reqs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='complex_reqs', ctx=Store())], value=Call(func=Name(id='filterfalse', ctx=Load()), args=[Name(id='_no_marker', ctx=Load()), Name(id='inst_reqs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='simple_install_requires', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='simple_reqs', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='r', ctx=Store()), iter=Name(id='complex_reqs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='extras_require', ctx=Load()), slice=BinOp(left=Constant(value=':'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='marker', ctx=Load())], keywords=[])), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='expanded_extras', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Name(id='map', ctx=Load()), args=[Name(id='_clean_req', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='extras_require', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Tuple(elts=[Name(id='simple_install_requires', ctx=Load()), Name(id='expanded_extras', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_suffix_for', args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the 'extras_require' suffix for a given requirement.")), Return(value=IfExp(test=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), body=BinOp(left=Constant(value=':'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load())], keywords=[])), orelse=Constant(value='')))], decorator_list=[]), FunctionDef(name='_clean_req', args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given a Requirement, remove environment markers and return it')), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='r', ctx=Load()), attr='marker', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='r', ctx=Load()))], decorator_list=[]), FunctionDef(name='_no_marker', args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load())))], decorator_list=[]), FunctionDef(name='_write_requirements', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='reqs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='yield_lines', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='reqs', ctx=Load()), Tuple(elts=[], ctx=Load())])], keywords=[])), FunctionDef(name='append_cr', args=arguments(posonlyargs=[], args=[arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n')))], decorator_list=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='append_cr', ctx=Load()), Name(id='lines', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='writelines', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_requirements', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='install_requires', ctx=Store()), Name(id='extras_require', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_prepare', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='install_requires', ctx=Load()), Tuple(elts=[], ctx=Load())]), BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='extras_require', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), Expr(value=Call(func=Name(id='_write_requirements', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='install_requires', ctx=Load())], keywords=[])), For(target=Name(id='extra', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='extras_require', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n[{extra}]\n'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='vars', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Expr(value=Call(func=Name(id='_write_requirements', ctx=Load()), args=[Name(id='data', ctx=Load()), Subscript(value=Name(id='extras_require', ctx=Load()), slice=Name(id='extra', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='write_or_delete_file', ctx=Load()), args=[Constant(value='requirements'), Name(id='filename', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='write_setup_requirements', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='_write_requirements', ctx=Load()), args=[Name(id='data', ctx=Load()), Attribute(value=Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), attr='setup_requires', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='write_or_delete_file', ctx=Load()), args=[Constant(value='setup-requirements'), Name(id='filename', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])