Module(body=[ImportFrom(module='distutils', names=[alias(name='log')], level=0), Import(names=[alias(name='distutils.command.sdist', asname='orig')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='io')]), Import(names=[alias(name='contextlib')]), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='_importlib', names=[alias(name='metadata')], level=2), ImportFrom(module='build', names=[alias(name='_ORIGINAL_SUBCOMMANDS')], level=1), Assign(targets=[Name(id='_default_revctrl', ctx=Store())], value=Name(id='list', ctx=Load())), FunctionDef(name='walk_revctrl', args=arguments(posonlyargs=[], args=[arg(arg='dirname')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Find all files under revision control')), For(target=Name(id='ep', ctx=Store()), iter=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='entry_points', ctx=Load()), args=[], keywords=[keyword(arg='group', value=Constant(value='setuptools.file_finders'))]), body=[For(target=Name(id='item', ctx=Store()), iter=Call(func=Call(func=Attribute(value=Name(id='ep', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[]), args=[Name(id='dirname', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), ClassDef(name='sdist', bases=[Attribute(value=Name(id='orig', ctx=Load()), attr='sdist', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Smart sdist that finds anything supported by revision control')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='formats='), Constant(value=None), Constant(value='formats for source distribution (comma-separated list)')], ctx=Load()), Tuple(elts=[Constant(value='keep-temp'), Constant(value='k'), BinOp(left=Constant(value='keep the distribution tree around after creating '), op=Add(), right=Constant(value='archive file(s)'))], ctx=Load()), Tuple(elts=[Constant(value='dist-dir='), Constant(value='d'), Constant(value='directory to put the source distribution archive(s) in [default: dist]')], ctx=Load()), Tuple(elts=[Constant(value='owner='), Constant(value='u'), Constant(value='Owner name used when creating a tar file [default: current user]')], ctx=Load()), Tuple(elts=[Constant(value='group='), Constant(value='g'), Constant(value='Group name used when creating a tar file [default: current group]')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='README_EXTENSIONS', ctx=Store())], value=List(elts=[Constant(value=''), Constant(value='.rst'), Constant(value='.txt'), Constant(value='.md')], ctx=Load())), Assign(targets=[Name(id='READMES', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Constant(value='README{0}'), attr='format', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=Name(id='README_EXTENSIONS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Assign(targets=[Name(id='ei_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Store())], value=Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='filelist', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_info', ctx=Load()), Constant(value='SOURCES.txt')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_readme', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_distribution', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='dist_files', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), Constant(value='dist_files'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='archive_files', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Tuple(elts=[Constant(value='sdist'), Constant(value=''), Name(id='file', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[NotIn()], comparators=[Name(id='dist_files', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='dist_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='sdist', ctx=Load()), attr='initialize_options', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_default_to_gztar', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_default_to_gztar', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=6), Constant(value=0), Constant(value='beta'), Constant(value=1)], ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Store())], value=List(elts=[Constant(value='gztar')], ctx=Load()))], decorator_list=[]), FunctionDef(name='make_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Workaround for #516\n        ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_os_link', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='sdist', ctx=Load()), attr='make_distribution', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_remove_os_link', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        In a context, remove and restore os.link if it exists\n        ')), ClassDef(name='NoValue', bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Name(id='orig_val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='link'), Name(id='NoValue', ctx=Load())], keywords=[])), Try(body=[Delete(targets=[Attribute(value=Name(id='os', ctx=Load()), attr='link', ctx=Del())])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[If(test=Compare(left=Name(id='orig_val', ctx=Load()), ops=[IsNot()], comparators=[Name(id='NoValue', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='link'), Name(id='orig_val', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Name(id='staticmethod', ctx=Load()), Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='add_defaults', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='add_defaults', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_build_sub_commands', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_defaults_optional', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_add_defaults_optional', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Constant(value='pyproject.toml')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='pyproject.toml')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_python', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='getting python files')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_py', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_py')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_data_files', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_safe_data_files', ctx=Load()), args=[Name(id='build_py', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_build_sub_commands', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='build', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build')], keywords=[])), Assign(targets=[Name(id='missing_cmds', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Name(id='_ORIGINAL_SUBCOMMANDS', ctx=Load()))), Assign(targets=[Name(id='cmds', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='missing_cmds', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='files', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='cmds', ctx=Load()), ifs=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='c', ctx=Load()), Constant(value='get_source_files')], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_safe_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='build_py')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Since the ``sdist`` class is also used to compute the MANIFEST\n        (via :obj:`setuptools.command.egg_info.manifest_maker`),\n        there might be recursion problems when trying to obtain the list of\n        data_files and ``include_package_data=True`` (which in turn depends on\n        the files included in the MANIFEST).\n\n        To avoid that, ``manifest_maker`` should be able to overwrite this\n        method and avoid recursive attempts to build/analyze the MANIFEST.\n        ')), Return(value=Attribute(value=Name(id='build_py', ctx=Load()), attr='data_files', ctx=Load()))], decorator_list=[]), FunctionDef(name='_add_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data_files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add data files as found in build_py.data_files.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='src_dir', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='src_dir', ctx=Store()), Name(id='_', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Name(id='data_files', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='filenames', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_defaults_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_add_defaults_data_files', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='data_files contains unexpected objects')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='check_readme', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='READMES', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Return()], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value='standard file not found: should have one of '), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='READMES', ctx=Load())], keywords=[]))], keywords=[]))])], decorator_list=[]), FunctionDef(name='make_release_tree', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_dir'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='sdist', ctx=Load()), attr='make_release_tree', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='base_dir', ctx=Load()), Name(id='files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Constant(value='setup.cfg')], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='link')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_file', ctx=Load()), args=[Constant(value='setup.cfg'), Name(id='dest', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[]), attr='save_version_info', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_manifest_is_not_generated', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Assign(targets=[Name(id='first_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]))]), Return(value=Compare(left=Name(id='first_line', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Attribute(value=Constant(value='# file GENERATED by distutils, do NOT edit\n'), attr='encode', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='read_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Read the manifest file (named by 'self.manifest') and use it to\n        fill in 'self.filelist', the list of files to include in the source\n        distribution.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="reading manifest file '%s'"), Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='manifest', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), Constant(value='rb')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='manifest', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='UTF-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value='%r not UTF-8 decodable -- skipping'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[])), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), UnaryOp(op=Not(), operand=Name(id='line', ctx=Load()))]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='manifest', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])