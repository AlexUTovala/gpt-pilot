Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='itertools', names=[alias(name='product'), alias(name='starmap')], level=0), Import(names=[alias(name='distutils.command.install_lib', asname='orig')]), ClassDef(name='install_lib', bases=[Attribute(value=Name(id='orig', ctx=Load()), attr='install_lib', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Don't add compiled flags to filenames of non-Python files")), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='outfiles', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='outfiles', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='byte_compile', ctx=Load()), args=[Name(id='outfiles', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_exclusions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a collections.Sized collections.Container of paths to be\n        excluded for single_version_externally_managed installations.\n        ')), Assign(targets=[Name(id='all_packages', ctx=Store())], value=GeneratorExp(elt=Name(id='pkg', ctx=Load()), generators=[comprehension(target=Name(id='ns_pkg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_SVEM_NSPs', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='pkg', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_all_packages', ctx=Load()), args=[Name(id='ns_pkg', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='excl_specs', ctx=Store())], value=Call(func=Name(id='product', ctx=Load()), args=[Name(id='all_packages', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_gen_exclusion_paths', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='starmap', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_exclude_pkg_path', ctx=Load()), Name(id='excl_specs', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_exclude_pkg_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pkg'), arg(arg='exclusion_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Given a package name and exclusion path within that package,\n        compute the full exclusion path.\n        ')), Assign(targets=[Name(id='parts', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), op=Add(), right=List(elts=[Name(id='exclusion_path', ctx=Load())], ctx=Load()))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_all_packages', args=arguments(posonlyargs=[], args=[arg(arg='pkg_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        >>> list(install_lib._all_packages('foo.bar.baz'))\n        ['foo.bar.baz', 'foo.bar', 'foo']\n        ")), While(test=Name(id='pkg_name', ctx=Load()), body=[Expr(value=Yield(value=Name(id='pkg_name', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='pkg_name', ctx=Store()), Name(id='sep', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg_name', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_get_SVEM_NSPs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get namespace packages (list) but only for\n        single_version_externally_managed installations and empty otherwise.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='namespace_packages', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='install_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='install')], keywords=[])), Assign(targets=[Name(id='svem', ctx=Store())], value=Attribute(value=Name(id='install_cmd', ctx=Load()), attr='single_version_externally_managed', ctx=Load())), Return(value=IfExp(test=Name(id='svem', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='namespace_packages', ctx=Load()), orelse=List(elts=[], ctx=Load())))], decorator_list=[]), FunctionDef(name='_gen_exclusion_paths', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate file paths to be excluded for namespace packages (bytecode\n        cache files).\n        ')), Expr(value=Yield(value=Constant(value='__init__.py'))), Expr(value=Yield(value=Constant(value='__init__.pyc'))), Expr(value=Yield(value=Constant(value='__init__.pyo'))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='implementation')], keywords=[])), body=[Return()], orelse=[]), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='__pycache__'), BinOp(left=Constant(value='__init__.'), op=Add(), right=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='cache_tag', ctx=Load()))], keywords=[])), Expr(value=Yield(value=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.pyc')))), Expr(value=Yield(value=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.pyo')))), Expr(value=Yield(value=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.opt-1.pyc')))), Expr(value=Yield(value=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.opt-2.pyc'))))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='copy_tree', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='infile'), arg(arg='outfile'), arg(arg='preserve_mode'), arg(arg='preserve_times'), arg(arg='preserve_symlinks'), arg(arg='level')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=1)]), body=[Assert(test=BoolOp(op=And(), values=[Name(id='preserve_mode', ctx=Load()), Name(id='preserve_times', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='preserve_symlinks', ctx=Load()))])), Assign(targets=[Name(id='exclude', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_exclusions', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='exclude', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='install_lib', ctx=Load()), attr='copy_tree', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='infile', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), ImportFrom(module='setuptools.archive_util', names=[alias(name='unpack_directory')], level=0), ImportFrom(module='distutils', names=[alias(name='log')], level=0), Assign(targets=[Name(id='outfiles', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='pf', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='dst', ctx=Load()), ops=[In()], comparators=[Name(id='exclude', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Skipping installation of %s (namespace package)'), Name(id='dst', ctx=Load())], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='copying %s -> %s'), Name(id='src', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfiles', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])), Return(value=Name(id='dst', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='unpack_directory', ctx=Load()), args=[Name(id='infile', ctx=Load()), Name(id='outfile', ctx=Load()), Name(id='pf', ctx=Load())], keywords=[])), Return(value=Name(id='outfiles', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='outputs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='install_lib', ctx=Load()), attr='get_outputs', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exclude', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_exclusions', ctx=Load()), args=[], keywords=[])), If(test=Name(id='exclude', ctx=Load()), body=[Return(value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='outputs', ctx=Load()), ifs=[Compare(left=Name(id='f', ctx=Load()), ops=[NotIn()], comparators=[Name(id='exclude', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='outputs', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])