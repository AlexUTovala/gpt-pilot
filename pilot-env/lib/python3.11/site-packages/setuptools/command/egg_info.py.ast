Module(body=[Expr(value=Constant(value="setuptools.command.egg_info\n\nCreate a distribution's .egg-info directory and contents")), ImportFrom(module='distutils.filelist', names=[alias(name='FileList', asname='_FileList')], level=0), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsInternalError')], level=0), ImportFrom(module='distutils.util', names=[alias(name='convert_path')], level=0), ImportFrom(module='distutils', names=[alias(name='log')], level=0), Import(names=[alias(name='distutils.errors')]), Import(names=[alias(name='distutils.filelist')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), Import(names=[alias(name='collections')]), ImportFrom(module='_importlib', names=[alias(name='metadata')], level=2), ImportFrom(names=[alias(name='_entry_points'), alias(name='_normalization')], level=2), ImportFrom(names=[alias(name='_requirestxt')], level=1), ImportFrom(module='setuptools', names=[alias(name='Command')], level=0), ImportFrom(module='setuptools.command.sdist', names=[alias(name='sdist')], level=0), ImportFrom(module='setuptools.command.sdist', names=[alias(name='walk_revctrl')], level=0), ImportFrom(module='setuptools.command.setopt', names=[alias(name='edit_config')], level=0), ImportFrom(module='setuptools.command', names=[alias(name='bdist_egg')], level=0), Import(names=[alias(name='setuptools.unicode_utils', asname='unicode_utils')]), ImportFrom(module='setuptools.glob', names=[alias(name='glob')], level=0), ImportFrom(module='setuptools.extern', names=[alias(name='packaging')], level=0), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=2), Assign(targets=[Name(id='PY_MAJOR', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}.{}'), attr='format', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ctx=Load())], keywords=[])), FunctionDef(name='translate_pattern', args=arguments(posonlyargs=[], args=[arg(arg='glob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Translate a file path glob like '*.txt' in to a regular expression.\n    This differs from fnmatch.translate which allows wildcards to match\n    directory separators. It also knows about '**/' which matches any number of\n    directories.\n    ")), Assign(targets=[Name(id='pat', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='chunks', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sep', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid_char', ctx=Store())], value=BinOp(left=Constant(value='[^%s]'), op=Mod(), right=Tuple(elts=[Name(id='sep', ctx=Load())], ctx=Load()))), For(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='chunk', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='last_chunk', ctx=Store())], value=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='chunks', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])), If(test=Compare(left=Name(id='chunk', ctx=Load()), ops=[Eq()], comparators=[Constant(value='**')]), body=[If(test=Name(id='last_chunk', ctx=Load()), body=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Constant(value='.*'))], orelse=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='(?:%s+%s)*'), op=Mod(), right=Tuple(elts=[Name(id='valid_char', ctx=Load()), Name(id='sep', ctx=Load())], ctx=Load())))]), Continue()], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='chunk_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='chunk_len', ctx=Load())]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='chunk', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')]), body=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=BinOp(left=Name(id='valid_char', ctx=Load()), op=Add(), right=Constant(value='*')))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='?')]), body=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Name(id='valid_char', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')]), body=[Assign(targets=[Name(id='inner_i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='inner_i', ctx=Load()), ops=[Lt()], comparators=[Name(id='chunk_len', ctx=Load())]), Compare(left=Subscript(value=Name(id='chunk', ctx=Load()), slice=Name(id='inner_i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='!')])]), body=[Assign(targets=[Name(id='inner_i', ctx=Store())], value=BinOp(left=Name(id='inner_i', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='inner_i', ctx=Load()), ops=[Lt()], comparators=[Name(id='chunk_len', ctx=Load())]), Compare(left=Subscript(value=Name(id='chunk', ctx=Load()), slice=Name(id='inner_i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=']')])]), body=[Assign(targets=[Name(id='inner_i', ctx=Store())], value=BinOp(left=Name(id='inner_i', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='inner_i', ctx=Load()), ops=[Lt()], comparators=[Name(id='chunk_len', ctx=Load())]), Compare(left=Subscript(value=Name(id='chunk', ctx=Load()), slice=Name(id='inner_i', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=']')])]), body=[Assign(targets=[Name(id='inner_i', ctx=Store())], value=BinOp(left=Name(id='inner_i', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='inner_i', ctx=Load()), ops=[GtE()], comparators=[Name(id='chunk_len', ctx=Load())]), body=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='inner', ctx=Store())], value=Subscript(value=Name(id='chunk', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), upper=Name(id='inner_i', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='char_class', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Subscript(value=Name(id='inner', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='!')]), body=[Assign(targets=[Name(id='char_class', ctx=Store())], value=Constant(value='^')), Assign(targets=[Name(id='inner', ctx=Store())], value=Subscript(value=Name(id='inner', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='char_class', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='inner', ctx=Load())], keywords=[])), AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='[%s]'), op=Mod(), right=Tuple(elts=[Name(id='char_class', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='i', ctx=Store())], value=Name(id='inner_i', ctx=Load()))])], orelse=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[]))])])]), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='last_chunk', ctx=Load())), body=[AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Name(id='sep', ctx=Load()))], orelse=[])], orelse=[]), AugAssign(target=Name(id='pat', ctx=Store()), op=Add(), value=Constant(value='\\Z')), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pat', ctx=Load())], keywords=[keyword(arg='flags', value=BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())))]))], decorator_list=[]), ClassDef(name='InfoCommon', bases=[], keywords=[], body=[Assign(targets=[Name(id='tag_build', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tag_date', ctx=Store())], value=Constant(value=None)), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='safe_name', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='tagged_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tagged', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_maybe_tag', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='best_effort_version', ctx=Load()), args=[Name(id='tagged', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_maybe_tag', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        egg_info may be called more than once for a distribution,\n        in which case the version string already contains all tags.\n        ')), Return(value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='vtags', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_already_tagged', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[])]), body=Name(id='version', ctx=Load()), orelse=BinOp(left=Name(id='version', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vtags', ctx=Load()))))], decorator_list=[]), FunctionDef(name='_already_tagged', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vtags', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='endswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_safe_tags', ctx=Load()), args=[], keywords=[])], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_safe_tags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='best_effort_version', ctx=Load()), args=[JoinedStr(values=[Constant(value='0'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='vtags', ctx=Load()), conversion=-1)])], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='tags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Constant(value='')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tag_build', ctx=Load()), body=[AugAssign(target=Name(id='version', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='tag_build', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tag_date', ctx=Load()), body=[AugAssign(target=Name(id='version', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y%m%d')], keywords=[]))], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='vtags', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='tags', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='egg_info', bases=[Name(id='InfoCommon', ctx=Load()), Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value="create a distribution's .egg-info directory")), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='egg-base='), Constant(value='e'), Constant(value='directory containing .egg-info directories (default: top of the source tree)')], ctx=Load()), Tuple(elts=[Constant(value='tag-date'), Constant(value='d'), Constant(value='Add date stamp (e.g. 20050528) to version number')], ctx=Load()), Tuple(elts=[Constant(value='tag-build='), Constant(value='b'), Constant(value='Specify explicit tag to add to version number')], ctx=Load()), Tuple(elts=[Constant(value='no-date'), Constant(value='D'), Constant(value="Don't include date stamp [default]")], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='tag-date')], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='no-date')], values=[Constant(value='tag-date')])), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_in_manifest', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='tag_svn_revision', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='tag_svn_revision', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Attribute(value=Name(id='tag_svn_revision', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='save_version_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Materialize the value of date into the\n        build tag. Install build keys in a deterministic order\n        to avoid arbitrary reordering on subsequent builds.\n        ')), Assign(targets=[Name(id='egg_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='egg_info', ctx=Load()), slice=Constant(value='tag_build'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tags', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='egg_info', ctx=Load()), slice=Constant(value='tag_date'), ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='edit_config', ctx=Load()), args=[Name(id='filename', ctx=Load()), Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='egg_info', value=Name(id='egg_info', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tagged_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='parsed_version', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='Version', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='is_version', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='parsed_version', ctx=Load()), Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='Version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='spec', ctx=Store())], value=IfExp(test=Name(id='is_version', ctx=Load()), body=Constant(value='%s==%s'), orelse=Constant(value='%s===%s'))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='requirements', ctx=Load()), attr='Requirement', ctx=Load()), args=[BinOp(left=Name(id='spec', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid distribution name or version syntax: %s-%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())], ctx=Load()))], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='egg_base', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='dirs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='package_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_base', ctx=Store())], value=Call(func=Attribute(value=BoolOp(op=Or(), values=[Name(id='dirs', ctx=Load()), Dict(keys=[], values=[])]), attr='get', ctx=Load()), args=[Constant(value=''), Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_dirname', ctx=Load()), args=[Constant(value='egg_base')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='filename_component', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.egg-info'))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='egg_base', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_base', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load()), attr='version', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())), Assign(targets=[Name(id='pd', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='_patched_dist', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='pd', ctx=Load()), Constant(value='key'), Constant(value=None)], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='pd', ctx=Load()), Constant(value='name'), Constant(value=None)], keywords=[])])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='pd', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[Assign(targets=[Attribute(value=Name(id='pd', ctx=Load()), attr='_version', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='pd', ctx=Load()), attr='_parsed_version', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='packaging', ctx=Load()), attr='version', ctx=Load()), attr='Version', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='_patched_dist', ctx=Store())], value=Constant(value=None))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_egg_basename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='py_version'), arg(arg='platform')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='PY_MAJOR', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Compute filename of the output egg. Private API.')), Return(value=Call(func=Name(id='_egg_basename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='egg_version', ctx=Load()), Name(id='py_version', ctx=Load()), Name(id='platform', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_or_delete_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='what'), arg(arg='filename'), arg(arg='data'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Write `data` to `filename` or delete if empty\n\n        If `data` is non-empty, this routine is the same as ``write_file()``.\n        If `data` is empty but not ``None``, this is the same as calling\n        ``delete_file(filename)`.  If `data` is ``None``, then this is a no-op\n        unless `filename` exists, in which case a warning is issued about the\n        orphaned file (if `force` is false), or deleted (if `force` is true).\n        ')), If(test=Name(id='data', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_file', ctx=Load()), args=[Name(id='what', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='force', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='%s not set in setup(), but %s exists'), Name(id='what', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Return()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_file', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))])], orelse=[])])], decorator_list=[]), FunctionDef(name='write_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='what'), arg(arg='filename'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write `data` to `filename` (if not a dry run) after announcing it\n\n        `what` is used in a log message to identify what is being written\n        to the file.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='writing %s to %s'), Name(id='what', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='wb')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='delete_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Delete `filename` (if not a dry run) after announcing it')), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='deleting %s'), Name(id='filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='utime', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load()), Constant(value=None)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value="Cannot update time stamp of directory '"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load()), conversion=-1), Constant(value="'")])), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsFileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), For(target=Name(id='ep', ctx=Store()), iter=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='entry_points', ctx=Load()), args=[], keywords=[keyword(arg='group', value=Constant(value='egg_info.writers'))]), body=[Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='ep', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='writer', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load()), Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='nl', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load()), Constant(value='native_libs.txt')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='nl', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_file', ctx=Load()), args=[Name(id='nl', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_sources', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='find_sources', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate SOURCES.txt manifest file')), Assign(targets=[Name(id='manifest_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_info', ctx=Load()), Constant(value='SOURCES.txt')], keywords=[])), Assign(targets=[Name(id='mm', ctx=Store())], value=Call(func=Name(id='manifest_maker', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='mm', ctx=Load()), attr='ignore_egg_info_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_in_manifest', ctx=Load())), Assign(targets=[Attribute(value=Name(id='mm', ctx=Load()), attr='manifest', ctx=Store())], value=Name(id='manifest_filename', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='mm', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Store())], value=Attribute(value=Name(id='mm', ctx=Load()), attr='filelist', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='FileList', bases=[Name(id='_FileList', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='warn'), arg(arg='debug_print'), arg(arg='ignore_egg_info_dir')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='warn', ctx=Load()), Name(id='debug_print', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_dir', ctx=Store())], value=Name(id='ignore_egg_info_dir', ctx=Load()))], decorator_list=[]), FunctionDef(name='process_template_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='action', ctx=Store()), Name(id='patterns', ctx=Store()), Name(id='dir', ctx=Store()), Name(id='dir_pattern', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_template_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Assign(targets=[Name(id='action_map', ctx=Store())], value=Dict(keys=[Constant(value='include'), Constant(value='exclude'), Constant(value='global-include'), Constant(value='global-exclude'), Constant(value='recursive-include'), Constant(value='recursive-exclude'), Constant(value='graft'), Constant(value='prune')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='include', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='exclude', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='global_include', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='global_exclude', ctx=Load()), Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive_include', ctx=Load()), Name(id='dir', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive_exclude', ctx=Load()), Name(id='dir', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='graft', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='prune', ctx=Load())])), Assign(targets=[Name(id='log_map', ctx=Store())], value=Dict(keys=[Constant(value='include'), Constant(value='exclude'), Constant(value='global-include'), Constant(value='global-exclude'), Constant(value='recursive-include'), Constant(value='recursive-exclude'), Constant(value='graft'), Constant(value='prune')], values=[Constant(value="warning: no files found matching '%s'"), Constant(value="warning: no previously-included files found matching '%s'"), Constant(value="warning: no files found matching '%s' anywhere in distribution"), Constant(value="warning: no previously-included files matching '%s' found anywhere in distribution"), Constant(value="warning: no files found matching '%s' under directory '%s'"), Constant(value="warning: no previously-included files matching '%s' found under directory '%s'"), Constant(value="warning: no directories found matching '%s'"), Constant(value="no previously-included directories found matching '%s'")])), Try(body=[Assign(targets=[Name(id='process_action', ctx=Store())], value=Subscript(value=Name(id='action_map', ctx=Load()), slice=Name(id='action', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsInternalError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="this cannot happen: invalid action '{action!s}'"), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='action', value=Name(id='action', ctx=Load()))])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='action_is_recursive', ctx=Store())], value=Call(func=Attribute(value=Name(id='action', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='recursive-')], keywords=[])), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='graft'), Constant(value='prune')])]), body=[Assign(targets=[Name(id='patterns', ctx=Store())], value=List(elts=[Name(id='dir_pattern', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='extra_log_args', ctx=Store())], value=IfExp(test=Name(id='action_is_recursive', ctx=Load()), body=Tuple(elts=[Name(id='dir', ctx=Load())], ctx=Load()), orelse=Tuple(elts=[], ctx=Load()))), Assign(targets=[Name(id='log_tmpl', ctx=Store())], value=Subscript(value=Name(id='log_map', ctx=Load()), slice=Name(id='action', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[BinOp(left=BinOp(left=List(elts=[Name(id='action', ctx=Load())], ctx=Load()), op=Add(), right=IfExp(test=Name(id='action_is_recursive', ctx=Load()), body=List(elts=[Name(id='dir', ctx=Load())], ctx=Load()), orelse=List(elts=[], ctx=Load()))), op=Add(), right=Name(id='patterns', ctx=Load()))], keywords=[])], keywords=[])), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='process_action', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='log_tmpl', ctx=Load()), Name(id='pattern', ctx=Load()), Starred(value=Name(id='extra_log_args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_remove_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='predicate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remove all files from the file list that match the predicate.\n        Return True if any matching files were removed\n        ')), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Call(func=Name(id='predicate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value=' removing '), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())]), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='found', ctx=Load()))], decorator_list=[]), FunctionDef(name='include', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Include files that match 'pattern'.")), Assign(targets=[Name(id='found', ctx=Store())], value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Call(func=Name(id='glob', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exclude', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Exclude files that match 'pattern'.")), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_files', ctx=Load()), args=[Attribute(value=Name(id='match', ctx=Load()), attr='match', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='recursive_include', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Include all files anywhere in 'dir/' that match the pattern.\n        ")), Assign(targets=[Name(id='full_pattern', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Constant(value='**'), Name(id='pattern', ctx=Load())], keywords=[])), Assign(targets=[Name(id='found', ctx=Store())], value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Call(func=Name(id='glob', ctx=Load()), args=[Name(id='full_pattern', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='recursive_exclude', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Exclude any file anywhere in 'dir/' that match the pattern.\n        ")), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Constant(value='**'), Name(id='pattern', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_files', ctx=Load()), args=[Attribute(value=Name(id='match', ctx=Load()), attr='match', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='graft', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Include all files from 'dir/'.")), Assign(targets=[Name(id='found', ctx=Store())], value=ListComp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='match_dir', ctx=Store()), iter=Call(func=Name(id='glob', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='filelist', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='match_dir', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='prune', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Filter out files from 'dir/'.")), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Constant(value='**')], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_files', ctx=Load()), args=[Attribute(value=Name(id='match', ctx=Load()), attr='match', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='global_include', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Include all files anywhere in the current directory that match the\n        pattern. This is very inefficient on large file trees.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='findall', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='**'), Name(id='pattern', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='found', ctx=Store())], value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='allfiles', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='found', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='global_exclude', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Exclude all files anywhere that match the pattern.\n        ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='translate_pattern', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='**'), Name(id='pattern', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_files', ctx=Load()), args=[Attribute(value=Name(id='match', ctx=Load()), attr='match', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\r')], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_safe_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_safe_path', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_repair', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Replace self.files with only safe paths\n\n        Because some owners of FileList manipulate the underlying\n        ``files`` attribute directly, this method must be called to\n        repair those paths.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_safe_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_safe_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='enc_warn', ctx=Store())], value=Constant(value="'%s' not %s encodable -- skipping")), Assign(targets=[Name(id='u_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicode_utils', ctx=Load()), attr='filesys_decode', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='u_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="'%s' in unexpected encoding -- skipping"), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='utf8_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicode_utils', ctx=Load()), attr='try_encode', ctx=Load()), args=[Name(id='u_path', ctx=Load()), Constant(value='utf-8')], keywords=[])), If(test=Compare(left=Name(id='utf8_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='enc_warn', ctx=Load()), Name(id='path', ctx=Load()), Constant(value='utf-8')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Try(body=[Assign(targets=[Name(id='is_egg_info', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='.egg-info'), ops=[In()], comparators=[Name(id='u_path', ctx=Load())]), Compare(left=Constant(value=b'.egg-info'), ops=[In()], comparators=[Name(id='utf8_path', ctx=Load())])])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_dir', ctx=Load()), Name(id='is_egg_info', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='u_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='utf8_path', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[])], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='enc_warn', ctx=Load()), Name(id='path', ctx=Load()), Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='manifest_maker', bases=[Name(id='sdist', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='MANIFEST.in')), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_defaults', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prune', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest_only', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force_manifest', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_dir', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Store())], value=Call(func=Name(id='FileList', ctx=Load()), args=[], keywords=[keyword(arg='ignore_egg_info_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_egg_info_dir', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_manifest', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_defaults', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_template', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_license_files', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_referenced_files', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prune_file_list', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='remove_duplicates', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_manifest', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_manifest_normalize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicode_utils', ctx=Load()), attr='filesys_decode', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[]))], decorator_list=[]), FunctionDef(name='write_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Write the file list in 'self.filelist' to the manifest file\n        named by 'self.manifest'.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='_repair', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_manifest_normalize', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='files', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value="writing manifest file '%s'"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='write_file', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), Name(id='files', ctx=Load())], ctx=Load()), Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_should_suppress_warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='sdist', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_should_suppress_warning', args=arguments(posonlyargs=[], args=[arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        suppress missing-file warnings from sdist\n        ')), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='standard file .*not found'), Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='add_defaults', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='sdist', ctx=Load()), attr='add_defaults', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rcfiles', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='walk_revctrl', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Name(id='rcfiles', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='rcfiles', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_manifest', ctx=Load()), args=[], keywords=[]))], orelse=[])]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='setup.py')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='setup.py')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ei_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='graft', ctx=Load()), args=[Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_info', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_license_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='license_files', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load()), attr='license_files', ctx=Load()), List(elts=[], ctx=Load())])), For(target=Name(id='lf', ctx=Store()), iter=Name(id='license_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="adding license file '%s'"), Name(id='lf', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='license_files', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_referenced_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add files referenced by the config (e.g. `file:` directive) to filelist')), Assign(targets=[Name(id='referenced', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), Constant(value='_referenced_files'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='rf', ctx=Store()), iter=Name(id='referenced', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="adding file referenced by config '%s'"), Name(id='rf', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='referenced', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='prune_file_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='build', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build')], keywords=[])), Assign(targets=[Name(id='base_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_fullname', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='prune', ctx=Load()), args=[Attribute(value=Name(id='build', ctx=Load()), attr='build_base', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='prune', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sep', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value='(^|'), op=Add(), right=Name(id='sep', ctx=Load())), op=Add(), right=Constant(value=')(RCS|CVS|\\.svn)')), op=Add(), right=Name(id='sep', ctx=Load()))], keywords=[keyword(arg='is_regex', value=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='_safe_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='build_py')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The parent class implementation of this method\n        (``sdist``) will try to include data files, which\n        might cause recursion problems when\n        ``include_package_data=True``.\n\n        Therefore, avoid triggering any attempt of\n        analyzing/building the manifest again.\n        ')), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='build_py', ctx=Load()), Constant(value='get_data_files_without_manifest')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_data_files_without_manifest', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value="`build_py` command does not inherit from setuptools' `build_py`."), Constant(value="\n            Custom 'build_py' does not implement 'get_data_files_without_manifest'.\n            Please extend command classes from setuptools instead of distutils.\n            ")], keywords=[keyword(arg='see_url', value=Constant(value='https://peps.python.org/pep-0632/'))])), Return(value=Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_data_files', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='write_file', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create a file with the specified name and write 'contents' (a\n    sequence of strings without line terminators) to it.\n    ")), Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])), Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='contents', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='write_pkg_info', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='writing %s'), Name(id='filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='cmd', ctx=Load()), attr='dry_run', ctx=Load())), body=[Assign(targets=[Name(id='metadata', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load())), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Store()), Name(id='oldver', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='cmd', ctx=Load()), attr='egg_version', ctx=Load()), Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='metadata', ctx=Load()), attr='name', ctx=Store()), Name(id='oldname', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='cmd', ctx=Load()), attr='egg_name', ctx=Load()), Attribute(value=Name(id='metadata', ctx=Load()), attr='name', ctx=Load())], ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='write_pkg_info', ctx=Load()), args=[Attribute(value=Name(id='cmd', ctx=Load()), attr='egg_info', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='metadata', ctx=Load()), attr='name', ctx=Store()), Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='oldname', ctx=Load()), Name(id='oldver', ctx=Load())], ctx=Load()))]), Assign(targets=[Name(id='safe', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), Constant(value='zip_safe'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='write_safety_flag', ctx=Load()), args=[Attribute(value=Name(id='cmd', ctx=Load()), attr='egg_info', ctx=Load()), Name(id='safe', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='warn_depends_obsolete', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Unused: left to avoid errors when updating (from source) from <= 67.8.\n    Old installations have a .dist-info directory with the entry-point\n    ``depends.txt = setuptools.command.egg_info:warn_depends_obsolete``.\n    This may trigger errors when running the first egg_info in build_meta.\n    TODO: Remove this function in a version sufficiently > 68.\n    '))], decorator_list=[]), Assign(targets=[Name(id='write_requirements', ctx=Store())], value=Attribute(value=Name(id='_requirestxt', ctx=Load()), attr='write_requirements', ctx=Load())), Assign(targets=[Name(id='write_setup_requirements', ctx=Store())], value=Attribute(value=Name(id='_requirestxt', ctx=Load()), attr='write_setup_requirements', ctx=Load())), FunctionDef(name='write_toplevel_names', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pkgs', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), attr='iter_distribution_names', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='write_file', ctx=Load()), args=[Constant(value='top-level names'), Name(id='filename', ctx=Load()), BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='pkgs', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value='\n'))], keywords=[]))], decorator_list=[]), FunctionDef(name='overwrite_arg', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='write_arg', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Name(id='basename', ctx=Load()), Name(id='filename', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[]), FunctionDef(name='write_arg', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='argname', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), Name(id='argname', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n')))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='write_or_delete_file', ctx=Load()), args=[Name(id='argname', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='value', ctx=Load()), Name(id='force', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_entries', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='basename'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='eps', ctx=Store())], value=Call(func=Attribute(value=Name(id='_entry_points', ctx=Load()), attr='load', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cmd', ctx=Load()), attr='distribution', ctx=Load()), attr='entry_points', ctx=Load())], keywords=[])), Assign(targets=[Name(id='defn', ctx=Store())], value=Call(func=Attribute(value=Name(id='_entry_points', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='write_or_delete_file', ctx=Load()), args=[Constant(value='entry points'), Name(id='filename', ctx=Load()), Name(id='defn', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[]), FunctionDef(name='_egg_basename', args=arguments(posonlyargs=[], args=[arg(arg='egg_name'), arg(arg='egg_version'), arg(arg='py_version'), arg(arg='platform')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Compute filename of the output egg. Private API.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='filename_component', ctx=Load()), args=[Name(id='egg_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='_normalization', ctx=Load()), attr='filename_component', ctx=Load()), args=[Name(id='egg_version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='egg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value='-py'), FormattedValue(value=BoolOp(op=Or(), values=[Name(id='py_version', ctx=Load()), Name(id='PY_MAJOR', ctx=Load())]), conversion=-1)])), If(test=Name(id='platform', ctx=Load()), body=[AugAssign(target=Name(id='egg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='-'), FormattedValue(value=Name(id='platform', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Name(id='egg', ctx=Load()))], decorator_list=[]), ClassDef(name='EggInfoDeprecationWarning', bases=[Name(id='SetuptoolsDeprecationWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Deprecated behavior warning for EggInfo, bypassing suppression.'))], decorator_list=[])], type_ignores=[])