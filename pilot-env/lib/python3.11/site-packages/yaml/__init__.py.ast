Module(body=[ImportFrom(module='error', names=[alias(name='*')], level=1), ImportFrom(module='tokens', names=[alias(name='*')], level=1), ImportFrom(module='events', names=[alias(name='*')], level=1), ImportFrom(module='nodes', names=[alias(name='*')], level=1), ImportFrom(module='loader', names=[alias(name='*')], level=1), ImportFrom(module='dumper', names=[alias(name='*')], level=1), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='6.0.1')), Try(body=[ImportFrom(module='cyaml', names=[alias(name='*')], level=1), Assign(targets=[Name(id='__with_libyaml__', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='__with_libyaml__', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Import(names=[alias(name='io')]), FunctionDef(name='warnings', args=arguments(posonlyargs=[], args=[arg(arg='settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='settings', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='scan', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Loader', ctx=Load())]), body=[Expr(value=Constant(value='\n    Scan a YAML stream and produce scanning tokens.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[While(test=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='check_token', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_token', ctx=Load()), args=[], keywords=[])))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Loader', ctx=Load())]), body=[Expr(value=Constant(value='\n    Parse a YAML stream and produce parsing events.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[While(test=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='check_event', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_event', ctx=Load()), args=[], keywords=[])))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='compose', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Loader', ctx=Load())]), body=[Expr(value=Constant(value='\n    Parse the first YAML document in a stream\n    and produce the corresponding representation tree.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_single_node', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='compose_all', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Loader', ctx=Load())]), body=[Expr(value=Constant(value='\n    Parse all YAML documents in a stream\n    and produce corresponding representation trees.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[While(test=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='check_node', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_node', ctx=Load()), args=[], keywords=[])))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_single_data', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='load_all', args=arguments(posonlyargs=[], args=[arg(arg='stream'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse all YAML documents in a stream\n    and produce corresponding Python objects.\n    ')), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Try(body=[While(test=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='check_data', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='get_data', ctx=Load()), args=[], keywords=[])))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='full_load', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n\n    Resolve all tags except those known to be\n    unsafe on untrusted input.\n    ')), Return(value=Call(func=Name(id='load', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='FullLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='full_load_all', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse all YAML documents in a stream\n    and produce corresponding Python objects.\n\n    Resolve all tags except those known to be\n    unsafe on untrusted input.\n    ')), Return(value=Call(func=Name(id='load_all', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='FullLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='safe_load', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n\n    Resolve only basic YAML tags. This is known\n    to be safe for untrusted input.\n    ')), Return(value=Call(func=Name(id='load', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='SafeLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='safe_load_all', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse all YAML documents in a stream\n    and produce corresponding Python objects.\n\n    Resolve only basic YAML tags. This is known\n    to be safe for untrusted input.\n    ')), Return(value=Call(func=Name(id='load_all', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='SafeLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='unsafe_load', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n\n    Resolve all tags, even those known to be\n    unsafe on untrusted input.\n    ')), Return(value=Call(func=Name(id='load', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='UnsafeLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='unsafe_load_all', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse all YAML documents in a stream\n    and produce corresponding Python objects.\n\n    Resolve all tags, even those known to be\n    unsafe on untrusted input.\n    ')), Return(value=Call(func=Name(id='load_all', ctx=Load()), args=[Name(id='stream', ctx=Load()), Name(id='UnsafeLoader', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='events'), arg(arg='stream'), arg(arg='Dumper'), arg(arg='canonical'), arg(arg='indent'), arg(arg='width'), arg(arg='allow_unicode'), arg(arg='line_break')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='Dumper', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Emit YAML parsing events into a stream.\n    If stream is None, return the produced string instead.\n    ')), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='stream', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Attribute(value=Name(id='stream', ctx=Load()), attr='getvalue', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dumper', ctx=Store())], value=Call(func=Name(id='Dumper', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[keyword(arg='canonical', value=Name(id='canonical', ctx=Load())), keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='allow_unicode', value=Name(id='allow_unicode', ctx=Load())), keyword(arg='line_break', value=Name(id='line_break', ctx=Load()))])), Try(body=[For(target=Name(id='event', ctx=Store()), iter=Name(id='events', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='emit', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='getvalue', ctx=Load()), body=[Return(value=Call(func=Name(id='getvalue', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='serialize_all', args=arguments(posonlyargs=[], args=[arg(arg='nodes'), arg(arg='stream'), arg(arg='Dumper'), arg(arg='canonical'), arg(arg='indent'), arg(arg='width'), arg(arg='allow_unicode'), arg(arg='line_break'), arg(arg='encoding'), arg(arg='explicit_start'), arg(arg='explicit_end'), arg(arg='version'), arg(arg='tags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='Dumper', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Serialize a sequence of representation trees into a YAML stream.\n    If stream is None, return the produced string instead.\n    ')), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='stream', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Attribute(value=Name(id='stream', ctx=Load()), attr='getvalue', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dumper', ctx=Store())], value=Call(func=Name(id='Dumper', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[keyword(arg='canonical', value=Name(id='canonical', ctx=Load())), keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='allow_unicode', value=Name(id='allow_unicode', ctx=Load())), keyword(arg='line_break', value=Name(id='line_break', ctx=Load())), keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='tags', value=Name(id='tags', ctx=Load())), keyword(arg='explicit_start', value=Name(id='explicit_start', ctx=Load())), keyword(arg='explicit_end', value=Name(id='explicit_end', ctx=Load()))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='open', ctx=Load()), args=[], keywords=[])), For(target=Name(id='node', ctx=Store()), iter=Name(id='nodes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='serialize', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='getvalue', ctx=Load()), body=[Return(value=Call(func=Name(id='getvalue', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='serialize', args=arguments(posonlyargs=[], args=[arg(arg='node'), arg(arg='stream'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=None), Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Serialize a representation tree into a YAML stream.\n    If stream is None, return the produced string instead.\n    ')), Return(value=Call(func=Name(id='serialize_all', ctx=Load()), args=[List(elts=[Name(id='node', ctx=Load())], ctx=Load()), Name(id='stream', ctx=Load())], keywords=[keyword(arg='Dumper', value=Name(id='Dumper', ctx=Load())), keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='dump_all', args=arguments(posonlyargs=[], args=[arg(arg='documents'), arg(arg='stream'), arg(arg='Dumper'), arg(arg='default_style'), arg(arg='default_flow_style'), arg(arg='canonical'), arg(arg='indent'), arg(arg='width'), arg(arg='allow_unicode'), arg(arg='line_break'), arg(arg='encoding'), arg(arg='explicit_start'), arg(arg='explicit_end'), arg(arg='version'), arg(arg='tags'), arg(arg='sort_keys')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='Dumper', ctx=Load()), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n    Serialize a sequence of Python objects into a YAML stream.\n    If stream is None, return the produced string instead.\n    ')), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='stream', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='getvalue', ctx=Store())], value=Attribute(value=Name(id='stream', ctx=Load()), attr='getvalue', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dumper', ctx=Store())], value=Call(func=Name(id='Dumper', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[keyword(arg='default_style', value=Name(id='default_style', ctx=Load())), keyword(arg='default_flow_style', value=Name(id='default_flow_style', ctx=Load())), keyword(arg='canonical', value=Name(id='canonical', ctx=Load())), keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='allow_unicode', value=Name(id='allow_unicode', ctx=Load())), keyword(arg='line_break', value=Name(id='line_break', ctx=Load())), keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='tags', value=Name(id='tags', ctx=Load())), keyword(arg='explicit_start', value=Name(id='explicit_start', ctx=Load())), keyword(arg='explicit_end', value=Name(id='explicit_end', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='open', ctx=Load()), args=[], keywords=[])), For(target=Name(id='data', ctx=Store()), iter=Name(id='documents', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='represent', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='dispose', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='getvalue', ctx=Load()), body=[Return(value=Call(func=Name(id='getvalue', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='stream'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=None), Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Serialize a Python object into a YAML stream.\n    If stream is None, return the produced string instead.\n    ')), Return(value=Call(func=Name(id='dump_all', ctx=Load()), args=[List(elts=[Name(id='data', ctx=Load())], ctx=Load()), Name(id='stream', ctx=Load())], keywords=[keyword(arg='Dumper', value=Name(id='Dumper', ctx=Load())), keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='safe_dump_all', args=arguments(posonlyargs=[], args=[arg(arg='documents'), arg(arg='stream')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Serialize a sequence of Python objects into a YAML stream.\n    Produce only basic YAML tags.\n    If stream is None, return the produced string instead.\n    ')), Return(value=Call(func=Name(id='dump_all', ctx=Load()), args=[Name(id='documents', ctx=Load()), Name(id='stream', ctx=Load())], keywords=[keyword(arg='Dumper', value=Name(id='SafeDumper', ctx=Load())), keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='safe_dump', args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='stream')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Serialize a Python object into a YAML stream.\n    Produce only basic YAML tags.\n    If stream is None, return the produced string instead.\n    ')), Return(value=Call(func=Name(id='dump_all', ctx=Load()), args=[List(elts=[Name(id='data', ctx=Load())], ctx=Load()), Name(id='stream', ctx=Load())], keywords=[keyword(arg='Dumper', value=Name(id='SafeDumper', ctx=Load())), keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='add_implicit_resolver', args=arguments(posonlyargs=[], args=[arg(arg='tag'), arg(arg='regexp'), arg(arg='first'), arg(arg='Loader'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Add an implicit scalar detector.\n    If an implicit scalar value matches the given regexp,\n    the corresponding tag is assigned to the scalar.\n    first is a sequence of possible initial characters or None.\n    ')), If(test=Compare(left=Name(id='Loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='Loader', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load()), Name(id='first', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='FullLoader', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load()), Name(id='first', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='UnsafeLoader', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load()), Name(id='first', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Loader', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load()), Name(id='first', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='Dumper', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load()), Name(id='first', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_path_resolver', args=arguments(posonlyargs=[], args=[arg(arg='tag'), arg(arg='path'), arg(arg='kind'), arg(arg='Loader'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Add a path based resolver for the given tag.\n    A path is a list of keys that forms a path\n    to a node in the representation tree.\n    Keys can be string values, integers, or None.\n    ')), If(test=Compare(left=Name(id='Loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='Loader', ctx=Load()), attr='add_path_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='FullLoader', ctx=Load()), attr='add_path_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='UnsafeLoader', ctx=Load()), attr='add_path_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Loader', ctx=Load()), attr='add_path_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='Dumper', ctx=Load()), attr='add_path_resolver', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_constructor', args=arguments(posonlyargs=[], args=[arg(arg='tag'), arg(arg='constructor'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Add a constructor for the given tag.\n    Constructor is a function that accepts a Loader instance\n    and a node object and produces the corresponding Python object.\n    ')), If(test=Compare(left=Name(id='Loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='Loader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='constructor', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='FullLoader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='constructor', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='UnsafeLoader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='constructor', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Loader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Name(id='tag', ctx=Load()), Name(id='constructor', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='add_multi_constructor', args=arguments(posonlyargs=[], args=[arg(arg='tag_prefix'), arg(arg='multi_constructor'), arg(arg='Loader')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Add a multi-constructor for the given tag prefix.\n    Multi-constructor is called for a node if its tag starts with tag_prefix.\n    Multi-constructor accepts a Loader instance, a tag suffix,\n    and a node object and produces the corresponding Python object.\n    ')), If(test=Compare(left=Name(id='Loader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='Loader', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load()), Name(id='multi_constructor', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='FullLoader', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load()), Name(id='multi_constructor', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='UnsafeLoader', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load()), Name(id='multi_constructor', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='Loader', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load()), Name(id='multi_constructor', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='add_representer', args=arguments(posonlyargs=[], args=[arg(arg='data_type'), arg(arg='representer'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Add a representer for the given type.\n    Representer is a function accepting a Dumper instance\n    and an instance of the given data type\n    and producing the corresponding representation node.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='Dumper', ctx=Load()), attr='add_representer', ctx=Load()), args=[Name(id='data_type', ctx=Load()), Name(id='representer', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_multi_representer', args=arguments(posonlyargs=[], args=[arg(arg='data_type'), arg(arg='multi_representer'), arg(arg='Dumper')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Dumper', ctx=Load())]), body=[Expr(value=Constant(value='\n    Add a representer for the given type.\n    Multi-representer is a function accepting a Dumper instance\n    and an instance of the given data type or subtype\n    and producing the corresponding representation node.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='Dumper', ctx=Load()), attr='add_multi_representer', ctx=Load()), args=[Name(id='data_type', ctx=Load()), Name(id='multi_representer', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='YAMLObjectMetaclass', bases=[Name(id='type', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The metaclass for YAMLObject.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='bases'), arg(arg='kwds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='YAMLObjectMetaclass', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='bases', ctx=Load()), Name(id='kwds', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='yaml_tag'), ops=[In()], comparators=[Name(id='kwds', ctx=Load())]), Compare(left=Subscript(value=Name(id='kwds', ctx=Load()), slice=Constant(value='yaml_tag'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_loader', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[For(target=Name(id='loader', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_loader', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_tag', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='from_yaml', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_loader', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_tag', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='from_yaml', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_dumper', ctx=Load()), attr='add_representer', ctx=Load()), args=[Name(id='cls', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='to_yaml', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='YAMLObject', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='YAMLObjectMetaclass', ctx=Load()))], body=[Expr(value=Constant(value='\n    An object that can dump itself to a YAML stream\n    and load itself from a YAML stream.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), Assign(targets=[Name(id='yaml_loader', ctx=Store())], value=List(elts=[Name(id='Loader', ctx=Load()), Name(id='FullLoader', ctx=Load()), Name(id='UnsafeLoader', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='yaml_dumper', ctx=Store())], value=Name(id='Dumper', ctx=Load())), Assign(targets=[Name(id='yaml_tag', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='yaml_flow_style', ctx=Store())], value=Constant(value=None)), FunctionDef(name='from_yaml', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='loader'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Convert a representation node to a Python object.\n        ')), Return(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='construct_yaml_object', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='to_yaml', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dumper'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Convert a Python object to a representation node.\n        ')), Return(value=Call(func=Attribute(value=Name(id='dumper', ctx=Load()), attr='represent_yaml_object', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_tag', ctx=Load()), Name(id='data', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[keyword(arg='flow_style', value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_flow_style', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])