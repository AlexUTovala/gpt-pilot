Module(body=[Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='BaseConstructor'), Constant(value='SafeConstructor'), Constant(value='FullConstructor'), Constant(value='UnsafeConstructor'), Constant(value='Constructor'), Constant(value='ConstructorError')], ctx=Load())), ImportFrom(module='error', names=[alias(name='*')], level=1), ImportFrom(module='nodes', names=[alias(name='*')], level=1), Import(names=[alias(name='collections.abc'), alias(name='datetime'), alias(name='base64'), alias(name='binascii'), alias(name='re'), alias(name='sys'), alias(name='types')]), ClassDef(name='ConstructorError', bases=[Name(id='MarkedYAMLError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='BaseConstructor', bases=[], keywords=[], body=[Assign(targets=[Name(id='yaml_constructors', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='yaml_multi_constructors', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constructed_objects', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive_objects', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='state_generators', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='check_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_node', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='check_state_key', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Block special attributes/methods from being set in a newly created\n        object, to prevent user-controlled methods from being called during\n        deserialization')), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_state_keys_blacklist_regexp', ctx=Load()), args=[], keywords=[]), attr='match', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value="blacklisted key '%s' in instance state found"), op=Mod(), right=Tuple(elts=[Name(id='key', ctx=Load())], ctx=Load())), Constant(value=None)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_node', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_document', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_node', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_single_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_single_node', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='node', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_document', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='construct_document', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), While(test=Attribute(value=Name(id='self', ctx=Load()), attr='state_generators', ctx=Load()), body=[Assign(targets=[Name(id='state_generators', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='state_generators', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='state_generators', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='generator', ctx=Store()), iter=Name(id='state_generators', ctx=Load()), body=[For(target=Name(id='dummy', ctx=Store()), iter=Name(id='generator', ctx=Load()), body=[Pass()], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constructed_objects', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive_objects', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Store())], value=Constant(value=False)), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_object', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='deep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Name(id='node', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='constructed_objects', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constructed_objects', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Name(id='deep', ctx=Load()), body=[Assign(targets=[Name(id='old_deep', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='node', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive_objects', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), Constant(value='found unconstructable recursive node'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='recursive_objects', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='constructor', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tag_suffix', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='yaml_constructors', ctx=Load())]), body=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_constructors', ctx=Load()), slice=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load()), ctx=Load()))], orelse=[For(target=Name(id='tag_prefix', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_multi_constructors', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='tag_prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='tag_suffix', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tag_prefix', ctx=Load())], keywords=[])), ctx=Load())), Assign(targets=[Name(id='constructor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_multi_constructors', ctx=Load()), slice=Name(id='tag_prefix', ctx=Load()), ctx=Load())), Break()], orelse=[])], orelse=[If(test=Compare(left=Constant(value=None), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='yaml_multi_constructors', ctx=Load())]), body=[Assign(targets=[Name(id='tag_suffix', ctx=Store())], value=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load())), Assign(targets=[Name(id='constructor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_multi_constructors', ctx=Load()), slice=Constant(value=None), ctx=Load()))], orelse=[If(test=Compare(left=Constant(value=None), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='yaml_constructors', ctx=Load())]), body=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_constructors', ctx=Load()), slice=Constant(value=None), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='ScalarNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='construct_scalar', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='construct_sequence', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='constructor', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='construct_mapping', ctx=Load()))], orelse=[])])])])])])]), If(test=Compare(left=Name(id='tag_suffix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='constructor', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='node', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='constructor', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='tag_suffix', ctx=Load()), Name(id='node', ctx=Load())], keywords=[]))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='GeneratorType', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='generator', ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='generator', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Load()), body=[For(target=Name(id='dummy', ctx=Store()), iter=Name(id='generator', ctx=Load()), body=[Pass()], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state_generators', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='generator', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='constructed_objects', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Name(id='data', ctx=Load())), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='recursive_objects', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Del())]), If(test=Name(id='deep', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='deep_construct', ctx=Store())], value=Name(id='old_deep', ctx=Load()))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_scalar', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='ScalarNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='expected a scalar node, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_sequence', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='deep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='expected a sequence node, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))]), generators=[comprehension(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='construct_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='deep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='expected a mapping node, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='key_node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Attribute(value=Name(id='collections', ctx=Load()), attr='abc', ctx=Load()), attr='Hashable', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a mapping'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), Constant(value='found unhashable key'), Attribute(value=Name(id='key_node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Name(id='mapping', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_pairs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='deep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='expected a mapping node, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pairs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='key_node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='pairs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='pairs', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_constructor', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='tag'), arg(arg='constructor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value='yaml_constructors'), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())])), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_constructors', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_constructors', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_constructors', ctx=Load()), slice=Name(id='tag', ctx=Load()), ctx=Store())], value=Name(id='constructor', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='add_multi_constructor', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='tag_prefix'), arg(arg='multi_constructor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value='yaml_multi_constructors'), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())])), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_multi_constructors', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_multi_constructors', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_multi_constructors', ctx=Load()), slice=Name(id='tag_prefix', ctx=Load()), ctx=Store())], value=Name(id='multi_constructor', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='SafeConstructor', bases=[Name(id='BaseConstructor', ctx=Load())], keywords=[], body=[FunctionDef(name='construct_scalar', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='key_node', ctx=Load()), attr='tag', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tag:yaml.org,2002:value')]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='flatten_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='merge', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='index', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load())], keywords=[])]), body=[Assign(targets=[Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='key_node', ctx=Load()), attr='tag', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tag:yaml.org,2002:merge')]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Del())]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value_node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flatten_mapping', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='merge', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='value_node', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value_node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='submerge', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='subnode', ctx=Store()), iter=Attribute(value=Name(id='value_node', ctx=Load()), attr='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subnode', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a mapping'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a mapping for merging, but found %s'), op=Mod(), right=Attribute(value=Name(id='subnode', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='subnode', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flatten_mapping', ctx=Load()), args=[Name(id='subnode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='submerge', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='submerge', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=Name(id='submerge', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='merge', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a mapping'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a mapping or list of mappings for merging, but found %s'), op=Mod(), right=Attribute(value=Name(id='value_node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='value_node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))])])], orelse=[If(test=Compare(left=Attribute(value=Name(id='key_node', ctx=Load()), attr='tag', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tag:yaml.org,2002:value')]), body=[Assign(targets=[Attribute(value=Name(id='key_node', ctx=Load()), attr='tag', ctx=Store())], value=Constant(value='tag:yaml.org,2002:str')), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Constant(value=1))])])], orelse=[]), If(test=Name(id='merge', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Store())], value=BinOp(left=Name(id='merge', ctx=Load()), op=Add(), right=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='construct_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='deep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flatten_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='construct_yaml_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='bool_values', ctx=Store())], value=Dict(keys=[Constant(value='yes'), Constant(value='no'), Constant(value='true'), Constant(value='false'), Constant(value='on'), Constant(value='off')], values=[Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False)])), FunctionDef(name='construct_yaml_bool', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='bool_values', ctx=Load()), slice=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_yaml_int', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='sign', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=1))), If(test=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='sign', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Constant(value='+-')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Return(value=Constant(value=0))], orelse=[If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='0b')], keywords=[]), body=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()), Constant(value=2)], keywords=[])))], orelse=[If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='0x')], keywords=[]), body=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()), Constant(value=16)], keywords=[])))], orelse=[If(test=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=8)], keywords=[])))], orelse=[If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='value', ctx=Load())]), body=[Assign(targets=[Name(id='digits', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='digits', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=0)), For(target=Name(id='digit', ctx=Store()), iter=Name(id='digits', ctx=Load()), body=[AugAssign(target=Name(id='value', ctx=Store()), op=Add(), value=BinOp(left=Name(id='digit', ctx=Load()), op=Mult(), right=Name(id='base', ctx=Load()))), AugAssign(target=Name(id='base', ctx=Store()), op=Mult(), value=Constant(value=60))], orelse=[]), Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Name(id='value', ctx=Load())))], orelse=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])))])])])])])], decorator_list=[]), Assign(targets=[Name(id='inf_value', ctx=Store())], value=Constant(value=1e+300)), While(test=Compare(left=Name(id='inf_value', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Name(id='inf_value', ctx=Load()), op=Mult(), right=Name(id='inf_value', ctx=Load()))]), body=[AugAssign(target=Name(id='inf_value', ctx=Store()), op=Mult(), value=Name(id='inf_value', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='nan_value', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Name(id='inf_value', ctx=Load())), op=Div(), right=Name(id='inf_value', ctx=Load()))), FunctionDef(name='construct_yaml_float', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sign', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=1))), If(test=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='sign', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Constant(value='+-')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.inf')]), body=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='inf_value', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.nan')]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='nan_value', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='value', ctx=Load())]), body=[Assign(targets=[Name(id='digits', ctx=Store())], value=ListComp(elt=Call(func=Name(id='float', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='digits', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=0.0)), For(target=Name(id='digit', ctx=Store()), iter=Name(id='digits', ctx=Load()), body=[AugAssign(target=Name(id='value', ctx=Store()), op=Add(), value=BinOp(left=Name(id='digit', ctx=Load()), op=Mult(), right=Name(id='base', ctx=Load()))), AugAssign(target=Name(id='base', ctx=Store()), op=Mult(), value=Constant(value=60))], orelse=[]), Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Name(id='value', ctx=Load())))], orelse=[Return(value=BinOp(left=Name(id='sign', ctx=Load()), op=Mult(), right=Call(func=Name(id='float', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])))])])])], decorator_list=[]), FunctionDef(name='construct_yaml_binary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='failed to convert base64 data into ascii: %s'), op=Mod(), right=Name(id='exc', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='base64', ctx=Load()), Constant(value='decodebytes')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='decodebytes', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='decodestring', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Attribute(value=Name(id='binascii', ctx=Load()), attr='Error', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='failed to decode base64 data: %s'), op=Mod(), right=Name(id='exc', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='timestamp_regexp', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?P<year>[0-9][0-9][0-9][0-9])\n                -(?P<month>[0-9][0-9]?)\n                -(?P<day>[0-9][0-9]?)\n                (?:(?:[Tt]|[ \\t]+)\n                (?P<hour>[0-9][0-9]?)\n                :(?P<minute>[0-9][0-9])\n                :(?P<second>[0-9][0-9])\n                (?:\\.(?P<fraction>[0-9]*))?\n                (?:[ \\t]*(?P<tz>Z|(?P<tz_sign>[-+])(?P<tz_hour>[0-9][0-9]?)\n                (?::(?P<tz_minute>[0-9][0-9]))?))?)?$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[])), FunctionDef(name='construct_yaml_timestamp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='timestamp_regexp', ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='year', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='year'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='month', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='month'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='day', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='day'), ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='hour'), ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='date', ctx=Load()), args=[Name(id='year', ctx=Load()), Name(id='month', ctx=Load()), Name(id='day', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='hour', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='hour'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='minute', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='minute'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='second', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='second'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='fraction', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='tzinfo', ctx=Store())], value=Constant(value=None)), If(test=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='fraction'), ctx=Load()), body=[Assign(targets=[Name(id='fraction', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='fraction'), ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fraction', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=6)]), body=[AugAssign(target=Name(id='fraction', ctx=Store()), op=Add(), value=Constant(value='0'))], orelse=[]), Assign(targets=[Name(id='fraction', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='fraction', ctx=Load())], keywords=[]))], orelse=[]), If(test=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='tz_sign'), ctx=Load()), body=[Assign(targets=[Name(id='tz_hour', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='tz_hour'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='tz_minute', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BoolOp(op=Or(), values=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='tz_minute'), ctx=Load()), Constant(value=0)])], keywords=[])), Assign(targets=[Name(id='delta', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='hours', value=Name(id='tz_hour', ctx=Load())), keyword(arg='minutes', value=Name(id='tz_minute', ctx=Load()))])), If(test=Compare(left=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='tz_sign'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='delta', ctx=Store())], value=UnaryOp(op=USub(), operand=Name(id='delta', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='tzinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timezone', ctx=Load()), args=[Name(id='delta', ctx=Load())], keywords=[]))], orelse=[If(test=Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='tz'), ctx=Load()), body=[Assign(targets=[Name(id='tzinfo', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='timezone', ctx=Load()), attr='utc', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), args=[Name(id='year', ctx=Load()), Name(id='month', ctx=Load()), Name(id='day', ctx=Load()), Name(id='hour', ctx=Load()), Name(id='minute', ctx=Load()), Name(id='second', ctx=Load()), Name(id='fraction', ctx=Load())], keywords=[keyword(arg='tzinfo', value=Name(id='tzinfo', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='construct_yaml_omap', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='omap', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Yield(value=Name(id='omap', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing an ordered map'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a sequence, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='subnode', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subnode', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing an ordered map'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a mapping of length 1, but found %s'), op=Mod(), right=Attribute(value=Name(id='subnode', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='subnode', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing an ordered map'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a single mapping item, but found %d items'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Attribute(value=Name(id='subnode', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='key_node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='omap', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='construct_yaml_pairs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pairs', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Yield(value=Name(id='pairs', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing pairs'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a sequence, but found %s'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='subnode', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='subnode', ctx=Load()), Name(id='MappingNode', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing pairs'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a mapping of length 1, but found %s'), op=Mod(), right=Attribute(value=Name(id='subnode', ctx=Load()), attr='id', ctx=Load())), Attribute(value=Name(id='subnode', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing pairs'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a single mapping item, but found %d items'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load())], keywords=[])), Attribute(value=Name(id='subnode', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='key_node', ctx=Store()), Name(id='value_node', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='subnode', ctx=Load()), attr='value', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='key_node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_object', ctx=Load()), args=[Name(id='value_node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pairs', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='construct_yaml_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Name(id='data', ctx=Load()))), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_yaml_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_yaml_seq', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Yield(value=Name(id='data', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_sequence', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_yaml_map', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Yield(value=Name(id='data', ctx=Load()))), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_yaml_object', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='data', ctx=Load()))), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='__setstate__')], keywords=[]), body=[Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[keyword(arg='deep', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='__setstate__', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='data', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='construct_undefined', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='could not determine a constructor for the tag %r'), op=Mod(), right=Attribute(value=Name(id='node', ctx=Load()), attr='tag', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:null'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_null', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:bool'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_bool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:int'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:float'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:binary'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_binary', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:timestamp'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_timestamp', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:omap'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_omap', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:pairs'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_pairs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:set'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_set', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:str'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:seq'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_seq', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:map'), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_yaml_map', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value=None), Attribute(value=Name(id='SafeConstructor', ctx=Load()), attr='construct_undefined', ctx=Load())], keywords=[])), ClassDef(name='FullConstructor', bases=[Name(id='SafeConstructor', ctx=Load())], keywords=[], body=[FunctionDef(name='get_state_keys_blacklist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value='^extend$'), Constant(value='^__.*__$')], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_state_keys_blacklist_regexp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='state_keys_blacklist_regexp')], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='state_keys_blacklist_regexp', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='('), op=Add(), right=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_state_keys_blacklist', ctx=Load()), args=[], keywords=[])], keywords=[])), op=Add(), right=Constant(value=')'))], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state_keys_blacklist_regexp', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_python_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_unicode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='failed to convert base64 data into ascii: %s'), op=Mod(), right=Name(id='exc', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='base64', ctx=Load()), Constant(value='decodebytes')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='decodebytes', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='decodestring', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Attribute(value=Name(id='binascii', ctx=Load()), attr='Error', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value=None), Constant(value=None), BinOp(left=Constant(value='failed to decode base64 data: %s'), op=Mod(), right=Name(id='exc', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='construct_python_long', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_yaml_int', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_complex', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='complex', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_tuple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_sequence', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='find_python_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='mark'), arg(arg='unsafe')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python module'), Name(id='mark', ctx=Load()), Constant(value='expected non-empty name appended to the tag'), Name(id='mark', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='unsafe', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python module'), Name(id='mark', ctx=Load()), BinOp(left=Constant(value='cannot find module %r (%s)'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='exc', ctx=Load())], ctx=Load())), Name(id='mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python module'), Name(id='mark', ctx=Load()), BinOp(left=Constant(value='module %r is not imported'), op=Mod(), right=Name(id='name', ctx=Load())), Name(id='mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='find_python_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='mark'), arg(arg='unsafe')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python object'), Name(id='mark', ctx=Load()), Constant(value='expected non-empty name appended to the tag'), Name(id='mark', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='object_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Name(id='module_name', ctx=Store())], value=Constant(value='builtins')), Assign(targets=[Name(id='object_name', ctx=Store())], value=Name(id='name', ctx=Load()))]), If(test=Name(id='unsafe', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python object'), Name(id='mark', ctx=Load()), BinOp(left=Constant(value='cannot find module %r (%s)'), op=Mod(), right=Tuple(elts=[Name(id='module_name', ctx=Load()), Name(id='exc', ctx=Load())], ctx=Load())), Name(id='mark', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='module_name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python object'), Name(id='mark', ctx=Load()), BinOp(left=Constant(value='module %r is not imported'), op=Mod(), right=Name(id='module_name', ctx=Load())), Name(id='mark', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='module_name', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='object_name', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python object'), Name(id='mark', ctx=Load()), BinOp(left=Constant(value='cannot find %r in the module %r'), op=Mod(), right=Tuple(elts=[Name(id='object_name', ctx=Load()), Attribute(value=Name(id='module', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load())), Name(id='mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='object_name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python name'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected the empty value, but found %r'), op=Mod(), right=Name(id='value', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_python_name', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_scalar', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python module'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected the empty value, but found %r'), op=Mod(), right=Name(id='value', ctx=Load())), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_python_module', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_python_instance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node'), arg(arg='args'), arg(arg='kwds'), arg(arg='newobj'), arg(arg='unsafe')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='kwds', ctx=Load())), body=[Assign(targets=[Name(id='kwds', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_python_name', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='unsafe', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])])), body=[Raise(exc=Call(func=Name(id='ConstructorError', ctx=Load()), args=[Constant(value='while constructing a Python instance'), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load()), BinOp(left=Constant(value='expected a class, but found %r'), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Attribute(value=Name(id='node', ctx=Load()), attr='start_mark', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='newobj', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))]))], orelse=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='set_python_instance_state', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='state'), arg(arg='unsafe')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Constant(value='__setstate__')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='instance', ctx=Load()), attr='__setstate__', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='slotstate', ctx=Store())], value=Dict(keys=[], values=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='state', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Assign(targets=[Tuple(elts=[Name(id='state', ctx=Store()), Name(id='slotstate', ctx=Store())], ctx=Store())], value=Name(id='state', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Constant(value='__dict__')], keywords=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='unsafe', ctx=Load())), Name(id='state', ctx=Load())]), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_state_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='instance', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='slotstate', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], orelse=[])]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='slotstate', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='unsafe', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_state_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='construct_python_object', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_python_instance', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Name(id='node', ctx=Load())], keywords=[keyword(arg='newobj', value=Constant(value=True))])), Expr(value=Yield(value=Name(id='instance', ctx=Load()))), Assign(targets=[Name(id='deep', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Constant(value='__setstate__')], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[keyword(arg='deep', value=Name(id='deep', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_python_instance_state', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='construct_python_object_apply', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node'), arg(arg='newobj')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='SequenceNode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_sequence', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='kwds', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='listitems', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='dictitems', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_mapping', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[keyword(arg='deep', value=Constant(value=True))])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='args'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='kwds', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='kwds'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='state'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='listitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='listitems'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='dictitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dictitems'), Dict(keys=[], values=[])], keywords=[]))]), Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_python_instance', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Name(id='node', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwds', ctx=Load()), Name(id='newobj', ctx=Load())], keywords=[])), If(test=Name(id='state', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_python_instance_state', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='listitems', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='instance', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='listitems', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='dictitems', ctx=Load()), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='dictitems', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='instance', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='dictitems', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='instance', ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_python_object_new', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_python_object_apply', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Name(id='node', ctx=Load())], keywords=[keyword(arg='newobj', value=Constant(value=True))]))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/none'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_null', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/bool'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_bool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/str'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/unicode'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_unicode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/bytes'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_bytes', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/int'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/long'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_long', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/float'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/complex'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_complex', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/list'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_seq', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/tuple'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_tuple', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/dict'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_yaml_map', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/name:'), Attribute(value=Name(id='FullConstructor', ctx=Load()), attr='construct_python_name', ctx=Load())], keywords=[])), ClassDef(name='UnsafeConstructor', bases=[Name(id='FullConstructor', ctx=Load())], keywords=[], body=[FunctionDef(name='find_python_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='mark')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='UnsafeConstructor', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='find_python_module', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='mark', ctx=Load())], keywords=[keyword(arg='unsafe', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='find_python_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='mark')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='UnsafeConstructor', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='find_python_name', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='mark', ctx=Load())], keywords=[keyword(arg='unsafe', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='make_python_instance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='node'), arg(arg='args'), arg(arg='kwds'), arg(arg='newobj')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='UnsafeConstructor', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='make_python_instance', ctx=Load()), args=[Name(id='suffix', ctx=Load()), Name(id='node', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwds', ctx=Load()), Name(id='newobj', ctx=Load())], keywords=[keyword(arg='unsafe', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='set_python_instance_state', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='UnsafeConstructor', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='set_python_instance_state', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='state', ctx=Load())], keywords=[keyword(arg='unsafe', value=Constant(value=True))]))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/module:'), Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='construct_python_module', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/object:'), Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='construct_python_object', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/object/new:'), Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='construct_python_object_new', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='add_multi_constructor', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:python/object/apply:'), Attribute(value=Name(id='UnsafeConstructor', ctx=Load()), attr='construct_python_object_apply', ctx=Load())], keywords=[])), ClassDef(name='Constructor', bases=[Name(id='UnsafeConstructor', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])], type_ignores=[])