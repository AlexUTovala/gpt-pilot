Module(body=[Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='BaseResolver'), Constant(value='Resolver')], ctx=Load())), ImportFrom(module='error', names=[alias(name='*')], level=1), ImportFrom(module='nodes', names=[alias(name='*')], level=1), Import(names=[alias(name='re')]), ClassDef(name='ResolverError', bases=[Name(id='YAMLError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='BaseResolver', bases=[], keywords=[], body=[Assign(targets=[Name(id='DEFAULT_SCALAR_TAG', ctx=Store())], value=Constant(value='tag:yaml.org,2002:str')), Assign(targets=[Name(id='DEFAULT_SEQUENCE_TAG', ctx=Store())], value=Constant(value='tag:yaml.org,2002:seq')), Assign(targets=[Name(id='DEFAULT_MAPPING_TAG', ctx=Store())], value=Constant(value='tag:yaml.org,2002:map')), Assign(targets=[Name(id='yaml_implicit_resolvers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='yaml_path_resolvers', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='resolver_exact_paths', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='resolver_prefix_paths', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='add_implicit_resolver', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='tag'), arg(arg='regexp'), arg(arg='first')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value='yaml_implicit_resolvers'), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())])), body=[Assign(targets=[Name(id='implicit_resolvers', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='implicit_resolvers', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Slice(), ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Store())], value=Name(id='implicit_resolvers', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='first', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='first', ctx=Store())], value=List(elts=[Constant(value=None)], ctx=Load()))], orelse=[]), For(target=Name(id='ch', ctx=Store()), iter=Name(id='first', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='ch', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='tag', ctx=Load()), Name(id='regexp', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='add_path_resolver', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='tag'), arg(arg='path'), arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value='yaml_path_resolvers'), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())])), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_path_resolvers', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_path', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='element', ctx=Store()), iter=Name(id='path', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='node_check', ctx=Store()), Name(id='index_check', ctx=Store())], ctx=Store())], value=Name(id='element', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='node_check', ctx=Store())], value=Subscript(value=Name(id='element', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='index_check', ctx=Store())], value=Constant(value=True))], orelse=[Raise(exc=Call(func=Name(id='ResolverError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid path element: %s'), op=Mod(), right=Name(id='element', ctx=Load()))], keywords=[]))])])], orelse=[Assign(targets=[Name(id='node_check', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='index_check', ctx=Store())], value=Name(id='element', ctx=Load()))]), If(test=Compare(left=Name(id='node_check', ctx=Load()), ops=[Is()], comparators=[Name(id='str', ctx=Load())]), body=[Assign(targets=[Name(id='node_check', ctx=Store())], value=Name(id='ScalarNode', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='node_check', ctx=Load()), ops=[Is()], comparators=[Name(id='list', ctx=Load())]), body=[Assign(targets=[Name(id='node_check', ctx=Store())], value=Name(id='SequenceNode', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='node_check', ctx=Load()), ops=[Is()], comparators=[Name(id='dict', ctx=Load())]), body=[Assign(targets=[Name(id='node_check', ctx=Store())], value=Name(id='MappingNode', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='node_check', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Name(id='ScalarNode', ctx=Load()), Name(id='SequenceNode', ctx=Load()), Name(id='MappingNode', ctx=Load())], ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node_check', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Compare(left=Name(id='node_check', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ResolverError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid node checker: %s'), op=Mod(), right=Name(id='node_check', ctx=Load()))], keywords=[]))], orelse=[])])])]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='index_check', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())], keywords=[])), Compare(left=Name(id='index_check', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ResolverError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid index checker: %s'), op=Mod(), right=Name(id='index_check', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_path', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='node_check', ctx=Load()), Name(id='index_check', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='str', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='ScalarNode', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='list', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='SequenceNode', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='dict', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='MappingNode', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='kind', ctx=Load()), ops=[NotIn()], comparators=[List(elts=[Name(id='ScalarNode', ctx=Load()), Name(id='SequenceNode', ctx=Load()), Name(id='MappingNode', ctx=Load())], ctx=Load())]), Compare(left=Name(id='kind', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ResolverError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid node kind: %s'), op=Mod(), right=Name(id='kind', ctx=Load()))], keywords=[]))], orelse=[])])])]), Assign(targets=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), slice=Tuple(elts=[Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]), Name(id='kind', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='tag', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='descend_resolver', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='current_node'), arg(arg='current_index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='exact_paths', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='prefix_paths', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='current_node', ctx=Load()), body=[Assign(targets=[Name(id='depth', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolver_prefix_paths', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='path', ctx=Store()), Name(id='kind', ctx=Store())], ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_prefix_paths', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_resolver_prefix', ctx=Load()), args=[Name(id='depth', ctx=Load()), Name(id='path', ctx=Load()), Name(id='kind', ctx=Load()), Name(id='current_node', ctx=Load()), Name(id='current_index', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='depth', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='prefix_paths', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='exact_paths', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), slice=Tuple(elts=[Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], ctx=Load()), ctx=Load()))])], orelse=[])], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='path', ctx=Store()), Name(id='kind', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='exact_paths', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), slice=Tuple(elts=[Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='prefix_paths', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='path', ctx=Load()), Name(id='kind', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_exact_paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='exact_paths', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_prefix_paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='prefix_paths', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='ascend_resolver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_exact_paths', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_prefix_paths', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='check_resolver_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='depth'), arg(arg='path'), arg(arg='kind'), arg(arg='current_node'), arg(arg='current_index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='node_check', ctx=Store()), Name(id='index_check', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=BinOp(left=Name(id='depth', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node_check', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='current_node', ctx=Load()), attr='tag', ctx=Load()), ops=[NotEq()], comparators=[Name(id='node_check', ctx=Load())]), body=[Return()], orelse=[])], orelse=[If(test=Compare(left=Name(id='node_check', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='current_node', ctx=Load()), Name(id='node_check', ctx=Load())], keywords=[])), body=[Return()], orelse=[])], orelse=[])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='index_check', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='current_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return()], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Name(id='index_check', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Name(id='index_check', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), Compare(left=Name(id='current_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='index_check', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='current_index', ctx=Load()), Name(id='ScalarNode', ctx=Load())], keywords=[]), Compare(left=Name(id='index_check', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='current_index', ctx=Load()), attr='value', ctx=Load())])])), body=[Return()], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='index_check', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='index_check', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]))]), body=[If(test=Compare(left=Name(id='index_check', ctx=Load()), ops=[NotEq()], comparators=[Name(id='current_index', ctx=Load())]), body=[Return()], orelse=[])], orelse=[])]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind'), arg(arg='value'), arg(arg='implicit')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='ScalarNode', ctx=Load())]), Subscript(value=Name(id='implicit', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='resolvers', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=''), List(elts=[], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='resolvers', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), attr='get', ctx=Load()), args=[Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value=0), ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='wildcard_resolvers', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_implicit_resolvers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=None), List(elts=[], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='tag', ctx=Store()), Name(id='regexp', ctx=Store())], ctx=Store()), iter=BinOp(left=Name(id='resolvers', ctx=Load()), op=Add(), right=Name(id='wildcard_resolvers', ctx=Load())), body=[If(test=Call(func=Attribute(value=Name(id='regexp', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[Return(value=Name(id='tag', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='implicit', ctx=Store())], value=Subscript(value=Name(id='implicit', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='yaml_path_resolvers', ctx=Load()), body=[Assign(targets=[Name(id='exact_paths', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver_exact_paths', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[Name(id='exact_paths', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='exact_paths', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value=None), ops=[In()], comparators=[Name(id='exact_paths', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='exact_paths', ctx=Load()), slice=Constant(value=None), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='ScalarNode', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_SCALAR_TAG', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='SequenceNode', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_SEQUENCE_TAG', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[Is()], comparators=[Name(id='MappingNode', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_MAPPING_TAG', ctx=Load()))], orelse=[])])])], decorator_list=[])], decorator_list=[]), ClassDef(name='Resolver', bases=[Name(id='BaseResolver', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:bool'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:yes|Yes|YES|no|No|NO\n                    |true|True|TRUE|false|False|FALSE\n                    |on|On|ON|off|Off|OFF)$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Constant(value='yYnNtTfFoO')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:float'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?\n                    |\\.[0-9][0-9_]*(?:[eE][-+][0-9]+)?\n                    |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*\n                    |[-+]?\\.(?:inf|Inf|INF)\n                    |\\.(?:nan|NaN|NAN))$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Constant(value='-+0123456789.')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:int'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:[-+]?0b[0-1_]+\n                    |[-+]?0[0-7_]+\n                    |[-+]?(?:0|[1-9][0-9_]*)\n                    |[-+]?0x[0-9a-fA-F_]+\n                    |[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Constant(value='-+0123456789')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:merge'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:<<)$')], keywords=[]), List(elts=[Constant(value='<')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:null'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?: ~\n                    |null|Null|NULL\n                    | )$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[]), List(elts=[Constant(value='~'), Constant(value='n'), Constant(value='N'), Constant(value='')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:timestamp'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\n                    |[0-9][0-9][0-9][0-9] -[0-9][0-9]? -[0-9][0-9]?\n                     (?:[Tt]|[ \\t]+)[0-9][0-9]?\n                     :[0-9][0-9] :[0-9][0-9] (?:\\.[0-9]*)?\n                     (?:[ \\t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$'), Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load())], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Constant(value='0123456789')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:value'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:=)$')], keywords=[]), List(elts=[Constant(value='=')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='Resolver', ctx=Load()), attr='add_implicit_resolver', ctx=Load()), args=[Constant(value='tag:yaml.org,2002:yaml'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:!|&|\\*)$')], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Constant(value='!&*')], keywords=[])], keywords=[]))], type_ignores=[])