Module(body=[Expr(value=Constant(value='\nrequests.models\n~~~~~~~~~~~~~~~\n\nThis module contains the primary objects that power Requests.\n')), Import(names=[alias(name='datetime')]), Import(names=[alias(name='encodings.idna')]), ImportFrom(module='io', names=[alias(name='UnsupportedOperation')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='DecodeError'), alias(name='LocationParseError'), alias(name='ProtocolError'), alias(name='ReadTimeoutError'), alias(name='SSLError')], level=0), ImportFrom(module='urllib3.fields', names=[alias(name='RequestField')], level=0), ImportFrom(module='urllib3.filepost', names=[alias(name='encode_multipart_formdata')], level=0), ImportFrom(module='urllib3.util', names=[alias(name='parse_url')], level=0), ImportFrom(module='_internal_utils', names=[alias(name='to_native_string'), alias(name='unicode_is_ascii')], level=1), ImportFrom(module='auth', names=[alias(name='HTTPBasicAuth')], level=1), ImportFrom(module='compat', names=[alias(name='Callable'), alias(name='JSONDecodeError'), alias(name='Mapping'), alias(name='basestring'), alias(name='builtin_str'), alias(name='chardet'), alias(name='cookielib')], level=1), ImportFrom(module='compat', names=[alias(name='json', asname='complexjson')], level=1), ImportFrom(module='compat', names=[alias(name='urlencode'), alias(name='urlsplit'), alias(name='urlunparse')], level=1), ImportFrom(module='cookies', names=[alias(name='_copy_cookie_jar'), alias(name='cookiejar_from_dict'), alias(name='get_cookie_header')], level=1), ImportFrom(module='exceptions', names=[alias(name='ChunkedEncodingError'), alias(name='ConnectionError'), alias(name='ContentDecodingError'), alias(name='HTTPError'), alias(name='InvalidJSONError'), alias(name='InvalidURL')], level=1), ImportFrom(module='exceptions', names=[alias(name='JSONDecodeError', asname='RequestsJSONDecodeError')], level=1), ImportFrom(module='exceptions', names=[alias(name='MissingSchema')], level=1), ImportFrom(module='exceptions', names=[alias(name='SSLError', asname='RequestsSSLError')], level=1), ImportFrom(module='exceptions', names=[alias(name='StreamConsumedError')], level=1), ImportFrom(module='hooks', names=[alias(name='default_hooks')], level=1), ImportFrom(module='status_codes', names=[alias(name='codes')], level=1), ImportFrom(module='structures', names=[alias(name='CaseInsensitiveDict')], level=1), ImportFrom(module='utils', names=[alias(name='check_header_validity'), alias(name='get_auth_from_url'), alias(name='guess_filename'), alias(name='guess_json_utf'), alias(name='iter_slices'), alias(name='parse_header_links'), alias(name='requote_uri'), alias(name='stream_decode_response_unicode'), alias(name='super_len'), alias(name='to_key_val_list')], level=1), Assign(targets=[Name(id='REDIRECT_STATI', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='codes', ctx=Load()), attr='moved', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='found', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='other', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='temporary_redirect', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='permanent_redirect', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='DEFAULT_REDIRECT_LIMIT', ctx=Store())], value=Constant(value=30)), Assign(targets=[Name(id='CONTENT_CHUNK_SIZE', ctx=Store())], value=BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='ITER_CHUNK_SIZE', ctx=Store())], value=Constant(value=512)), ClassDef(name='RequestEncodingMixin', bases=[], keywords=[], body=[FunctionDef(name='path_url', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build the path URL to use.')), Assign(targets=[Name(id='url', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='urlsplit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='p', ctx=Load()), attr='path', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='/'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='query', ctx=Store())], value=Attribute(value=Name(id='p', ctx=Load()), attr='query', ctx=Load())), If(test=Name(id='query', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='?')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_encode_params', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Encode parameters in a piece of data.\n\n        Will successfully encode parameters when passed as a dict or a list of\n        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n        if parameters are supplied as a dict.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Name(id='data', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='read')], keywords=[]), body=[Return(value=Name(id='data', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='__iter__')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='vs', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='to_key_val_list', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='vs', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='vs', ctx=Load()), Constant(value='__iter__')], keywords=[]))]), body=[Assign(targets=[Name(id='vs', ctx=Store())], value=List(elts=[Name(id='vs', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='v', ctx=Store()), iter=Name(id='vs', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), orelse=Name(id='k', ctx=Load())), IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), orelse=Name(id='v', ctx=Load()))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='urlencode', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='doseq', value=Constant(value=True))]))], orelse=[Return(value=Name(id='data', ctx=Load()))])])])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_encode_files', args=arguments(posonlyargs=[], args=[arg(arg='files'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build the body for a multipart/form-data request.\n\n        Will successfully encode files when passed as a dict or a list of\n        tuples. Order is retained if data is a list of tuples but arbitrary\n        if parameters are supplied as a dict.\n        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)\n        or 4-tuples (filename, fileobj, contentype, custom_headers).\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Files must be provided.')], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Data must not be a string.')], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='new_fields', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Name(id='to_key_val_list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='data', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='to_key_val_list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='files', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Name(id='fields', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='val', ctx=Load()), Constant(value='__iter__')], keywords=[]))]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=List(elts=[Name(id='val', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='v', ctx=Store()), iter=Name(id='val', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_fields', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), orelse=Name(id='field', ctx=Load())), IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), orelse=Name(id='v', ctx=Load()))], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='ft', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='fh', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='tuple', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='fn', ctx=Store()), Name(id='fp', ctx=Store())], ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Tuple(elts=[Name(id='fn', ctx=Store()), Name(id='fp', ctx=Store()), Name(id='ft', ctx=Store())], ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='fn', ctx=Store()), Name(id='fp', ctx=Store()), Name(id='ft', ctx=Store()), Name(id='fh', ctx=Store())], ctx=Store())], value=Name(id='v', ctx=Load()))])])], orelse=[Assign(targets=[Name(id='fn', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='guess_filename', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), Name(id='k', ctx=Load())])), Assign(targets=[Name(id='fp', ctx=Store())], value=Name(id='v', ctx=Load()))]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fp', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fdata', ctx=Store())], value=Name(id='fp', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='fp', ctx=Load()), Constant(value='read')], keywords=[]), body=[Assign(targets=[Name(id='fdata', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[Assign(targets=[Name(id='fdata', ctx=Store())], value=Name(id='fp', ctx=Load()))])])]), Assign(targets=[Name(id='rf', ctx=Store())], value=Call(func=Name(id='RequestField', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='k', ctx=Load())), keyword(arg='data', value=Name(id='fdata', ctx=Load())), keyword(arg='filename', value=Name(id='fn', ctx=Load())), keyword(arg='headers', value=Name(id='fh', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='rf', ctx=Load()), attr='make_multipart', ctx=Load()), args=[], keywords=[keyword(arg='content_type', value=Name(id='ft', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='new_fields', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='rf', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='body', ctx=Store()), Name(id='content_type', ctx=Store())], ctx=Store())], value=Call(func=Name(id='encode_multipart_formdata', ctx=Load()), args=[Name(id='new_fields', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='body', ctx=Load()), Name(id='content_type', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='RequestHooksMixin', bases=[], keywords=[], body=[FunctionDef(name='register_hook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event'), arg(arg='hook')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Properly register a hook.')), If(test=Compare(left=Name(id='event', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported event specified, with event name "'), FormattedValue(value=Name(id='event', ctx=Load()), conversion=-1), Constant(value='"')])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='hook', ctx=Load()), Name(id='Callable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='hook', ctx=Load()), Constant(value='__iter__')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Name(id='h', ctx=Load()), generators=[comprehension(target=Name(id='h', ctx=Store()), iter=Name(id='hook', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='h', ctx=Load()), Name(id='Callable', ctx=Load())], keywords=[])], is_async=0)])], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='deregister_hook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event'), arg(arg='hook')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deregister a previously registered hook.\n        Returns True if the hook existed, False if not.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='Request', bases=[Name(id='RequestHooksMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A user-created :class:`Request <Request>` object.\n\n    Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.\n\n    :param method: HTTP method to use.\n    :param url: URL to send.\n    :param headers: dictionary of headers to send.\n    :param files: dictionary of {filename: fileobject} files to multipart upload.\n    :param data: the body to attach to the request. If a dictionary or\n        list of tuples ``[(key, value)]`` is provided, form-encoding will\n        take place.\n    :param json: json for the body to attach to the request (if files or data is not specified).\n    :param params: URL parameters to append to the URL. If a dictionary or\n        list of tuples ``[(key, value)]`` is provided, form-encoding will\n        take place.\n    :param auth: Auth handler or (user, pass) tuple.\n    :param cookies: dictionary or CookieJar of cookies to attach to this request.\n    :param hooks: dictionary of callback hooks, for internal usage.\n\n    Usage::\n\n      >>> import requests\n      >>> req = requests.Request('GET', 'https://httpbin.org/get')\n      >>> req.prepare()\n      <PreparedRequest [GET]>\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='headers'), arg(arg='files'), arg(arg='data'), arg(arg='params'), arg(arg='auth'), arg(arg='cookies'), arg(arg='hooks'), arg(arg='json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=IfExp(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=List(elts=[], ctx=Load()), orelse=Name(id='data', ctx=Load()))), Assign(targets=[Name(id='files', ctx=Store())], value=IfExp(test=Compare(left=Name(id='files', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=List(elts=[], ctx=Load()), orelse=Name(id='files', ctx=Load()))), Assign(targets=[Name(id='headers', ctx=Store())], value=IfExp(test=Compare(left=Name(id='headers', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='headers', ctx=Load()))), Assign(targets=[Name(id='params', ctx=Store())], value=IfExp(test=Compare(left=Name(id='params', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='params', ctx=Load()))), Assign(targets=[Name(id='hooks', ctx=Store())], value=IfExp(test=Compare(left=Name(id='hooks', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='hooks', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Store())], value=Call(func=Name(id='default_hooks', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='hooks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_hook', ctx=Load()), args=[], keywords=[keyword(arg='event', value=Name(id='k', ctx=Load())), keyword(arg='hook', value=Name(id='v', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Store())], value=Name(id='method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Name(id='headers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Store())], value=Name(id='files', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='json', ctx=Store())], value=Name(id='json', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='params', ctx=Store())], value=Name(id='params', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Store())], value=Name(id='auth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Store())], value=Name(id='cookies', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Request ['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load()), conversion=-1), Constant(value=']>')]))], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.')), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='PreparedRequest', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='prepare', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load())), keyword(arg='url', value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())), keyword(arg='headers', value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())), keyword(arg='files', value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())), keyword(arg='data', value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())), keyword(arg='json', value=Attribute(value=Name(id='self', ctx=Load()), attr='json', ctx=Load())), keyword(arg='params', value=Attribute(value=Name(id='self', ctx=Load()), attr='params', ctx=Load())), keyword(arg='auth', value=Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Load())), keyword(arg='cookies', value=Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load())), keyword(arg='hooks', value=Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load()))])), Return(value=Name(id='p', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='PreparedRequest', bases=[Name(id='RequestEncodingMixin', ctx=Load()), Name(id='RequestHooksMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n    containing the exact bytes that will be sent to the server.\n\n    Instances are generated from a :class:`Request <Request>` object, and\n    should not be instantiated manually; doing so may produce undesirable\n    effects.\n\n    Usage::\n\n      >>> import requests\n      >>> req = requests.Request('GET', 'https://httpbin.org/get')\n      >>> r = req.prepare()\n      >>> r\n      <PreparedRequest [GET]>\n\n      >>> s = requests.Session()\n      >>> s.send(r)\n      <Response [200]>\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Store())], value=Call(func=Name(id='default_hooks', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body_position', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='prepare', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='headers'), arg(arg='files'), arg(arg='data'), arg(arg='params'), arg(arg='auth'), arg(arg='cookies'), arg(arg='hooks'), arg(arg='json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Prepares the entire request with the given parameters.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_method', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_url', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='params', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_headers', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_cookies', ctx=Load()), args=[Name(id='cookies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_body', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='files', ctx=Load()), Name(id='json', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_auth', ctx=Load()), args=[Name(id='auth', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_hooks', ctx=Load()), args=[Name(id='hooks', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<PreparedRequest ['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load()), conversion=-1), Constant(value=']>')]))], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='PreparedRequest', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='method', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='url', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='headers', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='_cookies', ctx=Store())], value=Call(func=Name(id='_copy_cookie_jar', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='body', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Load())), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='hooks', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='p', ctx=Load()), attr='_body_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_body_position', ctx=Load())), Return(value=Name(id='p', ctx=Load()))], decorator_list=[]), FunctionDef(name='prepare_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepares the given HTTP method.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Store())], value=Name(id='method', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Store())], value=Call(func=Name(id='to_native_string', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_idna_encoded_host', args=arguments(posonlyargs=[], args=[arg(arg='host')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='idna')]), Try(body=[Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='idna', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[keyword(arg='uts46', value=Constant(value=True))]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='idna', ctx=Load()), attr='IDNAError', ctx=Load()), body=[Raise(exc=Name(id='UnicodeError', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='host', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='prepare_url', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='params')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepares the given HTTP URL.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='url', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='http')], keywords=[]))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load())), Return()], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='auth', ctx=Store()), Name(id='host', ctx=Store()), Name(id='port', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='LocationParseError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='InvalidURL', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='scheme', ctx=Load())), body=[Raise(exc=Call(func=Name(id='MissingSchema', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid URL '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=114), Constant(value=': No scheme supplied. Perhaps you meant https://'), FormattedValue(value=Name(id='url', ctx=Load()), conversion=-1), Constant(value='?')])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='host', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InvalidURL', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid URL '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=114), Constant(value=': No host supplied')])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='unicode_is_ascii', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_idna_encoded_host', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InvalidURL', ctx=Load()), args=[Constant(value='URL has an invalid label.')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='*'), Constant(value='.')], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='InvalidURL', ctx=Load()), args=[Constant(value='URL has an invalid label.')], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='netloc', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='auth', ctx=Load()), Constant(value='')])), If(test=Name(id='netloc', ctx=Load()), body=[AugAssign(target=Name(id='netloc', ctx=Store()), op=Add(), value=Constant(value='@'))], orelse=[]), AugAssign(target=Name(id='netloc', ctx=Store()), op=Add(), value=Name(id='host', ctx=Load())), If(test=Name(id='port', ctx=Load()), body=[AugAssign(target=Name(id='netloc', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=':'), FormattedValue(value=Name(id='port', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='/'))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='params', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='params', ctx=Store())], value=Call(func=Name(id='to_native_string', ctx=Load()), args=[Name(id='params', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='enc_params', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_encode_params', ctx=Load()), args=[Name(id='params', ctx=Load())], keywords=[])), If(test=Name(id='enc_params', ctx=Load()), body=[If(test=Name(id='query', ctx=Load()), body=[Assign(targets=[Name(id='query', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='query', ctx=Load()), conversion=-1), Constant(value='&'), FormattedValue(value=Name(id='enc_params', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='query', ctx=Store())], value=Name(id='enc_params', ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='requote_uri', ctx=Load()), args=[Call(func=Name(id='urlunparse', ctx=Load()), args=[List(elts=[Name(id='scheme', ctx=Load()), Name(id='netloc', ctx=Load()), Name(id='path', ctx=Load()), Constant(value=None), Name(id='query', ctx=Load()), Name(id='fragment', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load()))], decorator_list=[]), FunctionDef(name='prepare_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepares the given HTTP headers.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[], keywords=[])), If(test=Name(id='headers', ctx=Load()), body=[For(target=Name(id='header', ctx=Store()), iter=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='check_header_validity', ctx=Load()), args=[Name(id='header', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Name(id='header', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Call(func=Name(id='to_native_string', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='prepare_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='files'), arg(arg='json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Prepares the given HTTP body data.')), Assign(targets=[Name(id='body', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='content_type', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), Compare(left=Name(id='json', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='content_type', ctx=Store())], value=Constant(value='application/json')), Try(body=[Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Name(id='complexjson', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[keyword(arg='allow_nan', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='ve', body=[Raise(exc=Call(func=Name(id='InvalidJSONError', ctx=Load()), args=[Name(id='ve', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='self', ctx=Load()))]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='is_stream', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[List(elts=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='__iter__')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Tuple(elts=[Name(id='basestring', ctx=Load()), Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load()), Name(id='Mapping', ctx=Load())], ctx=Load())], keywords=[]))], ctx=Load())], keywords=[])), If(test=Name(id='is_stream', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Name(id='super_len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='AttributeError', ctx=Load()), Name(id='UnsupportedOperation', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='body', ctx=Store())], value=Name(id='data', ctx=Load())), If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='body', ctx=Load()), Constant(value='tell'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body_position', ctx=Store())], value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body_position', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='files', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Streamed bodies and files are mutually exclusive.')], keywords=[]))], orelse=[]), If(test=Name(id='length', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Length'), ctx=Store())], value=Call(func=Name(id='builtin_str', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Transfer-Encoding'), ctx=Store())], value=Constant(value='chunked'))])], orelse=[If(test=Name(id='files', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='body', ctx=Store()), Name(id='content_type', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_encode_files', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='data', ctx=Load()), body=[Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_encode_params', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='read')], keywords=[])]), body=[Assign(targets=[Name(id='content_type', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='content_type', ctx=Store())], value=Constant(value='application/x-www-form-urlencoded'))])], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_content_length', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='content_type', ctx=Load()), Compare(left=Constant(value='content-type'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Type'), ctx=Store())], value=Name(id='content_type', ctx=Load()))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Store())], value=Name(id='body', ctx=Load()))], decorator_list=[]), FunctionDef(name='prepare_content_length', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare Content-Length header based on request method and body')), If(test=Compare(left=Name(id='body', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Name(id='super_len', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])), If(test=Name(id='length', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Length'), ctx=Store())], value=Call(func=Name(id='builtin_str', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='GET'), Constant(value='HEAD')], ctx=Load())]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Length')], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Length'), ctx=Store())], value=Constant(value='0'))], orelse=[])])], decorator_list=[]), FunctionDef(name='prepare_auth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='auth'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Prepares the given HTTP auth data.')), If(test=Compare(left=Name(id='auth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='url_auth', ctx=Store())], value=Call(func=Name(id='get_auth_from_url', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='auth', ctx=Store())], value=IfExp(test=Call(func=Name(id='any', ctx=Load()), args=[Name(id='url_auth', ctx=Load())], keywords=[]), body=Name(id='url_auth', ctx=Load()), orelse=Constant(value=None)))], orelse=[]), If(test=Name(id='auth', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='auth', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='auth', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Assign(targets=[Name(id='auth', ctx=Store())], value=Call(func=Name(id='HTTPBasicAuth', ctx=Load()), args=[Starred(value=Name(id='auth', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='auth', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_content_length', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='body', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='prepare_cookies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cookies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepares the given HTTP cookie data.\n\n        This function eventually generates a ``Cookie`` header from the\n        given cookies using cookielib. Due to cookielib\'s design, the header\n        will not be regenerated if it already exists, meaning this function\n        can only be called once for the life of the\n        :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls\n        to ``prepare_cookies`` will have no actual effect, unless the "Cookie"\n        header is removed beforehand.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cookies', ctx=Load()), Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies', ctx=Store())], value=Name(id='cookies', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies', ctx=Store())], value=Call(func=Name(id='cookiejar_from_dict', ctx=Load()), args=[Name(id='cookies', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='cookie_header', ctx=Store())], value=Call(func=Name(id='get_cookie_header', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cookie_header', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Cookie'), ctx=Store())], value=Name(id='cookie_header', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='prepare_hooks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hooks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepares the given hooks.')), Assign(targets=[Name(id='hooks', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='hooks', ctx=Load()), List(elts=[], ctx=Load())])), For(target=Name(id='event', ctx=Store()), iter=Name(id='hooks', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_hook', ctx=Load()), args=[Name(id='event', ctx=Load()), Subscript(value=Name(id='hooks', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='Response', bases=[], keywords=[], body=[Expr(value=Constant(value="The :class:`Response <Response>` object, which contains a\n    server's response to an HTTP request.\n    ")), Assign(targets=[Name(id='__attrs__', ctx=Store())], value=List(elts=[Constant(value='_content'), Constant(value='status_code'), Constant(value='headers'), Constant(value='url'), Constant(value='history'), Constant(value='encoding'), Constant(value='reason'), Constant(value='cookies'), Constant(value='elapsed'), Constant(value='request')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_next', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Store())], value=Call(func=Name(id='cookiejar_from_dict', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Load())), body=[Expr(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()))], orelse=[]), Return(value=DictComp(key=Name(id='attr', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=None)], keywords=[]), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs__', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_content_consumed'), Constant(value=True)], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='raw'), Constant(value=None)], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Response ['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), conversion=-1), Constant(value=']>')]))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True if :attr:`status_code` is less than 400.\n\n        This attribute checks if the status code of the response is between\n        400 and 600 to see if there was a client error or a server error. If\n        the status code, is between 200 and 400, this will return True. This\n        is **not** a check to see if the response code is ``200 OK``.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='__nonzero__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True if :attr:`status_code` is less than 400.\n\n        This attribute checks if the status code of the response is between\n        400 and 600 to see if there was a client error or a server error. If\n        the status code, is between 200 and 400, this will return True. This\n        is **not** a check to see if the response code is ``200 OK``.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='ok', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Allows you to use a response as an iterator.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_content', ctx=Load()), args=[Constant(value=128)], keywords=[]))], decorator_list=[]), FunctionDef(name='ok', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True if :attr:`status_code` is less than 400, False if not.\n\n        This attribute checks if the status code of the response is between\n        400 and 600 to see if there was a client error or a server error. If\n        the status code is between 200 and 400, this will return True. This\n        is **not** a check to see if the response code is ``200 OK``.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='HTTPError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='is_redirect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if this Response is a well-formed HTTP redirect that could have\n        been processed automatically (by :meth:`Session.resolve_redirects`).\n        ')), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='location'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), ops=[In()], comparators=[Name(id='REDIRECT_STATI', ctx=Load())])]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='is_permanent_redirect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='True if this Response one of the permanent versions of redirect.')), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='location'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='codes', ctx=Load()), attr='moved_permanently', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='permanent_redirect', ctx=Load())], ctx=Load())])]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a PreparedRequest for the next request in a redirect chain, if there is one.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_next', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='apparent_encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The apparent encoding, provided by the charset_normalizer or chardet libraries.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='chardet', ctx=Load()), attr='detect', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], keywords=[]), slice=Constant(value='encoding'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='iter_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chunk_size'), arg(arg='decode_unicode')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=False)]), body=[Expr(value=Constant(value='Iterates over the response data.  When stream=True is set on the\n        request, this avoids reading the content at once into memory for\n        large responses.  The chunk size is the number of bytes it should\n        read into memory.  This is not necessarily the length of each item\n        returned as decoding can take place.\n\n        chunk_size must be of type int or None. A value of None will\n        function differently depending on the value of `stream`.\n        stream=True will read data as it arrives in whatever size the\n        chunks are received. If stream=False, data is returned as\n        a single chunk.\n\n        If decode_unicode is True, content will be decoded using the best\n        available encoding based on the response.\n        ')), FunctionDef(name='generate', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), Constant(value='stream')], keywords=[]), body=[Try(body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='stream', ctx=Load()), args=[Name(id='chunk_size', ctx=Load())], keywords=[keyword(arg='decode_content', value=Constant(value=True))])))], handlers=[ExceptHandler(type=Name(id='ProtocolError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ChunkedEncodingError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='DecodeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ContentDecodingError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ReadTimeoutError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ConnectionError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='SSLError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RequestsSSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='chunk_size', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='chunk', ctx=Load())), body=[Break()], orelse=[]), Expr(value=Yield(value=Name(id='chunk', ctx=Load())))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Store())], value=Constant(value=True))], decorator_list=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='StreamConsumedError', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='chunk_size', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='chunk_size', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='chunk_size must be an int, it is instead a '), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='chunk_size', ctx=Load())], keywords=[]), conversion=-1), Constant(value='.')])], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='reused_chunks', ctx=Store())], value=Call(func=Name(id='iter_slices', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Load()), Name(id='chunk_size', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stream_chunks', ctx=Store())], value=Call(func=Name(id='generate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='chunks', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Load()), body=Name(id='reused_chunks', ctx=Load()), orelse=Name(id='stream_chunks', ctx=Load()))), If(test=Name(id='decode_unicode', ctx=Load()), body=[Assign(targets=[Name(id='chunks', ctx=Store())], value=Call(func=Name(id='stream_decode_response_unicode', ctx=Load()), args=[Name(id='chunks', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='chunks', ctx=Load()))], decorator_list=[]), FunctionDef(name='iter_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chunk_size'), arg(arg='decode_unicode'), arg(arg='delimiter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='ITER_CHUNK_SIZE', ctx=Load()), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Iterates over the response data, one line at a time.  When\n        stream=True is set on the request, this avoids reading the\n        content at once into memory for large responses.\n\n        .. note:: This method is not reentrant safe.\n        ')), Assign(targets=[Name(id='pending', ctx=Store())], value=Constant(value=None)), For(target=Name(id='chunk', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_content', ctx=Load()), args=[], keywords=[keyword(arg='chunk_size', value=Name(id='chunk_size', ctx=Load())), keyword(arg='decode_unicode', value=Name(id='decode_unicode', ctx=Load()))]), body=[If(test=Compare(left=Name(id='pending', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=BinOp(left=Name(id='pending', ctx=Load()), op=Add(), right=Name(id='chunk', ctx=Load())))], orelse=[]), If(test=Name(id='delimiter', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='chunk', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='delimiter', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='chunk', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]))]), If(test=BoolOp(op=And(), values=[Name(id='lines', ctx=Load()), Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Name(id='chunk', ctx=Load()), Compare(left=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='chunk', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])]), body=[Assign(targets=[Name(id='pending', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='pending', ctx=Store())], value=Constant(value=None))]), Expr(value=YieldFrom(value=Name(id='lines', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='pending', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Name(id='pending', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='content', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Content of the response, in bytes.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='The content for this response was already consumed')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_content', ctx=Load()), args=[Name(id='CONTENT_CHUNK_SIZE', ctx=Load())], keywords=[])], keywords=[]), Constant(value=b'')]))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Store())], value=Constant(value=True)), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_content', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        ')), Assign(targets=[Name(id='content', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='encoding', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='apparent_encoding', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), Name(id='encoding', ctx=Load())], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='LookupError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))])], orelse=[], finalbody=[]), Return(value=Name(id='content', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Returns the json-encoded content of a response, if any.\n\n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        ')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=3)])]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Name(id='guess_json_utf', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='complexjson', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[])], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='JSONDecodeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RequestsJSONDecodeError', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='complexjson', ctx=Load()), attr='loads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='JSONDecodeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RequestsJSONDecodeError', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the parsed header links of the response, if any.')), Assign(targets=[Name(id='header', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='link')], keywords=[])), Assign(targets=[Name(id='resolved_links', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='header', ctx=Load()), body=[Assign(targets=[Name(id='links', ctx=Store())], value=Call(func=Name(id='parse_header_links', ctx=Load()), args=[Name(id='header', ctx=Load())], keywords=[])), For(target=Name(id='link', ctx=Store()), iter=Name(id='links', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='rel')], keywords=[]), Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='url')], keywords=[])])), Assign(targets=[Subscript(value=Name(id='resolved_links', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='link', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='resolved_links', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='raise_for_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raises :class:`HTTPError`, if one occurred.')), Assign(targets=[Name(id='http_error_msg', ctx=Store())], value=Constant(value='')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='iso-8859-1')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='reason', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Load()))]), If(test=Compare(left=Constant(value=400), ops=[LtE(), Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), Constant(value=500)]), body=[Assign(targets=[Name(id='http_error_msg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), conversion=-1), Constant(value=' Client Error: '), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1), Constant(value=' for url: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), conversion=-1)]))], orelse=[If(test=Compare(left=Constant(value=500), ops=[LtE(), Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), Constant(value=600)]), body=[Assign(targets=[Name(id='http_error_msg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='status_code', ctx=Load()), conversion=-1), Constant(value=' Server Error: '), FormattedValue(value=Name(id='reason', ctx=Load()), conversion=-1), Constant(value=' for url: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), conversion=-1)]))], orelse=[])]), If(test=Name(id='http_error_msg', ctx=Load()), body=[Raise(exc=Call(func=Name(id='HTTPError', ctx=Load()), args=[Name(id='http_error_msg', ctx=Load())], keywords=[keyword(arg='response', value=Name(id='self', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Releases the connection back to the pool. Once this method has been\n        called the underlying ``raw`` object must not be accessed again.\n\n        *Note: Should not normally need to be called explicitly.*\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_content_consumed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='release_conn', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load()), Constant(value='release_conn'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='release_conn', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='release_conn', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])