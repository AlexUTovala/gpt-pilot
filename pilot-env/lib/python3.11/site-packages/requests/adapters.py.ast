Module(body=[Expr(value=Constant(value='\nrequests.adapters\n~~~~~~~~~~~~~~~~~\n\nThis module contains the transport adapters that Requests uses to define\nand maintain connections.\n')), Import(names=[alias(name='os.path')]), Import(names=[alias(name='socket')]), ImportFrom(module='urllib3.exceptions', names=[alias(name='ClosedPoolError'), alias(name='ConnectTimeoutError')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='HTTPError', asname='_HTTPError')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='InvalidHeader', asname='_InvalidHeader')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='LocationValueError'), alias(name='MaxRetryError'), alias(name='NewConnectionError'), alias(name='ProtocolError')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='ProxyError', asname='_ProxyError')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='ReadTimeoutError'), alias(name='ResponseError')], level=0), ImportFrom(module='urllib3.exceptions', names=[alias(name='SSLError', asname='_SSLError')], level=0), ImportFrom(module='urllib3.poolmanager', names=[alias(name='PoolManager'), alias(name='proxy_from_url')], level=0), ImportFrom(module='urllib3.util', names=[alias(name='Timeout', asname='TimeoutSauce')], level=0), ImportFrom(module='urllib3.util', names=[alias(name='parse_url')], level=0), ImportFrom(module='urllib3.util.retry', names=[alias(name='Retry')], level=0), ImportFrom(module='auth', names=[alias(name='_basic_auth_str')], level=1), ImportFrom(module='compat', names=[alias(name='basestring'), alias(name='urlparse')], level=1), ImportFrom(module='cookies', names=[alias(name='extract_cookies_to_jar')], level=1), ImportFrom(module='exceptions', names=[alias(name='ConnectionError'), alias(name='ConnectTimeout'), alias(name='InvalidHeader'), alias(name='InvalidProxyURL'), alias(name='InvalidSchema'), alias(name='InvalidURL'), alias(name='ProxyError'), alias(name='ReadTimeout'), alias(name='RetryError'), alias(name='SSLError')], level=1), ImportFrom(module='models', names=[alias(name='Response')], level=1), ImportFrom(module='structures', names=[alias(name='CaseInsensitiveDict')], level=1), ImportFrom(module='utils', names=[alias(name='DEFAULT_CA_BUNDLE_PATH'), alias(name='extract_zipped_paths'), alias(name='get_auth_from_url'), alias(name='get_encoding_from_headers'), alias(name='prepend_scheme_if_needed'), alias(name='select_proxy'), alias(name='urldefragauth')], level=1), Try(body=[ImportFrom(module='urllib3.contrib.socks', names=[alias(name='SOCKSProxyManager')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='SOCKSProxyManager', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Raise(exc=Call(func=Name(id='InvalidSchema', ctx=Load()), args=[Constant(value='Missing dependencies for SOCKS support.')], keywords=[]))], decorator_list=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='DEFAULT_POOLBLOCK', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='DEFAULT_POOLSIZE', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='DEFAULT_RETRIES', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='DEFAULT_POOL_TIMEOUT', ctx=Store())], value=Constant(value=None)), ClassDef(name='BaseAdapter', bases=[], keywords=[], body=[Expr(value=Constant(value='The Base Transport Adapter')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request'), arg(arg='stream'), arg(arg='timeout'), arg(arg='verify'), arg(arg='cert'), arg(arg='proxies')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Sends PreparedRequest object. Returns Response object.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        ")), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cleans up adapter specific items.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPAdapter', bases=[Name(id='BaseAdapter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="The built-in HTTP Adapter for urllib3.\n\n    Provides a general-case interface for Requests sessions to contact HTTP and\n    HTTPS urls by implementing the Transport Adapter interface. This class will\n    usually be created by the :class:`Session <Session>` class under the\n    covers.\n\n    :param pool_connections: The number of urllib3 connection pools to cache.\n    :param pool_maxsize: The maximum number of connections to save in the pool.\n    :param max_retries: The maximum number of retries each connection\n        should attempt. Note, this applies only to failed DNS lookups, socket\n        connections and connection timeouts, never to requests where data has\n        made it to the server. By default, Requests does not retry failed\n        connections. If you need granular control over the conditions under\n        which we retry a request, import urllib3's ``Retry`` class and pass\n        that instead.\n    :param pool_block: Whether the connection pool should block for connections.\n\n    Usage::\n\n      >>> import requests\n      >>> s = requests.Session()\n      >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n      >>> s.mount('http://', a)\n    ")), Assign(targets=[Name(id='__attrs__', ctx=Store())], value=List(elts=[Constant(value='max_retries'), Constant(value='config'), Constant(value='_pool_connections'), Constant(value='_pool_maxsize'), Constant(value='_pool_block')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pool_connections'), arg(arg='pool_maxsize'), arg(arg='max_retries'), arg(arg='pool_block')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_POOLSIZE', ctx=Load()), Name(id='DEFAULT_POOLSIZE', ctx=Load()), Name(id='DEFAULT_RETRIES', ctx=Load()), Name(id='DEFAULT_POOLBLOCK', ctx=Load())]), body=[If(test=Compare(left=Name(id='max_retries', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEFAULT_RETRIES', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_retries', ctx=Store())], value=Call(func=Name(id='Retry', ctx=Load()), args=[Constant(value=0)], keywords=[keyword(arg='read', value=Constant(value=False))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='Retry', ctx=Load()), attr='from_int', ctx=Load()), args=[Name(id='max_retries', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_connections', ctx=Store())], value=Name(id='pool_connections', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_maxsize', ctx=Store())], value=Name(id='pool_maxsize', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_block', ctx=Store())], value=Name(id='pool_block', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='init_poolmanager', ctx=Load()), args=[Name(id='pool_connections', ctx=Load()), Name(id='pool_maxsize', ctx=Load())], keywords=[keyword(arg='block', value=Name(id='pool_block', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='attr', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=None)], keywords=[]), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs__', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='attr', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='init_poolmanager', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_connections', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_pool_maxsize', ctx=Load())], keywords=[keyword(arg='block', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_block', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='init_poolmanager', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='connections'), arg(arg='maxsize'), arg(arg='block')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='pool_kwargs'), defaults=[Name(id='DEFAULT_POOLBLOCK', ctx=Load())]), body=[Expr(value=Constant(value='Initializes a urllib3 PoolManager.\n\n        This method should not be called from user code, and is only\n        exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param connections: The number of urllib3 connection pools to cache.\n        :param maxsize: The maximum number of connections to save in the pool.\n        :param block: Block when no free connections are available.\n        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_connections', ctx=Store())], value=Name(id='connections', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_maxsize', ctx=Store())], value=Name(id='maxsize', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool_block', ctx=Store())], value=Name(id='block', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='poolmanager', ctx=Store())], value=Call(func=Name(id='PoolManager', ctx=Load()), args=[], keywords=[keyword(arg='num_pools', value=Name(id='connections', ctx=Load())), keyword(arg='maxsize', value=Name(id='maxsize', ctx=Load())), keyword(arg='block', value=Name(id='block', ctx=Load())), keyword(value=Name(id='pool_kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='proxy_manager_for', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proxy')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='proxy_kwargs'), defaults=[]), body=[Expr(value=Constant(value='Return urllib3 ProxyManager for the given proxy.\n\n        This method should not be called from user code, and is only\n        exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param proxy: The proxy to return a urllib3 ProxyManager for.\n        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n        :returns: ProxyManager\n        :rtype: urllib3.ProxyManager\n        ')), If(test=Compare(left=Name(id='proxy', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Load())]), body=[Assign(targets=[Name(id='manager', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Load()), slice=Name(id='proxy', ctx=Load()), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='proxy', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='socks')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_auth_from_url', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[])), Assign(targets=[Name(id='manager', ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Load()), slice=Name(id='proxy', ctx=Load()), ctx=Store())], value=Call(func=Name(id='SOCKSProxyManager', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[keyword(arg='username', value=Name(id='username', ctx=Load())), keyword(arg='password', value=Name(id='password', ctx=Load())), keyword(arg='num_pools', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_connections', ctx=Load())), keyword(arg='maxsize', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_maxsize', ctx=Load())), keyword(arg='block', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_block', ctx=Load())), keyword(value=Name(id='proxy_kwargs', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='proxy_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_headers', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[])), Assign(targets=[Name(id='manager', ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Load()), slice=Name(id='proxy', ctx=Load()), ctx=Store())], value=Call(func=Name(id='proxy_from_url', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[keyword(arg='proxy_headers', value=Name(id='proxy_headers', ctx=Load())), keyword(arg='num_pools', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_connections', ctx=Load())), keyword(arg='maxsize', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_maxsize', ctx=Load())), keyword(arg='block', value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool_block', ctx=Load())), keyword(value=Name(id='proxy_kwargs', ctx=Load()))]))])]), Return(value=Name(id='manager', ctx=Load()))], decorator_list=[]), FunctionDef(name='cert_verify', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn'), arg(arg='url'), arg(arg='verify'), arg(arg='cert')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Verify a SSL certificate. This method should not be called from user\n        code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param conn: The urllib3 connection object associated with the cert.\n        :param url: The requested URL.\n        :param verify: Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use\n        :param cert: The SSL certificate to verify.\n        ")), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='https')], keywords=[]), Name(id='verify', ctx=Load())]), body=[Assign(targets=[Name(id='cert_loc', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='verify', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='cert_loc', ctx=Store())], value=Name(id='verify', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='cert_loc', ctx=Load())), body=[Assign(targets=[Name(id='cert_loc', ctx=Store())], value=Call(func=Name(id='extract_zipped_paths', ctx=Load()), args=[Name(id='DEFAULT_CA_BUNDLE_PATH', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='cert_loc', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='cert_loc', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not find a suitable TLS CA certificate bundle, invalid path: '), FormattedValue(value=Name(id='cert_loc', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_reqs', ctx=Store())], value=Constant(value='CERT_REQUIRED')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='cert_loc', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='ca_certs', ctx=Store())], value=Name(id='cert_loc', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='ca_cert_dir', ctx=Store())], value=Name(id='cert_loc', ctx=Load()))])], orelse=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_reqs', ctx=Store())], value=Constant(value='CERT_NONE')), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='ca_certs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='ca_cert_dir', ctx=Store())], value=Constant(value=None))]), If(test=Name(id='cert', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cert', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_file', ctx=Store())], value=Subscript(value=Name(id='cert', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='key_file', ctx=Store())], value=Subscript(value=Name(id='cert', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_file', ctx=Store())], value=Name(id='cert', ctx=Load())), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='key_file', ctx=Store())], value=Constant(value=None))]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_file', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='cert_file', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not find the TLS certificate file, invalid path: '), FormattedValue(value=Attribute(value=Name(id='conn', ctx=Load()), attr='cert_file', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='conn', ctx=Load()), attr='key_file', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='key_file', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not find the TLS key file, invalid path: '), FormattedValue(value=Attribute(value=Name(id='conn', ctx=Load()), attr='key_file', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='build_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req'), arg(arg='resp')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Builds a :class:`Response <requests.Response>` object from a urllib3\n        response. This should not be called from user code, and is only exposed\n        for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n        :param resp: The urllib3 response object.\n        :rtype: requests.Response\n        ')), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='Response', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='resp', ctx=Load()), Constant(value='status'), Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='resp', ctx=Load()), Constant(value='headers'), Dict(keys=[], values=[])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='encoding', ctx=Store())], value=Call(func=Name(id='get_encoding_from_headers', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='raw', ctx=Store())], value=Name(id='resp', ctx=Load())), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='reason', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='raw', ctx=Load()), attr='reason', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='url', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()))]), Expr(value=Call(func=Name(id='extract_cookies_to_jar', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='cookies', ctx=Load()), Name(id='req', ctx=Load()), Name(id='resp', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='request', ctx=Store())], value=Name(id='req', ctx=Load())), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='connection', ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_connection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='proxies')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Returns a urllib3 connection for the given URL. This should not be\n        called from user code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param url: The URL to connect to.\n        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n        :rtype: urllib3.ConnectionPool\n        ')), Assign(targets=[Name(id='proxy', ctx=Store())], value=Call(func=Name(id='select_proxy', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='proxies', ctx=Load())], keywords=[])), If(test=Name(id='proxy', ctx=Load()), body=[Assign(targets=[Name(id='proxy', ctx=Store())], value=Call(func=Name(id='prepend_scheme_if_needed', ctx=Load()), args=[Name(id='proxy', ctx=Load()), Constant(value='http')], keywords=[])), Assign(targets=[Name(id='proxy_url', ctx=Store())], value=Call(func=Name(id='parse_url', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='proxy_url', ctx=Load()), attr='host', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InvalidProxyURL', ctx=Load()), args=[Constant(value='Please check proxy URL. It is malformed and could be missing the host.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='proxy_manager', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager_for', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[])), Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='proxy_manager', ctx=Load()), attr='connection_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='geturl', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='poolmanager', ctx=Load()), attr='connection_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Disposes of any internal state.\n\n        Currently, this closes the PoolManager and any active ProxyManager,\n        which closes any pooled connections.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='poolmanager', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), For(target=Name(id='proxy', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_manager', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='proxy', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='request_url', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request'), arg(arg='proxies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Obtain the url to use when making the final request.\n\n        If the message is being sent through a HTTP proxy, the full URL has to\n        be used. Otherwise, we should only use the path portion of the URL.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n        :rtype: str\n        ')), Assign(targets=[Name(id='proxy', ctx=Store())], value=Call(func=Name(id='select_proxy', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), Name(id='proxies', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scheme', ctx=Store())], value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[]), attr='scheme', ctx=Load())), Assign(targets=[Name(id='is_proxied_http_request', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='proxy', ctx=Load()), Compare(left=Name(id='scheme', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='https')])])), Assign(targets=[Name(id='using_socks_proxy', ctx=Store())], value=Constant(value=False)), If(test=Name(id='proxy', ctx=Load()), body=[Assign(targets=[Name(id='proxy_scheme', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[]), attr='scheme', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='using_socks_proxy', ctx=Store())], value=Call(func=Attribute(value=Name(id='proxy_scheme', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='socks')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='url', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='path_url', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='is_proxied_http_request', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='using_socks_proxy', ctx=Load()))]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urldefragauth', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='url', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Add any headers needed by the connection. As of v2.0 this does\n        nothing by default, but is left for overriding by users that subclass\n        the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n        :param kwargs: The keyword arguments from the call to send().\n        ')), Pass()], decorator_list=[]), FunctionDef(name='proxy_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proxy')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a dictionary of the headers to add to any request sent\n        through a proxy. This works with urllib3 magic to ensure that they are\n        correctly sent to the proxy, rather than in a tunnelled request if\n        CONNECT is being used.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param proxy: The url of the proxy being used for this request.\n        :rtype: dict\n        ')), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Tuple(elts=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_auth_from_url', ctx=Load()), args=[Name(id='proxy', ctx=Load())], keywords=[])), If(test=Name(id='username', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Proxy-Authorization'), ctx=Store())], value=Call(func=Name(id='_basic_auth_str', ctx=Load()), args=[Name(id='username', ctx=Load()), Name(id='password', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request'), arg(arg='stream'), arg(arg='timeout'), arg(arg='verify'), arg(arg='cert'), arg(arg='proxies')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Sends PreparedRequest object. Returns Response object.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        ")), Try(body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_connection', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), Name(id='proxies', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='LocationValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='InvalidURL', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cert_verify', ctx=Load()), args=[Name(id='conn', ctx=Load()), Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), Name(id='verify', ctx=Load()), Name(id='cert', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request_url', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='proxies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_headers', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(arg='verify', value=Name(id='verify', ctx=Load())), keyword(arg='cert', value=Name(id='cert', ctx=Load())), keyword(arg='proxies', value=Name(id='proxies', ctx=Load()))])), Assign(targets=[Name(id='chunked', ctx=Store())], value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='body', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Constant(value='Content-Length'), ops=[In()], comparators=[Attribute(value=Name(id='request', ctx=Load()), attr='headers', ctx=Load())])]))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='timeout', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='connect', ctx=Store()), Name(id='read', ctx=Store())], ctx=Store())], value=Name(id='timeout', ctx=Load())), Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Name(id='TimeoutSauce', ctx=Load()), args=[], keywords=[keyword(arg='connect', value=Name(id='connect', ctx=Load())), keyword(arg='read', value=Name(id='read', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid timeout '), FormattedValue(value=Name(id='timeout', ctx=Load()), conversion=-1), Constant(value='. Pass a (connect, read) timeout tuple, or a single float to set both timeouts to the same value.')])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='timeout', ctx=Load()), Name(id='TimeoutSauce', ctx=Load())], keywords=[]), body=[Pass()], orelse=[Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Name(id='TimeoutSauce', ctx=Load()), args=[], keywords=[keyword(arg='connect', value=Name(id='timeout', ctx=Load())), keyword(arg='read', value=Name(id='timeout', ctx=Load()))]))])]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='urlopen', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Attribute(value=Name(id='request', ctx=Load()), attr='method', ctx=Load())), keyword(arg='url', value=Name(id='url', ctx=Load())), keyword(arg='body', value=Attribute(value=Name(id='request', ctx=Load()), attr='body', ctx=Load())), keyword(arg='headers', value=Attribute(value=Name(id='request', ctx=Load()), attr='headers', ctx=Load())), keyword(arg='redirect', value=Constant(value=False)), keyword(arg='assert_same_host', value=Constant(value=False)), keyword(arg='preload_content', value=Constant(value=False)), keyword(arg='decode_content', value=Constant(value=False)), keyword(arg='retries', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_retries', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(arg='chunked', value=Name(id='chunked', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ProtocolError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ConnectionError', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))]), ExceptHandler(type=Name(id='MaxRetryError', ctx=Load()), name='e', body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load()), Name(id='ConnectTimeoutError', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load()), Name(id='NewConnectionError', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ConnectTimeout', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load()), Name(id='ResponseError', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='RetryError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load()), Name(id='_ProxyError', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ProxyError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load()), Name(id='_SSLError', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[]), Raise(exc=Call(func=Name(id='ConnectionError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))]), ExceptHandler(type=Name(id='ClosedPoolError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ConnectionError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))]), ExceptHandler(type=Name(id='_ProxyError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ProxyError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Tuple(elts=[Name(id='_SSLError', ctx=Load()), Name(id='_HTTPError', ctx=Load())], ctx=Load()), name='e', body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='_SSLError', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='ReadTimeoutError', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ReadTimeout', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='_InvalidHeader', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='InvalidHeader', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[keyword(arg='request', value=Name(id='request', ctx=Load()))]))], orelse=[Raise()])])])])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_response', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='resp', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])