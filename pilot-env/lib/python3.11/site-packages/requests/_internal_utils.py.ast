Module(body=[Expr(value=Constant(value='\nrequests._internal_utils\n~~~~~~~~~~~~~~\n\nProvides utility functions that are consumed internally by Requests\nwhich depend on extremely few external helpers (such as compat)\n')), Import(names=[alias(name='re')]), ImportFrom(module='compat', names=[alias(name='builtin_str')], level=1), Assign(targets=[Name(id='_VALID_HEADER_NAME_RE_BYTE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'^[^:\\s][^:\\r\\n]*$')], keywords=[])), Assign(targets=[Name(id='_VALID_HEADER_NAME_RE_STR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[^:\\s][^:\\r\\n]*$')], keywords=[])), Assign(targets=[Name(id='_VALID_HEADER_VALUE_RE_BYTE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'^\\S[^\\r\\n]*$|^$')], keywords=[])), Assign(targets=[Name(id='_VALID_HEADER_VALUE_RE_STR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\S[^\\r\\n]*$|^$')], keywords=[])), Assign(targets=[Name(id='_HEADER_VALIDATORS_STR', ctx=Store())], value=Tuple(elts=[Name(id='_VALID_HEADER_NAME_RE_STR', ctx=Load()), Name(id='_VALID_HEADER_VALUE_RE_STR', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_HEADER_VALIDATORS_BYTE', ctx=Store())], value=Tuple(elts=[Name(id='_VALID_HEADER_NAME_RE_BYTE', ctx=Load()), Name(id='_VALID_HEADER_VALUE_RE_BYTE', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='HEADER_VALIDATORS', ctx=Store())], value=Dict(keys=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], values=[Name(id='_HEADER_VALIDATORS_BYTE', ctx=Load()), Name(id='_HEADER_VALIDATORS_STR', ctx=Load())])), FunctionDef(name='to_native_string', args=arguments(posonlyargs=[], args=[arg(arg='string'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='ascii')]), body=[Expr(value=Constant(value='Given a string object, regardless of type, returns a representation of\n    that string in the native string type, encoding and decoding where\n    necessary. This assumes ASCII unless told otherwise.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='string', ctx=Load()), Name(id='builtin_str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Name(id='string', ctx=Load()))], orelse=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))]), Return(value=Name(id='out', ctx=Load()))], decorator_list=[]), FunctionDef(name='unicode_is_ascii', args=arguments(posonlyargs=[], args=[arg(arg='u_string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine if unicode string only contains ASCII characters.\n\n    :param str u_string: unicode string to check. Must be unicode\n        and not Python 2 `str`.\n    :rtype: bool\n    ')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='u_string', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='u_string', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])