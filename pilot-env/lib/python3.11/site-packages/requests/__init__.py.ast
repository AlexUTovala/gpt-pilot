Module(body=[Expr(value=Constant(value='\nRequests HTTP Library\n~~~~~~~~~~~~~~~~~~~~~\n\nRequests is an HTTP library, written in Python, for human beings.\nBasic GET usage:\n\n   >>> import requests\n   >>> r = requests.get(\'https://www.python.org\')\n   >>> r.status_code\n   200\n   >>> b\'Python is a programming language\' in r.content\n   True\n\n... or POST:\n\n   >>> payload = dict(key1=\'value1\', key2=\'value2\')\n   >>> r = requests.post(\'https://httpbin.org/post\', data=payload)\n   >>> print(r.text)\n   {\n     ...\n     "form": {\n       "key1": "value1",\n       "key2": "value2"\n     },\n     ...\n   }\n\nThe other HTTP methods are supported - see `requests.api`. Full documentation\nis at <https://requests.readthedocs.io>.\n\n:copyright: (c) 2017 by Kenneth Reitz.\n:license: Apache 2.0, see LICENSE for more details.\n')), Import(names=[alias(name='warnings')]), Import(names=[alias(name='urllib3')]), ImportFrom(module='exceptions', names=[alias(name='RequestsDependencyWarning')], level=1), Try(body=[ImportFrom(module='charset_normalizer', names=[alias(name='__version__', asname='charset_normalizer_version')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='charset_normalizer_version', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='chardet', names=[alias(name='__version__', asname='chardet_version')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='chardet_version', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), FunctionDef(name='check_compatibility', args=arguments(posonlyargs=[], args=[arg(arg='urllib3_version'), arg(arg='chardet_version'), arg(arg='charset_normalizer_version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='urllib3_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='urllib3_version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assert(test=Compare(left=Name(id='urllib3_version', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[Constant(value='dev')], ctx=Load())])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='urllib3_version', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='urllib3_version', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='0')], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Name(id='urllib3_version', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='major', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minor', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], ctx=Load())), Assert(test=Compare(left=Name(id='major', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), If(test=Compare(left=Name(id='major', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assert(test=Compare(left=Name(id='minor', ctx=Load()), ops=[GtE()], comparators=[Constant(value=21)]))], orelse=[]), If(test=Name(id='chardet_version', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='chardet_version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=3)), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='major', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minor', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], ctx=Load())), Assert(test=Compare(left=Tuple(elts=[Constant(value=3), Constant(value=0), Constant(value=2)], ctx=Load()), ops=[LtE(), Lt()], comparators=[Tuple(elts=[Name(id='major', ctx=Load()), Name(id='minor', ctx=Load()), Name(id='patch', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=6), Constant(value=0), Constant(value=0)], ctx=Load())]))], orelse=[If(test=Name(id='charset_normalizer_version', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='charset_normalizer_version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=3)), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='major', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minor', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='patch', ctx=Load())], keywords=[])], ctx=Load())), Assert(test=Compare(left=Tuple(elts=[Constant(value=2), Constant(value=0), Constant(value=0)], ctx=Load()), ops=[LtE(), Lt()], comparators=[Tuple(elts=[Name(id='major', ctx=Load()), Name(id='minor', ctx=Load()), Name(id='patch', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value=0), Constant(value=0)], ctx=Load())]))], orelse=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='You need either charset_normalizer or chardet installed')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='_check_cryptography', args=arguments(posonlyargs=[], args=[arg(arg='cryptography_version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='cryptography_version', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='cryptography_version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='cryptography_version', ctx=Load()), ops=[Lt()], comparators=[List(elts=[Constant(value=1), Constant(value=3), Constant(value=4)], ctx=Load())]), body=[Assign(targets=[Name(id='warning', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Old version of cryptography ({}) may cause slowdown.'), attr='format', ctx=Load()), args=[Name(id='cryptography_version', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='warning', ctx=Load()), Name(id='RequestsDependencyWarning', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), Try(body=[Expr(value=Call(func=Name(id='check_compatibility', ctx=Load()), args=[Attribute(value=Name(id='urllib3', ctx=Load()), attr='__version__', ctx=Load()), Name(id='chardet_version', ctx=Load()), Name(id='charset_normalizer_version', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AssertionError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported version!"), attr='format', ctx=Load()), args=[Attribute(value=Name(id='urllib3', ctx=Load()), attr='__version__', ctx=Load()), Name(id='chardet_version', ctx=Load()), Name(id='charset_normalizer_version', ctx=Load())], keywords=[]), Name(id='RequestsDependencyWarning', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Try(body=[Import(names=[alias(name='ssl')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ssl', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='HAS_SNI'), Constant(value=False)], keywords=[])), body=[ImportFrom(module='urllib3.contrib', names=[alias(name='pyopenssl')], level=0), Expr(value=Call(func=Attribute(value=Name(id='pyopenssl', ctx=Load()), attr='inject_into_urllib3', ctx=Load()), args=[], keywords=[])), ImportFrom(module='cryptography', names=[alias(name='__version__', asname='cryptography_version')], level=0), Expr(value=Call(func=Name(id='_check_cryptography', ctx=Load()), args=[Name(id='cryptography_version', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), ImportFrom(module='urllib3.exceptions', names=[alias(name='DependencyWarning')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore'), Name(id='DependencyWarning', ctx=Load())], keywords=[])), Import(names=[alias(name='logging')]), ImportFrom(module='logging', names=[alias(name='NullHandler')], level=0), ImportFrom(names=[alias(name='packages'), alias(name='utils')], level=1), ImportFrom(module='__version__', names=[alias(name='__author__'), alias(name='__author_email__'), alias(name='__build__'), alias(name='__cake__'), alias(name='__copyright__'), alias(name='__description__'), alias(name='__license__'), alias(name='__title__'), alias(name='__url__'), alias(name='__version__')], level=1), ImportFrom(module='api', names=[alias(name='delete'), alias(name='get'), alias(name='head'), alias(name='options'), alias(name='patch'), alias(name='post'), alias(name='put'), alias(name='request')], level=1), ImportFrom(module='exceptions', names=[alias(name='ConnectionError'), alias(name='ConnectTimeout'), alias(name='FileModeWarning'), alias(name='HTTPError'), alias(name='JSONDecodeError'), alias(name='ReadTimeout'), alias(name='RequestException'), alias(name='Timeout'), alias(name='TooManyRedirects'), alias(name='URLRequired')], level=1), ImportFrom(module='models', names=[alias(name='PreparedRequest'), alias(name='Request'), alias(name='Response')], level=1), ImportFrom(module='sessions', names=[alias(name='Session'), alias(name='session')], level=1), ImportFrom(module='status_codes', names=[alias(name='codes')], level=1), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]), attr='addHandler', ctx=Load()), args=[Call(func=Name(id='NullHandler', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default'), Name(id='FileModeWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))]))], type_ignores=[])