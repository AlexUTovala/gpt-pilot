Module(body=[Expr(value=Constant(value='\nrequests.sessions\n~~~~~~~~~~~~~~~~~\n\nThis module provides a Session object to manage and persist settings across\nrequests (cookies, auth, proxies).\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='datetime', names=[alias(name='timedelta')], level=0), ImportFrom(module='_internal_utils', names=[alias(name='to_native_string')], level=1), ImportFrom(module='adapters', names=[alias(name='HTTPAdapter')], level=1), ImportFrom(module='auth', names=[alias(name='_basic_auth_str')], level=1), ImportFrom(module='compat', names=[alias(name='Mapping'), alias(name='cookielib'), alias(name='urljoin'), alias(name='urlparse')], level=1), ImportFrom(module='cookies', names=[alias(name='RequestsCookieJar'), alias(name='cookiejar_from_dict'), alias(name='extract_cookies_to_jar'), alias(name='merge_cookies')], level=1), ImportFrom(module='exceptions', names=[alias(name='ChunkedEncodingError'), alias(name='ContentDecodingError'), alias(name='InvalidSchema'), alias(name='TooManyRedirects')], level=1), ImportFrom(module='hooks', names=[alias(name='default_hooks'), alias(name='dispatch_hook')], level=1), ImportFrom(module='models', names=[alias(name='DEFAULT_REDIRECT_LIMIT'), alias(name='REDIRECT_STATI'), alias(name='PreparedRequest'), alias(name='Request')], level=1), ImportFrom(module='status_codes', names=[alias(name='codes')], level=1), ImportFrom(module='structures', names=[alias(name='CaseInsensitiveDict')], level=1), ImportFrom(module='utils', names=[alias(name='DEFAULT_PORTS'), alias(name='default_headers'), alias(name='get_auth_from_url'), alias(name='get_environ_proxies'), alias(name='get_netrc_auth'), alias(name='requote_uri'), alias(name='resolve_proxies'), alias(name='rewind_body'), alias(name='should_bypass_proxies'), alias(name='to_key_val_list')], level=1), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Assign(targets=[Name(id='preferred_clock', ctx=Store())], value=Attribute(value=Name(id='time', ctx=Load()), attr='perf_counter', ctx=Load()))], orelse=[Assign(targets=[Name(id='preferred_clock', ctx=Store())], value=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()))]), FunctionDef(name='merge_setting', args=arguments(posonlyargs=[], args=[arg(arg='request_setting'), arg(arg='session_setting'), arg(arg='dict_class')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='OrderedDict', ctx=Load())]), body=[Expr(value=Constant(value='Determines appropriate setting for a given request, taking into account\n    the explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    ')), If(test=Compare(left=Name(id='session_setting', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='request_setting', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='request_setting', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='session_setting', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='session_setting', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='request_setting', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])])), body=[Return(value=Name(id='request_setting', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='merged_setting', ctx=Store())], value=Call(func=Name(id='dict_class', ctx=Load()), args=[Call(func=Name(id='to_key_val_list', ctx=Load()), args=[Name(id='session_setting', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='merged_setting', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='to_key_val_list', ctx=Load()), args=[Name(id='request_setting', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='none_keys', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='merged_setting', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])], is_async=0)])), For(target=Name(id='key', ctx=Store()), iter=Name(id='none_keys', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='merged_setting', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], orelse=[]), Return(value=Name(id='merged_setting', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_hooks', args=arguments(posonlyargs=[], args=[arg(arg='request_hooks'), arg(arg='session_hooks'), arg(arg='dict_class')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='OrderedDict', ctx=Load())]), body=[Expr(value=Constant(value="Properly merges both requests and session hooks.\n\n    This is necessary because when request_hooks == {'response': []}, the\n    merge breaks Session hooks entirely.\n    ")), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='session_hooks', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='session_hooks', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='response')], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())])]), body=[Return(value=Name(id='request_hooks', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='request_hooks', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='request_hooks', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='response')], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())])]), body=[Return(value=Name(id='session_hooks', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='request_hooks', ctx=Load()), Name(id='session_hooks', ctx=Load()), Name(id='dict_class', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='SessionRedirectMixin', bases=[], keywords=[], body=[FunctionDef(name='get_redirect_target', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resp')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Receives a Response. Returns a redirect URI or ``None``')), If(test=Attribute(value=Name(id='resp', ctx=Load()), attr='is_redirect', ctx=Load()), body=[Assign(targets=[Name(id='location', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='location'), ctx=Load())), Assign(targets=[Name(id='location', ctx=Store())], value=Call(func=Attribute(value=Name(id='location', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='latin1')], keywords=[])), Return(value=Call(func=Name(id='to_native_string', ctx=Load()), args=[Name(id='location', ctx=Load()), Constant(value='utf8')], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='should_strip_auth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='old_url'), arg(arg='new_url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decide whether Authorization header should be removed when redirecting')), Assign(targets=[Name(id='old_parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='old_url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='new_url', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='hostname', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='new_parsed', ctx=Load()), attr='hostname', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='http')]), Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='port', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=80), Constant(value=None)], ctx=Load())]), Compare(left=Attribute(value=Name(id='new_parsed', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='https')]), Compare(left=Attribute(value=Name(id='new_parsed', ctx=Load()), attr='port', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=443), Constant(value=None)], ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='changed_port', ctx=Store())], value=Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='port', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='new_parsed', ctx=Load()), attr='port', ctx=Load())])), Assign(targets=[Name(id='changed_scheme', ctx=Store())], value=Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='scheme', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='new_parsed', ctx=Load()), attr='scheme', ctx=Load())])), Assign(targets=[Name(id='default_port', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='DEFAULT_PORTS', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='old_parsed', ctx=Load()), attr='scheme', ctx=Load()), Constant(value=None)], keywords=[]), Constant(value=None)], ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='changed_scheme', ctx=Load())), Compare(left=Attribute(value=Name(id='old_parsed', ctx=Load()), attr='port', ctx=Load()), ops=[In()], comparators=[Name(id='default_port', ctx=Load())]), Compare(left=Attribute(value=Name(id='new_parsed', ctx=Load()), attr='port', ctx=Load()), ops=[In()], comparators=[Name(id='default_port', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='changed_port', ctx=Load()), Name(id='changed_scheme', ctx=Load())]))], decorator_list=[]), FunctionDef(name='resolve_redirects', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resp'), arg(arg='req'), arg(arg='stream'), arg(arg='timeout'), arg(arg='verify'), arg(arg='cert'), arg(arg='proxies'), arg(arg='yield_requests')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='adapter_kwargs'), defaults=[Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Receives a Response. Returns a generator of Responses or Requests.')), Assign(targets=[Name(id='hist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_redirect_target', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='previous_fragment', ctx=Store())], value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())], keywords=[]), attr='fragment', ctx=Load())), While(test=Name(id='url', ctx=Load()), body=[Assign(targets=[Name(id='prepared_request', ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='hist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='history', ctx=Store())], value=Subscript(value=Name(id='hist', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Try(body=[Expr(value=Attribute(value=Name(id='resp', ctx=Load()), attr='content', ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ChunkedEncodingError', ctx=Load()), Name(id='ContentDecodingError', ctx=Load()), Name(id='RuntimeError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[keyword(arg='decode_content', value=Constant(value=False))]))])], orelse=[], finalbody=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='history', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='max_redirects', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TooManyRedirects', ctx=Load()), args=[JoinedStr(values=[Constant(value='Exceeded '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='max_redirects', ctx=Load()), conversion=-1), Constant(value=' redirects.')])], keywords=[keyword(arg='response', value=Name(id='resp', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='//')], keywords=[]), body=[Assign(targets=[Name(id='parsed_rurl', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Constant(value=':'), attr='join', ctx=Load()), args=[List(elts=[Call(func=Name(id='to_native_string', ctx=Load()), args=[Attribute(value=Name(id='parsed_rurl', ctx=Load()), attr='scheme', ctx=Load())], keywords=[]), Name(id='url', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='fragment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), Name(id='previous_fragment', ctx=Load())]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='_replace', ctx=Load()), args=[], keywords=[keyword(arg='fragment', value=Name(id='previous_fragment', ctx=Load()))]))], orelse=[If(test=Attribute(value=Name(id='parsed', ctx=Load()), attr='fragment', ctx=Load()), body=[Assign(targets=[Name(id='previous_fragment', ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='fragment', ctx=Load()))], orelse=[])]), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed', ctx=Load()), attr='geturl', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='parsed', ctx=Load()), attr='netloc', ctx=Load())), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='url', ctx=Load()), Call(func=Name(id='requote_uri', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='requote_uri', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='url', ctx=Store())], value=Call(func=Name(id='to_native_string', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rebuild_method', ctx=Load()), args=[Name(id='prepared_request', ctx=Load()), Name(id='resp', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Attribute(value=Name(id='codes', ctx=Load()), attr='temporary_redirect', ctx=Load()), Attribute(value=Name(id='codes', ctx=Load()), attr='permanent_redirect', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='purged_headers', ctx=Store())], value=Tuple(elts=[Constant(value='Content-Length'), Constant(value='Content-Type'), Constant(value='Transfer-Encoding')], ctx=Load())), For(target=Name(id='header', ctx=Store()), iter=Name(id='purged_headers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='headers', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='header', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='body', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='headers', ctx=Store())], value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='headers', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='Cookie'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Name(id='extract_cookies_to_jar', ctx=Load()), args=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='_cookies', ctx=Load()), Name(id='req', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='merge_cookies', ctx=Load()), args=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='_cookies', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='prepare_cookies', ctx=Load()), args=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='_cookies', ctx=Load())], keywords=[])), Assign(targets=[Name(id='proxies', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rebuild_proxies', ctx=Load()), args=[Name(id='prepared_request', ctx=Load()), Name(id='proxies', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rebuild_auth', ctx=Load()), args=[Name(id='prepared_request', ctx=Load()), Name(id='resp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rewindable', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='_body_position', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Constant(value='Content-Length'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), Compare(left=Constant(value='Transfer-Encoding'), ops=[In()], comparators=[Name(id='headers', ctx=Load())])])])), If(test=Name(id='rewindable', ctx=Load()), body=[Expr(value=Call(func=Name(id='rewind_body', ctx=Load()), args=[Name(id='prepared_request', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='req', ctx=Store())], value=Name(id='prepared_request', ctx=Load())), If(test=Name(id='yield_requests', ctx=Load()), body=[Expr(value=Yield(value=Name(id='req', ctx=Load())))], orelse=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(arg='verify', value=Name(id='verify', ctx=Load())), keyword(arg='cert', value=Name(id='cert', ctx=Load())), keyword(arg='proxies', value=Name(id='proxies', ctx=Load())), keyword(arg='allow_redirects', value=Constant(value=False)), keyword(value=Name(id='adapter_kwargs', ctx=Load()))])), Expr(value=Call(func=Name(id='extract_cookies_to_jar', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load()), Name(id='prepared_request', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_redirect_target', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='resp', ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='rebuild_auth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prepared_request'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When being redirected we may want to strip authentication from the\n        request to avoid leaking credentials. This method intelligently removes\n        and reapplies authentication where possible to avoid credential loss.\n        ')), Assign(targets=[Name(id='headers', ctx=Store())], value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='headers', ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='url', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='Authorization'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='should_strip_auth', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='request', ctx=Load()), attr='url', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Authorization'), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='new_auth', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Load()), body=Call(func=Name(id='get_netrc_auth', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), orelse=Constant(value=None))), If(test=Compare(left=Name(id='new_auth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='prepare_auth', ctx=Load()), args=[Name(id='new_auth', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='rebuild_proxies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prepared_request'), arg(arg='proxies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This method re-evaluates the proxy configuration by considering the\n        environment variables. If we are redirected to a URL covered by\n        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n        proxy keys for this URL (in case they were stripped by a previous\n        redirect).\n\n        This method also replaces the Proxy-Authorization header where\n        necessary.\n\n        :rtype: dict\n        ')), Assign(targets=[Name(id='headers', ctx=Store())], value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='headers', ctx=Load())), Assign(targets=[Name(id='scheme', ctx=Store())], value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='url', ctx=Load())], keywords=[]), attr='scheme', ctx=Load())), Assign(targets=[Name(id='new_proxies', ctx=Store())], value=Call(func=Name(id='resolve_proxies', ctx=Load()), args=[Name(id='prepared_request', ctx=Load()), Name(id='proxies', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='Proxy-Authorization'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Proxy-Authorization'), ctx=Del())])], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_auth_from_url', ctx=Load()), args=[Subscript(value=Name(id='new_proxies', ctx=Load()), slice=Name(id='scheme', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='https')], keywords=[])), Name(id='username', ctx=Load()), Name(id='password', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Proxy-Authorization'), ctx=Store())], value=Call(func=Name(id='_basic_auth_str', ctx=Load()), args=[Name(id='username', ctx=Load()), Name(id='password', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='new_proxies', ctx=Load()))], decorator_list=[]), FunctionDef(name='rebuild_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prepared_request'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='When being redirected we may want to change the method of the request\n        based on certain specs or browser behavior.\n        ')), Assign(targets=[Name(id='method', ctx=Store())], value=Attribute(value=Name(id='prepared_request', ctx=Load()), attr='method', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='codes', ctx=Load()), attr='see_other', ctx=Load())]), Compare(left=Name(id='method', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='HEAD')])]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Constant(value='GET'))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='codes', ctx=Load()), attr='found', ctx=Load())]), Compare(left=Name(id='method', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='HEAD')])]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Constant(value='GET'))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='codes', ctx=Load()), attr='moved', ctx=Load())]), Compare(left=Name(id='method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='POST')])]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Constant(value='GET'))], orelse=[]), Assign(targets=[Attribute(value=Name(id='prepared_request', ctx=Load()), attr='method', ctx=Store())], value=Name(id='method', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Session', bases=[Name(id='SessionRedirectMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A Requests session.\n\n    Provides cookie persistence, connection-pooling, and configuration.\n\n    Basic Usage::\n\n      >>> import requests\n      >>> s = requests.Session()\n      >>> s.get('https://httpbin.org/get')\n      <Response [200]>\n\n    Or as a context manager::\n\n      >>> with requests.Session() as s:\n      ...     s.get('https://httpbin.org/get')\n      <Response [200]>\n    ")), Assign(targets=[Name(id='__attrs__', ctx=Store())], value=List(elts=[Constant(value='headers'), Constant(value='cookies'), Constant(value='auth'), Constant(value='proxies'), Constant(value='hooks'), Constant(value='params'), Constant(value='verify'), Constant(value='cert'), Constant(value='adapters'), Constant(value='stream'), Constant(value='trust_env'), Constant(value='max_redirects')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='default_headers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxies', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Store())], value=Call(func=Name(id='default_hooks', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='params', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verify', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cert', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_redirects', ctx=Store())], value=Name(id='DEFAULT_REDIRECT_LIMIT', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Store())], value=Call(func=Name(id='cookiejar_from_dict', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[Constant(value='https://'), Call(func=Name(id='HTTPAdapter', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[Constant(value='http://'), Call(func=Name(id='HTTPAdapter', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Constructs a :class:`PreparedRequest <PreparedRequest>` for\n        transmission and returns it. The :class:`PreparedRequest` has settings\n        merged from the :class:`Request <Request>` instance and those of the\n        :class:`Session`.\n\n        :param request: :class:`Request` instance to prepare with this\n            session's settings.\n        :rtype: requests.PreparedRequest\n        ")), Assign(targets=[Name(id='cookies', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='request', ctx=Load()), attr='cookies', ctx=Load()), Dict(keys=[], values=[])])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cookies', ctx=Load()), Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='cookies', ctx=Store())], value=Call(func=Name(id='cookiejar_from_dict', ctx=Load()), args=[Name(id='cookies', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='merged_cookies', ctx=Store())], value=Call(func=Name(id='merge_cookies', ctx=Load()), args=[Call(func=Name(id='merge_cookies', ctx=Load()), args=[Call(func=Name(id='RequestsCookieJar', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load())], keywords=[]), Name(id='cookies', ctx=Load())], keywords=[])), Assign(targets=[Name(id='auth', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='auth', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='auth', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Load()))]), body=[Assign(targets=[Name(id='auth', ctx=Store())], value=Call(func=Name(id='get_netrc_auth', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='PreparedRequest', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='prepare', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='method', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])), keyword(arg='url', value=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())), keyword(arg='files', value=Attribute(value=Name(id='request', ctx=Load()), attr='files', ctx=Load())), keyword(arg='data', value=Attribute(value=Name(id='request', ctx=Load()), attr='data', ctx=Load())), keyword(arg='json', value=Attribute(value=Name(id='request', ctx=Load()), attr='json', ctx=Load())), keyword(arg='headers', value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='headers', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load())], keywords=[keyword(arg='dict_class', value=Name(id='CaseInsensitiveDict', ctx=Load()))])), keyword(arg='params', value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='params', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='params', ctx=Load())], keywords=[])), keyword(arg='auth', value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='auth', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Load())], keywords=[])), keyword(arg='cookies', value=Name(id='merged_cookies', ctx=Load())), keyword(arg='hooks', value=Call(func=Name(id='merge_hooks', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='hooks', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hooks', ctx=Load())], keywords=[]))])), Return(value=Name(id='p', ctx=Load()))], decorator_list=[]), FunctionDef(name='request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='params'), arg(arg='data'), arg(arg='headers'), arg(arg='cookies'), arg(arg='files'), arg(arg='auth'), arg(arg='timeout'), arg(arg='allow_redirects'), arg(arg='proxies'), arg(arg='hooks'), arg(arg='stream'), arg(arg='verify'), arg(arg='cert'), arg(arg='json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Constructs a :class:`Request <Request>`, prepares it and sends it.\n        Returns :class:`Response <Response>` object.\n\n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary or bytes to be sent in the query\n            string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json to send in the body of the\n            :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the\n            :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the\n            :class:`Request`.\n        :param files: (optional) Dictionary of ``'filename': file-like-objects``\n            for multipart encoding upload.\n        :param auth: (optional) Auth tuple or callable to enable\n            Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Set to True by default.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol or protocol and\n            hostname to the URL of the proxy.\n        :param stream: (optional) whether to immediately download the response\n            content. Defaults to ``False``.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``. When set to\n            ``False``, requests will accept any TLS certificate presented by\n            the server, and will ignore hostname mismatches and/or expired\n            certificates, which will make your application vulnerable to\n            man-in-the-middle (MitM) attacks. Setting verify to ``False``\n            may be useful during local development or testing.\n        :param cert: (optional) if String, path to ssl client cert file (.pem).\n            If Tuple, ('cert', 'key') pair.\n        :rtype: requests.Response\n        ")), Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='Request', ctx=Load()), args=[], keywords=[keyword(arg='method', value=Call(func=Attribute(value=Name(id='method', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])), keyword(arg='url', value=Name(id='url', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='files', value=Name(id='files', ctx=Load())), keyword(arg='data', value=BoolOp(op=Or(), values=[Name(id='data', ctx=Load()), Dict(keys=[], values=[])])), keyword(arg='json', value=Name(id='json', ctx=Load())), keyword(arg='params', value=BoolOp(op=Or(), values=[Name(id='params', ctx=Load()), Dict(keys=[], values=[])])), keyword(arg='auth', value=Name(id='auth', ctx=Load())), keyword(arg='cookies', value=Name(id='cookies', ctx=Load())), keyword(arg='hooks', value=Name(id='hooks', ctx=Load()))])), Assign(targets=[Name(id='prep', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prepare_request', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='proxies', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='proxies', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='merge_environment_settings', ctx=Load()), args=[Attribute(value=Name(id='prep', ctx=Load()), attr='url', ctx=Load()), Name(id='proxies', ctx=Load()), Name(id='stream', ctx=Load()), Name(id='verify', ctx=Load()), Name(id='cert', ctx=Load())], keywords=[])), Assign(targets=[Name(id='send_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='timeout'), Constant(value='allow_redirects')], values=[Name(id='timeout', ctx=Load()), Name(id='allow_redirects', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='send_kwargs', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='prep', ctx=Load())], keywords=[keyword(value=Name(id='send_kwargs', ctx=Load()))])), Return(value=Name(id='resp', ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Sends a GET request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='allow_redirects'), Constant(value=True)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='GET'), Name(id='url', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Sends a OPTIONS request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='allow_redirects'), Constant(value=True)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='OPTIONS'), Name(id='url', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='head', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Sends a HEAD request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='allow_redirects'), Constant(value=False)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='HEAD'), Name(id='url', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='post', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='data'), arg(arg='json')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Sends a POST request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='POST'), Name(id='url', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load())), keyword(arg='json', value=Name(id='json', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='put', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Sends a PUT request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='PUT'), Name(id='url', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='patch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='PATCH'), Name(id='url', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Sends a DELETE request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load()), args=[Constant(value='DELETE'), Name(id='url', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Send a given PreparedRequest.\n\n        :rtype: requests.Response\n        ')), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stream'), Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='verify'), Attribute(value=Name(id='self', ctx=Load()), attr='verify', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cert'), Attribute(value=Name(id='self', ctx=Load()), attr='cert', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='proxies'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='proxies'), ctx=Store())], value=Call(func=Name(id='resolve_proxies', ctx=Load()), args=[Name(id='request', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='proxies', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='Request', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You can only send PreparedRequests.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='allow_redirects', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='allow_redirects'), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='stream')], keywords=[])), Assign(targets=[Name(id='hooks', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='hooks', ctx=Load())), Assign(targets=[Name(id='adapter', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_adapter', ctx=Load()), args=[], keywords=[keyword(arg='url', value=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()))])), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='preferred_clock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='adapter', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='elapsed', ctx=Store())], value=BinOp(left=Call(func=Name(id='preferred_clock', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='start', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='r', ctx=Load()), attr='elapsed', ctx=Store())], value=Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=Name(id='elapsed', ctx=Load()))])), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='dispatch_hook', ctx=Load()), args=[Constant(value='response'), Name(id='hooks', ctx=Load()), Name(id='r', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Attribute(value=Name(id='r', ctx=Load()), attr='history', ctx=Load()), body=[For(target=Name(id='resp', ctx=Store()), iter=Attribute(value=Name(id='r', ctx=Load()), attr='history', ctx=Load()), body=[Expr(value=Call(func=Name(id='extract_cookies_to_jar', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='request', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='extract_cookies_to_jar', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cookies', ctx=Load()), Name(id='request', ctx=Load()), Attribute(value=Name(id='r', ctx=Load()), attr='raw', ctx=Load())], keywords=[])), If(test=Name(id='allow_redirects', ctx=Load()), body=[Assign(targets=[Name(id='gen', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_redirects', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='history', ctx=Store())], value=ListComp(elt=Name(id='resp', ctx=Load()), generators=[comprehension(target=Name(id='resp', ctx=Store()), iter=Name(id='gen', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='history', ctx=Store())], value=List(elts=[], ctx=Load()))]), If(test=Name(id='history', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='history', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='r', ctx=Load())], keywords=[])), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='history', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='r', ctx=Load()), attr='history', ctx=Store())], value=Name(id='history', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='allow_redirects', ctx=Load())), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='r', ctx=Load()), attr='_next', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_redirects', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='request', ctx=Load())], keywords=[keyword(arg='yield_requests', value=Constant(value=True)), keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='stream', ctx=Load())), body=[Expr(value=Attribute(value=Name(id='r', ctx=Load()), attr='content', ctx=Load()))], orelse=[]), Return(value=Name(id='r', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_environment_settings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='proxies'), arg(arg='stream'), arg(arg='verify'), arg(arg='cert')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check the environment and merge it with some settings.\n\n        :rtype: dict\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='trust_env', ctx=Load()), body=[Assign(targets=[Name(id='no_proxy', ctx=Store())], value=IfExp(test=Compare(left=Name(id='proxies', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='proxies', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='no_proxy')], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='env_proxies', ctx=Store())], value=Call(func=Name(id='get_environ_proxies', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='no_proxy', value=Name(id='no_proxy', ctx=Load()))])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='env_proxies', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='proxies', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='verify', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='verify', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='verify', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='REQUESTS_CA_BUNDLE')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='CURL_CA_BUNDLE')], keywords=[]), Name(id='verify', ctx=Load())]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='proxies', ctx=Store())], value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='proxies', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='proxies', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='stream', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())], keywords=[])), Assign(targets=[Name(id='verify', ctx=Store())], value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='verify', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='verify', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Name(id='merge_setting', ctx=Load()), args=[Name(id='cert', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cert', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='proxies'), Constant(value='stream'), Constant(value='verify'), Constant(value='cert')], values=[Name(id='proxies', ctx=Load()), Name(id='stream', ctx=Load()), Name(id='verify', ctx=Load()), Name(id='cert', ctx=Load())]))], decorator_list=[]), FunctionDef(name='get_adapter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the appropriate connection adapter for the given URL.\n\n        :rtype: requests.adapters.BaseAdapter\n        ')), For(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='adapter', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Return(value=Name(id='adapter', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='InvalidSchema', ctx=Load()), args=[JoinedStr(values=[Constant(value='No connection adapters were found for '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Closes all adapters and as such the session')), For(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='mount', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix'), arg(arg='adapter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Registers a connection adapter to a prefix.\n\n        Adapters are sorted in descending order by prefix length.\n        ')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), slice=Name(id='prefix', ctx=Load()), ctx=Store())], value=Name(id='adapter', ctx=Load())), Assign(targets=[Name(id='keys_to_move', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])])], is_async=0)])), For(target=Name(id='key', ctx=Store()), iter=Name(id='keys_to_move', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='adapters', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='state', ctx=Store())], value=DictComp(key=Name(id='attr', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=None)], keywords=[]), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__attrs__', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='state', ctx=Load()))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='attr', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='session', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns a :class:`Session` for context-management.\n\n    .. deprecated:: 1.0.0\n\n        This method has been deprecated since version 1.0.0 and is only kept for\n        backwards compatibility. New code should use :class:`~requests.sessions.Session`\n        to create a session. This may be removed at a future date.\n\n    :rtype: Session\n    ')), Return(value=Call(func=Name(id='Session', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], type_ignores=[])