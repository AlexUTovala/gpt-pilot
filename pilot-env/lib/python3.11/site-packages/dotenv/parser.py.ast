Module(body=[Import(names=[alias(name='codecs')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='Iterator'), alias(name='Match'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Pattern'), alias(name='Sequence'), alias(name='Tuple')], level=0), FunctionDef(name='make_regex', args=arguments(posonlyargs=[], args=[arg(arg='string', annotation=Name(id='str', ctx=Load())), arg(arg='extra_flags', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='string', ctx=Load()), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load()), op=BitOr(), right=Name(id='extra_flags', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_newline', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='(\\r\\n|\\n|\\r)')], keywords=[])), Assign(targets=[Name(id='_multiline_whitespace', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='\\s*')], keywords=[keyword(arg='extra_flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load()))])), Assign(targets=[Name(id='_whitespace', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='[^\\S\\r\\n]*')], keywords=[])), Assign(targets=[Name(id='_export', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='(?:export[^\\S\\r\\n]+)?')], keywords=[])), Assign(targets=[Name(id='_single_quoted_key', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value="'([^']+)'")], keywords=[])), Assign(targets=[Name(id='_unquoted_key', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='([^=\\#\\s]+)')], keywords=[])), Assign(targets=[Name(id='_equal_sign', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='(=[^\\S\\r\\n]*)')], keywords=[])), Assign(targets=[Name(id='_single_quoted_value', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value="'((?:\\\\'|[^'])*)'")], keywords=[])), Assign(targets=[Name(id='_double_quoted_value', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='"((?:\\\\"|[^"])*)"')], keywords=[])), Assign(targets=[Name(id='_unquoted_value', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='([^\\r\\n]*)')], keywords=[])), Assign(targets=[Name(id='_comment', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='(?:[^\\S\\r\\n]*#[^\\r\\n]*)?')], keywords=[])), Assign(targets=[Name(id='_end_of_line', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='[^\\S\\r\\n]*(?:\\r\\n|\\n|\\r|$)')], keywords=[])), Assign(targets=[Name(id='_rest_of_line', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='[^\\r\\n]*(?:\\r|\\n|\\r\\n)?')], keywords=[])), Assign(targets=[Name(id='_double_quote_escapes', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value='\\\\[\\\\\'\\"abfnrtv]')], keywords=[])), Assign(targets=[Name(id='_single_quote_escapes', ctx=Store())], value=Call(func=Name(id='make_regex', ctx=Load()), args=[Constant(value="\\\\[\\\\']")], keywords=[])), ClassDef(name='Original', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='string', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='line', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Binding', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='key', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='original', ctx=Store()), annotation=Name(id='Original', ctx=Load()), simple=1), AnnAssign(target=Name(id='error', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Position', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chars', annotation=Name(id='int', ctx=Load())), arg(arg='line', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Store())], value=Name(id='chars', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Store())], value=Name(id='line', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='chars', value=Constant(value=0)), keyword(arg='line', value=Constant(value=1))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Position')), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='Position'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Store())], value=Attribute(value=Name(id='other', ctx=Load()), attr='chars', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Store())], value=Attribute(value=Name(id='other', ctx=Load()), attr='line', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='advance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='chars', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='line', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='_newline', ctx=Load()), Name(id='string', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='Error', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='Reader', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Call(func=Attribute(value=Name(id='Position', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mark', ctx=Store())], value=Call(func=Attribute(value=Name(id='Position', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='has_next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='set_mark', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='mark', ctx=Load()), attr='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_marked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Original', ctx=Load()), args=[], keywords=[keyword(arg='string', value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='mark', ctx=Load()), attr='chars', ctx=Load()), upper=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load())), ctx=Load())), keyword(arg='line', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='mark', ctx=Load()), attr='line', ctx=Load()))]))], decorator_list=[], returns=Name(id='Original', ctx=Load())), FunctionDef(name='peek', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load()), upper=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load()), op=Add(), right=Name(id='count', ctx=Load()))), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load()), upper=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load()), op=Add(), right=Name(id='count', ctx=Load()))), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='count', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='Error', ctx=Load()), args=[Constant(value='read: End of string')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='advance', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='read_regex', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='regex', annotation=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='chars', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Error', ctx=Load()), args=[Constant(value='read_regex: Pattern not found')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), attr='advance', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='string', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), upper=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='decode_escapes', args=arguments(posonlyargs=[], args=[arg(arg='regex', annotation=Subscript(value=Name(id='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='decode_match', args=arguments(posonlyargs=[], args=[arg(arg='match', annotation=Subscript(value=Name(id='Match', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[]), Constant(value='unicode-escape')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='decode_match', ctx=Load()), Name(id='string', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_key', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=Name(id='Reader', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='peek', ctx=Load()), args=[Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')]), body=[Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value="'")]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_single_quoted_key', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_unquoted_key', ctx=Load())], keywords=[]))])]), Return(value=Name(id='key', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='parse_unquoted_value', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=Name(id='Reader', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='part', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_unquoted_value', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\s+#.*'), Constant(value=''), Name(id='part', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_value', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=Name(id='Reader', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='peek', ctx=Load()), args=[Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value="'", kind='u')]), body=[Assign(targets=[Tuple(elts=[Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_single_quoted_value', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='decode_escapes', ctx=Load()), args=[Name(id='_single_quote_escapes', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value='"', kind='u')]), body=[Assign(targets=[Tuple(elts=[Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_double_quoted_value', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='decode_escapes', ctx=Load()), args=[Name(id='_double_quote_escapes', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='', kind='u'), Constant(value='\n', kind='u'), Constant(value='\r', kind='u')], ctx=Load())]), body=[Return(value=Constant(value='', kind='u'))], orelse=[Return(value=Call(func=Name(id='parse_unquoted_value', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[]))])])])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_binding', args=arguments(posonlyargs=[], args=[arg(arg='reader', annotation=Name(id='Reader', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='set_mark', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_multiline_whitespace', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='has_next', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Name(id='Binding', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Constant(value=None)), keyword(arg='value', value=Constant(value=None)), keyword(arg='original', value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='get_marked', ctx=Load()), args=[], keywords=[])), keyword(arg='error', value=Constant(value=False))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_export', ctx=Load())], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='parse_key', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_whitespace', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='peek', ctx=Load()), args=[Constant(value=1)], keywords=[]), ops=[Eq()], comparators=[Constant(value='=')]), body=[Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_equal_sign', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='parse_value', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=None))]), Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_comment', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_end_of_line', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Binding', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load())), keyword(arg='original', value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='get_marked', ctx=Load()), args=[], keywords=[])), keyword(arg='error', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='Error', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='read_regex', ctx=Load()), args=[Name(id='_rest_of_line', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Binding', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Constant(value=None)), keyword(arg='value', value=Constant(value=None)), keyword(arg='original', value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='get_marked', ctx=Load()), args=[], keywords=[])), keyword(arg='error', value=Constant(value=True))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Binding', ctx=Load())), FunctionDef(name='parse_stream', args=arguments(posonlyargs=[], args=[arg(arg='stream', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Name(id='Reader', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), While(test=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='has_next', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='parse_binding', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load()))], type_ignores=[])