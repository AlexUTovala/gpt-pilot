Module(body=[Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='Dict'), alias(name='Iterable'), alias(name='Iterator'), alias(name='Mapping'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='parser', names=[alias(name='Binding'), alias(name='parse_stream')], level=1), ImportFrom(module='variables', names=[alias(name='parse_variables')], level=1), Assign(targets=[Name(id='StrPath', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='with_warn_for_invalid_lines', args=arguments(posonlyargs=[], args=[arg(arg='mappings', annotation=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='mapping', ctx=Store()), iter=Name(id='mappings', ctx=Load()), body=[If(test=Attribute(value=Name(id='mapping', ctx=Load()), attr='error', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Python-dotenv could not parse statement starting at line %s'), Attribute(value=Attribute(value=Name(id='mapping', ctx=Load()), attr='original', ctx=Load()), attr='line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='mapping', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Binding', ctx=Load()), ctx=Load())), ClassDef(name='DotEnv', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dotenv_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StrPath', ctx=Load()), ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='interpolate', annotation=Name(id='bool', ctx=Load())), arg(arg='override', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StrPath', ctx=Load()), ctx=Load()), value=Name(id='dotenv_path', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='stream', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='verbose', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='encoding', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='interpolate', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='interpolate', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='override', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='override', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_stream', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Load())], keywords=[])]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Load())], keywords=[keyword(arg='encoding', value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()))]), optional_vars=Name(id='stream', ctx=Store()))], body=[Expr(value=Yield(value=Name(id='stream', ctx=Load())))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Python-dotenv could not find configuration file %s.'), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Load()), Constant(value='.env')])], keywords=[]))], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Constant(value='')], keywords=[])))])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='dict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return dotenv as dict')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='raw_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='interpolate', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[Call(func=Name(id='resolve_variables', ctx=Load()), args=[Name(id='raw_values', ctx=Load())], keywords=[keyword(arg='override', value=Attribute(value=Name(id='self', ctx=Load()), attr='override', ctx=Load()))])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[Name(id='raw_values', ctx=Load())], keywords=[]))]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dict', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_stream', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stream', ctx=Store()))], body=[For(target=Name(id='mapping', ctx=Store()), iter=Call(func=Name(id='with_warn_for_invalid_lines', ctx=Load()), args=[Call(func=Name(id='parse_stream', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='mapping', ctx=Load()), attr='key', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='mapping', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='mapping', ctx=Load()), attr='value', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='set_as_environment_variables', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Load the current dotenv as system environment variable.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dict', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dict', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='override', ctx=Load()))]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dict', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Key %s not found in %s.'), Name(id='key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dotenv_path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='get_key', args=arguments(posonlyargs=[], args=[arg(arg='dotenv_path', annotation=Name(id='StrPath', ctx=Load())), arg(arg='key_to_get', annotation=Name(id='str', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8')]), body=[Expr(value=Constant(value="\n    Get the value of a given key from the given .env.\n\n    Returns `None` if the key isn't found or doesn't have a value.\n    ")), Return(value=Call(func=Attribute(value=Call(func=Name(id='DotEnv', ctx=Load()), args=[Name(id='dotenv_path', ctx=Load())], keywords=[keyword(arg='verbose', value=Constant(value=True)), keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), attr='get', ctx=Load()), args=[Name(id='key_to_get', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='rewrite', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='StrPath', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='mode', value=Constant(value='w')), keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='source', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='')], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='mode', value=Constant(value='w')), keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='delete', value=Constant(value=False))]), optional_vars=Name(id='dest', ctx=Store()))], body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='source', ctx=Store()))], body=[Expr(value=Yield(value=Tuple(elts=[Name(id='source', ctx=Load()), Name(id='dest', ctx=Load())], ctx=Load())))])], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Attribute(value=Name(id='dest', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Attribute(value=Name(id='dest', ctx=Load()), attr='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='set_key', args=arguments(posonlyargs=[], args=[arg(arg='dotenv_path', annotation=Name(id='StrPath', ctx=Load())), arg(arg='key_to_set', annotation=Name(id='str', ctx=Load())), arg(arg='value_to_set', annotation=Name(id='str', ctx=Load())), arg(arg='quote_mode', annotation=Name(id='str', ctx=Load())), arg(arg='export', annotation=Name(id='bool', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='always'), Constant(value=False), Constant(value='utf-8')]), body=[Expr(value=Constant(value="\n    Adds or Updates a key/value to the given .env\n\n    If the .env path given doesn't exist, fails instead of risking creating\n    an orphan .env somewhere in the filesystem\n    ")), If(test=Compare(left=Name(id='quote_mode', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='always'), Constant(value='auto'), Constant(value='never')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unknown quote_mode: '), FormattedValue(value=Name(id='quote_mode', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='quote', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Name(id='quote_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='always')]), BoolOp(op=And(), values=[Compare(left=Name(id='quote_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='auto')]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='value_to_set', ctx=Load()), attr='isalnum', ctx=Load()), args=[], keywords=[]))])])), If(test=Name(id='quote', ctx=Load()), body=[Assign(targets=[Name(id='value_out', ctx=Store())], value=Call(func=Attribute(value=Constant(value="'{}'"), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value_to_set', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value="\\'")], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='value_out', ctx=Store())], value=Name(id='value_to_set', ctx=Load()))]), If(test=Name(id='export', ctx=Load()), body=[Assign(targets=[Name(id='line_out', ctx=Store())], value=JoinedStr(values=[Constant(value='export '), FormattedValue(value=Name(id='key_to_set', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='value_out', ctx=Load()), conversion=-1), Constant(value='\n')]))], orelse=[Assign(targets=[Name(id='line_out', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='key_to_set', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='value_out', ctx=Load()), conversion=-1), Constant(value='\n')]))]), With(items=[withitem(context_expr=Call(func=Name(id='rewrite', ctx=Load()), args=[Name(id='dotenv_path', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Tuple(elts=[Name(id='source', ctx=Store()), Name(id='dest', ctx=Store())], ctx=Store()))], body=[Assign(targets=[Name(id='replaced', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='missing_newline', ctx=Store())], value=Constant(value=False)), For(target=Name(id='mapping', ctx=Store()), iter=Call(func=Name(id='with_warn_for_invalid_lines', ctx=Load()), args=[Call(func=Name(id='parse_stream', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='mapping', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Name(id='key_to_set', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='line_out', ctx=Load())], keywords=[])), Assign(targets=[Name(id='replaced', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='mapping', ctx=Load()), attr='original', ctx=Load()), attr='string', ctx=Load())], keywords=[])), Assign(targets=[Name(id='missing_newline', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='mapping', ctx=Load()), attr='original', ctx=Load()), attr='string', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[])))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='replaced', ctx=Load())), body=[If(test=Name(id='missing_newline', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='line_out', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Tuple(elts=[Constant(value=True), Name(id='key_to_set', ctx=Load()), Name(id='value_to_set', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='unset_key', args=arguments(posonlyargs=[], args=[arg(arg='dotenv_path', annotation=Name(id='StrPath', ctx=Load())), arg(arg='key_to_unset', annotation=Name(id='str', ctx=Load())), arg(arg='quote_mode', annotation=Name(id='str', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='always'), Constant(value='utf-8')]), body=[Expr(value=Constant(value="\n    Removes a given key from the given `.env` file.\n\n    If the .env path given doesn't exist, fails.\n    If the given key doesn't exist in the .env, fails.\n    ")), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dotenv_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Can't delete from %s - it doesn't exist."), Name(id='dotenv_path', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Name(id='key_to_unset', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='removed', ctx=Store())], value=Constant(value=False)), With(items=[withitem(context_expr=Call(func=Name(id='rewrite', ctx=Load()), args=[Name(id='dotenv_path', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Tuple(elts=[Name(id='source', ctx=Store()), Name(id='dest', ctx=Store())], ctx=Store()))], body=[For(target=Name(id='mapping', ctx=Store()), iter=Call(func=Name(id='with_warn_for_invalid_lines', ctx=Load()), args=[Call(func=Name(id='parse_stream', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='mapping', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Name(id='key_to_unset', ctx=Load())]), body=[Assign(targets=[Name(id='removed', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='mapping', ctx=Load()), attr='original', ctx=Load()), attr='string', ctx=Load())], keywords=[]))])], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Name(id='removed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Key %s not removed from %s - key doesn't exist."), Name(id='key_to_unset', ctx=Load()), Name(id='dotenv_path', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Name(id='key_to_unset', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='removed', ctx=Load()), Name(id='key_to_unset', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='resolve_variables', args=arguments(posonlyargs=[], args=[arg(arg='values', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='override', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='new_values', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='values', ctx=Load()), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='atoms', ctx=Store())], value=Call(func=Name(id='parse_variables', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='env', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), If(test=Name(id='override', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='new_values', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='new_values', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='atom', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='env', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='atom', ctx=Store()), iter=Name(id='atoms', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Assign(targets=[Subscript(value=Name(id='new_values', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))], orelse=[]), Return(value=Name(id='new_values', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_walk_to_root', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Yield directories starting from the given directory up to the root\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Constant(value='Starting path not found')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='last_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='current_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='last_dir', ctx=Load()), ops=[NotEq()], comparators=[Name(id='current_dir', ctx=Load())]), body=[Expr(value=Yield(value=Name(id='current_dir', ctx=Load()))), Assign(targets=[Name(id='parent_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='current_dir', ctx=Load()), Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='pardir', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='last_dir', ctx=Store()), Name(id='current_dir', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='current_dir', ctx=Load()), Name(id='parent_dir', ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='find_dotenv', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='raise_error_if_not_found', annotation=Name(id='bool', ctx=Load())), arg(arg='usecwd', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='.env'), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Search in increasingly higher folders for the given file\n\n    Returns path to the file if found, or an empty string otherwise\n    ')), FunctionDef(name='_is_interactive', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Decide whether this is running in a REPL or IPython notebook ')), Assign(targets=[Name(id='main', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Constant(value='__main__'), Constant(value=None), Constant(value=None)], keywords=[keyword(arg='fromlist', value=List(elts=[Constant(value='__file__')], ctx=Load()))])), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='main', ctx=Load()), Constant(value='__file__')], keywords=[])))], decorator_list=[]), If(test=BoolOp(op=Or(), values=[Name(id='usecwd', ctx=Load()), Call(func=Name(id='_is_interactive', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='frozen'), Constant(value=False)], keywords=[])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='current_file', ctx=Store())], value=Name(id='__file__', ctx=Load())), While(test=Compare(left=Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_filename', ctx=Load()), ops=[Eq()], comparators=[Name(id='current_file', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='frame', ctx=Load()), attr='f_back', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='frame', ctx=Store())], value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_back', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='frame_filename', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_filename', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='frame_filename', ctx=Load())], keywords=[])], keywords=[]))]), For(target=Name(id='dirname', ctx=Store()), iter=Call(func=Name(id='_walk_to_root', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='check_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirname', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='check_path', ctx=Load())], keywords=[]), body=[Return(value=Name(id='check_path', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='raise_error_if_not_found', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Constant(value='File not found')], keywords=[]))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='load_dotenv', args=arguments(posonlyargs=[], args=[arg(arg='dotenv_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StrPath', ctx=Load()), ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load())), arg(arg='override', annotation=Name(id='bool', ctx=Load())), arg(arg='interpolate', annotation=Name(id='bool', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value='utf-8')]), body=[Expr(value=Constant(value='Parse a .env file and then load all the variables found as environment variables.\n\n    Parameters:\n        dotenv_path: Absolute or relative path to .env file.\n        stream: Text stream (such as `io.StringIO`) with .env content, used if\n            `dotenv_path` is `None`.\n        verbose: Whether to output a warning the .env file is missing.\n        override: Whether to override the system environment variables with the variables\n            from the `.env` file.\n        encoding: Encoding to be used to read the file.\n    Returns:\n        Bool: True if at least one environment variable is set else False\n\n    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the\n    .env file.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dotenv_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='stream', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='dotenv_path', ctx=Store())], value=Call(func=Name(id='find_dotenv', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dotenv', ctx=Store())], value=Call(func=Name(id='DotEnv', ctx=Load()), args=[], keywords=[keyword(arg='dotenv_path', value=Name(id='dotenv_path', ctx=Load())), keyword(arg='stream', value=Name(id='stream', ctx=Load())), keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='interpolate', value=Name(id='interpolate', ctx=Load())), keyword(arg='override', value=Name(id='override', ctx=Load())), keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='dotenv', ctx=Load()), attr='set_as_environment_variables', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='dotenv_values', args=arguments(posonlyargs=[], args=[arg(arg='dotenv_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StrPath', ctx=Load()), ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load())), arg(arg='interpolate', annotation=Name(id='bool', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=True), Constant(value='utf-8')]), body=[Expr(value=Constant(value='\n    Parse a .env file and return its content as a dict.\n\n    The returned dict will have `None` values for keys without values in the .env file.\n    For example, `foo=bar` results in `{"foo": "bar"}` whereas `foo` alone results in\n    `{"foo": None}`\n\n    Parameters:\n        dotenv_path: Absolute or relative path to the .env file.\n        stream: `StringIO` object with .env content, used if `dotenv_path` is `None`.\n        verbose: Whether to output a warning if the .env file is missing.\n        encoding: Encoding to be used to read the file.\n\n    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the\n    .env file.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dotenv_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='stream', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='dotenv_path', ctx=Store())], value=Call(func=Name(id='find_dotenv', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='DotEnv', ctx=Load()), args=[], keywords=[keyword(arg='dotenv_path', value=Name(id='dotenv_path', ctx=Load())), keyword(arg='stream', value=Name(id='stream', ctx=Load())), keyword(arg='verbose', value=Name(id='verbose', ctx=Load())), keyword(arg='interpolate', value=Name(id='interpolate', ctx=Load())), keyword(arg='override', value=Constant(value=True)), keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), attr='dict', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])