Module(body=[Expr(value=Constant(value='Windows platform implementation.')), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(names=[alias(name='_common')], level=1), ImportFrom(module='_common', names=[alias(name='ENCODING')], level=1), ImportFrom(module='_common', names=[alias(name='ENCODING_ERRS')], level=1), ImportFrom(module='_common', names=[alias(name='AccessDenied')], level=1), ImportFrom(module='_common', names=[alias(name='NoSuchProcess')], level=1), ImportFrom(module='_common', names=[alias(name='TimeoutExpired')], level=1), ImportFrom(module='_common', names=[alias(name='conn_tmap')], level=1), ImportFrom(module='_common', names=[alias(name='conn_to_ntuple')], level=1), ImportFrom(module='_common', names=[alias(name='debug')], level=1), ImportFrom(module='_common', names=[alias(name='isfile_strict')], level=1), ImportFrom(module='_common', names=[alias(name='memoize')], level=1), ImportFrom(module='_common', names=[alias(name='memoize_when_activated')], level=1), ImportFrom(module='_common', names=[alias(name='parse_environ_block')], level=1), ImportFrom(module='_common', names=[alias(name='usage_percent')], level=1), ImportFrom(module='_compat', names=[alias(name='PY3')], level=1), ImportFrom(module='_compat', names=[alias(name='long')], level=1), ImportFrom(module='_compat', names=[alias(name='lru_cache')], level=1), ImportFrom(module='_compat', names=[alias(name='range')], level=1), ImportFrom(module='_compat', names=[alias(name='unicode')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='ABOVE_NORMAL_PRIORITY_CLASS')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='BELOW_NORMAL_PRIORITY_CLASS')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='HIGH_PRIORITY_CLASS')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='IDLE_PRIORITY_CLASS')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='NORMAL_PRIORITY_CLASS')], level=1), ImportFrom(module='_psutil_windows', names=[alias(name='REALTIME_PRIORITY_CLASS')], level=1), Try(body=[ImportFrom(names=[alias(name='_psutil_windows', asname='cext')], level=1)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='err', body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='dll load failed')], keywords=[]), Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getwindowsversion', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=6)])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='this Windows version is too old (< Windows Vista); ')), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='psutil 3.4.2 is the latest version which supports Windows ')), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='2000, XP and 2003 server')), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[Raise()])])], orelse=[], finalbody=[]), If(test=Name(id='PY3', ctx=Load()), body=[Import(names=[alias(name='enum')])], orelse=[Assign(targets=[Name(id='enum', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='__extra__all__', ctx=Store())], value=List(elts=[Constant(value='win_service_iter'), Constant(value='win_service_get'), Constant(value='ABOVE_NORMAL_PRIORITY_CLASS'), Constant(value='BELOW_NORMAL_PRIORITY_CLASS'), Constant(value='HIGH_PRIORITY_CLASS'), Constant(value='IDLE_PRIORITY_CLASS'), Constant(value='NORMAL_PRIORITY_CLASS'), Constant(value='REALTIME_PRIORITY_CLASS'), Constant(value='IOPRIO_VERYLOW'), Constant(value='IOPRIO_LOW'), Constant(value='IOPRIO_NORMAL'), Constant(value='IOPRIO_HIGH'), Constant(value='CONN_DELETE_TCB'), Constant(value='AF_LINK')], ctx=Load())), Assign(targets=[Name(id='CONN_DELETE_TCB', ctx=Store())], value=Constant(value='DELETE_TCB')), Assign(targets=[Name(id='ERROR_PARTIAL_COPY', ctx=Store())], value=Constant(value=299)), Assign(targets=[Name(id='PYPY', ctx=Store())], value=Compare(left=Constant(value='__pypy__'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='builtin_module_names', ctx=Load())])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='AF_LINK', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[Assign(targets=[Name(id='AddressFamily', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load()), args=[Constant(value='AddressFamily'), Dict(keys=[Constant(value='AF_LINK')], values=[UnaryOp(op=USub(), operand=Constant(value=1))])], keywords=[])), Assign(targets=[Name(id='AF_LINK', ctx=Store())], value=Attribute(value=Name(id='AddressFamily', ctx=Load()), attr='AF_LINK', ctx=Load()))]), Assign(targets=[Name(id='TCP_STATUSES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_ESTAB', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_SYN_SENT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_SYN_RCVD', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_FIN_WAIT1', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_FIN_WAIT2', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_TIME_WAIT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_CLOSED', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_CLOSE_WAIT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_LAST_ACK', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_LISTEN', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_CLOSING', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='MIB_TCP_STATE_DELETE_TCB', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='PSUTIL_CONN_NONE', ctx=Load())], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_ESTABLISHED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_SENT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_RECV', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT1', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT2', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_TIME_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LAST_ACK', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LISTEN', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSING', ctx=Load()), Name(id='CONN_DELETE_TCB', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_NONE', ctx=Load())])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[ClassDef(name='Priority', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='ABOVE_NORMAL_PRIORITY_CLASS', ctx=Store())], value=Name(id='ABOVE_NORMAL_PRIORITY_CLASS', ctx=Load())), Assign(targets=[Name(id='BELOW_NORMAL_PRIORITY_CLASS', ctx=Store())], value=Name(id='BELOW_NORMAL_PRIORITY_CLASS', ctx=Load())), Assign(targets=[Name(id='HIGH_PRIORITY_CLASS', ctx=Store())], value=Name(id='HIGH_PRIORITY_CLASS', ctx=Load())), Assign(targets=[Name(id='IDLE_PRIORITY_CLASS', ctx=Store())], value=Name(id='IDLE_PRIORITY_CLASS', ctx=Load())), Assign(targets=[Name(id='NORMAL_PRIORITY_CLASS', ctx=Store())], value=Name(id='NORMAL_PRIORITY_CLASS', ctx=Load())), Assign(targets=[Name(id='REALTIME_PRIORITY_CLASS', ctx=Store())], value=Name(id='REALTIME_PRIORITY_CLASS', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='Priority', ctx=Load()), attr='__members__', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='IOPRIO_VERYLOW', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='IOPRIO_LOW', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='IOPRIO_NORMAL', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='IOPRIO_HIGH', ctx=Store())], value=Constant(value=3))], orelse=[ClassDef(name='IOPriority', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='IOPRIO_VERYLOW', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='IOPRIO_LOW', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='IOPRIO_NORMAL', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='IOPRIO_HIGH', ctx=Store())], value=Constant(value=3))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='IOPriority', ctx=Load()), attr='__members__', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='pinfo_map', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='num_handles', value=Constant(value=0)), keyword(arg='ctx_switches', value=Constant(value=1)), keyword(arg='user_time', value=Constant(value=2)), keyword(arg='kernel_time', value=Constant(value=3)), keyword(arg='create_time', value=Constant(value=4)), keyword(arg='num_threads', value=Constant(value=5)), keyword(arg='io_rcount', value=Constant(value=6)), keyword(arg='io_wcount', value=Constant(value=7)), keyword(arg='io_rbytes', value=Constant(value=8)), keyword(arg='io_wbytes', value=Constant(value=9)), keyword(arg='io_count_others', value=Constant(value=10)), keyword(arg='io_bytes_others', value=Constant(value=11)), keyword(arg='num_page_faults', value=Constant(value=12)), keyword(arg='peak_wset', value=Constant(value=13)), keyword(arg='wset', value=Constant(value=14)), keyword(arg='peak_paged_pool', value=Constant(value=15)), keyword(arg='paged_pool', value=Constant(value=16)), keyword(arg='peak_non_paged_pool', value=Constant(value=17)), keyword(arg='non_paged_pool', value=Constant(value=18)), keyword(arg='pagefile', value=Constant(value=19)), keyword(arg='peak_pagefile', value=Constant(value=20)), keyword(arg='mem_private', value=Constant(value=21))])), Assign(targets=[Name(id='scputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scputimes'), List(elts=[Constant(value='user'), Constant(value='system'), Constant(value='idle'), Constant(value='interrupt'), Constant(value='dpc')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='svmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='svmem'), List(elts=[Constant(value='total'), Constant(value='available'), Constant(value='percent'), Constant(value='used'), Constant(value='free')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmem'), List(elts=[Constant(value='rss'), Constant(value='vms'), Constant(value='num_page_faults'), Constant(value='peak_wset'), Constant(value='wset'), Constant(value='peak_paged_pool'), Constant(value='paged_pool'), Constant(value='peak_nonpaged_pool'), Constant(value='nonpaged_pool'), Constant(value='pagefile'), Constant(value='peak_pagefile'), Constant(value='private')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pfullmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pfullmem'), BinOp(left=Attribute(value=Name(id='pmem', ctx=Load()), attr='_fields', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value='uss')], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='pmmap_grouped', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_grouped'), List(elts=[Constant(value='path'), Constant(value='rss')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmmap_ext', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_ext'), BinOp(left=Constant(value='addr perms '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='pmmap_grouped', ctx=Load()), attr='_fields', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='pio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes'), Constant(value='other_count'), Constant(value='other_bytes')], ctx=Load())], keywords=[])), FunctionDef(name='convert_dos_path', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert paths using native DOS format like:\n        "\\Device\\HarddiskVolume1\\Windows\\systemew\\file.txt"\n    into:\n        "C:\\Windows\\systemew\\file.txt".\n    ')), Assign(targets=[Name(id='rawdrive', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\\'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\')], keywords=[]), slice=Slice(upper=Constant(value=3)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='driveletter', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='QueryDosDevice', ctx=Load()), args=[Name(id='rawdrive', ctx=Load())], keywords=[])), Assign(targets=[Name(id='remainder', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rawdrive', ctx=Load())], keywords=[])), ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='driveletter', ctx=Load()), Name(id='remainder', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=512))])]), FunctionDef(name='py2_strencode', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Encode a unicode string to a byte string by using the default fs\n    encoding + "replace" error handler.\n    ')), If(test=Name(id='PY3', ctx=Load()), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='ENCODING', ctx=Load()), Name(id='ENCODING_ERRS', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='getpagesize', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='getpagesize', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='memoize', ctx=Load())]), FunctionDef(name='virtual_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='System virtual memory as a namedtuple.')), Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='virtual_mem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='totphys', ctx=Store()), Name(id='availphys', ctx=Store()), Name(id='totsys', ctx=Store()), Name(id='availsys', ctx=Store())], ctx=Store())], value=Name(id='mem', ctx=Load())), Assign(targets=[Name(id='total', ctx=Store())], value=Name(id='totphys', ctx=Load())), Assign(targets=[Name(id='avail', ctx=Store())], value=Name(id='availphys', ctx=Load())), Assign(targets=[Name(id='free', ctx=Store())], value=Name(id='availphys', ctx=Load())), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='avail', ctx=Load()))), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='avail', ctx=Load())), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Return(value=Call(func=Name(id='svmem', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='avail', ctx=Load()), Name(id='percent', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='swap_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Swap system memory as a (total, used, free, sin, sout) tuple.')), Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='virtual_mem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='total_phys', ctx=Store())], value=Subscript(value=Name(id='mem', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='total_system', ctx=Store())], value=Subscript(value=Name(id='mem', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Name(id='total_system', ctx=Load()), op=Sub(), right=Name(id='total_phys', ctx=Load()))), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='percentswap', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='swap_percent', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='used', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=0.01), op=Mult(), right=Name(id='percentswap', ctx=Load())), op=Mult(), right=Name(id='total', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='percentswap', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Name(id='used', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='free', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='used', ctx=Load()))), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='round', ctx=Load()), args=[Name(id='percentswap', ctx=Load()), Constant(value=1)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sswap', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='percent', ctx=Load()), Constant(value=0), Constant(value=0)], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='disk_io_counters', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_io_counters', ctx=Load())), FunctionDef(name='disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return disk usage associated with path.')), If(test=BoolOp(op=And(), values=[Name(id='PY3', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='ENCODING', ctx=Load())], keywords=[keyword(arg='errors', value=Constant(value='strict'))]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='free', ctx=Load()))), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[Name(id='used', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sdiskusage', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='percent', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='all')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return disk partitions.')), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[Name(id='all', ctx=Load())], keywords=[])), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sdiskpart', ctx=Load()), args=[Starred(value=Name(id='x', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return system CPU times as a named tuple.')), Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='system', ctx=Store()), Name(id='idle', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='percpu_summed', ctx=Store())], value=Call(func=Name(id='scputimes', ctx=Load()), args=[Starred(value=ListComp(elt=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='per_cpu_times', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[]), ifs=[], is_async=0)]), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='scputimes', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='system', ctx=Load()), Name(id='idle', ctx=Load()), Attribute(value=Name(id='percpu_summed', ctx=Load()), attr='interrupt', ctx=Load()), Attribute(value=Name(id='percpu_summed', ctx=Load()), attr='dpc', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='per_cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return system per-CPU times as a list of named tuples.')), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='user', ctx=Store()), Name(id='system', ctx=Store()), Name(id='idle', ctx=Store()), Name(id='interrupt', ctx=Store()), Name(id='dpc', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='per_cpu_times', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='scputimes', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='system', ctx=Load()), Name(id='idle', ctx=Load()), Name(id='interrupt', ctx=Load()), Name(id='dpc', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='cpu_count_logical', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of logical CPUs in the system.')), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_count_cores', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of CPU cores in the system.')), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_count_cores', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return CPU statistics.')), Assign(targets=[Tuple(elts=[Name(id='ctx_switches', ctx=Store()), Name(id='interrupts', ctx=Store()), Name(id='dpcs', ctx=Store()), Name(id='syscalls', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='soft_interrupts', ctx=Store())], value=Constant(value=0)), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpustats', ctx=Load()), args=[Name(id='ctx_switches', ctx=Load()), Name(id='interrupts', ctx=Load()), Name(id='soft_interrupts', ctx=Load()), Name(id='syscalls', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return CPU frequency.\n    On Windows per-cpu frequency is not supported.\n    ')), Assign(targets=[Tuple(elts=[Name(id='curr', ctx=Store()), Name(id='max_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='min_', ctx=Store())], value=Constant(value=0.0)), Return(value=List(elts=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpufreq', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='curr', ctx=Load())], keywords=[]), Name(id='min_', ctx=Load()), Call(func=Name(id='float', ctx=Load()), args=[Name(id='max_', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_loadavg_inititialized', ctx=Store())], value=Constant(value=False)), FunctionDef(name='getloadavg', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of processes in the system run queue averaged\n    over the last 1, 5, and 15 minutes respectively as a tuple.\n    ')), Global(names=['_loadavg_inititialized']), If(test=UnaryOp(op=Not(), operand=Name(id='_loadavg_inititialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='init_loadavg_counter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_loadavg_inititialized', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='raw_loads', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='getloadavg', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='round', ctx=Load()), args=[Name(id='load', ctx=Load()), Constant(value=2)], keywords=[]), generators=[comprehension(target=Name(id='load', ctx=Store()), iter=Name(id='raw_loads', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='net_connections', args=arguments(posonlyargs=[], args=[arg(arg='kind'), arg(arg='_pid')], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Constant(value='Return socket connections.  If pid == -1 return system-wide\n    connections (as opposed to connections opened by one process only).\n    ')), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[NotIn()], comparators=[Name(id='conn_tmap', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid %r kind argument; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='kind', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='conn_tmap', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='families', ctx=Store()), Name(id='types', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='conn_tmap', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[Name(id='_pid', ctx=Load()), Name(id='families', ctx=Load()), Name(id='types', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='fd', ctx=Store()), Name(id='fam', ctx=Store()), Name(id='type', ctx=Store()), Name(id='laddr', ctx=Store()), Name(id='raddr', ctx=Store()), Name(id='status', ctx=Store()), Name(id='pid', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Name(id='conn_to_ntuple', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='fam', ctx=Load()), Name(id='type', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='TCP_STATUSES', ctx=Load())], keywords=[keyword(arg='pid', value=IfExp(test=Compare(left=Name(id='_pid', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=Name(id='pid', ctx=Load()), orelse=Constant(value=None)))])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='net_if_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get NIC stats (isup, duplex, speed, mtu).')), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='rawdict', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='items', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='rawdict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), msg=Call(func=Name(id='type', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='isup', ctx=Store()), Name(id='duplex', ctx=Store()), Name(id='speed', ctx=Store()), Name(id='mtu', ctx=Store())], ctx=Store())], value=Name(id='items', ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_common', ctx=Load()), Constant(value='NicDuplex')], keywords=[]), body=[Assign(targets=[Name(id='duplex', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='NicDuplex', ctx=Load()), args=[Name(id='duplex', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='snicstats', ctx=Load()), args=[Name(id='isup', ctx=Load()), Name(id='duplex', ctx=Load()), Name(id='speed', ctx=Load()), Name(id='mtu', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='net_io_counters', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return network I/O statistics for every network interface\n    installed on the system as a dict of raw tuples.\n    ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='net_if_addrs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the addresses associated to each NIC.')), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='items', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Subscript(value=Name(id='items', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='sensors_battery', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return battery information.')), Assign(targets=[Tuple(elts=[Name(id='acline_status', ctx=Store()), Name(id='flags', ctx=Store()), Name(id='percent', ctx=Store()), Name(id='secsleft', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Compare(left=Name(id='acline_status', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='no_battery', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Constant(value=128))], keywords=[])), Assign(targets=[Name(id='charging', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Constant(value=8))], keywords=[])), If(test=Name(id='no_battery', ctx=Load()), body=[Return(value=Constant(value=None))], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='power_plugged', ctx=Load()), Name(id='charging', ctx=Load())]), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='secsleft', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sbattery', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='secsleft', ctx=Load()), Name(id='power_plugged', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='_last_btime', ctx=Store())], value=Constant(value=0)), FunctionDef(name='boot_time', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The system boot time expressed in seconds since the epoch.')), Global(names=['_last_btime']), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='ret', ctx=Load()), op=Sub(), right=Name(id='_last_btime', ctx=Load()))], keywords=[]), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='_last_btime', ctx=Load()))], orelse=[Assign(targets=[Name(id='_last_btime', ctx=Store())], value=Name(id='ret', ctx=Load())), Return(value=Name(id='ret', ctx=Load()))])], decorator_list=[]), FunctionDef(name='users', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return currently connected users as a list of namedtuples.')), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='hostname', ctx=Store()), Name(id='tstamp', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[])), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='suser', ctx=Load()), args=[Name(id='user', ctx=Load()), Constant(value=None), Name(id='hostname', ctx=Load()), Name(id='tstamp', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[]), FunctionDef(name='win_service_iter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Yields a list of WindowsService instances.')), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='display_name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_enumerate', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='WindowsService', ctx=Load()), args=[Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='display_name', ctx=Load())], keywords=[])], keywords=[])))], orelse=[])], decorator_list=[]), FunctionDef(name='win_service_get', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Open a Windows service and return it as a WindowsService instance.')), Assign(targets=[Name(id='service', ctx=Store())], value=Call(func=Name(id='WindowsService', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='service', ctx=Load()), attr='_display_name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='service', ctx=Load()), attr='_query_config', ctx=Load()), args=[], keywords=[]), slice=Constant(value='display_name'), ctx=Load())), Return(value=Name(id='service', ctx=Load()))], decorator_list=[]), ClassDef(name='WindowsService', bases=[], keywords=[], body=[Expr(value=Constant(value='Represents an installed Windows service.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='display_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_display_name', ctx=Store())], value=Name(id='display_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='details', ctx=Store())], value=BinOp(left=Constant(value='(name=%r, display_name=%r)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_display_name', ctx=Load())], ctx=Load()))), Return(value=BinOp(left=Constant(value='%s%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Name(id='details', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<%s at %s>'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__str__', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], ctx=Load())))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='WindowsService', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_name', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())])))], decorator_list=[]), FunctionDef(name='_query_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_exceptions', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='display_name', ctx=Store()), Name(id='binpath', ctx=Store()), Name(id='username', ctx=Store()), Name(id='start_type', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_config', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='display_name', value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='display_name', ctx=Load())], keywords=[])), keyword(arg='binpath', value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='binpath', ctx=Load())], keywords=[])), keyword(arg='username', value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='username', ctx=Load())], keywords=[])), keyword(arg='start_type', value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='start_type', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='_query_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_exceptions', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='status', ctx=Store()), Name(id='pid', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_status', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='pid', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='status', value=Name(id='status', ctx=Load())), keyword(arg='pid', value=Name(id='pid', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_wrap_exceptions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ctx manager which translates bare OSError and WindowsError\n        exceptions into NoSuchProcess and AccessDenied.\n        ')), Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[], keywords=[keyword(arg='pid', value=Constant(value=None)), keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())), keyword(arg='msg', value=BinOp(left=Constant(value='service %r is not querable (not enough privileges)'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='winerror', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='cext', ctx=Load()), attr='ERROR_INVALID_NAME', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='ERROR_SERVICE_DOES_NOT_EXIST', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[], keywords=[keyword(arg='pid', value=Constant(value=None)), keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())), keyword(arg='msg', value=BinOp(left=Constant(value='service %r does not exist)'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())))]))], orelse=[Raise()])])])], orelse=[], finalbody=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The service name. This string is how a service is referenced\n        and can be passed to win_service_get() to get a new\n        WindowsService instance.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='display_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The service display name. The value is cached when this class\n        is instantiated.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_display_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='binpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The fully qualified path to the service binary/exe file as\n        a string, including command line arguments.\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_config', ctx=Load()), args=[], keywords=[]), slice=Constant(value='binpath'), ctx=Load()))], decorator_list=[]), FunctionDef(name='username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The name of the user that owns this service.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_config', ctx=Load()), args=[], keywords=[]), slice=Constant(value='username'), ctx=Load()))], decorator_list=[]), FunctionDef(name='start_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A string which can either be "automatic", "manual" or\n        "disabled".\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_config', ctx=Load()), args=[], keywords=[]), slice=Constant(value='start_type'), ctx=Load()))], decorator_list=[]), FunctionDef(name='pid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="The process PID, if any, else None. This can be passed\n        to Process class to control the service's process.\n        ")), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_status', ctx=Load()), args=[], keywords=[]), slice=Constant(value='pid'), ctx=Load()))], decorator_list=[]), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Service status as a string.')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_status', ctx=Load()), args=[], keywords=[]), slice=Constant(value='status'), ctx=Load()))], decorator_list=[]), FunctionDef(name='description', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Service long description.')), Return(value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_descr', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='as_dict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Utility method retrieving all the information above as a\n        dictionary.\n        ')), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_config', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_query_status', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='display_name'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='display_name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='description'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='d', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='pids', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='pids', ctx=Load())), Assign(targets=[Name(id='pid_exists', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='pid_exists', ctx=Load())), Assign(targets=[Name(id='ppid_map', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='ppid_map', ctx=Load())), FunctionDef(name='is_permission_err', args=arguments(posonlyargs=[], args=[arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if this is a permission error.')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='OSError', ctx=Load())], keywords=[]), msg=Name(id='exc', ctx=Load())), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())], ctx=Load())]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='exc', ctx=Load()), Constant(value='winerror'), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='cext', ctx=Load()), attr='ERROR_ACCESS_DENIED', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='ERROR_PRIVILEGE_NOT_HELD', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='convert_oserror', args=arguments(posonlyargs=[], args=[arg(arg='exc'), arg(arg='pid'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Convert OSError into NoSuchProcess or AccessDenied.')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='OSError', ctx=Load())], keywords=[]), msg=Name(id='exc', ctx=Load())), If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='AccessDenied', ctx=Load()), args=[], keywords=[keyword(arg='pid', value=Name(id='pid', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ESRCH', ctx=Load())]), body=[Return(value=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[], keywords=[keyword(arg='pid', value=Name(id='pid', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))]))], orelse=[]), Raise(exc=Name(id='exc', ctx=Load()))], decorator_list=[]), FunctionDef(name='wrap_exceptions', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decorator which converts OSError into NoSuchProcess or AccessDenied.')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='convert_oserror', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[keyword(arg='pid', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())), keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='retry_error_partial_copy', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Workaround for https://github.com/giampaolo/psutil/issues/875.\n    See: https://stackoverflow.com/questions/4457745#4457745.\n    ')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='delay', ctx=Store())], value=Constant(value=0.0001)), Assign(targets=[Name(id='times', ctx=Store())], value=Constant(value=33)), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='WindowsError', ctx=Load()), name='_', body=[Assign(targets=[Name(id='err', ctx=Store())], value=Name(id='_', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='winerror', ctx=Load()), ops=[Eq()], comparators=[Name(id='ERROR_PARTIAL_COPY', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='delay', ctx=Load())], keywords=[])), Assign(targets=[Name(id='delay', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='delay', ctx=Load()), op=Mult(), right=Constant(value=2)), Constant(value=0.04)], keywords=[])), Continue()], orelse=[Raise()])])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value="{} retried {} times, converted to AccessDenied as it's still returning {}"), attr='format', ctx=Load()), args=[Name(id='fun', ctx=Load()), Name(id='times', ctx=Load()), Name(id='err', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[], keywords=[keyword(arg='pid', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())), keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())), keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), ClassDef(name='Process', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrapper class around underlying C implementation.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='pid'), Constant(value='_name'), Constant(value='_ppid'), Constant(value='_cache')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='oneshot_enter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='exe', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='oneshot_exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='exe', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_proc_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return multiple information about this process as a\n        raw tuple.\n        ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_info', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='pinfo_map', ctx=Load())], keywords=[])])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return process name, which on Windows is always the final\n        part of the executable.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='System Idle Process'))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=4)]), body=[Return(value=Constant(value='System'))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exe', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='PYPY', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='exe', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_exe', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='WindowsError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Constant(value=24)]), body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[BinOp(left=Constant(value='%r translated into AccessDenied'), op=Mod(), right=Name(id='err', ctx=Load()))], keywords=[])), Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='exe', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_exe', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='exe', ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='exe', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='exe', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='\\')], keywords=[]), body=[Return(value=Call(func=Name(id='convert_dos_path', ctx=Load()), args=[Name(id='exe', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='exe', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cext', ctx=Load()), attr='WINVER', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='cext', ctx=Load()), attr='WINDOWS_8_1', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[keyword(arg='use_peb', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[keyword(arg='use_peb', value=Constant(value=False))]))], orelse=[Raise()])])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[keyword(arg='use_peb', value=Constant(value=True))]))]), If(test=Name(id='PY3', ctx=Load()), body=[Return(value=Name(id='ret', ctx=Load()))], orelse=[Return(value=ListComp(elt=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='ret', ctx=Load()), ifs=[], is_async=0)]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='retry_error_partial_copy', ctx=Load())]), FunctionDef(name='environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ustr', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_environ', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='ustr', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load()))]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ustr', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), msg=Call(func=Name(id='type', ctx=Load()), args=[Name(id='ustr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='parse_environ_block', ctx=Load()), args=[Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='ustr', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='retry_error_partial_copy', ctx=Load())]), FunctionDef(name='ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Call(func=Name(id='ppid_map', ctx=Load()), args=[], keywords=[]), slice=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_get_raw_meminfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_memory_info', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='num_page_faults'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='peak_wset'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='wset'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='peak_paged_pool'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='paged_pool'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='peak_non_paged_pool'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='non_paged_pool'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='pagefile'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='peak_pagefile'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='mem_private'), ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_raw_meminfo', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rss', ctx=Store())], value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='vms', ctx=Store())], value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=7), ctx=Load())), Return(value=Call(func=Name(id='pmem', ctx=Load()), args=[Starred(value=BinOp(left=Tuple(elts=[Name(id='rss', ctx=Load()), Name(id='vms', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='t', ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='memory_full_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='basic_mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='memory_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='uss', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_memory_uss', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), AugAssign(target=Name(id='uss', ctx=Store()), op=Mult(), value=Call(func=Name(id='getpagesize', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='pfullmem', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='basic_mem', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='uss', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='raw', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_memory_maps', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='convert_oserror', ctx=Load()), args=[Name(id='err', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))])], orelse=[For(target=Tuple(elts=[Name(id='addr', ctx=Store()), Name(id='perm', ctx=Store()), Name(id='path', ctx=Store()), Name(id='rss', ctx=Store())], ctx=Store()), iter=Name(id='raw', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='convert_dos_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Name(id='hex', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='addr', ctx=Load()), Name(id='perm', ctx=Load()), Name(id='path', ctx=Load()), Name(id='rss', ctx=Load())], ctx=Load())))], orelse=[])], finalbody=[])], decorator_list=[]), FunctionDef(name='kill', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_kill', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='send_signal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sig')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='sig', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_kill', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='sig', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='CTRL_C_EVENT'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='CTRL_BREAK_EVENT'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='kill', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='sig', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='only SIGTERM, CTRL_C_EVENT and CTRL_BREAK_EVENT signals are supported on Windows')], keywords=[]))])])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='wait', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cext_timeout', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='INFINITE', ctx=Load()))], orelse=[Assign(targets=[Name(id='cext_timeout', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='timeout', ctx=Load()), op=Mult(), right=Constant(value=1000))], keywords=[]))]), Assign(targets=[Name(id='timer', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='time', ctx=Load()), Constant(value='monotonic'), Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stop_at', ctx=Store())], value=IfExp(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=BinOp(left=Call(func=Name(id='timer', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='timeout', ctx=Load())), orelse=Constant(value=None))), Try(body=[Assign(targets=[Name(id='exit_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_wait', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='cext_timeout', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='cext', ctx=Load()), attr='TimeoutExpired', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TimeoutExpired', ctx=Load()), args=[Name(id='timeout', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='cext', ctx=Load()), attr='TimeoutAbandoned', ctx=Load()), body=[Assign(targets=[Name(id='exit_code', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='delay', ctx=Store())], value=Constant(value=0.0001)), While(test=Constant(value=True), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), body=[Return(value=Name(id='exit_code', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='stop_at', ctx=Load()), Compare(left=Call(func=Name(id='timer', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Name(id='stop_at', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='TimeoutExpired', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[keyword(arg='pid', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())), keyword(arg='name', value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='delay', ctx=Load())], keywords=[])), Assign(targets=[Name(id='delay', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='delay', ctx=Load()), op=Mult(), right=Constant(value=2)), Constant(value=0.04)], keywords=[]))], orelse=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=4)], ctx=Load())]), body=[Return(value=Constant(value='NT AUTHORITY\\SYSTEM'))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='domain', ctx=Store()), Name(id='user', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_username', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='domain', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\\')), op=Add(), right=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[])))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='system', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_times', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=Name(id='created', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='create_time'), ctx=Load()), ctx=Load()))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='num_threads'), ctx=Load()), ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_threads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='thread_id', ctx=Store()), Name(id='utime', ctx=Store()), Name(id='stime', ctx=Store())], ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pthread', ctx=Load()), args=[Name(id='thread_id', ctx=Load()), Name(id='utime', ctx=Load()), Name(id='stime', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='system', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_times', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), body=[Raise()], orelse=[]), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='user', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='user_time'), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='system', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='kernel_time'), ctx=Load()), ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pcputimes', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='system', ctx=Load()), Constant(value=0.0), Constant(value=0.0)], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_suspend_or_resume', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_suspend_or_resume', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Constant(value=False)], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=4)], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cwd', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='retry_error_partial_copy', ctx=Load())]), FunctionDef(name='open_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=4)], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='raw_file_names', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_open_files', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), For(target=Name(id='_file', ctx=Store()), iter=Name(id='raw_file_names', ctx=Load()), body=[Assign(targets=[Name(id='_file', ctx=Store())], value=Call(func=Name(id='convert_dos_path', ctx=Load()), args=[Name(id='_file', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isfile_strict', ctx=Load()), args=[Name(id='_file', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='_file', ctx=Store())], value=Call(func=Name(id='py2_strencode', ctx=Load()), args=[Name(id='_file', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='popenfile', ctx=Load()), args=[Name(id='_file', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='connections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='inet')]), body=[Return(value=Call(func=Name(id='net_connections', ctx=Load()), args=[Name(id='kind', ctx=Load())], keywords=[keyword(arg='_pid', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_priority_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='Priority', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_priority_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='ionice_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_io_priority_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='IOPriority', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='ionice_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ioclass'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='value', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='value argument not accepted on Windows')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ioclass', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Name(id='IOPRIO_VERYLOW', ctx=Load()), Name(id='IOPRIO_LOW', ctx=Load()), Name(id='IOPRIO_NORMAL', ctx=Load()), Name(id='IOPRIO_HIGH', ctx=Load())], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a valid priority'), op=Mod(), right=Name(id='ioclass', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_io_priority_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='ioclass', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_io_counters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), body=[Raise()], orelse=[]), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_rcount'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_wcount'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_rbytes'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_wbytes'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_count_others'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='io_bytes_others'), ctx=Load()), ctx=Load())], ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='pio', ctx=Load()), args=[Starred(value=Name(id='ret', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='suspended', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_is_suspended', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=Name(id='suspended', ctx=Load()), body=[Return(value=Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_STOPPED', ctx=Load()))], orelse=[Return(value=Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_RUNNING', ctx=Load()))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_affinity_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='from_bitmask', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=64)], keywords=[]), ifs=[BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='i', ctx=Load())), op=BitAnd(), right=Name(id='x', ctx=Load()))], is_async=0)]))], decorator_list=[]), Assign(targets=[Name(id='bitmask', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='from_bitmask', ctx=Load()), args=[Name(id='bitmask', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_affinity_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='to_bitmask', args=arguments(posonlyargs=[], args=[arg(arg='ls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ls', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid argument %r'), op=Mod(), right=Name(id='ls', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='out', ctx=Store())], value=Constant(value=0)), For(target=Name(id='b', ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[AugAssign(target=Name(id='out', ctx=Store()), op=BitOr(), value=BinOp(left=Constant(value=2), op=Pow(), right=Name(id='b', ctx=Load())))], orelse=[]), Return(value=Name(id='out', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='allcpus', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='per_cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[If(test=Compare(left=Name(id='cpu', ctx=Load()), ops=[NotIn()], comparators=[Name(id='allcpus', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cpu', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='invalid CPU %r; an integer is required'), op=Mod(), right=Name(id='cpu', ctx=Load()))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid CPU %r'), op=Mod(), right=Name(id='cpu', ctx=Load()))], keywords=[]))])], orelse=[])], orelse=[]), Assign(targets=[Name(id='bitmask', ctx=Store())], value=Call(func=Name(id='to_bitmask', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='bitmask', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_num_handles', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Call(func=Name(id='is_permission_err', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='num_handles'), ctx=Load()), ctx=Load()))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctx_switches', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_proc_info', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='pinfo_map', ctx=Load()), slice=Constant(value='ctx_switches'), ctx=Load()), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pctxsw', ctx=Load()), args=[Name(id='ctx_switches', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], decorator_list=[])], type_ignores=[])