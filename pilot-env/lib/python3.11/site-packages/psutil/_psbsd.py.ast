Module(body=[Expr(value=Constant(value='FreeBSD, OpenBSD and NetBSD platforms implementation.')), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='xml.etree', names=[alias(name='ElementTree')], level=0), ImportFrom(names=[alias(name='_common')], level=1), ImportFrom(names=[alias(name='_psposix')], level=1), ImportFrom(names=[alias(name='_psutil_bsd', asname='cext')], level=1), ImportFrom(names=[alias(name='_psutil_posix', asname='cext_posix')], level=1), ImportFrom(module='_common', names=[alias(name='FREEBSD')], level=1), ImportFrom(module='_common', names=[alias(name='NETBSD')], level=1), ImportFrom(module='_common', names=[alias(name='OPENBSD')], level=1), ImportFrom(module='_common', names=[alias(name='AccessDenied')], level=1), ImportFrom(module='_common', names=[alias(name='NoSuchProcess')], level=1), ImportFrom(module='_common', names=[alias(name='ZombieProcess')], level=1), ImportFrom(module='_common', names=[alias(name='conn_tmap')], level=1), ImportFrom(module='_common', names=[alias(name='conn_to_ntuple')], level=1), ImportFrom(module='_common', names=[alias(name='debug')], level=1), ImportFrom(module='_common', names=[alias(name='memoize')], level=1), ImportFrom(module='_common', names=[alias(name='memoize_when_activated')], level=1), ImportFrom(module='_common', names=[alias(name='usage_percent')], level=1), ImportFrom(module='_compat', names=[alias(name='FileNotFoundError')], level=1), ImportFrom(module='_compat', names=[alias(name='PermissionError')], level=1), ImportFrom(module='_compat', names=[alias(name='ProcessLookupError')], level=1), ImportFrom(module='_compat', names=[alias(name='which')], level=1), Assign(targets=[Name(id='__extra__all__', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='FREEBSD', ctx=Load()), body=[Assign(targets=[Name(id='PROC_STATUSES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='SIDL', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SRUN', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSLEEP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSTOP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SZOMB', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SWAIT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SLOCK', ctx=Load())], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_IDLE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_RUNNING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_SLEEPING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_STOPPED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_WAITING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_LOCKED', ctx=Load())]))], orelse=[If(test=Name(id='OPENBSD', ctx=Load()), body=[Assign(targets=[Name(id='PROC_STATUSES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='SIDL', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSLEEP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSTOP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SDEAD', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SZOMB', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SRUN', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SONPROC', ctx=Load())], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_IDLE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_SLEEPING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_STOPPED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_WAKING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_RUNNING', ctx=Load())]))], orelse=[If(test=Name(id='NETBSD', ctx=Load()), body=[Assign(targets=[Name(id='PROC_STATUSES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='SIDL', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSLEEP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SSTOP', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SZOMB', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SRUN', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='SONPROC', ctx=Load())], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_IDLE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_SLEEPING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_STOPPED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_WAKING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_RUNNING', ctx=Load())]))], orelse=[])])]), Assign(targets=[Name(id='TCP_STATUSES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_ESTABLISHED', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_SYN_SENT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_SYN_RECEIVED', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_FIN_WAIT_1', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_FIN_WAIT_2', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_TIME_WAIT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_CLOSED', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_CLOSE_WAIT', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_LAST_ACK', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_LISTEN', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='TCPS_CLOSING', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='PSUTIL_CONN_NONE', ctx=Load())], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_ESTABLISHED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_SENT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_RECV', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT1', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT2', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_TIME_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LAST_ACK', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LISTEN', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_NONE', ctx=Load())])), Assign(targets=[Name(id='PAGESIZE', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='getpagesize', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='AF_LINK', ctx=Store())], value=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='AF_LINK', ctx=Load())), Assign(targets=[Name(id='HAS_PER_CPU_TIMES', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='per_cpu_times')], keywords=[])), Assign(targets=[Name(id='HAS_PROC_NUM_THREADS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='proc_num_threads')], keywords=[])), Assign(targets=[Name(id='HAS_PROC_OPEN_FILES', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='proc_open_files')], keywords=[])), Assign(targets=[Name(id='HAS_PROC_NUM_FDS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='proc_num_fds')], keywords=[])), Assign(targets=[Name(id='kinfo_proc_map', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='ppid', value=Constant(value=0)), keyword(arg='status', value=Constant(value=1)), keyword(arg='real_uid', value=Constant(value=2)), keyword(arg='effective_uid', value=Constant(value=3)), keyword(arg='saved_uid', value=Constant(value=4)), keyword(arg='real_gid', value=Constant(value=5)), keyword(arg='effective_gid', value=Constant(value=6)), keyword(arg='saved_gid', value=Constant(value=7)), keyword(arg='ttynr', value=Constant(value=8)), keyword(arg='create_time', value=Constant(value=9)), keyword(arg='ctx_switches_vol', value=Constant(value=10)), keyword(arg='ctx_switches_unvol', value=Constant(value=11)), keyword(arg='read_io_count', value=Constant(value=12)), keyword(arg='write_io_count', value=Constant(value=13)), keyword(arg='user_time', value=Constant(value=14)), keyword(arg='sys_time', value=Constant(value=15)), keyword(arg='ch_user_time', value=Constant(value=16)), keyword(arg='ch_sys_time', value=Constant(value=17)), keyword(arg='rss', value=Constant(value=18)), keyword(arg='vms', value=Constant(value=19)), keyword(arg='memtext', value=Constant(value=20)), keyword(arg='memdata', value=Constant(value=21)), keyword(arg='memstack', value=Constant(value=22)), keyword(arg='cpunum', value=Constant(value=23)), keyword(arg='name', value=Constant(value=24))])), Assign(targets=[Name(id='svmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='svmem'), List(elts=[Constant(value='total'), Constant(value='available'), Constant(value='percent'), Constant(value='used'), Constant(value='free'), Constant(value='active'), Constant(value='inactive'), Constant(value='buffers'), Constant(value='cached'), Constant(value='shared'), Constant(value='wired')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='scputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scputimes'), List(elts=[Constant(value='user'), Constant(value='nice'), Constant(value='system'), Constant(value='idle'), Constant(value='irq')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmem'), List(elts=[Constant(value='rss'), Constant(value='vms'), Constant(value='text'), Constant(value='data'), Constant(value='stack')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pfullmem', ctx=Store())], value=Name(id='pmem', ctx=Load())), Assign(targets=[Name(id='pcputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pcputimes'), List(elts=[Constant(value='user'), Constant(value='system'), Constant(value='children_user'), Constant(value='children_system')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmmap_grouped', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_grouped'), Constant(value='path rss, private, ref_count, shadow_count')], keywords=[])), Assign(targets=[Name(id='pmmap_ext', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_ext'), Constant(value='addr, perms path rss, private, ref_count, shadow_count')], keywords=[])), If(test=Name(id='FREEBSD', ctx=Load()), body=[Assign(targets=[Name(id='sdiskio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes'), Constant(value='read_time'), Constant(value='write_time'), Constant(value='busy_time')], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='sdiskio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes')], ctx=Load())], keywords=[]))]), FunctionDef(name='virtual_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='virtual_mem', ctx=Load()), args=[], keywords=[])), If(test=Name(id='NETBSD', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='free', ctx=Store()), Name(id='active', ctx=Store()), Name(id='inactive', ctx=Store()), Name(id='wired', ctx=Store()), Name(id='cached', ctx=Store())], ctx=Store())], value=Name(id='mem', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/meminfo'), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Buffers:')], keywords=[]), body=[Assign(targets=[Name(id='buffers', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'MemShared:')], keywords=[]), body=[Assign(targets=[Name(id='shared', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])])], orelse=[])]), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='active', ctx=Load()), op=Add(), right=Name(id='wired', ctx=Load()))), Assign(targets=[Name(id='avail', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='used', ctx=Load())))], orelse=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='free', ctx=Store()), Name(id='active', ctx=Store()), Name(id='inactive', ctx=Store()), Name(id='wired', ctx=Store()), Name(id='cached', ctx=Store()), Name(id='buffers', ctx=Store()), Name(id='shared', ctx=Store())], ctx=Store())], value=Name(id='mem', ctx=Load())), Assign(targets=[Name(id='avail', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='inactive', ctx=Load()), op=Add(), right=Name(id='cached', ctx=Load())), op=Add(), right=Name(id='free', ctx=Load()))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='active', ctx=Load()), op=Add(), right=Name(id='wired', ctx=Load())), op=Add(), right=Name(id='cached', ctx=Load())))]), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='avail', ctx=Load())), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Return(value=Call(func=Name(id='svmem', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='avail', ctx=Load()), Name(id='percent', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='active', ctx=Load()), Name(id='inactive', ctx=Load()), Name(id='buffers', ctx=Load()), Name(id='cached', ctx=Load()), Name(id='shared', ctx=Load()), Name(id='wired', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='swap_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='System swap memory as (total, used, free, sin, sout) namedtuple.')), Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store()), Name(id='sin', ctx=Store()), Name(id='sout', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='swap_mem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[Name(id='used', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sswap', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='percent', ctx=Load()), Name(id='sin', ctx=Load()), Name(id='sout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return system per-CPU times as a namedtuple.')), Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='nice', ctx=Store()), Name(id='system', ctx=Store()), Name(id='idle', ctx=Store()), Name(id='irq', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='scputimes', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='nice', ctx=Load()), Name(id='system', ctx=Load()), Name(id='idle', ctx=Load()), Name(id='irq', ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Name(id='HAS_PER_CPU_TIMES', ctx=Load()), body=[FunctionDef(name='per_cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return system CPU times as a namedtuple.')), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cpu_t', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='per_cpu_times', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='nice', ctx=Store()), Name(id='system', ctx=Store()), Name(id='idle', ctx=Store()), Name(id='irq', ctx=Store())], ctx=Store())], value=Name(id='cpu_t', ctx=Load())), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='scputimes', ctx=Load()), args=[Name(id='user', ctx=Load()), Name(id='nice', ctx=Load()), Name(id='system', ctx=Load()), Name(id='idle', ctx=Load()), Name(id='irq', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])], orelse=[FunctionDef(name='per_cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return system CPU times as a namedtuple.')), If(test=Compare(left=Call(func=Name(id='cpu_count_logical', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=List(elts=[Call(func=Name(id='cpu_times', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='per_cpu_times', ctx=Load()), attr='__called__', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='supported only starting from FreeBSD 8')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='per_cpu_times', ctx=Load()), attr='__called__', ctx=Store())], value=Constant(value=True)), Return(value=List(elts=[Call(func=Name(id='cpu_times', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='per_cpu_times', ctx=Load()), attr='__called__', ctx=Store())], value=Constant(value=False))]), FunctionDef(name='cpu_count_logical', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of logical CPUs in the system.')), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), If(test=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())]), body=[FunctionDef(name='cpu_count_cores', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Call(func=Name(id='cpu_count_logical', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value=1), orelse=Constant(value=None)))], decorator_list=[])], orelse=[FunctionDef(name='cpu_count_cores', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of CPU cores in the system.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_topology', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='</groups>')], keywords=[])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Constant(value=9))), ctx=Load())), Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Name(id='ElementTree', ctx=Load()), attr='fromstring', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='group/children/group/cpu')], keywords=[])], keywords=[]), Constant(value=None)]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='ret', ctx=Load())), body=[If(test=Compare(left=Call(func=Name(id='cpu_count_logical', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])]), FunctionDef(name='cpu_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return various CPU stats as a named tuple.')), If(test=Name(id='FREEBSD', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='ctxsw', ctx=Store()), Name(id='intrs', ctx=Store()), Name(id='soft_intrs', ctx=Store()), Name(id='syscalls', ctx=Store()), Name(id='traps', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Name(id='NETBSD', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='ctxsw', ctx=Store()), Name(id='intrs', ctx=Store()), Name(id='soft_intrs', ctx=Store()), Name(id='syscalls', ctx=Store()), Name(id='traps', ctx=Store()), Name(id='faults', ctx=Store()), Name(id='forks', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/stat'), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'intr')], keywords=[]), body=[Assign(targets=[Name(id='intrs', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], orelse=[If(test=Name(id='OPENBSD', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='ctxsw', ctx=Store()), Name(id='intrs', ctx=Store()), Name(id='soft_intrs', ctx=Store()), Name(id='syscalls', ctx=Store()), Name(id='traps', ctx=Store()), Name(id='faults', ctx=Store()), Name(id='forks', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]))], orelse=[])])]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpustats', ctx=Load()), args=[Name(id='ctxsw', ctx=Load()), Name(id='intrs', ctx=Load()), Name(id='soft_intrs', ctx=Load()), Name(id='syscalls', ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Name(id='FREEBSD', ctx=Load()), body=[FunctionDef(name='cpu_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return frequency metrics for CPUs. As of Dec 2018 only\n        CPU 0 appears to be supported by FreeBSD and all other cores\n        match the frequency of CPU 0.\n        ')), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='num_cpus', ctx=Store())], value=Call(func=Name(id='cpu_count_logical', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_cpus', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='current', ctx=Store()), Name(id='available_freq', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[Name(id='cpu', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Name(id='available_freq', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='min_freq', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='available_freq', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IndexError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='min_freq', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='max_freq', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='available_freq', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IndexError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='max_freq', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpufreq', ctx=Load()), args=[Name(id='current', ctx=Load()), Name(id='min_freq', ctx=Load()), Name(id='max_freq', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])], orelse=[If(test=Name(id='OPENBSD', ctx=Load()), body=[FunctionDef(name='cpu_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='curr', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=List(elts=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpufreq', ctx=Load()), args=[Name(id='curr', ctx=Load()), Constant(value=0.0), Constant(value=0.0)], keywords=[])], ctx=Load()))], decorator_list=[])], orelse=[])]), FunctionDef(name='disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='all')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="Return mounted disk partitions as a list of namedtuples.\n    'all' argument is ignored, see:\n    https://github.com/giampaolo/psutil/issues/906.\n    ")), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='partitions', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[])), For(target=Name(id='partition', ctx=Store()), iter=Name(id='partitions', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='device', ctx=Store()), Name(id='mountpoint', ctx=Store()), Name(id='fstype', ctx=Store()), Name(id='opts', ctx=Store())], ctx=Store())], value=Name(id='partition', ctx=Load())), Assign(targets=[Name(id='maxfile', ctx=Store()), Name(id='maxpath', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sdiskpart', ctx=Load()), args=[Name(id='device', ctx=Load()), Name(id='mountpoint', ctx=Load()), Name(id='fstype', ctx=Load()), Name(id='opts', ctx=Load()), Name(id='maxfile', ctx=Load()), Name(id='maxpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='disk_usage', ctx=Store())], value=Attribute(value=Name(id='_psposix', ctx=Load()), attr='disk_usage', ctx=Load())), Assign(targets=[Name(id='disk_io_counters', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_io_counters', ctx=Load())), Assign(targets=[Name(id='net_io_counters', ctx=Store())], value=Attribute(value=Name(id='cext', ctx=Load()), attr='net_io_counters', ctx=Load())), Assign(targets=[Name(id='net_if_addrs', ctx=Store())], value=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_addrs', ctx=Load())), FunctionDef(name='net_if_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get NIC stats (isup, duplex, speed, mtu).')), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='net_io_counters', ctx=Load()), args=[], keywords=[]), attr='keys', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='mtu', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_mtu', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_flags', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='duplex', ctx=Store()), Name(id='speed', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_duplex_speed', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENODEV', ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_common', ctx=Load()), Constant(value='NicDuplex')], keywords=[]), body=[Assign(targets=[Name(id='duplex', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='NicDuplex', ctx=Load()), args=[Name(id='duplex', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='output_flags', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='isup', ctx=Store())], value=Compare(left=Constant(value='running'), ops=[In()], comparators=[Name(id='flags', ctx=Load())])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='snicstats', ctx=Load()), args=[Name(id='isup', ctx=Load()), Name(id='duplex', ctx=Load()), Name(id='speed', ctx=Load()), Name(id='mtu', ctx=Load()), Name(id='output_flags', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='net_connections', args=arguments(posonlyargs=[], args=[arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='System-wide network connections.')), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='_common', ctx=Load()), attr='conn_tmap', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid %r kind argument; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='kind', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='conn_tmap', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='families', ctx=Store()), Name(id='types', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='conn_tmap', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=Name(id='OPENBSD', ctx=Load()), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Name(id='families', ctx=Load()), Name(id='types', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='NETBSD', ctx=Load()), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[]))])]), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='fd', ctx=Store()), Name(id='fam', ctx=Store()), Name(id='type', ctx=Store()), Name(id='laddr', ctx=Store()), Name(id='raddr', ctx=Store()), Name(id='status', ctx=Store()), Name(id='pid', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), If(test=BoolOp(op=Or(), values=[Name(id='NETBSD', ctx=Load()), Name(id='FREEBSD', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='fam', ctx=Load()), ops=[NotIn()], comparators=[Name(id='families', ctx=Load())]), Compare(left=Name(id='type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='types', ctx=Load())])]), body=[Continue()], orelse=[])], orelse=[]), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Name(id='conn_to_ntuple', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='fam', ctx=Load()), Name(id='type', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='TCP_STATUSES', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Name(id='FREEBSD', ctx=Load()), body=[FunctionDef(name='sensors_battery', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return battery info.')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='percent', ctx=Store()), Name(id='minsleft', ctx=Store()), Name(id='power_plugged', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Compare(left=Name(id='power_plugged', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), If(test=Name(id='power_plugged', ctx=Load()), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='minsleft', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()))], orelse=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=BinOp(left=Name(id='minsleft', ctx=Load()), op=Mult(), right=Constant(value=60)))])]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sbattery', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='secsleft', ctx=Load()), Name(id='power_plugged', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sensors_temperatures', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return CPU cores temperatures if available, else an empty dict.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_cpus', ctx=Store())], value=Call(func=Name(id='cpu_count_logical', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_cpus', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='current', ctx=Store()), Name(id='high', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='sensors_cpu_temperature', ctx=Load()), args=[Name(id='cpu', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='high', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='high', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='Core %s'), op=Mod(), right=Name(id='cpu', ctx=Load()))), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='coretemp'), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='shwtemp', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='current', ctx=Load()), Name(id='high', ctx=Load()), Name(id='high', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])], orelse=[]), FunctionDef(name='boot_time', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The system boot time expressed in seconds since the epoch.')), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='users', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return currently connected users as a list of namedtuples.')), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='tty', ctx=Store()), Name(id='hostname', ctx=Store()), Name(id='tstamp', ctx=Store()), Name(id='pid', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assert(test=Name(id='OPENBSD', ctx=Load())), Assign(targets=[Name(id='pid', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='tty', ctx=Load()), ops=[Eq()], comparators=[Constant(value='~')]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='suser', ctx=Load()), args=[Name(id='user', ctx=Load()), BoolOp(op=Or(), values=[Name(id='tty', ctx=Load()), Constant(value=None)]), Name(id='hostname', ctx=Load()), Name(id='tstamp', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[]), FunctionDef(name='_pid_0_exists', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='Process', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NoSuchProcess', ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='AccessDenied', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[Name(id='memoize', ctx=Load())]), FunctionDef(name='pids', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a list of PIDs currently running on the system.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='OPENBSD', ctx=Load()), Compare(left=Constant(value=0), ops=[NotIn()], comparators=[Name(id='ret', ctx=Load())]), Call(func=Name(id='_pid_0_exists', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), If(test=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())]), body=[FunctionDef(name='pid_exists', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if pid exists.')), Assign(targets=[Name(id='exists', ctx=Store())], value=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='exists', ctx=Load())), body=[Return(value=Compare(left=Name(id='pid', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='pids', ctx=Load()), args=[], keywords=[])]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[])], orelse=[Assign(targets=[Name(id='pid_exists', ctx=Store())], value=Attribute(value=Name(id='_psposix', ctx=Load()), attr='pid_exists', ctx=Load()))]), FunctionDef(name='is_zombie', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_oneshot_info', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ctx=Load())), Return(value=Compare(left=Call(func=Attribute(value=Name(id='PROC_STATUSES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='st', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='wrap_exceptions', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decorator which translates bare OSError exceptions into\n    NoSuchProcess and AccessDenied.\n    ')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ProcessLookupError', ctx=Load()), body=[If(test=Call(func=Name(id='is_zombie', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ZombieProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))])]), ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Call(func=Name(id='pids', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], orelse=[Raise()])], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='wrap_exceptions_procfs', args=arguments(posonlyargs=[], args=[arg(arg='inst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Same as above, for routines relying on reading /proc fs.')), Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ProcessLookupError', ctx=Load()), Name(id='FileNotFoundError', ctx=Load())], ctx=Load()), body=[If(test=Call(func=Name(id='is_zombie', ctx=Load()), args=[Attribute(value=Name(id='inst', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ZombieProcess', ctx=Load()), args=[Attribute(value=Name(id='inst', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='inst', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='inst', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='inst', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='inst', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))])]), ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='inst', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='inst', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), ClassDef(name='Process', bases=[], keywords=[], body=[Expr(value=Constant(value='Wrapper class around underlying C implementation.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='pid'), Constant(value='_name'), Constant(value='_ppid'), Constant(value='_cache')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_assert_alive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise NSP if the process disappeared on us.')), Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='oneshot', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Retrieves multiple process info in one shot as a raw tuple.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_oneshot_info', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='kinfo_proc_map', ctx=Load())], keywords=[])])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='oneshot_enter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='oneshot_exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ctx=Load())), Return(value=IfExp(test=Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='name', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='FREEBSD', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_exe', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='NETBSD', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='wrap_exceptions_procfs', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='readlink', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/exe'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[]))])], orelse=[Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[])), If(test=Name(id='cmdline', ctx=Load()), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='which', ctx=Load()), args=[Subscript(value=Name(id='cmdline', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value='')]))], orelse=[Return(value=Constant(value=''))])])])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='OPENBSD', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Name(id='NETBSD', ctx=Load()), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load())]), body=[If(test=Call(func=Name(id='is_zombie', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ZombieProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[BinOp(left=Constant(value='ignoring %r and returning an empty list'), op=Mod(), right=Name(id='err', ctx=Load()))], keywords=[])), Return(value=List(elts=[], ctx=Load()))])])], orelse=[Raise()])])], orelse=[], finalbody=[])], orelse=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))])])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_environ', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tty_nr', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ttynr'), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='tmap', ctx=Store())], value=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='get_terminal_map', ctx=Load()), args=[], keywords=[])), Try(body=[Return(value=Subscript(value=Name(id='tmap', ctx=Load()), slice=Name(id='tty_nr', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ppid'), ctx=Load()), ctx=Load())), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='uids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='puids', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='real_uid'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='effective_uid'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='saved_uid'), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='gids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pgids', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='real_gid'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='effective_gid'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='saved_gid'), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pcputimes', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='user_time'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='sys_time'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ch_user_time'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ch_sys_time'), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), If(test=Name(id='FREEBSD', ctx=Load()), body=[FunctionDef(name='cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='cpunum'), ctx=Load()), ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), FunctionDef(name='memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='pmem', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='rss'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='vms'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='memtext'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='memdata'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='memstack'), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), Assign(targets=[Name(id='memory_full_info', ctx=Store())], value=Name(id='memory_info', ctx=Load())), FunctionDef(name='create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='create_time'), ctx=Load()), ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='HAS_PROC_NUM_THREADS', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_num_threads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='threads', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pctxsw', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ctx_switches_vol'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='ctx_switches_unvol'), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_threads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='thread_id', ctx=Store()), Name(id='utime', ctx=Store()), Name(id='stime', ctx=Store())], ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pthread', ctx=Load()), args=[Name(id='thread_id', ctx=Load()), Name(id='utime', ctx=Load()), Name(id='stime', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='OPENBSD', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_alive', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='connections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='inet')]), body=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[NotIn()], comparators=[Name(id='conn_tmap', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid %r kind argument; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='kind', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='conn_tmap', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='families', ctx=Store()), Name(id='types', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='conn_tmap', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='NETBSD', ctx=Load()), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='OPENBSD', ctx=Load()), body=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_connections', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='families', ctx=Load()), Name(id='types', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_connections', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='families', ctx=Load()), Name(id='types', ctx=Load())], keywords=[]))])]), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='fd', ctx=Store()), Name(id='fam', ctx=Store()), Name(id='type', ctx=Store()), Name(id='laddr', ctx=Store()), Name(id='raddr', ctx=Store()), Name(id='status', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())), If(test=Name(id='NETBSD', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='fam', ctx=Load()), ops=[NotIn()], comparators=[Name(id='families', ctx=Load())]), Compare(left=Name(id='type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='types', ctx=Load())])]), body=[Continue()], orelse=[])], orelse=[]), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Name(id='conn_to_ntuple', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='fam', ctx=Load()), Name(id='type', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='TCP_STATUSES', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_alive', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='wait', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='wait_pid', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='timeout', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='getpriority', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='setpriority', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[]), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='PROC_STATUSES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='code', ctx=Load()), Constant(value='?')], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rawtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oneshot', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pio', ctx=Load()), args=[Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='read_io_count'), ctx=Load()), ctx=Load()), Subscript(value=Name(id='rawtuple', ctx=Load()), slice=Subscript(value=Name(id='kinfo_proc_map', ctx=Load()), slice=Constant(value='write_io_count'), ctx=Load()), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return process current working directory.')), If(test=BoolOp(op=And(), values=[Name(id='OPENBSD', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=''))], orelse=[If(test=BoolOp(op=Or(), values=[Name(id='NETBSD', ctx=Load()), Name(id='HAS_PROC_OPEN_FILES', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cwd', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[IfExp(test=Name(id='FREEBSD', ctx=Load()), body=Constant(value='supported only starting from FreeBSD 8'), orelse=Constant(value=''))], keywords=[]))])])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), Assign(targets=[Name(id='nt_mmap_grouped', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='mmap'), Constant(value='path rss, private, ref_count, shadow_count')], keywords=[])), Assign(targets=[Name(id='nt_mmap_ext', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='mmap'), Constant(value='addr, perms path rss, private, ref_count, shadow_count')], keywords=[])), FunctionDef(name='_not_implemented', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[]), If(test=Name(id='HAS_PROC_OPEN_FILES', ctx=Load()), body=[FunctionDef(name='open_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return files opened by process as a list of namedtuples.')), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_open_files', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='popenfile', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='fd', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='path', ctx=Store()), Name(id='fd', ctx=Store())], ctx=Store()), iter=Name(id='rawlist', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[Assign(targets=[Name(id='open_files', ctx=Store())], value=Name(id='_not_implemented', ctx=Load()))]), If(test=Name(id='HAS_PROC_NUM_FDS', ctx=Load()), body=[FunctionDef(name='num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of file descriptors opened by this process.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_num_fds', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=Name(id='NETBSD', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_assert_alive', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[Assign(targets=[Name(id='num_fds', ctx=Store())], value=Name(id='_not_implemented', ctx=Load()))]), If(test=Name(id='FREEBSD', ctx=Load()), body=[FunctionDef(name='cpu_affinity_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_affinity_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cpus')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='allcpus', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='per_cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Name(id='cpus', ctx=Load()), body=[If(test=Compare(left=Name(id='cpu', ctx=Load()), ops=[NotIn()], comparators=[Name(id='allcpus', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid CPU #%i (choose between %s)'), op=Mod(), right=Tuple(elts=[Name(id='cpu', ctx=Load()), Name(id='allcpus', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='cpus', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EDEADLK', ctx=Load())], ctx=Load())]), body=[For(target=Name(id='cpu', ctx=Store()), iter=Name(id='cpus', ctx=Load()), body=[If(test=Compare(left=Name(id='cpu', ctx=Load()), ops=[NotIn()], comparators=[Name(id='allcpus', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid CPU #%i (choose between %s)'), op=Mod(), right=Tuple(elts=[Name(id='cpu', ctx=Load()), Name(id='allcpus', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_memory_maps', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resource'), arg(arg='limits')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='limits', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_getrlimit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='limits', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='second argument must be a (soft, hard) tuple, got %s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='limits', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='soft', ctx=Store()), Name(id='hard', ctx=Store())], ctx=Store())], value=Name(id='limits', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_setrlimit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='resource', ctx=Load()), Name(id='soft', ctx=Load()), Name(id='hard', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[])], decorator_list=[])], type_ignores=[])