Module(body=[Expr(value=Constant(value='Tests for detecting function memory leaks (typically the ones\nimplemented in C). It does so by calling a function many times and\nchecking whether process memory usage keeps increasing between\ncalls or over time.\nNote that this may produce false positives (especially on Windows\nfor some reason).\nPyPy appears to be completely unstable for this framework, probably\nbecause of how its JIT handles memory, so tests are skipped.\n')), ImportFrom(module='__future__', names=[alias(name='print_function')], level=0), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), Import(names=[alias(name='psutil._common')]), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='SUNOS')], level=0), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='ProcessLookupError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='super')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CPU_AFFINITY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CPU_FREQ')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_ENVIRON')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_IONICE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_MEMORY_MAPS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_NET_IO_COUNTERS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_PROC_CPU_NUM')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_PROC_IO_COUNTERS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_RLIMIT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_FANS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_TEMPERATURES')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TestMemoryLeak')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='create_sockets')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='get_testfn')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='process_namespace')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='skip_on_access_denied')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='system_namespace')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), Assign(targets=[Name(id='cext', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='cext', ctx=Load())), Assign(targets=[Name(id='thisproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='FEW_TIMES', ctx=Store())], value=Constant(value=5)), FunctionDef(name='fewtimes_if_linux', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decorator for those Linux functions which are implemented in pure\n    Python, and which we want to run faster.\n    ')), FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Name(id='LINUX', ctx=Load()), body=[Assign(targets=[Name(id='before', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='times', ctx=Load())), Try(body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='times', ctx=Store())], value=Name(id='FEW_TIMES', ctx=Load())), Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='times', ctx=Store())], value=Name(id='before', ctx=Load()))])], orelse=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), Return(value=Name(id='decorator', ctx=Load()))], decorator_list=[]), ClassDef(name='TestProcessObjectLeaks', bases=[Name(id='TestMemoryLeak', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test leaks of Process class methods.')), Assign(targets=[Name(id='proc', ctx=Store())], value=Name(id='thisproc', ctx=Load())), FunctionDef(name='test_coverage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='process_namespace', ctx=Load()), args=[Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='test_class_coverage', ctx=Load()), args=[Name(id='self', ctx=Load()), BinOp(left=Attribute(value=Name(id='ns', ctx=Load()), attr='getters', ctx=Load()), op=Add(), right=Attribute(value=Name(id='ns', ctx=Load()), attr='setters', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cmdline', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='exe', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='ppid', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_uids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='uids', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_gids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='gids', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='status', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_nice', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='nice', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_nice_set', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='niceness', ctx=Store())], value=Call(func=Attribute(value=Name(id='thisproc', ctx=Load()), attr='nice', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='nice', ctx=Load()), args=[Name(id='niceness', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ionice', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='ionice', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_IONICE', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_ionice_set', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='thisproc', ctx=Load()), attr='ionice', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='ionice', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='ionice', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_CLASS_NONE', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='cext', ctx=Load()), attr='proc_ioprio_set', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Name(id='OSError', ctx=Load()), Name(id='fun', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_IONICE', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='io_counters', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_PROC_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='username', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='username', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='POSIX', ctx=Load()), Constant(value='worthless on POSIX')], keywords=[])]), FunctionDef(name='test_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='create_time', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_threads', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='skip_on_access_denied', ctx=Load()), args=[], keywords=[keyword(arg='only_if', value=Name(id='OPENBSD', ctx=Load()))])]), FunctionDef(name='test_num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_handles', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), FunctionDef(name='test_num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_fds', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_ctx_switches', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='threads', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='skip_on_access_denied', ctx=Load()), args=[], keywords=[keyword(arg='only_if', value=Name(id='OPENBSD', ctx=Load()))])]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_num', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_PROC_CPU_NUM', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='memory_info', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_memory_full_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='memory_full_info', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='terminal', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='times', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Name(id='FEW_TIMES', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='times', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='resume', ctx=Load())], keywords=[keyword(arg='times', value=Name(id='times', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cwd', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_affinity', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_affinity', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_AFFINITY', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_cpu_affinity_set', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='affinity', ctx=Store())], value=Call(func=Attribute(value=Name(id='thisproc', ctx=Load()), attr='cpu_affinity', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_affinity', ctx=Load()), args=[Name(id='affinity', ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_affinity', ctx=Load()), args=[List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_AFFINITY', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_open_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[]), Constant(value='w')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='open_files', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='memory_maps', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_MEMORY_MAPS', ctx=Load())), Constant(value='not supported')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='rlimit', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_RLIMIT', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_rlimit_set', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='limit', ctx=Store())], value=Call(func=Attribute(value=Name(id='thisproc', ctx=Load()), attr='rlimit', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='rlimit', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load()), Name(id='limit', ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='rlimit', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_RLIMIT', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='create_sockets', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='kind', ctx=Store())], value=IfExp(test=Name(id='SUNOS', ctx=Load()), body=Constant(value='inet'), orelse=Constant(value='all'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='connections', ctx=Load()), args=[Name(id='kind', ctx=Load())], keywords=[]))], keywords=[]))])], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='WINDOWS', ctx=Load()), Constant(value='worthless on WINDOWS')], keywords=[])]), FunctionDef(name='test_environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='environ', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_ENVIRON', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_proc_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])])], decorator_list=[]), ClassDef(name='TestTerminatedProcessLeaks', bases=[Name(id='TestProcessObjectLeaks', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Repeat the tests above looking for leaks occurring when dealing\n    with terminated processes raising NoSuchProcess exception.\n    The C functions are still invoked but will follow different code\n    paths. We'll check those code paths.\n    ")), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='setUpClass', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='subp', ctx=Store())], value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='proc', ctx=Load()), attr='kill', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='tearDownClass', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='subp', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[FunctionDef(name='test_kill', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='kill', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_terminate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='terminate', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_suspend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='suspend', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_resume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='resume', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_wait', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='wait', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_proc_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='call', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_info', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ProcessLookupError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='call', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[])], decorator_list=[]), ClassDef(name='TestProcessDualImplementation', bases=[Name(id='TestMemoryLeak', ctx=Load())], keywords=[], body=[FunctionDef(name='test_cmdline_peb_true', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='use_peb', value=Constant(value=True))]))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cmdline_peb_false', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='use_peb', value=Constant(value=False))]))], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), ClassDef(name='TestModuleFunctionsLeaks', bases=[Name(id='TestMemoryLeak', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test leaks of psutil module functions.')), FunctionDef(name='test_coverage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='system_namespace', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='test_class_coverage', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='ns', ctx=Load()), attr='all', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))]))], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_count_cores', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))]))], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_per_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]))], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='MACOS', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='arm64')])]), Constant(value='skipped due to #1892')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_getloadavg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='getloadavg', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='getloadavg', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), FunctionDef(name='test_virtual_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_swap_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='SUNOS', ctx=Load()), Constant(value='worthless on SUNOS (uses a subprocess)')], keywords=[])]), FunctionDef(name='test_pid_exists', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='times', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Name(id='FEW_TIMES', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='times', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[keyword(arg='times', value=Name(id='times', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='times', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Name(id='FEW_TIMES', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='times', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Constant(value='.')], keywords=[]))], keywords=[keyword(arg='times', value=Name(id='times', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_disk_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='nowrap', value=Constant(value=False))]))], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='LINUX', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/proc/diskstats')], keywords=[]))]), Constant(value='/proc/diskstats not available on this Linux version')], keywords=[]), Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_pids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_net_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='nowrap', value=Constant(value=False))]))], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_NET_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_net_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='all'))])), With(items=[withitem(context_expr=Call(func=Name(id='create_sockets', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='all'))]))], keywords=[]))])], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='MACOS', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)])]), Constant(value='need root access')], keywords=[])]), FunctionDef(name='test_net_if_addrs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tolerance', ctx=Store())], value=IfExp(test=Name(id='WINDOWS', ctx=Load()), body=BinOp(left=Constant(value=80), op=Mult(), right=Constant(value=1024)), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='tolerance', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load())], keywords=[keyword(arg='tolerance', value=Name(id='tolerance', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_sensors_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_BATTERY', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_temperatures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_TEMPERATURES', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_fans', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_fans', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_FANS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='fewtimes_if_linux', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_users', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_set_debug', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_set_debug', ctx=Load()), args=[Constant(value=False)], keywords=[]))], keywords=[]))], decorator_list=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[FunctionDef(name='test_win_service_iter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_enumerate', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_win_service_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='test_win_service_get_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_iter', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_config', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_win_service_get_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_iter', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_status', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_win_service_get_description', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_iter', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='winservice_query_descr', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[])], orelse=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])