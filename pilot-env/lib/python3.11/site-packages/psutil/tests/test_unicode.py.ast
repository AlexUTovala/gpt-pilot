Module(body=[Expr(value=Constant(value='Notes about unicode handling in psutil\n======================================.\n\nStarting from version 5.3.0 psutil adds unicode support, see:\nhttps://github.com/giampaolo/psutil/issues/1040\nThe notes below apply to *any* API returning a string such as\nprocess exe(), cwd() or username():\n\n* all strings are encoded by using the OS filesystem encoding\n  (sys.getfilesystemencoding()) which varies depending on the platform\n  (e.g. "UTF-8" on macOS, "mbcs" on Win)\n* no API call is supposed to crash with UnicodeDecodeError\n* instead, in case of badly encoded data returned by the OS, the\n  following error handlers are used to replace the corrupted characters in\n  the string:\n    * Python 3: sys.getfilesystemencodeerrors() (PY 3.6+) or\n      "surrogatescape" on POSIX and "replace" on Windows\n    * Python 2: "replace"\n* on Python 2 all APIs return bytes (str type), never unicode\n* on Python 2, you can go back to unicode by doing:\n\n    >>> unicode(p.exe(), sys.getdefaultencoding(), errors="replace")\n\nFor a detailed explanation of how psutil handles unicode see #1040.\n\nTests\n=====\n\nList of APIs returning or dealing with a string:\n(\'not tested\' means they are not tested to deal with non-ASCII strings):\n\n* Process.cmdline()\n* Process.connections(\'unix\')\n* Process.cwd()\n* Process.environ()\n* Process.exe()\n* Process.memory_maps()\n* Process.name()\n* Process.open_files()\n* Process.username()             (not tested)\n\n* disk_io_counters()             (not tested)\n* disk_partitions()              (not tested)\n* disk_usage(str)\n* net_connections(\'unix\')\n* net_if_addrs()                 (not tested)\n* net_if_stats()                 (not tested)\n* net_io_counters()              (not tested)\n* sensors_fans()                 (not tested)\n* sensors_temperatures()         (not tested)\n* users()                        (not tested)\n\n* WindowsService.binpath()       (not tested)\n* WindowsService.description()   (not tested)\n* WindowsService.display_name()  (not tested)\n* WindowsService.name()          (not tested)\n* WindowsService.status()        (not tested)\n* WindowsService.username()      (not tested)\n\nIn here we create a unicode path with a funky non-ASCII name and (where\npossible) make psutil return it back (e.g. on name(), exe(), open_files(),\netc.) and make sure that:\n\n* psutil never crashes with UnicodeDecodeError\n* the returned path matches\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='warnings')]), ImportFrom(module='contextlib', names=[alias(name='closing')], level=0), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='BSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='u')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='APPVEYOR')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='ASCII_FS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='CI_TESTING')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CONNECTIONS_UNIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_ENVIRON')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_MEMORY_MAPS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='INVALID_UNICODE_SUFFIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYPY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TESTFN_PREFIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='UNICODE_SUFFIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='bind_unix_socket')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='chdir')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='copyload_shared_lib')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='create_exe')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='get_testfn')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_mkdir')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_rmpath')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='serialrun')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='skip_on_access_denied')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), If(test=Name(id='APPVEYOR', ctx=Load()), body=[FunctionDef(name='safe_rmpath', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='psutil.tests', names=[alias(name='safe_rmpath', asname='rm')], level=0), Try(body=[Return(value=Call(func=Name(id='rm', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='WindowsError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='print_exc', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[])], orelse=[]), FunctionDef(name='try_unicode', args=arguments(posonlyargs=[], args=[arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if both the fs and the subprocess module can\n    deal with a unicode file name.\n    ')), Assign(targets=[Name(id='sproc', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Name(id='suffix', ctx=Load()))])), Try(body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='create_exe', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[keyword(arg='cmd', value=List(elts=[Name(id='testfn', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='testfn', ctx=Load()), BinOp(left=Name(id='testfn', ctx=Load()), op=Add(), right=Constant(value='-2'))], keywords=[])), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[BinOp(left=Name(id='testfn', ctx=Load()), op=Add(), right=Constant(value='-2'))], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='UnicodeEncodeError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[If(test=Compare(left=Name(id='sproc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='sproc', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))])], decorator_list=[]), ClassDef(name='BaseUnicodeTest', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='funky_suffix', ctx=Store())], value=Constant(value=None)), FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='try_unicode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value="can't handle unicode str")], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestFSAPIs', bases=[Name(id='BaseUnicodeTest', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test FS APIs with a funky, valid, UTF8 path name.')), Assign(targets=[Name(id='funky_suffix', ctx=Store())], value=Name(id='UNICODE_SUFFIX', ctx=Load())), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='funky_name', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Attribute(value=Name(id='cls', ctx=Load()), attr='funky_suffix', ctx=Load()))])), Expr(value=Call(func=Name(id='create_exe', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='funky_name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='funky_name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='expect_exact_path_match', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='here', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Constant(value='.'), orelse=Call(func=Name(id='u', ctx=Load()), args=[Constant(value='.')], keywords=[]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='here', ctx=Load())], keywords=[])]))])], decorator_list=[]), FunctionDef(name='test_proc_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[keyword(arg='cmd', value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exe', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='exe', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='exe', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expect_exact_path_match', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='exe', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_proc_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[keyword(arg='cmd', value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expect_exact_path_match', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_proc_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[keyword(arg='cmd', value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[])), For(target=Name(id='part', ctx=Store()), iter=Name(id='cmdline', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='part', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expect_exact_path_match', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='cmdline', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_proc_cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dname', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load()), op=Add(), right=Constant(value='2'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='safe_rmpath', ctx=Load()), Name(id='dname', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='safe_mkdir', ctx=Load()), args=[Name(id='dname', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='chdir', ctx=Load()), args=[Name(id='dname', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cwd', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), Name(id='str', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expect_exact_path_match', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='cwd', ctx=Load()), Name(id='dname', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_proc_open_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load()), Constant(value='rb')], keywords=[]))], body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=BinOp(left=Name(id='new', ctx=Load()), op=Sub(), right=Name(id='start', ctx=Load())), attr='pop', ctx=Load()), args=[], keywords=[]), attr='path', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='BSD', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='path', ctx=Load()))]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='open_files on BSD is broken')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expect_exact_path_match', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), Name(id='WINDOWS', ctx=Load())]), Constant(value='fails on PYPY + WINDOWS')], keywords=[])]), FunctionDef(name='test_proc_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load()))])), Try(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[If(test=Name(id='PY3', ctx=Load()), body=[Raise()], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='not supported')], keywords=[]))])])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Call(func=Name(id='closing', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='connections', ctx=Load()), args=[Constant(value='unix')], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), FunctionDef(name='test_net_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='find_sock', args=arguments(posonlyargs=[], args=[arg(arg='cons')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='conn', ctx=Store()), iter=Name(id='cons', ctx=Load()), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Name(id='TESTFN_PREFIX', ctx=Load())], keywords=[]), body=[Return(value=Name(id='conn', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='connection not found')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load()))])), Try(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[If(test=Name(id='PY3', ctx=Load()), body=[Raise()], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='not supported')], keywords=[]))])])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Call(func=Name(id='closing', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='cons', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unix'))])), Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Name(id='find_sock', ctx=Load()), args=[Name(id='cons', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CONNECTIONS_UNIX', ctx=Load())), Constant(value="can't list UNIX sockets")], keywords=[]), Call(func=Name(id='skip_on_access_denied', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dname', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='funky_name', ctx=Load()), op=Add(), right=Constant(value='2'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='safe_rmpath', ctx=Load()), Name(id='dname', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='safe_mkdir', ctx=Load()), args=[Name(id='dname', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Name(id='dname', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='copyload_shared_lib', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load()))]), optional_vars=Name(id='funky_path', ctx=Store()))], body=[FunctionDef(name='normpath', args=arguments(posonlyargs=[], args=[arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='libpaths', ctx=Store())], value=ListComp(elt=Call(func=Name(id='normpath', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='libpaths', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='libpaths', ctx=Load()), ifs=[Compare(left=Name(id='TESTFN_PREFIX', ctx=Load()), ops=[In()], comparators=[Name(id='x', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='normpath', ctx=Load()), args=[Name(id='funky_path', ctx=Load())], keywords=[]), Name(id='libpaths', ctx=Load())], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Name(id='libpaths', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_MEMORY_MAPS', ctx=Load())), Constant(value='not supported')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), Constant(value='ctypes does not support unicode on PY2')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='PYPY', ctx=Load()), Constant(value='unstable on PYPY')], keywords=[])])], decorator_list=[Name(id='serialrun', ctx=Load()), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='ASCII_FS', ctx=Load()), Constant(value='ASCII fs')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load()))]), Constant(value='too much trouble on PYPY2')], keywords=[])]), ClassDef(name='TestFSAPIsWithInvalidPath', bases=[Name(id='TestFSAPIs', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test FS APIs with a funky, invalid path name.')), Assign(targets=[Name(id='funky_suffix', ctx=Store())], value=Name(id='INVALID_UNICODE_SUFFIX', ctx=Load())), FunctionDef(name='expect_exact_path_match', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='CI_TESTING', ctx=Load()), Constant(value='unreliable on CI')], keywords=[])]), ClassDef(name='TestNonFSAPIS', bases=[Name(id='BaseUnicodeTest', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode tests for non fs-related APIs.')), Assign(targets=[Name(id='funky_suffix', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Name(id='UNICODE_SUFFIX', ctx=Load()), orelse=Constant(value='è'))), FunctionDef(name='test_proc_environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='FUNNY_ARG'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load())), Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[keyword(arg='env', value=Name(id='env', ctx=Load()))])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='environ', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='FUNNY_ARG'), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='funky_suffix', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_ENVIRON', ctx=Load())), Constant(value='not supported')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), Name(id='WINDOWS', ctx=Load())]), Constant(value='segfaults on PYPY + WINDOWS')], keywords=[])])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])