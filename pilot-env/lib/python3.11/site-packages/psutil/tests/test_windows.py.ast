Module(body=[Expr(value=Constant(value='Windows specific tests.')), Import(names=[alias(name='datetime')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='glob')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='re')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileNotFoundError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='super')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='which')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='APPVEYOR')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GITHUB_ACTIONS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='IS_64BIT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYPY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_DISK_USAGE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_SYS_MEM')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='mock')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PYPY', ctx=Load()))]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), Import(names=[alias(name='win32api')]), Import(names=[alias(name='win32con')]), Import(names=[alias(name='win32process')]), Import(names=[alias(name='wmi')])])], orelse=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[ImportFrom(module='psutil._pswindows', names=[alias(name='convert_oserror')], level=0)], orelse=[]), Assign(targets=[Name(id='cext', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='cext', ctx=Load())), ClassDef(name='WindowsTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='PYPY', ctx=Load()), Constant(value='pywin32 not available on PYPY')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='GITHUB_ACTIONS', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load()))]), Constant(value='pywin32 broken on GITHUB + PY2')], keywords=[])]), FunctionDef(name='powershell', args=arguments(posonlyargs=[], args=[arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Currently not used, but available just in case. Usage:\n\n    >>> powershell(\n        "Get-CIMInstance Win32_PageFileUsage | Select AllocatedBaseSize")\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='powershell.exe')], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='powershell.exe not available')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cmdline', ctx=Store())], value=BinOp(left=Constant(value='powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive '), op=Add(), right=BinOp(left=Constant(value='-NoProfile -WindowStyle Hidden -Command "%s"'), op=Mod(), right=Name(id='cmd', ctx=Load())))), Return(value=Call(func=Name(id='sh', ctx=Load()), args=[Name(id='cmdline', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='wmic', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='what'), arg(arg='converter')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='int', ctx=Load())]), body=[Expr(value=Constant(value='Currently not used, but available just in case. Usage:\n\n    >>> wmic("Win32_OperatingSystem", "FreePhysicalMemory")\n    2134124534\n    ')), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='wmic path %s get %s'), op=Mod(), right=Tuple(elts=[Name(id='path', ctx=Load()), Name(id='what', ctx=Load())], ctx=Load()))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='converter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Constant(value=','), ops=[In()], comparators=[Name(id='what', ctx=Load())]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], orelse=[Return(value=Name(id='data', ctx=Load()))])], decorator_list=[]), ClassDef(name='TestCpuAPIs', bases=[Name(id='WindowsTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_cpu_count_vs_NUMBER_OF_PROCESSORS', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num_cpus', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='NUMBER_OF_PROCESSORS'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='num_cpus', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Compare(left=Constant(value='NUMBER_OF_PROCESSORS'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Constant(value='NUMBER_OF_PROCESSORS env var is not available')], keywords=[])]), FunctionDef(name='test_cpu_count_vs_GetSystemInfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sys_value', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetSystemInfo', ctx=Load()), args=[], keywords=[]), slice=Constant(value=5), ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='sys_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count_logical_vs_wmi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='procs', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='proc', ctx=Load()), attr='NumberOfLogicalProcessors', ctx=Load()), generators=[comprehension(target=Name(id='proc', ctx=Store()), iter=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='Win32_Processor', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Name(id='procs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count_cores_vs_wmi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cores', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='proc', ctx=Load()), attr='NumberOfCores', ctx=Load()), generators=[comprehension(target=Name(id='proc', ctx=Store()), iter=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='Win32_Processor', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))]), Name(id='cores', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count_vs_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='proc', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='Win32_Processor', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='CurrentClockSpeed', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), attr='current', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='MaxClockSpeed', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), attr='max', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestSystemAPIs', bases=[Name(id='WindowsTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_nic_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='ipconfig /all')], keywords=[])), Assign(targets=[Name(id='nics', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True))]), attr='keys', ctx=Load()), args=[], keywords=[])), For(target=Name(id='nic', ctx=Store()), iter=Name(id='nics', ctx=Load()), body=[If(test=Compare(left=Constant(value='pseudo-interface'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='nic', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='-')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='nic', ctx=Load()), ops=[NotIn()], comparators=[Name(id='out', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value="%r nic wasn't found in 'ipconfig /all' output"), op=Mod(), right=Name(id='nic', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_total_phymem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_ComputerSystem', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='TotalPhysicalMemory', ctx=Load())], keywords=[]), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_free_phymem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_PerfRawData_PerfOS_Memory', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='AvailableBytes', ctx=Load())], keywords=[]), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_total_swapmem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_PerfRawData_PerfOS_Memory', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='CommitLimit', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Constant(value=0), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Constant(value=0), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_percent_swapmem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_PerfRawData_PerfOS_PagingFile', ctx=Load()), args=[], keywords=[keyword(arg='Name', value=Constant(value='_Total'))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='percentSwap', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='PercentUsage', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=100)), op=Div(), right=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='PercentUsage_Base', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Name(id='percentSwap', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=5))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Constant(value=100)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_pids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wmi_pids', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='ProcessId', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='w', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='psutil_pids', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='wmi_pids', ctx=Load()), Name(id='psutil_pids', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='APPVEYOR', ctx=Load()), Constant(value='test not relieable on appveyor')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_disks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ps_parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))])), Assign(targets=[Name(id='wmi_parts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_LogicalDisk', ctx=Load()), args=[], keywords=[])), For(target=Name(id='ps_part', ctx=Store()), iter=Name(id='ps_parts', ctx=Load()), body=[For(target=Name(id='wmi_part', ctx=Store()), iter=Name(id='wmi_parts', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='ps_part', ctx=Load()), attr='device', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='')], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='wmi_part', ctx=Load()), attr='DeviceID', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='ps_part', ctx=Load()), attr='mountpoint', ctx=Load())), body=[Break()], orelse=[]), If(test=Compare(left=Constant(value='cdrom'), ops=[In()], comparators=[Attribute(value=Name(id='ps_part', ctx=Load()), attr='opts', ctx=Load())]), body=[Break()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='ps_part', ctx=Load()), attr='mountpoint', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='A:')], keywords=[]), body=[Break()], orelse=[]), Try(body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='ps_part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='wmi_part', ctx=Load()), attr='Size', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='wmi_free', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='wmi_part', ctx=Load()), attr='FreeSpace', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='wmi_free', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), op=Sub(), right=Name(id='wmi_free', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[BinOp(left=BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='psutil=%s, wmi=%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='wmi_free', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value="can't find partition %s"), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='ps_part', ctx=Load())], keywords=[]))], keywords=[]))])], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='disk', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Constant(value='cdrom'), ops=[In()], comparators=[Attribute(value=Name(id='disk', ctx=Load()), attr='opts', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetDiskFreeSpaceEx', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='total', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='used', ctx=Load()), BinOp(left=Attribute(value=Name(id='psutil_value', ctx=Load()), attr='total', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='psutil_value', ctx=Load()), attr='free', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sys_value', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value='\\')), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetLogicalDriveStrings', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\\\x00')], keywords=[]), ifs=[BoolOp(op=And(), values=[Name(id='x', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='A:')], keywords=[]))])], is_async=0)])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='mountpoint', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='mountpoint', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='A:')], keywords=[]))], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='sys_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ps_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='wmi_adapters', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_NetworkAdapter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wmi_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='wmi_adapter', ctx=Store()), iter=Name(id='wmi_adapters', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='wmi_names', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='wmi_adapter', ctx=Load()), attr='Name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wmi_names', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='wmi_adapter', ctx=Load()), attr='NetConnectionID', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[BinOp(left=Name(id='ps_names', ctx=Load()), op=BitAnd(), right=Name(id='wmi_names', ctx=Load())), BinOp(left=Constant(value='no common entries in %s, %s'), op=Mod(), right=Tuple(elts=[Name(id='ps_names', ctx=Load()), Name(id='wmi_names', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='wmi_os', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_OperatingSystem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wmi_btime_str', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Subscript(value=Name(id='wmi_os', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='LastBootUpTime', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='wmi_btime_dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Name(id='wmi_btime_str', ctx=Load()), Constant(value='%Y%m%d%H%M%S')], keywords=[])), Assign(targets=[Name(id='psutil_dt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='diff', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='wmi_btime_dt', ctx=Load()), op=Sub(), right=Name(id='psutil_dt', ctx=Load())), attr='total_seconds', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Name(id='diff', ctx=Load()), Constant(value=5)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_boot_time_fluctuation', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.boot_time')], keywords=[keyword(arg='return_value', value=Constant(value=5))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]), Constant(value=5)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.boot_time')], keywords=[keyword(arg='return_value', value=Constant(value=4))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]), Constant(value=5)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.boot_time')], keywords=[keyword(arg='return_value', value=Constant(value=6))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]), Constant(value=5)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.boot_time')], keywords=[keyword(arg='return_value', value=Constant(value=333))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]), Constant(value=333)], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestSensorsBattery', bases=[Name(id='WindowsTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_has_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Subscript(value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetPwrCapabilities', ctx=Load()), args=[], keywords=[]), slice=Constant(value='SystemBatteriesPresent'), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='battery_wmi', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='query', ctx=Load()), args=[Constant(value='select * from Win32_Battery')], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='battery_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='battery_psutil', ctx=Load()), attr='percent', ctx=Load()), Attribute(value=Name(id='battery_wmi', ctx=Load()), attr='EstimatedChargeRemaining', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), FunctionDef(name='test_power_plugged', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='battery_wmi', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='query', ctx=Load()), args=[Constant(value='select * from Win32_Battery')], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='battery_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='battery_psutil', ctx=Load()), attr='power_plugged', ctx=Load()), Compare(left=Attribute(value=Name(id='battery_wmi', ctx=Load()), attr='BatteryStatus', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), FunctionDef(name='test_emulate_no_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.sensors_battery')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=0), Constant(value=128), Constant(value=0), Constant(value=0)], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_connected', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.sensors_battery')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='secsleft', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_charging', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.sensors_battery')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=0), Constant(value=8), Constant(value=0), Constant(value=0)], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='secsleft', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_secs_left_unknown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pswindows.cext.sensors_battery')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='secsleft', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestProcess', bases=[Name(id='WindowsTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_issue_24', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='kill', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_special_pid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Constant(value=4)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Constant(value='System')], keywords=[])), Expr(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='username', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='create_time', ctx=Load()), args=[], keywords=[]), Constant(value=0.0)], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='rss', ctx=Store()), Name(id='vms', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='memory_info', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='vista'), Constant(value='win-7'), Constant(value='win7')], ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Name(id='rss', ctx=Load()), Constant(value=0)], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='test_send_signal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='send_signal', ctx=Load()), Attribute(value=Name(id='signal', ctx=Load()), attr='SIGINT', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_handles_increment', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='before', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_handles', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='after', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_handles', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='after', ctx=Load()), BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_handles', ctx=Load()), args=[], keywords=[]), Name(id='before', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ctrl_signals', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='send_signal', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_C_EVENT', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='send_signal', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_BREAK_EVENT', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='kill', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='send_signal', ctx=Load()), Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_C_EVENT', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='send_signal', ctx=Load()), Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_BREAK_EVENT', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetUserNameEx', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='NameSamCompatible', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='$')], keywords=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='running as service account')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='username', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[ ]+'), Constant(value=' '), Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='GetCommandLine', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq(), NotEq()], comparators=[Constant(value='"'), Subscript(value=Name(id='psutil_value', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys_value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='"'), Constant(value=''), Constant(value=2)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='sys_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_nice', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32process', ctx=Load()), attr='GetPriorityClass', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='nice', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Name(id='sys_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32process', ctx=Load()), attr='GetProcessMemoryInfo', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_info', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='PeakWorkingSetSize'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='peak_wset', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='WorkingSetSize'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='wset', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='QuotaPeakPagedPoolUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='peak_paged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='QuotaPagedPoolUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='paged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='QuotaPeakNonPagedPoolUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='peak_nonpaged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='QuotaNonPagedPoolUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='nonpaged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='PagefileUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='pagefile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='PeakPagefileUsage'), ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='peak_pagefile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='rss', ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='wset', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='vms', ctx=Load()), Attribute(value=Name(id='psutil_value', ctx=Load()), attr='pagefile', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_wait', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32process', ctx=Load()), attr='GetExitCodeProcess', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Name(id='sys_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_affinity', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='from_bitmask', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=64)], keywords=[]), ifs=[BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='i', ctx=Load())), op=BitAnd(), right=Name(id='x', ctx=Load()))], is_async=0)]))], decorator_list=[]), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Name(id='from_bitmask', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='win32process', ctx=Load()), attr='GetProcessAffinityMask', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='cpu_affinity', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Name(id='sys_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32api', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Attribute(value=Name(id='win32con', ctx=Load()), attr='PROCESS_QUERY_INFORMATION', ctx=Load()), Attribute(value=Name(id='win32con', ctx=Load()), attr='FALSE', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='win32api', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32process', ctx=Load()), attr='GetProcessIoCounters', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='io_counters', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='read_count', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='ReadOperationCount'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='write_count', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='WriteOperationCount'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='read_bytes', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='ReadTransferCount'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='write_bytes', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='WriteTransferCount'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='other_count', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='OtherOperationCount'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_value', ctx=Load()), attr='other_bytes', ctx=Load()), Subscript(value=Name(id='sys_value', ctx=Load()), slice=Constant(value='OtherTransferCount'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='ctypes')]), Import(names=[alias(name='ctypes.wintypes')]), Assign(targets=[Name(id='PROCESS_QUERY_INFORMATION', ctx=Store())], value=Constant(value=1024)), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='OpenProcess', ctx=Load()), args=[Name(id='PROCESS_QUERY_INFORMATION', ctx=Load()), Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='CloseHandle', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='hndcnt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetProcessHandleCount', ctx=Load()), args=[Name(id='handle', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='hndcnt', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='sys_value', ctx=Store())], value=Attribute(value=Name(id='hndcnt', ctx=Load()), attr='value', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='num_handles', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Name(id='sys_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_error_partial_copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='WindowsError', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='exc', ctx=Load()), attr='winerror', ctx=Store())], value=Constant(value=299)), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_cwd')], keywords=[keyword(arg='side_effect', value=Name(id='exc', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='cwd', ctx=Load())], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=5)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pid', ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Constant(value=99999))), Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='proc', ctx=Load()), attr='exe', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestProcessWMI', bases=[Name(id='WindowsTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Compare Process API results with WMI.')), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='w', ctx=Load()), attr='Caption', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='exe', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='ExecutablePath', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='GITHUB_ACTIONS', ctx=Load()), Constant(value='unreliable path on GITHUB_ACTIONS')], keywords=[])]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='CommandLine', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='"'), Constant(value='')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='domain', ctx=Store()), Name(id='_', ctx=Store()), Name(id='username', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='GetOwner', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='username', ctx=Store())], value=BinOp(left=Constant(value='%s\\%s'), op=Mod(), right=Tuple(elts=[Name(id='domain', ctx=Load()), Name(id='username', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='username', ctx=Load()), args=[], keywords=[]), Name(id='username', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_memory_rss', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rss', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='memory_info', ctx=Load()), args=[], keywords=[]), attr='rss', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='rss', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='WorkingSetSize', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_memory_vms', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='vms', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='memory_info', ctx=Load()), args=[], keywords=[]), attr='vms', ctx=Load())), Assign(targets=[Name(id='wmi_usage', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='PageFileUsage', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='vms', ctx=Load()), ops=[NotEq()], comparators=[Name(id='wmi_usage', ctx=Load())]), Compare(left=Name(id='vms', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Name(id='wmi_usage', ctx=Load()), op=Mult(), right=Constant(value=1024))])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='wmi=%s, psutil=%s'), op=Mod(), right=Tuple(elts=[Name(id='wmi_usage', ctx=Load()), Name(id='vms', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='wmi', ctx=Load()), attr='WMI', ctx=Load()), args=[], keywords=[]), attr='Win32_Process', ctx=Load()), args=[], keywords=[keyword(arg='ProcessId', value=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wmic_create', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='w', ctx=Load()), attr='CreationDate', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_create', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y%m%d%H%M%S'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='create_time', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='wmic_create', ctx=Load()), Name(id='psutil_create', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestDualProcessImplementation', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Certain APIs on Windows have 2 internal implementations, one\n    based on documented Windows APIs, another one based\n    NtQuerySystemInformation() which gets called as fallback in\n    case the first fails because of limited permission error.\n    Here we test that the two methods return the exact same value,\n    see:\n    https://github.com/giampaolo/psutil/issues/304.\n    ')), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mem_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_info', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_memory_info')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='msg')], keywords=[]))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Assign(targets=[Name(id='mem_2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_info', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='mem_1', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='mem_2', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='mem_1', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='mem_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='mem_2', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Subscript(value=Name(id='mem_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='mem_2', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=512))]))], orelse=[]), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctime', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='create_time', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_times')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='msg')], keywords=[]))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='create_time', ctx=Load()), args=[], keywords=[]), Name(id='ctime', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cpu_times_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='cpu_times', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_times')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='msg')], keywords=[]))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Assign(targets=[Name(id='cpu_times_2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu_times_1', ctx=Load()), attr='user', ctx=Load()), Attribute(value=Name(id='cpu_times_2', ctx=Load()), attr='user', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=0.01))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu_times_1', ctx=Load()), attr='system', ctx=Load()), Attribute(value=Name(id='cpu_times_2', ctx=Load()), attr='system', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=0.01))]))])], decorator_list=[]), FunctionDef(name='test_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='io_counters_1', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='io_counters', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_io_counters')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='msg')], keywords=[]))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Assign(targets=[Name(id='io_counters_2', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='io_counters', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='io_counters_1', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Subscript(value=Name(id='io_counters_1', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='io_counters_2', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=5))]))], orelse=[]), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num_handles', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='num_handles', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.proc_num_handles')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='msg')], keywords=[]))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='num_handles', ctx=Load()), args=[], keywords=[]), Name(id='num_handles', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='pid', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[keyword(arg='use_peb', value=Constant(value=True))])), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cmdline', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[keyword(arg='use_peb', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Assign(targets=[Name(id='err', ctx=Store())], value=Call(func=Name(id='convert_oserror', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='err', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise()], orelse=[])])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), ClassDef(name='RemoteProcessTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Certain functions require calling ReadProcessMemory.\n    This trivially works when called on the current process.\n    Check that this works on other processes, especially when they\n    have a different bitness.\n    ')), FunctionDef(name='find_other_interpreter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Constant(value='import sys; sys.stdout.write(str(sys.maxsize > 2**32))')), For(target=Name(id='filename', ctx=Store()), iter=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='C:\\Python*\\python.exe')], keywords=[]), body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[], keywords=[keyword(arg='args', value=List(elts=[Name(id='filename', ctx=Load()), Constant(value='-c'), Name(id='code', ctx=Load())], ctx=Load())), keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='output', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='IS_64BIT', ctx=Load()))], keywords=[])]), body=[Return(value=Name(id='filename', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), Assign(targets=[Name(id='test_args', ctx=Store())], value=List(elts=[Constant(value='-c'), Constant(value='import sys; sys.stdin.read()')], ctx=Load())), FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='setUp', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='other_python', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_other_interpreter', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='other_python', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='could not find interpreter with opposite bitness')], keywords=[]))], orelse=[]), If(test=Name(id='IS_64BIT', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python64', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python32', ctx=Store())], value=Name(id='other_python', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python64', ctx=Store())], value=Name(id='other_python', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python32', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()))]), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='THINK_OF_A_NUMBER'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proc32', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='python32', ctx=Load())], ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='test_args', ctx=Load()))], keywords=[keyword(arg='env', value=Name(id='env', ctx=Load())), keyword(arg='stdin', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proc64', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='python64', ctx=Load())], ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='test_args', ctx=Load()))], keywords=[keyword(arg='env', value=Name(id='env', ctx=Load())), keyword(arg='stdin', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='tearDown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='tearDown', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc32', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc64', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cmdline_32', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc32', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='test_args', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cmdline_64', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc64', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='test_args', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cwd_32', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc32', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cwd_64', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc64', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_environ_32', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc32', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='e', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='environ', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='THINK_OF_A_NUMBER'), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='e', ctx=Load()), slice=Constant(value='THINK_OF_A_NUMBER'), ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_environ_64', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc64', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='environ', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), ClassDef(name='TestServices', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_win_service_iter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='valid_statuses', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value='running'), Constant(value='paused'), Constant(value='start'), Constant(value='pause'), Constant(value='continue'), Constant(value='stop'), Constant(value='stopped')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid_start_types', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value='automatic'), Constant(value='manual'), Constant(value='disabled')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid_statuses', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value='running'), Constant(value='paused'), Constant(value='start_pending'), Constant(value='pause_pending'), Constant(value='continue_pending'), Constant(value='stop_pending'), Constant(value='stopped')], ctx=Load())], keywords=[])), For(target=Name(id='serv', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_iter', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='serv', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='display_name'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='username'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='status'), ctx=Load()), Name(id='valid_statuses', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='pid'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='pid'), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='binpath'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='username'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='start_type'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='start_type'), ctx=Load()), Name(id='valid_start_types', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='status'), ctx=Load()), Name(id='valid_statuses', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='description'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pid', ctx=Store())], value=Call(func=Attribute(value=Name(id='serv', ctx=Load()), attr='pid', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_get', ctx=Load()), args=[Call(func=Attribute(value=Name(id='serv', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='serv', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_win_service_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ERROR_SERVICE_DOES_NOT_EXIST', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='cext', ctx=Load()), attr='ERROR_SERVICE_DOES_NOT_EXIST', ctx=Load())), Assign(targets=[Name(id='ERROR_ACCESS_DENIED', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='cext', ctx=Load()), attr='ERROR_ACCESS_DENIED', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_iter', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_get', ctx=Load()), args=[BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='???'))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load()), attr='name', ctx=Load()), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='???'))], keywords=[])), Assign(targets=[Name(id='service', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='win_service_get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value='msg'), Constant(value=0), Name(id='ERROR_SERVICE_DOES_NOT_EXIST', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Name(id='ERROR_SERVICE_DOES_NOT_EXIST', ctx=Load()), Constant(value='msg')], ctx=Load()))]), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='WindowsError', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.winservice_query_status')], keywords=[keyword(arg='side_effect', value=Name(id='exc', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='service', ctx=Load()), attr='status', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.winservice_query_config')], keywords=[keyword(arg='side_effect', value=Name(id='exc', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='service', ctx=Load()), attr='username', ctx=Load())], keywords=[]))]), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Constant(value=0), Constant(value='msg'), Constant(value=0), Name(id='ERROR_ACCESS_DENIED', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Name(id='ERROR_ACCESS_DENIED', ctx=Load()), Constant(value='msg')], ctx=Load()))]), Assign(targets=[Name(id='exc', ctx=Store())], value=Call(func=Name(id='WindowsError', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.winservice_query_status')], keywords=[keyword(arg='side_effect', value=Name(id='exc', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Name(id='service', ctx=Load()), attr='status', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cext.winservice_query_config')], keywords=[keyword(arg='side_effect', value=Name(id='exc', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Name(id='service', ctx=Load()), attr='username', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='service', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='service', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='service', ctx=Load()), attr='display_name', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='service', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='service', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='service', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='service', ctx=Load()), attr='display_name', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='service', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Constant(value='WINDOWS only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])