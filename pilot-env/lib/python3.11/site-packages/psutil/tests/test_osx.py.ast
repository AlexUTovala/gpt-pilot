Module(body=[Expr(value=Constant(value='macOS specific tests.')), Import(names=[alias(name='platform')]), Import(names=[alias(name='re')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_DISK_USAGE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_SYS_MEM')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), If(test=Name(id='POSIX', ctx=Load()), body=[ImportFrom(module='psutil._psutil_posix', names=[alias(name='getpagesize')], level=0)], orelse=[]), FunctionDef(name='sysctl', args=arguments(posonlyargs=[], args=[arg(arg='cmdline')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expects a sysctl command with an argument and parse the result\n    returning only the value of interest.\n    ')), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Name(id='cmdline', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())), Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='result', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='vm_stat', args=arguments(posonlyargs=[], args=[arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Wrapper around 'vm_stat' cmdline utility.")), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='vm_stat')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='line not found')], keywords=[]))]), Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='\\d+'), Name(id='line', ctx=Load())], keywords=[]), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), op=Mult(), right=Call(func=Name(id='getpagesize', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), ClassDef(name='TestProcess', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_process_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ps -o lstart -p %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='start_ps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='STARTED'), Constant(value='')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='hhmmss', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='start_ps', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='year', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='start_ps', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='start_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='create_time', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='hhmmss', ctx=Load()), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%H:%M:%S'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Name(id='start_psutil', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='year', ctx=Load()), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Name(id='start_psutil', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MACOS', ctx=Load())), Constant(value='MACOS only')], keywords=[])]), ClassDef(name='TestSystemAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_disks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='df', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='df -k "%s"'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dev', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=4)), ctx=Load())), If(test=Compare(left=Name(id='dev', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='total', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='free', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='free', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Return(value=Tuple(elts=[Name(id='dev', ctx=Load()), Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load())], ctx=Load()))], decorator_list=[]), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=False))]), body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dev', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Name(id='df', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load()), Name(id='dev', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), Name(id='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_count_logical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.logicalcpu')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='num', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count_cores', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.physicalcpu')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='num', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='freq', ctx=Load()), attr='current', ctx=Load()), op=Mult(), right=Constant(value=1000)), op=Mult(), right=Constant(value=1000)), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.cpufrequency')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='freq', ctx=Load()), attr='min', ctx=Load()), op=Mult(), right=Constant(value=1000)), op=Mult(), right=Constant(value=1000)), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.cpufrequency_min')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='freq', ctx=Load()), attr='max', ctx=Load()), op=Mult(), right=Constant(value=1000)), op=Mult(), right=Constant(value=1000)), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.cpufrequency_max')], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='arm64')]), Constant(value='skipped due to #1892')], keywords=[])]), FunctionDef(name='test_vmem_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sysctl_hwphymem', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl hw.memsize')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='sysctl_hwphymem', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_vmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='free')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_active', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='active')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='active', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_inactive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='inactive')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='inactive', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_wired', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='wired')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='wired', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_swapmem_sin', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='Pageins')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='sin', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_swapmem_sout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_val', ctx=Store())], value=Call(func=Name(id='vm_stat', ctx=Load()), args=[Constant(value='Pageout')], keywords=[])), Assign(targets=[Name(id='psutil_val', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='sout', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='psutil_val', ctx=Load()), Name(id='vmstat_val', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ifconfig %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='isup', ctx=Load()), Compare(left=Constant(value='RUNNING'), ops=[In()], comparators=[Name(id='out', ctx=Load())])], keywords=[keyword(arg='msg', value=Name(id='out', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='mtu', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='mtu (\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_sensors_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='pmset -g batt')], keywords=[])), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='(\\d+)%'), Name(id='out', ctx=Load())], keywords=[]), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='drawing_from', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value="Now drawing from '([^']+)'"), Name(id='out', ctx=Load())], keywords=[]), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Compare(left=Name(id='drawing_from', ctx=Load()), ops=[Eq()], comparators=[Constant(value='AC Power')])), Assign(targets=[Name(id='psutil_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='power_plugged', ctx=Load()), Name(id='power_plugged', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='percent', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='percent', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MACOS', ctx=Load())), Constant(value='MACOS only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])