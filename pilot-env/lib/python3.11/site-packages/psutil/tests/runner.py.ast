Module(body=[Expr(value=Constant(value='Unit test runner, providing new features on top of unittest module:\n- colourized output\n- parallel run (UNIX only)\n- print failures/tracebacks on CTRL+C\n- re-run failed tests only (make test-failed).\n\nInvocation examples:\n- make test\n- make test-failed\n\nParallel:\n- make test-parallel\n- make test-process ARGS=--parallel\n')), ImportFrom(module='__future__', names=[alias(name='print_function')], level=0), Import(names=[alias(name='atexit')]), Import(names=[alias(name='optparse')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Try(body=[Import(names=[alias(name='ctypes')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ctypes', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='concurrencytest')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='concurrencytest', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil._common', names=[alias(name='hilite')], level=0), ImportFrom(module='psutil._common', names=[alias(name='print_color')], level=0), ImportFrom(module='psutil._common', names=[alias(name='term_supports_colors')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='super')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='CI_TESTING')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='import_module_by_path')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='print_sysinfo')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='reap_children')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_rmpath')], level=0), Assign(targets=[Name(id='VERBOSITY', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='FAILED_TESTS_FNAME', ctx=Store())], value=Constant(value='.failed-tests.txt')), Assign(targets=[Name(id='NWORKERS', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Constant(value=1)])), Assign(targets=[Name(id='USE_COLORS', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='CI_TESTING', ctx=Load())), Call(func=Name(id='term_supports_colors', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='HERE', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='loadTestsFromTestCase', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='defaultTestLoader', ctx=Load()), attr='loadTestsFromTestCase', ctx=Load())), FunctionDef(name='cprint', args=arguments(posonlyargs=[], args=[arg(arg='msg'), arg(arg='color'), arg(arg='bold'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=IfExp(test=Compare(left=Name(id='color', ctx=Load()), ops=[Eq()], comparators=[Constant(value='red')]), body=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), orelse=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())))], orelse=[]), If(test=Name(id='USE_COLORS', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_color', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='color', ctx=Load())], keywords=[keyword(arg='bold', value=Name(id='bold', ctx=Load())), keyword(arg='file', value=Name(id='file', ctx=Load()))]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))]))])], decorator_list=[]), ClassDef(name='TestLoader', bases=[], keywords=[], body=[Assign(targets=[Name(id='testdir', ctx=Store())], value=Name(id='HERE', ctx=Load())), Assign(targets=[Name(id='skip_files', ctx=Store())], value=List(elts=[Constant(value='test_memleaks.py')], ctx=Load())), If(test=Compare(left=Constant(value='WHEELHOUSE_UPLOADER_USERNAME'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='skip_files', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='test_osx.py'), Constant(value='test_linux.py'), Constant(value='test_posix.py')], ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='_get_testmods', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='testdir', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='testdir', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='test_')], keywords=[]), Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), Compare(left=Name(id='x', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_files', ctx=Load())])])], is_async=0)]))], decorator_list=[]), FunctionDef(name='_iter_testmod_classes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over all test files in this directory and return\n        all TestCase classes in them.\n        ')), For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_testmods', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='import_module_by_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load())], keywords=[])]), body=[Expr(value=Yield(value=Name(id='obj', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='all', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestSuite', ctx=Load()), args=[], keywords=[])), For(target=Name(id='obj', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_iter_testmod_classes', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Name(id='loadTestsFromTestCase', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='suite', ctx=Load()), attr='addTest', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='suite', ctx=Load()))], decorator_list=[]), FunctionDef(name='last_failed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestSuite', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='FAILED_TESTS_FNAME', ctx=Load())], keywords=[])), body=[Return(value=Name(id='suite', ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='FAILED_TESTS_FNAME', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]))]), For(target=Name(id='n', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='test', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='defaultTestLoader', ctx=Load()), attr='loadTestsFromName', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='suite', ctx=Load()), attr='addTest', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='suite', ctx=Load()))], decorator_list=[]), FunctionDef(name='from_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='defaultTestLoader', ctx=Load()), attr='loadTestsFromName', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ColouredResult', bases=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TextTestResult', ctx=Load())], keywords=[], body=[FunctionDef(name='addSuccess', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestResult', ctx=Load()), attr='addSuccess', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='test', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[Constant(value='OK'), Constant(value='green')], keywords=[]))], decorator_list=[]), FunctionDef(name='addError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test'), arg(arg='err')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestResult', ctx=Load()), attr='addError', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='test', ctx=Load()), Name(id='err', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[Constant(value='ERROR'), Constant(value='red')], keywords=[keyword(arg='bold', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='addFailure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test'), arg(arg='err')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestResult', ctx=Load()), attr='addFailure', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='test', ctx=Load()), Name(id='err', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[Constant(value='FAIL'), Constant(value='red')], keywords=[]))], decorator_list=[]), FunctionDef(name='addSkip', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='test'), arg(arg='reason')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestResult', ctx=Load()), attr='addSkip', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='test', ctx=Load()), Name(id='reason', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[BinOp(left=Constant(value='skipped: %s'), op=Mod(), right=Call(func=Attribute(value=Name(id='reason', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Constant(value='brown')], keywords=[]))], decorator_list=[]), FunctionDef(name='printErrorList', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='flavour'), arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flavour', ctx=Store())], value=Call(func=Name(id='hilite', ctx=Load()), args=[Name(id='flavour', ctx=Load()), Constant(value='red')], keywords=[keyword(arg='bold', value=Compare(left=Name(id='flavour', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ERROR')]))])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='printErrorList', ctx=Load()), args=[Name(id='flavour', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ColouredTextRunner', bases=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TextTestRunner', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A coloured text runner which also prints failed tests on\n    KeyboardInterrupt and save failed tests in a file so that they can\n    be re-run.\n    ')), Assign(targets=[Name(id='resultclass', ctx=Store())], value=IfExp(test=Name(id='USE_COLORS', ctx=Load()), body=Name(id='ColouredResult', ctx=Load()), orelse=Attribute(value=Name(id='unittest', ctx=Load()), attr='TextTestResult', ctx=Load()))), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='failed_tnames', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_makeResult', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_makeResult', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_write_last_failed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='failed_tnames', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='FAILED_TESTS_FNAME', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='tname', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='failed_tnames', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='tname', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='_save_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[])), body=[For(target=Name(id='t', ctx=Store()), iter=BinOp(left=Attribute(value=Name(id='result', ctx=Load()), attr='errors', ctx=Load()), op=Add(), right=Attribute(value=Name(id='result', ctx=Load()), attr='failures', ctx=Load())), body=[Assign(targets=[Name(id='tname', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='failed_tnames', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='tname', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='run', ctx=Load()), args=[Name(id='suite', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='SystemExit', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='runner', ctx=Load()), attr='result', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='printErrors', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_result', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], finalbody=[])], decorator_list=[]), FunctionDef(name='_exit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='success')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='success', ctx=Load()), body=[Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[Constant(value='SUCCESS'), Constant(value='green')], keywords=[keyword(arg='bold', value=Constant(value=True))])), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='FAILED_TESTS_FNAME', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[Constant(value='FAILED'), Constant(value='red')], keywords=[keyword(arg='bold', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_last_failed', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[Name(id='suite', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_exit', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ParallelRunner', bases=[Name(id='ColouredTextRunner', ctx=Load())], keywords=[], body=[FunctionDef(name='_parallelize', args=arguments(posonlyargs=[], args=[arg(arg='suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='fdopen', args=arguments(posonlyargs=[], args=[arg(arg='fd'), arg(arg='mode')], vararg=arg(arg='kwds'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='orig_fdopen', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='atexit', ctx=Load()), attr='register', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load())], keywords=[])), Return(value=Name(id='stream', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='orig_fdopen', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='fdopen', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='concurrencytest', ctx=Load()), attr='os', ctx=Load()), attr='fdopen', ctx=Store())], value=Name(id='fdopen', ctx=Load())), Assign(targets=[Name(id='forker', ctx=Store())], value=Call(func=Attribute(value=Name(id='concurrencytest', ctx=Load()), attr='fork_for_tests', ctx=Load()), args=[Name(id='NWORKERS', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='concurrencytest', ctx=Load()), attr='ConcurrentTestSuite', ctx=Load()), args=[Name(id='suite', ctx=Load()), Name(id='forker', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_split_suite', args=arguments(posonlyargs=[], args=[arg(arg='suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='serial', ctx=Store())], value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestSuite', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='parallel', ctx=Store())], value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestSuite', ctx=Load()), args=[], keywords=[])), For(target=Name(id='test', ctx=Store()), iter=Name(id='suite', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='countTestCases', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='test', ctx=Load()), Attribute(value=Name(id='unittest', ctx=Load()), attr='TestSuite', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='test_class', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='test', ctx=Load()), attr='_tests', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='__class__', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='test', ctx=Load()), Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='test_class', ctx=Store())], value=Name(id='test', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value="can't recognize type %r"), op=Mod(), right=Name(id='test', ctx=Load()))], keywords=[]))])])]), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='test_class', ctx=Load()), Constant(value='_serialrun'), Constant(value=False)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='serial', ctx=Load()), attr='addTest', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parallel', ctx=Load()), attr='addTest', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Tuple(elts=[Name(id='serial', ctx=Load()), Name(id='parallel', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ser_suite', ctx=Store()), Name(id='par_suite', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_split_suite', ctx=Load()), args=[Name(id='suite', ctx=Load())], keywords=[])), Assign(targets=[Name(id='par_suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parallelize', ctx=Load()), args=[Name(id='par_suite', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[BinOp(left=Constant(value='starting parallel tests using %s workers'), op=Mod(), right=Name(id='NWORKERS', ctx=Load())), Constant(value='green')], keywords=[keyword(arg='bold', value=Constant(value=True))])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='par', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[Name(id='par_suite', ctx=Load())], keywords=[])), Assign(targets=[Name(id='par_elapsed', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='t', ctx=Load()))), Assign(targets=[Name(id='orphans', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='children', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='orphans', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=1))])), If(test=Name(id='alive', ctx=Load()), body=[Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[BinOp(left=Constant(value='alive processes %s'), op=Mod(), right=Name(id='alive', ctx=Load())), Constant(value='red')], keywords=[])), Expr(value=Call(func=Name(id='reap_children', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ser', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_run', ctx=Load()), args=[Name(id='ser_suite', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ser_elapsed', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='t', ctx=Load()))), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='par', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[])), Compare(left=Call(func=Attribute(value=Name(id='ser_suite', ctx=Load()), attr='countTestCases', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='par', ctx=Load()), attr='printErrors', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='par_fails', ctx=Store()), Name(id='par_errs', ctx=Store()), Name(id='par_skips', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='par', ctx=Load()), attr='failures', ctx=Load()), Attribute(value=Name(id='par', ctx=Load()), attr='errors', ctx=Load()), Attribute(value=Name(id='par', ctx=Load()), attr='skipped', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='ser_fails', ctx=Store()), Name(id='ser_errs', ctx=Store()), Name(id='ser_skips', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ser', ctx=Load()), attr='failures', ctx=Load()), Attribute(value=Name(id='ser', ctx=Load()), attr='errors', ctx=Load()), Attribute(value=Name(id='ser', ctx=Load()), attr='skipped', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[BinOp(left=Constant(value='\n            +----------+----------+----------+----------+----------+----------+\n            |          |    total | failures |   errors |  skipped |     time |\n            +----------+----------+----------+----------+----------+----------+\n            | parallel |      %3s |      %3s |      %3s |      %3s |    %.2fs |\n            +----------+----------+----------+----------+----------+----------+\n            | serial   |      %3s |      %3s |      %3s |      %3s |    %.2fs |\n            +----------+----------+----------+----------+----------+----------+\n            '), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='par', ctx=Load()), attr='testsRun', ctx=Load()), Name(id='par_fails', ctx=Load()), Name(id='par_errs', ctx=Load()), Name(id='par_skips', ctx=Load()), Name(id='par_elapsed', ctx=Load()), Attribute(value=Name(id='ser', ctx=Load()), attr='testsRun', ctx=Load()), Name(id='ser_fails', ctx=Load()), Name(id='ser_errs', ctx=Load()), Name(id='ser_skips', ctx=Load()), Name(id='ser_elapsed', ctx=Load())], ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Ran %s tests in %.3fs using %s workers'), op=Mod(), right=Tuple(elts=[BinOp(left=Attribute(value=Name(id='par', ctx=Load()), attr='testsRun', ctx=Load()), op=Add(), right=Attribute(value=Name(id='ser', ctx=Load()), attr='testsRun', ctx=Load())), BinOp(left=Name(id='par_elapsed', ctx=Load()), op=Add(), right=Name(id='ser_elapsed', ctx=Load())), Name(id='NWORKERS', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='ok', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='par', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='ser', ctx=Load()), attr='wasSuccessful', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_exit', ctx=Load()), args=[Name(id='ok', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='get_runner', args=arguments(posonlyargs=[], args=[arg(arg='parallel')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='cprint', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value=' Running serial tests instead.')), Constant(value='red')], keywords=[]))], decorator_list=[]), If(test=Name(id='parallel', ctx=Load()), body=[If(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value="Can't run parallel tests on Windows.")], keywords=[]))], orelse=[If(test=Compare(left=Name(id='concurrencytest', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value='concurrencytest module is not installed.')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='NWORKERS', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value='Only 1 CPU available.')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='ParallelRunner', ctx=Load()), args=[], keywords=[keyword(arg='verbosity', value=Name(id='VERBOSITY', ctx=Load()))]))])])])], orelse=[]), Return(value=Call(func=Name(id='ColouredTextRunner', ctx=Load()), args=[], keywords=[keyword(arg='verbosity', value=Name(id='VERBOSITY', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='run_from_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='CI_TESTING', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_sysinfo', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='TestLoader', ctx=Load()), args=[], keywords=[]), attr='from_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='get_runner', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='suite', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_set_debug', ctx=Load()), args=[Constant(value=True)], keywords=[]))], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='setup', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='python3 -m psutil.tests [opts] [test-name]')), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionParser', ctx=Load()), args=[], keywords=[keyword(arg='usage', value=Name(id='usage', ctx=Load())), keyword(arg='description', value=Constant(value='run unit tests'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--last-failed')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='only run last failed tests'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--parallel')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='run tests in parallel'))])), Assign(targets=[Tuple(elts=[Name(id='opts', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='opts', ctx=Load()), attr='last_failed', ctx=Load())), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='FAILED_TESTS_FNAME', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='TestLoader', ctx=Load()), args=[], keywords=[])), If(test=Name(id='args', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_usage', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='from_name', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))])], orelse=[If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='last_failed', ctx=Load()), body=[Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='last_failed', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='suite', ctx=Store())], value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='all', ctx=Load()), args=[], keywords=[]))])]), If(test=Name(id='CI_TESTING', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_sysinfo', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='get_runner', ctx=Load()), args=[Attribute(value=Name(id='opts', ctx=Load()), attr='parallel', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='suite', ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])