Module(body=[Expr(value=Constant(value='Tests for system APIS.')), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='datetime')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='pprint')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='AIX')], level=0), ImportFrom(module='psutil', names=[alias(name='BSD')], level=0), ImportFrom(module='psutil', names=[alias(name='FREEBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='NETBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='SUNOS')], level=0), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileNotFoundError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='long')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='ASCII_FS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='CI_TESTING')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='DEVNULL')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GITHUB_ACTIONS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GLOBAL_TIMEOUT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CPU_FREQ')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_GETLOADAVG')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_NET_IO_COUNTERS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_FANS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_TEMPERATURES')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='IS_64BIT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='MACOS_12PLUS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYPY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='UNICODE_SUFFIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='check_net_address')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='enum')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='mock')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ClassDef(name='TestProcessAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_process_iter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='kill', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='ls', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load())))]), Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load())))])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.Process')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[]))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[])], keywords=[]), List(elts=[], ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.Process')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[]))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[])], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_prcess_iter_w_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[keyword(arg='attrs', value=List(elts=[Constant(value='pid')], ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='info', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), List(elts=[Constant(value='pid')], ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[keyword(arg='attrs', value=List(elts=[Constant(value='foo')], ctx=Load()))])], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.cpu_times')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), args=[Constant(value=0), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[keyword(arg='attrs', value=List(elts=[Constant(value='pid'), Constant(value='cpu_times')], ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='p', ctx=Load()), attr='info', ctx=Load()), slice=Constant(value='cpu_times'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='p', ctx=Load()), attr='info', ctx=Load()), slice=Constant(value='pid'), ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.cpu_times')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), args=[Constant(value=0), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='flag', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[keyword(arg='attrs', value=List(elts=[Constant(value='pid'), Constant(value='cpu_times')], ctx=Load())), keyword(arg='ad_value', value=Name(id='flag', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='p', ctx=Load()), attr='info', ctx=Load()), slice=Constant(value='cpu_times'), ctx=Load()), Name(id='flag', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='p', ctx=Load()), attr='info', ctx=Load()), slice=Constant(value='pid'), ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_wait_procs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='callback', args=arguments(posonlyargs=[], args=[arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pids', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='pids', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='sproc1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sproc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sproc3', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='procs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Tuple(elts=[Name(id='sproc1', ctx=Load()), Name(id='sproc2', ctx=Load()), Name(id='sproc3', ctx=Load())], ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), Name(id='procs', ctx=Load())], keywords=[keyword(arg='timeout', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='TypeError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), Name(id='procs', ctx=Load())], keywords=[keyword(arg='callback', value=Constant(value=1))])), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='procs', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=0.01)), keyword(arg='callback', value=Name(id='callback', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLess', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='t', ctx=Load())), Constant(value=0.5)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='gone', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='alive', ctx=Load())], keywords=[]), Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pids', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='alive', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='returncode')], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='test_1', args=arguments(posonlyargs=[], args=[arg(arg='procs'), arg(arg='callback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='procs', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=0.03)), keyword(arg='callback', value=Name(id='callback', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='gone', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='alive', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Return(value=Tuple(elts=[Name(id='gone', ctx=Load()), Name(id='alive', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[Constant(value=30)], keywords=[])]), Expr(value=Call(func=Attribute(value=Name(id='sproc3', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Name(id='test_1', ctx=Load()), args=[Name(id='procs', ctx=Load()), Name(id='callback', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='sproc3', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='gone', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='POSIX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='gone', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]), attr='returncode', ctx=Load()), UnaryOp(op=USub(), operand=Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='gone', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]), attr='returncode', ctx=Load()), Constant(value=1)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pids', ctx=Load()), List(elts=[Attribute(value=Name(id='sproc3', ctx=Load()), attr='pid', ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='alive', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='returncode')], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='test_2', args=arguments(posonlyargs=[], args=[arg(arg='procs'), arg(arg='callback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='procs', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=0.03)), keyword(arg='callback', value=Name(id='callback', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='gone', ctx=Load())], keywords=[]), Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='alive', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[])), Return(value=Tuple(elts=[Name(id='gone', ctx=Load()), Name(id='alive', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[Constant(value=30)], keywords=[])]), Expr(value=Call(func=Attribute(value=Name(id='sproc1', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sproc2', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='gone', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Name(id='test_2', ctx=Load()), args=[Name(id='procs', ctx=Load()), Name(id='callback', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='pids', ctx=Load())], keywords=[]), Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sproc1', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='sproc2', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='sproc3', ctx=Load()), attr='pid', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='gone', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='returncode')], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), Name(id='WINDOWS', ctx=Load())]), Constant(value='spawn_testproc() unreliable on PYPY + WINDOWS')], keywords=[])]), FunctionDef(name='test_wait_procs_no_timeout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sproc1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sproc2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sproc3', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='procs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Tuple(elts=[Name(id='sproc1', ctx=Load()), Name(id='sproc2', ctx=Load()), Name(id='sproc3', ctx=Load())], ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='p', ctx=Store()), iter=Name(id='procs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='procs', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), Name(id='WINDOWS', ctx=Load())]), Constant(value='spawn_testproc() unreliable on PYPY + WINDOWS')], keywords=[])]), FunctionDef(name='test_pid_exists', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='kill', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Constant(value=0)], keywords=[]), Compare(left=Constant(value=0), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_pid_exists_2', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pids', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])), For(target=Name(id='pid', ctx=Store()), iter=Name(id='pids', ctx=Load()), body=[Try(body=[Assert(test=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Name(id='pid', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='pids', ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='pids', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=15000)), BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Name(id='pids', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=16000))], keywords=[])), For(target=Name(id='pid', ctx=Store()), iter=Name(id='pids', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])], keywords=[keyword(arg='msg', value=Name(id='pid', ctx=Load()))]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestMiscAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='bt', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='bt', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Name(id='bt', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLess', ctx=Load()), args=[Name(id='bt', ctx=Load()), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_users', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='users', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Name(id='users', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='user', ctx=Store()), iter=Name(id='users', ctx=Load()), body=[Assert(test=Attribute(value=Name(id='user', ctx=Load()), attr='name', ctx=Load()), msg=Name(id='user', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='terminal', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='user', ctx=Load()), attr='host', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='host', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Attribute(value=Name(id='user', ctx=Load()), attr='terminal', ctx=Load())), Expr(value=Attribute(value=Name(id='user', ctx=Load()), attr='host', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='user', ctx=Load()), attr='started', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.0)]), msg=Name(id='user', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='started', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='WINDOWS', ctx=Load()), Name(id='OPENBSD', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='CI_TESTING', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[]))]), Constant(value='unreliable on CI')], keywords=[])]), FunctionDef(name='test_test', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='DEVNULL', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='test', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='stdout', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_os_constants', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='names', ctx=Store())], value=List(elts=[Constant(value='POSIX'), Constant(value='WINDOWS'), Constant(value='LINUX'), Constant(value='MACOS'), Constant(value='FREEBSD'), Constant(value='OPENBSD'), Constant(value='NETBSD'), Constant(value='BSD'), Constant(value='SUNOS')], ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), Name(id='bool', ctx=Load())], keywords=[keyword(arg='msg', value=Name(id='name', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='psutil', ctx=Load()), attr='WINDOWS', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='POSIX')], keywords=[])), If(test=Compare(left=Constant(value='linux'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='LINUX', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='LINUX')], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='bsd'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='BSD', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=List(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='FREEBSD', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='OPENBSD', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='NETBSD', ctx=Load())], ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=True)], keywords=[]), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='BSD')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='FREEBSD')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='OPENBSD')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='NETBSD')], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='sunos'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), Compare(left=Constant(value='solaris'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='SUNOS', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='SUNOS')], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='darwin'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='MACOS', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='MACOS')], keywords=[]))], orelse=[])])])])], orelse=[Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='WINDOWS', ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='WINDOWS')], keywords=[]))]), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[keyword(arg='msg', value=Name(id='name', ctx=Load()))]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestMemoryAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_virtual_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='available', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='mem', ctx=Load()), attr='percent', ctx=Load()), Constant(value=100)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='used', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='free', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='mem', ctx=Load()), attr='_fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mem', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='percent')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='total')]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='value', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='%r < 0 (%s)'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='%r > total (total=%s, %s=%s)'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_swap_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='_fields', ctx=Load()), Tuple(elts=[Constant(value='total'), Constant(value='used'), Constant(value='free'), Constant(value='percent'), Constant(value='sin'), Constant(value='sout')], ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='used', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='free', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='free', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load()))]), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='mem', ctx=Load()), attr='percent', ctx=Load()), Constant(value=100)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='sin', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='mem', ctx=Load()), attr='sout', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='mem', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestCpuAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_cpu_count_logical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='logical', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Name(id='logical', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='logical', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='logical', ctx=Load()), Constant(value=1)], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/proc/cpuinfo')], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/cpuinfo')], keywords=[]), optional_vars=Name(id='fd', ctx=Store()))], body=[Assign(targets=[Name(id='cpuinfo_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='fd', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value='physical id'), ops=[NotIn()], comparators=[Name(id='cpuinfo_data', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value="cpuinfo doesn't include physical id")], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_count_cores', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='logical', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cores', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))])), If(test=Compare(left=Name(id='cores', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='cpu_count_cores() is None')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getwindowsversion', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[LtE()], comparators=[Tuple(elts=[Constant(value=6), Constant(value=1)], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Name(id='cores', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='cores', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='logical', ctx=Load()), Name(id='cores', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_cpu_count_none', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='val', ctx=Store()), iter=Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=0), Constant(value=None)], ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cpu_count_logical')], keywords=[keyword(arg='return_value', value=Name(id='val', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.cpu_count_cores')], keywords=[keyword(arg='return_value', value=Name(id='val', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='times', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[])), For(target=Name(id='cp_time', ctx=Store()), iter=Name(id='times', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='cp_time', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='cp_time', ctx=Load()), Constant(value=0.0)], keywords=[])), AugAssign(target=Name(id='total', ctx=Store()), op=Add(), value=Name(id='cp_time', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='total', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_times_time_increases', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t1', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='stop_at', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='GLOBAL_TIMEOUT', ctx=Load()))), While(test=Compare(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Name(id='stop_at', ctx=Load())]), body=[Assign(targets=[Name(id='t2', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='t2', ctx=Load()), ops=[Gt()], comparators=[Name(id='t1', ctx=Load())]), body=[Return()], orelse=[])], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='time remained the same')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_per_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='times', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[])), For(target=Name(id='cp_time', ctx=Store()), iter=Name(id='times', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='cp_time', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='cp_time', ctx=Load()), Constant(value=0.0)], keywords=[])), AugAssign(target=Name(id='total', ctx=Store()), op=Add(), value=Name(id='cp_time', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='total', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=False))])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_per_cpu_times_2', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tot1', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Assign(targets=[Name(id='giveup_at', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='GLOBAL_TIMEOUT', ctx=Load()))), While(test=Constant(value=True), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Name(id='giveup_at', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='timeout')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tot2', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='t1', ctx=Store()), Name(id='t2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='tot1', ctx=Load()), Name(id='tot2', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='t1', ctx=Store()), Name(id='t2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_cpu_busy_time', ctx=Load()), args=[Name(id='t1', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_cpu_busy_time', ctx=Load()), args=[Name(id='t2', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='difference', ctx=Store())], value=BinOp(left=Name(id='t2', ctx=Load()), op=Sub(), right=Name(id='t1', ctx=Load()))), If(test=Compare(left=Name(id='difference', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0.05)]), body=[Return()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_times_comparison', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='per_cpu', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Assign(targets=[Name(id='summed_values', ctx=Store())], value=Call(func=Attribute(value=Name(id='base', ctx=Load()), attr='_make', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='num', ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Name(id='per_cpu', ctx=Load()), ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Name(id='base', ctx=Load()), attr='_fields', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='summed_values', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=1))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_test_cpu_percent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='percent'), arg(arg='last_ret'), arg(arg='new_ret')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='percent', ctx=Load()), Constant(value=0.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNot', ctx=Load()), args=[Name(id='percent', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=0.0))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Name(id='percent', ctx=Load()), BinOp(left=Constant(value=100.0), op=Mult(), right=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[BinOp(left=Constant(value='\n%s\nlast=%s\nnew=%s'), op=Mod(), right=Tuple(elts=[Name(id='err', ctx=Load()), Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='last_ret', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='new_ret', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='test_cpu_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=0.001))])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Name(id='new', ctx=Load()), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='new', ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))])], decorator_list=[]), FunctionDef(name='test_per_cpu_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=0.001)), keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None)), keyword(arg='percpu', value=Constant(value=True))])), For(target=Name(id='percent', ctx=Store()), iter=Name(id='new', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='new', ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=UnaryOp(op=USub(), operand=Constant(value=1))), keyword(arg='percpu', value=Constant(value=True))]))])], decorator_list=[]), FunctionDef(name='test_cpu_times_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=0.001))])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None))])), For(target=Name(id='percent', ctx=Store()), iter=Name(id='new', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[]), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='new', ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))])], decorator_list=[]), FunctionDef(name='test_per_cpu_times_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=0.001)), keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=100)], keywords=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None)), keyword(arg='percpu', value=Constant(value=True))])), For(target=Name(id='cpu', ctx=Store()), iter=Name(id='new', ctx=Load()), body=[For(target=Name(id='percent', ctx=Store()), iter=Name(id='cpu', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='cpu', ctx=Load())], keywords=[]), Name(id='last', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='new', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='test_per_cpu_times_percent_negative', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Assign(targets=[Name(id='zero_times', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='_make', ctx=Load()), args=[ListComp(elt=Constant(value=0), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='_fields', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), ifs=[], is_async=0)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.cpu_times')], keywords=[keyword(arg='return_value', value=Name(id='zero_times', ctx=Load()))]))], body=[For(target=Name(id='cpu', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), body=[For(target=Name(id='percent', ctx=Store()), iter=Name(id='cpu', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_test_cpu_percent', ctx=Load()), args=[Name(id='percent', ctx=Load()), Constant(value=None), Constant(value=None)], keywords=[]))], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='test_cpu_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='infos', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='infos', ctx=Load()), attr='_fields', ctx=Load()), Tuple(elts=[Constant(value='ctx_switches'), Constant(value='interrupts'), Constant(value='soft_interrupts'), Constant(value='syscalls')], ctx=Load())], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='infos', ctx=Load()), attr='_fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='infos', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='AIX', ctx=Load())), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='ctx_switches'), Constant(value='interrupts')], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='check_ls', args=arguments(posonlyargs=[], args=[arg(arg='ls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='nt', ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='_fields', ctx=Load()), Tuple(elts=[Constant(value='current'), Constant(value='min'), Constant(value='max')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='max', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='current', ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='max', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='nt', ctx=Load()), attr='_fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='nt', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), If(test=BoolOp(op=And(), values=[Name(id='FREEBSD', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='ls', ctx=Load()))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='returns empty list on FreeBSD')], keywords=[]))], orelse=[]), Assert(test=Name(id='ls', ctx=Load()), msg=Name(id='ls', ctx=Load())), Expr(value=Call(func=Name(id='check_ls', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=False))])], ctx=Load())], keywords=[])), If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='MACOS', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='arm64')])]), Constant(value='skipped due to #1892')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_getloadavg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loadavg', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='getloadavg', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='loadavg', ctx=Load())], keywords=[]), Constant(value=3)], keywords=[])), For(target=Name(id='load', ctx=Store()), iter=Name(id='loadavg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='load', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='load', ctx=Load()), Constant(value=0.0)], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_GETLOADAVG', ctx=Load())), Constant(value='not supported')], keywords=[])])], decorator_list=[]), ClassDef(name='TestDiskAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='_fields', ctx=Load()), Tuple(elts=[Constant(value='total'), Constant(value='used'), Constant(value='free'), Constant(value='percent')], ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='usage', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='usage', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Name(id='usage', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load())]), msg=Name(id='usage', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load())]), msg=Name(id='usage', ctx=Load())), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='usage', ctx=Load()), attr='percent', ctx=Load()), Constant(value=100)]), msg=Attribute(value=Name(id='usage', ctx=Load()), attr='percent', ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='shutil', ctx=Load()), Constant(value='disk_usage')], keywords=[]), body=[Assign(targets=[Name(id='shutil_usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='tolerance', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=5), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Attribute(value=Name(id='shutil_usage', ctx=Load()), attr='total', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Attribute(value=Name(id='shutil_usage', ctx=Load()), attr='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='tolerance', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Name(id='MACOS_12PLUS', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), Attribute(value=Name(id='shutil_usage', ctx=Load()), attr='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='tolerance', ctx=Load()))]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='IS_64BIT', ctx=Load()))]), Constant(value='unreliable on PYPY32 + 32BIT')], keywords=[])]), FunctionDef(name='test_disk_usage_unicode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='UnicodeEncodeError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Name(id='UNICODE_SUFFIX', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='ASCII_FS', ctx=Load())), Constant(value='not an ASCII fs')], keywords=[])]), FunctionDef(name='test_disk_usage_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Constant(value=b'.')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='check_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='nt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='device', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='mountpoint', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='fstype', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='opts', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='maxfile', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='maxpath', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='maxfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='GITHUB_ACTIONS', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='maxfile', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='maxpath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='maxpath', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[keyword(arg='msg', value=Name(id='ls', ctx=Load()))])), For(target=Name(id='disk', ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Name(id='disk', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Constant(value='cdrom'), ops=[In()], comparators=[Attribute(value=Name(id='disk', ctx=Load()), attr='opts', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), body=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='device', ctx=Load())], keywords=[]), msg=Name(id='disk', ctx=Load()))], orelse=[Expr(value=Attribute(value=Name(id='disk', ctx=Load()), attr='device', ctx=Load()))]), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[]), msg=Name(id='disk', ctx=Load())), Assert(test=Attribute(value=Name(id='disk', ctx=Load()), attr='fstype', ctx=Load()), msg=Name(id='disk', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[keyword(arg='msg', value=Name(id='ls', ctx=Load()))])), For(target=Name(id='disk', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))]), body=[Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Name(id='disk', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=BoolOp(op=And(), values=[Name(id='GITHUB_ACTIONS', ctx=Load()), Name(id='MACOS', ctx=Load()), Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EIO', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())], ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[]), msg=Name(id='disk', ctx=Load()))], finalbody=[])], orelse=[])], orelse=[]), FunctionDef(name='find_mount_point', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='ismount', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='mount', ctx=Store())], value=Call(func=Name(id='find_mount_point', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mounts', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='mountpoint', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=True))]), ifs=[Attribute(value=Name(id='x', ctx=Load()), attr='mountpoint', ctx=Load())], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='mount', ctx=Load()), Name(id='mounts', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_disk_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='check_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='nt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='read_count', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='write_count', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=2), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='read_bytes', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=3), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='write_bytes', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=4), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='read_time', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=5), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='write_time', ctx=Load())], keywords=[])), If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=6), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='read_merged_count', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=7), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='write_merged_count', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=8), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='busy_time', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='FREEBSD', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=6), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='busy_time', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='nt', ctx=Load()), attr='_fields', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='nt', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load()))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=False))])), Assert(test=Compare(left=Name(id='ret', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='no disks on this system?')), Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Assert(test=Name(id='key', ctx=Load()), msg=Name(id='key', ctx=Load())), Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='LINUX', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/proc/diskstats')], keywords=[]))]), Constant(value='/proc/diskstats not available on this linux version')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='CI_TESTING', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[]))]), Constant(value='unreliable on CI')], keywords=[])]), FunctionDef(name='test_disk_io_counters_no_disks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.disk_io_counters')], keywords=[keyword(arg='return_value', value=Dict(keys=[], values=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True))]), Dict(keys=[], values=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestNetAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_net_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='check_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='nt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='bytes_sent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='bytes_recv', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=2), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='packets_sent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=3), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='packets_recv', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=4), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='errin', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=5), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='errout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=6), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='dropin', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='nt', ctx=Load()), slice=Constant(value=7), ctx=Load()), Attribute(value=Name(id='nt', ctx=Load()), attr='dropout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='bytes_sent', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='bytes_recv', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='packets_sent', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='packets_recv', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='errin', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='errout', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='dropin', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='nt', ctx=Load()), attr='dropout', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Name(id='nt', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=False))])), Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_NET_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_net_io_counters_no_nics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.net_io_counters')], keywords=[keyword(arg='return_value', value=Dict(keys=[], values=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True))]), Dict(keys=[], values=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_NET_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_net_if_addrs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nics', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[])), Assert(test=Name(id='nics', ctx=Load()), msg=Name(id='nics', ctx=Load())), Assign(targets=[Name(id='nic_stats', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='families', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load())], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='nic', ctx=Store()), Name(id='addrs', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='nics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='nic', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='addrs', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='addrs', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='addr', ctx=Store()), iter=Name(id='addrs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='netmask', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), Name(id='families', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='PY3', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PYPY', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Subscript(value=Name(id='nic_stats', ctx=Load()), slice=Name(id='nic', ctx=Load()), ctx=Load()), attr='isup', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='getaddrinfo', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Constant(value=0), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load()), Constant(value=0), Attribute(value=Name(id='socket', ctx=Load()), attr='AI_PASSIVE', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='af', ctx=Store()), Name(id='socktype', ctx=Store()), Name(id='proto', ctx=Store()), Name(id='canonname', ctx=Store()), Name(id='sa', ctx=Store())], ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='af', ctx=Load()), Name(id='socktype', ctx=Load()), Name(id='proto', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='sa', ctx=Load())], keywords=[]))])], orelse=[])])], orelse=[]), For(target=Name(id='ip', ctx=Store()), iter=Tuple(elts=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Attribute(value=Name(id='addr', ctx=Load()), attr='netmask', ctx=Load()), Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), Attribute(value=Name(id='addr', ctx=Load()), attr='ptp', ctx=Load())], ctx=Load()), body=[If(test=Compare(left=Name(id='ip', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())]), body=[Expr(value=Call(func=Name(id='check_net_address', ctx=Load()), args=[Name(id='ip', ctx=Load()), Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='ptp', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='addr', ctx=Load()), attr='ptp', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='BSD', ctx=Load()), Name(id='MACOS', ctx=Load()), Name(id='SUNOS', ctx=Load())]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='socket', ctx=Load()), Constant(value='AF_LINK')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_LINK', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_PACKET', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[])])])], decorator_list=[]), FunctionDef(name='test_net_if_addrs_mac_null_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='POSIX', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='em1'), Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load()), Constant(value='06:3d:29'), Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='em1'), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value='06-3d-29'), Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load())], ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.net_if_addrs')], keywords=[keyword(arg='return_value', value=Name(id='ret', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[]), slice=Constant(value='em1'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), If(test=Name(id='POSIX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Constant(value='06:3d:29:00:00:00')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Constant(value='06-3d-29-00-00-00')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nics', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[])), Assert(test=Name(id='nics', ctx=Load()), msg=Name(id='nics', ctx=Load())), Assign(targets=[Name(id='all_duplexes', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NIC_DUPLEX_FULL', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='NIC_DUPLEX_HALF', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='NIC_DUPLEX_UNKNOWN', ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='nics', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='isup', ctx=Store()), Name(id='duplex', ctx=Store()), Name(id='speed', ctx=Store()), Name(id='mtu', ctx=Store()), Name(id='flags', ctx=Store())], ctx=Store())], value=Name(id='stats', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='isup', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='duplex', ctx=Load()), Name(id='all_duplexes', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='duplex', ctx=Load()), Name(id='all_duplexes', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='speed', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='mtu', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='flags', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_net_if_stats_enodev', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psutil_posix.net_if_mtu')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENODEV', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='BSD', ctx=Load()), Name(id='MACOS', ctx=Load())])), Constant(value='LINUX or BSD or MACOS specific')], keywords=[])])], decorator_list=[]), ClassDef(name='TestSensorsAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_sensors_temperatures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='temps', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='entries', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='temps', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='entry', ctx=Store()), iter=Name(id='entries', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='label', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='current', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='current', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='high', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='high', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='critical', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='critical', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_TEMPERATURES', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_temperatures_fahreneit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Dict(keys=[Constant(value='coretemp')], values=[List(elts=[Tuple(elts=[Constant(value='label'), Constant(value=50.0), Constant(value=60.0), Constant(value=70.0)], ctx=Load())], ctx=Load())])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.sensors_temperatures')], keywords=[keyword(arg='return_value', value=Name(id='d', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='temps', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[keyword(arg='fahrenheit', value=Constant(value=True))]), slice=Constant(value='coretemp'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temps', ctx=Load()), attr='current', ctx=Load()), Constant(value=122.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temps', ctx=Load()), attr='high', ctx=Load()), Constant(value=140.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temps', ctx=Load()), attr='critical', ctx=Load()), Constant(value=158.0)], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_TEMPERATURES', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='percent', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='percent', ctx=Load()), Constant(value=100)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='ret', ctx=Load()), attr='secsleft', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='secsleft', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='ret', ctx=Load()), attr='secsleft', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='power_plugged', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='power_plugged', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_BATTERY', ctx=Load())), Constant(value='not supported')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), FunctionDef(name='test_sensors_fans', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fans', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_fans', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='entries', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='fans', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='entry', ctx=Store()), iter=Name(id='entries', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='label', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='current', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='current', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_FANS', ctx=Load())), Constant(value='not supported')], keywords=[])])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])