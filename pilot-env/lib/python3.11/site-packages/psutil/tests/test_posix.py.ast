Module(body=[Expr(value=Constant(value='POSIX specific tests.')), Import(names=[alias(name='datetime')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='AIX')], level=0), ImportFrom(module='psutil', names=[alias(name='BSD')], level=0), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='SUNOS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_NET_IO_COUNTERS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYTHON_EXE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='mock')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='skip_on_access_denied')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='which')], level=0), If(test=Name(id='POSIX', ctx=Load()), body=[Import(names=[alias(name='mmap')]), Import(names=[alias(name='resource')]), ImportFrom(module='psutil._psutil_posix', names=[alias(name='getpagesize')], level=0)], orelse=[]), FunctionDef(name='ps', args=arguments(posonlyargs=[], args=[arg(arg='fmt'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Wrapper for calling the ps command with a little bit of cross-platform\n    support for a narrow range of features.\n    ')), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Constant(value='ps')], ctx=Load())), If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--no-headers')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='-p'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Name(id='SUNOS', ctx=Load()), Name(id='AIX', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-A')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='ax')], keywords=[]))])]), If(test=Name(id='SUNOS', ctx=Load()), body=[Assign(targets=[Name(id='fmt', ctx=Store())], value=Call(func=Attribute(value=Name(id='fmt', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='start'), Constant(value='stime')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='-o'), Name(id='fmt', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=IfExp(test=Name(id='LINUX', ctx=Load()), body=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), orelse=Subscript(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()))), Assign(targets=[Name(id='all_output', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Name(id='output', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='all_output', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='all_output', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='all_output', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], decorator_list=[]), FunctionDef(name='ps_name', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='command')), If(test=Name(id='SUNOS', ctx=Load()), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='comm'))], orelse=[]), Return(value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='ps', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[]), FunctionDef(name='ps_args', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='command')), If(test=BoolOp(op=Or(), values=[Name(id='AIX', ctx=Load()), Name(id='SUNOS', ctx=Load())]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='args'))], orelse=[]), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\(python.*?\\)$'), Constant(value=''), Name(id='out', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='ps_rss', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='rss')), If(test=Name(id='AIX', ctx=Load()), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='rssize'))], orelse=[]), Return(value=Call(func=Name(id='ps', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='ps_vsz', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='vsz')), If(test=Name(id='AIX', ctx=Load()), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Constant(value='vsize'))], orelse=[]), Return(value=Call(func=Name(id='ps', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='TestProcess', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Compare psutil results against 'ps' command line utility (mainly).")), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[List(elts=[Name(id='PYTHON_EXE', ctx=Load()), Constant(value='-E'), Constant(value='-O')], ctx=Load())], keywords=[keyword(arg='stdin', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ppid_ps', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='ppid'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ppid_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='ppid', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ppid_ps', ctx=Load()), Name(id='ppid_psutil', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_uid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='uid_ps', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='uid'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='uid_psutil', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='uids', ctx=Load()), args=[], keywords=[]), attr='real', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='uid_ps', ctx=Load()), Name(id='uid_psutil', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_gid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='gid_ps', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='rgid'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gid_psutil', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='gids', ctx=Load()), args=[], keywords=[]), attr='real', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='gid_ps', ctx=Load()), Name(id='gid_psutil', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_username', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='username_ps', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='user'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='username_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='username', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='username_ps', ctx=Load()), Name(id='username_psutil', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_username_no_resolution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.pwd.getpwuid')], keywords=[keyword(arg='side_effect', value=Name(id='KeyError', ctx=Load()))]), optional_vars=Name(id='fun', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='username', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='uids', ctx=Load()), args=[], keywords=[]), attr='real', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='fun', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_rss_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.1)], keywords=[])), Assign(targets=[Name(id='rss_ps', ctx=Store())], value=Call(func=Name(id='ps_rss', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rss_psutil', ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_info', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), op=Div(), right=Constant(value=1024))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='rss_ps', ctx=Load()), Name(id='rss_psutil', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='skip_on_access_denied', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vsz_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.1)], keywords=[])), Assign(targets=[Name(id='vsz_ps', ctx=Store())], value=Call(func=Name(id='ps_vsz', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='vsz_psutil', ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_info', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), op=Div(), right=Constant(value=1024))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='vsz_ps', ctx=Load()), Name(id='vsz_psutil', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='skip_on_access_denied', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name_ps', ctx=Store())], value=Call(func=Name(id='ps_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name_ps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='name_ps', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='name', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name_ps', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\d.\\d'), Constant(value=''), Name(id='name_ps', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\d.\\d'), Constant(value=''), Name(id='name_psutil', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name_ps', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\d'), Constant(value=''), Name(id='name_ps', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\d'), Constant(value=''), Name(id='name_psutil', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='name_ps', ctx=Load()), Name(id='name_psutil', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_name_long', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='long-program-name')), Assign(targets=[Name(id='cmdline', ctx=Store())], value=List(elts=[Constant(value='long-program-name-extended'), Constant(value='foo'), Constant(value='bar')], ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.name')], keywords=[keyword(arg='return_value', value=Name(id='name', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.cmdline')], keywords=[keyword(arg='return_value', value=Name(id='cmdline', ctx=Load()))]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Constant(value='long-program-name-extended')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_name_long_cmdline_ad_exc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='long-program-name')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.name')], keywords=[keyword(arg='return_value', value=Name(id='name', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.cmdline')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), args=[Constant(value=0), Constant(value='')], keywords=[]))]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Constant(value='long-program-name')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_name_long_cmdline_nsp_exc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='long-program-name')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.name')], keywords=[keyword(arg='return_value', value=Name(id='name', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psplatform.Process.cmdline')], keywords=[keyword(arg='side_effect', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), args=[Constant(value=0), Constant(value='')], keywords=[]))]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='time_ps', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='start'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='time_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='create_time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='time_psutil_tstamp', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Name(id='time_psutil', ctx=Load())], keywords=[]), attr='strftime', ctx=Load()), args=[Constant(value='%H:%M:%S')], keywords=[])), Assign(targets=[Name(id='round_time_psutil', ctx=Store())], value=Call(func=Name(id='round', ctx=Load()), args=[Name(id='time_psutil', ctx=Load())], keywords=[])), Assign(targets=[Name(id='round_time_psutil_tstamp', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Name(id='round_time_psutil', ctx=Load())], keywords=[]), attr='strftime', ctx=Load()), args=[Constant(value='%H:%M:%S')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='time_ps', ctx=Load()), List(elts=[Name(id='time_psutil_tstamp', ctx=Load()), Name(id='round_time_psutil_tstamp', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='MACOS', ctx=Load()), Name(id='BSD', ctx=Load())]), Constant(value='ps -o start not available')], keywords=[])]), FunctionDef(name='test_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ps_pathname', ctx=Store())], value=Call(func=Name(id='ps_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_pathname', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='exe', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ps_pathname', ctx=Load()), Name(id='psutil_pathname', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[Assign(targets=[Name(id='adjusted_ps_pathname', ctx=Store())], value=Subscript(value=Name(id='ps_pathname', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ps_pathname', ctx=Load())], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ps_pathname', ctx=Load()), Name(id='adjusted_ps_pathname', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ps_cmdline', ctx=Store())], value=Call(func=Name(id='ps_args', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_cmdline', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ps_cmdline', ctx=Load()), Name(id='psutil_cmdline', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_nice', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ps_nice', ctx=Store())], value=Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='nice'), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_nice', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='nice', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ps_nice', ctx=Load()), Name(id='psutil_nice', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='SUNOS', ctx=Load()), Constant(value='not reliable on SUNOS')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='AIX', ctx=Load()), Constant(value='not reliable on AIX')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), ClassDef(name='TestSystemAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test some system APIs.')), FunctionDef(name='test_pids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pids_ps', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='ps', ctx=Load()), args=[Constant(value='pid')], keywords=[])], keywords=[])), Assign(targets=[Name(id='pids_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='MACOS', ctx=Load()), BoolOp(op=And(), values=[Name(id='OPENBSD', ctx=Load()), Compare(left=Constant(value=0), ops=[NotIn()], comparators=[Name(id='pids_ps', ctx=Load())])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='pids_ps', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pids_ps', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pids_psutil', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='difference', ctx=Store())], value=BinOp(left=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='pids_psutil', ctx=Load()), ifs=[Compare(left=Name(id='x', ctx=Load()), ops=[NotIn()], comparators=[Name(id='pids_ps', ctx=Load())])], is_async=0)]), op=Add(), right=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='pids_ps', ctx=Load()), ifs=[Compare(left=Name(id='x', ctx=Load()), ops=[NotIn()], comparators=[Name(id='pids_psutil', ctx=Load())])], is_async=0)]))), Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='difference: '), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='difference', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_nic_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='ifconfig -a')], keywords=[])), For(target=Name(id='nic', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True))]), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='nic', ctx=Load())], keywords=[]), body=[Break()], orelse=[])], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value="couldn't find %s nic in 'ifconfig -a' output\n%s"), op=Mod(), right=Tuple(elts=[Name(id='nic', ctx=Load()), Name(id='output', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='SUNOS', ctx=Load()), Constant(value='unreliable on SUNOS')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='ifconfig')], keywords=[])), Constant(value='no ifconfig cmd')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_NET_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_users', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='who -u')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='no users on this system')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='users', ctx=Store())], value=ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='terminals', ctx=Store())], value=ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='users', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='subTest', ctx=Load()), args=[], keywords=[keyword(arg='psutil', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), keyword(arg='who', value=Name(id='out', ctx=Load()))]))], body=[For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='u', ctx=Load()), attr='name', ctx=Load()), Subscript(value=Name(id='users', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='u', ctx=Load()), attr='terminal', ctx=Load()), Subscript(value=Name(id='terminals', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='u', ctx=Load()), attr='pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='u', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_users_started', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='who -u')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='no users on this system')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tstamp', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='started', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d'), Name(id='out', ctx=Load())], keywords=[])), If(test=Name(id='started', ctx=Load()), body=[Assign(targets=[Name(id='tstamp', ctx=Store())], value=Constant(value='%Y-%m-%d %H:%M'))], orelse=[Assign(targets=[Name(id='started', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='[A-Z][a-z][a-z] \\d\\d \\d\\d:\\d\\d'), Name(id='out', ctx=Load())], keywords=[])), If(test=Name(id='started', ctx=Load()), body=[Assign(targets=[Name(id='tstamp', ctx=Store())], value=Constant(value='%b %d %H:%M'))], orelse=[Assign(targets=[Name(id='started', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='[A-Z][a-z][a-z] \\d\\d'), Name(id='out', ctx=Load())], keywords=[])), If(test=Name(id='started', ctx=Load()), body=[Assign(targets=[Name(id='tstamp', ctx=Store())], value=Constant(value='%b %d'))], orelse=[Assign(targets=[Name(id='started', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='[a-z][a-z][a-z] \\d\\d'), Name(id='out', ctx=Load())], keywords=[])), If(test=Name(id='started', ctx=Load()), body=[Assign(targets=[Name(id='tstamp', ctx=Store())], value=Constant(value='%b %d')), Assign(targets=[Name(id='started', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='capitalize', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='started', ctx=Load()), ifs=[], is_async=0)]))], orelse=[])])])]), If(test=UnaryOp(op=Not(), operand=Name(id='tstamp', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[BinOp(left=Constant(value='cannot interpret tstamp in who output\n%s'), op=Mod(), right=Name(id='out', ctx=Load()))], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='subTest', ctx=Load()), args=[], keywords=[keyword(arg='psutil', value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), keyword(arg='who', value=Name(id='out', ctx=Load()))]))], body=[For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Attribute(value=Name(id='u', ctx=Load()), attr='started', ctx=Load())], keywords=[]), attr='strftime', ctx=Load()), args=[Name(id='tstamp', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Subscript(value=Name(id='started', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_pid_exists_let_raise', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psposix.os.kill')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EBADF', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='OSError', ctx=Load()), Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psposix', ctx=Load()), attr='pid_exists', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_os_waitpid_let_raise', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psposix.os.waitpid')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EBADF', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='OSError', ctx=Load()), Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psposix', ctx=Load()), attr='wait_pid', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_os_waitpid_eintr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psposix.os.waitpid')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINTR', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psposix', ctx=Load()), attr='TimeoutExpired', ctx=Load()), Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psposix', ctx=Load()), attr='wait_pid', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='timeout', value=Constant(value=0.01))])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_os_waitpid_bad_ret_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._psposix.os.waitpid')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psposix', ctx=Load()), attr='wait_pid', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='df', args=arguments(posonlyargs=[], args=[arg(arg='device')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='df -k %s'), op=Mod(), right=Name(id='device', ctx=Load()))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='err', body=[If(test=Compare(left=Constant(value='device busy'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='df returned EBUSY')], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='free', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=3), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=4), ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='')], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='percent', ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='tolerance', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=4), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=False))]), body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store()), Name(id='percent', ctx=Store())], ctx=Store())], value=Call(func=Name(id='df', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='err', body=[Assign(targets=[Name(id='err', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='no such file or directory'), ops=[In()], comparators=[Name(id='err', ctx=Load())]), Compare(left=Constant(value='raw devices not supported'), ops=[In()], comparators=[Name(id='err', ctx=Load())]), Compare(left=Constant(value='permission denied'), ops=[In()], comparators=[Name(id='err', ctx=Load())])]), body=[Continue()], orelse=[]), Raise()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='tolerance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), Name(id='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='tolerance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='tolerance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='percent', ctx=Load()), Name(id='percent', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))]))], finalbody=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='AIX', ctx=Load()), Constant(value='unreliable on AIX')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), ClassDef(name='TestMisc', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_getpagesize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pagesize', ctx=Store())], value=Call(func=Name(id='getpagesize', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Name(id='pagesize', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pagesize', ctx=Load()), Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='getpagesize', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pagesize', ctx=Load()), Attribute(value=Name(id='mmap', ctx=Load()), attr='PAGESIZE', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])