Module(body=[Expr(value=Constant(value='AIX specific tests.')), Import(names=[alias(name='re')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='AIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ClassDef(name='AIXSpecificTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_virtual_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='/usr/bin/svmon -O unit=KB')], keywords=[])), Assign(targets=[Name(id='re_pattern', ctx=Store())], value=Constant(value='memory\\s*')), For(target=Name(id='field', ctx=Store()), iter=Call(func=Attribute(value=Constant(value='size inuse free pin virtual available mmode'), attr='split', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='re_pattern', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='(?P<%s>\\S+)\\s+'), op=Mod(), right=Tuple(elts=[Name(id='field', ctx=Load())], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='matchobj', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='re_pattern', ctx=Load()), Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Name(id='matchobj', ctx=Load()), Constant(value='svmon command returned unexpected output')], keywords=[])), Assign(targets=[Name(id='KB', ctx=Store())], value=Constant(value=1024)), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='size')], keywords=[])], keywords=[]), op=Mult(), right=Name(id='KB', ctx=Load()))), Assign(targets=[Name(id='available', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='available')], keywords=[])], keywords=[]), op=Mult(), right=Name(id='KB', ctx=Load()))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='inuse')], keywords=[])], keywords=[]), op=Mult(), right=Name(id='KB', ctx=Load()))), Assign(targets=[Name(id='free', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='free')], keywords=[])], keywords=[]), op=Mult(), right=Name(id='KB', ctx=Load()))), Assign(targets=[Name(id='psutil_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='TOLERANCE_SYS_MEM', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='KB', ctx=Load())), op=Mult(), right=Name(id='KB', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='used', ctx=Load()), Name(id='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='available', ctx=Load()), Name(id='available', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swap_memory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='/usr/sbin/lsps -a')], keywords=[])), Assign(targets=[Name(id='matchobj', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='(?P<space>\\S+)\\s+(?P<vol>\\S+)\\s+(?P<vg>\\S+)\\s+(?P<size>\\d+)MB'), Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Name(id='matchobj', ctx=Load()), Constant(value='lsps command returned unexpected output')], keywords=[])), Assign(targets=[Name(id='total_mb', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='size')], keywords=[])], keywords=[])), Assign(targets=[Name(id='MB', ctx=Store())], value=BinOp(left=Constant(value=1024), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='psutil_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='psutil_result', ctx=Load()), attr='total', ctx=Load()), op=Div(), right=Name(id='MB', ctx=Load()))], keywords=[]), Name(id='total_mb', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='/usr/bin/mpstat -a')], keywords=[])), Assign(targets=[Name(id='re_pattern', ctx=Store())], value=Constant(value='ALL\\s*')), For(target=Name(id='field', ctx=Store()), iter=Call(func=Attribute(value=Constant(value='min maj mpcs mpcr dev soft dec ph cs ics bound rq push S3pull S3grd S0rd S1rd S2rd S3rd S4rd S5rd sysc'), attr='split', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='re_pattern', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='(?P<%s>\\S+)\\s+'), op=Mod(), right=Tuple(elts=[Name(id='field', ctx=Load())], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='matchobj', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='re_pattern', ctx=Load()), Name(id='out', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Name(id='matchobj', ctx=Load()), Constant(value='mpstat command returned unexpected output')], keywords=[])), Assign(targets=[Name(id='CPU_STATS_TOLERANCE', ctx=Store())], value=Constant(value=1000)), Assign(targets=[Name(id='psutil_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='ctx_switches', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='cs')], keywords=[])], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='CPU_STATS_TOLERANCE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='syscalls', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='sysc')], keywords=[])], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='CPU_STATS_TOLERANCE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='interrupts', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='dev')], keywords=[])], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='CPU_STATS_TOLERANCE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil_result', ctx=Load()), attr='soft_interrupts', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='matchobj', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='soft')], keywords=[])], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='CPU_STATS_TOLERANCE', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_cpu_count_logical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='/usr/bin/mpstat -a')], keywords=[])), Assign(targets=[Name(id='mpstat_lcpu', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='lcpu=(\\d+)'), Name(id='out', ctx=Load())], keywords=[]), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Name(id='psutil_lcpu', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='mpstat_lcpu', ctx=Load()), Name(id='psutil_lcpu', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_net_if_addrs_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='/etc/ifconfig -l')], keywords=[])), Assign(targets=[Name(id='ifconfig_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='psutil_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[]), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertSetEqual', ctx=Load()), args=[Name(id='ifconfig_names', ctx=Load()), Name(id='psutil_names', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='AIX', ctx=Load())), Constant(value='AIX only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])