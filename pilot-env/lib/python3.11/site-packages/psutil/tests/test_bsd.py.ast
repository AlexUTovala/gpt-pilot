Module(body=[Expr(value=Constant(value='Tests specific to all BSD platforms.')), Import(names=[alias(name='datetime')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='BSD')], level=0), ImportFrom(module='psutil', names=[alias(name='FREEBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='NETBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_SYS_MEM')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='spawn_testproc')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='which')], level=0), If(test=Name(id='BSD', ctx=Load()), body=[ImportFrom(module='psutil._psutil_posix', names=[alias(name='getpagesize')], level=0), Assign(targets=[Name(id='PAGESIZE', ctx=Store())], value=Call(func=Name(id='getpagesize', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='MUSE_AVAILABLE', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Call(func=Name(id='which', ctx=Load()), args=[Constant(value='muse')], keywords=[])]))], orelse=[Assign(targets=[Name(id='PAGESIZE', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='MUSE_AVAILABLE', ctx=Store())], value=Constant(value=False))]), FunctionDef(name='sysctl', args=arguments(posonlyargs=[], args=[arg(arg='cmdline')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expects a sysctl command with an argument and parse the result\n    returning only the value of interest.\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='sysctl '), op=Add(), right=Name(id='cmdline', ctx=Load()))], keywords=[])), If(test=Name(id='FREEBSD', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=': ')], keywords=[]), op=Add(), right=Constant(value=2))), ctx=Load()))], orelse=[If(test=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='=')], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load()))], orelse=[])]), Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='result', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='muse', args=arguments(posonlyargs=[], args=[arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Thin wrapper around 'muse' cmdline utility.")), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='muse')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]), body=[Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='line not found')], keywords=[]))]), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='BSDTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Generic tests common to all BSD variants.')), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_process_create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ps -o lstart -p %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='start_ps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='STARTED'), Constant(value='')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='start_psutil', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='create_time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='start_psutil', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%a %b %e %H:%M:%S %Y'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Name(id='start_psutil', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='start_ps', ctx=Load()), Name(id='start_psutil', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='NETBSD', ctx=Load()), Constant(value="-o lstart doesn't work on NETBSD")], keywords=[])]), FunctionDef(name='test_disks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='df', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='df -k "%s"'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dev', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=4)), ctx=Load())), If(test=Compare(left=Name(id='dev', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='total', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='free', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='free', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024))), Return(value=Tuple(elts=[Name(id='dev', ctx=Load()), Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load())], ctx=Load()))], decorator_list=[]), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=False))]), body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dev', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Name(id='df', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load()), Name(id='dev', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), op=Sub(), right=Name(id='free', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[BinOp(left=BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='psutil=%s, df=%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), op=Sub(), right=Name(id='used', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[BinOp(left=BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='psutil=%s, df=%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), Name(id='used', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_count_logical', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.ncpu')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))]), Name(id='syst', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='sysctl')], keywords=[])), Constant(value='sysctl cmd not available')], keywords=[])]), FunctionDef(name='test_virtual_memory_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.physmem')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='num', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='sysctl')], keywords=[])), Constant(value='sysctl cmd not available')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='NETBSD', ctx=Load()), Constant(value='skipped on NETBSD')], keywords=[])]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ifconfig %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='isup', ctx=Load()), Compare(left=Constant(value='RUNNING'), ops=[In()], comparators=[Name(id='out', ctx=Load())])], keywords=[keyword(arg='msg', value=Name(id='out', ctx=Load()))])), If(test=Compare(left=Constant(value='mtu'), ops=[In()], comparators=[Name(id='out', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='mtu', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='mtu (\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], finalbody=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='ifconfig')], keywords=[])), Constant(value='ifconfig cmd not available')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='BSD', ctx=Load())), Constant(value='BSD only')], keywords=[])]), ClassDef(name='FreeBSDPsutilTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Store())], value=Attribute(value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test_memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -v %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='maps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[keyword(arg='grouped', value=Constant(value=False))])), Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load())), While(test=Name(id='lines', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='start', ctx=Store()), Name(id='stop', ctx=Store()), Name(id='perms', ctx=Store()), Name(id='res', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load())), Assign(targets=[Name(id='map', ctx=Store())], value=Call(func=Attribute(value=Name(id='maps', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=Constant(value='%s-%s'), op=Mod(), right=Tuple(elts=[Name(id='start', ctx=Load()), Name(id='stop', ctx=Load())], ctx=Load())), Attribute(value=Name(id='map', ctx=Load()), attr='addr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='res', ctx=Load())], keywords=[]), Attribute(value=Name(id='map', ctx=Load()), attr='rss', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='map', ctx=Load()), attr='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='[')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=10), ctx=Load()), Attribute(value=Name(id='map', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -b %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='exe', ctx=Load()), args=[], keywords=[]), Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -c %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='cmdline', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_uids_gids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -s %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='euid', ctx=Store()), Name(id='ruid', ctx=Store()), Name(id='suid', ctx=Store()), Name(id='egid', ctx=Store()), Name(id='rgid', ctx=Store()), Name(id='sgid', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=2), upper=Constant(value=8)), ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='uids', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='uids', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='gids', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='gids', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='real', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='ruid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='effective', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='euid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='saved', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='suid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='real', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='rgid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='effective', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='egid', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='saved', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='sgid', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tested', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -r %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value=' voluntary context'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='pstat_value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='voluntary', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tested', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[If(test=Compare(left=Constant(value=' involuntary context'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='pstat_value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='involuntary', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tested', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[])])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tested', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="couldn't find lines match in procstat out")], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tested', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='procstat -r %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='user time'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='pstat_value', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Constant(value='0.'), op=Add(), right=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[]), attr='user', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tested', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='system time'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='pstat_value', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Constant(value='0.'), op=Add(), right=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[]), attr='system', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tested', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[])])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tested', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="couldn't find lines match in procstat out")], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='FREEBSD', ctx=Load())), Constant(value='FREEBSD only')], keywords=[])]), ClassDef(name='FreeBSDSystemTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='parse_swapinfo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='swapinfo -k')], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\s+'), Name(id='output', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='parts', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="Can't parse swapinfo: %s"), op=Mod(), right=Name(id='output', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=GeneratorExp(elt=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Constant(value=4)), ctx=Load()), ifs=[], is_async=0)])), Return(value=Tuple(elts=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='test_cpu_frequency_against_sysctl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sensor', ctx=Store())], value=Constant(value='dev.cpu.0.freq')), Try(body=[Assign(targets=[Name(id='sysctl_result', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='sysctl', ctx=Load()), args=[Name(id='sensor', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='frequencies not supported by kernel')], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), attr='current', ctx=Load()), Name(id='sysctl_result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sensor', ctx=Store())], value=Constant(value='dev.cpu.0.freq_levels')), Assign(targets=[Name(id='sysctl_result', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Name(id='sensor', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_freq', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='sysctl_result', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='min_freq', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='sysctl_result', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), attr='max', ctx=Load()), Name(id='max_freq', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), attr='min', ctx=Load()), Name(id='min_freq', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_vmem_active', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.vm.v_active_count')], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='active', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_inactive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.vm.v_inactive_count')], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='inactive', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_wired', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.vm.v_wire_count')], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='wired', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_cached', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.vm.v_cache_count')], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='cached', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.vm.v_free_count')], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_vmem_buffers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='syst', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vfs.bufspace')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='buffers', ctx=Load()), Name(id='syst', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Total')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), Name(id='num', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[])]), FunctionDef(name='test_muse_vmem_active', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Active')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='active', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_inactive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Inactive')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='inactive', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_wired', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Wired')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='wired', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_cached', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Cache')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='cached', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Free')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_muse_vmem_buffers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='muse', ctx=Load()), args=[Constant(value='Buffer')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='buffers', ctx=Load()), Name(id='num', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='MUSE_AVAILABLE', ctx=Load())), Constant(value='muse not installed')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_stats_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='ctx_switches', ctx=Load()), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.sys.v_swtch')], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=1000))]))], decorator_list=[]), FunctionDef(name='test_cpu_stats_interrupts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='interrupts', ctx=Load()), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.sys.v_intr')], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=1000))]))], decorator_list=[]), FunctionDef(name='test_cpu_stats_soft_interrupts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='soft_interrupts', ctx=Load()), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.sys.v_soft')], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=1000))]))], decorator_list=[]), FunctionDef(name='test_cpu_stats_syscalls', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='syscalls', ctx=Load()), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='vm.stats.sys.v_syscall')], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=200000))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_swapmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_swapinfo', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swapmem_used', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_swapinfo', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load()), Name(id='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swapmem_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_swapinfo', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='sysctl kern.boottime')], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=' sec = ')], keywords=[]), op=Add(), right=Constant(value=7))), ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=',')], keywords=[])), ctx=Load())), Assign(targets=[Name(id='btime', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='btime', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_sensors_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='secs2hours', args=arguments(posonlyargs=[], args=[arg(arg='secs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='m', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='secs', ctx=Load()), Constant(value=60)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='m', ctx=Load()), Constant(value=60)], keywords=[])), Return(value=BinOp(left=Constant(value='%d:%02d'), op=Mod(), right=Tuple(elts=[Name(id='h', ctx=Load()), Name(id='m', ctx=Load())], ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='acpiconf -i 0')], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\t')], keywords=[]), slice=Constant(value=0), ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\t')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='metrics', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value='Remaining capacity:'), ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Name(id='remaining_time', ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value='Remaining time:'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='metrics', ctx=Load()), attr='percent', ctx=Load()), Name(id='percent', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='remaining_time', ctx=Load()), ops=[Eq()], comparators=[Constant(value='unknown')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='metrics', ctx=Load()), attr='secsleft', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='secs2hours', ctx=Load()), args=[Attribute(value=Name(id='metrics', ctx=Load()), attr='secsleft', ctx=Load())], keywords=[]), Name(id='remaining_time', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), FunctionDef(name='test_sensors_battery_against_sysctl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.battery.life')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load()), Compare(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.acline')], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], keywords=[])), Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='secsleft', ctx=Load())), If(test=Compare(left=Name(id='secsleft', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.battery.time')], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='secsleft', ctx=Load()), BinOp(left=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.battery.time')], keywords=[]), op=Mult(), right=Constant(value=60))], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), FunctionDef(name='test_sensors_battery_no_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='RuntimeError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.battery.life')], keywords=[])), Expr(value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.battery.time')], keywords=[])), Expr(value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='hw.acpi.acline')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='HAS_BATTERY', ctx=Load()), Constant(value='has battery')], keywords=[])]), FunctionDef(name='test_sensors_temperatures_against_sysctl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num_cpus', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[Constant(value=True)], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_cpus', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='sensor', ctx=Store())], value=BinOp(left=Constant(value='dev.cpu.%s.temperature'), op=Mod(), right=Name(id='cpu', ctx=Load()))), Try(body=[Assign(targets=[Name(id='sysctl_result', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Name(id='sysctl', ctx=Load()), args=[Name(id='sensor', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='temperatures not supported by kernel')], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[]), slice=Constant(value='coretemp'), ctx=Load()), slice=Name(id='cpu', ctx=Load()), ctx=Load()), attr='current', ctx=Load()), Name(id='sysctl_result', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=10))])), Assign(targets=[Name(id='sensor', ctx=Store())], value=BinOp(left=Constant(value='dev.cpu.%s.coretemp.tjmax'), op=Mod(), right=Name(id='cpu', ctx=Load()))), Assign(targets=[Name(id='sysctl_result', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Name(id='sysctl', ctx=Load()), args=[Name(id='sensor', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[]), slice=Constant(value='coretemp'), ctx=Load()), slice=Name(id='cpu', ctx=Load()), ctx=Load()), attr='high', ctx=Load()), Name(id='sysctl_result', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='FREEBSD', ctx=Load())), Constant(value='FREEBSD only')], keywords=[])]), ClassDef(name='OpenBSDTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='sysctl', ctx=Load()), args=[Constant(value='kern.boottime')], keywords=[])), Assign(targets=[Name(id='sys_bt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='strptime', ctx=Load()), args=[Name(id='s', ctx=Load()), Constant(value='%a %b %d %H:%M:%S %Y')], keywords=[])), Assign(targets=[Name(id='psutil_bt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='sys_bt', ctx=Load()), Name(id='psutil_bt', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='OPENBSD', ctx=Load())), Constant(value='OPENBSD only')], keywords=[])]), ClassDef(name='NetBSDTestCase', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='parse_meminfo', args=arguments(posonlyargs=[], args=[arg(arg='look_for')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/meminfo')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='look_for', ctx=Load())], keywords=[]), body=[Return(value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])], orelse=[])]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't find %s"), op=Mod(), right=Name(id='look_for', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='test_vmem_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='MemTotal:')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_vmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='MemFree:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_vmem_buffers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='buffers', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='Buffers:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_vmem_shared', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='shared', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='MemShared:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_vmem_cached', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='cached', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='Cached:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swapmem_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='SwapTotal:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swapmem_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_meminfo', ctx=Load()), args=[Constant(value='SwapFree:')], keywords=[])], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_swapmem_used', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='smem', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='smem', ctx=Load()), attr='used', ctx=Load()), BinOp(left=Attribute(value=Name(id='smem', ctx=Load()), attr='total', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='smem', ctx=Load()), attr='free', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_stats_interrupts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/stat'), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'intr')], keywords=[]), body=[Assign(targets=[Name(id='interrupts', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="couldn't find line")], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='interrupts', ctx=Load()), Name(id='interrupts', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1000))]))], decorator_list=[]), FunctionDef(name='test_cpu_stats_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/stat'), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'ctxt')], keywords=[]), body=[Assign(targets=[Name(id='ctx_switches', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="couldn't find line")], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='ctx_switches', ctx=Load()), Name(id='ctx_switches', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1000))]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='NETBSD', ctx=Load())), Constant(value='NETBSD only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])