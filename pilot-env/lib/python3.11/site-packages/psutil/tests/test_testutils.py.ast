Module(body=[Expr(value=Constant(value='Tests for testing utils (psutil.tests namespace).')), Import(names=[alias(name='collections')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='os')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), Import(names=[alias(name='psutil.tests')]), ImportFrom(module='psutil', names=[alias(name='FREEBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='NETBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil._common', names=[alias(name='open_binary')], level=0), ImportFrom(module='psutil._common', names=[alias(name='open_text')], level=0), ImportFrom(module='psutil._common', names=[alias(name='supports_ipv6')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='CI_TESTING')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='COVERAGE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CONNECTIONS_UNIX')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYTHON_EXE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYTHON_EXE_ENV')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TestMemoryLeak')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='bind_socket')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='bind_unix_socket')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='call_until')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='chdir')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='create_sockets')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='get_free_port')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='is_namedtuple')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='mock')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='process_namespace')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='reap_children')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_mkdir')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_rmpath')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='serialrun')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='system_namespace')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='tcp_socketpair')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='terminate')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='unix_socketpair')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='wait_for_file')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='wait_for_pid')], level=0), ClassDef(name='TestRetryDecorator', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_retry_success', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Name(id='queue', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], orelse=[]), Return(value=Constant(value=1))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='retries', value=Constant(value=5)), keyword(arg='interval', value=Constant(value=1)), keyword(arg='logfun', value=Constant(value=None))])]), Assign(targets=[Name(id='queue', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='foo', ctx=Load()), args=[], keywords=[]), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sleep', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=3)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])]), FunctionDef(name='test_retry_failure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Name(id='queue', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], orelse=[]), Return(value=Constant(value=1))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='retries', value=Constant(value=5)), keyword(arg='interval', value=Constant(value=1)), keyword(arg='logfun', value=Constant(value=None))])]), Assign(targets=[Name(id='queue', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=6)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load()), Name(id='foo', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sleep', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=5)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])]), FunctionDef(name='test_exception_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='TypeError', ctx=Load()))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='ValueError', ctx=Load())), keyword(arg='interval', value=Constant(value=1))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='TypeError', ctx=Load()), Name(id='foo', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sleep', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])]), FunctionDef(name='test_no_interval_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='retries', value=Constant(value=5)), keyword(arg='interval', value=Constant(value=None)), keyword(arg='logfun', value=Constant(value=None))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load()), Name(id='foo', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sleep', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])]), FunctionDef(name='test_retries_arg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='retries', value=Constant(value=5)), keyword(arg='interval', value=Constant(value=1)), keyword(arg='logfun', value=Constant(value=None))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load()), Name(id='foo', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sleep', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=5)], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])]), FunctionDef(name='test_retries_and_timeout_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Name(id='retry', ctx=Load())], keywords=[keyword(arg='retries', value=Constant(value=5)), keyword(arg='timeout', value=Constant(value=1))]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='time.sleep')], keywords=[])])], decorator_list=[]), ClassDef(name='TestSyncTestUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_wait_for_pid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='wait_for_pid', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='nopid', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=Constant(value=99999))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.tests.retry.__iter__')], keywords=[keyword(arg='return_value', value=Call(func=Name(id='iter', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[]))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Name(id='wait_for_pid', ctx=Load()), Name(id='nopid', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_wait_for_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='foo')], keywords=[]))]), Expr(value=Call(func=Name(id='wait_for_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='test_wait_for_file_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w')], keywords=[]))], body=[Pass()]), Expr(value=Call(func=Name(id='wait_for_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[keyword(arg='empty', value=Constant(value=True))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='test_wait_for_file_no_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.tests.retry.__iter__')], keywords=[keyword(arg='return_value', value=Call(func=Name(id='iter', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[]))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Name(id='wait_for_file', ctx=Load()), Name(id='testfn', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_wait_for_file_no_delete', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='foo')], keywords=[]))]), Expr(value=Call(func=Name(id='wait_for_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[keyword(arg='delete', value=Constant(value=False))])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_call_until', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='call_until', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=1)), Constant(value='ret == 1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=1)], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestFSTestUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_open_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='mode', ctx=Load()), Constant(value='r')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_open_binary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='mode', ctx=Load()), Constant(value='rb')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_safe_mkdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='safe_mkdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='safe_mkdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_safe_rmpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w')], keywords=[]), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil.tests.os.stat')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='OSError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_chdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='chdir', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='testfn', ctx=Load())], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), Name(id='base', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestProcessUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_reap_children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='reap_children', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[]))), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='tests', ctx=Load()), attr='_pids_started', ctx=Load()))), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='tests', ctx=Load()), attr='_subprocesses_started', ctx=Load())))], decorator_list=[]), FunctionDef(name='test_spawn_children_pair', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='child', ctx=Store()), Name(id='grandchild', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_children_pair', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Attribute(value=Name(id='child', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='grandchild', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='grandchild', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='children', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='children', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='children', ctx=Load()), List(elts=[Name(id='child', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='children', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='children', ctx=Load()), args=[], keywords=[keyword(arg='recursive', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='children', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='child', ctx=Load()), Name(id='children', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='grandchild', ctx=Load()), Name(id='children', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='ppid', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='grandchild', ctx=Load()), attr='ppid', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='child', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[]))), Assert(test=Call(func=Attribute(value=Name(id='grandchild', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='grandchild', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='grandchild', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='test_spawn_zombie', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='zombie', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_zombie', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='zombie', ctx=Load()), attr='status', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='psutil', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), FunctionDef(name='test_terminate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Name(id='PYTHON_EXE', ctx=Load()), Constant(value='-c'), Constant(value='import time; time.sleep(60);')], ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='env', value=Name(id='PYTHON_EXE_ENV', ctx=Load()))])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pid', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load())), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), If(test=Name(id='POSIX', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='zombie', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_zombie', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='zombie', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='parent', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='zombie', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestNetUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='bind_socket', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='port', ctx=Store())], value=Call(func=Name(id='get_free_port', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Call(func=Name(id='bind_socket', ctx=Load()), args=[], keywords=[keyword(arg='addr', value=Tuple(elts=[Constant(value=''), Name(id='port', ctx=Load())], ctx=Load()))])], keywords=[]), optional_vars=Name(id='s', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), Name(id='port', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_bind_unix_socket', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sock', ctx=Load()), attr='family', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNIX', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sock', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISSOCK', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='type', value=Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='sock', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[])]), FunctionDef(name='tcp_tcp_socketpair', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Tuple(elts=[Constant(value='127.0.0.1'), Call(func=Name(id='get_free_port', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='server', ctx=Store()), Name(id='client', ctx=Store())], ctx=Store())], value=Call(func=Name(id='tcp_socketpair', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())], keywords=[keyword(arg='addr', value=Name(id='addr', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='server', ctx=Load())], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='client', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), Name(id='addr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='getpeername', ctx=Load()), args=[], keywords=[]), Name(id='addr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), Name(id='addr', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_unix_socketpair', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='num_fds', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_fds', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unix'))]))), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='server', ctx=Store()), Name(id='client', ctx=Store())], ctx=Store())], value=Call(func=Name(id='unix_socketpair', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Try(body=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISSOCK', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_fds', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='num_fds', ctx=Load())), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unix'))])], keywords=[]), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='getpeername', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='POSIX only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='NETBSD', ctx=Load()), Name(id='FREEBSD', ctx=Load())]), Constant(value='/var/run/log UNIX socket opened by default')], keywords=[])]), FunctionDef(name='test_create_sockets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='create_sockets', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='socks', ctx=Store()))], body=[Assign(targets=[Name(id='fams', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Name(id='types', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), For(target=Name(id='s', ctx=Store()), iter=Name(id='socks', ctx=Load()), body=[AugAssign(target=Subscript(value=Name(id='fams', ctx=Load()), slice=Attribute(value=Name(id='s', ctx=Load()), attr='family', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Subscript(value=Name(id='types', ctx=Load()), slice=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='getsockopt', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOL_SOCKET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SO_TYPE', ctx=Load())], keywords=[]), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='fams', ctx=Load()), slice=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), ctx=Load()), Constant(value=2)], keywords=[])), If(test=Call(func=Name(id='supports_ipv6', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='fams', ctx=Load()), slice=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='POSIX', ctx=Load()), Name(id='HAS_CONNECTIONS_UNIX', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='fams', ctx=Load()), slice=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNIX', ctx=Load()), ctx=Load()), Constant(value=2)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='types', ctx=Load()), slice=Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load()), ctx=Load()), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='types', ctx=Load()), slice=Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load()), ctx=Load()), Constant(value=2)], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestMemLeakClass', bases=[Name(id='TestMemoryLeak', ctx=Load())], keywords=[], body=[FunctionDef(name='test_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='fun', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Subscript(value=Name(id='cnt', ctx=Load()), slice=Constant(value='cnt'), ctx=Store()), op=Add(), value=Constant(value=1))], decorator_list=[]), Assign(targets=[Name(id='cnt', ctx=Store())], value=Dict(keys=[Constant(value='cnt')], values=[Constant(value=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[keyword(arg='times', value=Constant(value=10)), keyword(arg='warmup_times', value=Constant(value=15))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Name(id='cnt', ctx=Load()), slice=Constant(value='cnt'), ctx=Load()), Constant(value=26)], keywords=[]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_param_err', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[keyword(arg='times', value=Constant(value=0))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[keyword(arg='times', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[keyword(arg='warmup_times', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[keyword(arg='tolerance', value=UnaryOp(op=USub(), operand=Constant(value=1)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[keyword(arg='retries', value=UnaryOp(op=USub(), operand=Constant(value=1)))]))], decorator_list=[]), FunctionDef(name='test_leak_mem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ls', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='fun', args=arguments(posonlyargs=[], args=[arg(arg='ls')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='ls', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='ls', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='x'), op=Mult(), right=Constant(value=24)), op=Mult(), right=Constant(value=1024))], keywords=[]))], decorator_list=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaisesRegex', ctx=Load()), args=[Name(id='AssertionError', ctx=Load()), Constant(value='extra-mem'), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Name(id='fun', ctx=Load())], keywords=[keyword(arg='times', value=Constant(value=50))]))], handlers=[], orelse=[], finalbody=[Delete(targets=[Name(id='ls', ctx=Del())])])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='CI_TESTING', ctx=Load()), Constant(value='skipped on CI')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='COVERAGE', ctx=Load()), Constant(value='skipped during test coverage')], keywords=[])]), FunctionDef(name='test_unclosed_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='fun', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='box', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='box', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='kind', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Constant(value='fd'), orelse=Constant(value='handle'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaisesRegex', ctx=Load()), args=[Name(id='AssertionError', ctx=Load()), BinOp(left=Constant(value='unclosed '), op=Add(), right=Name(id='kind', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), Name(id='fun', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_tolerance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='fun', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ls', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='x'), op=Mult(), right=Constant(value=24)), op=Mult(), right=Constant(value=1024))], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='ls', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='times', ctx=Store())], value=Constant(value=100)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[keyword(arg='times', value=Name(id='times', ctx=Load())), keyword(arg='warmup_times', value=Constant(value=0)), keyword(arg='tolerance', value=BinOp(left=BinOp(left=Constant(value=200), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[]), BinOp(left=Name(id='times', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_execute_w_exc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='fun_1', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0)))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load()), Name(id='fun_1', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Name(id='OSError', ctx=Load()), Name(id='fun_1', ctx=Load())], keywords=[]))]), FunctionDef(name='fun_2', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='AssertionError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_w_exc', ctx=Load()), args=[Name(id='ZeroDivisionError', ctx=Load()), Name(id='fun_2', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[Name(id='serialrun', ctx=Load())]), ClassDef(name='TestTestingUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_process_namespace', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='process_namespace', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='test', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fun', ctx=Store())], value=Subscript(value=Subscript(value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='iter', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='getters', ctx=Load())], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='ppid')])], is_async=0)]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='ppid', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_system_namespace', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='system_namespace', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fun', ctx=Store())], value=Subscript(value=Subscript(value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='iter', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='getters', ctx=Load())], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='net_if_addrs')])], is_async=0)]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestOtherUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_is_namedtuple', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Call(func=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='foo'), Constant(value='a b c')], keywords=[]), args=[Constant(value=1), Constant(value=2), Constant(value=3)], keywords=[])], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])