Module(body=[Expr(value=Constant(value='Test utilities.')), ImportFrom(module='__future__', names=[alias(name='print_function')], level=0), Import(names=[alias(name='atexit')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='ctypes')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='gc')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='random')]), Import(names=[alias(name='re')]), Import(names=[alias(name='select')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='warnings')]), ImportFrom(module='socket', names=[alias(name='AF_INET')], level=0), ImportFrom(module='socket', names=[alias(name='AF_INET6')], level=0), ImportFrom(module='socket', names=[alias(name='SOCK_STREAM')], level=0), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='AIX')], level=0), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='NETBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='SUNOS')], level=0), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._common', names=[alias(name='bytes2human')], level=0), ImportFrom(module='psutil._common', names=[alias(name='memoize')], level=0), ImportFrom(module='psutil._common', names=[alias(name='print_color')], level=0), ImportFrom(module='psutil._common', names=[alias(name='supports_ipv6')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileExistsError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileNotFoundError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='range')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='super')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='u')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='unicode')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='which')], level=0), Try(body=[ImportFrom(module='unittest', names=[alias(name='mock')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), Import(names=[alias(name='mock')])])])], orelse=[], finalbody=[]), If(test=Name(id='PY3', ctx=Load()), body=[Import(names=[alias(name='enum')])], orelse=[Assign(targets=[Name(id='enum', ctx=Store())], value=Constant(value=None))]), If(test=Name(id='POSIX', ctx=Load()), body=[ImportFrom(module='psutil._psposix', names=[alias(name='wait_pid')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='APPVEYOR'), Constant(value='DEVNULL'), Constant(value='GLOBAL_TIMEOUT'), Constant(value='TOLERANCE_SYS_MEM'), Constant(value='NO_RETRIES'), Constant(value='PYPY'), Constant(value='PYTHON_EXE'), Constant(value='PYTHON_EXE_ENV'), Constant(value='ROOT_DIR'), Constant(value='SCRIPTS_DIR'), Constant(value='TESTFN_PREFIX'), Constant(value='UNICODE_SUFFIX'), Constant(value='INVALID_UNICODE_SUFFIX'), Constant(value='CI_TESTING'), Constant(value='VALID_PROC_STATUSES'), Constant(value='TOLERANCE_DISK_USAGE'), Constant(value='IS_64BIT'), Constant(value='HAS_CPU_AFFINITY'), Constant(value='HAS_CPU_FREQ'), Constant(value='HAS_ENVIRON'), Constant(value='HAS_PROC_IO_COUNTERS'), Constant(value='HAS_IONICE'), Constant(value='HAS_MEMORY_MAPS'), Constant(value='HAS_PROC_CPU_NUM'), Constant(value='HAS_RLIMIT'), Constant(value='HAS_SENSORS_BATTERY'), Constant(value='HAS_BATTERY'), Constant(value='HAS_SENSORS_FANS'), Constant(value='HAS_SENSORS_TEMPERATURES'), Constant(value='MACOS_11PLUS'), Constant(value='MACOS_12PLUS'), Constant(value='COVERAGE'), Constant(value='pyrun'), Constant(value='terminate'), Constant(value='reap_children'), Constant(value='spawn_testproc'), Constant(value='spawn_zombie'), Constant(value='spawn_children_pair'), Constant(value='ThreadTask'), Constant(value='unittest'), Constant(value='skip_on_access_denied'), Constant(value='skip_on_not_implemented'), Constant(value='retry_on_failure'), Constant(value='TestMemoryLeak'), Constant(value='PsutilTestCase'), Constant(value='process_namespace'), Constant(value='system_namespace'), Constant(value='print_sysinfo'), Constant(value='chdir'), Constant(value='safe_rmpath'), Constant(value='create_exe'), Constant(value='get_testfn'), Constant(value='get_winver'), Constant(value='kernel_version'), Constant(value='call_until'), Constant(value='wait_for_pid'), Constant(value='wait_for_file'), Constant(value='check_net_address'), Constant(value='get_free_port'), Constant(value='bind_socket'), Constant(value='bind_unix_socket'), Constant(value='tcp_socketpair'), Constant(value='unix_socketpair'), Constant(value='create_sockets'), Constant(value='reload_module'), Constant(value='import_module_by_path'), Constant(value='warn'), Constant(value='copyload_shared_lib'), Constant(value='is_namedtuple')], ctx=Load())), Assign(targets=[Name(id='PYPY', ctx=Store())], value=Compare(left=Constant(value='__pypy__'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='builtin_module_names', ctx=Load())])), Assign(targets=[Name(id='APPVEYOR', ctx=Store())], value=Compare(left=Constant(value='APPVEYOR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])), Assign(targets=[Name(id='GITHUB_ACTIONS', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='GITHUB_ACTIONS'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Compare(left=Constant(value='CIBUILDWHEEL'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])])), Assign(targets=[Name(id='CI_TESTING', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='APPVEYOR', ctx=Load()), Name(id='GITHUB_ACTIONS', ctx=Load())])), Assign(targets=[Name(id='COVERAGE', ctx=Store())], value=Compare(left=Constant(value='COVERAGE_RUN'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])), Assign(targets=[Name(id='IS_64BIT', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))])), FunctionDef(name='macos_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=16)], ctx=Load())]), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-sS'), Constant(value='-c'), Constant(value='import platform; print(platform.mac_ver()[0])')], ctx=Load())], keywords=[keyword(arg='env', value=Dict(keys=[Constant(value='SYSTEM_VERSION_COMPAT')], values=[Constant(value='0')])), keyword(arg='universal_newlines', value=Constant(value=True))])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[Name(id='memoize', ctx=Load())]), If(test=Name(id='MACOS', ctx=Load()), body=[Assign(targets=[Name(id='MACOS_11PLUS', ctx=Store())], value=Compare(left=Call(func=Name(id='macos_version', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=15)], ctx=Load())])), Assign(targets=[Name(id='MACOS_12PLUS', ctx=Store())], value=Compare(left=Call(func=Name(id='macos_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=12), Constant(value=0)], ctx=Load())]))], orelse=[Assign(targets=[Name(id='MACOS_11PLUS', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='MACOS_12PLUS', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Name(id='NO_RETRIES', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='TOLERANCE_SYS_MEM', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=5), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='TOLERANCE_DISK_USAGE', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='GLOBAL_TIMEOUT', ctx=Store())], value=Constant(value=5)), If(test=Name(id='CI_TESTING', ctx=Load()), body=[AugAssign(target=Name(id='NO_RETRIES', ctx=Store()), op=Mult(), value=Constant(value=3)), AugAssign(target=Name(id='GLOBAL_TIMEOUT', ctx=Store()), op=Mult(), value=Constant(value=3)), AugAssign(target=Name(id='TOLERANCE_SYS_MEM', ctx=Store()), op=Mult(), value=Constant(value=4)), AugAssign(target=Name(id='TOLERANCE_DISK_USAGE', ctx=Store()), op=Mult(), value=Constant(value=3))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), body=[Assign(targets=[Name(id='TESTFN_PREFIX', ctx=Store())], value=BinOp(left=Constant(value='$psutil-%s-'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])))], orelse=[Assign(targets=[Name(id='TESTFN_PREFIX', ctx=Store())], value=BinOp(left=Constant(value='@psutil-%s-'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])))]), Assign(targets=[Name(id='UNICODE_SUFFIX', ctx=Store())], value=Call(func=Name(id='u', ctx=Load()), args=[Constant(value='-ƒőő')], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='INVALID_UNICODE_SUFFIX', ctx=Store())], value=Call(func=Attribute(value=Constant(value=b'f\xc0\x80'), attr='decode', ctx=Load()), args=[Constant(value='utf8'), Constant(value='surrogateescape')], keywords=[]))], orelse=[Assign(targets=[Name(id='INVALID_UNICODE_SUFFIX', ctx=Store())], value=Constant(value='fÀ\x80'))]), Assign(targets=[Name(id='ASCII_FS', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='ascii'), Constant(value='us-ascii')], ctx=Load())])), Assign(targets=[Name(id='ROOT_DIR', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), Constant(value='..'), Constant(value='..')], keywords=[])], keywords=[])), Assign(targets=[Name(id='SCRIPTS_DIR', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PSUTIL_SCRIPTS_DIR'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='ROOT_DIR', ctx=Load()), Constant(value='scripts')], keywords=[])], keywords=[])), Assign(targets=[Name(id='HERE', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='HAS_CONNECTIONS_UNIX', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='POSIX', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='SUNOS', ctx=Load()))])), Assign(targets=[Name(id='HAS_CPU_AFFINITY', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='cpu_affinity')], keywords=[])), Assign(targets=[Name(id='HAS_CPU_FREQ', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='cpu_freq')], keywords=[])), Assign(targets=[Name(id='HAS_GETLOADAVG', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='getloadavg')], keywords=[])), Assign(targets=[Name(id='HAS_ENVIRON', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='environ')], keywords=[])), Assign(targets=[Name(id='HAS_IONICE', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='ionice')], keywords=[])), Assign(targets=[Name(id='HAS_MEMORY_MAPS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='memory_maps')], keywords=[])), Assign(targets=[Name(id='HAS_NET_IO_COUNTERS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='net_io_counters')], keywords=[])), Assign(targets=[Name(id='HAS_PROC_CPU_NUM', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='cpu_num')], keywords=[])), Assign(targets=[Name(id='HAS_PROC_IO_COUNTERS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='io_counters')], keywords=[])), Assign(targets=[Name(id='HAS_RLIMIT', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='rlimit')], keywords=[])), Assign(targets=[Name(id='HAS_SENSORS_BATTERY', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_battery')], keywords=[])), Try(body=[Assign(targets=[Name(id='HAS_BATTERY', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='HAS_SENSORS_BATTERY', ctx=Load()), Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[])]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='HAS_BATTERY', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='HAS_SENSORS_FANS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_fans')], keywords=[])), Assign(targets=[Name(id='HAS_SENSORS_TEMPERATURES', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_temperatures')], keywords=[])), Assign(targets=[Name(id='HAS_THREADS', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='threads')], keywords=[])), Assign(targets=[Name(id='SKIP_SYSCONS', ctx=Store())], value=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Name(id='MACOS', ctx=Load()), Name(id='AIX', ctx=Load())]), Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)])])), FunctionDef(name='_get_py_exe', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='attempt', args=arguments(posonlyargs=[], args=[arg(arg='exe')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_call', ctx=Load()), args=[List(elts=[Name(id='exe', ctx=Load()), Constant(value='-V')], ctx=Load())], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[Return(value=Name(id='exe', ctx=Load()))], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='_base_executable'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=7)], ctx=Load())]), Compare(left=Name(id='base', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='__PYVENV_LAUNCHER__'), ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), Return(value=Tuple(elts=[Name(id='base', ctx=Load()), Name(id='env', ctx=Load())], ctx=Load()))], orelse=[If(test=Name(id='GITHUB_ACTIONS', ctx=Load()), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Name(id='env', ctx=Load())], ctx=Load()))], orelse=[If(test=Name(id='MACOS', ctx=Load()), body=[Assign(targets=[Name(id='exe', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='attempt', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[]), Call(func=Name(id='attempt', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])], keywords=[]), Call(func=Name(id='attempt', ctx=Load()), args=[Call(func=Name(id='which', ctx=Load()), args=[BinOp(left=Constant(value='python%s.%s'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()))], keywords=[])], keywords=[]), Call(func=Name(id='attempt', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='exe', ctx=Load()), args=[], keywords=[])], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='exe', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="can't find python exe real abspath")], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='exe', ctx=Load()), Name(id='env', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='exe', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='exe', ctx=Load())], keywords=[]), msg=Name(id='exe', ctx=Load())), Return(value=Tuple(elts=[Name(id='exe', ctx=Load()), Name(id='env', ctx=Load())], ctx=Load()))])])])], decorator_list=[]), Assign(targets=[Tuple(elts=[Name(id='PYTHON_EXE', ctx=Store()), Name(id='PYTHON_EXE_ENV', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_get_py_exe', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='DEVNULL', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load()), Constant(value='r+')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='atexit', ctx=Load()), attr='register', ctx=Load()), args=[Attribute(value=Name(id='DEVNULL', ctx=Load()), attr='close', ctx=Load())], keywords=[])), Assign(targets=[Name(id='VALID_PROC_STATUSES', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='STATUS_')], keywords=[])], is_async=0)])), Assign(targets=[Name(id='AF_UNIX', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='socket', ctx=Load()), Constant(value='AF_UNIX'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='_subprocesses_started', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_pids_started', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), ClassDef(name='ThreadTask', bases=[Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A thread task which does nothing expect staying alive.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_interval', ctx=Store())], value=Constant(value=0.001)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_flag', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Event', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), Return(value=BinOp(left=Constant(value='<%s running=%s at %#x>'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Load()), Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], ctx=Load())))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Start thread and keep it running until an explicit\n        stop() request. Polls for shutdown every 'timeout' seconds.\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='already started')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), attr='start', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flag', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_flag', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[])), While(test=Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_interval', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='stop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stop thread execution and and waits until it is stopped.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='already stopped')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_running', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_reap_children_on_err', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Name(id='reap_children', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='spawn_testproc', args=arguments(posonlyargs=[], args=[arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Creates a python subprocess which does nothing for 60 secs and\n    return it as a subprocess.Popen instance.\n    If "cmd" is specified that is used instead of python.\n    By default stdin and stdout are redirected to /dev/null.\n    It also attempts to make sure the process is in a reasonably\n    initialized state.\n    The process is registered for cleanup on reap_children().\n    ')), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stdin'), Name(id='DEVNULL', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stdout'), Name(id='DEVNULL', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='cwd'), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='env'), Name(id='PYTHON_EXE_ENV', ctx=Load())], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='CREATE_NO_WINDOW', ctx=Store())], value=Constant(value=134217728)), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='creationflags'), Name(id='CREATE_NO_WINDOW', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cmd', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pyline', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='from time import sleep;'), op=Add(), right=BinOp(left=Constant(value="open(r'%s', 'w').close();"), op=Mod(), right=Name(id='testfn', ctx=Load()))), op=Add(), right=Constant(value='sleep(60);'))), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Name(id='PYTHON_EXE', ctx=Load()), Constant(value='-c'), Name(id='pyline', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_subprocesses_started', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='sproc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='wait_for_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[keyword(arg='delete', value=Constant(value=True)), keyword(arg='empty', value=Constant(value=True))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_subprocesses_started', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='sproc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='wait_for_pid', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))]), Return(value=Name(id='sproc', ctx=Load()))], decorator_list=[Name(id='_reap_children_on_err', ctx=Load())]), FunctionDef(name='spawn_children_pair', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a subprocess which creates another one as in:\n    A (us) -> B (child) -> C (grandchild).\n    Return a (child, grandchild) tuple.\n    The 2 processes are fully initialized and will live for 60 secs\n    and are registered for cleanup on reap_children().\n    ')), Assign(targets=[Name(id='tfile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='dir', value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]))])), Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[BinOp(left=Constant(value='            import subprocess, os, sys, time\n            s = "import os, time;"\n            s += "f = open(\'%s\', \'w\');"\n            s += "f.write(str(os.getpid()));"\n            s += "f.close();"\n            s += "time.sleep(60);"\n            p = subprocess.Popen([r\'%s\', \'-c\', s])\n            p.wait()\n            '), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), Name(id='PYTHON_EXE', ctx=Load())], ctx=Load()))], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='subp', ctx=Store()), Name(id='tfile', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pyrun', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(arg='creationflags', value=Constant(value=0))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='subp', ctx=Store()), Name(id='tfile', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pyrun', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='child', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='grandchild_pid', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='wait_for_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[keyword(arg='delete', value=Constant(value=True)), keyword(arg='empty', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_pids_started', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='grandchild_pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='grandchild', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='grandchild_pid', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='child', ctx=Load()), Name(id='grandchild', ctx=Load())], ctx=Load()))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='tfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='tfile', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Name(id='_reap_children_on_err', ctx=Load())]), FunctionDef(name='spawn_zombie', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a zombie process and return a (parent, zombie) process tuple.\n    In order to kill the zombie parent must be terminate()d first, then\n    zombie must be wait()ed on.\n    ')), Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load())), Assign(targets=[Name(id='unix_file', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[BinOp(left=Constant(value="        import os, sys, time, socket, contextlib\n        child_pid = os.fork()\n        if child_pid > 0:\n            time.sleep(3000)\n        else:\n            # this is the zombie process\n            s = socket.socket(socket.AF_UNIX)\n            with contextlib.closing(s):\n                s.connect('%s')\n                if sys.version_info < (3, ):\n                    pid = str(os.getpid())\n                else:\n                    pid = bytes(str(os.getpid()), 'ascii')\n                s.sendall(pid)\n        "), op=Mod(), right=Name(id='unix_file', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='tfile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='unix_file', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='settimeout', ctx=Load()), args=[Name(id='GLOBAL_TIMEOUT', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='tfile', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pyrun', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='conn', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='accept', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], ctx=Load()), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Name(id='GLOBAL_TIMEOUT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='zpid', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='recv', ctx=Load()), args=[Constant(value=1024)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_pids_started', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='zpid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='zombie', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='zpid', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='call_until', ctx=Load()), args=[Attribute(value=Name(id='zombie', ctx=Load()), attr='status', ctx=Load()), Constant(value='ret == psutil.STATUS_ZOMBIE')], keywords=[])), Return(value=Tuple(elts=[Name(id='parent', ctx=Load()), Name(id='zombie', ctx=Load())], ctx=Load()))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='unix_file', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='tfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='tfile', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='pyrun', args=arguments(posonlyargs=[], args=[arg(arg='src')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Expr(value=Constant(value="Run python 'src' code string in a separate interpreter.\n    Returns a subprocess.Popen instance and the test file where the source\n    code was written.\n    ")), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stdout'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stderr'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='srcfile', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='srcfile', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[List(elts=[Name(id='PYTHON_EXE', ctx=Load()), Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load())], ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Name(id='wait_for_pid', ctx=Load()), args=[Attribute(value=Name(id='subp', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='subp', ctx=Load()), Name(id='srcfile', ctx=Load())], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='srcfile', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='_reap_children_on_err', ctx=Load())]), FunctionDef(name='sh', args=arguments(posonlyargs=[], args=[arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Expr(value=Constant(value='Run cmd in a subprocess and return its output.\n    raises RuntimeError on error.\n    ')), Assign(targets=[Name(id='flags', ctx=Store())], value=IfExp(test=Name(id='WINDOWS', ctx=Load()), body=Constant(value=134217728), orelse=Constant(value=0))), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stdout'), Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='stderr'), Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='universal_newlines'), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='creationflags'), Name(id='flags', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_subprocesses_started', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Name(id='GLOBAL_TIMEOUT', ctx=Load()))]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='p', ctx=Load()), attr='returncode', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Name(id='stderr', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='stderr', ctx=Load()), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Name(id='stderr', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Subscript(value=Name(id='stdout', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=Name(id='stdout', ctx=Load()))], decorator_list=[Name(id='_reap_children_on_err', ctx=Load())]), FunctionDef(name='terminate', args=arguments(posonlyargs=[], args=[arg(arg='proc_or_pid'), arg(arg='sig'), arg(arg='wait_timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load()), Name(id='GLOBAL_TIMEOUT', ctx=Load())]), body=[Expr(value=Constant(value="Terminate a process and wait() for it.\n    Process can be a PID or an instance of psutil.Process(),\n    subprocess.Popen() or psutil.Popen().\n    If it's a subprocess.Popen() or psutil.Popen() instance also closes\n    its stdin / stdout / stderr fds.\n    PID is wait()ed even if the process is already gone (kills zombies).\n    Does nothing if the process does not exist.\n    Return process exit status.\n    ")), FunctionDef(name='wait', args=arguments(posonlyargs=[], args=[arg(arg='proc'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='proc', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='proc', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load())], keywords=[])]), body=[Try(body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='wait', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='sendsig', args=arguments(posonlyargs=[], args=[arg(arg='proc'), arg(arg='sig')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='MACOS', ctx=Load()), Name(id='GITHUB_ACTIONS', ctx=Load())]), body=[Assign(targets=[Name(id='sig', ctx=Store())], value=Attribute(value=Name(id='signal', ctx=Load()), attr='SIGKILL', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='POSIX', ctx=Load()), Compare(left=Name(id='sig', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGKILL', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='send_signal', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGCONT', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='send_signal', ctx=Load()), args=[Name(id='sig', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='term_subprocess_proc', args=arguments(posonlyargs=[], args=[arg(arg='proc'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='sendsig', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='sig', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='winerror', ctx=Load()), ops=[Eq()], comparators=[Constant(value=6)])]), body=[Pass()], orelse=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ESRCH', ctx=Load())]), body=[Raise()], orelse=[])])])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='wait', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='term_psutil_proc', args=arguments(posonlyargs=[], args=[arg(arg='proc'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='sendsig', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='sig', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='wait', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='term_pid', args=arguments(posonlyargs=[], args=[arg(arg='pid'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[If(test=Name(id='POSIX', ctx=Load()), body=[Return(value=Call(func=Name(id='wait_pid', ctx=Load()), args=[Name(id='pid', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[Return(value=Call(func=Name(id='term_psutil_proc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='flush_popen', args=arguments(posonlyargs=[], args=[arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stderr', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stderr', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stdin', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stdin', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Name(id='proc_or_pid', ctx=Load())), Try(body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='term_pid', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='wait_timeout', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='p', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='Popen', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='term_psutil_proc', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='wait_timeout', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='p', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='term_subprocess_proc', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='wait_timeout', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='wrong type %r'), op=Mod(), right=Name(id='p', ctx=Load()))], keywords=[]))])])])], handlers=[], orelse=[], finalbody=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='p', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='Popen', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='flush_popen', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pid', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=Name(id='p', ctx=Load()), orelse=Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load()))), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), msg=Name(id='pid', ctx=Load()))])], decorator_list=[]), FunctionDef(name='reap_children', args=arguments(posonlyargs=[], args=[arg(arg='recursive')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Terminate and wait() any subprocess started by this test suite\n    and any children currently running, ensuring that no processes stick\n    around to hog resources.\n    If recursive is True it also tries to terminate and wait()\n    all grandchildren started by this process.\n    ')), Assign(targets=[Name(id='children', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='children', ctx=Load()), args=[], keywords=[keyword(arg='recursive', value=Name(id='recursive', ctx=Load()))])), While(test=Name(id='_subprocesses_started', ctx=Load()), body=[Assign(targets=[Name(id='subp', ctx=Store())], value=Call(func=Attribute(value=Name(id='_subprocesses_started', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='subp', ctx=Load())], keywords=[]))], orelse=[]), While(test=Name(id='_pids_started', ctx=Load()), body=[Assign(targets=[Name(id='pid', ctx=Store())], value=Call(func=Attribute(value=Name(id='_pids_started', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='children', ctx=Load()), body=[For(target=Name(id='p', ctx=Store()), iter=Name(id='children', ctx=Load()), body=[Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[keyword(arg='wait_timeout', value=Constant(value=None))]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='alive', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='wait_procs', ctx=Load()), args=[Name(id='children', ctx=Load())], keywords=[keyword(arg='timeout', value=Name(id='GLOBAL_TIMEOUT', ctx=Load()))])), For(target=Name(id='p', ctx=Store()), iter=Name(id='alive', ctx=Load()), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[BinOp(left=Constant(value="couldn't terminate process %r; attempting kill()"), op=Mod(), right=Name(id='p', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='terminate', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[keyword(arg='sig', value=Attribute(value=Name(id='signal', ctx=Load()), attr='SIGKILL', ctx=Load()))]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='kernel_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a tuple such as (2, 6, 36).')), If(test=UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='not POSIX')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='uname', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=2), ctx=Load())), For(target=Name(id='c', ctx=Store()), iter=Name(id='uname', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')])]), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Name(id='c', ctx=Load()))], orelse=[Break()])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't parse %r"), op=Mod(), right=Name(id='uname', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='minor', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='micro', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='nums', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='major', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='nums', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='nums', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='minor', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='nums', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='nums', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='micro', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='nums', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='major', ctx=Load()), Name(id='minor', ctx=Load()), Name(id='micro', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_winver', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='not WINDOWS')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='wv', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getwindowsversion', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='wv', ctx=Load()), Constant(value='service_pack_major')], keywords=[]), body=[Assign(targets=[Name(id='sp', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='wv', ctx=Load()), attr='service_pack_major', ctx=Load()), Constant(value=0)]))], orelse=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='\\s\\d$'), Subscript(value=Name(id='wv', ctx=Load()), slice=Constant(value=4), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sp', ctx=Store())], value=IfExp(test=Name(id='r', ctx=Load()), body=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]), orelse=Constant(value=0)))]), Return(value=Tuple(elts=[Subscript(value=Name(id='wv', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='wv', ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='sp', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='retry', bases=[], keywords=[], body=[Expr(value=Constant(value='A retry decorator.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exception'), arg(arg='timeout'), arg(arg='retries'), arg(arg='interval'), arg(arg='logfun')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Exception', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=0.001), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Name(id='timeout', ctx=Load()), Name(id='retries', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='timeout and retries args are mutually exclusive')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exception', ctx=Store())], value=Name(id='exception', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store())], value=Name(id='timeout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Store())], value=Name(id='retries', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='interval', ctx=Store())], value=Name(id='interval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='logfun', ctx=Store())], value=Name(id='logfun', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load()), body=[Assign(targets=[Name(id='stop_at', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load()))), While(test=Compare(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Name(id='stop_at', ctx=Load())]), body=[Expr(value=Yield())], orelse=[])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()), body=[For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load())], keywords=[]), body=[Expr(value=Yield())], orelse=[])], orelse=[While(test=Constant(value=True), body=[Expr(value=Yield())], orelse=[])])])], decorator_list=[]), FunctionDef(name='sleep', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='interval', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='interval', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Constant(value=None)), For(target=Name(id='_', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='self', ctx=Load()), attr='exception', ctx=Load()), name='_', body=[Assign(targets=[Name(id='exc', ctx=Store())], value=Name(id='_', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='logfun', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='logfun', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Load()), args=[], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='PY3', ctx=Load()), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[Raise()])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='decorator', ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='wait_for_pid', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wait for pid to show up in the process list then return.\n    Used in the test suite to give time the sub process to initialize.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.01)], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load())), keyword(arg='logfun', value=Constant(value=None)), keyword(arg='timeout', value=Name(id='GLOBAL_TIMEOUT', ctx=Load())), keyword(arg='interval', value=Constant(value=0.001))])]), FunctionDef(name='wait_for_file', args=arguments(posonlyargs=[], args=[arg(arg='fname'), arg(arg='delete'), arg(arg='empty')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Wait for a file to be written on disk with some content.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fname', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='empty', ctx=Load())), body=[Assert(test=Name(id='data', ctx=Load()))], orelse=[]), If(test=Name(id='delete', ctx=Load()), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='AssertionError', ctx=Load())], ctx=Load())), keyword(arg='logfun', value=Constant(value=None)), keyword(arg='timeout', value=Name(id='GLOBAL_TIMEOUT', ctx=Load())), keyword(arg='interval', value=Constant(value=0.001))])]), FunctionDef(name='call_until', args=arguments(posonlyargs=[], args=[arg(arg='fun'), arg(arg='expr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Keep calling function for timeout secs and exit if eval()\n    expression is True.\n    ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Name(id='eval', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='AssertionError', ctx=Load())), keyword(arg='logfun', value=Constant(value=None)), keyword(arg='timeout', value=Name(id='GLOBAL_TIMEOUT', ctx=Load())), keyword(arg='interval', value=Constant(value=0.001))])]), FunctionDef(name='safe_rmpath', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convenience function for removing temporary test files or dirs.')), FunctionDef(name='retry_fun', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stop_at', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='GLOBAL_TIMEOUT', ctx=Load()))), While(test=Compare(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Name(id='stop_at', ctx=Load())]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='WindowsError', ctx=Load()), name='_', body=[Assign(targets=[Name(id='err', ctx=Store())], value=Name(id='_', ctx=Load())), Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[BinOp(left=Constant(value='ignoring %s'), op=Mod(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.01)], keywords=[]))], orelse=[]), Raise(exc=Name(id='err', ctx=Load()))], decorator_list=[]), Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISDIR', ctx=Load()), args=[Attribute(value=Name(id='st', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))]), If(test=Name(id='POSIX', ctx=Load()), body=[Expr(value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='retry_fun', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='safe_mkdir', args=arguments(posonlyargs=[], args=[arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convenience function for creating a directory.')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileExistsError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='chdir', args=arguments(posonlyargs=[], args=[arg(arg='dirname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Context manager which temporarily changes the current directory.')), Assign(targets=[Name(id='curdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[])), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='curdir', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='create_exe', args=arguments(posonlyargs=[], args=[arg(arg='outpath'), arg(arg='c_code')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Creates an executable file in the given location.')), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='outpath', ctx=Load())], keywords=[])), msg=Name(id='outpath', ctx=Load())), If(test=Name(id='c_code', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='gcc')], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='gcc is not installed')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c_code', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='c_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n                #include <unistd.h>\n                int main() {\n                    pause();\n                    return 1;\n                }\n                ')], keywords=[]))], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='c_code', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), msg=Name(id='c_code', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Constant(value='.c'))]), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='c_code', ctx=Load())], keywords=[]))]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_call', ctx=Load()), args=[List(elts=[Constant(value='gcc'), Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Constant(value='-o'), Name(id='outpath', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='PYTHON_EXE', ctx=Load()), Name(id='outpath', ctx=Load())], keywords=[])), If(test=Name(id='POSIX', ctx=Load()), body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='outpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='outpath', ctx=Load()), BinOp(left=Attribute(value=Name(id='st', ctx=Load()), attr='st_mode', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IEXEC', ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='get_testfn', args=arguments(posonlyargs=[], args=[arg(arg='suffix'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None)]), body=[Expr(value=Constant(value="Return an absolute pathname of a file or dir that did not\n    exist at the time this call is made. Also schedule it for safe\n    deletion at interpreter exit. It's technically racy but probably\n    not really due to the time variant.\n    ")), While(test=Constant(value=True), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mktemp', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=Name(id='TESTFN_PREFIX', ctx=Load())), keyword(arg='suffix', value=Name(id='suffix', ctx=Load())), keyword(arg='dir', value=Name(id='dir', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), ClassDef(name='TestCase', bases=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fqmod', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__module__', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='fqmod', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='psutil.')], keywords=[])), body=[Assign(targets=[Name(id='fqmod', ctx=Store())], value=BinOp(left=Constant(value='psutil.tests.'), op=Add(), right=Name(id='fqmod', ctx=Load())))], orelse=[]), Return(value=BinOp(left=Constant(value='%s.%s.%s'), op=Mod(), right=Tuple(elts=[Name(id='fqmod', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_testMethodName', ctx=Load())], ctx=Load())))], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load()), Constant(value='assertRaisesRegex')], keywords=[])), body=[Assign(targets=[Name(id='assertRaisesRegex', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load()), attr='assertRaisesRegexp', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[FunctionDef(name='runTest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='subTest', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Expr(value=Yield())], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())])], orelse=[])], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Store())], value=Name(id='TestCase', ctx=Load())), ClassDef(name='PsutilTestCase', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Test class providing auto-cleanup wrappers on top of process\n    test utilities.\n    ')), FunctionDef(name='get_testfn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='suffix'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None)]), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Name(id='suffix', ctx=Load())), keyword(arg='dir', value=Name(id='dir', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='safe_rmpath', ctx=Load()), Name(id='fname', ctx=Load())], keywords=[])), Return(value=Name(id='fname', ctx=Load()))], decorator_list=[]), FunctionDef(name='spawn_testproc', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Name(id='spawn_testproc', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='sproc', ctx=Load())], keywords=[])), Return(value=Name(id='sproc', ctx=Load()))], decorator_list=[]), FunctionDef(name='spawn_children_pair', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='child1', ctx=Store()), Name(id='child2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='spawn_children_pair', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='child2', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='child1', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='child1', ctx=Load()), Name(id='child2', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='spawn_zombie', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='zombie', ctx=Store())], ctx=Store())], value=Call(func=Name(id='spawn_zombie', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='zombie', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='parent', ctx=Load()), Name(id='zombie', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='pyrun', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='sproc', ctx=Store()), Name(id='srcfile', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pyrun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='safe_rmpath', ctx=Load()), Name(id='srcfile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='terminate', ctx=Load()), Name(id='sproc', ctx=Load())], keywords=[])), Return(value=Name(id='sproc', ctx=Load()))], decorator_list=[]), FunctionDef(name='_check_proc_exc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proc'), arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='Error', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='proc', ctx=Load()), attr='_name', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='exc', ctx=Load()), attr='name', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='name', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), Attribute(value=Name(id='proc', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='assertPidGone', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[Constant(value="wasn't supposed to raise ZombieProcess")], keywords=[]))])], orelse=[], finalbody=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load()), attr='pid', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load()), attr='name', ctx=Load()), Constant(value=None)], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), msg=Name(id='pid', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Name(id='pid', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Name(id='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='assertProcessGone', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='process_namespace', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='fun', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='iter', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='all', ctx=Load())], keywords=[keyword(arg='clear_cache', value=Constant(value=True))]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='subTest', ctx=Load()), args=[], keywords=[keyword(arg='proc', value=Name(id='proc', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))]))], body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load()), body=[Raise()]), ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_proc_exc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value="Process.%s() didn't raise NSP and returned %r"), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='ret', ctx=Load())], ctx=Load()))), Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], finalbody=[])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Constant(value=0))]))], decorator_list=[]), FunctionDef(name='assertProcessZombie', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='clone', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='clone', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hash', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[]), Call(func=Name(id='hash', ctx=Load()), args=[Name(id='clone', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='status', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='psutil', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='_pmap', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='process_namespace', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='fun', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='iter', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='all', ctx=Load())], keywords=[keyword(arg='clear_cache', value=Constant(value=True))]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='subTest', ctx=Load()), args=[], keywords=[keyword(arg='proc', value=Name(id='proc', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load()))]))], body=[Try(body=[Expr(value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load())], ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_proc_exc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[]), If(test=Name(id='LINUX', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_proc_exc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='exe', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_proc_exc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='memory_maps', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_proc_exc', ctx=Load()), args=[Name(id='proc', ctx=Load()), Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='suspend', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='resume', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='kill', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='_pmap', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load()), ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pid', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='process_iter', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestMemoryLeak', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Test framework class for detecting function memory leaks,\n    typically functions implemented in C which forgot to free() memory\n    from the heap. It does so by checking whether the process memory\n    usage increased before and after calling the function many times.\n\n    Note that this is hard (probably impossible) to do reliably, due\n    to how the OS handles memory, the GC and so on (memory can even\n    decrease!). In order to avoid false positives, in case of failure\n    (mem > 0) we retry the test for up to 5 times, increasing call\n    repetitions each time. If the memory keeps increasing then it's a\n    failure.\n\n    If available (Linux, OSX, Windows), USS memory is used for comparison,\n    since it's supposed to be more precise, see:\n    https://gmpy.dev/blog/2016/real-process-memory-and-environ-in-python\n    If not, RSS memory is used. mallinfo() on Linux and _heapwalk() on\n    Windows may give even more precision, but at the moment are not\n    implemented.\n\n    PyPy appears to be completely unstable for this framework, probably\n    because of its JIT, so tests on PYPY are skipped.\n\n    Usage:\n\n        class TestLeaks(psutil.tests.TestMemoryLeak):\n\n            def test_fun(self):\n                self.execute(some_function)\n    ")), Assign(targets=[Name(id='times', ctx=Store())], value=Constant(value=200)), Assign(targets=[Name(id='warmup_times', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='tolerance', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='retries', ctx=Store())], value=IfExp(test=Name(id='CI_TESTING', ctx=Load()), body=Constant(value=10), orelse=Constant(value=5))), Assign(targets=[Name(id='verbose', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='_thisproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_psutil_debug_orig', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PSUTIL_DEBUG')], keywords=[])], keywords=[])), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_set_debug', ctx=Load()), args=[Constant(value=False)], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='tearDownClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='_set_debug', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='_psutil_debug_orig', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_get_mem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thisproc', ctx=Load()), attr='memory_full_info', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mem', ctx=Load()), Constant(value='uss'), Attribute(value=Name(id='mem', ctx=Load()), attr='rss', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='POSIX', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thisproc', ctx=Load()), attr='num_fds', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thisproc', ctx=Load()), attr='num_handles', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='_log', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_color', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='color', value=Constant(value='yellow')), keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_check_fds', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes sure num_fds() (POSIX) or num_handles() (Windows) does\n        not increase after calling a function.  Used to discover forgotten\n        close(2) and CloseHandle syscalls.\n        ')), Assign(targets=[Name(id='before', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_num_fds', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])), Assign(targets=[Name(id='after', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_num_fds', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Name(id='after', ctx=Load()), op=Sub(), right=Name(id='before', ctx=Load()))), If(test=Compare(left=Name(id='diff', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[BinOp(left=Constant(value='negative diff %r (gc probably collected a resource from a previous test)'), op=Mod(), right=Name(id='diff', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='type_', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Constant(value='fd'), orelse=Constant(value='handle'))), If(test=Compare(left=Name(id='diff', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[AugAssign(target=Name(id='type_', ctx=Store()), op=Add(), value=Constant(value='s'))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%s unclosed %s after calling %r'), op=Mod(), right=Tuple(elts=[Name(id='diff', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='fun', ctx=Load())], ctx=Load()))), Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_call_ntimes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun'), arg(arg='times')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get 2 distinct memory samples, before and after having\n        called fun repeatedly, and return the memory difference.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='gc', ctx=Load()), attr='collect', ctx=Load()), args=[], keywords=[keyword(arg='generation', value=Constant(value=1))])), Assign(targets=[Name(id='mem1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_mem', ctx=Load()), args=[], keywords=[])), For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='times', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='call', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])), Delete(targets=[Name(id='x', ctx=Del()), Name(id='ret', ctx=Del())])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='gc', ctx=Load()), attr='collect', ctx=Load()), args=[], keywords=[keyword(arg='generation', value=Constant(value=1))])), Assign(targets=[Name(id='mem2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_mem', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gc', ctx=Load()), attr='garbage', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='diff', ctx=Store())], value=BinOp(left=Name(id='mem2', ctx=Load()), op=Sub(), right=Name(id='mem1', ctx=Load()))), Return(value=Name(id='diff', ctx=Load()))], decorator_list=[]), FunctionDef(name='_check_mem', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun'), arg(arg='times'), arg(arg='retries'), arg(arg='tolerance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='messages', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='prev_mem', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='increase', ctx=Store())], value=Name(id='times', ctx=Load())), For(target=Name(id='idx', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='retries', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_ntimes', ctx=Load()), args=[Name(id='fun', ctx=Load()), Name(id='times', ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Run #%s: extra-mem=%s, per-call=%s, calls=%s'), op=Mod(), right=Tuple(elts=[Name(id='idx', ctx=Load()), Call(func=Name(id='bytes2human', ctx=Load()), args=[Name(id='mem', ctx=Load())], keywords=[]), Call(func=Name(id='bytes2human', ctx=Load()), args=[BinOp(left=Name(id='mem', ctx=Load()), op=Div(), right=Name(id='times', ctx=Load()))], keywords=[]), Name(id='times', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='messages', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='success', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Name(id='mem', ctx=Load()), ops=[LtE()], comparators=[Name(id='tolerance', ctx=Load())]), Compare(left=Name(id='mem', ctx=Load()), ops=[LtE()], comparators=[Name(id='prev_mem', ctx=Load())])])), If(test=Name(id='success', ctx=Load()), body=[If(test=Compare(left=Name(id='idx', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return()], orelse=[If(test=Compare(left=Name(id='idx', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), AugAssign(target=Name(id='times', ctx=Store()), op=Add(), value=Name(id='increase', ctx=Load())), Assign(targets=[Name(id='prev_mem', ctx=Store())], value=Name(id='mem', ctx=Load()))])], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='. '), attr='join', ctx=Load()), args=[Name(id='messages', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='call', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fun'), arg(arg='times'), arg(arg='warmup_times'), arg(arg='retries'), arg(arg='tolerance')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Test a callable.')), Assign(targets=[Name(id='times', ctx=Store())], value=IfExp(test=Compare(left=Name(id='times', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='times', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='times', ctx=Load()))), Assign(targets=[Name(id='warmup_times', ctx=Store())], value=IfExp(test=Compare(left=Name(id='warmup_times', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='warmup_times', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='warmup_times', ctx=Load()))), Assign(targets=[Name(id='retries', ctx=Store())], value=IfExp(test=Compare(left=Name(id='retries', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='retries', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()))), Assign(targets=[Name(id='tolerance', ctx=Store())], value=IfExp(test=Compare(left=Name(id='tolerance', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='tolerance', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='tolerance', ctx=Load()))), Try(body=[Assert(test=Compare(left=Name(id='times', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), msg=Constant(value='times must be >= 1')), Assert(test=Compare(left=Name(id='warmup_times', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Constant(value='warmup_times must be >= 0')), Assert(test=Compare(left=Name(id='retries', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Constant(value='retries must be >= 0')), Assert(test=Compare(left=Name(id='tolerance', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Constant(value='tolerance must be >= 0'))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_ntimes', ctx=Load()), args=[Name(id='fun', ctx=Load()), Name(id='warmup_times', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_fds', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_mem', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[keyword(arg='times', value=Name(id='times', ctx=Load())), keyword(arg='retries', value=Name(id='retries', ctx=Load())), keyword(arg='tolerance', value=Name(id='tolerance', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='execute_w_exc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc'), arg(arg='fun')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Convenience method to test a callable while making sure it\n        raises an exception on every call.\n        ')), FunctionDef(name='call', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='fun', ctx=Load())], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='call', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='PYPY', ctx=Load()), Constant(value='unreliable on PYPY')], keywords=[])]), FunctionDef(name='print_sysinfo', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='collections')]), Import(names=[alias(name='datetime')]), Import(names=[alias(name='getpass')]), Import(names=[alias(name='locale')]), Import(names=[alias(name='pprint')]), Try(body=[Import(names=[alias(name='pip')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='pip', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='wheel')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='psutil', ctx=Load()), attr='LINUX', ctx=Load()), Call(func=Name(id='which', ctx=Load()), args=[Constant(value='lsb_release')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='OS'), ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='lsb_release -d -s')], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='OSX', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='OS'), ctx=Store())], value=BinOp(left=Constant(value='Darwin %s'), op=Mod(), right=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())))], orelse=[If(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='WINDOWS', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='OS'), ctx=Store())], value=BinOp(left=Constant(value='Windows '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='win32_ver', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='platform', ctx=Load()), Constant(value='win32_edition')], keywords=[]), body=[AugAssign(target=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='OS'), ctx=Store()), op=Add(), value=BinOp(left=Constant(value=', '), op=Add(), right=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='win32_edition', ctx=Load()), args=[], keywords=[])))], orelse=[])], orelse=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='OS'), ctx=Store())], value=BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[])], ctx=Load())))])])]), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='arch'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='architecture', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=List(elts=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[])], ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='kernel'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=2), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='python'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_compiler', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pip'), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='pip', ctx=Load()), Constant(value='__version__'), Constant(value='not installed')], keywords=[])), If(test=Compare(left=Name(id='wheel', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pip'), ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' (wheel=%s)'), op=Mod(), right=Attribute(value=Name(id='wheel', ctx=Load()), attr='__version__', ctx=Load())))], orelse=[]), If(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load()), body=[If(test=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='gcc')], keywords=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='gcc'), Constant(value='--version')], ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='gcc'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='gcc'), ctx=Store())], value=Constant(value='not installed'))]), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='libc_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())), If(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='glibc'), ctx=Store())], value=Name(id='s', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='fs-encoding'), ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lang', ctx=Store())], value=Call(func=Attribute(value=Name(id='locale', ctx=Load()), attr='getlocale', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='lang'), ctx=Store())], value=BinOp(left=Constant(value='%s, %s'), op=Mod(), right=Tuple(elts=[Subscript(value=Name(id='lang', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='lang', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='boot-time'), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='time'), ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[]), attr='strftime', ctx=Load()), args=[Constant(value='%Y-%m-%d %H:%M:%S')], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='user'), ctx=Store())], value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getuser', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='home'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='cwd'), ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pyexe'), ctx=Store())], value=Name(id='PYTHON_EXE', ctx=Load())), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='hostname'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='node', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='PID'), ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='cpus'), ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='loadavg'), ctx=Store())], value=BinOp(left=Constant(value='%.1f%%, %.1f%%, %.1f%%'), op=Mod(), right=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=BinOp(left=BinOp(left=Name(id='x', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])), op=Mult(), right=Constant(value=100)), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='getloadavg', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))), Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='memory'), ctx=Store())], value=BinOp(left=Constant(value='%s%%, used=%s, total=%s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='percent', ctx=Load())], keywords=[]), Call(func=Name(id='bytes2human', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='used', ctx=Load())], keywords=[]), Call(func=Name(id='bytes2human', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='swap', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='swap'), ctx=Store())], value=BinOp(left=Constant(value='%s%%, used=%s, total=%s'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='swap', ctx=Load()), attr='percent', ctx=Load())], keywords=[]), Call(func=Name(id='bytes2human', ctx=Load()), args=[Attribute(value=Name(id='swap', ctx=Load()), attr='used', ctx=Load())], keywords=[]), Call(func=Name(id='bytes2human', ctx=Load()), args=[Attribute(value=Name(id='swap', ctx=Load()), attr='total', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pids'), ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='pinfo', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='as_dict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pinfo', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='memory_maps'), Constant(value=None)], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='proc'), ctx=Store())], value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pformat', ctx=Load()), args=[Name(id='pinfo', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='='), op=Mult(), right=Constant(value=70))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='%-17s %s'), op=Mod(), right=Tuple(elts=[BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=':')), Name(id='v', ctx=Load())], ctx=Load()))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='='), op=Mult(), right=Constant(value=70))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_eligible_cpu', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='cpu_num')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_num', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='p', ctx=Load()), Constant(value='cpu_affinity')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='choice', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_affinity', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])]), Return(value=Constant(value=0))], decorator_list=[]), ClassDef(name='process_namespace', bases=[], keywords=[], body=[Expr(value=Constant(value='A container that lists all Process class method names + some\n    reasonable parameters to be called with. Utility methods (parent(),\n    children(), ...) are excluded.\n\n    >>> ns = process_namespace(psutil.Process())\n    >>> for fun, name in ns.iter(ns.getters):\n    ...    fun()\n    ')), Assign(targets=[Name(id='utils', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='cpu_percent'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='memory_percent'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ignored', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='as_dict'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='children'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='recursive')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='is_running'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='memory_info_ex'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='oneshot'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='parent'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='parents'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='pid'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='wait'), Tuple(elts=[Constant(value=0)], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='getters', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='cmdline'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='connections'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='kind')], values=[Constant(value='all')])], ctx=Load()), Tuple(elts=[Constant(value='cpu_times'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='create_time'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='cwd'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='exe'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='memory_full_info'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='memory_info'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='name'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='nice'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='num_ctx_switches'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='num_threads'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='open_files'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='ppid'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='status'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='threads'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='username'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), If(test=Name(id='POSIX', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='uids'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='gids'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='terminal'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='num_fds'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_PROC_IO_COUNTERS', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='io_counters'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_IONICE', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='ionice'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_RLIMIT', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='rlimit'), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_CPU_AFFINITY', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='cpu_affinity'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_PROC_CPU_NUM', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='cpu_num'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_ENVIRON', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='environ'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='num_handles'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_MEMORY_MAPS', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='memory_maps'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='grouped')], values=[Constant(value=False)])], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='setters', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='POSIX', ctx=Load()), body=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='nice'), Tuple(elts=[Constant(value=0)], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='nice'), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NORMAL_PRIORITY_CLASS', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))]), If(test=Name(id='HAS_RLIMIT', ctx=Load()), body=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='rlimit'), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load()), Tuple(elts=[Constant(value=1024), Constant(value=4096)], ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_IONICE', ctx=Load()), body=[If(test=Name(id='LINUX', ctx=Load()), body=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='ionice'), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_CLASS_NONE', ctx=Load()), Constant(value=0)], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='ionice'), Tuple(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_NORMAL', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))])], orelse=[]), If(test=Name(id='HAS_CPU_AFFINITY', ctx=Load()), body=[AugAssign(target=Name(id='setters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='cpu_affinity'), Tuple(elts=[List(elts=[Call(func=Name(id='_get_eligible_cpu', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='killers', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='send_signal'), Tuple(elts=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='suspend'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='resume'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='terminate'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='kill'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), If(test=Name(id='WINDOWS', ctx=Load()), body=[AugAssign(target=Name(id='killers', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='send_signal'), Tuple(elts=[Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_C_EVENT', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='killers', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='send_signal'), Tuple(elts=[Attribute(value=Name(id='signal', ctx=Load()), attr='CTRL_BREAK_EVENT', ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='all', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='utils', ctx=Load()), op=Add(), right=Name(id='getters', ctx=Load())), op=Add(), right=Name(id='setters', ctx=Load())), op=Add(), right=Name(id='killers', ctx=Load()))), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_proc', ctx=Store())], value=Name(id='proc', ctx=Load()))], decorator_list=[]), FunctionDef(name='iter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ls'), arg(arg='clear_cache')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Given a list of tuples yields a set of (fun, fun_name) tuples\n        in random order.\n        ')), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='fun_name', ctx=Store()), Name(id='args', ctx=Store()), Name(id='kwds', ctx=Store())], ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[If(test=Name(id='clear_cache', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='clear_cache', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_proc', ctx=Load()), Name(id='fun_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='fun', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Yield(value=Tuple(elts=[Name(id='fun', ctx=Load()), Name(id='fun_name', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='clear_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear the cache of a Process instance.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_proc', ctx=Load()), attr='_init', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_proc', ctx=Load()), attr='pid', ctx=Load())], keywords=[keyword(arg='_ignore_nsp', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='test_class_coverage', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='test_class'), arg(arg='ls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given a TestCase instance and a list of tuples checks that\n        the class defines the required test method names.\n        ')), For(target=Tuple(elts=[Name(id='fun_name', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[Assign(targets=[Name(id='meth_name', ctx=Store())], value=BinOp(left=Constant(value='test_'), op=Add(), right=Name(id='fun_name', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='test_class', ctx=Load()), Name(id='meth_name', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value="%r class should define a '%s' method"), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='test_class', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Name(id='meth_name', ctx=Load())], ctx=Load()))), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='this', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='all', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='ignored', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='ignored', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='klass', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load())], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='_')])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='leftout', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='this', ctx=Load()), op=BitOr(), right=Name(id='ignored', ctx=Load())), op=BitXor(), right=Name(id='klass', ctx=Load()))), If(test=Name(id='leftout', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='uncovered Process class names: %r'), op=Mod(), right=Name(id='leftout', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='system_namespace', bases=[], keywords=[], body=[Expr(value=Constant(value='A container that lists all the module-level, system-related APIs.\n    Utilities such as cpu_percent() are excluded. Usage:\n\n    >>> ns = system_namespace\n    >>> for fun, name in ns.iter(ns.getters):\n    ...    fun()\n    ')), Assign(targets=[Name(id='getters', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='boot_time'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='cpu_count'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='logical')], values=[Constant(value=False)])], ctx=Load()), Tuple(elts=[Constant(value='cpu_count'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='logical')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='cpu_stats'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='cpu_times'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='percpu')], values=[Constant(value=False)])], ctx=Load()), Tuple(elts=[Constant(value='cpu_times'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='percpu')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='disk_io_counters'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='perdisk')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='disk_partitions'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='all')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='disk_usage'), Tuple(elts=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='net_connections'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='kind')], values=[Constant(value='all')])], ctx=Load()), Tuple(elts=[Constant(value='net_if_addrs'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='net_if_stats'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='net_io_counters'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='pernic')], values=[Constant(value=True)])], ctx=Load()), Tuple(elts=[Constant(value='pid_exists'), Tuple(elts=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='pids'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='swap_memory'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='users'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='virtual_memory'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), If(test=Name(id='HAS_CPU_FREQ', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='cpu_freq'), Tuple(elts=[], ctx=Load()), Dict(keys=[Constant(value='percpu')], values=[Constant(value=True)])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_GETLOADAVG', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='getloadavg'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_SENSORS_TEMPERATURES', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='sensors_temperatures'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_SENSORS_FANS', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='sensors_fans'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='HAS_SENSORS_BATTERY', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='sensors_battery'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='win_service_iter'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), AugAssign(target=Name(id='getters', ctx=Store()), op=Add(), value=List(elts=[Tuple(elts=[Constant(value='win_service_get'), Tuple(elts=[Constant(value='alg')], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ignored', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='process_iter'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='wait_procs'), Tuple(elts=[List(elts=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])], ctx=Load())], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='cpu_percent'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='cpu_times_percent'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='all', ctx=Store())], value=Name(id='getters', ctx=Load())), FunctionDef(name='iter', args=arguments(posonlyargs=[], args=[arg(arg='ls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given a list of tuples yields a set of (fun, fun_name) tuples\n        in random order.\n        ')), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='shuffle', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='fun_name', ctx=Store()), Name(id='args', ctx=Store()), Name(id='kwds', ctx=Store())], ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='fun_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fun', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='fun', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))])), Expr(value=Yield(value=Tuple(elts=[Name(id='fun', ctx=Load()), Name(id='fun_name', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), Assign(targets=[Name(id='test_class_coverage', ctx=Store())], value=Attribute(value=Name(id='process_namespace', ctx=Load()), attr='test_class_coverage', ctx=Load()))], decorator_list=[]), FunctionDef(name='serialrun', args=arguments(posonlyargs=[], args=[arg(arg='klass')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A decorator to mark a TestCase class. When running parallel tests,\n    class' unit tests will be run serially (1 process).\n    ")), Assert(test=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isclass', ctx=Load()), args=[Name(id='klass', ctx=Load())], keywords=[]), msg=Name(id='klass', ctx=Load())), Assign(targets=[Attribute(value=Name(id='klass', ctx=Load()), attr='_serialrun', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='klass', ctx=Load()))], decorator_list=[]), FunctionDef(name='retry_on_failure', args=arguments(posonlyargs=[], args=[arg(arg='retries')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='NO_RETRIES', ctx=Load())]), body=[Expr(value=Constant(value='Decorator which runs a test function and retries N times before\n    actually failing.\n    ')), FunctionDef(name='logfun', args=arguments(posonlyargs=[], args=[arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='%r, retrying'), op=Mod(), right=Name(id='exc', ctx=Load()))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))]))], decorator_list=[]), Return(value=Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='exception', value=Name(id='AssertionError', ctx=Load())), keyword(arg='timeout', value=Constant(value=None)), keyword(arg='retries', value=Name(id='retries', ctx=Load())), keyword(arg='logfun', value=Name(id='logfun', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='skip_on_access_denied', args=arguments(posonlyargs=[], args=[arg(arg='only_if')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Decorator to Ignore AccessDenied exceptions.')), FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), body=[If(test=Compare(left=Name(id='only_if', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='only_if', ctx=Load())), body=[Raise()], orelse=[])], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value='raises AccessDenied')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), Return(value=Name(id='decorator', ctx=Load()))], decorator_list=[]), FunctionDef(name='skip_on_not_implemented', args=arguments(posonlyargs=[], args=[arg(arg='only_if')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Decorator to Ignore NotImplementedError exceptions.')), FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[If(test=Compare(left=Name(id='only_if', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='only_if', ctx=Load())), body=[Raise()], orelse=[])], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%r was skipped because it raised NotImplementedError'), op=Mod(), right=Attribute(value=Name(id='fun', ctx=Load()), attr='__name__', ctx=Load()))), Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), Return(value=Name(id='decorator', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_free_port', args=arguments(posonlyargs=[], args=[arg(arg='host')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='127.0.0.1')]), body=[Expr(value=Constant(value='Return an unused TCP port. Subject to race conditions.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='sock', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Name(id='host', ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[])), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()))])], decorator_list=[]), FunctionDef(name='bind_socket', args=arguments(posonlyargs=[], args=[arg(arg='family'), arg(arg='type'), arg(arg='addr')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='AF_INET', ctx=Load()), Name(id='SOCK_STREAM', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Binds a generic socket.')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='addr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='family', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load())])]), body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Tuple(elts=[Constant(value=''), Constant(value=0)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='family', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), Try(body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='nt'), Constant(value='cygwin')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='setsockopt', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOL_SOCKET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SO_REUSEADDR', ctx=Load()), Constant(value=1)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='listen', ctx=Load()), args=[Constant(value=5)], keywords=[]))], orelse=[]), Return(value=Name(id='sock', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='bind_unix_socket', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())]), body=[Expr(value=Constant(value='Bind a UNIX socket.')), Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), msg=Name(id='name', ctx=Load())), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNIX', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='listen', ctx=Load()), args=[Constant(value=5)], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='sock', ctx=Load()))], decorator_list=[]), FunctionDef(name='tcp_socketpair', args=arguments(posonlyargs=[], args=[arg(arg='family'), arg(arg='addr')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Constant(value=''), Constant(value=0)], ctx=Load())]), body=[Expr(value=Constant(value='Build a pair of TCP sockets connected to each other.\n    Return a (server, client) tuple.\n    ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='family', ctx=Load()), Name(id='SOCK_STREAM', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='ll', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='ll', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ll', ctx=Load()), attr='listen', ctx=Load()), args=[Constant(value=5)], keywords=[])), Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ll', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='family', ctx=Load()), Name(id='SOCK_STREAM', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='connect', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='caddr', ctx=Store())], value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='getsockname', ctx=Load()), args=[], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Tuple(elts=[Name(id='a', ctx=Store()), Name(id='addr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ll', ctx=Load()), attr='accept', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='addr', ctx=Load()), ops=[Eq()], comparators=[Name(id='caddr', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='a', ctx=Load()), Name(id='c', ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='unix_socketpair', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build a pair of UNIX sockets connected to each other through\n    the same UNIX file name.\n    Return a (server, client) tuple.\n    ')), Assert(test=Attribute(value=Name(id='psutil', ctx=Load()), attr='POSIX', ctx=Load())), Assign(targets=[Name(id='server', ctx=Store()), Name(id='client', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='server', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='type', value=Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='setblocking', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='client', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNIX', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='setblocking', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='connect', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=Compare(left=Name(id='server', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='client', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Name(id='server', ctx=Load()), Name(id='client', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='create_sockets', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Open as many socket families / types as possible.')), Assign(targets=[Name(id='socks', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='fname1', ctx=Store()), Name(id='fname2', ctx=Store())], value=Constant(value=None)), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='socks', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='bind_socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='socks', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='bind_socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Name(id='supports_ipv6', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='socks', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='bind_socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='socks', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='bind_socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='POSIX', ctx=Load()), Name(id='HAS_CONNECTIONS_UNIX', ctx=Load())]), body=[Assign(targets=[Name(id='fname1', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fname2', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='s1', ctx=Store()), Name(id='s2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='unix_socketpair', ctx=Load()), args=[Name(id='fname1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='s3', ctx=Store())], value=Call(func=Name(id='bind_unix_socket', ctx=Load()), args=[Name(id='fname2', ctx=Load())], keywords=[keyword(arg='type', value=Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load()))])), For(target=Name(id='s', ctx=Store()), iter=Tuple(elts=[Name(id='s1', ctx=Load()), Name(id='s2', ctx=Load()), Name(id='s3', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='socks', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Yield(value=Name(id='socks', ctx=Load())))], handlers=[], orelse=[], finalbody=[For(target=Name(id='s', ctx=Store()), iter=Name(id='socks', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='fname', ctx=Store()), iter=Tuple(elts=[Name(id='fname1', ctx=Load()), Name(id='fname2', ctx=Load())], ctx=Load()), body=[If(test=Compare(left=Name(id='fname', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='check_net_address', args=arguments(posonlyargs=[], args=[arg(arg='addr'), arg(arg='family')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check a net address validity. Supported families are IPv4,\n    IPv6 and MAC addresses.\n    ')), Import(names=[alias(name='ipaddress')]), If(test=BoolOp(op=And(), values=[Name(id='enum', ctx=Load()), Name(id='PY3', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='PYPY', ctx=Load()))]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='family', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]), msg=Name(id='family', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())]), body=[Assign(targets=[Name(id='octs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='addr', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='octs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]), msg=Name(id='addr', ctx=Load())), For(target=Name(id='num', ctx=Store()), iter=Name(id='octs', ctx=Load()), body=[Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='num', ctx=Load()), Constant(value=255)]), msg=Name(id='addr', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Name(id='unicode', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv4Address', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='addr', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), msg=Name(id='addr', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Name(id='unicode', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='IPv6Address', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load())]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='([a-fA-F0-9]{2}[:|\\-]?){6}'), Name(id='addr', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Name(id='addr', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='unknown family %r'), op=Mod(), right=Name(id='family', ctx=Load()))], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='check_connection_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check validity of a connection namedtuple.')), FunctionDef(name='check_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='has_pid', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=7)])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value=6), Constant(value=7)], ctx=Load())]), msg=Call(func=Name(id='len', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='fd', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='fd', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=3), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=4), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='raddr', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='raddr', ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=5), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), If(test=Name(id='has_pid', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='conn', ctx=Load()), slice=Constant(value=6), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='conn', ctx=Load()), attr='pid', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='pid', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='check_family', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load()), Name(id='AF_UNIX', ctx=Load())], ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load())), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]), msg=Name(id='conn', ctx=Load()))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), msg=Name(id='conn', ctx=Load()))]), If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Name(id='AF_INET', ctx=Load())]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EADDRNOTAVAIL', ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])])], orelse=[If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Name(id='AF_UNIX', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='CONN_NONE', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='check_type', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='SOCK_SEQPACKET', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='socket', ctx=Load()), Constant(value='SOCK_SEQPACKET'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load()), Name(id='SOCK_SEQPACKET', ctx=Load())], ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load())), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]), msg=Name(id='conn', ctx=Load()))], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), msg=Name(id='conn', ctx=Load()))]), If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='CONN_NONE', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='check_addrs', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='addr', ctx=Store()), iter=Tuple(elts=[Attribute(value=Name(id='conn', ctx=Load()), attr='laddr', ctx=Load()), Attribute(value=Name(id='conn', ctx=Load()), attr='raddr', ctx=Load())], ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load())]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='addr', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), msg=Call(func=Name(id='type', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='addr', ctx=Load())), body=[Continue()], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='port', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), msg=Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='port', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Attribute(value=Name(id='addr', ctx=Load()), attr='port', ctx=Load()), Constant(value=65535)]), msg=Attribute(value=Name(id='addr', ctx=Load()), attr='port', ctx=Load())), Expr(value=Call(func=Name(id='check_net_address', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='ip', ctx=Load()), Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Name(id='AF_UNIX', ctx=Load())]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='addr', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), msg=Call(func=Name(id='type', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='check_status', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), Assign(targets=[Name(id='valids', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='CONN_')], keywords=[])], is_async=0)])), Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[In()], comparators=[Name(id='valids', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='family', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load())]), Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Name(id='SOCK_STREAM', ctx=Load())])]), body=[Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='CONN_NONE', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='CONN_NONE', ctx=Load())]), msg=Attribute(value=Name(id='conn', ctx=Load()), attr='status', ctx=Load()))])], decorator_list=[]), Expr(value=Call(func=Name(id='check_ntuple', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_family', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_type', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_addrs', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_status', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='reload_module', args=arguments(posonlyargs=[], args=[arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Backport of importlib.reload of Python 3.3+.')), Try(body=[Import(names=[alias(name='importlib')]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='importlib', ctx=Load()), Constant(value='reload')], keywords=[])), body=[Raise(exc=Name(id='ImportError', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='imp')]), Return(value=Call(func=Attribute(value=Name(id='imp', ctx=Load()), attr='reload', ctx=Load()), args=[Name(id='module', ctx=Load())], keywords=[]))])], orelse=[Return(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='reload', ctx=Load()), args=[Name(id='module', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='import_module_by_path', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Import(names=[alias(name='imp')]), Return(value=Call(func=Attribute(value=Name(id='imp', ctx=Load()), attr='load_source', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], orelse=[Import(names=[alias(name='importlib.util')]), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_file_location', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='module_from_spec', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), attr='exec_module', ctx=Load()), args=[Name(id='mod', ctx=Load())], keywords=[])), Return(value=Name(id='mod', ctx=Load()))])], decorator_list=[]), FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise a warning msg.')), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='UserWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], decorator_list=[]), FunctionDef(name='is_namedtuple', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if object is an instance of namedtuple.')), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='b', ctx=Store())], value=Attribute(value=Name(id='t', ctx=Load()), attr='__bases__', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Name(id='b', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Name(id='tuple', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='t', ctx=Load()), Constant(value='_fields'), Constant(value=None)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Name(id='f', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), If(test=Name(id='POSIX', ctx=Load()), body=[FunctionDef(name='copyload_shared_lib', args=arguments(posonlyargs=[], args=[arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Ctx manager which picks up a random shared CO lib used\n        by this process, copies it in another location and loads it\n        in memory via ctypes. Return the new absolutized path.\n        ')), Assign(targets=[Name(id='exe', ctx=Store())], value=IfExp(test=Name(id='PYPY', ctx=Load()), body=Constant(value='pypy'), orelse=Constant(value='python'))), Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='.so')), Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=BinOp(left=Name(id='suffix', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())))])), Assign(targets=[Name(id='libs', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Name(id='ext', ctx=Load())]), Compare(left=Name(id='exe', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])])], is_async=0)])), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='libs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='CDLL', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='dst', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())])], orelse=[FunctionDef(name='copyload_shared_lib', args=arguments(posonlyargs=[], args=[arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Ctx manager which picks up a random shared DLL lib used\n        by this process, copies it in another location and loads it\n        in memory via ctypes.\n        Return the new absolutized, normcased path.\n        ')), ImportFrom(module='ctypes', names=[alias(name='WinError')], level=0), ImportFrom(module='ctypes', names=[alias(name='wintypes')], level=0), Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='.dll')), Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Name(id='get_testfn', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=BinOp(left=Name(id='suffix', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())))])), Assign(targets=[Name(id='libs', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]), Compare(left=Constant(value='python'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])]), Compare(left=Constant(value='wow64'), ops=[NotIn()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])])], is_async=0)])), If(test=BoolOp(op=And(), values=[Name(id='PYPY', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='libs', ctx=Load()))]), body=[Assign(targets=[Name(id='libs', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Constant(value='pypy'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='x', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])])], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='libs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cfile', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='cfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='WinDLL', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='dst', ctx=Load())))], handlers=[], orelse=[], finalbody=[If(test=Compare(left=Name(id='cfile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='FreeLibrary', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='FreeLibrary', ctx=Load())), Assign(targets=[Attribute(value=Name(id='FreeLibrary', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HMODULE', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='FreeLibrary', ctx=Load()), args=[Attribute(value=Name(id='cfile', ctx=Load()), attr='_handle', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='WinError', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())])]), FunctionDef(name='cleanup_test_procs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='reap_children', ctx=Load()), args=[], keywords=[keyword(arg='recursive', value=Constant(value=True))]))], decorator_list=[Attribute(value=Name(id='atexit', ctx=Load()), attr='register', ctx=Load())]), If(test=Name(id='POSIX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='signal', ctx=Load()), attr='signal', ctx=Load()), args=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='sig'), arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Name(id='sig', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], type_ignores=[])