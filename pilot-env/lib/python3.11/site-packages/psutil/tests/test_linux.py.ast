Module(body=[Expr(value=Constant(value='Linux specific tests.')), ImportFrom(module='__future__', names=[alias(name='division')], level=0), Import(names=[alias(name='collections')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='glob')]), Import(names=[alias(name='io')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='time')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileNotFoundError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='basestring')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='u')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GITHUB_ACTIONS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GLOBAL_TIMEOUT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_BATTERY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CPU_FREQ')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_GETLOADAVG')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_RLIMIT')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYPY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_DISK_USAGE')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='TOLERANCE_SYS_MEM')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='ThreadTask')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='call_until')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='mock')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='reload_module')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='retry_on_failure')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='safe_rmpath')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='sh')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='skip_on_not_implemented')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='which')], level=0), If(test=Name(id='LINUX', ctx=Load()), body=[ImportFrom(module='psutil._pslinux', names=[alias(name='CLOCK_TICKS')], level=0), ImportFrom(module='psutil._pslinux', names=[alias(name='RootFsDeviceFinder')], level=0), ImportFrom(module='psutil._pslinux', names=[alias(name='calculate_avail_vmem')], level=0), ImportFrom(module='psutil._pslinux', names=[alias(name='open_binary')], level=0)], orelse=[]), Assign(targets=[Name(id='HERE', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='SIOCGIFADDR', ctx=Store())], value=Constant(value=35093)), Assign(targets=[Name(id='SIOCGIFCONF', ctx=Store())], value=Constant(value=35090)), Assign(targets=[Name(id='SIOCGIFHWADDR', ctx=Store())], value=Constant(value=35111)), Assign(targets=[Name(id='SIOCGIFNETMASK', ctx=Store())], value=Constant(value=35099)), Assign(targets=[Name(id='SIOCGIFBRDADDR', ctx=Store())], value=Constant(value=35097)), If(test=Name(id='LINUX', ctx=Load()), body=[Assign(targets=[Name(id='SECTOR_SIZE', ctx=Store())], value=Constant(value=512))], orelse=[]), Assign(targets=[Name(id='EMPTY_TEMPERATURES', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/hwmon/hwmon*')], keywords=[]))), FunctionDef(name='get_ipv4_address', args=arguments(posonlyargs=[], args=[arg(arg='ifname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='fcntl')]), Assign(targets=[Name(id='ifname', ctx=Store())], value=Subscript(value=Name(id='ifname', ctx=Load()), slice=Slice(upper=Constant(value=15)), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='ifname', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Constant(value='ascii')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntoa', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='fcntl', ctx=Load()), attr='ioctl', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Name(id='SIOCGIFADDR', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='256s'), Name(id='ifname', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=20), upper=Constant(value=24)), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_ipv4_netmask', args=arguments(posonlyargs=[], args=[arg(arg='ifname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='fcntl')]), Assign(targets=[Name(id='ifname', ctx=Store())], value=Subscript(value=Name(id='ifname', ctx=Load()), slice=Slice(upper=Constant(value=15)), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='ifname', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Constant(value='ascii')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntoa', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='fcntl', ctx=Load()), attr='ioctl', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Name(id='SIOCGIFNETMASK', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='256s'), Name(id='ifname', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=20), upper=Constant(value=24)), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_ipv4_broadcast', args=arguments(posonlyargs=[], args=[arg(arg='ifname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='fcntl')]), Assign(targets=[Name(id='ifname', ctx=Store())], value=Subscript(value=Name(id='ifname', ctx=Load()), slice=Slice(upper=Constant(value=15)), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='ifname', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Constant(value='ascii')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntoa', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='fcntl', ctx=Load()), attr='ioctl', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Name(id='SIOCGIFBRDADDR', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='256s'), Name(id='ifname', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=20), upper=Constant(value=24)), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_ipv6_addresses', args=arguments(posonlyargs=[], args=[arg(arg='ifname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/net/if_inet6')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='all_fields', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='fields', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Name(id='ifname', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='all_fields', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='all_fields', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='could not find interface %r'), op=Mod(), right=Name(id='ifname', ctx=Load()))], keywords=[]))], orelse=[])]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='all_fields', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='unformatted', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='all_fields', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='groups', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='unformatted', ctx=Load())], keywords=[]), Constant(value=4)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='groups', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='unformatted', ctx=Load()), slice=Slice(lower=Name(id='j', ctx=Load()), upper=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=Constant(value=4))), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='formatted', ctx=Store())], value=Call(func=Attribute(value=Constant(value=':'), attr='join', ctx=Load()), args=[Name(id='groups', ctx=Load())], keywords=[])), Assign(targets=[Name(id='packed', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_pton', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Name(id='formatted', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='all_fields', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntop', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Name(id='packed', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='all_fields', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_mac_address', args=arguments(posonlyargs=[], args=[arg(arg='ifname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='fcntl')]), Assign(targets=[Name(id='ifname', ctx=Store())], value=Subscript(value=Name(id='ifname', ctx=Load()), slice=Slice(upper=Constant(value=15)), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='ifname', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Constant(value='ascii')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='fcntl', ctx=Load()), attr='ioctl', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]), Name(id='SIOCGIFHWADDR', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='256s'), Name(id='ifname', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[FunctionDef(name='ord', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='x', ctx=Load()))], decorator_list=[])], orelse=[Import(names=[alias(name='__builtin__')]), Assign(targets=[Name(id='ord', ctx=Store())], value=Attribute(value=Name(id='__builtin__', ctx=Load()), attr='ord', ctx=Load()))]), Return(value=Subscript(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%02x:'), op=Mod(), right=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='char', ctx=Store()), iter=Subscript(value=Name(id='info', ctx=Load()), slice=Slice(lower=Constant(value=18), upper=Constant(value=24)), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])], decorator_list=[]), FunctionDef(name='free_swap', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse 'free' cmd and return swap memory's s total, used and free\n    values.\n    ")), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='free'), Constant(value='-b')], ctx=Load())], keywords=[keyword(arg='env', value=Dict(keys=[Constant(value='LANG')], values=[Constant(value='C.UTF-8')]))])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Swap')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='free'), Constant(value='total used free')], keywords=[])), Return(value=Call(func=Name(id='nt', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='total', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='free', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't find 'Swap' in 'free' output:\n%s"), op=Mod(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='free_physmem', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse 'free' cmd and return physical memory's total, used\n    and free values.\n    ")), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='free'), Constant(value='-b')], ctx=Load())], keywords=[keyword(arg='env', value=Dict(keys=[Constant(value='LANG')], values=[Constant(value='C.UTF-8')]))])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Mem')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store()), Name(id='shared', ctx=Store())], ctx=Store())], value=GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1), upper=Constant(value=5)), ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='free'), Constant(value='total used free shared output')], keywords=[])), Return(value=Call(func=Name(id='nt', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='shared', ctx=Load()), Name(id='out', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't find 'Mem' in 'free' output:\n%s"), op=Mod(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='vmstat', args=arguments(posonlyargs=[], args=[arg(arg='stat')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='vmstat'), Constant(value='-s')], ctx=Load())], keywords=[keyword(arg='env', value=Dict(keys=[Constant(value='LANG')], values=[Constant(value='C.UTF-8')]))])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='stat', ctx=Load()), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't find %r in 'vmstat' output"), op=Mod(), right=Name(id='stat', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='get_free_version_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='free'), Constant(value='-V')], ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='UNKNOWN'), ops=[In()], comparators=[Name(id='out', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value="can't determine free version")], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='\\d+'), Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='mock_open_content', args=arguments(posonlyargs=[], args=[arg(arg='for_path'), arg(arg='content')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Mock open() builtin and forces it to return a certain `content`\n    on read() if the path being opened matches `for_path`.\n    ')), FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='for_path', ctx=Load())]), body=[If(test=Name(id='PY3', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='content', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))])], orelse=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))])], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Yield(value=Name(id='m', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='mock_open_exception', args=arguments(posonlyargs=[], args=[arg(arg='for_path'), arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Mock open() builtin and raises `exc` if the path being opened\n    matches `for_path`.\n    ')), FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='for_path', ctx=Load())]), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Yield(value=Name(id='m', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), ClassDef(name='TestSystemVirtualMemoryAgainstFree', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cli_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_physmem', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='cli_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_used', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='get_free_version_info', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=3), Constant(value=12)], ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='old free version')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cli_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_physmem', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='cli_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cli_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_physmem', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='cli_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_shared', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='free', ctx=Store())], value=Call(func=Name(id='free_physmem', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='free_value', ctx=Store())], value=Attribute(value=Name(id='free', ctx=Load()), attr='shared', ctx=Load())), If(test=Compare(left=Name(id='free_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value="free does not support 'shared' column")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='shared', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load())), keyword(arg='msg', value=BinOp(left=Constant(value='%s %s \n%s'), op=Mod(), right=Tuple(elts=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load()), Attribute(value=Name(id='free', ctx=Load()), attr='output', ctx=Load())], ctx=Load())))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_available', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[List(elts=[Constant(value='free'), Constant(value='-b')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), If(test=Compare(left=Constant(value='available'), ops=[NotIn()], comparators=[Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='SkipTest', ctx=Load()), args=[Constant(value="free does not support 'available' column")], keywords=[]))], orelse=[Assign(targets=[Name(id='free_value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='available', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load())), keyword(arg='msg', value=BinOp(left=Constant(value='%s %s \n%s'), op=Mod(), right=Tuple(elts=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load()), Name(id='out', ctx=Load())], ctx=Load())))]))])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemVirtualMemoryAgainstVmstat', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='total memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_used', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='get_free_version_info', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=3), Constant(value=12)], ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='old free version')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='used memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='free memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_buffers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='buffer memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='buffers', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_active', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='active memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='active', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_inactive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=BinOp(left=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='inactive memory')], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='inactive', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemVirtualMemoryMocks', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_warnings_on_misses', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/meminfo'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                Active(anon):    6145416 kB\n                Active(file):    2950064 kB\n                Inactive(anon):   574764 kB\n                Inactive(file):  1567648 kB\n                MemAvailable:         -1 kB\n                MemFree:         2057400 kB\n                MemTotal:       16325648 kB\n                SReclaimable:     346648 kB\n                ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always')], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ws', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="memory stats couldn't be determined"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='cached'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='shared'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='active'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='inactive'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='buffers'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='available'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='cached', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='active', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='inactive', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='shared', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='buffers', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='available', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='slab', ctx=Load()), Constant(value=0)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_avail_old_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mems', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Constant(value='/proc/meminfo')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='mems', ctx=Load()), slice=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])]), Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Name(id='calculate_avail_vmem', ctx=Load()), args=[Name(id='mems', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value=b'MemAvailable:'), ops=[In()], comparators=[Name(id='mems', ctx=Load())]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemAvailable:'), ctx=Load())), Assign(targets=[Name(id='diff_percent', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='a', ctx=Load()), op=Sub(), right=Name(id='b', ctx=Load()))], keywords=[]), op=Div(), right=Name(id='a', ctx=Load())), op=Mult(), right=Constant(value=100))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLess', ctx=Load()), args=[Name(id='diff_percent', ctx=Load()), Constant(value=15)], keywords=[]))], orelse=[])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_avail_old_comes_from_kernel', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/meminfo'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                Active:          9444728 kB\n                Active(anon):    6145416 kB\n                Active(file):    2950064 kB\n                Buffers:          287952 kB\n                Cached:          4818144 kB\n                Inactive(file):  1578132 kB\n                Inactive(anon):   574764 kB\n                Inactive(file):  1567648 kB\n                MemAvailable:    6574984 kB\n                MemFree:         2057400 kB\n                MemTotal:       16325648 kB\n                Shmem:            577588 kB\n                SReclaimable:     346648 kB\n                ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]))]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='available', ctx=Load()), BinOp(left=Constant(value=6574984), op=Mult(), right=Constant(value=1024))], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="inactive memory stats couldn't be determined"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_avail_old_missing_fields', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/meminfo'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    Active:          9444728 kB\n                    Active(anon):    6145416 kB\n                    Buffers:          287952 kB\n                    Cached:          4818144 kB\n                    Inactive(file):  1578132 kB\n                    Inactive(anon):   574764 kB\n                    MemFree:         2057400 kB\n                    MemTotal:       16325648 kB\n                    Shmem:            577588 kB\n                    ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]))]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='available', ctx=Load()), BinOp(left=BinOp(left=Constant(value=2057400), op=Mult(), right=Constant(value=1024)), op=Add(), right=BinOp(left=Constant(value=4818144), op=Mult(), right=Constant(value=1024)))], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="inactive memory stats couldn't be determined"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_avail_old_missing_zoneinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/meminfo'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    Active:          9444728 kB\n                    Active(anon):    6145416 kB\n                    Active(file):    2950064 kB\n                    Buffers:          287952 kB\n                    Cached:          4818144 kB\n                    Inactive(file):  1578132 kB\n                    Inactive(anon):   574764 kB\n                    Inactive(file):  1567648 kB\n                    MemFree:         2057400 kB\n                    MemTotal:       16325648 kB\n                    Shmem:            577588 kB\n                    SReclaimable:     346648 kB\n                    ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/proc/zoneinfo'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='no such file or directory')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='available', ctx=Load()), BinOp(left=BinOp(left=Constant(value=2057400), op=Mult(), right=Constant(value=1024)), op=Add(), right=BinOp(left=Constant(value=4818144), op=Mult(), right=Constant(value=1024)))], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="inactive memory stats couldn't be determined"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='test_virtual_memory_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc/meminfo')]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    MemTotal:              100 kB\n                    MemFree:               2 kB\n                    MemAvailable:          3 kB\n                    Buffers:               4 kB\n                    Cached:                5 kB\n                    SwapCached:            6 kB\n                    Active:                7 kB\n                    Inactive:              8 kB\n                    Active(anon):          9 kB\n                    Inactive(anon):        10 kB\n                    Active(file):          11 kB\n                    Inactive(file):        12 kB\n                    Unevictable:           13 kB\n                    Mlocked:               14 kB\n                    SwapTotal:             15 kB\n                    SwapFree:              16 kB\n                    Dirty:                 17 kB\n                    Writeback:             18 kB\n                    AnonPages:             19 kB\n                    Mapped:                20 kB\n                    Shmem:                 21 kB\n                    Slab:                  22 kB\n                    SReclaimable:          23 kB\n                    SUnreclaim:            24 kB\n                    KernelStack:           25 kB\n                    PageTables:            26 kB\n                    NFS_Unstable:          27 kB\n                    Bounce:                28 kB\n                    WritebackTmp:          29 kB\n                    CommitLimit:           30 kB\n                    Committed_AS:          31 kB\n                    VmallocTotal:          32 kB\n                    VmallocUsed:           33 kB\n                    VmallocChunk:          34 kB\n                    HardwareCorrupted:     35 kB\n                    AnonHugePages:         36 kB\n                    ShmemHugePages:        37 kB\n                    ShmemPmdMapped:        38 kB\n                    CmaTotal:              39 kB\n                    CmaFree:               40 kB\n                    HugePages_Total:       41 kB\n                    HugePages_Free:        42 kB\n                    HugePages_Rsvd:        43 kB\n                    HugePages_Surp:        44 kB\n                    Hugepagesize:          45 kB\n                    DirectMap46k:          46 kB\n                    DirectMap47M:          47 kB\n                    DirectMap48G:          48 kB\n                    ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='total', ctx=Load()), BinOp(left=Constant(value=100), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='free', ctx=Load()), BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='buffers', ctx=Load()), BinOp(left=Constant(value=4), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='cached', ctx=Load()), BinOp(left=BinOp(left=Constant(value=5), op=Add(), right=Constant(value=23)), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='shared', ctx=Load()), BinOp(left=Constant(value=21), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='active', ctx=Load()), BinOp(left=Constant(value=7), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='inactive', ctx=Load()), BinOp(left=Constant(value=8), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='slab', ctx=Load()), BinOp(left=Constant(value=22), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='mem', ctx=Load()), attr='available', ctx=Load()), BinOp(left=Constant(value=3), op=Mult(), right=Constant(value=1024))], keywords=[]))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemSwapMemory', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='meminfo_has_swap_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if /proc/meminfo provides swap metrics.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/meminfo')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='SwapTotal:'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), Compare(left=Constant(value='SwapFree:'), ops=[In()], comparators=[Name(id='data', ctx=Load())])]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='test_total', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='free_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_swap', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_used', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='free_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_swap', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='used', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_free', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='free_value', ctx=Store())], value=Attribute(value=Call(func=Name(id='free_swap', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]), attr='free', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='free_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_missing_sin_sout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always')], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ws', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="'sin' and 'sout' swap memory stats couldn't be determined"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='sin', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='sout', ctx=Load()), Constant(value=0)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_no_vmstat_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/proc/vmstat'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='no such file or directory')], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='ws', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always')], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ws', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Subscript(value=Name(id='ws', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="'sin' and 'sout' swap memory stats couldn't be determined and were set to 0"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='sin', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='sout', ctx=Load()), Constant(value=0)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_meminfo_against_sysinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='meminfo_has_swap_info', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skip', ctx=Load()), args=[Constant(value='/proc/meminfo has no swap metrics')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.linux_sysinfo')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='swap', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[]))]), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))), Import(names=[alias(name='psutil._psutil_linux', asname='cext')]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='total', ctx=Store()), Name(id='free', ctx=Store()), Name(id='unit_multiplier', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='linux_sysinfo', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='total', ctx=Store()), op=Mult(), value=Name(id='unit_multiplier', ctx=Load())), AugAssign(target=Name(id='free', ctx=Store()), op=Mult(), value=Name(id='unit_multiplier', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='swap', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='swap', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_SYS_MEM', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_emulate_meminfo_has_no_metrics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/meminfo'), Constant(value=b'')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='swap_memory', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemCPUTimes', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_fields', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[]), attr='_fields', ctx=Load())), Assign(targets=[Name(id='kernel_ver', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='\\d+\\.\\d+\\.\\d+'), Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[]), slice=Constant(value=2), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='kernel_ver_info', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='kernel_ver', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='kernel_ver_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=11)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='steal'), Name(id='fields', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='steal'), Name(id='fields', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='kernel_ver_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=24)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='guest'), Name(id='fields', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='guest'), Name(id='fields', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='kernel_ver_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=2), Constant(value=0)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='guest_nice'), Name(id='fields', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='guest_nice'), Name(id='fields', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemCPUCountLogical', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_against_sysdev_cpu_online', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/online')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value='-'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/online')], keywords=[])), Constant(value='/sys/devices/system/cpu/online does not exist')], keywords=[])]), FunctionDef(name='test_against_sysdev_cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu')], keywords=[])), Assign(targets=[Name(id='count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='ls', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='cpu\\d+$'), Name(id='x', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Name(id='count', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu')], keywords=[])), Constant(value='/sys/devices/system/cpu does not exist')], keywords=[])]), FunctionDef(name='test_against_nproc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='nproc --all')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))]), Name(id='num', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='nproc')], keywords=[])), Constant(value='nproc utility not available')], keywords=[])]), FunctionDef(name='test_against_lscpu', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='lscpu -p')], keywords=[])), Assign(targets=[Name(id='num', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]))], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=True))]), Name(id='num', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='lscpu')], keywords=[])), Constant(value='lscpu utility not available')], keywords=[])]), FunctionDef(name='test_emulate_fallbacks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='psutil._pslinux')]), Assign(targets=[Name(id='original', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.sysconf')], keywords=[keyword(arg='side_effect', value=Name(id='ValueError', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[]), Name(id='original', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='m', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Attribute(value=Name(id='m', ctx=Load()), attr='call_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value='/proc/stat')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/cpuinfo'), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='cpuinfo_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Name(id='cpuinfo_data', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[]), Name(id='original', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/cpuinfo'), Constant(value=b'')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_logical', ctx=Load()), args=[], keywords=[]), Name(id='original', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemCPUCountCores', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_against_lscpu', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='lscpu -p')], keywords=[])), Assign(targets=[Name(id='core_ids', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[])), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='core_ids', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[keyword(arg='logical', value=Constant(value=False))]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='core_ids', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='lscpu')], keywords=[])), Constant(value='lscpu utility not available')], keywords=[])]), FunctionDef(name='test_method_2', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='meth_1', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_cores', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='glob.glob')], keywords=[keyword(arg='return_value', value=List(elts=[], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='meth_2', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_cores', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), If(test=Compare(left=Name(id='meth_1', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='meth_1', ctx=Load()), Name(id='meth_2', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_emulate_none', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='glob.glob')], keywords=[keyword(arg='return_value', value=List(elts=[], ctx=Load()))]), optional_vars=Name(id='m1', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m2', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='cpu_count_cores', ctx=Load()), args=[], keywords=[])], keywords=[]))])]), Assert(test=Attribute(value=Name(id='m1', ctx=Load()), attr='called', ctx=Load())), Assert(test=Attribute(value=Name(id='m2', ctx=Load()), attr='called', ctx=Load()))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemCPUFrequency', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_emulate_use_second_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='path_exists_mock', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy')], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Call(func=Name(id='orig_exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='orig_exists', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='side_effect', value=Name(id='path_exists_mock', ctx=Load())), keyword(arg='create', value=Constant(value=True))]))], body=[Assert(test=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_emulate_use_cpuinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='path_exists_mock', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/')], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Call(func=Name(id='os_path_exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='os_path_exists', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load())), Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='side_effect', value=Name(id='path_exists_mock', ctx=Load()))]))], body=[Expr(value=Call(func=Name(id='reload_module', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])), Assert(test=Name(id='ret', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='max', ctx=Load()), Constant(value=0.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='min', ctx=Load()), Constant(value=0.0)], keywords=[])), For(target=Name(id='freq', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='max', ctx=Load()), Constant(value=0.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='min', ctx=Load()), Constant(value=0.0)], keywords=[]))], orelse=[])])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='reload_module', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='reload_module', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_emulate_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_cur_freq')], keywords=[]), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'500000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_min_freq')], keywords=[]), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'600000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_max_freq')], keywords=[]), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'700000')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc/cpuinfo')]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'cpu MHz     : 500')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='current', ctx=Load()), Constant(value=500.0)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='freq', ctx=Load()), attr='min', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='min', ctx=Load()), Constant(value=600.0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='freq', ctx=Load()), attr='max', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='max', ctx=Load()), Constant(value=700.0)], keywords=[]))], orelse=[])])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_emulate_multi_cpu', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Name(id='name', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_cur_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy0')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'100000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_min_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy0')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'200000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_max_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy0')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'300000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_cur_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy1')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'400000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_min_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy1')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'500000')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_max_freq')], keywords=[]), Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy1')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'600000')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc/cpuinfo')]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'cpu MHz     : 100\ncpu MHz     : 400')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])])])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cpu_count_logical')], keywords=[keyword(arg='return_value', value=Constant(value=2))]))], body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='current', ctx=Load()), Constant(value=100.0)], keywords=[])), If(test=Compare(left=Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='min', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='min', ctx=Load()), Constant(value=200.0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='max', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='max', ctx=Load()), Constant(value=300.0)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='current', ctx=Load()), Constant(value=400.0)], keywords=[])), If(test=Compare(left=Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='min', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='min', ctx=Load()), Constant(value=500.0)], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='max', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='freq', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='max', ctx=Load()), Constant(value=600.0)], keywords=[]))], orelse=[])])])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_emulate_no_scaling_cur_freq_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/scaling_cur_freq')], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/cpuinfo_cur_freq')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'200000')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc/cpuinfo')]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'cpu MHz     : 200')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cpu_count_logical')], keywords=[keyword(arg='return_value', value=Constant(value=1))]))], body=[Assign(targets=[Name(id='freq', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='freq', ctx=Load()), attr='current', ctx=Load()), Constant(value=200)], keywords=[]))])])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemCPUStats', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='context switches')], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='ctx_switches', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=500))]))], decorator_list=[]), FunctionDef(name='test_interrupts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='interrupts')], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_stats', ctx=Load()), args=[], keywords=[]), attr='interrupts', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=500))]))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestLoadAvg', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_getloadavg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='getloadavg', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/loadavg')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='proc_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='proc_value', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Subscript(value=Name(id='psutil_value', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='proc_value', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Subscript(value=Name(id='psutil_value', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='proc_value', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]), Subscript(value=Name(id='psutil_value', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_GETLOADAVG', ctx=Load())), Constant(value='not supported')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemNetIfAddrs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_ips', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='addrs', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='addr', ctx=Store()), iter=Name(id='addrs', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AF_LINK', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Call(func=Name(id='get_mac_address', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Call(func=Name(id='get_ipv4_address', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='netmask', ctx=Load()), Call(func=Name(id='get_ipv4_netmask', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), Call(func=Name(id='get_ipv4_broadcast', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='get_ipv4_broadcast', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Constant(value='0.0.0.0')], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())]), body=[Assign(targets=[Name(id='address', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='%')], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='address', ctx=Load()), Call(func=Name(id='get_ipv6_addresses', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])])], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemNetIfStats', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_against_ifconfig', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ifconfig %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='isup', ctx=Load()), Compare(left=Constant(value='RUNNING'), ops=[In()], comparators=[Name(id='out', ctx=Load())])], keywords=[keyword(arg='msg', value=Name(id='out', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='mtu', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='(?i)MTU[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], finalbody=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='ifconfig')], keywords=[])), Constant(value='ifconfig utility not available')], keywords=[])]), FunctionDef(name='test_mtu', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[BinOp(left=Constant(value='/sys/class/net/%s/mtu'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='mtu', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='test_flags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='matches_found', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ifconfig %s'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='flags=(\\d+)?<(.*?)>'), Name(id='out', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='match', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)])]), body=[AugAssign(target=Name(id='matches_found', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='ifconfig_flags', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])], keywords=[])), Assign(targets=[Name(id='psutil_flags', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='stats', ctx=Load()), attr='flags', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ifconfig_flags', ctx=Load()), Name(id='psutil_flags', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='(.*)  MTU:(\\d+)  Metric:(\\d+)'), Name(id='out', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='match', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)])]), body=[AugAssign(target=Name(id='matches_found', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='ifconfig_flags', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='psutil_flags', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='stats', ctx=Load()), attr='flags', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ifconfig_flags', ctx=Load()), Name(id='psutil_flags', ctx=Load())], keywords=[]))], orelse=[])])], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='matches_found', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='no matches were found')], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='ifconfig')], keywords=[])), Constant(value='ifconfig utility not available')], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemNetIOCounters', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_against_ifconfig', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='ifconfig', args=arguments(posonlyargs=[], args=[arg(arg='nic')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='ifconfig %s'), op=Mod(), right=Name(id='nic', ctx=Load()))], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='packets_recv'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='RX packets[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='packets_sent'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='TX packets[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='errin'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='errors[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='errout'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='errors[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='dropin'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='dropped[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='dropout'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='dropped[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='bytes_recv'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='RX (?:packets \\d+ +)?bytes[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='bytes_sent'), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='findall', ctx=Load()), args=[Constant(value='TX (?:packets \\d+ +)?bytes[: ](\\d+)'), Name(id='out', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='nio', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True)), keyword(arg='nowrap', value=Constant(value=False))])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='stats', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='nio', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='ifconfig_ret', ctx=Store())], value=Call(func=Name(id='ifconfig', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='bytes_recv', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='bytes_recv'), ctx=Load())], keywords=[keyword(arg='delta', value=BinOp(left=Constant(value=1024), op=Mult(), right=Constant(value=5)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='bytes_sent', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='bytes_sent'), ctx=Load())], keywords=[keyword(arg='delta', value=BinOp(left=Constant(value=1024), op=Mult(), right=Constant(value=5)))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='packets_recv', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='packets_recv'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1024))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='packets_sent', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='packets_sent'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1024))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='errin', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='errin'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='errout', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='errout'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='dropin', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='dropin'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=10))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='dropout', ctx=Load()), Subscript(value=Name(id='ifconfig_ret', ctx=Load()), slice=Constant(value='dropout'), ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=10))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='ifconfig')], keywords=[])), Constant(value='ifconfig utility not available')], keywords=[]), Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemNetConnections', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_emulate_ipv6_unsupported', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='supports_ipv6'), arg(arg='inet_ntop')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='close', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Constant(value='::1'), Constant(value=0)], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='inet6'))]))], decorator_list=[Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.socket.inet_ntop')], keywords=[keyword(arg='side_effect', value=Name(id='ValueError', ctx=Load()))]), Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.supports_ipv6')], keywords=[keyword(arg='return_value', value=Constant(value=False))])]), FunctionDef(name='test_emulate_unix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/net/unix'), Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                0: 00000003 000 000 0001 03 462170 @/tmp/dbus-Qw2hMPIU3n\n                0: 00000003 000 000 0001 03 35010 @/tmp/dbus-tB2X8h69BQ\n                0: 00000003 000 000 0001 03 34424 @/tmp/dbus-cHy80Y8O\n                000000000000000000000000000000000000000000000000000000\n                ')], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unix'))])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemDiskPartitions', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_against_df', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='df', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='sh', ctx=Load()), args=[BinOp(left=Constant(value='df -P -B 1 "%s"'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='dev', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=4)), ctx=Load())), If(test=Compare(left=Name(id='dev', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='total', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='free', ctx=Load())], keywords=[])], ctx=Load())), Return(value=Tuple(elts=[Name(id='dev', ctx=Load()), Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load())], ctx=Load()))], decorator_list=[]), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[keyword(arg='all', value=Constant(value=False))]), body=[Assign(targets=[Name(id='usage', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_usage', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='total', ctx=Store()), Name(id='used', ctx=Store()), Name(id='free', ctx=Store())], ctx=Store())], value=Call(func=Name(id='df', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='mountpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='total', ctx=Load()), Name(id='total', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='free', ctx=Load()), Name(id='free', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Attribute(value=Name(id='usage', ctx=Load()), attr='used', ctx=Load()), Name(id='used', ctx=Load())], keywords=[keyword(arg='delta', value=Name(id='TOLERANCE_DISK_USAGE', ctx=Load()))]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='statvfs')], keywords=[])), Constant(value='os.statvfs() not available')], keywords=[]), Call(func=Name(id='skip_on_not_implemented', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_zfs_fs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='/proc/filesystems')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value='zfs'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='part', ctx=Load()), attr='fstype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='zfs')]), body=[Break()], orelse=[])], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value="couldn't find any ZFS partition")], keywords=[]))])], orelse=[Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='nodev\tzfs\n')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m1', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.disk_partitions')], keywords=[keyword(arg='return_value', value=List(elts=[Tuple(elts=[Constant(value='/dev/sdb3'), Constant(value='/'), Constant(value='zfs'), Constant(value='rw')], ctx=Load())], ctx=Load()))]), optional_vars=Name(id='m2', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m1', ctx=Load()), attr='called', ctx=Load())), Assert(test=Attribute(value=Name(id='m2', ctx=Load()), attr='called', ctx=Load())), Assert(test=Name(id='ret', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='fstype', ctx=Load()), Constant(value='zfs')], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='test_emulate_realpath_fail', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.path.realpath')], keywords=[keyword(arg='return_value', value=Constant(value='/non/existent'))]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[]))]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='PROCFS_PATH', ctx=Store())], value=Constant(value='/proc'))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSystemDiskIoCounters', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_emulate_kernel_2_4', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Constant(value='   3     0   1 hda 2 3 4 5 6 7 8 9 10 11 12')], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_merged_count', ctx=Load()), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_bytes', ctx=Load()), BinOp(left=Constant(value=3), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_time', ctx=Load()), Constant(value=4)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_count', ctx=Load()), Constant(value=5)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_merged_count', ctx=Load()), Constant(value=6)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_bytes', ctx=Load()), BinOp(left=Constant(value=7), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_time', ctx=Load()), Constant(value=8)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='busy_time', ctx=Load()), Constant(value=10)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_kernel_2_6_full', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Constant(value='   3    0   hda 1 2 3 4 5 6 7 8 9 10 11')], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_merged_count', ctx=Load()), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_bytes', ctx=Load()), BinOp(left=Constant(value=3), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_time', ctx=Load()), Constant(value=4)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_count', ctx=Load()), Constant(value=5)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_merged_count', ctx=Load()), Constant(value=6)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_bytes', ctx=Load()), BinOp(left=Constant(value=7), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_time', ctx=Load()), Constant(value=8)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='busy_time', ctx=Load()), Constant(value=10)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_kernel_2_6_limited', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Constant(value='   3    1   hda 1 2 3 4')], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_bytes', ctx=Load()), BinOp(left=Constant(value=2), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_count', ctx=Load()), Constant(value=3)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_bytes', ctx=Load()), BinOp(left=Constant(value=4), op=Mult(), right=Name(id='SECTOR_SIZE', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_merged_count', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_time', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_merged_count', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_time', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='busy_time', ctx=Load()), Constant(value=0)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_include_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    3    0   nvme0n1 1 2 3 4 5 6 7 8 9 10 11\n                    3    0   nvme0n1p1 1 2 3 4 5 6 7 8 9 10 11\n                    ')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='return_value', value=Constant(value=False))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True)), keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='nvme0n1'), ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='nvme0n1p1'), ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='nvme0n1'), ctx=Load()), attr='write_count', ctx=Load()), Constant(value=5)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='nvme0n1p1'), ctx=Load()), attr='write_count', ctx=Load()), Constant(value=5)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_exclude_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    3    0   nvme0n1 1 2 3 4 5 6 7 8 9 10 11\n                    3    0   nvme0n1p1 1 2 3 4 5 6 7 8 9 10 11\n                    ')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='return_value', value=Constant(value=False))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=False)), keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))])]), FunctionDef(name='is_storage_device', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nvme0n1')]))], decorator_list=[]), With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/diskstats'), Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                    3    0   nvme0n1 1 2 3 4 5 6 7 8 9 10 11\n                    3    0   nvme0n1p1 1 2 3 4 5 6 7 8 9 10 11\n                    ')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.is_storage_device')], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='is_storage_device', ctx=Load()))]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=False)), keyword(arg='nowrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='read_count', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='write_count', ctx=Load()), Constant(value=5)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_use_sysfs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='exists', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc/diskstats')]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), Assign(targets=[Name(id='wprocfs', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.path.exists')], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='exists', ctx=Load()))]))], body=[Assign(targets=[Name(id='wsysfs', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='wprocfs', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='wsysfs', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_emulate_not_impl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='exists', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.path.exists')], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='exists', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='NotImplementedError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestRootFsDeviceFinder', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Constant(value='/')], keywords=[]), attr='st_dev', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='major', ctx=Load()), args=[Name(id='dev', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='minor', ctx=Load()), args=[Name(id='dev', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_call_methods', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Name(id='RootFsDeviceFinder', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/proc/partitions')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_proc_partitions', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load()), Attribute(value=Name(id='finder', ctx=Load()), attr='ask_proc_partitions', ctx=Load())], keywords=[]))]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='/sys/dev/block/%s:%s/uevent'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Load())], ctx=Load()))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_sys_dev_block', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load()), Attribute(value=Name(id='finder', ctx=Load()), attr='ask_sys_dev_block', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_sys_class_block', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_comparisons', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Name(id='RootFsDeviceFinder', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='a', ctx=Store()), Name(id='b', ctx=Store()), Name(id='c', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/proc/partitions')], keywords=[]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_proc_partitions', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='/sys/dev/block/%s:%s/uevent'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Load())], ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_sys_class_block', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='ask_sys_dev_block', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load()), Name(id='c', ctx=Load())])), If(test=BoolOp(op=And(), values=[Name(id='base', ctx=Load()), Name(id='a', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='a', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='base', ctx=Load()), Name(id='b', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='b', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='base', ctx=Load()), Name(id='c', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='c', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='GITHUB_ACTIONS', ctx=Load()), Constant(value='unsupported on GITHUB_ACTIONS')], keywords=[])]), FunctionDef(name='test_against_findmnt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='RootFsDeviceFinder', ctx=Load()), args=[], keywords=[]), attr='find', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='findmnt_value', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='findmnt -o SOURCE -rn /')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='psutil_value', ctx=Load()), Name(id='findmnt_value', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='findmnt')], keywords=[])), Constant(value='findmnt utility not available')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='GITHUB_ACTIONS', ctx=Load()), Constant(value='unsupported on GITHUB_ACTIONS')], keywords=[])]), FunctionDef(name='test_disk_partitions_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.disk_partitions')], keywords=[keyword(arg='return_value', value=List(elts=[Tuple(elts=[Constant(value='/dev/root'), Constant(value='/'), Constant(value='ext4'), Constant(value='rw')], ctx=Load())], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='part', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='GITHUB_ACTIONS', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load()), Constant(value='/dev/root')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='RootFsDeviceFinder', ctx=Load()), args=[], keywords=[]), attr='find', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='part', ctx=Load()), attr='device', ctx=Load()), Constant(value='/dev/root')], keywords=[]))])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestMisc', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vmstat_value', ctx=Store())], value=Call(func=Name(id='vmstat', ctx=Load()), args=[Constant(value='boot time')], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='vmstat_value', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='psutil_value', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_no_procfs_on_import', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='my_procfs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='my_procfs', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='my_procfs', ctx=Load()), Constant(value='stat')], keywords=[]), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu   0 0 0 0 0 0 0 0 0 0\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu0  0 0 0 0 0 0 0 0 0 0\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu1  0 0 0 0 0 0 0 0 0 0\n')], keywords=[]))]), Try(body=[Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/proc')], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='rejecting access for test')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[Expr(value=Call(func=Name(id='reload_module', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load())], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load())], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='PROCFS_PATH', ctx=Store())], value=Name(id='my_procfs', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='per_cpu_percent', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='per_cpu_percent', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='per_cpu_times_percent', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='sum', ctx=Load()), Name(id='per_cpu_times_percent', ctx=Load())], keywords=[])], keywords=[]), Constant(value=0)], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='my_procfs', ctx=Load()), Constant(value='stat')], keywords=[]), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu   1 0 0 0 0 0 0 0 0 0\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu0  1 0 0 0 0 0 0 0 0 0\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='cpu1  1 0 0 0 0 0 0 0 0 0\n')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='sum', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])], keywords=[])], keywords=[]), Constant(value=0)], keywords=[]))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='my_procfs', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='reload_module', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='PROCFS_PATH', ctx=Load()), Constant(value='/proc')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_steal_decrease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/stat'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                cpu   0 0 0 0 0 0 0 1 0 0\n                cpu0  0 0 0 0 0 0 0 1 0 0\n                cpu1  0 0 0 0 0 0 0 1 0 0\n                ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]))]), With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/stat'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                cpu   1 0 0 0 0 0 0 0 0 0\n                cpu0  1 0 0 0 0 0 0 0 0 0\n                cpu1  1 0 0 0 0 0 0 0 0 0\n                ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='cpu_percent', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Assign(targets=[Name(id='cpu_percent_percpu', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Assign(targets=[Name(id='cpu_times_percent', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cpu_times_percent_percpu', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Name(id='cpu_percent', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='cpu_percent_percpu', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='cpu_times_percent', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Name(id='cpu_times_percent', ctx=Load())], keywords=[]), Constant(value=100.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='sum', ctx=Load()), Name(id='cpu_times_percent_percpu', ctx=Load())], keywords=[])], keywords=[]), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='sum', ctx=Load()), Name(id='cpu_times_percent_percpu', ctx=Load())], keywords=[])], keywords=[]), Constant(value=100.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu_times_percent', ctx=Load()), attr='steal', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu_times_percent', ctx=Load()), attr='user', ctx=Load()), Constant(value=0)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_boot_time_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='RuntimeError', ctx=Load()), Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='boot_time', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_users_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.users')], keywords=[keyword(arg='return_value', value=List(elts=[Tuple(elts=[Constant(value='giampaolo'), Constant(value='pts/2'), Constant(value=':0'), Constant(value=1436573184.0), Constant(value=True), Constant(value=2)], ctx=Load())], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='host', ctx=Load()), Constant(value='localhost')], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.users')], keywords=[keyword(arg='return_value', value=List(elts=[Tuple(elts=[Constant(value='giampaolo'), Constant(value='pts/2'), Constant(value=':0.0'), Constant(value=1436573184.0), Constant(value=True), Constant(value=2)], ctx=Load())], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='host', ctx=Load()), Constant(value='localhost')], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.cext.users')], keywords=[keyword(arg='return_value', value=List(elts=[Tuple(elts=[Constant(value='giampaolo'), Constant(value='pts/2'), Constant(value='foo'), Constant(value=1436573184.0), Constant(value=True), Constant(value=2)], ctx=Load())], ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='host', ctx=Load()), Constant(value='foo')], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_procfs_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='tdir', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='PROCFS_PATH', ctx=Store())], value=Name(id='tdir', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load())], keywords=[keyword(arg='percpu', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='psutil', ctx=Load()), attr='PROCFS_PATH', ctx=Store())], value=Constant(value='/proc'))])], decorator_list=[]), FunctionDef(name='test_issue_687', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='ThreadTask', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='threads', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='threads', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='threads', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Assign(targets=[Name(id='tid', ctx=Store())], value=Attribute(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='threads', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='x', ctx=Load()), attr='id', ctx=Load())))]), slice=Constant(value=1), ctx=Load()), attr='id', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load()), Name(id='tid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pt', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='tid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pt', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Name(id='tid', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_pid_exists_no_proc_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/proc/%s/status'), Constant(value='')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assert(test=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSensorsBattery', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Name(id='sh', ctx=Load()), args=[Constant(value='acpi -b')], keywords=[])), Assign(targets=[Name(id='acpi_value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='%'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Name(id='psutil_value', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='acpi_value', ctx=Load()), Name(id='psutil_value', ctx=Load())], keywords=[keyword(arg='delta', value=Constant(value=1))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Call(func=Name(id='which', ctx=Load()), args=[Constant(value='acpi')], keywords=[])), Constant(value='acpi utility not available')], keywords=[])]), FunctionDef(name='test_emulate_power_plugged', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='AC0/online'), Constant(value='AC/online')], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'1')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='secsleft', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_plugged_2', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='AC0/online'), Constant(value='AC/online')], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/status')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='charging')], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load()), Constant(value=True)], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_not_plugged', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='AC0/online'), Constant(value='AC/online')], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'0')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load()), Constant(value=False)], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_not_plugged_2', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='AC0/online'), Constant(value='AC/online')], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/status')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='discharging')], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load()), Constant(value=False)], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_power_undetermined', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='/sys/class/power_supply/AC0/online'), Constant(value='/sys/class/power_supply/AC/online')], ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/status')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'???')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_energy_full_0', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/energy_full'), Constant(value=b'0')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Constant(value=0)], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_emulate_energy_full_not_avail', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/energy_full'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/charge_full'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/capacity'), Constant(value=b'88')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='percent', ctx=Load()), Constant(value=88)], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='test_emulate_no_power', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/sys/class/power_supply/AC/online'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/sys/class/power_supply/AC0/online'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[Constant(value='/sys/class/power_supply/BAT0/status'), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[]), attr='power_plugged', ctx=Load())], keywords=[]))])])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_BATTERY', ctx=Load())), Constant(value='no battery')], keywords=[])]), ClassDef(name='TestSensorsBatteryEmulated', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_it', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/energy_now')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='60000000')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/power_now')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='0')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/energy_full')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='60000001')], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.listdir')], keywords=[keyword(arg='return_value', value=List(elts=[Constant(value='BAT0')], ctx=Load()))]), optional_vars=Name(id='mlistdir', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]), optional_vars=Name(id='mopen', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNotNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_battery', ctx=Load()), args=[], keywords=[])], keywords=[]))])]), Assert(test=Attribute(value=Name(id='mlistdir', ctx=Load()), attr='called', ctx=Load())), Assert(test=Attribute(value=Name(id='mopen', ctx=Load()), attr='called', ctx=Load()))], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSensorsTemperatures', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_emulate_class_hwmon', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/name')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='name')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/temp1_label')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='label')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/temp1_input')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'30000')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/temp1_max')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'40000')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/temp1_crit')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'50000')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='glob.glob')], keywords=[keyword(arg='return_value', value=List(elts=[Constant(value='/sys/class/hwmon/hwmon0/temp1')], ctx=Load()))]))], body=[Assign(targets=[Name(id='temp', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[]), slice=Constant(value='name'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='label', ctx=Load()), Constant(value='label')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='current', ctx=Load()), Constant(value=30.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='high', ctx=Load()), Constant(value=40.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='critical', ctx=Load()), Constant(value=50.0)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_emulate_class_thermal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='0_temp')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'50000')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='temp')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Constant(value=b'30000')], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='0_type')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='critical')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='type')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='name')], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])])], decorator_list=[]), FunctionDef(name='glob_mock', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/sys/class/hwmon/hwmon*/temp*_*')]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/sys/class/hwmon/hwmon*/device/temp*_*')]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/sys/class/thermal/thermal_zone*')]), body=[Return(value=List(elts=[Constant(value='/sys/class/thermal/thermal_zone0')], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/sys/class/thermal/thermal_zone0/trip_point*')]), body=[Return(value=List(elts=[Constant(value='/sys/class/thermal/thermal_zone1/trip_point_0_type'), Constant(value='/sys/class/thermal/thermal_zone1/trip_point_0_temp')], ctx=Load()))], orelse=[])])])]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='glob.glob')], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='side_effect', value=Name(id='glob_mock', ctx=Load()))]))], body=[Assign(targets=[Name(id='temp', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[]), slice=Constant(value='name'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='label', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='current', ctx=Load()), Constant(value=30.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='high', ctx=Load()), Constant(value=50.0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='temp', ctx=Load()), attr='critical', ctx=Load()), Constant(value=50.0)], keywords=[]))])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestSensorsFans', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_emulate_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/name')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='name')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/fan1_label')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='label')], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/fan1_input')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='2000')], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])])])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock', ctx=Load()))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='glob.glob')], keywords=[keyword(arg='return_value', value=List(elts=[Constant(value='/sys/class/hwmon/hwmon2/fan1')], ctx=Load()))]))], body=[Assign(targets=[Name(id='fan', ctx=Store())], value=Subscript(value=Subscript(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_fans', ctx=Load()), args=[], keywords=[]), slice=Constant(value='name'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='fan', ctx=Load()), attr='label', ctx=Load()), Constant(value='label')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='fan', ctx=Load()), attr='current', ctx=Load()), Constant(value=2000)], keywords=[]))])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestProcess', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_parse_smaps_vs_memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sproc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='_parse_smaps', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='maps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Name(id='sproc', ctx=Load()), attr='pid', ctx=Load())], keywords=[]), attr='memory_maps', ctx=Load()), args=[], keywords=[keyword(arg='grouped', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='uss', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=BinOp(left=Attribute(value=Name(id='x', ctx=Load()), attr='private_dirty', ctx=Load()), op=Add(), right=Attribute(value=Name(id='x', ctx=Load()), attr='private_clean', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='maps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=4096))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='pss', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='pss', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='maps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=4096))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertAlmostEqual', ctx=Load()), args=[Name(id='swap', ctx=Load()), Call(func=Name(id='sum', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='swap', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='maps', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[keyword(arg='delta', value=Constant(value=4096))]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_parse_smaps_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/smaps'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                fffff0 r-xp 00000000 00:00 0                  [vsyscall]\n                Size:                  1 kB\n                Rss:                   2 kB\n                Pss:                   3 kB\n                Shared_Clean:          4 kB\n                Shared_Dirty:          5 kB\n                Private_Clean:         6 kB\n                Private_Dirty:         7 kB\n                Referenced:            8 kB\n                Anonymous:             9 kB\n                LazyFree:              10 kB\n                AnonHugePages:         11 kB\n                ShmemPmdMapped:        12 kB\n                Shared_Hugetlb:        13 kB\n                Private_Hugetlb:       14 kB\n                Swap:                  15 kB\n                SwapPss:               16 kB\n                KernelPageSize:        17 kB\n                MMUPageSize:           18 kB\n                Locked:                19 kB\n                VmFlags: rd ex\n                ')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='Process', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='_parse_smaps', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='uss', ctx=Load()), BinOp(left=BinOp(left=BinOp(left=Constant(value=6), op=Add(), right=Constant(value=7)), op=Add(), right=Constant(value=14)), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='pss', ctx=Load()), BinOp(left=Constant(value=3), op=Mult(), right=Constant(value=1024))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='swap', ctx=Load()), BinOp(left=Constant(value=15), op=Mult(), right=Constant(value=1024))], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_open_files_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='get_test_file', args=arguments(posonlyargs=[], args=[arg(arg='fname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='giveup_at', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='GLOBAL_TIMEOUT', ctx=Load()))), While(test=Constant(value=True), body=[For(target=Name(id='file', ctx=Store()), iter=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='file', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='file', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Name(id='giveup_at', ctx=Load())]), body=[Break()], orelse=[])])], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='timeout looking for test file')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='testfn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='w')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='r')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='a')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='a')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='r+')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='r+')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='w+')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='r+')], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='a+')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='a+')], keywords=[]))]), If(test=Name(id='PY3', ctx=Load()), body=[Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='x')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='w')], keywords=[]))]), Expr(value=Call(func=Name(id='safe_rmpath', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfn', ctx=Load()), Constant(value='x+')], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Name(id='get_test_file', ctx=Load()), args=[Name(id='testfn', ctx=Load())], keywords=[]), attr='mode', ctx=Load()), Constant(value='r+')], keywords=[]))])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='PYPY', ctx=Load()), Constant(value='unreliable on PYPY')], keywords=[])]), FunctionDef(name='test_open_files_file_gone', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[]), Constant(value='w')], keywords=[]))], body=[Expr(value=Call(func=Name(id='call_until', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), BinOp(left=Constant(value='len(ret) != %i'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.readlink')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load()))), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.readlink')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])])], decorator_list=[]), FunctionDef(name='test_open_files_fd_gone', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[]), Constant(value='w')], keywords=[]))], body=[Expr(value=Call(func=Name(id='call_until', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), BinOp(left=Constant(value='len(ret) != %i'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load()))), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])])], decorator_list=[]), FunctionDef(name='test_open_files_enametoolong', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_testfn', ctx=Load()), args=[], keywords=[]), Constant(value='w')], keywords=[]))], body=[Expr(value=Call(func=Name(id='call_until', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), BinOp(left=Constant(value='len(ret) != %i'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='patch_point', ctx=Store())], value=Constant(value='psutil._pslinux.os.readlink')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENAMETOOLONG', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.debug')], keywords=[]))], body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='open_files', ctx=Load()), args=[], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load()))), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])])])], decorator_list=[]), FunctionDef(name='test_terminal_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux._psposix.get_terminal_map')], keywords=[keyword(arg='return_value', value=Dict(keys=[], values=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_pslinux', ctx=Load()), attr='Process', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='terminal', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_cmdline_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='foo\x00bar\x00')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='foo\x00bar\x00\x00')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value='')], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_cmdline_spaces_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='foo bar ')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))]), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='foo bar  ')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value='')], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_cmdline_mixed_separators', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fake_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Call(func=Name(id='u', ctx=Load()), args=[Constant(value='foo bar\x00')], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._common.open')], keywords=[keyword(arg='return_value', value=Name(id='fake_file', ctx=Load())), keyword(arg='create', value=Constant(value=True))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cmdline', ctx=Load()), args=[], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_readlink_path_deleted_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.readlink')], keywords=[keyword(arg='return_value', value=Constant(value='/home/foo (deleted)'))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='exe', ctx=Load()), args=[], keywords=[]), Constant(value='/home/foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='cwd', ctx=Load()), args=[], keywords=[]), Constant(value='/home/foo')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_threads_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open_mock_1', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/task'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='orig_open', ctx=Store())], value=Name(id='open', ctx=Load())), Assign(targets=[Name(id='patch_point', ctx=Store())], value=IfExp(test=Name(id='PY3', ctx=Load()), body=Constant(value='builtins.open'), orelse=Constant(value='__builtin__.open'))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock_1', ctx=Load()))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='threads', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))]), FunctionDef(name='open_mock_2', args=arguments(posonlyargs=[], args=[arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/task'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[Return(value=Call(func=Name(id='orig_open', ctx=Load()), args=[Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Name(id='patch_point', ctx=Load())], keywords=[keyword(arg='side_effect', value=Name(id='open_mock_2', ctx=Load()))]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='AccessDenied', ctx=Load()), Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='threads', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_exe_mocked', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.readlink')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]), attr='exe', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value='')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_issue_1014', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_exception', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/smaps'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Call(func=Name(id='IOError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load()), Constant(value='')], keywords=[])], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='memory_maps', ctx=Load()), args=[], keywords=[]))]), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_rlimit_zombie', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.prlimit')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOSYS', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m1', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.Process._is_zombie')], keywords=[keyword(arg='return_value', value=Constant(value=True))]), optional_vars=Name(id='m2', ctx=Store()))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), optional_vars=Name(id='exc', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='rlimit', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='RLIMIT_NOFILE', ctx=Load())], keywords=[]))])])]), Assert(test=Attribute(value=Name(id='m1', ctx=Load()), attr='called', ctx=Load())), Assert(test=Attribute(value=Name(id='m2', ctx=Load()), attr='called', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='exc', ctx=Load()), attr='exception', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='exc', ctx=Load()), attr='exception', ctx=Load()), attr='name', ctx=Load()), Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_RLIMIT', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_stat_file_parsing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Constant(value='0'), Constant(value='(cat)'), Constant(value='Z'), Constant(value='1'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='2'), Constant(value='3'), Constant(value='4'), Constant(value='5'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='6'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='0'), Constant(value='6'), Constant(value='0'), Constant(value='0'), Constant(value='7')], ctx=Load())), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/stat'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Name(id='content', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Constant(value='cat')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='status', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='psutil', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='ppid', ctx=Load()), args=[], keywords=[]), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='create_time', ctx=Load()), args=[], keywords=[]), BinOp(left=BinOp(left=Constant(value=6), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Name(id='cpu', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu', ctx=Load()), attr='user', ctx=Load()), BinOp(left=Constant(value=2), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu', ctx=Load()), attr='system', ctx=Load()), BinOp(left=Constant(value=3), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu', ctx=Load()), attr='children_user', ctx=Load()), BinOp(left=Constant(value=4), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu', ctx=Load()), attr='children_system', ctx=Load()), BinOp(left=Constant(value=5), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cpu', ctx=Load()), attr='iowait', ctx=Load()), BinOp(left=Constant(value=7), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='cpu_num', ctx=Load()), args=[], keywords=[]), Constant(value=6)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_status_file_parsing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='mock_open_content', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/status'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[])), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='                Uid:\t1000\t1001\t1002\t1003\n                Gid:\t1004\t1005\t1006\t1007\n                Threads:\t66\n                Cpus_allowed:\tf\n                Cpus_allowed_list:\t0-7\n                voluntary_ctxt_switches:\t12\n                nonvoluntary_ctxt_switches:\t13')], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='voluntary', ctx=Load()), Constant(value=12)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='involuntary', ctx=Load()), Constant(value=13)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='num_threads', ctx=Load()), args=[], keywords=[]), Constant(value=66)], keywords=[])), Assign(targets=[Name(id='uids', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='uids', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='real', ctx=Load()), Constant(value=1000)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='effective', ctx=Load()), Constant(value=1001)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='uids', ctx=Load()), attr='saved', ctx=Load()), Constant(value=1002)], keywords=[])), Assign(targets=[Name(id='gids', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='gids', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='real', ctx=Load()), Constant(value=1004)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='effective', ctx=Load()), Constant(value=1005)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='gids', ctx=Load()), attr='saved', ctx=Load()), Constant(value=1006)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='_proc', ctx=Load()), attr='_get_eligible_cpus', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=8)], keywords=[])], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_connections_enametoolong', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.os.readlink')], keywords=[keyword(arg='side_effect', value=Call(func=Name(id='OSError', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENAMETOOLONG', ctx=Load()), Constant(value='')], keywords=[]))]), optional_vars=Name(id='m', ctx=Store()))], body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.debug')], keywords=[]))], body=[Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='connections', ctx=Load()), args=[], keywords=[]))), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestProcessAgainstStatus', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="/proc/pid/stat and /proc/pid/status have many values in common.\n    Whenever possible, psutil uses /proc/pid/stat (it's faster).\n    For all those cases we check that the value found in\n    /proc/pid/stat (by psutil) matches the one found in\n    /proc/pid/status.\n    ")), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='read_status_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='linestart')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='open_text', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/status'), op=Mod(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='pid', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='linestart', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='\t')], keywords=[]), slice=Constant(value=2), ctx=Load())), Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="can't find %r"), op=Mod(), right=Name(id='linestart', ctx=Load()))], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Name:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='State:')], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='(')], keywords=[]), op=Add(), right=Constant(value=1)), upper=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value=')')], keywords=[])), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='-')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='status', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='PPid:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='ppid', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Threads:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_threads', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_uids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Uid:')], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1), upper=Constant(value=4)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='uids', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_gids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Gid:')], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1), upper=Constant(value=4)), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='gids', ctx=Load()), args=[], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='voluntary_ctxt_switches:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='voluntary', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='nonvoluntary_ctxt_switches:')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='num_ctx_switches', ctx=Load()), args=[], keywords=[]), attr='involuntary', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='retry_on_failure', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='test_cpu_affinity', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Cpus_allowed_list:')], keywords=[])), If(test=Compare(left=Constant(value='-'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])]), body=[Assign(targets=[Tuple(elts=[Name(id='min_', ctx=Store()), Name(id='max_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='cpu_affinity', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='min_', ctx=Load()), BinOp(left=Name(id='max_', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_affinity_eligible_cpus', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_status_file', ctx=Load()), args=[Constant(value='Cpus_allowed_list:')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='psutil._pslinux.per_cpu_times')], keywords=[]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='proc', ctx=Load()), attr='_proc', ctx=Load()), attr='_get_eligible_cpus', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value='-'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load())))], orelse=[Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), ClassDef(name='TestUtils', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_readlink', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), args=[Constant(value='os.readlink')], keywords=[keyword(arg='return_value', value=Constant(value='foo (deleted)'))]), optional_vars=Name(id='m', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='readlink', ctx=Load()), args=[Constant(value='bar')], keywords=[]), Constant(value='foo')], keywords=[])), Assert(test=Attribute(value=Name(id='m', ctx=Load()), attr='called', ctx=Load()))])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='LINUX', ctx=Load())), Constant(value='LINUX only')], keywords=[])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])