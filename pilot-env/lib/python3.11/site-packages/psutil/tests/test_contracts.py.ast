Module(body=[Expr(value=Constant(value='Contracts tests. These tests mainly check API sanity in terms of\nreturned types and APIs availability.\nSome of these are duplicates of tests test_system.py and test_process.py.\n')), Import(names=[alias(name='errno')]), Import(names=[alias(name='multiprocessing')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='time')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='unittest')]), Import(names=[alias(name='psutil')]), ImportFrom(module='psutil', names=[alias(name='AIX')], level=0), ImportFrom(module='psutil', names=[alias(name='BSD')], level=0), ImportFrom(module='psutil', names=[alias(name='FREEBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='LINUX')], level=0), ImportFrom(module='psutil', names=[alias(name='MACOS')], level=0), ImportFrom(module='psutil', names=[alias(name='NETBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='OPENBSD')], level=0), ImportFrom(module='psutil', names=[alias(name='OSX')], level=0), ImportFrom(module='psutil', names=[alias(name='POSIX')], level=0), ImportFrom(module='psutil', names=[alias(name='SUNOS')], level=0), ImportFrom(module='psutil', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='PY3')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='FileNotFoundError')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='long')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='range')], level=0), ImportFrom(module='psutil._compat', names=[alias(name='unicode')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='APPVEYOR')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='CI_TESTING')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='GITHUB_ACTIONS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_CPU_FREQ')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_NET_IO_COUNTERS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_FANS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='HAS_SENSORS_TEMPERATURES')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PYPY')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='SKIP_SYSCONS')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='VALID_PROC_STATUSES')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='PsutilTestCase')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='check_connection_ntuple')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='create_sockets')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='enum')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='is_namedtuple')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='kernel_version')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='process_namespace')], level=0), ImportFrom(module='psutil.tests', names=[alias(name='serialrun')], level=0), ClassDef(name='TestAvailConstantsAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_PROCFS_PATH', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='PROCFS_PATH')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='SUNOS', ctx=Load()), Name(id='AIX', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_win_priority', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ae', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load())), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='ABOVE_NORMAL_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='BELOW_NORMAL_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='HIGH_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IDLE_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='NORMAL_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='REALTIME_PRIORITY_CLASS')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_linux_ioprio_linux', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ae', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load())), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_CLASS_NONE')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_CLASS_RT')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_CLASS_BE')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_CLASS_IDLE')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_linux_ioprio_windows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ae', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load())), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_HIGH')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_NORMAL')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_LOW')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='IOPRIO_VERYLOW')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ae', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load())), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIM_INFINITY')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_AS')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_CORE')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_CPU')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_DATA')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_FSIZE')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_MEMLOCK')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_NOFILE')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_NPROC')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_RSS')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_STACK')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_LOCKS')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[])), If(test=Name(id='POSIX', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='kernel_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=8)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_MSGQUEUE')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='kernel_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=12)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_NICE')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='kernel_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=12)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_RTPRIO')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='kernel_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=25)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_RTTIME')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='kernel_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=6), Constant(value=8)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_SIGPENDING')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_SWAP')], keywords=[]), Name(id='FREEBSD', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_SBSIZE')], keywords=[]), Name(id='FREEBSD', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ae', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='RLIMIT_NPTS')], keywords=[]), Name(id='FREEBSD', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='GITHUB_ACTIONS', ctx=Load()), Name(id='LINUX', ctx=Load())]), Constant(value='unsupported on GITHUB_ACTIONS + LINUX')], keywords=[])])], decorator_list=[]), ClassDef(name='TestAvailSystemAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_win_service_iter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='win_service_iter')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_win_service_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='win_service_get')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='cpu_freq')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='MACOS', ctx=Load()), Name(id='WINDOWS', ctx=Load()), Name(id='FREEBSD', ctx=Load()), Name(id='OPENBSD', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_sensors_temperatures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_temperatures')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_sensors_fans', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_fans')], keywords=[]), Name(id='LINUX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_battery', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Constant(value='sensors_battery')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='WINDOWS', ctx=Load()), Name(id='FREEBSD', ctx=Load()), Name(id='MACOS', ctx=Load())])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestAvailProcessAPIs', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='environ')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='MACOS', ctx=Load()), Name(id='WINDOWS', ctx=Load()), Name(id='AIX', ctx=Load()), Name(id='SUNOS', ctx=Load()), Name(id='FREEBSD', ctx=Load()), Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_uids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='uids')], keywords=[]), Name(id='POSIX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_gids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='uids')], keywords=[]), Name(id='POSIX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='terminal')], keywords=[]), Name(id='POSIX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ionice', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='ionice')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='WINDOWS', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='rlimit')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='GITHUB_ACTIONS', ctx=Load()), Name(id='LINUX', ctx=Load())]), Constant(value='unsupported on GITHUB_ACTIONS + LINUX')], keywords=[])]), FunctionDef(name='test_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hasit', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='io_counters')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='hasit', ctx=Load()), UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='MACOS', ctx=Load()), Name(id='SUNOS', ctx=Load())]))], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='num_fds')], keywords=[]), Name(id='POSIX', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='num_handles')], keywords=[]), Name(id='WINDOWS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_affinity', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='cpu_affinity')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='WINDOWS', ctx=Load()), Name(id='FREEBSD', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='cpu_num')], keywords=[]), BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), Name(id='FREEBSD', ctx=Load()), Name(id='SUNOS', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hasit', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), Constant(value='memory_maps')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='hasit', ctx=Load()), UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load()), Name(id='AIX', ctx=Load()), Name(id='MACOS', ctx=Load())]))], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestSystemAPITypes', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Check the return types of system related APIs.\n    Mainly we want to test we never return unicode on Python 2, see:\n    https://github.com/giampaolo/psutil/issues/1039.\n    ')), FunctionDef(name='setUpClass', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='assert_ntuple_of_nums', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='nt'), arg(arg='type_'), arg(arg='gezero')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='float', ctx=Load()), Constant(value=True)]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[])), For(target=Name(id='n', ctx=Store()), iter=Name(id='nt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='type_', ctx=Load())], keywords=[])), If(test=Name(id='gezero', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='n', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='nt', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times', ctx=Load()), args=[], keywords=[keyword(arg='percpu', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_cpu_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None))]), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=1e-05))]), Name(id='float', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_times_percent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=None))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_times_percent', ctx=Load()), args=[], keywords=[keyword(arg='interval', value=Constant(value=0.0001))])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), Name(id='int', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cpu_freq', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='skipTest', ctx=Load()), args=[Constant(value='cpu_freq() returns None')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_freq', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='type_', value=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='MACOS', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='arm64')])]), Constant(value='skipped due to #1892')], keywords=[]), Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_CPU_FREQ', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_disk_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='perdisk', value=Constant(value=True))]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_ntuple_of_nums', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[keyword(arg='type_', value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='disk', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='device', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='mountpoint', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='fstype', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='opts', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='maxfile', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='disk', ctx=Load()), attr='maxpath', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_net_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='create_sockets', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_connections', ctx=Load()), args=[Constant(value='all')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='conn', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[Name(id='SKIP_SYSCONS', ctx=Load()), Constant(value='requires root')], keywords=[])]), FunctionDef(name='test_net_if_addrs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='ifname', ctx=Store()), Name(id='addrs', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_addrs', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='addr', ctx=Store()), iter=Name(id='addrs', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='PYPY', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='family', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='address', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='netmask', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='addr', ctx=Load()), attr='broadcast', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='test_net_if_stats', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='ifname', ctx=Store()), Name(id='info', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_if_stats', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='isup', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='duplex', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='duplex', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='speed', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='mtu', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_net_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='ifname', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='net_io_counters', ctx=Load()), args=[], keywords=[keyword(arg='pernic', value=Constant(value=True))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ifname', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_NET_IO_COUNTERS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_fans', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='units', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_fans', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='unit', ctx=Store()), iter=Name(id='units', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='label', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='current', ctx=Load()), Tuple(elts=[Name(id='float', ctx=Load()), Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_FANS', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_sensors_temperatures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='units', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='sensors_temperatures', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='unit', ctx=Store()), iter=Name(id='units', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='label', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='current', ctx=Load()), Tuple(elts=[Name(id='float', ctx=Load()), Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='high', ctx=Load()), Tuple(elts=[Name(id='float', ctx=Load()), Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='unit', ctx=Load()), attr='critical', ctx=Load()), Tuple(elts=[Name(id='float', ctx=Load()), Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='HAS_SENSORS_TEMPERATURES', ctx=Load())), Constant(value='not supported')], keywords=[])]), FunctionDef(name='test_boot_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='boot_time', ctx=Load()), args=[], keywords=[]), Name(id='float', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_users', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='user', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='name', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='terminal', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='host', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='user', ctx=Load()), attr='pid', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestProcessWaitType', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_negative_signal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn_testproc', ctx=Load()), args=[], keywords=[]), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='code', ctx=Load()), UnaryOp(op=USub(), operand=Attribute(value=Name(id='signal', ctx=Load()), attr='SIGTERM', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skipIf', ctx=Load()), args=[UnaryOp(op=Not(), operand=Name(id='POSIX', ctx=Load())), Constant(value='not POSIX')], keywords=[])])], decorator_list=[]), FunctionDef(name='proc_info', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tcase', ctx=Store())], value=Call(func=Name(id='PsutilTestCase', ctx=Load()), args=[], keywords=[])), FunctionDef(name='check_exception', args=arguments(posonlyargs=[], args=[arg(arg='exc'), arg(arg='proc'), arg(arg='name'), arg(arg='ppid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='pid', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='ZombieProcess', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertProcessZombie', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='ppid', ctx=Load()), Name(id='ppid', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertProcessGone', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='do_wait', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[Constant(value=0)], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='Error', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='check_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='proc', ctx=Load()), Name(id='name', ctx=Load()), Name(id='ppid', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), Try(body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertPidGone', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='as_dict', ctx=Load()), args=[List(elts=[Constant(value='ppid'), Constant(value='name')], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tcase', ctx=Load()), attr='assertProcessGone', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='ppid', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='ppid'), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[Constant(value='pid')], values=[Attribute(value=Name(id='proc', ctx=Load()), attr='pid', ctx=Load())])), Assign(targets=[Name(id='ns', ctx=Store())], value=Call(func=Name(id='process_namespace', ctx=Load()), args=[Name(id='proc', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='fun', ctx=Store()), Name(id='fun_name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ns', ctx=Load()), attr='iter', ctx=Load()), args=[Attribute(value=Name(id='ns', ctx=Load()), attr='getters', ctx=Load())], keywords=[keyword(arg='clear_cache', value=Constant(value=False))]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='fun_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='fun', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='Error', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='check_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='proc', ctx=Load()), Name(id='name', ctx=Load()), Name(id='ppid', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Name(id='do_wait', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='info', ctx=Load()))], finalbody=[])], decorator_list=[]), ClassDef(name='TestFetchAllProcesses', bases=[Name(id='PsutilTestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Test which iterates over all running processes and performs\n    some sanity checks against Process API's returned values.\n    Uses a process pool to get info about all processes.\n    ")), Assign(targets=[Name(id='use_proc_pool', ctx=Store())], value=Constant(value=0)), FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_proc_pool', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pool', ctx=Store())], value=Call(func=Attribute(value=Name(id='multiprocessing', ctx=Load()), attr='Pool', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='tearDown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_proc_pool', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pool', ctx=Load()), attr='terminate', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pool', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='iter_proc_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='psutil.tests.test_contracts', names=[alias(name='proc_info')], level=0), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_proc_pool', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pool', ctx=Load()), attr='imap_unordered', ctx=Load()), args=[Name(id='proc_info', ctx=Load()), Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='ls', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='pid', ctx=Store()), iter=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='pids', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ls', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='proc_info', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='ls', ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_all', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='failures', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_proc_info', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='meth', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='meth', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value='='), op=Mult(), right=Constant(value=70))), op=Add(), right=Constant(value='\n'))), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='FAIL: name=test_%s, pid=%s, ret=%s\n'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pid'), ctx=Load()), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], ctx=Load()))), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=70))), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n%s'), op=Mod(), right=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=4)), op=Add(), right=Name(id='i', ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value='\n'))), Expr(value=Call(func=Attribute(value=Name(id='failures', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=0.0), List(elts=[], ctx=Load()), Constant(value=None), Constant(value=''), Dict(keys=[], values=[])], ctx=Load())]), body=[Assert(test=Name(id='value', ctx=Load()), msg=Name(id='value', ctx=Load()))], orelse=[])], finalbody=[])], orelse=[])], orelse=[]), If(test=Name(id='failures', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='failures', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='part', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='part', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='exe', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='unicode', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Name(id='ret', ctx=Load())], keywords=[])), If(test=Name(id='ret', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.exe')], keywords=[]))]), body=[Return()], orelse=[]), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), msg=Name(id='ret', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='POSIX', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='access')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='X_OK')], keywords=[])]), body=[Try(body=[Assert(test=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='ret', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='X_OK', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Name(id='CI_TESTING', ctx=Load()))]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='pid', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[]), FunctionDef(name='ppid', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='proc_info', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='unicode', ctx=Load())], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='APPVEYOR', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='ret', ctx=Load())), Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='stopped')])]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='AIX', ctx=Load())), body=[Assert(test=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='create_time', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='OPENBSD', ctx=Load()), Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='psutil', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load())])]), body=[Pass()], orelse=[Raise()])])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%Y %m %d %H:%M:%S'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='localtime', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='uids', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='uid', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='uid', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='uid', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='gids', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='gid', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='gid', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='MACOS', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='NETBSD', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='gid', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='username', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Name(id='ret', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assert(test=Name(id='ret', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value='?')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='VALID_PROC_STATUSES', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='field', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='ionice', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='ioclass', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='value', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='ioclass', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='value', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[Assign(targets=[Name(id='choices', ctx=Store())], value=List(elts=[Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_VERYLOW', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_LOW', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_NORMAL', ctx=Load()), Attribute(value=Name(id='psutil', ctx=Load()), attr='IOPRIO_HIGH', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='choices', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='APPVEYOR', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='ret', ctx=Load())), Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='stopped')])]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=1)], keywords=[]))], decorator_list=[]), FunctionDef(name='threads', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='t', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='id', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='user_time', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='system_time', ctx=Load()), Constant(value=0)], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Name(id='t', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='n', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='n', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='cpu_percent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value=0.0), ops=[LtE(), LtE()], comparators=[Name(id='ret', ctx=Load()), Constant(value=100.0)]), msg=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='FREEBSD', ctx=Load()), Compare(left=Name(id='ret', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))])]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='ret', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='peak_wset', ctx=Load()), Attribute(value=Name(id='ret', ctx=Load()), attr='wset', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='peak_paged_pool', ctx=Load()), Attribute(value=Name(id='ret', ctx=Load()), attr='paged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='peak_nonpaged_pool', ctx=Load()), Attribute(value=Name(id='ret', ctx=Load()), attr='nonpaged_pool', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='peak_pagefile', ctx=Load()), Attribute(value=Name(id='ret', ctx=Load()), attr='pagefile', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='memory_full_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='virtual_memory', ctx=Load()), args=[], keywords=[]), attr='total', ctx=Load())), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='ret', ctx=Load()), attr='_fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[keyword(arg='msg', value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))])), If(test=BoolOp(op=Or(), values=[Name(id='LINUX', ctx=Load()), BoolOp(op=And(), values=[Name(id='OSX', ctx=Load()), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='vms'), Constant(value='data')], ctx=Load())])])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertLessEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='msg', value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load()), Name(id='total', ctx=Load())], ctx=Load()))]))], orelse=[]), If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='ret', ctx=Load()), attr='pss', ctx=Load()), Attribute(value=Name(id='ret', ctx=Load()), attr='uss', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='open_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='f', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='fd', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load())], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='fd', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[If(test=Name(id='LINUX', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='position', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='mode', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='flags', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='position', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='mode', ctx=Load()), Tuple(elts=[Constant(value='r'), Constant(value='w'), Constant(value='a'), Constant(value='r+'), Constant(value='a+')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='flags', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='BSD', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load()))]), body=[Continue()], orelse=[])])]), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load())], keywords=[]), msg=Name(id='f', ctx=Load())), Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()])], orelse=[Assert(test=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISREG', ctx=Load()), args=[Attribute(value=Name(id='st', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]), msg=Name(id='f', ctx=Load()))], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[]), FunctionDef(name='connections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='create_sockets', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='conn', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_connection_ntuple', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='cwd', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='unicode', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Name(id='ret', ctx=Load())], keywords=[])), If(test=Name(id='ret', ctx=Load()), body=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), msg=Name(id='ret', ctx=Load())), Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='psutil', ctx=Load()), attr='_psplatform', ctx=Load()), attr='ACCESS_DENIED_SET', ctx=Load())])]), body=[Pass()], orelse=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load())]), body=[Raise()], orelse=[])])])], orelse=[Assert(test=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISDIR', ctx=Load()), args=[Attribute(value=Name(id='st', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='memory_percent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='float', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='ret', ctx=Load()), Constant(value=100)]), msg=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_running', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_affinity', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='ret', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[], ctx=Load())]), msg=Name(id='ret', ctx=Load())), Assign(targets=[Name(id='cpus', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='cpu_count', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='n', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='n', ctx=Load()), Name(id='cpus', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='terminal', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[])], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), msg=Name(id='ret', ctx=Load())), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), msg=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='nt', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='addr', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='perms', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), For(target=Name(id='fname', ctx=Store()), iter=Attribute(value=Name(id='nt', ctx=Load()), attr='_fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='nt', ctx=Load()), Name(id='fname', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='path')]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='['), Constant(value='anon_inode:')], ctx=Load())], keywords=[])), body=[Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Attribute(value=Name(id='nt', ctx=Load()), attr='path', ctx=Load())], keywords=[]), msg=Attribute(value=Name(id='nt', ctx=Load()), attr='path', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='addr')]), body=[Assert(test=Name(id='value', ctx=Load()), msg=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Eq()], comparators=[Constant(value='perms')]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), body=[Assert(test=Name(id='value', ctx=Load()), msg=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))])])])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='num_handles', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='ret', ctx=Load()), Constant(value=0)], keywords=[]))], decorator_list=[]), FunctionDef(name='nice', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), If(test=Name(id='POSIX', ctx=Load()), body=[Assert(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=20)), ops=[LtE(), LtE()], comparators=[Name(id='ret', ctx=Load()), Constant(value=20)]), msg=Name(id='ret', ctx=Load()))], orelse=[Assign(targets=[Name(id='priorities', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='psutil', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='psutil', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='_PRIORITY_CLASS')], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='priorities', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])), For(target=Name(id='value', ctx=Store()), iter=Name(id='ret', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value=0), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreaterEqual', ctx=Load()), args=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value=1), ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[]), FunctionDef(name='environ', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ret'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[Name(id='serialrun', ctx=Load())]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='psutil.tests.runner', names=[alias(name='run_from_name')], level=0), Expr(value=Call(func=Name(id='run_from_name', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])