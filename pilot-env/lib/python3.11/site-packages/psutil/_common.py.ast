Module(body=[Expr(value=Constant(value='Common objects shared by __init__.py and _ps*.py modules.')), ImportFrom(module='__future__', names=[alias(name='division')], level=0), ImportFrom(module='__future__', names=[alias(name='print_function')], level=0), Import(names=[alias(name='collections')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='socket', names=[alias(name='AF_INET')], level=0), ImportFrom(module='socket', names=[alias(name='SOCK_DGRAM')], level=0), ImportFrom(module='socket', names=[alias(name='SOCK_STREAM')], level=0), Try(body=[ImportFrom(module='socket', names=[alias(name='AF_INET6')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='AF_INET6', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='socket', names=[alias(name='AF_UNIX')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='AF_UNIX', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='PY3', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)])), If(test=Name(id='PY3', ctx=Load()), body=[Import(names=[alias(name='enum')])], orelse=[Assign(targets=[Name(id='enum', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='PSUTIL_DEBUG', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PSUTIL_DEBUG')], keywords=[])], keywords=[])), Assign(targets=[Name(id='_DEFAULT', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='FREEBSD'), Constant(value='BSD'), Constant(value='LINUX'), Constant(value='NETBSD'), Constant(value='OPENBSD'), Constant(value='MACOS'), Constant(value='OSX'), Constant(value='POSIX'), Constant(value='SUNOS'), Constant(value='WINDOWS'), Constant(value='CONN_CLOSE'), Constant(value='CONN_CLOSE_WAIT'), Constant(value='CONN_CLOSING'), Constant(value='CONN_ESTABLISHED'), Constant(value='CONN_FIN_WAIT1'), Constant(value='CONN_FIN_WAIT2'), Constant(value='CONN_LAST_ACK'), Constant(value='CONN_LISTEN'), Constant(value='CONN_NONE'), Constant(value='CONN_SYN_RECV'), Constant(value='CONN_SYN_SENT'), Constant(value='CONN_TIME_WAIT'), Constant(value='NIC_DUPLEX_FULL'), Constant(value='NIC_DUPLEX_HALF'), Constant(value='NIC_DUPLEX_UNKNOWN'), Constant(value='STATUS_DEAD'), Constant(value='STATUS_DISK_SLEEP'), Constant(value='STATUS_IDLE'), Constant(value='STATUS_LOCKED'), Constant(value='STATUS_RUNNING'), Constant(value='STATUS_SLEEPING'), Constant(value='STATUS_STOPPED'), Constant(value='STATUS_SUSPENDED'), Constant(value='STATUS_TRACING_STOP'), Constant(value='STATUS_WAITING'), Constant(value='STATUS_WAKE_KILL'), Constant(value='STATUS_WAKING'), Constant(value='STATUS_ZOMBIE'), Constant(value='STATUS_PARKED'), Constant(value='ENCODING'), Constant(value='ENCODING_ERRS'), Constant(value='AF_INET6'), Constant(value='pconn'), Constant(value='pcputimes'), Constant(value='pctxsw'), Constant(value='pgids'), Constant(value='pio'), Constant(value='pionice'), Constant(value='popenfile'), Constant(value='pthread'), Constant(value='puids'), Constant(value='sconn'), Constant(value='scpustats'), Constant(value='sdiskio'), Constant(value='sdiskpart'), Constant(value='sdiskusage'), Constant(value='snetio'), Constant(value='snicaddr'), Constant(value='snicstats'), Constant(value='sswap'), Constant(value='suser'), Constant(value='conn_tmap'), Constant(value='deprecated_method'), Constant(value='isfile_strict'), Constant(value='memoize'), Constant(value='parse_environ_block'), Constant(value='path_exists_strict'), Constant(value='usage_percent'), Constant(value='supports_ipv6'), Constant(value='sockfam_to_enum'), Constant(value='socktype_to_enum'), Constant(value='wrap_numbers'), Constant(value='open_text'), Constant(value='open_binary'), Constant(value='cat'), Constant(value='bcat'), Constant(value='bytes2human'), Constant(value='conn_to_ntuple'), Constant(value='debug'), Constant(value='hilite'), Constant(value='term_supports_colors'), Constant(value='print_color')], ctx=Load())), Assign(targets=[Name(id='POSIX', ctx=Store())], value=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')])), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])), Assign(targets=[Name(id='LINUX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='linux')], keywords=[])), Assign(targets=[Name(id='MACOS', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='darwin')], keywords=[])), Assign(targets=[Name(id='OSX', ctx=Store())], value=Name(id='MACOS', ctx=Load())), Assign(targets=[Name(id='FREEBSD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='freebsd'), Constant(value='midnightbsd')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='OPENBSD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='openbsd')], keywords=[])), Assign(targets=[Name(id='NETBSD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='netbsd')], keywords=[])), Assign(targets=[Name(id='BSD', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='FREEBSD', ctx=Load()), Name(id='OPENBSD', ctx=Load()), Name(id='NETBSD', ctx=Load())])), Assign(targets=[Name(id='SUNOS', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='sunos'), Constant(value='solaris')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='AIX', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='aix')], keywords=[])), Assign(targets=[Name(id='STATUS_RUNNING', ctx=Store())], value=Constant(value='running')), Assign(targets=[Name(id='STATUS_SLEEPING', ctx=Store())], value=Constant(value='sleeping')), Assign(targets=[Name(id='STATUS_DISK_SLEEP', ctx=Store())], value=Constant(value='disk-sleep')), Assign(targets=[Name(id='STATUS_STOPPED', ctx=Store())], value=Constant(value='stopped')), Assign(targets=[Name(id='STATUS_TRACING_STOP', ctx=Store())], value=Constant(value='tracing-stop')), Assign(targets=[Name(id='STATUS_ZOMBIE', ctx=Store())], value=Constant(value='zombie')), Assign(targets=[Name(id='STATUS_DEAD', ctx=Store())], value=Constant(value='dead')), Assign(targets=[Name(id='STATUS_WAKE_KILL', ctx=Store())], value=Constant(value='wake-kill')), Assign(targets=[Name(id='STATUS_WAKING', ctx=Store())], value=Constant(value='waking')), Assign(targets=[Name(id='STATUS_IDLE', ctx=Store())], value=Constant(value='idle')), Assign(targets=[Name(id='STATUS_LOCKED', ctx=Store())], value=Constant(value='locked')), Assign(targets=[Name(id='STATUS_WAITING', ctx=Store())], value=Constant(value='waiting')), Assign(targets=[Name(id='STATUS_SUSPENDED', ctx=Store())], value=Constant(value='suspended')), Assign(targets=[Name(id='STATUS_PARKED', ctx=Store())], value=Constant(value='parked')), Assign(targets=[Name(id='CONN_ESTABLISHED', ctx=Store())], value=Constant(value='ESTABLISHED')), Assign(targets=[Name(id='CONN_SYN_SENT', ctx=Store())], value=Constant(value='SYN_SENT')), Assign(targets=[Name(id='CONN_SYN_RECV', ctx=Store())], value=Constant(value='SYN_RECV')), Assign(targets=[Name(id='CONN_FIN_WAIT1', ctx=Store())], value=Constant(value='FIN_WAIT1')), Assign(targets=[Name(id='CONN_FIN_WAIT2', ctx=Store())], value=Constant(value='FIN_WAIT2')), Assign(targets=[Name(id='CONN_TIME_WAIT', ctx=Store())], value=Constant(value='TIME_WAIT')), Assign(targets=[Name(id='CONN_CLOSE', ctx=Store())], value=Constant(value='CLOSE')), Assign(targets=[Name(id='CONN_CLOSE_WAIT', ctx=Store())], value=Constant(value='CLOSE_WAIT')), Assign(targets=[Name(id='CONN_LAST_ACK', ctx=Store())], value=Constant(value='LAST_ACK')), Assign(targets=[Name(id='CONN_LISTEN', ctx=Store())], value=Constant(value='LISTEN')), Assign(targets=[Name(id='CONN_CLOSING', ctx=Store())], value=Constant(value='CLOSING')), Assign(targets=[Name(id='CONN_NONE', ctx=Store())], value=Constant(value='NONE')), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='NIC_DUPLEX_FULL', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='NIC_DUPLEX_HALF', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='NIC_DUPLEX_UNKNOWN', ctx=Store())], value=Constant(value=0))], orelse=[ClassDef(name='NicDuplex', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='NIC_DUPLEX_FULL', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='NIC_DUPLEX_HALF', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='NIC_DUPLEX_UNKNOWN', ctx=Store())], value=Constant(value=0))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='NicDuplex', ctx=Load()), attr='__members__', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='POWER_TIME_UNKNOWN', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='POWER_TIME_UNLIMITED', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=2)))], orelse=[ClassDef(name='BatteryTime', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='POWER_TIME_UNKNOWN', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='POWER_TIME_UNLIMITED', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=2)))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='BatteryTime', ctx=Load()), attr='__members__', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='ENCODING', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Assign(targets=[Name(id='ENCODING_ERRS', ctx=Store())], value=Constant(value='replace'))], orelse=[Try(body=[Assign(targets=[Name(id='ENCODING_ERRS', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencodeerrors', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='ENCODING_ERRS', ctx=Store())], value=IfExp(test=Name(id='POSIX', ctx=Load()), body=Constant(value='surrogateescape'), orelse=Constant(value='replace')))])], orelse=[], finalbody=[])]), Assign(targets=[Name(id='sswap', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sswap'), List(elts=[Constant(value='total'), Constant(value='used'), Constant(value='free'), Constant(value='percent'), Constant(value='sin'), Constant(value='sout')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiskusage', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskusage'), List(elts=[Constant(value='total'), Constant(value='used'), Constant(value='free'), Constant(value='percent')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiskio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes'), Constant(value='read_time'), Constant(value='write_time')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiskpart', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskpart'), List(elts=[Constant(value='device'), Constant(value='mountpoint'), Constant(value='fstype'), Constant(value='opts'), Constant(value='maxfile'), Constant(value='maxpath')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='snetio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='snetio'), List(elts=[Constant(value='bytes_sent'), Constant(value='bytes_recv'), Constant(value='packets_sent'), Constant(value='packets_recv'), Constant(value='errin'), Constant(value='errout'), Constant(value='dropin'), Constant(value='dropout')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='suser', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='suser'), List(elts=[Constant(value='name'), Constant(value='terminal'), Constant(value='host'), Constant(value='started'), Constant(value='pid')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sconn', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sconn'), List(elts=[Constant(value='fd'), Constant(value='family'), Constant(value='type'), Constant(value='laddr'), Constant(value='raddr'), Constant(value='status'), Constant(value='pid')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='snicaddr', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='snicaddr'), List(elts=[Constant(value='family'), Constant(value='address'), Constant(value='netmask'), Constant(value='broadcast'), Constant(value='ptp')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='snicstats', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='snicstats'), List(elts=[Constant(value='isup'), Constant(value='duplex'), Constant(value='speed'), Constant(value='mtu'), Constant(value='flags')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='scpustats', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scpustats'), List(elts=[Constant(value='ctx_switches'), Constant(value='interrupts'), Constant(value='soft_interrupts'), Constant(value='syscalls')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='scpufreq', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scpufreq'), List(elts=[Constant(value='current'), Constant(value='min'), Constant(value='max')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='shwtemp', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='shwtemp'), List(elts=[Constant(value='label'), Constant(value='current'), Constant(value='high'), Constant(value='critical')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sbattery', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sbattery'), List(elts=[Constant(value='percent'), Constant(value='secsleft'), Constant(value='power_plugged')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sfan', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sfan'), List(elts=[Constant(value='label'), Constant(value='current')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pcputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pcputimes'), List(elts=[Constant(value='user'), Constant(value='system'), Constant(value='children_user'), Constant(value='children_system')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='popenfile', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='popenfile'), List(elts=[Constant(value='path'), Constant(value='fd')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pthread', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pthread'), List(elts=[Constant(value='id'), Constant(value='user_time'), Constant(value='system_time')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='puids', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='puids'), List(elts=[Constant(value='real'), Constant(value='effective'), Constant(value='saved')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pgids', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pgids'), List(elts=[Constant(value='real'), Constant(value='effective'), Constant(value='saved')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pionice', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pionice'), List(elts=[Constant(value='ioclass'), Constant(value='value')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pctxsw', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pctxsw'), List(elts=[Constant(value='voluntary'), Constant(value='involuntary')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pconn', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pconn'), List(elts=[Constant(value='fd'), Constant(value='family'), Constant(value='type'), Constant(value='laddr'), Constant(value='raddr'), Constant(value='status')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='addr'), List(elts=[Constant(value='ip'), Constant(value='port')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='conn_tmap', ctx=Store())], value=Dict(keys=[Constant(value='all'), Constant(value='tcp'), Constant(value='tcp4'), Constant(value='udp'), Constant(value='udp4'), Constant(value='inet'), Constant(value='inet4'), Constant(value='inet6')], values=[Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load()), Name(id='AF_UNIX', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load()), Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load()), Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load()), Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load()), Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load())])), If(test=Compare(left=Name(id='AF_INET6', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn_tmap', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='tcp6'), Constant(value='udp6')], values=[Tuple(elts=[List(elts=[Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load())], ctx=Load())], ctx=Load()), Tuple(elts=[List(elts=[Name(id='AF_INET6', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load())])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='AF_UNIX', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn_tmap', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='unix')], values=[Tuple(elts=[List(elts=[Name(id='AF_UNIX', ctx=Load())], ctx=Load()), List(elts=[Name(id='SOCK_STREAM', ctx=Load()), Name(id='SOCK_DGRAM', ctx=Load())], ctx=Load())], ctx=Load())])], keywords=[]))], orelse=[]), ClassDef(name='Error', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base exception class. All other psutil exceptions inherit\n    from this one.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='psutil')), FunctionDef(name='_infodict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pid')]), Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='info', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_infodict', ctx=Load()), args=[Tuple(elts=[Constant(value='pid'), Constant(value='ppid'), Constant(value='name')], ctx=Load())], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[Assign(targets=[Name(id='details', ctx=Store())], value=BinOp(left=Constant(value='(%s)'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%s=%r'), op=Mod(), right=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])))], orelse=[Assign(targets=[Name(id='details', ctx=Store())], value=Constant(value=None))]), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Tuple(elts=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='msg'), Constant(value='')], keywords=[]), Name(id='details', ctx=Load())], ctx=Load()), ifs=[Name(id='x', ctx=Load())], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_infodict', ctx=Load()), args=[Tuple(elts=[Constant(value='pid'), Constant(value='ppid'), Constant(value='name'), Constant(value='seconds'), Constant(value='msg')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='details', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%s=%r'), op=Mod(), right=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=BinOp(left=Constant(value='psutil.%s(%s)'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Name(id='details', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='NoSuchProcess', bases=[Name(id='Error', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Exception raised when a process with a certain PID doesn't\n    or no longer exists.\n    ")), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='psutil')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid'), arg(arg='name'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='Error', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='msg', ctx=Load()), Constant(value='process no longer exists')]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ZombieProcess', bases=[Name(id='NoSuchProcess', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Exception raised when querying a zombie process. This is\n    raised on macOS, BSD and Solaris only, and not always: depending\n    on the query the OS may be able to succeed anyway.\n    On Linux all zombie processes are querable (hence this is never\n    raised). Windows doesn't have zombie processes.\n    ")), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='psutil')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid'), arg(arg='name'), arg(arg='ppid'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='NoSuchProcess', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='pid', ctx=Load()), Name(id='name', ctx=Load()), Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ppid', ctx=Store())], value=Name(id='ppid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='msg', ctx=Load()), Constant(value="PID still exists but it's a zombie")]))], decorator_list=[])], decorator_list=[]), ClassDef(name='AccessDenied', bases=[Name(id='Error', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exception raised when permission to perform an action is denied.')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='psutil')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid'), arg(arg='name'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='Error', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='msg', ctx=Load()), Constant(value='')]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TimeoutExpired', bases=[Name(id='Error', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised on Process.wait(timeout) if timeout expires and process\n    is still alive.\n    ')), Assign(targets=[Name(id='__module__', ctx=Store())], value=Constant(value='psutil')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='seconds'), arg(arg='pid'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='Error', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Store())], value=Name(id='seconds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=BinOp(left=Constant(value='timeout after %s seconds'), op=Mod(), right=Name(id='seconds', ctx=Load())))], decorator_list=[])], decorator_list=[]), If(test=Name(id='PY3', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='__builtins__', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='exec_', ctx=Store())], value=Subscript(value=Name(id='__builtins__', ctx=Load()), slice=Constant(value='exec'), ctx=Load()))], orelse=[Assign(targets=[Name(id='exec_', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='__builtins__', ctx=Load()), Constant(value='exec')], keywords=[]))]), Expr(value=Call(func=Name(id='exec_', ctx=Load()), args=[Constant(value='def raise_from(value, from_value):\n    try:\n        raise value from from_value\n    finally:\n        value = None\n    ')], keywords=[]))], orelse=[FunctionDef(name='raise_from', args=arguments(posonlyargs=[], args=[arg(arg='value'), arg(arg='from_value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='value', ctx=Load()))], decorator_list=[])]), FunctionDef(name='usage_percent', args=arguments(posonlyargs=[], args=[arg(arg='used'), arg(arg='total'), arg(arg='round_')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Calculate percentage usage of 'used' against 'total'.")), Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[]), op=Div(), right=Name(id='total', ctx=Load())), op=Mult(), right=Constant(value=100)))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Return(value=Constant(value=0.0))])], orelse=[If(test=Compare(left=Name(id='round_', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='round', ctx=Load()), args=[Name(id='ret', ctx=Load()), Name(id='round_', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], finalbody=[])], decorator_list=[]), FunctionDef(name='memoize', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A simple memoize decorator for functions supporting (hashable)\n    positional arguments.\n    It also provides a cache_clear() function for clearing the cache:\n\n    >>> @memoize\n    ... def foo()\n    ...     return 1\n        ...\n    >>> foo()\n    1\n    >>> foo.cache_clear()\n    >>>\n\n    It supports:\n     - functions\n     - classes (acts as a @singleton)\n     - staticmethods\n     - classmethods\n\n    It does NOT support:\n     - methods\n    ')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Name(id='args', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], ctx=Load())), Try(body=[Return(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store()), Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='fun', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='raise_from', ctx=Load()), args=[Name(id='err', ctx=Load()), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='ret', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), FunctionDef(name='cache_clear', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear cache.')), Expr(value=Call(func=Attribute(value=Name(id='cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='cache_clear', ctx=Store())], value=Name(id='cache_clear', ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='memoize_when_activated', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A memoize decorator which is disabled by default. It can be\n    activated and deactivated on request.\n    For efficiency reasons it can be used only against class methods\n    accepting no arguments.\n\n    >>> class Foo:\n    ...     @memoize\n    ...     def foo()\n    ...         print(1)\n    ...\n    >>> f = Foo()\n    >>> # deactivated (default)\n    >>> foo()\n    1\n    >>> foo()\n    1\n    >>>\n    >>> # activated\n    >>> foo.cache_activate(self)\n    >>> foo()\n    1\n    >>> foo()\n    >>> foo()\n    >>>\n    ')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='fun', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='raise_from', ctx=Load()), args=[Name(id='err', ctx=Load()), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[])]), ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='raise_from', ctx=Load()), args=[Name(id='err', ctx=Load()), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='fun', ctx=Load()), ctx=Store())], value=Name(id='ret', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), FunctionDef(name='cache_activate', args=arguments(posonlyargs=[], args=[arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Activate cache. Expects a Process instance. Cache will be\n        stored as a "_cache" instance attribute.\n        ')), Assign(targets=[Attribute(value=Name(id='proc', ctx=Load()), attr='_cache', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='cache_deactivate', args=arguments(posonlyargs=[], args=[arg(arg='proc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deactivate and clear cache.')), Try(body=[Delete(targets=[Attribute(value=Name(id='proc', ctx=Load()), attr='_cache', ctx=Del())])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='cache_activate', ctx=Store())], value=Name(id='cache_activate', ctx=Load())), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='cache_deactivate', ctx=Store())], value=Name(id='cache_deactivate', ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='isfile_strict', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Same as os.path.isfile() but does not swallow EACCES / EPERM\n    exceptions, see:\n    http://mail.python.org/pipermail/python-dev/2012-June/120787.html.\n    ')), Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())], ctx=Load())]), body=[Raise()], orelse=[]), Return(value=Constant(value=False))])], orelse=[Return(value=Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISREG', ctx=Load()), args=[Attribute(value=Name(id='st', ctx=Load()), attr='st_mode', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='path_exists_strict', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Same as os.path.exists() but does not swallow EACCES / EPERM\n    exceptions. See:\n    http://mail.python.org/pipermail/python-dev/2012-June/120787.html.\n    ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPERM', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())], ctx=Load())]), body=[Raise()], orelse=[]), Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[]), FunctionDef(name='supports_ipv6', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if IPv6 is supported on this platform.')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='socket', ctx=Load()), attr='has_ipv6', ctx=Load())), Compare(left=Name(id='AF_INET6', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='closing', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Constant(value='::1'), Constant(value=0)], ctx=Load())], keywords=[]))]), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[Name(id='memoize', ctx=Load())]), FunctionDef(name='parse_environ_block', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a C environ block of environment variables into a dictionary.')), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='WINDOWS_', ctx=Store())], value=Name(id='WINDOWS', ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='next_pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\x00'), Name(id='pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='next_pos', ctx=Load()), ops=[LtE()], comparators=[Name(id='pos', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='equal_pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='='), Name(id='pos', ctx=Load()), Name(id='next_pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='equal_pos', ctx=Load()), ops=[Gt()], comparators=[Name(id='pos', ctx=Load())]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Name(id='pos', ctx=Load()), upper=Name(id='equal_pos', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='equal_pos', ctx=Load()), op=Add(), right=Constant(value=1)), upper=Name(id='next_pos', ctx=Load())), ctx=Load())), If(test=Name(id='WINDOWS_', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=Name(id='next_pos', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='sockfam_to_enum', args=arguments(posonlyargs=[], args=[arg(arg='num')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a numeric socket family value to an IntEnum member.\n    If it's not a known member, return the numeric value itself.\n    ")), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='num', ctx=Load()))], orelse=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='AddressFamily', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='num', ctx=Load()))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='socktype_to_enum', args=arguments(posonlyargs=[], args=[arg(arg='num')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a numeric socket type value to an IntEnum member.\n    If it's not a known member, return the numeric value itself.\n    ")), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='num', ctx=Load()))], orelse=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='SocketKind', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='num', ctx=Load()))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='conn_to_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='fd'), arg(arg='fam'), arg(arg='type_'), arg(arg='laddr'), arg(arg='raddr'), arg(arg='status'), arg(arg='status_map'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Convert a raw connection tuple to a proper ntuple.')), If(test=Compare(left=Name(id='fam', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load())]), body=[If(test=Name(id='laddr', ctx=Load()), body=[Assign(targets=[Name(id='laddr', ctx=Store())], value=Call(func=Name(id='addr', ctx=Load()), args=[Starred(value=Name(id='laddr', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='raddr', ctx=Load()), body=[Assign(targets=[Name(id='raddr', ctx=Store())], value=Call(func=Name(id='addr', ctx=Load()), args=[Starred(value=Name(id='raddr', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='type_', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())]), Compare(left=Name(id='fam', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='AF_INET', ctx=Load()), Name(id='AF_INET6', ctx=Load())], ctx=Load())])]), body=[Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Attribute(value=Name(id='status_map', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='status', ctx=Load()), Name(id='CONN_NONE', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='status', ctx=Store())], value=Name(id='CONN_NONE', ctx=Load()))]), Assign(targets=[Name(id='fam', ctx=Store())], value=Call(func=Name(id='sockfam_to_enum', ctx=Load()), args=[Name(id='fam', ctx=Load())], keywords=[])), Assign(targets=[Name(id='type_', ctx=Store())], value=Call(func=Name(id='socktype_to_enum', ctx=Load()), args=[Name(id='type_', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='pconn', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='fam', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='sconn', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='fam', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='deprecated_method', args=arguments(posonlyargs=[], args=[arg(arg='replacement')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A decorator which can be used to mark a method as deprecated\n    'replcement' is the method name which will be called instead.\n    ")), FunctionDef(name='outer', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%s() is deprecated and will be removed; use %s() instead'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='fun', ctx=Load()), attr='__name__', ctx=Load()), Name(id='replacement', ctx=Load())], ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='fun', ctx=Load()), attr='__doc__', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='fun', ctx=Load()), attr='__doc__', ctx=Store())], value=Name(id='msg', ctx=Load()))], orelse=[]), FunctionDef(name='inner', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='category', value=Name(id='DeprecationWarning', ctx=Load())), keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='replacement', ctx=Load())], keywords=[]), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='inner', ctx=Load()))], decorator_list=[]), Return(value=Name(id='outer', ctx=Load()))], decorator_list=[]), ClassDef(name='_WrapNumbers', bases=[], keywords=[], body=[Expr(value=Constant(value="Watches numbers so that they don't overflow and wrap\n    (reset to zero).\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Lock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='_add_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_dict'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load())])), Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load())])), Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load())])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='input_dict', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='set', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_dead_reminders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_dict'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='In case the number of keys changed between calls (e.g. a\n        disk disappears) this removes the entry from self.reminders.\n        ')), Assign(targets=[Name(id='old_dict', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='gone_keys', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='old_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='input_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))), For(target=Name(id='gone_key', ctx=Store()), iter=Name(id='gone_keys', ctx=Load()), body=[For(target=Name(id='remkey', ctx=Store()), iter=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='gone_key', ctx=Load()), ctx=Load()), body=[Delete(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='remkey', ctx=Load()), ctx=Del())])], orelse=[]), Delete(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='gone_key', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='input_dict'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Cache dict and sum numbers which overflow and wrap.\n        Return an updated copy of `input_dict`.\n        ')), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_dict', ctx=Load()), args=[Name(id='input_dict', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Return(value=Name(id='input_dict', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_dead_reminders', ctx=Load()), args=[Name(id='input_dict', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='old_dict', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='new_dict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='input_dict', ctx=Load()), body=[Assign(targets=[Name(id='input_tuple', ctx=Store())], value=Subscript(value=Name(id='input_dict', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Try(body=[Assign(targets=[Name(id='old_tuple', ctx=Store())], value=Subscript(value=Name(id='old_dict', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='input_tuple', ctx=Load())), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='bits', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='input_tuple', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='input_value', ctx=Store())], value=Subscript(value=Name(id='input_tuple', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='old_value', ctx=Store())], value=Subscript(value=Name(id='old_tuple', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='remkey', ctx=Store())], value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='i', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='input_value', ctx=Load()), ops=[Lt()], comparators=[Name(id='old_value', ctx=Load())]), body=[AugAssign(target=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='remkey', ctx=Load()), ctx=Store()), op=Add(), value=Name(id='old_value', ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='remkey', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='bits', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='input_value', ctx=Load()), op=Add(), right=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Name(id='remkey', ctx=Load()), ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='new_dict', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='bits', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='input_dict', ctx=Load())), Return(value=Name(id='new_dict', ctx=Load()))], decorator_list=[]), FunctionDef(name='cache_clear', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Clear the internal cache, optionally only for function 'name'.")), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[]))])])], decorator_list=[]), FunctionDef(name='cache_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return internal cache dicts as a tuple of 3 elements.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='reminders', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='reminder_keys', ctx=Load())], ctx=Load()))])], decorator_list=[])], decorator_list=[]), FunctionDef(name='wrap_numbers', args=arguments(posonlyargs=[], args=[arg(arg='input_dict'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given an `input_dict` and a function `name`, adjust the numbers\n    which "wrap" (restart from zero) across different calls by adding\n    "old value" to "new value" and return an updated dict.\n    ')), With(items=[withitem(context_expr=Attribute(value=Name(id='_wn', ctx=Load()), attr='lock', ctx=Load()))], body=[Return(value=Call(func=Attribute(value=Name(id='_wn', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='input_dict', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='_wn', ctx=Store())], value=Call(func=Name(id='_WrapNumbers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='wrap_numbers', ctx=Load()), attr='cache_clear', ctx=Store())], value=Attribute(value=Name(id='_wn', ctx=Load()), attr='cache_clear', ctx=Load())), Assign(targets=[Attribute(value=Name(id='wrap_numbers', ctx=Load()), attr='cache_info', ctx=Store())], value=Attribute(value=Name(id='_wn', ctx=Load()), attr='cache_info', ctx=Load())), Assign(targets=[Name(id='FILE_READ_BUFFER_SIZE', ctx=Store())], value=BinOp(left=Constant(value=32), op=Mult(), right=Constant(value=1024))), FunctionDef(name='open_binary', args=arguments(posonlyargs=[], args=[arg(arg='fname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fname', ctx=Load()), Constant(value='rb')], keywords=[keyword(arg='buffering', value=Name(id='FILE_READ_BUFFER_SIZE', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='open_text', args=arguments(posonlyargs=[], args=[arg(arg='fname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="On Python 3 opens a file in text mode by using fs encoding and\n    a proper en/decoding errors handler.\n    On Python 2 this is just an alias for open(name, 'rt').\n    ")), If(test=UnaryOp(op=Not(), operand=Name(id='PY3', ctx=Load())), body=[Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[keyword(arg='buffering', value=Name(id='FILE_READ_BUFFER_SIZE', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='fobj', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[keyword(arg='buffering', value=Name(id='FILE_READ_BUFFER_SIZE', ctx=Load())), keyword(arg='encoding', value=Name(id='ENCODING', ctx=Load())), keyword(arg='errors', value=Name(id='ENCODING_ERRS', ctx=Load()))])), Try(body=[Assign(targets=[Attribute(value=Name(id='fobj', ctx=Load()), attr='_CHUNK_SIZE', ctx=Store())], value=Name(id='FILE_READ_BUFFER_SIZE', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fobj', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='fobj', ctx=Load()))], decorator_list=[]), FunctionDef(name='cat', args=arguments(posonlyargs=[], args=[arg(arg='fname'), arg(arg='fallback'), arg(arg='_open')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_DEFAULT', ctx=Load()), Name(id='open_text', ctx=Load())]), body=[Expr(value=Constant(value="Read entire file content and return it as a string. File is\n    opened in text mode. If specified, `fallback` is the value\n    returned in case of error, either if the file does not exist or\n    it can't be read().\n    ")), If(test=Compare(left=Name(id='fallback', ctx=Load()), ops=[Is()], comparators=[Name(id='_DEFAULT', ctx=Load())]), body=[With(items=[withitem(context_expr=Call(func=Name(id='_open', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='_open', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='fallback', ctx=Load()))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='bcat', args=arguments(posonlyargs=[], args=[arg(arg='fname'), arg(arg='fallback')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_DEFAULT', ctx=Load())]), body=[Expr(value=Constant(value='Same as above but opens file in binary mode.')), Return(value=Call(func=Name(id='cat', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[keyword(arg='fallback', value=Name(id='fallback', ctx=Load())), keyword(arg='_open', value=Name(id='open_binary', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='bytes2human', args=arguments(posonlyargs=[], args=[arg(arg='n'), arg(arg='format')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='%(value).1f%(symbol)s')]), body=[Expr(value=Constant(value="Used by various scripts. See: http://goo.gl/zeJZl.\n\n    >>> bytes2human(10000)\n    '9.8K'\n    >>> bytes2human(100001221)\n    '95.4M'\n    ")), Assign(targets=[Name(id='symbols', ctx=Store())], value=Tuple(elts=[Constant(value='B'), Constant(value='K'), Constant(value='M'), Constant(value='G'), Constant(value='T'), Constant(value='P'), Constant(value='E'), Constant(value='Z'), Constant(value='Y')], ctx=Load())), Assign(targets=[Name(id='prefix', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Subscript(value=Name(id='symbols', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Name(id='s', ctx=Load()), ctx=Store())], value=BinOp(left=Constant(value=1), op=LShift(), right=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mult(), right=Constant(value=10))))], orelse=[]), For(target=Name(id='symbol', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Subscript(value=Name(id='symbols', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Subscript(value=Name(id='prefix', ctx=Load()), slice=Name(id='symbol', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), op=Div(), right=Subscript(value=Name(id='prefix', ctx=Load()), slice=Name(id='symbol', ctx=Load()), ctx=Load()))), Return(value=BinOp(left=Name(id='format', ctx=Load()), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])))], orelse=[])], orelse=[]), Return(value=BinOp(left=Name(id='format', ctx=Load()), op=Mod(), right=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='symbol', value=Subscript(value=Name(id='symbols', ctx=Load()), slice=Constant(value=0), ctx=Load())), keyword(arg='value', value=Name(id='n', ctx=Load()))])))], decorator_list=[]), FunctionDef(name='get_procfs_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return updated psutil.PROCFS_PATH constant.')), Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='psutil'), ctx=Load()), attr='PROCFS_PATH', ctx=Load()))], decorator_list=[]), If(test=Name(id='PY3', ctx=Load()), body=[FunctionDef(name='decode', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Name(id='ENCODING', ctx=Load())), keyword(arg='errors', value=Name(id='ENCODING_ERRS', ctx=Load()))]))], decorator_list=[])], orelse=[FunctionDef(name='decode', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='s', ctx=Load()))], decorator_list=[])]), FunctionDef(name='term_supports_colors', args=arguments(posonlyargs=[], args=[arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Return(value=Constant(value=True))], orelse=[]), Try(body=[Import(names=[alias(name='curses')]), Assert(test=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='curses', ctx=Load()), attr='setupterm', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='curses', ctx=Load()), attr='tigetnum', ctx=Load()), args=[Constant(value='colors')], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[Name(id='memoize', ctx=Load())]), FunctionDef(name='hilite', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='color'), arg(arg='bold')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="Return an highlighted version of 'string'.")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='term_supports_colors', ctx=Load()), args=[], keywords=[])), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='attr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='green', value=Constant(value='32')), keyword(arg='red', value=Constant(value='91')), keyword(arg='brown', value=Constant(value='33')), keyword(arg='yellow', value=Constant(value='93')), keyword(arg='blue', value=Constant(value='34')), keyword(arg='violet', value=Constant(value='35')), keyword(arg='lightblue', value=Constant(value='36')), keyword(arg='grey', value=Constant(value='37')), keyword(arg='darkgrey', value=Constant(value='30'))])), Assign(targets=[Subscript(value=Name(id='colors', ctx=Load()), slice=Constant(value=None), ctx=Store())], value=Constant(value='29')), Try(body=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='colors', ctx=Load()), slice=Name(id='color', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid color %r; choose between %s'), op=Mod(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[])), If(test=Name(id='bold', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='1')], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value='\x1b[%sm%s\x1b[0m'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]), Name(id='s', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='print_color', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='color'), arg(arg='bold'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())]), body=[Expr(value=Constant(value='Print a colorized version of string.')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='term_supports_colors', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))]))], orelse=[If(test=Name(id='POSIX', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='hilite', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='color', ctx=Load()), Name(id='bold', ctx=Load())], keywords=[])], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))]))], orelse=[Import(names=[alias(name='ctypes')]), Assign(targets=[Name(id='DEFAULT_COLOR', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='GetStdHandle', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='Kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load())), Assign(targets=[Name(id='SetConsoleTextAttribute', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='windll', ctx=Load()), attr='Kernel32', ctx=Load()), attr='SetConsoleTextAttribute', ctx=Load())), Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='green', value=Constant(value=2)), keyword(arg='red', value=Constant(value=4)), keyword(arg='brown', value=Constant(value=6)), keyword(arg='yellow', value=Constant(value=6))])), Assign(targets=[Subscript(value=Name(id='colors', ctx=Load()), slice=Constant(value=None), ctx=Store())], value=Name(id='DEFAULT_COLOR', ctx=Load())), Try(body=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='colors', ctx=Load()), slice=Name(id='color', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid color %r; choose between %r'), op=Mod(), right=Tuple(elts=[Name(id='color', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='bold', ctx=Load()), Compare(left=Name(id='color', ctx=Load()), ops=[LtE()], comparators=[Constant(value=7)])]), body=[AugAssign(target=Name(id='color', ctx=Store()), op=Add(), value=Constant(value=8))], orelse=[]), Assign(targets=[Name(id='handle_id', ctx=Store())], value=IfExp(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())]), body=UnaryOp(op=USub(), operand=Constant(value=12)), orelse=UnaryOp(op=USub(), operand=Constant(value=11)))), Assign(targets=[Attribute(value=Name(id='GetStdHandle', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_ulong', ctx=Load())), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='GetStdHandle', ctx=Load()), args=[Name(id='handle_id', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='SetConsoleTextAttribute', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='color', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='SetConsoleTextAttribute', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='DEFAULT_COLOR', ctx=Load())], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='debug', args=arguments(posonlyargs=[], args=[arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='If PSUTIL_DEBUG env var is set, print a debug message to stderr.')), If(test=Name(id='PSUTIL_DEBUG', ctx=Load()), body=[Import(names=[alias(name='inspect')]), Assign(targets=[Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='lineno', ctx=Store()), Name(id='_', ctx=Store()), Name(id='lines', ctx=Store()), Name(id='index', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getframeinfo', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='currentframe', ctx=Load()), args=[], keywords=[]), attr='f_back', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='Exception', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='msg', ctx=Load()), Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load()), Name(id='EnvironmentError', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='ignoring %s'), op=Mod(), right=Name(id='msg', ctx=Load())))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='ignoring %r'), op=Mod(), right=Name(id='msg', ctx=Load())))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='psutil-debug [%s:%s]> %s'), op=Mod(), right=Tuple(elts=[Name(id='fname', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='msg', ctx=Load())], ctx=Load()))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))]))], orelse=[])], decorator_list=[])], type_ignores=[])