Module(body=[Expr(value=Constant(value='Routines common to all posix systems.')), Import(names=[alias(name='glob')]), Import(names=[alias(name='os')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='_common', names=[alias(name='MACOS')], level=1), ImportFrom(module='_common', names=[alias(name='TimeoutExpired')], level=1), ImportFrom(module='_common', names=[alias(name='memoize')], level=1), ImportFrom(module='_common', names=[alias(name='sdiskusage')], level=1), ImportFrom(module='_common', names=[alias(name='usage_percent')], level=1), ImportFrom(module='_compat', names=[alias(name='PY3')], level=1), ImportFrom(module='_compat', names=[alias(name='ChildProcessError')], level=1), ImportFrom(module='_compat', names=[alias(name='FileNotFoundError')], level=1), ImportFrom(module='_compat', names=[alias(name='InterruptedError')], level=1), ImportFrom(module='_compat', names=[alias(name='PermissionError')], level=1), ImportFrom(module='_compat', names=[alias(name='ProcessLookupError')], level=1), ImportFrom(module='_compat', names=[alias(name='unicode')], level=1), If(test=Name(id='MACOS', ctx=Load()), body=[ImportFrom(names=[alias(name='_psutil_osx')], level=1)], orelse=[]), If(test=Name(id='PY3', ctx=Load()), body=[Import(names=[alias(name='enum')])], orelse=[Assign(targets=[Name(id='enum', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='pid_exists'), Constant(value='wait_pid'), Constant(value='disk_usage'), Constant(value='get_terminal_map')], ctx=Load())), FunctionDef(name='pid_exists', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check whether pid exists in the current process table.')), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=True))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='kill', ctx=Load()), args=[Name(id='pid', ctx=Load()), Constant(value=0)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ProcessLookupError', ctx=Load()), body=[Return(value=Constant(value=False))]), ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='signal', ctx=Load()), Constant(value='Signals')], keywords=[])]), body=[Assign(targets=[Name(id='Negsignal', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load()), args=[Constant(value='Negsignal'), Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Attribute(value=Name(id='x', ctx=Load()), attr='name', ctx=Load()), UnaryOp(op=USub(), operand=Attribute(value=Name(id='x', ctx=Load()), attr='value', ctx=Load()))], ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='signal', ctx=Load()), attr='Signals', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), FunctionDef(name='negsig_to_enum', args=arguments(posonlyargs=[], args=[arg(arg='num')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a negative signal value to an enum.')), Try(body=[Return(value=Call(func=Name(id='Negsignal', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Name(id='num', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], orelse=[FunctionDef(name='negsig_to_enum', args=arguments(posonlyargs=[], args=[arg(arg='num')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='num', ctx=Load()))], decorator_list=[])]), FunctionDef(name='wait_pid', args=arguments(posonlyargs=[], args=[arg(arg='pid'), arg(arg='timeout'), arg(arg='proc_name'), arg(arg='_waitpid'), arg(arg='_timer'), arg(arg='_min'), arg(arg='_sleep'), arg(arg='_pid_exists')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Attribute(value=Name(id='os', ctx=Load()), attr='waitpid', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='time', ctx=Load()), Constant(value='monotonic'), Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load())], keywords=[]), Name(id='min', ctx=Load()), Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), Name(id='pid_exists', ctx=Load())]), body=[Expr(value=Constant(value='Wait for a process PID to terminate.\n\n    If the process terminated normally by calling exit(3) or _exit(2),\n    or by returning from main(), the return value is the positive integer\n    passed to *exit().\n\n    If it was terminated by a signal it returns the negated value of the\n    signal which caused the termination (e.g. -SIGTERM).\n\n    If PID is not a children of os.getpid() (current process) just\n    wait until the process disappears and return None.\n\n    If PID does not exist at all return None immediately.\n\n    If *timeout* != None and process is still alive raise TimeoutExpired.\n    timeout=0 is also possible (either return immediately or raise).\n    ')), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="can't wait for PID 0")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='interval', ctx=Store())], value=Constant(value=0.0001)), Assign(targets=[Name(id='flags', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='os', ctx=Load()), attr='WNOHANG', ctx=Load())), Assign(targets=[Name(id='stop_at', ctx=Store())], value=BinOp(left=Call(func=Name(id='_timer', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='timeout', ctx=Load())))], orelse=[]), FunctionDef(name='sleep', args=arguments(posonlyargs=[], args=[arg(arg='interval')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='_timer', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Name(id='stop_at', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TimeoutExpired', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[keyword(arg='pid', value=Name(id='pid', ctx=Load())), keyword(arg='name', value=Name(id='proc_name', ctx=Load()))]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='_sleep', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_min', ctx=Load()), args=[BinOp(left=Name(id='interval', ctx=Load()), op=Mult(), right=Constant(value=2)), Constant(value=0.04)], keywords=[]))], decorator_list=[]), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='retpid', ctx=Store()), Name(id='status', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='waitpid', ctx=Load()), args=[Name(id='pid', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InterruptedError', ctx=Load()), body=[Assign(targets=[Name(id='interval', ctx=Store())], value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ChildProcessError', ctx=Load()), body=[While(test=Call(func=Name(id='_pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='interval', ctx=Store())], value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[]))], orelse=[]), Return()])], orelse=[If(test=Compare(left=Name(id='retpid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='interval', ctx=Store())], value=Call(func=Name(id='sleep', ctx=Load()), args=[Name(id='interval', ctx=Load())], keywords=[])), Continue()], orelse=[If(test=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='WIFEXITED', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='WEXITSTATUS', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='WIFSIGNALED', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='negsig_to_enum', ctx=Load()), args=[UnaryOp(op=USub(), operand=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='WTERMSIG', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='unknown process exit status %r'), op=Mod(), right=Name(id='status', ctx=Load()))], keywords=[]))])])])], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='disk_usage', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return disk usage associated with path.\n    Note: UNIX usually reserves 5% disk space which is not accessible\n    by user. In this function "total" and "used" values reflect the\n    total and used disk space whereas "free" and "percent" represent\n    the "free" and "used percent" user disk space.\n    ')), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='statvfs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='statvfs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='encode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='statvfs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[Raise()])])], orelse=[], finalbody=[])]), Assign(targets=[Name(id='total', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='st', ctx=Load()), attr='f_blocks', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='st', ctx=Load()), attr='f_frsize', ctx=Load()))), Assign(targets=[Name(id='avail_to_root', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='st', ctx=Load()), attr='f_bfree', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='st', ctx=Load()), attr='f_frsize', ctx=Load()))), Assign(targets=[Name(id='avail_to_user', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='st', ctx=Load()), attr='f_bavail', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='st', ctx=Load()), attr='f_frsize', ctx=Load()))), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='avail_to_root', ctx=Load()))), If(test=Name(id='MACOS', ctx=Load()), body=[Assign(targets=[Name(id='used', ctx=Store())], value=Call(func=Attribute(value=Name(id='_psutil_osx', ctx=Load()), attr='disk_usage_used', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='used', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='total_user', ctx=Store())], value=BinOp(left=Name(id='used', ctx=Load()), op=Add(), right=Name(id='avail_to_user', ctx=Load()))), Assign(targets=[Name(id='usage_percent_user', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[Name(id='used', ctx=Load()), Name(id='total_user', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Return(value=Call(func=Name(id='sdiskusage', ctx=Load()), args=[], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load())), keyword(arg='used', value=Name(id='used', ctx=Load())), keyword(arg='free', value=Name(id='avail_to_user', ctx=Load())), keyword(arg='percent', value=Name(id='usage_percent_user', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_terminal_map', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a map of device-id -> path as a dict.\n    Used by Process.terminal().\n    ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='ls', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/dev/tty*')], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/dev/pts/*')], keywords=[]))), For(target=Name(id='name', ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ret', ctx=Load())]), msg=Name(id='name', ctx=Load())), Try(body=[Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='st_rdev', ctx=Load()), ctx=Store())], value=Name(id='name', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='memoize', ctx=Load())])], type_ignores=[])