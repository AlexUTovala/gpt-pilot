Module(body=[Expr(value=Constant(value='Linux platform implementation.')), ImportFrom(module='__future__', names=[alias(name='division')], level=0), Import(names=[alias(name='base64')]), Import(names=[alias(name='collections')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='glob')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(names=[alias(name='_common')], level=1), ImportFrom(names=[alias(name='_psposix')], level=1), ImportFrom(names=[alias(name='_psutil_linux', asname='cext')], level=1), ImportFrom(names=[alias(name='_psutil_posix', asname='cext_posix')], level=1), ImportFrom(module='_common', names=[alias(name='NIC_DUPLEX_FULL')], level=1), ImportFrom(module='_common', names=[alias(name='NIC_DUPLEX_HALF')], level=1), ImportFrom(module='_common', names=[alias(name='NIC_DUPLEX_UNKNOWN')], level=1), ImportFrom(module='_common', names=[alias(name='AccessDenied')], level=1), ImportFrom(module='_common', names=[alias(name='NoSuchProcess')], level=1), ImportFrom(module='_common', names=[alias(name='ZombieProcess')], level=1), ImportFrom(module='_common', names=[alias(name='bcat')], level=1), ImportFrom(module='_common', names=[alias(name='cat')], level=1), ImportFrom(module='_common', names=[alias(name='debug')], level=1), ImportFrom(module='_common', names=[alias(name='decode')], level=1), ImportFrom(module='_common', names=[alias(name='get_procfs_path')], level=1), ImportFrom(module='_common', names=[alias(name='isfile_strict')], level=1), ImportFrom(module='_common', names=[alias(name='memoize')], level=1), ImportFrom(module='_common', names=[alias(name='memoize_when_activated')], level=1), ImportFrom(module='_common', names=[alias(name='open_binary')], level=1), ImportFrom(module='_common', names=[alias(name='open_text')], level=1), ImportFrom(module='_common', names=[alias(name='parse_environ_block')], level=1), ImportFrom(module='_common', names=[alias(name='path_exists_strict')], level=1), ImportFrom(module='_common', names=[alias(name='supports_ipv6')], level=1), ImportFrom(module='_common', names=[alias(name='usage_percent')], level=1), ImportFrom(module='_compat', names=[alias(name='PY3')], level=1), ImportFrom(module='_compat', names=[alias(name='FileNotFoundError')], level=1), ImportFrom(module='_compat', names=[alias(name='PermissionError')], level=1), ImportFrom(module='_compat', names=[alias(name='ProcessLookupError')], level=1), ImportFrom(module='_compat', names=[alias(name='b')], level=1), ImportFrom(module='_compat', names=[alias(name='basestring')], level=1), If(test=Name(id='PY3', ctx=Load()), body=[Import(names=[alias(name='enum')])], orelse=[Assign(targets=[Name(id='enum', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='__extra__all__', ctx=Store())], value=List(elts=[Constant(value='PROCFS_PATH'), Constant(value='IOPRIO_CLASS_NONE'), Constant(value='IOPRIO_CLASS_RT'), Constant(value='IOPRIO_CLASS_BE'), Constant(value='IOPRIO_CLASS_IDLE'), Constant(value='CONN_ESTABLISHED'), Constant(value='CONN_SYN_SENT'), Constant(value='CONN_SYN_RECV'), Constant(value='CONN_FIN_WAIT1'), Constant(value='CONN_FIN_WAIT2'), Constant(value='CONN_TIME_WAIT'), Constant(value='CONN_CLOSE'), Constant(value='CONN_CLOSE_WAIT'), Constant(value='CONN_LAST_ACK'), Constant(value='CONN_LISTEN'), Constant(value='CONN_CLOSING')], ctx=Load())), Assign(targets=[Name(id='POWER_SUPPLY_PATH', ctx=Store())], value=Constant(value='/sys/class/power_supply')), Assign(targets=[Name(id='HAS_PROC_SMAPS', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/smaps'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Name(id='HAS_PROC_SMAPS_ROLLUP', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/smaps_rollup'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], keywords=[])), Assign(targets=[Name(id='HAS_PROC_IO_PRIORITY', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='proc_ioprio_get')], keywords=[])), Assign(targets=[Name(id='HAS_CPU_AFFINITY', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cext', ctx=Load()), Constant(value='proc_cpu_affinity_get')], keywords=[])), Assign(targets=[Name(id='CLOCK_TICKS', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='sysconf', ctx=Load()), args=[Constant(value='SC_CLK_TCK')], keywords=[])), Assign(targets=[Name(id='PAGESIZE', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='getpagesize', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='BOOT_TIME', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='LITTLE_ENDIAN', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='byteorder', ctx=Load()), ops=[Eq()], comparators=[Constant(value='little')])), Assign(targets=[Name(id='DISK_SECTOR_SIZE', ctx=Store())], value=Constant(value=512)), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='AF_LINK', ctx=Store())], value=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_PACKET', ctx=Load()))], orelse=[Assign(targets=[Name(id='AddressFamily', ctx=Store())], value=Call(func=Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load()), args=[Constant(value='AddressFamily'), Dict(keys=[Constant(value='AF_LINK')], values=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_PACKET', ctx=Load())], keywords=[])])], keywords=[])), Assign(targets=[Name(id='AF_LINK', ctx=Store())], value=Attribute(value=Name(id='AddressFamily', ctx=Load()), attr='AF_LINK', ctx=Load()))]), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='IOPRIO_CLASS_NONE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='IOPRIO_CLASS_RT', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='IOPRIO_CLASS_BE', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='IOPRIO_CLASS_IDLE', ctx=Store())], value=Constant(value=3))], orelse=[ClassDef(name='IOPriority', bases=[Attribute(value=Name(id='enum', ctx=Load()), attr='IntEnum', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='IOPRIO_CLASS_NONE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='IOPRIO_CLASS_RT', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='IOPRIO_CLASS_BE', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='IOPRIO_CLASS_IDLE', ctx=Store())], value=Constant(value=3))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='IOPriority', ctx=Load()), attr='__members__', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='PROC_STATUSES', ctx=Store())], value=Dict(keys=[Constant(value='R'), Constant(value='S'), Constant(value='D'), Constant(value='T'), Constant(value='t'), Constant(value='Z'), Constant(value='X'), Constant(value='x'), Constant(value='K'), Constant(value='W'), Constant(value='I'), Constant(value='P')], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_RUNNING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_SLEEPING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_DISK_SLEEP', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_STOPPED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_TRACING_STOP', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_ZOMBIE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_DEAD', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_DEAD', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_WAKE_KILL', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_WAKING', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_IDLE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='STATUS_PARKED', ctx=Load())])), Assign(targets=[Name(id='TCP_STATUSES', ctx=Store())], value=Dict(keys=[Constant(value='01'), Constant(value='02'), Constant(value='03'), Constant(value='04'), Constant(value='05'), Constant(value='06'), Constant(value='07'), Constant(value='08'), Constant(value='09'), Constant(value='0A'), Constant(value='0B')], values=[Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_ESTABLISHED', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_SENT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_SYN_RECV', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT1', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_FIN_WAIT2', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_TIME_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSE_WAIT', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LAST_ACK', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_LISTEN', ctx=Load()), Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_CLOSING', ctx=Load())])), Assign(targets=[Name(id='svmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='svmem'), List(elts=[Constant(value='total'), Constant(value='available'), Constant(value='percent'), Constant(value='used'), Constant(value='free'), Constant(value='active'), Constant(value='inactive'), Constant(value='buffers'), Constant(value='cached'), Constant(value='shared'), Constant(value='slab')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdiskio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='sdiskio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes'), Constant(value='read_time'), Constant(value='write_time'), Constant(value='read_merged_count'), Constant(value='write_merged_count'), Constant(value='busy_time')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='popenfile', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='popenfile'), List(elts=[Constant(value='path'), Constant(value='fd'), Constant(value='position'), Constant(value='mode'), Constant(value='flags')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmem'), Constant(value='rss vms shared text lib data dirty')], keywords=[])), Assign(targets=[Name(id='pfullmem', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pfullmem'), BinOp(left=Attribute(value=Name(id='pmem', ctx=Load()), attr='_fields', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value='uss'), Constant(value='pss'), Constant(value='swap')], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='pmmap_grouped', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_grouped'), List(elts=[Constant(value='path'), Constant(value='rss'), Constant(value='size'), Constant(value='pss'), Constant(value='shared_clean'), Constant(value='shared_dirty'), Constant(value='private_clean'), Constant(value='private_dirty'), Constant(value='referenced'), Constant(value='anonymous'), Constant(value='swap')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pmmap_ext', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pmmap_ext'), BinOp(left=Constant(value='addr perms '), op=Add(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='pmmap_grouped', ctx=Load()), attr='_fields', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='pio', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pio'), List(elts=[Constant(value='read_count'), Constant(value='write_count'), Constant(value='read_bytes'), Constant(value='write_bytes'), Constant(value='read_chars'), Constant(value='write_chars')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='pcputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='pcputimes'), List(elts=[Constant(value='user'), Constant(value='system'), Constant(value='children_user'), Constant(value='children_system'), Constant(value='iowait')], ctx=Load())], keywords=[])), FunctionDef(name='readlink', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrapper around os.readlink().')), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), msg=Name(id='path', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='readlink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\x00')], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=' (deleted)')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='path_exists_strict', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=10))), ctx=Load()))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[]), FunctionDef(name='file_flags_to_mode', args=arguments(posonlyargs=[], args=[arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert file's open() flags into a readable string.\n    Used by Process.open_files().\n    ")), Assign(targets=[Name(id='modes_map', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='os', ctx=Load()), attr='O_RDONLY', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='O_WRONLY', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='O_RDWR', ctx=Load())], values=[Constant(value='r'), Constant(value='w'), Constant(value='w+')])), Assign(targets=[Name(id='mode', ctx=Store())], value=Subscript(value=Name(id='modes_map', ctx=Load()), slice=BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=BinOp(left=BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='O_RDONLY', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_WRONLY', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_RDWR', ctx=Load()))), ctx=Load())), If(test=BinOp(left=Name(id='flags', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_APPEND', ctx=Load())), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='w'), Constant(value='a'), Constant(value=1)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='mode', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='w+'), Constant(value='r+')], keywords=[])), Return(value=Name(id='mode', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_storage_device', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return True if the given name refers to a root device (e.g.\n    "sda", "nvme0n1") as opposed to a logical partition (e.g.  "sda1",\n    "nvme0n1p1"). If name is a virtual device (e.g. "loop1", "ram")\n    return True.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='/'), Constant(value='!')], keywords=[])), Assign(targets=[Name(id='including_virtual', ctx=Store())], value=Constant(value=True)), If(test=Name(id='including_virtual', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='/sys/block/%s'), op=Mod(), right=Name(id='name', ctx=Load())))], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='/sys/block/%s/device'), op=Mod(), right=Name(id='name', ctx=Load())))]), Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='F_OK', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_scputimes_ntuple', args=arguments(posonlyargs=[], args=[arg(arg='procfs_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set a namedtuple of variable fields depending on the CPU times\n    available on this Linux kernel version which may be:\n    (user, nice, system, idle, iowait, irq, softirq, [steal, [guest,\n     [guest_nice]]])\n    Used by cpu_times() function.\n    ')), Global(names=['scputimes']), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Name(id='procfs_path', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='values', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()))]), Assign(targets=[Name(id='fields', ctx=Store())], value=List(elts=[Constant(value='user'), Constant(value='nice'), Constant(value='system'), Constant(value='idle'), Constant(value='iowait'), Constant(value='irq'), Constant(value='softirq')], ctx=Load())), Assign(targets=[Name(id='vlen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='vlen', ctx=Load()), ops=[GtE()], comparators=[Constant(value=8)]), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='steal')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='vlen', ctx=Load()), ops=[GtE()], comparators=[Constant(value=9)]), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='guest')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='vlen', ctx=Load()), ops=[GtE()], comparators=[Constant(value=10)]), body=[Expr(value=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='guest_nice')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scputimes', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scputimes'), Name(id='fields', ctx=Load())], keywords=[]))], decorator_list=[Name(id='memoize', ctx=Load())]), Try(body=[Expr(value=Call(func=Name(id='set_scputimes_ntuple', ctx=Load()), args=[Constant(value='/proc')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[BinOp(left=Constant(value='ignoring exception on import: %r'), op=Mod(), right=Name(id='err', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='scputimes', ctx=Store())], value=Call(func=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='scputimes'), Constant(value='user system idle')], keywords=[]), args=[Constant(value=0.0), Constant(value=0.0), Constant(value=0.0)], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='prlimit', ctx=Store())], value=Constant(value=None)), Try(body=[ImportFrom(module='resource', names=[alias(name='prlimit')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='ctypes')]), Assign(targets=[Name(id='libc', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='CDLL', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='use_errno', value=Constant(value=True))])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='libc', ctx=Load()), Constant(value='prlimit')], keywords=[]), body=[FunctionDef(name='prlimit', args=arguments(posonlyargs=[], args=[arg(arg='pid'), arg(arg='resource_'), arg(arg='limits')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[ClassDef(name='StructRlimit', bases=[Attribute(value=Name(id='ctypes', ctx=Load()), attr='Structure', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_fields_', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='rlim_cur'), Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_longlong', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='rlim_max'), Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_longlong', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Name(id='StructRlimit', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='limits', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='libc', ctx=Load()), attr='prlimit', ctx=Load()), args=[Name(id='pid', ctx=Load()), Name(id='resource_', ctx=Load()), Constant(value=None), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='current', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Name(id='StructRlimit', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='new', ctx=Load()), attr='rlim_cur', ctx=Store())], value=Subscript(value=Name(id='limits', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='new', ctx=Load()), attr='rlim_max', ctx=Store())], value=Subscript(value=Name(id='limits', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='libc', ctx=Load()), attr='prlimit', ctx=Load()), args=[Name(id='pid', ctx=Load()), Name(id='resource_', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='current', ctx=Load())], keywords=[])], keywords=[]))]), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='errno_', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='get_errno', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Name(id='errno_', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='strerror', ctx=Load()), args=[Name(id='errno_', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Attribute(value=Name(id='current', ctx=Load()), attr='rlim_cur', ctx=Load()), Attribute(value=Name(id='current', ctx=Load()), attr='rlim_max', ctx=Load())], ctx=Load()))], decorator_list=[])], orelse=[])])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='prlimit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='__extra__all__', ctx=Load()), attr='extend', ctx=Load()), args=[ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='cext', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='RLIM')], keywords=[]), Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])])], is_async=0)])], keywords=[]))], orelse=[]), FunctionDef(name='calculate_avail_vmem', args=arguments(posonlyargs=[], args=[arg(arg='mems')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fallback for kernels < 3.14 where /proc/meminfo does not provide\n    "MemAvailable", see:\n    https://blog.famzah.net/2014/09/24/.\n\n    This code reimplements the algorithm outlined here:\n    https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/\n        commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773\n\n    We use this function also when "MemAvailable" returns 0 (possibly a\n    kernel bug, see: https://github.com/giampaolo/psutil/issues/1915).\n    In that case this routine matches "free" CLI tool result ("available"\n    column).\n\n    XXX: on recent kernels this calculation may differ by ~1.5% compared\n    to "MemAvailable:", as it\'s calculated slightly differently.\n    It is still way more realistic than doing (free + cached) though.\n    See:\n    * https://gitlab.com/procps-ng/procps/issues/42\n    * https://github.com/famzah/linux-memavailable-procfs/issues/2\n    ')), Assign(targets=[Name(id='free', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemFree:'), ctx=Load())), Assign(targets=[Name(id='fallback', ctx=Store())], value=BinOp(left=Name(id='free', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='mems', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Cached:'), Constant(value=0)], keywords=[]))), Try(body=[Assign(targets=[Name(id='lru_active_file', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Active(file):'), ctx=Load())), Assign(targets=[Name(id='lru_inactive_file', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Inactive(file):'), ctx=Load())), Assign(targets=[Name(id='slab_reclaimable', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'SReclaimable:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[BinOp(left=Constant(value='%r is missing from /proc/meminfo; using an approximation for calculating available memory'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='err', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()))], keywords=[])), Return(value=Name(id='fallback', ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/zoneinfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), body=[Return(value=Name(id='fallback', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='watermark_low', ctx=Store())], value=Constant(value=0)), With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'low')], keywords=[]), body=[AugAssign(target=Name(id='watermark_low', ctx=Store()), op=Add(), value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), AugAssign(target=Name(id='watermark_low', ctx=Store()), op=Mult(), value=Name(id='PAGESIZE', ctx=Load())), Assign(targets=[Name(id='avail', ctx=Store())], value=BinOp(left=Name(id='free', ctx=Load()), op=Sub(), right=Name(id='watermark_low', ctx=Load()))), Assign(targets=[Name(id='pagecache', ctx=Store())], value=BinOp(left=Name(id='lru_active_file', ctx=Load()), op=Add(), right=Name(id='lru_inactive_file', ctx=Load()))), AugAssign(target=Name(id='pagecache', ctx=Store()), op=Sub(), value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='pagecache', ctx=Load()), op=Div(), right=Constant(value=2)), Name(id='watermark_low', ctx=Load())], keywords=[])), AugAssign(target=Name(id='avail', ctx=Store()), op=Add(), value=Name(id='pagecache', ctx=Load())), AugAssign(target=Name(id='avail', ctx=Store()), op=Add(), value=BinOp(left=Name(id='slab_reclaimable', ctx=Load()), op=Sub(), right=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='slab_reclaimable', ctx=Load()), op=Div(), right=Constant(value=2.0)), Name(id='watermark_low', ctx=Load())], keywords=[]))), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='avail', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='virtual_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Report virtual memory stats.\n    This implementation mimicks procps-ng-3.3.12, aka "free" CLI tool:\n    https://gitlab.com/procps-ng/procps/blob/\n        24fd2605c51fccc375ab0287cec33aa767f06718/proc/sysinfo.c#L778-791\n    The returned values are supposed to match both "free" and "vmstat -s"\n    CLI tools.\n    ')), Assign(targets=[Name(id='missing_fields', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='mems', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/meminfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='mems', ctx=Load()), slice=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])]), Assign(targets=[Name(id='total', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemTotal:'), ctx=Load())), Assign(targets=[Name(id='free', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemFree:'), ctx=Load())), Try(body=[Assign(targets=[Name(id='buffers', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Buffers:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='buffers', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='buffers')], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='cached', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Cached:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='cached', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='cached')], keywords=[]))])], orelse=[AugAssign(target=Name(id='cached', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='mems', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'SReclaimable:'), Constant(value=0)], keywords=[]))], finalbody=[]), Try(body=[Assign(targets=[Name(id='shared', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Shmem:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='shared', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemShared:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='shared', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='shared')], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='active', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Active:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='active', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='active')], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='inactive', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Inactive:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='inactive', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Inact_dirty:'), ctx=Load()), op=Add(), right=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Inact_clean:'), ctx=Load())), op=Add(), right=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Inact_laundry:'), ctx=Load())))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='inactive', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='inactive')], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='slab', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'Slab:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='slab', ctx=Store())], value=Constant(value=0))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='free', ctx=Load())), op=Sub(), right=Name(id='cached', ctx=Load())), op=Sub(), right=Name(id='buffers', ctx=Load()))), If(test=Compare(left=Name(id='used', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='free', ctx=Load())))], orelse=[]), Try(body=[Assign(targets=[Name(id='avail', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'MemAvailable:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='avail', ctx=Store())], value=Call(func=Name(id='calculate_avail_vmem', ctx=Load()), args=[Name(id='mems', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Name(id='avail', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='avail', ctx=Store())], value=Call(func=Name(id='calculate_avail_vmem', ctx=Load()), args=[Name(id='mems', ctx=Load())], keywords=[]))], orelse=[])], finalbody=[]), If(test=Compare(left=Name(id='avail', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='avail', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='missing_fields', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='available')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='avail', ctx=Load()), ops=[Gt()], comparators=[Name(id='total', ctx=Load())]), body=[Assign(targets=[Name(id='avail', ctx=Store())], value=Name(id='free', ctx=Load()))], orelse=[])]), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='avail', ctx=Load())), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), If(test=Name(id='missing_fields', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value="%s memory stats couldn't be determined and %s set to 0"), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='missing_fields', ctx=Load())], keywords=[]), IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='missing_fields', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='was'), orelse=Constant(value='were'))], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='RuntimeWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[]), Return(value=Call(func=Name(id='svmem', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='avail', ctx=Load()), Name(id='percent', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='active', ctx=Load()), Name(id='inactive', ctx=Load()), Name(id='buffers', ctx=Load()), Name(id='cached', ctx=Load()), Name(id='shared', ctx=Load()), Name(id='slab', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='swap_memory', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return swap memory metrics.')), Assign(targets=[Name(id='mems', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/meminfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='mems', ctx=Load()), slice=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])]), Try(body=[Assign(targets=[Name(id='total', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'SwapTotal:'), ctx=Load())), Assign(targets=[Name(id='free', ctx=Store())], value=Subscript(value=Name(id='mems', ctx=Load()), slice=Constant(value=b'SwapFree:'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='total', ctx=Store()), Name(id='free', ctx=Store()), Name(id='unit_multiplier', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='linux_sysinfo', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='total', ctx=Store()), op=Mult(), value=Name(id='unit_multiplier', ctx=Load())), AugAssign(target=Name(id='free', ctx=Store()), op=Mult(), value=Name(id='unit_multiplier', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='used', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='free', ctx=Load()))), Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='usage_percent', ctx=Load()), args=[Name(id='used', ctx=Load()), Name(id='total', ctx=Load())], keywords=[keyword(arg='round_', value=Constant(value=1))])), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/vmstat'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), name='err', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value="'sin' and 'sout' swap memory stats couldn't "), op=Add(), right=BinOp(left=Constant(value='be determined and were set to 0 (%s)'), op=Mod(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])))), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='RuntimeWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Name(id='sin', ctx=Store()), Name(id='sout', ctx=Store())], value=Constant(value=0))])], orelse=[With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[Assign(targets=[Name(id='sin', ctx=Store()), Name(id='sout', ctx=Store())], value=Constant(value=None)), For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'pswpin')], keywords=[]), body=[Assign(targets=[Name(id='sin', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b' ')], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=4)), op=Mult(), right=Constant(value=1024)))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'pswpout')], keywords=[]), body=[Assign(targets=[Name(id='sout', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b' ')], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=4)), op=Mult(), right=Constant(value=1024)))], orelse=[])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='sin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='sout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Break()], orelse=[])], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="'sin' and 'sout' swap memory stats couldn't ")), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value='be determined and were set to 0')), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='RuntimeWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Name(id='sin', ctx=Store()), Name(id='sout', ctx=Store())], value=Constant(value=0))])])], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sswap', ctx=Load()), args=[Name(id='total', ctx=Load()), Name(id='used', ctx=Load()), Name(id='free', ctx=Load()), Name(id='percent', ctx=Load()), Name(id='sin', ctx=Load()), Name(id='sout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a named tuple representing the following system-wide\n    CPU times:\n    (user, nice, system, idle, iowait, irq, softirq [steal, [guest,\n     [guest_nice]]])\n    Last 3 fields may not be available on all Linux kernel versions.\n    ')), Assign(targets=[Name(id='procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='set_scputimes_ntuple', ctx=Load()), args=[Name(id='procfs_path', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Name(id='procfs_path', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='fields', ctx=Store())], value=Subscript(value=Name(id='values', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='scputimes', ctx=Load()), attr='_fields', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='fields', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='fields', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='scputimes', ctx=Load()), args=[Starred(value=Name(id='fields', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='per_cpu_times', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of namedtuple representing the CPU times\n    for every CPU available on the system.\n    ')), Assign(targets=[Name(id='procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='set_scputimes_ntuple', ctx=Load()), args=[Name(id='procfs_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cpus', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Name(id='procfs_path', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'cpu')], keywords=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=Subscript(value=Name(id='values', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='scputimes', ctx=Load()), attr='_fields', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='fields', ctx=Store())], value=ListComp(elt=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='fields', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Name(id='scputimes', ctx=Load()), args=[Starred(value=Name(id='fields', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cpus', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='cpus', ctx=Load()))])], decorator_list=[]), FunctionDef(name='cpu_count_logical', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of logical CPUs in the system.')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='sysconf', ctx=Load()), args=[Constant(value='SC_NPROCESSORS_ONLN')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='num', ctx=Store())], value=Constant(value=0)), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/cpuinfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value=b'processor')], keywords=[]), body=[AugAssign(target=Name(id='num', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])]), If(test=Compare(left=Name(id='num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='search', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='cpu\\d')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='search', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='num', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])])], orelse=[]), If(test=Compare(left=Name(id='num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='num', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='cpu_count_cores', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of CPU cores in the system.')), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='p1', ctx=Store())], value=Constant(value='/sys/devices/system/cpu/cpu[0-9]*/topology/core_cpus_list')), Assign(targets=[Name(id='p2', ctx=Store())], value=Constant(value='/sys/devices/system/cpu/cpu[0-9]*/topology/thread_siblings_list')), For(target=Name(id='path', ctx=Store()), iter=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Name(id='p1', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Name(id='p2', ctx=Load())], keywords=[])]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='ls', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ls', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='result', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='current_info', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/cpuinfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Subscript(value=Name(id='current_info', ctx=Load()), slice=Constant(value=b'physical id'), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='current_info', ctx=Load()), slice=Constant(value=b'cpu cores'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='current_info', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value=b'physical id'), Constant(value=b'cpu cores')], ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b'\t:'), Constant(value=1)], keywords=[])), Assign(targets=[Subscript(value=Name(id='current_info', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=BoolOp(op=Or(), values=[Name(id='result', ctx=Load()), Constant(value=None)]))], decorator_list=[]), FunctionDef(name='cpu_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return various CPU stats as a named tuple.')), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='ctx_switches', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='interrupts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='soft_interrupts', ctx=Store())], value=Constant(value=None)), For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'ctxt')], keywords=[]), body=[Assign(targets=[Name(id='ctx_switches', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'intr')], keywords=[]), body=[Assign(targets=[Name(id='interrupts', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'softirq')], keywords=[]), body=[Assign(targets=[Name(id='soft_interrupts', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ctx_switches', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='soft_interrupts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='interrupts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Break()], orelse=[])], orelse=[])]), Assign(targets=[Name(id='syscalls', ctx=Store())], value=Constant(value=0)), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpustats', ctx=Load()), args=[Name(id='ctx_switches', ctx=Load()), Name(id='interrupts', ctx=Load()), Name(id='soft_interrupts', ctx=Load()), Name(id='syscalls', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_cpu_get_cpuinfo_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return current CPU frequency from cpuinfo if available.')), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/cpuinfo'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value=b'cpu mhz')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b':'), Constant(value=1)], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy0')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpu0/cpufreq')], keywords=[])]), body=[FunctionDef(name='cpu_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return frequency metrics for all CPUs.\n        Contrarily to other OSes, Linux updates these values in\n        real-time.\n        ')), Assign(targets=[Name(id='cpuinfo_freqs', ctx=Store())], value=Call(func=Name(id='_cpu_get_cpuinfo_freq', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='paths', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpufreq/policy[0-9]*')], keywords=[]), Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/devices/system/cpu/cpu[0-9]*/cpufreq')], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='[0-9]+'), Name(id='x', ctx=Load())], keywords=[]), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[])))])), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='pjoin', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='cpuinfo_freqs', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='curr', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='cpuinfo_freqs', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Mult(), right=Constant(value=1000)))], orelse=[Assign(targets=[Name(id='curr', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='scaling_cur_freq')], keywords=[])], keywords=[keyword(arg='fallback', value=Constant(value=None))]))]), If(test=Compare(left=Name(id='curr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='curr', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='cpuinfo_cur_freq')], keywords=[])], keywords=[keyword(arg='fallback', value=Constant(value=None))])), If(test=Compare(left=Name(id='curr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value="can't find current frequency file")], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='curr', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='curr', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=1000))), Assign(targets=[Name(id='max_', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='scaling_max_freq')], keywords=[])], keywords=[])], keywords=[]), op=Div(), right=Constant(value=1000))), Assign(targets=[Name(id='min_', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='scaling_min_freq')], keywords=[])], keywords=[])], keywords=[]), op=Div(), right=Constant(value=1000))), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpufreq', ctx=Load()), args=[Name(id='curr', ctx=Load()), Name(id='min_', ctx=Load()), Name(id='max_', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])], orelse=[FunctionDef(name='cpu_freq', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Alternate implementation using /proc/cpuinfo.\n        min and max frequencies are not available and are set to None.\n        ')), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='scpufreq', ctx=Load()), args=[Name(id='x', ctx=Load()), Constant(value=0.0), Constant(value=0.0)], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='_cpu_get_cpuinfo_freq', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])]), Assign(targets=[Name(id='net_if_addrs', ctx=Store())], value=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_addrs', ctx=Load())), ClassDef(name='_Ipv6UnsupportedError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='Connections', bases=[], keywords=[], body=[Expr(value=Constant(value='A wrapper on top of /proc/net/* files, retrieving per-process\n    and system-wide open connections (TCP, UDP, UNIX) similarly to\n    "netstat -an".\n\n    Note: in case of UNIX sockets we\'re only able to determine the\n    local endpoint/path, not the one it\'s connected to.\n    According to [1] it would be possible but not easily.\n\n    [1] http://serverfault.com/a/417946\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tcp4', ctx=Store())], value=Tuple(elts=[Constant(value='tcp'), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='tcp6', ctx=Store())], value=Tuple(elts=[Constant(value='tcp6'), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='udp4', ctx=Store())], value=Tuple(elts=[Constant(value='udp'), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='udp6', ctx=Store())], value=Tuple(elts=[Constant(value='udp6'), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_DGRAM', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='unix', ctx=Store())], value=Tuple(elts=[Constant(value='unix'), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNIX', ctx=Load()), Constant(value=None)], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tmap', ctx=Store())], value=Dict(keys=[Constant(value='all'), Constant(value='tcp'), Constant(value='tcp4'), Constant(value='tcp6'), Constant(value='udp'), Constant(value='udp4'), Constant(value='udp6'), Constant(value='unix'), Constant(value='inet'), Constant(value='inet4'), Constant(value='inet6')], values=[Tuple(elts=[Name(id='tcp4', ctx=Load()), Name(id='tcp6', ctx=Load()), Name(id='udp4', ctx=Load()), Name(id='udp6', ctx=Load()), Name(id='unix', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp4', ctx=Load()), Name(id='tcp6', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp4', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp6', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='udp4', ctx=Load()), Name(id='udp6', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='udp4', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='udp6', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='unix', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp4', ctx=Load()), Name(id='tcp6', ctx=Load()), Name(id='udp4', ctx=Load()), Name(id='udp6', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp4', ctx=Load()), Name(id='udp4', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='tcp6', ctx=Load()), Name(id='udp6', ctx=Load())], ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_proc_inodes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inodes', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), For(target=Name(id='fd', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/fd'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Name(id='pid', ctx=Load())], ctx=Load()))], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='inode', ctx=Store())], value=Call(func=Name(id='readlink', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/fd/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Name(id='pid', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Continue()]), ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENAMETOOLONG', ctx=Load())]), body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), Continue()], orelse=[]), Raise()])], orelse=[If(test=Call(func=Attribute(value=Name(id='inode', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='socket:[')], keywords=[]), body=[Assign(targets=[Name(id='inode', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='inode', ctx=Load()), slice=Slice(lower=Constant(value=8)), ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='inodes', ctx=Load()), slice=Name(id='inode', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='pid', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], finalbody=[])], orelse=[]), Return(value=Name(id='inodes', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_all_inodes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inodes', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='pid', ctx=Store()), iter=Call(func=Name(id='pids', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='inodes', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_proc_inodes', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load()), Name(id='PermissionError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='inodes', ctx=Load()))], decorator_list=[]), FunctionDef(name='decode_address', args=arguments(posonlyargs=[], args=[arg(arg='addr'), arg(arg='family')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Accept an "ip:port" address as displayed in /proc/net/*\n        and convert it into a human readable form, like:\n\n        "0500000A:0016" -> ("10.0.0.5", 22)\n        "0000000000000000FFFF00000100007F:9E49" -> ("::ffff:127.0.0.1", 40521)\n\n        The IP address portion is a little or big endian four-byte\n        hexadecimal number; that is, the least significant byte is listed\n        first, so we need to reverse the order of the bytes to convert it\n        to an IP address.\n        The port is represented as a two-byte hexadecimal number.\n\n        Reference:\n        http://linuxdevcenter.com/pub/a/linux/2000/11/16/LinuxAdmin.html\n        ')), Assign(targets=[Tuple(elts=[Name(id='ip', ctx=Store()), Name(id='port', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='addr', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[])), Assign(targets=[Name(id='port', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='port', ctx=Load()), Constant(value=16)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='port', ctx=Load())), body=[Return(value=Tuple(elts=[], ctx=Load()))], orelse=[]), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='ip', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='family', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())]), body=[If(test=Name(id='LITTLE_ENDIAN', ctx=Load()), body=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntop', ctx=Load()), args=[Name(id='family', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b16decode', ctx=Load()), args=[Name(id='ip', ctx=Load())], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntop', ctx=Load()), args=[Name(id='family', ctx=Load()), Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b16decode', ctx=Load()), args=[Name(id='ip', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b16decode', ctx=Load()), args=[Name(id='ip', ctx=Load())], keywords=[])), Try(body=[If(test=Name(id='LITTLE_ENDIAN', ctx=Load()), body=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntop', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>4I'), Starred(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='<4I'), Name(id='ip', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='inet_ntop', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load()), Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='<4I'), Starred(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='<4I'), Name(id='ip', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='supports_ipv6', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Name(id='_Ipv6UnsupportedError', ctx=Load()))], orelse=[Raise()])])], orelse=[], finalbody=[])]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='addr', ctx=Load()), args=[Name(id='ip', ctx=Load()), Name(id='port', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='process_inet', args=arguments(posonlyargs=[], args=[arg(arg='file'), arg(arg='family'), arg(arg='type_'), arg(arg='inodes'), arg(arg='filter_pid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Parse /proc/net/tcp* and /proc/net/udp* files.')), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='6')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))]), body=[Return()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='lineno', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='f', ctx=Load()), Constant(value=1)], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='laddr', ctx=Store()), Name(id='raddr', ctx=Store()), Name(id='status', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='inode', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=10)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='error while parsing %s; malformed line %s %r'), op=Mod(), right=Tuple(elts=[Name(id='file', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='inode', ctx=Load()), ops=[In()], comparators=[Name(id='inodes', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='pid', ctx=Store()), Name(id='fd', ctx=Store())], ctx=Store())], value=Subscript(value=Subscript(value=Name(id='inodes', ctx=Load()), slice=Name(id='inode', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='pid', ctx=Store()), Name(id='fd', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='filter_pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='filter_pid', ctx=Load()), ops=[NotEq()], comparators=[Name(id='pid', ctx=Load())])]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='type_', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())]), body=[Assign(targets=[Name(id='status', ctx=Store())], value=Subscript(value=Name(id='TCP_STATUSES', ctx=Load()), slice=Name(id='status', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='status', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_NONE', ctx=Load()))]), Try(body=[Assign(targets=[Name(id='laddr', ctx=Store())], value=Call(func=Attribute(value=Name(id='Connections', ctx=Load()), attr='decode_address', ctx=Load()), args=[Name(id='laddr', ctx=Load()), Name(id='family', ctx=Load())], keywords=[])), Assign(targets=[Name(id='raddr', ctx=Store())], value=Call(func=Attribute(value=Name(id='Connections', ctx=Load()), attr='decode_address', ctx=Load()), args=[Name(id='raddr', ctx=Load()), Name(id='family', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='_Ipv6UnsupportedError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='fd', ctx=Load()), Name(id='family', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='pid', ctx=Load())], ctx=Load())))])], orelse=[])])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='process_unix', args=arguments(posonlyargs=[], args=[arg(arg='file'), arg(arg='family'), arg(arg='inodes'), arg(arg='filter_pid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Parse /proc/net/unix files.')), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='type_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='inode', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='tokens', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=7)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[If(test=Compare(left=Constant(value=' '), ops=[NotIn()], comparators=[Name(id='line', ctx=Load())]), body=[Continue()], orelse=[]), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='error while parsing %s; malformed line %r'), op=Mod(), right=Tuple(elts=[Name(id='file', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='inode', ctx=Load()), ops=[In()], comparators=[Name(id='inodes', ctx=Load())]), body=[Assign(targets=[Name(id='pairs', ctx=Store())], value=Subscript(value=Name(id='inodes', ctx=Load()), slice=Name(id='inode', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='pairs', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())], ctx=Load()))]), For(target=Tuple(elts=[Name(id='pid', ctx=Store()), Name(id='fd', ctx=Store())], ctx=Store()), iter=Name(id='pairs', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='filter_pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='filter_pid', ctx=Load()), ops=[NotEq()], comparators=[Name(id='pid', ctx=Load())])]), body=[Continue()], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=8)]), body=Subscript(value=Name(id='tokens', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), orelse=Constant(value=''))), Assign(targets=[Name(id='type_', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='socktype_to_enum', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='type_', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='raddr', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='status', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='CONN_NONE', ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Name(id='fd', ctx=Load()), Name(id='family', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='path', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='pid', ctx=Load())], ctx=Load())))])], orelse=[])], orelse=[])])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='tmap', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid %r kind argument; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='kind', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='tmap', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='pid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='inodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_proc_inodes', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='inodes', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='inodes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_all_inodes', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='proto_name', ctx=Store()), Name(id='family', ctx=Store()), Name(id='type_', ctx=Store())], ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='tmap', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='%s/net/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Name(id='proto_name', ctx=Load())], ctx=Load()))), If(test=Compare(left=Name(id='family', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_inet', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='family', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='inodes', ctx=Load())], keywords=[keyword(arg='filter_pid', value=Name(id='pid', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_unix', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='family', ctx=Load()), Name(id='inodes', ctx=Load())], keywords=[keyword(arg='filter_pid', value=Name(id='pid', ctx=Load()))]))]), For(target=Tuple(elts=[Name(id='fd', ctx=Store()), Name(id='family', ctx=Store()), Name(id='type_', ctx=Store()), Name(id='laddr', ctx=Store()), Name(id='raddr', ctx=Store()), Name(id='status', ctx=Store()), Name(id='bound_pid', ctx=Store())], ctx=Store()), iter=Name(id='ls', ctx=Load()), body=[If(test=Name(id='pid', ctx=Load()), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pconn', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='family', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sconn', ctx=Load()), args=[Name(id='fd', ctx=Load()), Name(id='family', ctx=Load()), Name(id='type_', ctx=Load()), Name(id='laddr', ctx=Load()), Name(id='raddr', ctx=Load()), Name(id='status', ctx=Load()), Name(id='bound_pid', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_connections', ctx=Store())], value=Call(func=Name(id='Connections', ctx=Load()), args=[], keywords=[])), FunctionDef(name='net_connections', args=arguments(posonlyargs=[], args=[arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='inet')]), body=[Expr(value=Constant(value='Return system-wide open connections.')), Return(value=Call(func=Attribute(value=Name(id='_connections', ctx=Load()), attr='retrieve', ctx=Load()), args=[Name(id='kind', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='net_io_counters', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return network I/O statistics for every network interface\n    installed on the system as a dict of raw tuples.\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/net/dev'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='retdict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()), body=[Assign(targets=[Name(id='colon', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value=':')], keywords=[])), Assert(test=Compare(left=Name(id='colon', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Name(id='colon', ctx=Load())), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='colon', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='bytes_recv', ctx=Store()), Name(id='packets_recv', ctx=Store()), Name(id='errin', ctx=Store()), Name(id='dropin', ctx=Store()), Name(id='fifoin', ctx=Store()), Name(id='framein', ctx=Store()), Name(id='compressedin', ctx=Store()), Name(id='multicastin', ctx=Store()), Name(id='bytes_sent', ctx=Store()), Name(id='packets_sent', ctx=Store()), Name(id='errout', ctx=Store()), Name(id='dropout', ctx=Store()), Name(id='fifoout', ctx=Store()), Name(id='collisionsout', ctx=Store()), Name(id='carrierout', ctx=Store()), Name(id='compressedout', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Name(id='fields', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='retdict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='bytes_sent', ctx=Load()), Name(id='bytes_recv', ctx=Load()), Name(id='packets_sent', ctx=Load()), Name(id='packets_recv', ctx=Load()), Name(id='errin', ctx=Load()), Name(id='errout', ctx=Load()), Name(id='dropin', ctx=Load()), Name(id='dropout', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='retdict', ctx=Load()))], decorator_list=[]), FunctionDef(name='net_if_stats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get NIC stats (isup, duplex, speed, mtu).')), Assign(targets=[Name(id='duplex_map', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='cext', ctx=Load()), attr='DUPLEX_FULL', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='DUPLEX_HALF', ctx=Load()), Attribute(value=Name(id='cext', ctx=Load()), attr='DUPLEX_UNKNOWN', ctx=Load())], values=[Name(id='NIC_DUPLEX_FULL', ctx=Load()), Name(id='NIC_DUPLEX_HALF', ctx=Load()), Name(id='NIC_DUPLEX_UNKNOWN', ctx=Load())])), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='net_io_counters', ctx=Load()), args=[], keywords=[]), attr='keys', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='mtu', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_mtu', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='net_if_flags', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='duplex', ctx=Store()), Name(id='speed', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='net_if_duplex_speed', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENODEV', ctx=Load())]), body=[Raise()], orelse=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))])])], orelse=[Assign(targets=[Name(id='output_flags', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='isup', ctx=Store())], value=Compare(left=Constant(value='running'), ops=[In()], comparators=[Name(id='flags', ctx=Load())])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='snicstats', ctx=Load()), args=[Name(id='isup', ctx=Load()), Subscript(value=Name(id='duplex_map', ctx=Load()), slice=Name(id='duplex', ctx=Load()), ctx=Load()), Name(id='speed', ctx=Load()), Name(id='mtu', ctx=Load()), Name(id='output_flags', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='disk_usage', ctx=Store())], value=Attribute(value=Name(id='_psposix', ctx=Load()), attr='disk_usage', ctx=Load())), FunctionDef(name='disk_io_counters', args=arguments(posonlyargs=[], args=[arg(arg='perdisk')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return disk I/O statistics for every disk installed on the\n    system as a dict of raw tuples.\n    ')), FunctionDef(name='read_procfs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/diskstats'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]))]), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='flen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='flen', ctx=Load()), ops=[Eq()], comparators=[Constant(value=15)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=3), ctx=Load())), Assign(targets=[Name(id='reads', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='reads_merged', ctx=Store()), Name(id='rbytes', ctx=Store()), Name(id='rtime', ctx=Store()), Name(id='writes', ctx=Store()), Name(id='writes_merged', ctx=Store()), Name(id='wbytes', ctx=Store()), Name(id='wtime', ctx=Store()), Name(id='_', ctx=Store()), Name(id='busy_time', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=14)), ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='flen', ctx=Load()), ops=[Eq()], comparators=[Constant(value=14)]), Compare(left=Name(id='flen', ctx=Load()), ops=[GtE()], comparators=[Constant(value=18)])]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='reads', ctx=Store()), Name(id='reads_merged', ctx=Store()), Name(id='rbytes', ctx=Store()), Name(id='rtime', ctx=Store()), Name(id='writes', ctx=Store()), Name(id='writes_merged', ctx=Store()), Name(id='wbytes', ctx=Store()), Name(id='wtime', ctx=Store()), Name(id='_', ctx=Store()), Name(id='busy_time', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Slice(lower=Constant(value=3), upper=Constant(value=14)), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='flen', ctx=Load()), ops=[Eq()], comparators=[Constant(value=7)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='reads', ctx=Store()), Name(id='rbytes', ctx=Store()), Name(id='writes', ctx=Store()), Name(id='wbytes', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='rtime', ctx=Store()), Name(id='wtime', ctx=Store()), Name(id='reads_merged', ctx=Store()), Name(id='writes_merged', ctx=Store()), Name(id='busy_time', ctx=Store())], value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='not sure how to interpret line %r'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))])])]), Expr(value=Yield(value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='reads', ctx=Load()), Name(id='writes', ctx=Load()), Name(id='rbytes', ctx=Load()), Name(id='wbytes', ctx=Load()), Name(id='rtime', ctx=Load()), Name(id='wtime', ctx=Load()), Name(id='reads_merged', ctx=Load()), Name(id='writes_merged', ctx=Load()), Name(id='busy_time', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='read_sysfs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='block', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Constant(value='/sys/block')], keywords=[]), body=[For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='_', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='/sys/block'), Name(id='block', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Constant(value='stat'), ops=[NotIn()], comparators=[Name(id='files', ctx=Load())]), body=[Continue()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Constant(value='stat')], keywords=[])], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='reads', ctx=Store()), Name(id='reads_merged', ctx=Store()), Name(id='rbytes', ctx=Store()), Name(id='rtime', ctx=Store()), Name(id='writes', ctx=Store()), Name(id='writes_merged', ctx=Store()), Name(id='wbytes', ctx=Store()), Name(id='wtime', ctx=Store()), Name(id='_', ctx=Store()), Name(id='busy_time', ctx=Store())], ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Slice(upper=Constant(value=10)), ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='reads', ctx=Load()), Name(id='writes', ctx=Load()), Name(id='rbytes', ctx=Load()), Name(id='wbytes', ctx=Load()), Name(id='rtime', ctx=Load()), Name(id='wtime', ctx=Load()), Name(id='reads_merged', ctx=Load()), Name(id='writes_merged', ctx=Load()), Name(id='busy_time', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='%s/diskstats'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), body=[Assign(targets=[Name(id='gen', ctx=Store())], value=Call(func=Name(id='read_procfs', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Constant(value='/sys/block')], keywords=[]), body=[Assign(targets=[Name(id='gen', ctx=Store())], value=Call(func=Name(id='read_sysfs', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[BinOp(left=Constant(value='%s/diskstats nor /sys/block filesystem are available on this system'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]))])]), Assign(targets=[Name(id='retdict', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='entry', ctx=Store()), iter=Name(id='gen', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='reads', ctx=Store()), Name(id='writes', ctx=Store()), Name(id='rbytes', ctx=Store()), Name(id='wbytes', ctx=Store()), Name(id='rtime', ctx=Store()), Name(id='wtime', ctx=Store()), Name(id='reads_merged', ctx=Store()), Name(id='writes_merged', ctx=Store()), Name(id='busy_time', ctx=Store())], ctx=Store())], value=Name(id='entry', ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='perdisk', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Name(id='is_storage_device', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))]), body=[Continue()], orelse=[]), AugAssign(target=Name(id='rbytes', ctx=Store()), op=Mult(), value=Name(id='DISK_SECTOR_SIZE', ctx=Load())), AugAssign(target=Name(id='wbytes', ctx=Store()), op=Mult(), value=Name(id='DISK_SECTOR_SIZE', ctx=Load())), Assign(targets=[Subscript(value=Name(id='retdict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='reads', ctx=Load()), Name(id='writes', ctx=Load()), Name(id='rbytes', ctx=Load()), Name(id='wbytes', ctx=Load()), Name(id='rtime', ctx=Load()), Name(id='wtime', ctx=Load()), Name(id='reads_merged', ctx=Load()), Name(id='writes_merged', ctx=Load()), Name(id='busy_time', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='retdict', ctx=Load()))], decorator_list=[]), ClassDef(name='RootFsDeviceFinder', bases=[], keywords=[], body=[Expr(value=Constant(value='disk_partitions() may return partitions with device == "/dev/root"\n    or "rootfs". This container class uses different strategies to try to\n    obtain the real device path. Resources:\n    https://bootlin.com/blog/find-root-device/\n    https://www.systutorials.com/how-to-find-the-disk-where-root-is-on-in-bash-on-linux/.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='major'), Constant(value='minor')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Constant(value='/')], keywords=[]), attr='st_dev', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='major', ctx=Load()), args=[Name(id='dev', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='minor', ctx=Load()), args=[Name(id='dev', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='ask_proc_partitions', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/partitions'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=2)), ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=4)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='major', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='minor', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=3), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='major', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Load())]), Compare(left=Name(id='minor', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Load())])]), body=[If(test=Name(id='name', ctx=Load()), body=[Return(value=BinOp(left=Constant(value='/dev/%s'), op=Mod(), right=Name(id='name', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='ask_sys_dev_block', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='/sys/dev/block/%s:%s/uevent'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Load())], ctx=Load()))), With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='DEVNAME=')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='rpartition', ctx=Load()), args=[Constant(value='DEVNAME=')], keywords=[]), slice=Constant(value=2), ctx=Load())), If(test=Name(id='name', ctx=Load()), body=[Return(value=BinOp(left=Constant(value='/dev/%s'), op=Mod(), right=Name(id='name', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='ask_sys_class_block', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='needle', ctx=Store())], value=BinOp(left=Constant(value='%s:%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='minor', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='iglob', ctx=Load()), args=[Constant(value='/sys/class/block/*/dev')], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open_text', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Continue()])], orelse=[With(items=[withitem(context_expr=Name(id='f', ctx=Load()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Name(id='needle', ctx=Load())]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])], keywords=[])), Return(value=BinOp(left=Constant(value='/dev/%s'), op=Mod(), right=Name(id='name', ctx=Load())))], orelse=[])])], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='find', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ask_proc_partitions', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ask_sys_dev_block', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ask_sys_class_block', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='disk_partitions', args=arguments(posonlyargs=[], args=[arg(arg='all')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return mounted disk partitions as a list of namedtuples.')), Assign(targets=[Name(id='fstypes', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='all', ctx=Load())), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/filesystems'), op=Mod(), right=Name(id='procfs_path', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='nodev')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='fstypes', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='fstype', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\t')], keywords=[]), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Name(id='fstype', ctx=Load()), ops=[Eq()], comparators=[Constant(value='zfs')]), body=[Expr(value=Call(func=Attribute(value=Name(id='fstypes', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value='zfs')], keywords=[]))], orelse=[])])], orelse=[])])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='procfs_path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/proc')]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Constant(value='/etc/mtab')], keywords=[])]), body=[Assign(targets=[Name(id='mounts_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Constant(value='/etc/mtab')], keywords=[]))], orelse=[Assign(targets=[Name(id='mounts_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[BinOp(left=Constant(value='%s/self/mounts'), op=Mod(), right=Name(id='procfs_path', ctx=Load()))], keywords=[]))]), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='partitions', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='disk_partitions', ctx=Load()), args=[Name(id='mounts_path', ctx=Load())], keywords=[])), For(target=Name(id='partition', ctx=Store()), iter=Name(id='partitions', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='device', ctx=Store()), Name(id='mountpoint', ctx=Store()), Name(id='fstype', ctx=Store()), Name(id='opts', ctx=Store())], ctx=Store())], value=Name(id='partition', ctx=Load())), If(test=Compare(left=Name(id='device', ctx=Load()), ops=[Eq()], comparators=[Constant(value='none')]), body=[Assign(targets=[Name(id='device', ctx=Store())], value=Constant(value=''))], orelse=[]), If(test=Compare(left=Name(id='device', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='/dev/root'), Constant(value='rootfs')], ctx=Load())]), body=[Assign(targets=[Name(id='device', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Call(func=Name(id='RootFsDeviceFinder', ctx=Load()), args=[], keywords=[]), attr='find', ctx=Load()), args=[], keywords=[]), Name(id='device', ctx=Load())]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='all', ctx=Load())), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='device', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), Compare(left=Name(id='fstype', ctx=Load()), ops=[NotIn()], comparators=[Name(id='fstypes', ctx=Load())])]), body=[Continue()], orelse=[])], orelse=[]), Assign(targets=[Name(id='maxfile', ctx=Store()), Name(id='maxpath', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sdiskpart', ctx=Load()), args=[Name(id='device', ctx=Load()), Name(id='mountpoint', ctx=Load()), Name(id='fstype', ctx=Load()), Name(id='opts', ctx=Load()), Name(id='maxfile', ctx=Load()), Name(id='maxpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[]), FunctionDef(name='sensors_temperatures', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return hardware (CPU and others) temperatures as a dict\n    including hardware name, label, current, max and critical\n    temperatures.\n\n    Implementation notes:\n    - /sys/class/hwmon looks like the most recent interface to\n      retrieve this info, and this implementation relies on it\n      only (old distros will probably use something else)\n    - lm-sensors on Ubuntu 16.04 relies on /sys/class/hwmon\n    - /sys/class/thermal/thermal_zone* is another one but it's more\n      difficult to parse\n    ")), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/hwmon/hwmon*/temp*_*')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='basenames', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/hwmon/hwmon*/device/temp*_*')], keywords=[])], keywords=[])), Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_')], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='basenames', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='basenames2', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/devices/platform/coretemp.*/hwmon/hwmon*/temp*_*')], keywords=[])), Assign(targets=[Name(id='repl', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='/sys/devices/platform/coretemp.*/hwmon/')], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='basenames2', ctx=Load()), body=[Assign(targets=[Name(id='altname', ctx=Store())], value=Call(func=Attribute(value=Name(id='repl', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='/sys/class/hwmon/'), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='altname', ctx=Load()), ops=[NotIn()], comparators=[Name(id='basenames', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='basenames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='base', ctx=Store()), iter=Name(id='basenames', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_input'))), Assign(targets=[Name(id='current', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Name(id='bcat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Constant(value=1000.0))), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), Constant(value='name')], keywords=[])), Assign(targets=[Name(id='unit_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='high', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_max'))], keywords=[keyword(arg='fallback', value=Constant(value=None))])), Assign(targets=[Name(id='critical', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_crit'))], keywords=[keyword(arg='fallback', value=Constant(value=None))])), Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_label'))], keywords=[keyword(arg='fallback', value=Constant(value=''))]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='high', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='high', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='high', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=1000.0)))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='high', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='critical', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='critical', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='critical', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=1000.0)))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='critical', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='unit_name', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='label', ctx=Load()), Name(id='current', ctx=Load()), Name(id='high', ctx=Load()), Name(id='critical', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='basenames', ctx=Load())), body=[Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/thermal/thermal_zone*')], keywords=[])), Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='basenames', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='base', ctx=Store()), iter=Name(id='basenames', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Constant(value='temp')], keywords=[])), Assign(targets=[Name(id='current', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Name(id='bcat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Constant(value=1000.0))), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Constant(value='type')], keywords=[])), Assign(targets=[Name(id='unit_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='trip_paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='/trip_point*'))], keywords=[])), Assign(targets=[Name(id='trip_points', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='_')], keywords=[]), slice=Slice(lower=Constant(value=0), upper=Constant(value=3)), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='trip_paths', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='critical', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='high', ctx=Store())], value=Constant(value=None)), For(target=Name(id='trip_point', ctx=Store()), iter=Name(id='trip_points', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), BinOp(left=Name(id='trip_point', ctx=Load()), op=Add(), right=Constant(value='_type'))], keywords=[])), Assign(targets=[Name(id='trip_type', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='fallback', value=Constant(value=''))]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='trip_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='critical')]), body=[Assign(targets=[Name(id='critical', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), BinOp(left=Name(id='trip_point', ctx=Load()), op=Add(), right=Constant(value='_temp'))], keywords=[])], keywords=[keyword(arg='fallback', value=Constant(value=None))]))], orelse=[If(test=Compare(left=Name(id='trip_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='high')]), body=[Assign(targets=[Name(id='high', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), BinOp(left=Name(id='trip_point', ctx=Load()), op=Add(), right=Constant(value='_temp'))], keywords=[])], keywords=[keyword(arg='fallback', value=Constant(value=None))]))], orelse=[])]), If(test=Compare(left=Name(id='high', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='high', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='high', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=1000.0)))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='high', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='critical', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='critical', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='critical', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=1000.0)))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='critical', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='unit_name', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Name(id='current', ctx=Load()), Name(id='high', ctx=Load()), Name(id='critical', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sensors_fans', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return hardware fans info (for CPU and other peripherals) as a\n    dict including hardware label and current speed.\n\n    Implementation notes:\n    - /sys/class/hwmon looks like the most recent interface to\n      retrieve this info, and this implementation relies on it\n      only (old distros will probably use something else)\n    - lm-sensors on Ubuntu 16.04 relies on /sys/class/hwmon\n    ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[])), Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/hwmon/hwmon*/fan*_*')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='basenames', ctx=Load())), body=[Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='/sys/class/hwmon/hwmon*/device/fan*_*')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='basenames', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_')], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='basenames', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), For(target=Name(id='base', ctx=Store()), iter=Name(id='basenames', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='current', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='bcat', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_input'))], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='unit_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), Constant(value='name')], keywords=[])], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='_label'))], keywords=[keyword(arg='fallback', value=Constant(value=''))]), attr='strip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='unit_name', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sfan', ctx=Load()), args=[Name(id='label', ctx=Load()), Name(id='current', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sensors_battery', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return battery information.\n    Implementation note: it appears /sys/class/power_supply/BAT0/\n    directory structure may vary and provide files with the same\n    meaning but under different names, see:\n    https://github.com/giampaolo/psutil/issues/966.\n    ')), Assign(targets=[Name(id='null', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='multi_bcat', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='paths'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Attempt to read the content of multiple files which may\n        not exist. If none of them exist return None.\n        ')), For(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='fallback', value=Name(id='null', ctx=Load()))])), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[NotEq()], comparators=[Name(id='null', ctx=Load())]), body=[Try(body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='bats', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='POWER_SUPPLY_PATH', ctx=Load())], keywords=[]), ifs=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='BAT')], keywords=[]), Compare(left=Constant(value='battery'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])])], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='bats', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='POWER_SUPPLY_PATH', ctx=Load()), Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='bats', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='energy_now', ctx=Store())], value=Call(func=Name(id='multi_bcat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/energy_now')), BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/charge_now'))], keywords=[])), Assign(targets=[Name(id='power_now', ctx=Store())], value=Call(func=Name(id='multi_bcat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/power_now')), BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/current_now'))], keywords=[])), Assign(targets=[Name(id='energy_full', ctx=Store())], value=Call(func=Name(id='multi_bcat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/energy_full')), BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/charge_full'))], keywords=[])), Assign(targets=[Name(id='time_to_empty', ctx=Store())], value=Call(func=Name(id='multi_bcat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/time_to_empty_now'))], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='energy_full', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='energy_now', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Try(body=[Assign(targets=[Name(id='percent', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=100.0), op=Mult(), right=Name(id='energy_now', ctx=Load())), op=Div(), right=Name(id='energy_full', ctx=Load())))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Assign(targets=[Name(id='percent', ctx=Store())], value=Constant(value=0.0))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='percent', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='cat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/capacity'))], keywords=[keyword(arg='fallback', value=UnaryOp(op=USub(), operand=Constant(value=1)))])], keywords=[])), If(test=Compare(left=Name(id='percent', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return(value=Constant(value=None))], orelse=[])]), Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='online', ctx=Store())], value=Call(func=Name(id='multi_bcat', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='POWER_SUPPLY_PATH', ctx=Load()), Constant(value='AC0/online')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='POWER_SUPPLY_PATH', ctx=Load()), Constant(value='AC/online')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='online', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Compare(left=Name(id='online', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], orelse=[Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='cat', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Constant(value='/status'))], keywords=[keyword(arg='fallback', value=Constant(value=''))]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='discharging')]), body=[Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='status', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='charging'), Constant(value='full')], ctx=Load())]), body=[Assign(targets=[Name(id='power_plugged', ctx=Store())], value=Constant(value=True))], orelse=[])])]), If(test=Name(id='power_plugged', ctx=Load()), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNLIMITED', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='energy_now', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='power_now', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Try(body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='energy_now', ctx=Load()), op=Div(), right=Name(id='power_now', ctx=Load())), op=Mult(), right=Constant(value=3600))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ZeroDivisionError', ctx=Load()), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Name(id='time_to_empty', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='time_to_empty', ctx=Load()), op=Mult(), right=Constant(value=60))], keywords=[])), If(test=Compare(left=Name(id='secsleft', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='secsleft', ctx=Store())], value=Attribute(value=Name(id='_common', ctx=Load()), attr='POWER_TIME_UNKNOWN', ctx=Load()))])])]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='sbattery', ctx=Load()), args=[Name(id='percent', ctx=Load()), Name(id='secsleft', ctx=Load()), Name(id='power_plugged', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='users', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return currently connected users as a list of namedtuples.')), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='rawlist', ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='users', ctx=Load()), args=[], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Name(id='rawlist', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='tty', ctx=Store()), Name(id='hostname', ctx=Store()), Name(id='tstamp', ctx=Store()), Name(id='user_process', ctx=Store()), Name(id='pid', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='user_process', ctx=Load())), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='hostname', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=':0.0'), Constant(value=':0')], ctx=Load())]), body=[Assign(targets=[Name(id='hostname', ctx=Store())], value=Constant(value='localhost'))], orelse=[]), Assign(targets=[Name(id='nt', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='suser', ctx=Load()), args=[Name(id='user', ctx=Load()), BoolOp(op=Or(), values=[Name(id='tty', ctx=Load()), Constant(value=None)]), Name(id='hostname', ctx=Load()), Name(id='tstamp', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='nt', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[]), FunctionDef(name='boot_time', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the system boot time expressed in seconds since the epoch.')), Global(names=['BOOT_TIME']), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='%s/stat'), op=Mod(), right=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'btime')], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='BOOT_TIME', ctx=Store())], value=Name(id='ret', ctx=Load())), Return(value=Name(id='ret', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value="line 'btime' not found in %s"), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]))])], decorator_list=[]), FunctionDef(name='pids', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a list of PIDs currently running on the system.')), Return(value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Call(func=Name(id='b', ctx=Load()), args=[Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])], is_async=0)]))], decorator_list=[]), FunctionDef(name='pid_exists', args=arguments(posonlyargs=[], args=[arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check for the existence of a unix PID. Linux TIDs are not\n    supported (always return False).\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='pid_exists', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/status'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]), Name(id='pid', ctx=Load())], ctx=Load()))), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Tgid:')], keywords=[]), body=[Assign(targets=[Name(id='tgid', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='tgid', ctx=Load()), ops=[Eq()], comparators=[Name(id='pid', ctx=Load())]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="'Tgid' line not found in %s"), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='EnvironmentError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Compare(left=Name(id='pid', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='pids', ctx=Load()), args=[], keywords=[])]))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='ppid_map', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Obtain a {pid: ppid, ...} dict for all running processes in\n    one shot. Used to speed up Process.children().\n    ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[])), For(target=Name(id='pid', ctx=Store()), iter=Call(func=Name(id='pids', ctx=Load()), args=[], keywords=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/stat'), op=Mod(), right=Tuple(elts=[Name(id='procfs_path', ctx=Load()), Name(id='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='rpar', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value=b')')], keywords=[])), Assign(targets=[Name(id='dset', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='rpar', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ppid', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='dset', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='pid', ctx=Load()), ctx=Store())], value=Name(id='ppid', ctx=Load()))], finalbody=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='wrap_exceptions', args=arguments(posonlyargs=[], args=[arg(arg='fun')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decorator which translates bare OSError and IOError exceptions\n    into NoSuchProcess and AccessDenied.\n    ')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='fun', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AccessDenied', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='ProcessLookupError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])), body=[Raise(exc=Call(func=Name(id='NoSuchProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fun', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), ClassDef(name='Process', bases=[], keywords=[], body=[Expr(value=Constant(value='Linux process implementation.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='pid'), Constant(value='_name'), Constant(value='_ppid'), Constant(value='_procfs_path'), Constant(value='_cache')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pid')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Store())], value=Name(id='pid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Store())], value=Call(func=Name(id='get_procfs_path', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_is_zombie', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/stat'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Assign(targets=[Name(id='rpar', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value=b')')], keywords=[])), Assign(targets=[Name(id='status', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='rpar', ctx=Load()), op=Add(), right=Constant(value=2)), upper=BinOp(left=Name(id='rpar', ctx=Load()), op=Add(), right=Constant(value=3))), ctx=Load())), Return(value=Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'Z')]))], finalbody=[])], decorator_list=[]), FunctionDef(name='_raise_if_zombie', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_zombie', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ZombieProcess', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_ppid', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_raise_if_not_alive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise NSP if the process disappeared on us.')), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_parse_stat_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse /proc/{pid}/stat file and return a dict with various\n        process info.\n        Using "man proc" as a reference: where "man proc" refers to\n        position N always subtract 3 (e.g ppid position 4 in\n        \'man proc\' == position 1 in here).\n        The return value is cached in case oneshot() ctx manager is\n        in use.\n        ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='bcat', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/stat'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='rpar', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value=b')')], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=b'(')], keywords=[]), op=Add(), right=Constant(value=1)), upper=Name(id='rpar', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='rpar', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='status'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='ppid'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='ttynr'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=4), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='utime'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=11), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='stime'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=12), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='children_utime'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=13), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='children_stime'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=14), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='create_time'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=19), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='cpu_num'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=36), ctx=Load())), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Constant(value='blkio_ticks'), ctx=Store())], value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=39), ctx=Load())), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='_read_status_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read /proc/{pid}/stat file and return its content.\n        The return value is cached in case oneshot() ctx manager is\n        in use.\n        ')), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/status'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='_read_smaps_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/smaps'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load()), Name(id='memoize_when_activated', ctx=Load())]), FunctionDef(name='oneshot_enter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_read_smaps_file', ctx=Load()), attr='cache_activate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='oneshot_exit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_read_smaps_file', ctx=Load()), attr='cache_deactivate', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='name'), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='decode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='exe', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='readlink', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/exe'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='lexists', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), body=[Return(value=Constant(value=''))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cmdline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/cmdline'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[])), Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='sep', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\x00')], keywords=[]), body=Constant(value='\x00'), orelse=Constant(value=' '))), If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='\x00')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cmdline', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Constant(value=' '), ops=[In()], comparators=[Name(id='data', ctx=Load())])]), body=[Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]))], orelse=[]), Return(value=Name(id='cmdline', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='environ', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_text', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/environ'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Return(value=Call(func=Name(id='parse_environ_block', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tty_nr', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='ttynr'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='tmap', ctx=Store())], value=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='get_terminal_map', ctx=Load()), args=[], keywords=[])), Try(body=[Return(value=Subscript(value=Name(id='tmap', ctx=Load()), slice=Name(id='tty_nr', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Constant(value='/proc/%s/io'), op=Mod(), right=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], keywords=[]), body=[FunctionDef(name='io_counters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/io'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='fields', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='line', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b': ')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Continue()])], orelse=[Assign(targets=[Subscript(value=Name(id='fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[])], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Name(id='fields', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='%s file was empty'), op=Mod(), right=Name(id='fname', ctx=Load()))], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='pio', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'syscr'), ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'syscw'), ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'read_bytes'), ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'write_bytes'), ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'rchar'), ctx=Load()), Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=b'wchar'), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%r field was not found in %s; found fields are %r'), op=Mod(), right=Tuple(elts=[Subscript(value=Attribute(value=Name(id='err', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='fname', ctx=Load()), Name(id='fields', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), FunctionDef(name='cpu_times', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='utime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='utime'), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='stime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='stime'), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='children_utime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='children_utime'), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='children_stime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='children_stime'), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='iowait', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value='blkio_ticks'), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Return(value=Call(func=Name(id='pcputimes', ctx=Load()), args=[Name(id='utime', ctx=Load()), Name(id='stime', ctx=Load()), Name(id='children_utime', ctx=Load()), Name(id='children_stime', ctx=Load()), Name(id='iowait', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='cpu_num', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='What CPU the process is on.')), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='cpu_num'), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='wait', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='_psposix', ctx=Load()), attr='wait_pid', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='timeout', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='create_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctime', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='create_time'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='bt', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='BOOT_TIME', ctx=Load()), Call(func=Name(id='boot_time', ctx=Load()), args=[], keywords=[])])), Return(value=BinOp(left=BinOp(left=Name(id='ctime', ctx=Load()), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load())), op=Add(), right=Name(id='bt', ctx=Load())))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='memory_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/statm'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Tuple(elts=[Name(id='vms', ctx=Store()), Name(id='rss', ctx=Store()), Name(id='shared', ctx=Store()), Name(id='text', ctx=Store()), Name(id='lib', ctx=Store()), Name(id='data', ctx=Store()), Name(id='dirty', ctx=Store())], ctx=Store())], value=GeneratorExp(elt=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), op=Mult(), right=Name(id='PAGESIZE', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=7)), ctx=Load()), ifs=[], is_async=0)]))]), Return(value=Call(func=Name(id='pmem', ctx=Load()), args=[Name(id='rss', ctx=Load()), Name(id='vms', ctx=Load()), Name(id='shared', ctx=Load()), Name(id='text', ctx=Load()), Name(id='lib', ctx=Load()), Name(id='data', ctx=Load()), Name(id='dirty', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), If(test=BoolOp(op=Or(), values=[Name(id='HAS_PROC_SMAPS_ROLLUP', ctx=Load()), Name(id='HAS_PROC_SMAPS', ctx=Load())]), body=[FunctionDef(name='_parse_smaps_rollup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], value=Constant(value=0)), With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{}/{}/smaps_rollup'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Private_')], keywords=[]), body=[AugAssign(target=Name(id='uss', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Pss:')], keywords=[]), body=[Assign(targets=[Name(id='pss', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Swap:')], keywords=[]), body=[Assign(targets=[Name(id='swap', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], orelse=[])])])], orelse=[])]), Return(value=Tuple(elts=[Name(id='uss', ctx=Load()), Name(id='pss', ctx=Load()), Name(id='swap', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_parse_smaps', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_private_re'), arg(arg='_pss_re'), arg(arg='_swap_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'\\nPrivate.*:\\s+(\\d+)')], keywords=[]), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'\\nPss\\:\\s+(\\d+)')], keywords=[]), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'\\nSwap\\:\\s+(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='smaps_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_smaps_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='uss', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='_private_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='smaps_data', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='pss', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='_pss_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='smaps_data', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=1024))), Assign(targets=[Name(id='swap', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='_swap_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='smaps_data', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), op=Mult(), right=Constant(value=1024))), Return(value=Tuple(elts=[Name(id='uss', ctx=Load()), Name(id='pss', ctx=Load()), Name(id='swap', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='memory_full_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='HAS_PROC_SMAPS_ROLLUP', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_smaps_rollup', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ProcessLookupError', ctx=Load()), Name(id='FileNotFoundError', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[BinOp(left=Constant(value='ignore %r for pid %s and retry using /proc/pid/smaps'), op=Mod(), right=Tuple(elts=[Name(id='err', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_smaps', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Tuple(elts=[Name(id='uss', ctx=Store()), Name(id='pss', ctx=Store()), Name(id='swap', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_smaps', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='basic_mem', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='memory_info', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='pfullmem', ctx=Load()), args=[Starred(value=BinOp(left=Name(id='basic_mem', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='uss', ctx=Load()), Name(id='pss', ctx=Load()), Name(id='swap', ctx=Load())], ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[Assign(targets=[Name(id='memory_full_info', ctx=Store())], value=Name(id='memory_info', ctx=Load()))]), If(test=Name(id='HAS_PROC_SMAPS', ctx=Load()), body=[FunctionDef(name='memory_maps', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return process's mapped memory regions as a list of named\n            tuples. Fields are explained in 'man proc'; here is an updated\n            (Apr 2012) version: http://goo.gl/fmebo.\n\n            /proc/{PID}/smaps does not exist on kernels < 2.6.14 or if\n            CONFIG_MMU kernel configuration option is not enabled.\n            ")), FunctionDef(name='get_blocks', args=arguments(posonlyargs=[], args=[arg(arg='lines'), arg(arg='current_block')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=None), Constant(value=5)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=b':')], keywords=[])), body=[Expr(value=Yield(value=Tuple(elts=[Call(func=Attribute(value=Name(id='current_block', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]), Name(id='data', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='current_block', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[Try(body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=1024)))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='fields', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'VmFlags:')], keywords=[]), body=[Continue()], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="don't know how to interpret line %r"), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))])])], orelse=[], finalbody=[])])], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Call(func=Attribute(value=Name(id='current_block', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]), Name(id='data', ctx=Load())], ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_smaps_file', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[])), Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b'\n')], keywords=[])), Assign(targets=[Name(id='ls', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='first_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='current_block', ctx=Store())], value=List(elts=[Name(id='first_line', ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='header', ctx=Store()), Name(id='data', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='get_blocks', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='current_block', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='hfields', ctx=Store())], value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=None), Constant(value=5)], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='addr', ctx=Store()), Name(id='perms', ctx=Store()), Name(id='offset', ctx=Store()), Name(id='dev', ctx=Store()), Name(id='inode', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Name(id='hfields', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='addr', ctx=Store()), Name(id='perms', ctx=Store()), Name(id='offset', ctx=Store()), Name(id='dev', ctx=Store()), Name(id='inode', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=BinOp(left=Name(id='hfields', ctx=Load()), op=Add(), right=List(elts=[Constant(value='')], ctx=Load())))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='[anon]'))], orelse=[If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='decode', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=' (deleted)')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='path_exists_strict', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=10))), ctx=Load()))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='ls', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='decode', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[]), Call(func=Name(id='decode', ctx=Load()), args=[Name(id='perms', ctx=Load())], keywords=[]), Name(id='path', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Rss:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Size:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Pss:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Shared_Clean:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Shared_Dirty:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Private_Clean:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Private_Dirty:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Referenced:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Anonymous:'), Constant(value=0)], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=b'Swap:'), Constant(value=0)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ls', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), FunctionDef(name='cwd', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='readlink', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/cwd'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_ctx_switches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_ctxsw_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'ctxt_switches:\\t(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ctxsw', ctx=Store())], value=Call(func=Attribute(value=Name(id='_ctxsw_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ctxsw', ctx=Load())), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[BinOp(left=Constant(value="'voluntary_ctxt_switches' and 'nonvoluntary_ctxt_switches'lines were not found in %s/%s/status; the kernel is probably older than 2.6.23"), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pctxsw', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='ctxsw', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='ctxsw', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_threads', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_num_threads_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'Threads:\\t(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='_num_threads_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='thread_ids', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/task'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='thread_ids', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='hit_enoent', ctx=Store())], value=Constant(value=False)), For(target=Name(id='thread_id', ctx=Store()), iter=Name(id='thread_ids', ctx=Load()), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/task/%s/stat'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='thread_id', ctx=Load())], ctx=Load()))), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='st', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='hit_enoent', ctx=Store())], value=Constant(value=True)), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='st', ctx=Store())], value=Subscript(value=Name(id='st', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Name(id='st', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=b')')], keywords=[]), op=Add(), right=Constant(value=2))), ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='st', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b' ')], keywords=[])), Assign(targets=[Name(id='utime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=11), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='stime', ctx=Store())], value=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='values', ctx=Load()), slice=Constant(value=12), ctx=Load())], keywords=[]), op=Div(), right=Name(id='CLOCK_TICKS', ctx=Load()))), Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pthread', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='thread_id', ctx=Load())], keywords=[]), Name(id='utime', ctx=Load()), Name(id='stime', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='hit_enoent', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_not_alive', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='getpriority', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='nice_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext_posix', ctx=Load()), attr='setpriority', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), If(test=Name(id='HAS_CPU_AFFINITY', ctx=Load()), body=[FunctionDef(name='cpu_affinity_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='_get_eligible_cpus', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'Cpus_allowed_list:\\t(\\d+)-(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='match', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='match', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='per_cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='cpu_affinity_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cpus')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_cpu_affinity_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='cpus', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), name='err', body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='err', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load())])]), body=[Assign(targets=[Name(id='eligible_cpus', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_eligible_cpus', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='all_cpus', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='per_cpu_times', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='cpu', ctx=Store()), iter=Name(id='cpus', ctx=Load()), body=[If(test=Compare(left=Name(id='cpu', ctx=Load()), ops=[NotIn()], comparators=[Name(id='all_cpus', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid CPU number %r; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='cpu', ctx=Load()), Name(id='eligible_cpus', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cpu', ctx=Load()), ops=[NotIn()], comparators=[Name(id='eligible_cpus', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='CPU number %r is not eligible; choose between %s'), op=Mod(), right=Tuple(elts=[Name(id='cpu', ctx=Load()), Name(id='eligible_cpus', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), If(test=Name(id='HAS_PROC_IO_PRIORITY', ctx=Load()), body=[FunctionDef(name='ionice_get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ioclass', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_ioprio_get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='enum', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ioclass', ctx=Store())], value=Call(func=Name(id='IOPriority', ctx=Load()), args=[Name(id='ioclass', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pionice', ctx=Load()), args=[Name(id='ioclass', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='ionice_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ioclass'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='value', ctx=Load()), Compare(left=Name(id='ioclass', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Name(id='IOPRIO_CLASS_IDLE', ctx=Load()), Name(id='IOPRIO_CLASS_NONE', ctx=Load())], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%r ioclass accepts no value'), op=Mod(), right=Name(id='ioclass', ctx=Load()))], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), Compare(left=Name(id='value', ctx=Load()), ops=[Gt()], comparators=[Constant(value=7)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='value not in 0-7 range')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='cext', ctx=Load()), attr='proc_ioprio_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='ioclass', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), If(test=Compare(left=Name(id='prlimit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[FunctionDef(name='rlimit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resource_'), arg(arg='limits')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="can't use prlimit() against PID 0 process")], keywords=[]))], orelse=[]), Try(body=[If(test=Compare(left=Name(id='limits', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='prlimit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='resource_', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='limits', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='second argument must be a (soft, hard) tuple, got %s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='limits', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='prlimit', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='resource_', ctx=Load()), Name(id='limits', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOSYS', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_zombie', ctx=Load()), args=[], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], orelse=[]), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='status'), ctx=Load())), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Call(func=Attribute(value=Name(id='letter', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='PROC_STATUSES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='letter', ctx=Load()), Constant(value='?')], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='open_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='retlist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/fd'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Name(id='hit_enoent', ctx=Store())], value=Constant(value=False)), For(target=Name(id='fd', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='file', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/fd/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()))), Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='readlink', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='hit_enoent', ctx=Store())], value=Constant(value=True)), Continue()]), ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='err', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENAMETOOLONG', ctx=Load())]), body=[Expr(value=Call(func=Name(id='debug', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), Continue()], orelse=[]), Raise()])], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), Call(func=Name(id='isfile_strict', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/fdinfo/%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load()), Name(id='fd', ctx=Load())], ctx=Load()))), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open_binary', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), Constant(value=8)], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='ProcessLookupError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='hit_enoent', ctx=Store())], value=Constant(value=True))])], orelse=[Assign(targets=[Name(id='mode', ctx=Store())], value=Call(func=Name(id='file_flags_to_mode', ctx=Load()), args=[Name(id='flags', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ntuple', ctx=Store())], value=Call(func=Name(id='popenfile', ctx=Load()), args=[Name(id='path', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[]), Name(id='mode', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retlist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ntuple', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[])], finalbody=[])], orelse=[]), If(test=Name(id='hit_enoent', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_not_alive', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='retlist', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='connections', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='inet')]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='_connections', ctx=Load()), attr='retrieve', ctx=Load()), args=[Name(id='kind', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_if_not_alive', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='num_fds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[BinOp(left=Constant(value='%s/%s/fd'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_procfs_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], keywords=[])], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='ppid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_stat_file', ctx=Load()), args=[], keywords=[]), slice=Constant(value='ppid'), ctx=Load())], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='uids', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_uids_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'Uid:\\t(\\d+)\\t(\\d+)\\t(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='real', ctx=Store()), Name(id='effective', ctx=Store()), Name(id='saved', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='_uids_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='puids', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='real', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='effective', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='saved', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())]), FunctionDef(name='gids', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_gids_re')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'Gid:\\t(\\d+)\\t(\\d+)\\t(\\d+)')], keywords=[])]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_status_file', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='real', ctx=Store()), Name(id='effective', ctx=Store()), Name(id='saved', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='_gids_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='_common', ctx=Load()), attr='pgids', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='real', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='effective', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='saved', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='wrap_exceptions', ctx=Load())])], decorator_list=[])], type_ignores=[])