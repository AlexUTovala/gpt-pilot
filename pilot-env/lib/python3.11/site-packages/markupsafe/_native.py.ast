Module(body=[Import(names=[alias(name='typing', asname='t')]), ImportFrom(names=[alias(name='Markup')], level=1), FunctionDef(name='escape', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace the characters ``&``, ``<``, ``>``, ``\'``, and ``"`` in\n    the string with HTML-safe sequences. Use this if you need to display\n    text that might contain such characters in HTML.\n\n    If the object has an ``__html__`` method, it is called and the\n    return value is assumed to already be safe for HTML.\n\n    :param s: An object to be converted to a string and escaped.\n    :return: A :class:`Markup` string with the escaped text.\n    ')), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='s', ctx=Load()), Constant(value='__html__')], keywords=[]), body=[Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='__html__', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='&'), Constant(value='&amp;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), Constant(value='&gt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='<'), Constant(value='&lt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value='&#39;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='"'), Constant(value='&#34;')], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Markup', ctx=Load())), FunctionDef(name='escape_silent', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Like :func:`escape` but treats ``None`` as the empty string.\n    Useful with optional values, as otherwise you get the string\n    ``'None'`` when the value is ``None``.\n\n    >>> escape(None)\n    Markup('None')\n    >>> escape_silent(None)\n    Markup('')\n    ")), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Markup', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Markup', ctx=Load())), FunctionDef(name='soft_str', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert an object to a string if it isn\'t already. This preserves\n    a :class:`Markup` string rather than converting it back to a basic\n    string, so it will still be marked as safe and won\'t be escaped\n    again.\n\n    >>> value = escape("<User 1>")\n    >>> value\n    Markup(\'&lt;User 1&gt;\')\n    >>> escape(str(value))\n    Markup(\'&amp;lt;User 1&amp;gt;\')\n    >>> escape(soft_str(value))\n    Markup(\'&lt;User 1&gt;\')\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])