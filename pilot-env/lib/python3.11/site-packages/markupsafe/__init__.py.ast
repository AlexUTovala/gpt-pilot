Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='re')]), Import(names=[alias(name='string')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing', asname='t')]), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='typing_extensions', asname='te')]), ClassDef(name='HasHTML', bases=[Attribute(value=Name(id='te', ctx=Load()), attr='Protocol', ctx=Load())], keywords=[], body=[FunctionDef(name='__html__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_P', ctx=Store())], value=Call(func=Attribute(value=Name(id='te', ctx=Load()), attr='ParamSpec', ctx=Load()), args=[Constant(value='_P')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='2.1.3')), Assign(targets=[Name(id='_strip_comments_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<!--.*?-->'), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_strip_tags_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<.*?>'), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), FunctionDef(name='_simple_escaping_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Constant(value='t.Callable[_P, str]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='wrapped', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Constant(value='Markup'))], vararg=arg(arg='args', annotation=Constant(value='_P.args')), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Constant(value='_P.kwargs')), defaults=[]), body=[Assign(targets=[Name(id='arg_list', ctx=Store())], value=Call(func=Name(id='_escape_argspec', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_escape_argspec', ctx=Load()), args=[Name(id='kwargs', ctx=Load()), Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Name(id='func', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='arg_list', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])], returns=Constant(value='Markup')), Return(value=Name(id='wrapped', ctx=Load()))], decorator_list=[], returns=Constant(value='t.Callable[_P, Markup]')), ClassDef(name='Markup', bases=[Name(id='str', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A string that is ready to be safely inserted into an HTML or XML\n    document, either because it was escaped or because it was marked\n    safe.\n\n    Passing an object to the constructor converts it to text and wraps\n    it to mark it safe without escaping. To escape the text, use the\n    :meth:`escape` class method instead.\n\n    >>> Markup("Hello, <em>World</em>!")\n    Markup(\'Hello, <em>World</em>!\')\n    >>> Markup(42)\n    Markup(\'42\')\n    >>> Markup.escape("Hello, <em>World</em>!")\n    Markup(\'Hello &lt;em&gt;World&lt;/em&gt;!\')\n\n    This implements the ``__html__()`` interface that some frameworks\n    use. Passing an object that implements ``__html__()`` will wrap the\n    output of that method, marking it safe.\n\n    >>> class Foo:\n    ...     def __html__(self):\n    ...         return \'<a href="/foo">foo</a>\'\n    ...\n    >>> Markup(Foo())\n    Markup(\'<a href="/foo">foo</a>\')\n\n    This is a subclass of :class:`str`. It has the same methods, but\n    escapes their arguments and returns a ``Markup`` instance.\n\n    >>> Markup("<em>%s</em>") % ("foo & bar",)\n    Markup(\'<em>foo &amp; bar</em>\')\n    >>> Markup("<em>Hello</em> ") + "<foo>"\n    Markup(\'<em>Hello</em> &lt;foo&gt;\')\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='base', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value='strict')]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='base', ctx=Load()), Constant(value='__html__')], keywords=[]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='base', ctx=Load()), attr='__html__', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='base', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='base', ctx=Load()), Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__html__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='HasHTML')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='__html__')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__add__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__radd__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='HasHTML')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='__html__')], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), attr='__add__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__mul__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='num', annotation=Constant(value='te.SupportsIndex'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='num', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__mul__', ctx=Load()), args=[Name(id='num', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[], returns=Constant(value='te.Self')), Assign(targets=[Name(id='__rmul__', ctx=Store())], value=Name(id='__mul__', ctx=Load())), FunctionDef(name='__mod__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='_MarkupEscapeHelper', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='arg', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), Constant(value='__getitem__')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=Call(func=Name(id='_MarkupEscapeHelper', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='arg', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='_MarkupEscapeHelper', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[])], ctx=Load()))])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__mod__', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__repr__', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='join', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='seq', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='HasHTML')], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), Name(id='seq', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), Assign(targets=[Attribute(value=Name(id='join', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='str', ctx=Load()), attr='join', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='maxsplit', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='maxsplit', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Constant(value='te.Self'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='split', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='str', ctx=Load()), attr='split', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='rsplit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='maxsplit', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='rsplit', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='maxsplit', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Constant(value='te.Self'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='rsplit', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='str', ctx=Load()), attr='rsplit', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='splitlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='keepends', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='splitlines', ctx=Load()), args=[Name(id='keepends', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='List', ctx=Load()), slice=Constant(value='te.Self'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='splitlines', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='str', ctx=Load()), attr='splitlines', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='unescape', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert escaped markup back into a text string. This replaces\n        HTML entities with the characters they represent.\n\n        >>> Markup("Main &raquo; <em>About</em>").unescape()\n        \'Main » <em>About</em>\'\n        ')), ImportFrom(module='html', names=[alias(name='unescape')], level=0), Return(value=Call(func=Name(id='unescape', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='striptags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meth:`unescape` the markup, remove tags, and normalize\n        whitespace to single spaces.\n\n        >>> Markup("Main &raquo;\t<em>About</em>").striptags()\n        \'Main » About\'\n        ')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='_strip_comments_re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=''), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='_strip_tags_re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=''), Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), attr='unescape', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='escape', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='s', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Escape a string. Calls :func:`escape` and ensures that for\n        subclasses the correct type is returned.\n        ')), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='rv', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Name(id='cls', ctx=Load())]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='rv', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='te.Self')), Assign(targets=[Name(id='__getitem__', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='__getitem__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='capitalize', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='capitalize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='title', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='title', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lower', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='lower', ctx=Load())], keywords=[])), Assign(targets=[Name(id='upper', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='upper', ctx=Load())], keywords=[])), Assign(targets=[Name(id='replace', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='replace', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ljust', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='ljust', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rjust', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='rjust', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lstrip', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='lstrip', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rstrip', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='rstrip', ctx=Load())], keywords=[])), Assign(targets=[Name(id='center', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='center', ctx=Load())], keywords=[])), Assign(targets=[Name(id='strip', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='strip', ctx=Load())], keywords=[])), Assign(targets=[Name(id='translate', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='translate', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expandtabs', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='expandtabs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='swapcase', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='swapcase', ctx=Load())], keywords=[])), Assign(targets=[Name(id='zfill', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='zfill', ctx=Load())], keywords=[])), Assign(targets=[Name(id='casefold', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='casefold', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), body=[Assign(targets=[Name(id='removeprefix', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='removeprefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='removesuffix', ctx=Store())], value=Call(func=Name(id='_simple_escaping_wrapper', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='removesuffix', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='partition', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='l', ctx=Store()), Name(id='s', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='partition', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='cls', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), Call(func=Name(id='cls', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), Call(func=Name(id='cls', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='te.Self'), Constant(value='te.Self'), Constant(value='te.Self')], ctx=Load()), ctx=Load())), FunctionDef(name='rpartition', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='l', ctx=Store()), Name(id='s', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='rpartition', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='cls', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), Call(func=Name(id='cls', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), Call(func=Name(id='cls', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='te.Self'), Constant(value='te.Self'), Constant(value='te.Self')], ctx=Load()), ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='EscapeFormatter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='vformat', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='format_map', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='map', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='EscapeFormatter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='vformat', ctx=Load()), args=[Name(id='self', ctx=Load()), Tuple(elts=[], ctx=Load()), Name(id='map', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__html_format__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='format_spec', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='format_spec', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unsupported format specification for Markup.')], keywords=[]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='te.Self'))], decorator_list=[]), ClassDef(name='EscapeFormatter', bases=[Attribute(value=Name(id='string', ctx=Load()), attr='Formatter', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='escape')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='escape', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), Name(id='Markup', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Store())], value=Name(id='escape', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='format_spec', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__html_format__')], keywords=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='__html_format__', ctx=Load()), args=[Name(id='format_spec', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__html__')], keywords=[]), body=[If(test=Name(id='format_spec', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Format specifier '), FormattedValue(value=Name(id='format_spec', ctx=Load()), conversion=-1), Constant(value=' given, but '), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' does not define __html_format__. A class that defines __html__ must define __html_format__ to work with format specifiers.')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='__html__', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='string', ctx=Load()), attr='Formatter', ctx=Load()), attr='format_field', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='value', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='format_spec', ctx=Load())], keywords=[])], keywords=[]))])]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='rv', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_ListOrDict', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='_ListOrDict'), Name(id='list', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), FunctionDef(name='_escape_argspec', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='_ListOrDict', ctx=Load())), arg(arg='iterable', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Iterable', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load())), arg(arg='escape', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), Name(id='Markup', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Helper for various string-wrapped functions.')), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='iterable', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='__html__')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[], returns=Name(id='_ListOrDict', ctx=Load())), ClassDef(name='_MarkupEscapeHelper', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper for :meth:`Markup.__mod__`.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='obj'), Constant(value='escape')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='escape', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), Name(id='Markup', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Store())], value=Name(id='obj', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Store())], value=Name(id='escape', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='te.Self')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__int__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__float__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='float', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], decorator_list=[]), Try(body=[ImportFrom(module='_speedups', names=[alias(name='escape', asname='escape')], level=1), ImportFrom(module='_speedups', names=[alias(name='escape_silent', asname='escape_silent')], level=1), ImportFrom(module='_speedups', names=[alias(name='soft_str', asname='soft_str')], level=1)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='_native', names=[alias(name='escape', asname='escape')], level=1), ImportFrom(module='_native', names=[alias(name='escape_silent', asname='escape_silent')], level=1), ImportFrom(module='_native', names=[alias(name='soft_str', asname='soft_str')], level=1)])], orelse=[], finalbody=[])], type_ignores=[])