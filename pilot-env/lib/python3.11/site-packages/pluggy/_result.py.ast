Module(body=[Expr(value=Constant(value='\nHook wrapper "result" utilities.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Callable')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='typing', names=[alias(name='final')], level=0), ImportFrom(module='typing', names=[alias(name='Generator')], level=0), ImportFrom(module='typing', names=[alias(name='Generic')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='typing', names=[alias(name='Type')], level=0), ImportFrom(module='typing', names=[alias(name='TypeVar')], level=0), Assign(targets=[Name(id='_ExcInfo', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ResultType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='ResultType')], keywords=[])), FunctionDef(name='_raise_wrapfail', args=arguments(posonlyargs=[], args=[arg(arg='wrap_controller', annotation=BinOp(left=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Subscript(value=Name(id='Result', ctx=Load()), slice=Name(id='ResultType', ctx=Load()), ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='object', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='co', ctx=Store())], value=Attribute(value=Name(id='wrap_controller', ctx=Load()), attr='gi_code', ctx=Load())), Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='wrap_controller at %r %s:%d %s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='co', ctx=Load()), attr='co_name', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_filename', ctx=Load()), Attribute(value=Name(id='co', ctx=Load()), attr='co_firstlineno', ctx=Load()), Name(id='msg', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), ClassDef(name='HookCallError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Hook was called incorrectly.'))], decorator_list=[]), ClassDef(name='Result', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='ResultType', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An object used to inspect and set the result in a :ref:`hook wrapper\n    <hookwrappers>`.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_result'), Constant(value='_exception')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result', annotation=BinOp(left=Name(id='ResultType', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='exception', annotation=BinOp(left=Name(id='BaseException', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Name(id='result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], value=Name(id='exception', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='excinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Assign(targets=[Name(id='exc', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Load())), If(test=Compare(left=Name(id='exc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[Return(value=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), Name(id='exc', ctx=Load()), Attribute(value=Name(id='exc', ctx=Load()), attr='__traceback__', ctx=Load())], ctx=Load()))])], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='_ExcInfo', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='exception', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=BinOp(left=Name(id='BaseException', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='from_call', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='ResultType', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':meta private:')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='result', ctx=Store()), Name(id='exception', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='exception', ctx=Store())], value=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='exception', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Result', ctx=Load()), slice=Name(id='ResultType', ctx=Load()), ctx=Load())), FunctionDef(name='force_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result', annotation=Name(id='ResultType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Force the result(s) to ``result``.\n\n        If the hook was marked as a ``firstresult`` a single value should\n        be set, otherwise set a (modified) list of results. Any exceptions\n        found during invocation will be deleted.\n\n        This overrides any previous result or exception.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Name(id='result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='force_exception', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exception', annotation=Name(id='BaseException', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Force the result to fail with ``exception``.\n\n        This overrides any previous result or exception.\n\n        .. versionadded:: 1.1.0\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], value=Name(id='exception', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_result', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the result(s) for this hook call.\n\n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned, otherwise a list of results.\n        ')), Assign(targets=[Name(id='__tracebackhide__', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='exc', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Load())), If(test=Compare(left=Name(id='exc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='ResultType', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='exc', ctx=Load()), attr='with_traceback', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='__traceback__', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='ResultType', ctx=Load()))], decorator_list=[Name(id='final', ctx=Load())]), Assign(targets=[Name(id='_Result', ctx=Store())], value=Name(id='Result', ctx=Load()))], type_ignores=[])