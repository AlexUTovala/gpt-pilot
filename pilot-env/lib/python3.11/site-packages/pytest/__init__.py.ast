Module(body=[Expr(value=Constant(value='pytest: unit and functional testing with Python.')), ImportFrom(module='_pytest', names=[alias(name='__version__')], level=0), ImportFrom(module='_pytest', names=[alias(name='version_tuple')], level=0), ImportFrom(module='_pytest._code', names=[alias(name='ExceptionInfo')], level=0), ImportFrom(module='_pytest.assertion', names=[alias(name='register_assert_rewrite')], level=0), ImportFrom(module='_pytest.cacheprovider', names=[alias(name='Cache')], level=0), ImportFrom(module='_pytest.capture', names=[alias(name='CaptureFixture')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='cmdline')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='Config')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='console_main')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='ExitCode')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookimpl')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='hookspec')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='main')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='PytestPluginManager')], level=0), ImportFrom(module='_pytest.config', names=[alias(name='UsageError')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='OptionGroup')], level=0), ImportFrom(module='_pytest.config.argparsing', names=[alias(name='Parser')], level=0), ImportFrom(module='_pytest.debugging', names=[alias(name='pytestPDB', asname='__pytestPDB')], level=0), ImportFrom(module='_pytest.doctest', names=[alias(name='DoctestItem')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='fixture')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureLookupError')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='FixtureRequest')], level=0), ImportFrom(module='_pytest.fixtures', names=[alias(name='yield_fixture')], level=0), ImportFrom(module='_pytest.freeze_support', names=[alias(name='freeze_includes')], level=0), ImportFrom(module='_pytest.legacypath', names=[alias(name='TempdirFactory')], level=0), ImportFrom(module='_pytest.legacypath', names=[alias(name='Testdir')], level=0), ImportFrom(module='_pytest.logging', names=[alias(name='LogCaptureFixture')], level=0), ImportFrom(module='_pytest.main', names=[alias(name='Session')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='Mark')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='MARK_GEN', asname='mark')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='MarkDecorator')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='MarkGenerator')], level=0), ImportFrom(module='_pytest.mark', names=[alias(name='param')], level=0), ImportFrom(module='_pytest.monkeypatch', names=[alias(name='MonkeyPatch')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Collector')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='File')], level=0), ImportFrom(module='_pytest.nodes', names=[alias(name='Item')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='exit')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='fail')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='importorskip')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='skip')], level=0), ImportFrom(module='_pytest.outcomes', names=[alias(name='xfail')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='HookRecorder')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='LineMatcher')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='Pytester')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='RecordedHookCall')], level=0), ImportFrom(module='_pytest.pytester', names=[alias(name='RunResult')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Class')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Function')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Metafunc')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Module')], level=0), ImportFrom(module='_pytest.python', names=[alias(name='Package')], level=0), ImportFrom(module='_pytest.python_api', names=[alias(name='approx')], level=0), ImportFrom(module='_pytest.python_api', names=[alias(name='raises')], level=0), ImportFrom(module='_pytest.recwarn', names=[alias(name='deprecated_call')], level=0), ImportFrom(module='_pytest.recwarn', names=[alias(name='WarningsRecorder')], level=0), ImportFrom(module='_pytest.recwarn', names=[alias(name='warns')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='CollectReport')], level=0), ImportFrom(module='_pytest.reports', names=[alias(name='TestReport')], level=0), ImportFrom(module='_pytest.runner', names=[alias(name='CallInfo')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='Stash')], level=0), ImportFrom(module='_pytest.stash', names=[alias(name='StashKey')], level=0), ImportFrom(module='_pytest.terminal', names=[alias(name='TestShortLogReport')], level=0), ImportFrom(module='_pytest.tmpdir', names=[alias(name='TempPathFactory')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestAssertRewriteWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestCacheWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestCollectionWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestConfigWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestDeprecationWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestExperimentalApiWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestRemovedIn8Warning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestReturnNotNoneWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestUnhandledCoroutineWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestUnhandledThreadExceptionWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestUnknownMarkWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestUnraisableExceptionWarning')], level=0), ImportFrom(module='_pytest.warning_types', names=[alias(name='PytestWarning')], level=0), Assign(targets=[Name(id='set_trace', ctx=Store())], value=Attribute(value=Name(id='__pytestPDB', ctx=Load()), attr='set_trace', ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='__version__'), Constant(value='approx'), Constant(value='Cache'), Constant(value='CallInfo'), Constant(value='CaptureFixture'), Constant(value='Class'), Constant(value='cmdline'), Constant(value='Collector'), Constant(value='CollectReport'), Constant(value='Config'), Constant(value='console_main'), Constant(value='deprecated_call'), Constant(value='DoctestItem'), Constant(value='exit'), Constant(value='ExceptionInfo'), Constant(value='ExitCode'), Constant(value='fail'), Constant(value='File'), Constant(value='fixture'), Constant(value='FixtureLookupError'), Constant(value='FixtureRequest'), Constant(value='freeze_includes'), Constant(value='Function'), Constant(value='hookimpl'), Constant(value='HookRecorder'), Constant(value='hookspec'), Constant(value='importorskip'), Constant(value='Item'), Constant(value='LineMatcher'), Constant(value='LogCaptureFixture'), Constant(value='main'), Constant(value='mark'), Constant(value='Mark'), Constant(value='MarkDecorator'), Constant(value='MarkGenerator'), Constant(value='Metafunc'), Constant(value='Module'), Constant(value='MonkeyPatch'), Constant(value='OptionGroup'), Constant(value='Package'), Constant(value='param'), Constant(value='Parser'), Constant(value='PytestAssertRewriteWarning'), Constant(value='PytestCacheWarning'), Constant(value='PytestCollectionWarning'), Constant(value='PytestConfigWarning'), Constant(value='PytestDeprecationWarning'), Constant(value='PytestExperimentalApiWarning'), Constant(value='PytestRemovedIn8Warning'), Constant(value='PytestReturnNotNoneWarning'), Constant(value='Pytester'), Constant(value='PytestPluginManager'), Constant(value='PytestUnhandledCoroutineWarning'), Constant(value='PytestUnhandledThreadExceptionWarning'), Constant(value='PytestUnknownMarkWarning'), Constant(value='PytestUnraisableExceptionWarning'), Constant(value='PytestWarning'), Constant(value='raises'), Constant(value='RecordedHookCall'), Constant(value='register_assert_rewrite'), Constant(value='RunResult'), Constant(value='Session'), Constant(value='set_trace'), Constant(value='skip'), Constant(value='Stash'), Constant(value='StashKey'), Constant(value='version_tuple'), Constant(value='TempdirFactory'), Constant(value='TempPathFactory'), Constant(value='Testdir'), Constant(value='TestReport'), Constant(value='TestShortLogReport'), Constant(value='UsageError'), Constant(value='WarningsRecorder'), Constant(value='warns'), Constant(value='xfail'), Constant(value='yield_fixture')], ctx=Load())), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Instance')]), body=[ImportFrom(module='_pytest.python', names=[alias(name='Instance')], level=0), Return(value=Name(id='Instance', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module '), FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value=' has no attribute '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Name(id='object', ctx=Load()))], type_ignores=[])